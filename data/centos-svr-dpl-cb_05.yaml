- en: Chapter 5. Managing Filesystems and Storage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 管理文件系统和存储
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下食谱：
- en: Viewing the size of files and available storage
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看文件大小和可用存储
- en: Setting storage limits for users and groups
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户和组设置存储限制
- en: Creating a RAM disk
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建RAM磁盘
- en: Creating a RAID
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建RAID
- en: Replacing a device in a RAID
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在RAID中更换设备
- en: Creating a new LVM volume
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的LVM卷
- en: Removing an existing LVM volume
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有的LVM卷
- en: Adding storage and growing an LVM volume
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加存储并扩展LVM卷
- en: Working with LVM snapshots
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LVM快照
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The recipes in this chapter focus on leveraging your CentOS system's storage
    to maintain availability, increase reliability, and to keep your data safe against
    inevitable disk failures. You'll learn how to determine how much space your files
    take up and how much storage is still available. Then, you'll see how to put limits
    in place to ensure that users use the system's storage resources equitably. We'll
    also create a RAM disk, a memory-based low latency storage for frequently accessed
    data. Then you'll learn how to create and manage RAID arrays to provide reliable
    storage, and how to work with LVM volumes to allocate logical drives from storage
    pools to better utilize your system's total storage capacity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱侧重于利用您的CentOS系统存储来保持可用性、提高可靠性，并保护数据免受不可避免的磁盘故障。您将学习如何确定文件占用了多少空间，以及还有多少存储空间可用。接着，您将看到如何设置限制，以确保用户公平使用系统的存储资源。我们还将创建一个RAM磁盘，这是一个基于内存的低延迟存储，用于频繁访问的数据。然后，您将学习如何创建和管理RAID阵列，以提供可靠的存储，以及如何使用LVM卷从存储池中分配逻辑驱动器，以更好地利用系统的总存储容量。
- en: Viewing the size of files and available storage
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看文件大小和可用存储
- en: Programs and services can behave unexpectedly or stop working entirely when
    storage space runs tight, so it's important to know how much space is available
    on our system. This recipe introduces a handful of commands used to determine
    how large your files and directories are and how much storage is used and is available.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当存储空间紧张时，程序和服务可能会表现出意外行为或完全停止工作，因此了解系统中可用的空间非常重要。本篇介绍了一些命令，用于确定文件和目录的大小，以及已使用和可用的存储空间。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a working CentOS system. Administrative privileges may
    be needed depending on the permissions of the directories and files you want to
    inspect.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱需要一个正常工作的CentOS系统。根据您要检查的目录和文件的权限，可能需要管理员权限。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To display the storage capacity of a mounted filesystem, use the `df` command:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显示已挂载文件系统的存储容量，请使用`df`命令：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To view the size of a file, use the `ls` command:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看文件的大小，请使用`ls`命令：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To determine the size of a directory (the sum of sizes of all of its files),
    use the `du` command:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要确定一个目录的大小（即其所有文件大小的总和），请使用`du`命令：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The `df` command returns information about how much free space is available
    on a mounted filesystem. The preceding example asked for details about the root
    filesystem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`df`命令返回有关已挂载文件系统上可用空间的信息。前面的示例请求了有关根文件系统的详细信息。'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `-h` argument formats the information in a human-readable format, listing
    the values as megabytes, gigabytes, and so on, as opposed to block counts. When
    invoked without any arguments, `df` displays its information in 512-byte block
    counts for all mounted filesystems. We can specify one or more mount points with
    this command, in which case `df` reports only on those filesystems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`-h`参数将信息格式化为人类可读的格式，按兆字节、吉字节等显示值，而不是块计数。当没有任何参数时，`df`会以512字节的块计数显示所有已挂载文件系统的信息。我们可以使用此命令指定一个或多个挂载点，此时`df`只会报告这些文件系统的信息。'
- en: '![How it works...](img/image_05_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_05_001.jpg)'
- en: Values presented as megabytes and gigabytes are more informative than when given
    in block counts
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以兆字节和吉字节呈现的值比块计数提供了更多信息
- en: The output's first column, labeled `Filesystem`, and the last, labeled `Mounted
    on`, identifies the filesystem and mount point it's been made available on, respectively.
    The `Size` column shows the total amount of space the filesystem provides. The
    `Used` column shows how much of that space is occupied and the `Avail` column
    shows how much is still available. `Use%` shows how much space is occupied as
    a percentage.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第一列标记为 `Filesystem`，最后一列标记为 `Mounted on`，分别标识文件系统及其挂载点。`Size` 列显示文件系统提供的总空间。`Used`
    列显示该空间已占用的部分，`Avail` 列显示剩余可用空间。`Use%` 列显示占用空间的百分比。
- en: While `df` gives us a high-level view of our overall storage usage, to view
    the size of individual files we can use `ls`. The command supports a large number
    of arguments that show meta information for files and directories, such as their
    ownership details, create time, and size.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `df` 给了我们总体存储使用情况的概览，但要查看单个文件的大小，我们可以使用 `ls`。该命令支持大量参数，可以显示文件和目录的元信息，例如所有者详情、创建时间和大小。
- en: 'This recipe used the `-s` argument to return the file''s size and `-h` to again
    display the value in a human-readable format:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了 `-s` 参数返回文件大小，`-h` 参数则再次以易读格式显示该值：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you use `ls` to show the size of a directory, it will likely report 4.0 K
    regardless of which directory you choose. This is because directories aren't really
    containers holding files like we usually imagine; a directory is really a special
    file that contains an index listing the files that are within it. This index occupies
    a block's worth of storage. `ls` reports the amount of space the directory occupies
    as a file, not the sum of the sizes of its files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `ls` 来显示目录的大小，它可能会报告 4.0 K，而不管你选择哪个目录。这是因为目录并不像我们通常想象的那样是存放文件的容器；目录实际上是一个特殊的文件，包含了一个列出其中所有文件的索引。这个索引占用了一个块的存储空间。`ls`
    报告的是目录作为一个文件所占用的空间，而不是其中所有文件大小的总和。
- en: 'To view the total size of all of the files in a directory, which is usually
    what we want when talking about directory size, we need to use the `du` command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看一个目录中所有文件的总大小，这通常是我们讨论目录大小时的目标，我们需要使用 `du` 命令：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `-s` argument prints only the value for the current directory and `-h`
    formats the value in a human-readable format. Without any arguments, `du` also
    displays 512-byte block counts for all files and directories within the current
    directory. However, directories are treated as containers so the values reflect
    the block count of all of their contained files. We can also list one or more
    files or directories, in which case `du` reports back only on those targets. By
    targeting all of the files/directories within a directory and piping the output
    through `sort`, we can use `du` to identify targets that consume the most storage:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`-s` 参数仅打印当前目录的值，`-h` 参数则将值以易读的格式显示。没有任何参数时，`du` 也会显示当前目录中所有文件和目录的 512 字节块计数。然而，目录被视为容器，因此值反映了所有其包含文件的块计数。我们还可以列出一个或多个文件或目录，这样
    `du` 只会报告这些目标的信息。通过将一个目录中的所有文件/目录作为目标并将输出通过 `sort` 管道处理，我们可以使用 `du` 来识别哪些内容占用了最多的存储空间：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'sort''s `-h` argument organizes the human-readable numbers correctly (for example,
    `4.0K` is less than `3M` even though 3 is less than 4 in a numerical sort) and
    `-r` reverses the order to display the largest entries first:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort` 的 `-h` 参数可以正确地对易读数字进行排序（例如，`4.0K` 小于 `3M`，即使在数字排序中 3 小于 4），而 `-r` 参数则会反转排序顺序，将最大的条目排在前面：'
- en: '![How it works...](img/image_05_002.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_05_002.jpg)'
- en: Sorting can help identify what consumes the most storage
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 排序可以帮助识别哪些内容占用了最多的存储空间
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information on the commands mentioned in this recipe, refer to their
    respective man pages:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本教程中提到的命令的更多信息，请参考它们各自的手册页：
- en: The `df` manual page (`man 1 df`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`df` 手册页（`man 1 df`）'
- en: The `du` manual page (`man 1 du`)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`du` 手册页（`man 1 du`）'
- en: The `ls` manual page (`man 1 ls`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ls` 手册页（`man 1 ls`）'
- en: Setting storage limits for users and groups
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置用户和组的存储限制
- en: Imposing limits on the amount of storage a user can consume is an effective
    way to manage resources and ensure they are made available to everyone fairly,
    especially in a multiuser environment. This recipe shows you how to enable quotas
    and set limits by users and groups.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 限制用户可使用的存储空间是有效的资源管理方式，可以确保每个人都能公平地获得资源，尤其是在多用户环境中。本教程展示了如何启用配额并按用户和组设置限制。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`. It assumes `/home` mounts
    its own filesystem.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求使用具有管理员权限的 CentOS 系统，管理员权限通过登录 `root` 账户或使用 `sudo` 获得。假设 `/home` 挂载了自己的文件系统。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to set up quotas and specify storage limits:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置配额并指定存储限制：
- en: 'Open the `/etc/fstab` file for editing:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `/etc/fstab` 文件进行编辑：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To enable user quotas, which enforce usage limits based on user accounts, add
    `uquota` to the mount options for `/home`. For group quotas, add `gquota`. Both
    `uquota` and `gquota` can be given together to enable both:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用用户配额，以强制基于用户账户的使用限制，请将 `uquota` 添加到 `/home` 的挂载选项中。对于组配额，添加 `gquota`。可以同时给出
    `uquota` 和 `gquota` 以启用两者：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save your changes and close the file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Reboot the system:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启系统：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the system reboots, launch the `xfs_quota` shell in expert mode:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统重启后，启动 `xfs_quota` shell 并进入专家模式：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Set limits for a user account using the `limit` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `limit` 命令为用户账户设置限制：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the `quota` command to verify that the user''s limits have been set:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `quota` 命令验证用户的配额限制是否已设置：
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Set limits for a group using `limit -g`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `limit -g` 为一个组设置限制：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Use `quota -g` to verify that the group''s limits have been set:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `quota -g` 验证组的限制是否已设置：
- en: '[PRE14]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Type `quit` or press ***Ctrl*** + ***D*** to exit the shell:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `quit` 或按 ***Ctrl*** + ***D*** 退出 shell：
- en: '[PRE15]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理...
- en: 'Quotas are not enabled by default and must be enabled explicitly in the filesystem''s
    mount options; so, we updated `/etc/fstab` and added the `uquota` and/or `gquota`
    option for `/home`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 配额默认情况下未启用，必须在文件系统的挂载选项中显式启用。因此，我们更新了 `/etc/fstab` 并为 `/home` 添加了 `uquota` 和/或
    `gquota` 选项：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We should never unmount a filesystem that''s in use because we don''t want
    to risk corrupting or losing data. So, it''s important that no one else is logged
    in when we remount `/home`. If you''re logged in as `root` and you''re certain
    you''re the only user logged in, you can remount the filesystem with `umount`
    immediately followed by `mount`. But if others are logged on, it''s best to perform
    a reboot as the recipe suggests. When the system reboots, it will have automatically
    mounted `/home` and the quota options will be in effect:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绝不应该卸载正在使用的文件系统，因为这样可能会导致数据损坏或丢失。因此，当我们重新挂载 `/home` 时，确保没有其他用户登录。如果你已经以 `root`
    身份登录并确信只有你一个用户登录，可以使用 `umount` 紧接着 `mount` 来重新挂载文件系统。但如果其他人也登录了，最好按照本教程的建议进行重启。系统重启后，`/home`
    会自动挂载，且配额选项将生效：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we ran `xfs_quota` as an interactive shell to enter commands to manage
    our quotas. We used the `-x` argument to start the shell in expert mode (the commands
    we need to manage quotas are only available in expert mode) and gave the filesystem''s
    mount point on which we''re going to set quotas:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们运行了 `xfs_quota` 作为交互式 shell，输入命令来管理我们的配额。我们使用 `-x` 参数以专家模式启动 shell（管理配额所需的命令仅在专家模式下可用），并指定我们将要设置配额的文件系统挂载点：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The traditional quota utilities can be used to manage basic quotas, but `xfs_quota`
    lets us take advantage of the additional quota functionality unique to XFS. For
    example, using `xfs_quota` we can also manage project quotas.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的配额工具可以用来管理基本配额，但 `xfs_quota` 让我们能够利用 XFS 独有的额外配额功能。例如，使用 `xfs_quota` 我们还可以管理项目配额。
- en: The two commands with the most interest for us are `limit` and `quota`. `limit`
    is used to set the quota limits and `quota` is used to report the quota information.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，最重要的两个命令是 `limit` 和 `quota`。`limit` 用于设置配额限制，`quota` 用于报告配额信息。
- en: 'We can set four limits with `limit`. They are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `limit` 设置四个限制，具体如下：
- en: '`isoft`: This sets a soft limit on the number of inodes used'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isoft`：此命令设置使用的 inode 数量的软性限制'
- en: '`ihard`: This sets a hard limit on the number of inodes used'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ihard`：此命令设置使用的 inode 数量的硬性限制'
- en: '`bsoft`: This sets a soft limit on the number of blocks used'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bsoft`：此命令设置使用的块数的软性限制'
- en: '`bhard`: This sets a hard limit on the number of blocks used'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bhard`：此命令设置使用的块数的硬性限制'
- en: An inode is a data structure used by filesystems to track files and directories.
    Each file and directory are represented by an inode, so setting a limit on the
    number of inodes a user can have essentially limits the number of files/directories
    they can have.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: inode 是一种由文件系统用于跟踪文件和目录的数据结构。每个文件和目录都由一个 inode 表示，因此设置用户可以拥有的 inode 数量限制，实际上是限制他们能够拥有的文件/目录数量。
- en: 'Blocks represent the physical storage, and setting a quota on the number of
    blocks for a user limits the amount of storage space their files can consume.
    The typical block size is 512 bytes, meaning two blocks are used to store 1 KB
    of data. The recipe''s examples set a soft block limit of 5 GB for the user account
    and a hard limit of 6 GB. The suffixes `k`, `m`, and `g` are used to specify values
    as kilobytes, megabytes, and gigabytes, respectively:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 块代表物理存储，设置用户块数配额限制了他们的文件所能占用的存储空间。典型的块大小是512字节，这意味着存储1KB数据需要使用两个块。配方中的示例设置了一个5
    GB的软块限制和6 GB的硬块限制。后缀 `k`、`m` 和 `g` 分别用于指定千字节、兆字节和吉字节的值：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Commands can be run in `xfs_quota` without entering the interactive shell by
    using `-c`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在不进入交互式Shell的情况下，使用 `-c` 在 `xfs_quota` 中运行命令：
- en: '`**xfs_quota -x -c ''limit -u bsoft=5g tboronczyk'' /home**`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`**xfs_quota -x -c ''limit -u bsoft=5g tboronczyk'' /home**`'
- en: A hard limit specifies a value that the user absolutely cannot surpass. For
    example, a user with a hard limit of 100 inodes and having 99 files will only
    be able to create one more file. An attempt to create a file beyond that will
    be met with an error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 硬限制指定了一个用户绝对无法超过的值。例如，具有100个inode硬限制的用户，如果已有99个文件，只能再创建一个文件。超出此限制时，创建文件的尝试将会出错。
- en: On the other hand, a soft limit defines a limit a user can surpass for a small
    amount of time. Once the limit is exceeded, the user enters a grace period. A
    user with a soft block limit of 5 GB will be able to consume more than 5 GB of
    storage, but only for a certain amount of time. If they're still violating the
    limit by the end of the grace period, the soft limit will be treated as a hard
    limit and they won't be able to save any more data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，软限制定义了一个用户可以在短时间内超过的限制。一旦超过限制，用户将进入宽限期。一个具有5 GB软限制的用户将能够使用超过5 GB的存储空间，但仅限于一定时间内。如果在宽限期结束时，用户仍然违反了限制，软限制将被视为硬限制，并且他们将无法再保存任何数据。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The grace period is 7 days by default. We can change this with the `timer`
    command, using `-i` to change the inodes timer and `-b` to change the block timer:
    `**timer -b 3d tboronczyk**`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 宽限期默认是7天。我们可以通过 `timer` 命令来更改这一点，使用 `-i` 来更改inode计时器，使用 `-b` 来更改块计时器：`**timer
    -b 3d tboronczyk**`
- en: 'To review the current quotas, the `quota` command is used. `-h` presents the
    values in human-readable values:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前的配额，使用 `quota` 命令。`-h` 参数会以人类可读的格式显示值：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The default output shows the filesystem and its mount point and the user''s
    block quota details: the number of blocks consumed (under the **Blocks** header),
    soft limit (**Quota**), hard limit (**Limit**), and the elapsed time of a soft-limit
    violation''s grace period (**Warn/Time**). `-i` will retrieve the same information
    for inode quotas, and `-b` and `-i` can be used together to display both sets
    of information at the same time:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认输出显示了文件系统及其挂载点，以及用户的块配额详情：已使用的块数量（在**Blocks**标题下）、软限制（**Quota**）、硬限制（**Limit**），以及软限制违规的宽限期已过时间（**Warn/Time**）。使用
    `-i` 可以获取inode配额的相同信息，`-b` 和 `-i` 可以一起使用，以同时显示两组信息：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![How it works...](img/image_05_003.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_05_003.jpg)'
- en: Block and inode quotas can be displayed at the same time
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 块配额和inode配额可以同时显示
- en: 'The `limit` and `quota` commands all default to working with a user''s quota,
    although we can explicitly manage a user''s quota using the `-u` argument. To
    manage a group''s quota, we use `-g`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit` 和 `quota` 命令默认与用户的配额一起工作，虽然我们可以通过 `-u` 参数明确管理用户的配额。要管理一个组的配额，我们使用 `-g`：'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As mentioned earlier, `xfs_quota` also allows us to manage project quotas.
    These are essentially limits placed on specific directories that are enforced
    regardless of user or group ownership. To use project quotas, use the `pquota`
    mount option:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`xfs_quota` 还允许我们管理项目配额。这些配额实际上是对特定目录施加的限制，不论用户或组的所有权如何，都会强制执行。要使用项目配额，请使用
    `pquota` 挂载选项：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Project quotas and group quotas cannot be used together; `mount` will fail to
    mount the filesystem if both `pquota` and `gquota` are given. Depending on the
    filesystem, this may prevent your system from booting.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配额和组配额不能同时使用；如果同时提供 `pquota` 和 `gquota`，`mount` 将无法挂载文件系统。根据文件系统的不同，这可能会导致系统无法启动。
- en: 'Next, create the file `/etc/projid`. Each line is an entry made up of an arbitrary
    project name and a unique ID number separated by a colon:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建文件 `/etc/projid`。每一行是由一个任意的项目名称和一个唯一的ID号码组成，用冒号分隔：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, create the file `/etc/projects`. Its entries are made up of the project
    ID, a separating colon, and the project''s directory. Together, the `projects`
    and `projid` files define the relationship between the project''s name and its
    directory:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建文件`/etc/projects`。其条目由项目ID、一个分隔冒号和项目的目录组成。`projects`和`projid`文件共同定义了项目名称与其目录之间的关系：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With the two configuration files in place, the final step is to initialize
    the project''s quota tracking in `xfs_quota` using `project -c`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好这两个配置文件后，最后一步是通过`project -c`在`xfs_quota`中初始化项目的配额跟踪：
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With the initial setup steps complete, you can use the `limit` and `quota`
    commands to manage the project''s quotas using the `-p` argument:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成初始设置步骤后，你可以使用`limit`和`quota`命令通过`-p`参数来管理项目的配额：
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Refer to the following resources for more information on working with quotas:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下资源以获取更多关于配额管理的信息：
- en: The `xfs_quota` manual page (`man 8 xfs_quota`)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xfs_quota`手册页面（`man 8 xfs_quota`）'
- en: Enable User and Group Disk Quota on CentOS 7 ([http://www.linuxtechi.com/enable-user-group-disk-quota-on-centos-7-rhel-7/](http://www.linuxtechi.com/enable-user-group-disk-quota-on-centos-7-rhel-7/))
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用CentOS 7的用户和组磁盘配额（[http://www.linuxtechi.com/enable-user-group-disk-quota-on-centos-7-rhel-7/](http://www.linuxtechi.com/enable-user-group-disk-quota-on-centos-7-rhel-7/)）
- en: Creating a RAM disk
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建RAM磁盘
- en: This recipe teaches you how to take advantage of RAM's low latency using a RAM
    disk, a section of memory made available as if it were a standard storage device.
    RAM disks often store volatile data that is constantly read and updated in memory.
    For example, on desktop systems they're used for storing a browser's cache to
    speed up web surfing. In server environments, RAM disks can store cache data for
    high-load proxy services to reduce latency.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱教你如何利用RAM低延迟创建RAM磁盘，RAM磁盘是将一部分内存当作标准存储设备来使用的内存区段。RAM磁盘通常存储易变的数据，这些数据在内存中被不断读取和更新。例如，在桌面系统中，它们用于存储浏览器缓存，以加速网页浏览。在服务器环境中，RAM磁盘可以存储高负载代理服务的缓存数据，从而减少延迟。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱需要一个具有管理员权限的CentOS系统，可以通过登录`root`账户或使用`sudo`来获得权限。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to create and use a RAM disk:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来创建和使用RAM磁盘：
- en: 'Check whether there is sufficient memory available for the RAM disk using `free`
    command (a practical RAM disk will need to be smaller than the amount of free
    memory):'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`free`命令检查是否有足够的内存可用于RAM磁盘（一个实用的RAM磁盘大小需要小于空闲内存的量）：
- en: '[PRE28]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Use `mount` to mount a `tmpfs` filesystem at the desired mount point, giving
    the target size as a mount option:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mount`命令将`tmpfs`文件系统挂载到目标挂载点，并作为挂载选项指定目标大小：
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When the RAM disk is no longer needed, unmount the filesystem:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当不再需要RAM磁盘时，卸载文件系统：
- en: '[PRE30]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whenever we access data on a hard drive, its motors must first spin up the storage
    platters and position the magnetic head at the correct location. These mechanical
    actions make access painfully slow compared to accessing data already resident
    in system memory (RAM). Exact measurements depend on the individual system and
    its hardware, but disk access takes somewhere in the neighborhood of 10 milliseconds
    or 10,000,000 nanoseconds. Memory access only takes about 200 nanoseconds, so
    it's safe to say accessing RAM is at least 10,000 times faster than disk even
    as a low estimate.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们访问硬盘上的数据时，它的电机必须首先旋转存储盘片，并将磁头定位到正确的位置。这些机械动作使得访问速度相较于已经驻留在系统内存（RAM）中的数据非常慢。具体的测量依赖于系统及其硬件，但磁盘访问大约需要10毫秒或10,000,000纳秒。而内存访问只需要大约200纳秒，因此可以安全地说，访问RAM的速度至少是磁盘的10,000倍，即便是低估值。
- en: 'Before creating the RAM disk, you should first review the amount of free memory
    available on your system using the `free` command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建RAM磁盘之前，你应该首先使用`free`命令检查系统上可用的空闲内存量：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`free` command responds with how much memory is available and how much memory
    is in use. The `-h` argument formats the output in a human-readable format (listing
    the values in megabytes and gigabytes instead of bytes). We can see numbers for
    RAM, swap disks, and any special buffers used by the kernel, but we''re really
    interested in the amount of used and free memory listed by the `Mem` and `Swap`
    entries. A low amount of free memory and a high amount of used swap is an indication
    that we probably won''t have sufficient memory for a practical RAM disk:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`free`命令会显示当前可用的内存以及已使用的内存。`-h`参数将输出格式化为易于人类阅读的格式（将值以兆字节和吉字节列出，而不是字节）。我们可以看到有关RAM、交换磁盘以及内核使用的任何特殊缓冲区的数字，但我们真正关心的是`Mem`和`Swap`条目中列出的已用和空闲内存的数量。空闲内存较少且交换空间使用量较高时，意味着我们可能没有足够的内存来创建实际的RAM磁盘：'
- en: '![How it works...](img/image_05_004.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_05_004.jpg)'
- en: With only 1 GB of RAM, this system has resources to support only a relatively
    small RAM disk
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统只有1 GB的内存，资源仅能支持相对较小的RAM磁盘
- en: 'Next, we used `mount` to make the desired amount of memory available at the
    given mount point. The recipe used `/mnt`, but you''re free to use whatever mount
    point you see fit:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`mount`命令在指定的挂载点上提供所需的内存量。示例中使用的是`/mnt`，但您可以自由选择任何您认为合适的挂载点：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The invocation specifies `tmpfs` as the mount device and `/mnt` as the mount
    point. `-t` specifies the underlying filesystem, in this case, `tmpfs` and `-o`
    specifies our mount options for the filesystem. A list of possible options for
    the `tmpfs` filesystem can be found in the `mount` man page, but the most important
    option is `size`, which sets the desired size of the filesystem.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 调用中指定了`tmpfs`作为挂载设备，`/mnt`作为挂载点。`-t`指定了底层文件系统，在这种情况下是`tmpfs`，而`-o`指定了我们的文件系统挂载选项。有关`tmpfs`文件系统的所有可能选项，可以在`mount`手册页中找到，但最重要的选项是`size`，它设置了文件系统的所需大小。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's possible to specify a value for `size` that's greater than the amount of
    available RAM but most of the time this isn't desirable. The extra data is marshaled
    to swap once RAM is exhausted and this will increase latency, negating the benefits
    of using a RAM disk in the first place.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为`size`指定一个大于可用内存的值，但大多数情况下这是不推荐的。额外的数据将在内存耗尽后转移到交换空间，这将增加延迟，从而抵消使用RAM磁盘的好处。
- en: Remember, RAM disks serve as low latency temporary storage for volatile data.
    Because its data is stored in memory, the contents of the disk are lost when either
    the system shuts down or the disk is unmounted. Never store persistent data to
    your RAM disk.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，RAM磁盘作为低延迟的临时存储用于易失性数据。由于数据存储在内存中，当系统关闭或磁盘被卸载时，磁盘内容将丢失。切勿将持久数据存储在RAM磁盘中。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information about RAM disks:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源以了解更多关于RAM磁盘的信息：
- en: The `mount` manual page (`man 8 mount`)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mount`手册页（`man 8 mount`）'
- en: How to create a RAM disk in Linux ([http://www.jamescoyle.net/how-to/943-create-a-ram-disk-in-linux](http://www.jamescoyle.net/how-to/943-create-a-ram-disk-in-linux))
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Linux中创建RAM磁盘 ([http://www.jamescoyle.net/how-to/943-create-a-ram-disk-in-linux](http://www.jamescoyle.net/how-to/943-create-a-ram-disk-in-linux))
- en: What is `/dev/shm` and its practical usage? ([http://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html](http://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html))
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是`/dev/shm`及其实际应用？([http://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html](http://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html))
- en: Creating a RAID
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建RAID
- en: In this recipe, you'll learn how to configure a redundant array of disks (RAID).
    Configuring an array of disks to provide redundant storage is an excellent way
    to protect your data from drive failures. For example, if your data resides on
    a single disk and that drive fails, then the data is lost. You'll have to replace
    the drive and restore the data from your latest backup. But if two disks are in
    a RAID-1 configuration, your data is mirrored and can still be accessed from the
    working drive when the other fails. The failure doesn't impact access to the data
    and you can replace the faulty drive at a more convenient time.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何配置冗余磁盘阵列（RAID）。配置磁盘阵列以提供冗余存储是保护数据免受硬盘故障的极好方法。例如，如果您的数据存储在单个磁盘上，且该磁盘发生故障，那么数据将丢失。您必须更换硬盘并从最新的备份中恢复数据。但如果两个磁盘处于RAID-1配置中，您的数据将被镜像存储，并且当一个磁盘发生故障时，您仍然可以从正常工作的磁盘访问数据。故障不会影响数据访问，您可以在更方便的时间更换故障磁盘。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a working CentOS system and elevated privileges. It assumes
    that at least two new disks have been installed (identified as `/dev/sdb` and
    `/dev/sdc`) and we will partition and configure them.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档要求一个正常工作的 CentOS 系统和提升的权限。假设至少安装了两个新的磁盘（标识为 `/dev/sdb` 和 `/dev/sdc`），我们将对其进行分区和配置。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to create a RAID:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤创建 RAID：
- en: Use `lsblk` to identify the new storage devices.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lsblk` 识别新的存储设备。
- en: 'Launch `cfdisk` to partition the first drive:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `cfdisk` 来分区第一个驱动器：
- en: '[PRE33]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![How to do it...](img/image_05_005.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_05_005.jpg)'
- en: cfdisk presents a user-friendly interface for partitioning storage devices
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cfdisk 提供了一个用户友好的界面，用于分区存储设备。
- en: To create a single partition that occupies the entire disk, use the left and
    right arrow keys to select `New` and press *Enter.* Then select `Primary` and
    accept the default size.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建占用整个磁盘的单个分区，请使用左右箭头键选择 `New` 并按 *Enter* 键。然后选择 `Primary` 并接受默认大小。
- en: Select `Write` and confirm the action by typing `yes` when prompted. Select
    `Quit` to exit `cfdisk`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `Write` 并在提示时键入 `yes` 以确认操作。选择 `Quit` 退出 `cfdisk`。
- en: Repeat steps 1 to 4 to partition the second drive.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 1 到 4 来分区第二个驱动器。
- en: 'Install the `mdadm` package:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `mdadm` 软件包：
- en: '[PRE34]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Use `mdadm -C` to create a new array using the two partitions. The following
    example creates a RAID-1 (mirroring) configuration:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mdadm -C` 创建一个新的阵列，使用两个分区。以下示例创建了一个 RAID-1（镜像）配置：
- en: '[PRE35]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the `-D` option to examine the RAID:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `-D` 选项检查 RAID：
- en: '[PRE36]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Format the RAID using the XFS filesystem with `mkfs.xfs`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mkfs.xfs` 用 XFS 文件系统格式化 RAID：
- en: '[PRE37]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Mount the RAID for use:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载 RAID 以供使用：
- en: '[PRE38]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There are many ways to configure disks to work together, especially when it
    comes to things like data mirroring, striping, and parity checking. Some configurations
    are implemented at the hardware level and others can be implemented using software.
    This recipe used `mdadm` to set up multiple disks in a RAID configuration, specifically
    RAID-1.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以配置磁盘以协同工作，特别是涉及数据镜像、条带化和奇偶校验等情况。一些配置是在硬件级别实现的，其他可以使用软件实现。本文档使用 `mdadm`
    在 RAID 配置中设置多个磁盘，特别是 RAID-1。
- en: 'The Storage Networking Industry Association has standardized several different
    RAID configurations. Some of the more common configurations are as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 存储网络行业协会标准化了几种不同的 RAID 配置。一些较常见的配置如下：
- en: '**RAID-0**: Data is distributed evenly across two or more disks. This configuration
    offers no redundancy, and the failure of a single disk in the array will result
    in data loss. However, it offers increased performance since data can be read
    and written to different disks simultaneously.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAID-0**：数据均匀分布在两个或更多个磁盘上。此配置不提供冗余性，阵列中的单个磁盘故障将导致数据丢失。然而，它提供了增加的性能，因为可以同时从不同的磁盘读取和写入数据。'
- en: '**RAID-1**: Data is duplicated between disks. Write activity is slower because
    the same data must be written to each disk, but this configuration offers excellent
    redundancy; the data remains accessible as long as there is at least one functioning
    disk.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAID-1**：数据在磁盘之间进行了复制。写入活动较慢，因为相同的数据必须写入每个磁盘，但该配置提供了极好的冗余性；只要至少有一个正常工作的磁盘，数据就可以访问。'
- en: '**RAID-5**: Blocks of data and parity information are split between two or
    more disks. If a member of the array fails, parity information on another disk
    can be used to reconstruct the missing data. Write performance is slower, but
    read performance is increased since data can be read simultaneously from different
    disks. This configuration can withstand the failure of a single disk, although
    the failure of a second disk will result in data loss.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAID-5**：数据块和奇偶校验信息分布在两个或更多个磁盘之间。如果数组的某个成员失败，可以利用另一个磁盘上的奇偶校验信息来重建丢失的数据。写入性能较慢，但读取性能增加，因为可以同时从不同的磁盘读取数据。这种配置可以抵御单个磁盘的故障，但第二个磁盘的故障将导致数据丢失。'
- en: '**RAID-6**: This configuration is similar to RAID-5, but maintains an extra
    parity block. The array can withstand two disk failures before data is lost.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAID-6**：此配置与 RAID-5 类似，但保留了额外的奇偶校验块。该阵列可以承受两个磁盘故障而不丢失数据。'
- en: There are other standard configurations as well (RAID-2, RAID-3, and so on),
    and even non-standard configurations, but these are rarely used in practice. As
    with everything in life, there are trade-offs between the different RAID configurations,
    and selecting the right configuration for you will depend on how you want to balance
    redundancy, fault-tolerance, and latency.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他标准配置（RAID-2、RAID-3等），甚至是非标准配置，但这些在实际中很少使用。和生活中的一切一样，不同的RAID配置之间有权衡，选择适合你的配置将取决于你希望如何平衡冗余、容错性和延迟。
- en: '`lsblk` prints information for the block devices (storage disks) attached to
    our CentOS system, and it should be relatively easy to identify the names of the
    new devices simply by looking at the drive sizes and lack of partitions. This
    recipe assumes that the new devices are `/dev/sdb` and `/dev/sdc`; you''ll need
    to use whatever is appropriate for your system when invoking the `cfdisk` and
    `mdadm` commands:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`lsblk`打印出附加到我们CentOS系统上的块设备（存储磁盘）信息，应该可以通过查看磁盘大小和没有分区的情况轻松识别新设备的名称。此过程假设新设备是`/dev/sdb`和`/dev/sdc`；在运行`cfdisk`和`mdadm`命令时，需根据你的系统使用适当的设备名：'
- en: '![How it works...](img/image_05_006.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_05_006.jpg)'
- en: Several unconfigured drives are installed on the system
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上安装了多个未配置的驱动器
- en: A new primary partition is created on each disk that occupies its entire capacity.
    The recipe uses `cfdisk`, a program that offers a console-based graphical interface
    to manipulate partitions. However, there are other partitioning utilities installed
    in CentOS that you can use instead if you're comfortable with them, such as `fdisk`,
    `sfdisk`, and `parted`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个磁盘上创建一个新的主分区，完全占用其容量。此过程使用`cfdisk`，这是一种基于控制台的图形界面程序，用于操作分区。但是，CentOS中还安装了其他分区工具，你可以根据自己的需求使用，例如`fdisk`、`sfdisk`和`parted`。
- en: 'Once the disks are partitioned, we''re ready to configure the RAID. The `mdadm`
    program used to set up and administer RAIDs is installed using `yum`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦磁盘完成分区，我们就可以开始配置RAID了。用于设置和管理RAID的`mdadm`程序可以通过`yum`安装：
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`mdadm -C` creates a new RAID configuration and requires a name to identify
    it. `md0` is used in the recipe which results in creating the device `/dev/md/md0`.
    The other arguments describe the desired configuration:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`mdadm -C`创建一个新的RAID配置，并需要一个名称来标识它。此过程使用`md0`，结果是创建了设备`/dev/md/md0`。其他参数描述了所需的配置：'
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `-l` (a lower-case L) option specifies the standard RAID level, in this
    case 1 (the number `1`) represents RAID-1\. If you wanted to set up RAID-5 instead,
    you'd use `-l 5`. The `-n` option specifies the number of partitions the RAID
    will use, and then we list the partitions. The recipe configures two partitions,
    `/dev/sdb1` and `/dev/sdc1`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`-l`（小写字母L）选项指定标准RAID级别，在本例中，数字`1`代表RAID-1。如果你想设置RAID-5，则使用`-l 5`。`-n`选项指定RAID将使用的分区数，然后列出这些分区。此过程配置了两个分区，`/dev/sdb1`和`/dev/sdc1`。'
- en: '`mdadm -D` displays information for a given array that''s useful in examining
    the configuration and verifying its health. The output lists details such as the
    RAID level, available storage size, which partitions make up the array, whether
    any partitions/devices are failing, resync status, and other useful information:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`mdadm -D`显示特定阵列的详细信息，这些信息对于检查配置和验证阵列的健康状况非常有用。输出结果列出了诸如RAID级别、可用存储大小、组成阵列的分区、是否有任何分区/设备发生故障、重同步状态以及其他有用的信息：'
- en: '[PRE41]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![How it works...](img/image_05_007.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_05_007.jpg)'
- en: mdadm displays the status of the new RAID configuration
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: mdadm 显示新RAID配置的状态
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`mdadm -E` retrieves information for one or more partitions that make up the
    array:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`mdadm -E`用于获取构成阵列的一个或多个分区的信息：'
- en: '`**mdadm -E /dev/sdb1 /dev/sdc1**`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mdadm -E /dev/sdb1 /dev/sdc1**`'
- en: 'Next, the storage space is formatted with an XFS filesystem using the `mkfs.xfs`
    command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`mkfs.xfs`命令将存储空间格式化为XFS文件系统：
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, the RAID-backed storage space is ready for use. The recipe demonstrates
    mounting it manually with the `mount` command, although you can also add an entry
    to `/etc/fstab` for the filesystem to be mounted automatically whenever the system
    boots up.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，基于RAID的存储空间就可以使用了。此过程展示了如何使用`mount`命令手动挂载存储空间，尽管你也可以在`/etc/fstab`中添加条目，以便在系统启动时自动挂载文件系统。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'For more information on setting up RAIDs, refer to the following resources:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有关设置RAID的更多信息，请参考以下资源：
- en: The `cfdisk` manual page (`man 8 cfdisk`)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cfdisk`手册页面（`man 8 cfdisk`）'
- en: The `mdadm` manual page (`man 8 mdadm`)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdadm` 手册页 (`man 8 mdadm`)'
- en: The `mkfs.xfs` manual page (`man 8 mkfs.xfs`)
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkfs.xfs` 手册页 (`man 8 mkfs.xfs`)'
- en: 'Linux RAID Wiki: Linux RAID ([https://raid.wiki.kernel.org/index.php/Linux_Raid](https://raid.wiki.kernel.org/index.php/Linux_Raid))'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux RAID Wiki: Linux RAID ([https://raid.wiki.kernel.org/index.php/Linux_Raid](https://raid.wiki.kernel.org/index.php/Linux_Raid))'
- en: Mdadm Cheat Sheet ([http://www.ducea.com/2009/03/08/mdadm-cheat-sheet/](http://www.ducea.com/2009/03/08/mdadm-cheat-sheet/))
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mdadm 备忘单 ([http://www.ducea.com/2009/03/08/mdadm-cheat-sheet/](http://www.ducea.com/2009/03/08/mdadm-cheat-sheet/))
- en: Introduction to RAID ([http://www.tecmint.com/understanding-raid-setup-in-linux/](http://www.tecmint.com/understanding-raid-setup-in-linux/))
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAID 简介 ([http://www.tecmint.com/understanding-raid-setup-in-linux/](http://www.tecmint.com/understanding-raid-setup-in-linux/))
- en: Standard RAID levels ([https://en.wikipedia.org/wiki/Standard_RAID_levels](https://en.wikipedia.org/wiki/Standard_RAID_levels))
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准 RAID 等级 ([https://en.wikipedia.org/wiki/Standard_RAID_levels](https://en.wikipedia.org/wiki/Standard_RAID_levels))
- en: Replacing a device in a RAID
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 RAID 中更换设备
- en: When an array member fails, it's important to replace it as soon as possible
    because the failure of additional drives increases the chance of data loss. This
    recipe teaches you how to properly replace a bad drive and rebuild the array.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当阵列成员出现故障时，尽早更换它非常重要，因为更多驱动器的故障会增加数据丢失的风险。本教程将教你如何正确地更换故障驱动器并重建阵列。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`. It assumes that a RAID-1
    configuration has been set up as described in the previous recipe and the drive
    that will be replaced is `/dev/sdb`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要一个具有管理员权限的 CentOS 系统，可以通过登录 `root` 账户或使用 `sudo` 获取权限。假设已按照前一教程设置 RAID-1
    配置，并且将要更换的驱动器是 `/dev/sdb`。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to replace a failed disk in a RAID:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤更换 RAID 中的故障磁盘：
- en: 'Mark the failed partition as faulty with `mdadm` using the `-f` option:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mdadm` 和 `-f` 选项将故障分区标记为故障：
- en: '[PRE43]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Remove the partition from the RAID''s configuration with `-r`:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `-r` 从 RAID 配置中移除分区：
- en: '[PRE44]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Physically replace the faulty disk.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物理更换故障磁盘。
- en: 'Partition the new drive with `cfdisk`:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cfdisk` 对新磁盘进行分区：
- en: '[PRE45]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Use the `-a` option to add the partition to the RAID:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `-a` 选项将分区添加到 RAID：
- en: '[PRE46]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: It's important to replace bad members as soon you become aware of the failure
    because, depending on the fault tolerance of your configuration, the failure of
    a second device may result in full data loss.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发现故障，尽快更换故障成员非常重要，因为根据配置的容错能力，第二个设备的故障可能会导致完全的数据丢失。
- en: 'A member must be marked faulty before we can safely remove it, so the first
    step is to fail the partition. To do this, we used `mdadm`. The `-f` argument
    specifies the partition we want failed:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们安全地移除某个成员之前，必须先将其标记为故障，因此第一步是使该分区失效。为此，我们使用了 `mdadm`。`-f` 参数指定我们希望使其失效的分区：
- en: '[PRE47]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, to remove the partition from the RAID, we used the `-r` argument:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了从 RAID 中移除分区，我们使用了 `-r` 参数：
- en: '[PRE48]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now that the device is no longer in use, we can replace the physical drive.
    Whether the drive can be hot-swapped while the system is running or if a system
    shutdown is necessary depends on your hardware.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在设备不再使用时，我们可以更换物理驱动器。是否可以在系统运行时热插拔驱动器，或者是否需要关机，取决于你的硬件。
- en: 'Once the replacement partition was ready, we added it to the RAID with the
    `-a` argument. The RAID will begin to rebuild itself, distributing data and parity
    information to the new partition, as soon as the partition is added:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦替换分区准备就绪，我们就使用 `-a` 参数将其添加到 RAID 中。分区一旦添加，RAID 将开始自动重建，分配数据和奇偶校验信息到新分区：
- en: '[PRE49]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The last recipe showed how the `-D` (and `-E`) argument of `mdadm` is used
    to retrieve status information about the RAID. You can review the output to monitor
    the rebuild''s progress, but a more concise report is available via `/proc/mdstat`.
    The contents show the speed at which the rebuild is being processed and estimate
    the time it will take for it to complete. Using `watch` to repeatedly display
    `/proc/mdstat`, you can create a make-shift dashboard to monitor the process:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 上一教程演示了 `mdadm` 的 `-D`（和 `-E`）参数如何用于检索 RAID 状态信息。你可以查看输出以监控重建进度，但通过 `/proc/mdstat`
    可以获得更简洁的报告。内容显示了重建处理的速度，并估算完成所需的时间。使用 `watch` 重复显示 `/proc/mdstat`，你可以创建一个临时的仪表板来监控过程：
- en: '[PRE50]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![How it works...](img/image_05_008.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_05_008.jpg)'
- en: The estimated time for this RAID's rebuild to complete is about an hour and
    a half
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 该 RAID 重建完成的预计时间大约为一个半小时。
- en: See also
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on replacing failed drives
    in a RAID:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下资源，了解如何在 RAID 中替换损坏的硬盘：
- en: The `mdadm` manual page (`man 8 mdadm`)
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdadm` 手册页 (`man 8 mdadm`)'
- en: Replacing a failed hard drive in a software RAID ([https://www.howtoforge.com/replacing_hard_disks_in_a_raid1_array](https://www.howtoforge.com/replacing_hard_disks_in_a_raid1_array))
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换软件 RAID 中损坏的硬盘 ([https://www.howtoforge.com/replacing_hard_disks_in_a_raid1_array](https://www.howtoforge.com/replacing_hard_disks_in_a_raid1_array))
- en: Five tips to speed up RAID re-building and re-syncing ([http://www.cyberciti.biz/tips/linux-raid-increase-resync-rebuild-speed.html](http://www.cyberciti.biz/tips/linux-raid-increase-resync-rebuild-speed.html))
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高 RAID 重建和同步速度的五个技巧 ([http://www.cyberciti.biz/tips/linux-raid-increase-resync-rebuild-speed.html](http://www.cyberciti.biz/tips/linux-raid-increase-resync-rebuild-speed.html))
- en: Creating a new LVM volume
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的 LVM 卷
- en: Logical Volume Manager (LVM) abstracts data storage away from the physical hardware,
    which lets us configure the partitions on one or more physical drives to act as
    one logical device. We also have the freedom to later add or remove physical partitions
    and grow or shrink the logical device. This recipe show's you how to create a
    new LVM group and a logical device from the group's storage.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑卷管理器（LVM）将数据存储从物理硬件中抽象出来，允许我们将一个或多个物理驱动器上的分区配置为一个逻辑设备。我们还可以灵活地在后续过程中添加或移除物理分区，并扩展或缩小逻辑设备。本教程将向你展示如何从组的存储中创建一个新的
    LVM 组和逻辑设备。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a working CentOS system and elevated privileges. It assumes
    that at least two new disks have been installed (identified as `/dev/sdb` and
    `/dev/sdc`) and we will partition and configure them.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求有一个正常工作的 CentOS 系统并且具有提升的权限。假设至少已安装了两块新磁盘（分别标识为 `/dev/sdb` 和 `/dev/sdc`），我们将对其进行分区并配置。
- en: How to do it...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform these steps to set up a new LVM group and create a volume:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以设置新的 LVM 组并创建一个卷：
- en: Use `lsblk` to identify the new storage devices.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lsblk` 识别新的存储设备。
- en: Note
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can set up LVM with RAID storage as well. Skip to step 5 and replace the
    partitions with RAID devices (for example, `/dev/md/md0`) in the given commands.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以将 LVM 与 RAID 存储一起设置。跳至第 5 步并在给定的命令中将分区替换为 RAID 设备（例如 `/dev/md/md0`）。
- en: 'Launch `cfdisk` to partition the first drive and create a single partition
    that occupies the entire disk:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `cfdisk` 对第一个硬盘进行分区，并创建一个占用整个磁盘的单一分区：
- en: '[PRE51]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Repeat step 2 to partition the second drive.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 2，对第二块硬盘进行分区。
- en: 'Use `pvcreate` to register the new partitions as physical volumes:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pvcreate` 将新分区注册为物理卷：
- en: '[PRE52]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Verify that the physical volumes are listed in the output of `pvs`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证物理卷是否出现在 `pvs` 输出中：
- en: '[PRE53]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Using `vgcreate`, group the physical volumes to form a volume group:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `vgcreate` 将物理卷组合成一个卷组：
- en: '[PRE54]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Verify that the group is listed in the output of `vgs`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证该组是否出现在 `vgs` 输出中：
- en: '[PRE55]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Using `lvcreate`, create a logical volume from the storage pool provided by
    the volume group:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lvcreate` 从卷组提供的存储池中创建一个逻辑卷：
- en: '[PRE56]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Format the volume using the XFS filesystem:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 XFS 文件系统格式化该卷：
- en: '[PRE57]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Mount the volume for use:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 挂载该卷以供使用：
- en: '[PRE58]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: LVM is another approach to configure multiple storage units to work together,
    focusing on pooling their resources together in a flexible way. These units can
    be disk partitions, as well as RAID arrays, and so the generic term *volume* is
    used.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: LVM 是另一种配置多个存储单元协同工作的方法，侧重于以灵活的方式将它们的资源汇聚在一起。这些单元可以是磁盘分区，也可以是 RAID 阵列，因此使用了通用术语
    *卷*。
- en: The recipe starts with the assumption that we have two new disks as our storage
    volumes and provides steps for identifying the devices and partitioning them using
    `lsblk` and `cfdisk`. It uses `/dev/sdb` and `/dev/sdc` as the devices, but you
    should use whatever is appropriate for your system. Once the disks are partitioned,
    we're ready to register the partitions as physical volumes with `pvcreate`. The
    term *physical volume* describes storage available as a physical partition or
    RAID.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的开始假设我们有两块新的磁盘作为存储卷，并提供了使用 `lsblk` 和 `cfdisk` 识别设备和进行分区的步骤。它使用 `/dev/sdb`
    和 `/dev/sdc` 作为设备，但你应该根据你的系统使用适当的设备。一旦磁盘被分区，我们就可以使用 `pvcreate` 将这些分区注册为物理卷。术语
    *物理卷* 描述的是作为物理分区或 RAID 提供的存储。
- en: '[PRE59]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Next, the physical volumes are grouped as a volume group using `vgcreate`. The
    recipe created a volume group name `vg0` using the `sdb1` and `sdc2` partitions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`vgcreate`将物理卷分组为卷组。食谱通过`vgcreate`使用`sdb1`和`sdc2`分区创建了一个名为`vg0`的卷组。
- en: '[PRE60]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The desired name for the volume group is passed first to `vgcreate`, followed
    by the physical volumes we want to group together. If `sdb1` and `sdc1` both have
    a capacity of 1 TB each, their storage is combined and the volume group will have
    2 TB. If we were to later add a 500 GB volume to the group, the group's storage
    capacity would increase to 2.5 TB.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将期望的卷组名称传递给`vgcreate`，然后是我们希望组合在一起的物理卷。如果`sdb1`和`sdc1`的容量各为1 TB，它们的存储会合并，卷组的总容量将为2
    TB。如果我们稍后再向该组添加一个500 GB的卷，那么该组的存储容量将增加到2.5 TB。
- en: The `pvs` and `vgs` commands return basic information about physical volumes
    or volume groups, respectively, and the recipe uses them to verify that each registration
    was successful. `pvs` reports the physical volumes that are registered and which
    group they are assigned to, any attributes, and their storage capacity. `vgs`
    lists the groups, the number of physical volumes that make up each group's pool,
    the number of logical volumes using storage from the group, and the groups' capacities.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`pvs`和`vgs`命令分别返回物理卷或卷组的基本信息，食谱使用它们来验证每个注册是否成功。`pvs`报告已注册的物理卷及其所属的组、任何属性以及存储容量。`vgs`列出卷组、组成每个卷组池的物理卷数量、使用该组存储的逻辑卷数量以及组的容量。'
- en: '![How it works...](img/image_05_009.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_05_009.jpg)'
- en: pvs and vgs are used to review the status of physical volumes and volume groups
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pvs`和`vgs`查看物理卷和卷组的状态
- en: 'A new logical volume is created from the pooled storage of the volume group
    using the `lvcreate` command:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`lvcreate`命令从卷组的池化存储中创建新的逻辑卷：
- en: '[PRE61]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `-n` option provides the name for the logical volume and `-L` provides the
    amount of storage to allocate the volume from the pool. The final argument is
    the name of the volume group used to support the volume. The values given in the
    recipe's example creates a volume named `myvol` with a capacity of 500 GB backed
    by the `vg0` group. Logical volumes are organized under `/dev` by group, so the
    volume is available as `/dev/vg0/myvol`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`-n`选项提供逻辑卷的名称，`-L`选项提供从池中分配给卷的存储量。最后一个参数是支持该卷的卷组的名称。食谱中的示例创建了一个名为`myvol`的卷，容量为500
    GB，由`vg0`组提供支持。逻辑卷按组在`/dev`下组织，因此该卷可作为`/dev/vg0/myvol`使用。'
- en: 'Finally, the volume is formatted with the XFS filesystem using `mkfs.xfs`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`mkfs.xfs`格式化该卷为XFS文件系统：
- en: '[PRE62]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The logical volume is now ready for use and can be mounted manually with `mount`
    and/or an entry can be made in /`etc/fstab` to mount the volume automatically
    at system boot time.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在逻辑卷已经准备好使用，可以使用`mount`命令手动挂载，也可以在`/etc/fstab`中添加条目，以便系统启动时自动挂载该卷。
- en: See also
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'For more information on getting started with LVM, refer to the following resources:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多关于开始使用LVM的信息，请参考以下资源：
- en: The `lvcreate` manual page (`man 8 lvcreate`)
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lvcreate`手册页（`man 8 lvcreate`）'
- en: The `pvcreate` manual page (`man 8 pvcreate`)
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pvcreate`手册页（`man 8 pvcreate`）'
- en: The `vgcreate` manual page (`man 8 vgcreate`)
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vgcreate`手册页（`man 8 vgcreate`）'
- en: Linux Partition HOWTO ([http://tldp.org/HOWTO/Partition/index.html](http://tldp.org/HOWTO/Partition/index.html))
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 分区 HOWTO ([http://tldp.org/HOWTO/Partition/index.html](http://tldp.org/HOWTO/Partition/index.html))
- en: LVM made easy ([http://www.tuxradar.com/content/lvm-made-easy](http://www.tuxradar.com/content/lvm-made-easy))
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LVM 简易指南 ([http://www.tuxradar.com/content/lvm-made-easy](http://www.tuxradar.com/content/lvm-made-easy))
- en: Manage LVM volumes with System Storage Manager ([http://xmodulo.com/manage-lvm-volumes-centos-rhel-7-system-storage-manager.html](http://xmodulo.com/manage-lvm-volumes-centos-rhel-7-system-storage-manager.html))
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用系统存储管理器管理LVM卷 ([http://xmodulo.com/manage-lvm-volumes-centos-rhel-7-system-storage-manager.html](http://xmodulo.com/manage-lvm-volumes-centos-rhel-7-system-storage-manager.html))
- en: Removing an existing LVM volume
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除现有的LVM卷
- en: The flexibility of LVM allows us to allocate the pooled storage of physical
    volumes however we see fit. This recipe shows us how to delete a logical volume
    and free its storage back to the volume group for use by other logical volumes.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: LVM的灵活性使我们可以根据需要分配物理卷的池化存储。这个食谱向我们展示了如何删除逻辑卷，并将其存储空间释放回卷组，供其他逻辑卷使用。
- en: Getting ready
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`. It assumes that a logical
    volume has been created as described in the preceding recipe.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 本操作需要一个CentOS系统，并且需要具有管理员权限，权限可以通过使用`root`账户登录或使用`sudo`获得。假设已按照前述操作创建了一个逻辑卷。
- en: How to do it...
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to remove an LVM volume:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤删除LVM卷：
- en: 'Unmount the filesystem with `umount`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`umount`卸载文件系统：
- en: '[PRE63]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Open `/etc/fstab` and verify that there isn't an entry to automatically mount
    the filesystem. If there is, remove the entry, save your changes, and close the
    file.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/etc/fstab`并确认没有自动挂载文件系统的条目。如果有，删除该条目，保存更改并关闭文件。
- en: 'Use `lvremove` to delete the logical volume:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`lvremove`删除逻辑卷：
- en: '[PRE64]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Review the output of `vgs` to verify the removal.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`vgs`的输出以验证移除操作。
- en: How it works...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Deleting a volume frees its storage back to the volume group, which can then
    be used to create new logical volumes or support growing an existing volume. This
    recipe taught you how to destroy a logical volume using the `lvremove` command.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 删除卷将其存储释放回卷组，然后可以用于创建新的逻辑卷或支持扩展现有卷。这个操作教你如何使用`lvremove`命令销毁一个逻辑卷。
- en: Because a volume can't be freed if it's in use, the first step is to make sure
    that its filesystem is unmounted. If the filesystem is mounted automatically,
    its entry in `/etc/fstab` should also be removed.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 由于卷在使用时无法释放，第一步是确保其文件系统已卸载。如果文件系统是自动挂载的，它在`/etc/fstab`中的条目也应该被删除。
- en: 'Next, `lvremove` is invoked with the name of the logical volume to free it:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，调用`lvremove`命令并提供逻辑卷名称以释放它：
- en: '[PRE65]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can delete all of the volumes from a pool by providing just the pool name:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅提供池名称，您可以删除池中的所有卷：
- en: '`**lvremove vg0**`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`**lvremove vg0**`'
- en: The recipe suggests checking the output of `vgs` to verify that the logical
    volume was removed. In the output, the number of logical volumes under the `#LV`
    column should have decreased and the amount of free space under the `VFree` column
    increased appropriately.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 本操作建议检查`vgs`的输出以验证逻辑卷是否已删除。在输出中，`#LV`列下的逻辑卷数量应该减少，`VFree`列下的空闲空间应适当增加。
- en: See also
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on removing a volume:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 有关删除卷的更多信息，请参考以下资源：
- en: The `lvremove` manual page (`man 8 lvremove`)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lvremove`手册页（`man 8 lvremove`）'
- en: The `vgs` manual page (`man 8 vgs`)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vgs`手册页（`man 8 vgs`）'
- en: Adding storage and growing an LVM volume
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加存储并扩展LVM卷
- en: The size of logical volumes doesn't need to be fixed and we're free to allocate
    more storage for one from its volume group. This recipe teaches us how to add
    more storage to the group and then grow the size of the logical volume to take
    advantage of it.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑卷的大小不需要固定，我们可以从其卷组中为一个逻辑卷分配更多存储。这个操作教我们如何向卷组添加更多存储，并扩展逻辑卷的大小以利用它。
- en: Getting ready
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`. It assumes that a new disk
    has been installed and partitioned (identified as `/dev/sdd1`) and a logical group
    and volume have been configured as described in previous recipes.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 本操作需要一个CentOS系统，并且需要具有管理员权限，权限可以通过使用`root`账户登录或使用`sudo`获得。假设已经安装并分区了新磁盘（识别为`/dev/sdd1`），并且已按照前述操作配置了逻辑卷组和卷。
- en: How to do it...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add storage and increase the size of an LVM volume:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加存储并增加LVM卷的大小：
- en: 'Register the new partition as a physical volume:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新分区注册为物理卷：
- en: '[PRE66]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Review the output of `pvs` to confirm that the volume was registered:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`pvs`的输出以确认卷是否已注册：
- en: '[PRE67]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Use `vgextend` to add the physical volume to the desired volume group:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vgextend`将物理卷添加到所需的卷组中：
- en: '[PRE68]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Review the output of `vgs` to confirm that the volume was added to the group:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`vgs`的输出以确认卷已添加到组中：
- en: '[PRE69]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Use `lvextend` to increase the size of the desired logical volume:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`lvextend`增加所需逻辑卷的大小：
- en: '[PRE70]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Review the output of `lvs` to confirm the new capacity:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`lvs`的输出以确认新容量：
- en: '[PRE71]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Expand the filesystem with `xfs_grow` to use the new capacity:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`xfs_grow`扩展文件系统，以利用新容量：
- en: '[PRE72]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An XFS filesystem must be mounted to expand its size; if it's not already mounted,
    you'll need to do so before executing `xfs_grow`.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须挂载XFS文件系统才能扩展其大小；如果尚未挂载，在执行`xfs_grow`之前需要挂载它。
- en: 'Confirm the new size of the filesystem using `df`:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`df`确认文件系统的新大小：
- en: '[PRE73]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: How it works...
- en: 'The recipe assumed that a new partition has been prepared, which was then registered
    as a physical volume using the `pvcreate` command. Then the physical volume was
    assigned to the `vg0` volume group using `vgextend`, increasing the group''s available
    storage:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 本文假设已经准备好一个新分区，并通过`pvcreate`命令将其注册为物理卷。然后，物理卷通过`vgextend`命令分配给`vg0`卷组，从而增加了该卷组的可用存储空间。
- en: '[PRE74]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '`lvextend` was invoked to grow the size of a logical volume, `vg0/myvol`:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`lvextend`来扩展逻辑卷`vg0/myvol`的大小：
- en: '[PRE75]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `-L` argument specifies the amount of storage to allocate from the pool.
    It's value can be an absolute value, for example, `-L 500G`, in which case the
    volume will be resized to have that much capacity. A relative value can also be
    used to increase the volume's current capacity by some amount. The recipe used
    `-L+500G` to grow the size of the logical volume by an additional 500 GB.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`-L`参数指定从池中分配的存储量。其值可以是绝对值，例如`-L 500G`，在这种情况下，卷的大小将被调整为该容量。也可以使用相对值，通过某个量增加卷的当前容量。此处使用了`-L+500G`，将逻辑卷的大小增加了额外的500
    GB。'
- en: Note
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will receive an error if you provide a value for `-L` less than the logical
    volume''s current capacity because `lvextend` only increases the capacity of a
    volume. The `lvreduce` command is used to reduce the size of logical volumes:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供的`-L`值小于逻辑卷当前的容量，将会收到一个错误，因为`lvextend`仅用于增加卷的容量。`lvreduce`命令用于减小逻辑卷的大小：
- en: '`**lvreduce vg0/myvol -L 500GB**`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`**lvreduce vg0/myvol -L 500GB**`'
- en: Given a straight value, `-L` specifies the total capacity for the volume. In
    the preceding command, the capacity for `vg0/myvol` is reduced to `500GB`. Given
    a relative value, for example `-L-500GB`, `lvreduce` reduces the volume's capacity
    by the specified amount.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个绝对值，`-L`指定卷的总容量。在前面的命令中，`vg0/myvol`的容量被减少为`500GB`。给定一个相对值，例如`-L-500GB`，`lvreduce`将把卷的容量减少指定的量。
- en: When finished, the logical volume's capacity can be confirmed by inspecting
    the output of the `lvs` command. The command reports the logical volumes that
    exist and to which group they are assigned, their attributes, storage capacity,
    and other statistics.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，可以通过检查`lvs`命令的输出确认逻辑卷的容量。该命令报告现有的逻辑卷以及它们所属的组、属性、存储容量和其他统计信息。
- en: '![How it works...](img/image_05_010.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/image_05_010.jpg)'
- en: The capacity of the logical volume has increased but the filesystem needs to
    be resized to use it
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑卷的容量已增加，但文件系统需要调整大小以利用新的容量。
- en: Finally, the filesystem needs to be expanded to make use of the additional space
    available to it with `xfs_growfs`. Filesystems must be mounted for the utility
    to work, and the recipe assumes that it's mounted at `/mnt`. The `-d` argument
    instructs `xfs_grow` to increase the size of the filesystem as much as possible
    (the entire size of the volume).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要使用`xfs_growfs`扩展文件系统，以利用可用的额外空间。文件系统必须已挂载才能使该工具正常工作，本文假设它已挂载在`/mnt`。`-d`参数指示`xfs_grow`尽可能增加文件系统的大小（即整个卷的大小）。
- en: '[PRE76]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Alternatively, you can give a specific size with `-D`. Its value is given in
    block counts, so some math will be required to grow the filesystem to the desired
    size. For example, let''s say you have a 1 TB filesystem and the block size is
    4,096 bytes (the default). The block count will be 268,435,456 blocks. If you
    want to grow the filesystem an additional 500 GB, the target block count will
    be `399507456`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以通过`-D`给出一个具体的大小。其值以块计数为单位，因此需要进行一些数学运算才能将文件系统扩展到所需的大小。例如，假设你有一个1 TB的文件系统，块大小是4,096字节（默认值）。此时块计数为268,435,456块。如果你想扩展文件系统500
    GB，目标块计数将是`399507456`：
- en: '[PRE77]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To make life a little easier, here''s a table that presents block counts for
    common sizes:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让操作更简便，下面是一个展示常见大小对应的块计数的表格：
- en: '![How it works...](img/image_05_011.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/image_05_011.jpg)'
- en: These block counts can be used with xfs_growfs to grow an XFS filesystem
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这些块计数可以与xfs_growfs一起使用，用于扩展XFS文件系统。
- en: While it's possible to reduce the size of a logical volume, it's only possible
    to grow an XFS filesystem. If you want to reduce the size of an XFS-supported
    volume you'll have to move its data to a safe location, remove and recreate the
    logical volume with a smaller size, and later move the data back.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以减小逻辑卷的大小，但只能扩展XFS文件系统。如果你想要减小一个XFS支持的卷的大小，你需要将数据移到一个安全的位置，删除并重新创建逻辑卷，设置较小的大小，之后再将数据移回来。
- en: See also
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on growing an LVM volume:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源，了解更多关于扩展 LVM 卷的信息：
- en: The `xfs_growfs` manual page (`man 8 xfs_growfs`)
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xfs_growfs` 手册页面 (`man 8 xfs_growfs`)'
- en: Linux guide to the XFS filesystem ([http://landoflinux.com/linux_xfs_filesystem_introduction.html](http://landoflinux.com/linux_xfs_filesystem_introduction.html))
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux XFS 文件系统指南 ([http://landoflinux.com/linux_xfs_filesystem_introduction.html](http://landoflinux.com/linux_xfs_filesystem_introduction.html))
- en: Extend/Reduce LVM's in Linux ([http://www.tecmint.com/extend-and-reduce-lvms-in-linux/](http://www.tecmint.com/extend-and-reduce-lvms-in-linux/))
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展/减少 Linux 中的 LVM ([http://www.tecmint.com/extend-and-reduce-lvms-in-linux/](http://www.tecmint.com/extend-and-reduce-lvms-in-linux/))
- en: How to grow an XFS-formatted disk ([http://superuser.com/questions/1000092/how-to-grow-xfs-formated-disk/1001486#1001486](http://superuser.com/questions/1000092/how-to-grow-xfs-formated-disk/1001486#1001486))
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何扩展 XFS 格式的磁盘 ([http://superuser.com/questions/1000092/how-to-grow-xfs-formated-disk/1001486#1001486](http://superuser.com/questions/1000092/how-to-grow-xfs-formated-disk/1001486#1001486))
- en: Working with LVM snapshots
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LVM 快照
- en: A logical volume, also called a linear volume, is just one type of volume we
    can create; LVM also lets us create snapshot volumes. A snapshot volume is associated
    with a logical volume and keeps track of changes made to the logical volume's
    data. We can then merge the snapshot back into the logical volume to roll back
    the data. This recipe will show you how to do just that.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑卷，也称为线性卷，是我们可以创建的卷类型之一；LVM 还允许我们创建快照卷。快照卷与逻辑卷相关联，并跟踪对逻辑卷数据所做的更改。我们可以将快照合并回逻辑卷，从而回滚数据。本教程将展示如何实现这一点。
- en: Getting ready
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with administrative privileges provided
    by logging in with the `root` account or using `sudo`. It assumes that a logical
    volume has been configured and sufficient storage exists in its volume group for
    the snapshot.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求使用 CentOS 系统，并通过以 `root` 账户登录或使用 `sudo` 提供管理员权限。假设已经配置了逻辑卷，并且在其卷组中有足够的存储空间来创建快照。
- en: How to do it...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following commands show you how to work with LVM snapshots. Before you begin,
    you should verify that there is sufficient storage available in the volume group
    to support the snapshot using `vgs`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了如何操作 LVM 快照。在开始之前，你应该使用 `vgs` 命令验证卷组中是否有足够的存储空间来支持快照。
- en: 'Use `lvcreate -s` to create a snapshot volume:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `lvcreate -s` 创建快照卷：
- en: '[PRE78]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'A snapshot volume may be deleted using `lvremove`:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用 `lvremove` 删除快照卷：
- en: '[PRE79]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'A snapshot volume may be mounted and accessed with `mount`:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用 `mount` 挂载并访问快照卷：
- en: '[PRE80]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'To restore a logical volume to the state it was in when the snapshot was made,
    make sure neither are mounted and use `lvconvert`:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要将逻辑卷恢复到创建快照时的状态，确保两者都未挂载，然后使用 `lvconvert`：
- en: '[PRE81]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: How it works...
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe presented commands to create a snapshot volume which then tracks
    the changes made to a logical volume and to merge the snapshot back into the logical
    volume.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何创建快照卷，快照卷会跟踪对逻辑卷所做的更改，并将快照合并回逻辑卷。
- en: 'Snapshots are created using the `lvcreate` command with the `-s` flag. `-n`
    gives the name for the snapshot and `-L` specifies how much storage will be allocated
    for it from the volume group. The final argument is the logical volume the snapshot
    is created from:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 快照通过 `lvcreate` 命令并使用 `-s` 标志创建。`-n` 用于指定快照的名称，`-L` 用于指定将从卷组中为其分配多少存储空间。最后一个参数是创建快照的逻辑卷：
- en: '[PRE82]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The values given in the example create a snapshot of `vg0/myvol` named `myvolsnap`
    with a capacity of 100 MB. Storage for the snapshot volume is allocated from the
    same group as its logical volume so that there should be sufficient storage to
    support the snapshot. Luckily, snapshot volumes don't copy all of the data from
    the original volume. Instead, they use a copy-on-write strategy where only the
    differences are recorded to the snapshot when the data is modified.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中给出的值会创建一个名为 `myvolsnap` 的 `vg0/myvol` 的快照，容量为 100 MB。快照卷的存储从与其逻辑卷相同的卷组中分配，因此应该有足够的存储来支持该快照。幸运的是，快照卷不会复制原始卷的所有数据，而是采用写时复制策略，只有在数据被修改时，才会将差异记录到快照中。
- en: 'If the deltas exceed the snapshot volume''s capacity, LVM won''t be able to
    continue to record changes and the snapshot will no longer be valid. For this
    reason, you should periodically monitor the snapshot''s storage usage and either
    resize the snapshot or discard the snapshot and create a new one with a larger
    capacity if necessary. As with other volumes, `lvremove` is used to delete snapshot
    volumes:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 如果增量数据超出快照卷的容量，LVM 将无法继续记录更改，快照将不再有效。因此，您应定期监控快照的存储使用情况，并在必要时调整快照大小，或丢弃现有快照并创建一个更大容量的新快照。与其他卷一样，`lvremove`
    用于删除快照卷：
- en: '[PRE83]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'A snapshot can also be mounted and accessed like other logical volumes. LVM
    transparently reads unmodified data from the original logical volume so that the
    data appears as a full copy. Depending on the your reasons for creating a snapshot,
    you may want to use the `ro` mount option to mount the volume read-only to prevent
    inadvertent changes from being introduced:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 快照也可以像其他逻辑卷一样挂载和访问。LVM 会透明地从原始逻辑卷读取未修改的数据，从而使数据看起来像是完整的副本。根据您创建快照的原因，您可能需要使用
    `ro` 挂载选项，以只读方式挂载卷，防止无意中引入更改：
- en: '[PRE84]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '`lvconvert` is used to change a volume''s type and other characteristics. You
    should unmount both the logical and snapshot volumes before calling `lvconvert`
    so that the merge process can begin immediately. Otherwise, LVM will schedule
    the process to begin after both have been unmounted and either the logical or
    snapshot volume is mounted again.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`lvconvert` 用于更改卷的类型和其他特性。在调用 `lvconvert` 之前，您应先卸载逻辑卷和快照卷，以便合并过程可以立即开始。否则，LVM
    会安排在两者都卸载后，且逻辑卷或快照卷重新挂载时再开始该过程。'
- en: 'To revert the logical volume''s data, we target its snapshot volume and use
    the `--merge` option:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 要还原逻辑卷的数据，您需要定位其快照卷并使用 `--merge` 选项：
- en: '[PRE85]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Merging the snapshot volume's data to its logical volume rolls back the changes
    to the logical volume's data, basically restoring it to the state it was in at
    the time the snapshot was created. When finished, the snapshot is automatically
    deleted. `-v` puts `lvconvert` into verbose mode, which is useful to monitor its
    progress and to know when the merge is complete and the snapshot has been deleted.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 将快照卷的数据合并到逻辑卷中会撤销逻辑卷数据的更改，基本上将其恢复到快照创建时的状态。完成后，快照会自动删除。`-v` 将 `lvconvert` 设置为详细模式，这对于监控进度和了解合并完成以及快照删除的时间非常有用。
- en: See also
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with snapshots:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源，获取有关操作快照的更多信息：
- en: The `lvconvert` manual page (`man 8 lvconvert`)
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lvconvert` 手册页 (`man 8 lvconvert`)'
- en: How to take a snapshot logical volume and restore ([http://www.tecmint.com/take-snapshot-of-logical-volume-and-restore-in-lvm/](http://www.tecmint.com/take-snapshot-of-logical-volume-and-restore-in-lvm/))
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建快照逻辑卷并恢复 ([http://www.tecmint.com/take-snapshot-of-logical-volume-and-restore-in-lvm/](http://www.tecmint.com/take-snapshot-of-logical-volume-and-restore-in-lvm/))
- en: How to take volume snapshots ([http://www.unixarena.com/2013/08/linux-lvm-how-to-take-volume-snapshot.html](http://www.unixarena.com/2013/08/linux-lvm-how-to-take-volume-snapshot.html))
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建卷快照 ([http://www.unixarena.com/2013/08/linux-lvm-how-to-take-volume-snapshot.html](http://www.unixarena.com/2013/08/linux-lvm-how-to-take-volume-snapshot.html))
