- en: First Steps in Administration using PowerShell
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PowerShell 的管理基础
- en: 'In this chapter, we cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with date properties
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用日期属性
- en: Working with date and time functions
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用日期和时间函数
- en: Working with currently running process to measure resource consumption
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用当前运行的进程来测量资源消耗
- en: Launching and stopping a process
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动和停止进程
- en: Finding the owner of a process
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找进程的所有者
- en: Invoking an application based on the file type
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据文件类型调用应用程序
- en: Installing the CronTab module
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 CronTab 模块
- en: Scheduling jobs in PowerShell
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 中调度任务
- en: Removing scheduled jobs in PowerShell
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 中删除调度任务
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As per Harvard Business Review, a way to effectively learn is to cycle between
    *information feasting* and *information fasting*. Given that we have familiarised
    ourselves (and perhaps a little overwhelmed by the volume of the last chapter),
    we will take a lighter approach to our first steps to administration using PowerShell.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据《哈佛商业评论》所说，一种有效的学习方法是循环进行 *信息盛宴* 和 *信息禁食*。鉴于我们已经熟悉了（并且可能被上一章的内容量压得有些不知所措），我们将在使用
    PowerShell 进行管理的第一步中采取轻松的方法。
- en: So far, we have seen how to run cmdlets, what their parameters are, how to set
    and use aliases, etc. In this chapter, we would learn how to use some basic utilities,
    work with processes, and call applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了如何运行 cmdlet、它们的参数是什么、如何设置和使用别名等。在本章中，我们将学习如何使用一些基本的工具、处理进程以及调用应用程序。
- en: Also, even though the title of the book says Linux, most of the recipes in the
    book should work on Windows as well (especially PowerShell 6.0 on Windows); minor
    modifications may be required, such as using the backslash in paths.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管书名上写着 Linux，但书中的大多数配方也应该适用于 Windows（特别是 Windows 上的 PowerShell 6.0）；可能需要做一些小的修改，比如在路径中使用反斜杠。
- en: Working with date properties
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日期属性
- en: PowerShell is best learnt, starting with simple cmdlets. And `Get-Date` is one
    of the simplest-yet-not-completely-leveraged cmdlets present in PowerShell. In
    this recipe, we shall play with dates and see how they can be used in different
    scenarios. As always, the possibilities with PowerShell are quite more than a
    book can cover. In the interest of brevity, we will look at just enough to enable
    you to launch yourself gracefully into the world of PowerShell automation; the
    rest, you would be able to handle by yourself.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 最好的学习方式是从简单的 cmdlet 开始。`Get-Date` 是 PowerShell 中最简单却未完全发挥作用的 cmdlet
    之一。在本食谱中，我们将玩转日期，并查看它们如何在不同的场景中使用。像往常一样，PowerShell 的可能性远远超过一本书所能涵盖的范围。为了简洁起见，我们只会讨论足够的内容，以便你优雅地进入
    PowerShell 自动化的世界；其余的，你可以自己处理。
- en: Getting Ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you followed along the previous chapters and performed all the exercises
    mentioned in them, you should be good to go. Otherwise, go to the chapter, *Installation,
    Reference and Help*, and get yourself a copy of PowerShell. Come back here to
    continue. This recipe uses only the terminal, so there is no need for anything
    else.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟着前面的章节完成了所有的练习，应该已经准备好继续了。如果没有，去章节 *安装、参考和帮助*，然后获取一份 PowerShell 的副本。回来继续这里的内容。本食谱只使用终端，所以不需要其他任何东西。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点……
- en: Before we start working with dates, let us make a simple call for the date.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始处理日期之前，让我们先进行一次简单的日期调用。
- en: Display the current date and time.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示当前的日期和时间。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find out what members this returned object has.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找这个返回对象有哪些成员。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/2fa6a427-d4fb-4f66-a683-816c5e5d09d4.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fa6a427-d4fb-4f66-a683-816c5e5d09d4.png)'
- en: A whole bunch of properties and methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一大堆属性和方法。
- en: Attempt to display the date like 16/06/2018.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试以 16/06/2018 的格式显示日期。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/5e6589ce-2bd7-48fd-83f3-13864445c379.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e6589ce-2bd7-48fd-83f3-13864445c379.png)'
- en: The colours do not look right.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色看起来不对。
- en: Change the command as follows. The syntax should look better now, based on your
    terminal theme. (Don't worry about why the change works for now; we shall look
    at it when dealing with variables at a later point.)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如下修改命令。根据你的终端主题，语法现在应该看起来更好。（暂时不用担心为什么这个改动有效，我们将在稍后的变量处理部分进行讲解。）
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: But that was a lot of work. Is there an easier way?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但这需要做很多工作。有没有更简单的方法？
- en: Look in Help to see what parameters you get.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看帮助以查看你可以获得的参数。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There is a `Format` parameter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 `Format` 参数。
- en: Type the following to get the short date.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容以获取短日期格式。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Try the following as the values for `Format`: `g`, `U`, `yyyy/MM/dd` and `yyyyMMddhhmmss`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下作为 `Format` 的值：`g`、`U`、`yyyy/MM/dd` 和 `yyyyMMddhhmmss`。
- en: '![](img/58296173-4b02-41ea-881a-9f97745811eb.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58296173-4b02-41ea-881a-9f97745811eb.png)'
- en: If you're more comfortable with the UNIX formatting of date, use the `Uformat`
    parameter.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更习惯使用UNIX格式的日期，使用`Uformat`参数。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let us take one more step to pass a custom date to the system and fetch a little
    information from it, leveraging the members of the object that is output by `Get-Date`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再走一步，将自定义日期传递给系统，并利用`Get-Date`输出的对象成员从中获取一些信息。
- en: Find what day Halloween falls on, in 2018.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找2018年万圣节是哪一天。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you know how date in your locale works, pass the date as follows and get
    the same information.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你知道本地日期的格式，可以按以下方式传递日期并获取相同的信息。
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you remember the concept of Type Accelerators, use it to get the information
    you need.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你记得类型加速器的概念，可以利用它获取你需要的信息。
- en: Remember to use the YMD or MDY format when calling the `DateTime` accelerator,
    in order to avoid errors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在调用`DateTime`加速器时使用YMD或MDY格式，以避免错误。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To avoid ambiguity, spell out the month.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免歧义，拼写出月份。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `System.DateTime` class in .NET packs a good-enough amount of properties
    and methods. The `Get-Date` cmdlet leverages these properties and methods by means
    of encapsulation. The `Get-Date` cmdlet, by default, pulls the current date and
    time of the system, and allows you to pick child objects from it, or quickly tie
    them together as *formats*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: .NET中的`System.DateTime`类包含足够的属性和方法。`Get-Date` cmdlet通过封装来利用这些属性和方法。`Get-Date`
    cmdlet默认提取系统的当前日期和时间，并允许你从中选择子对象，或快速将它们组合成*格式*。
- en: Besides these operations, the cmdlet also allows you to pass simple string formed
    like date and time, and converts the input string into the `DateTime` object.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些操作外，cmdlet还允许你传递类似日期和时间的简单字符串，并将输入的字符串转换为`DateTime`对象。
- en: While `Get-Date` takes into account your current locale, the type accelerator,
    `DateTime`, seems to work on YMD- or the MDY-formatted date-time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`Get-Date`考虑了你的当前区域设置，但类型加速器`DateTime`似乎只适用于YMD或MDY格式的日期时间。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The [DateTimeFormatInfo](https://msdn.microsoft.com/library/system.globalization.datetimeformatinfo.aspx#Remarks)
    Class | Remarks (Microsoft Developer Network)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[DateTimeFormatInfo](https://msdn.microsoft.com/library/system.globalization.datetimeformatinfo.aspx#Remarks)
    类 | 备注（Microsoft开发者网络）'
- en: Recipe 2.3: Parsing input from text to object (Type Accelerators)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 食谱2.3：从文本解析输入到对象（类型加速器）
- en: Working with date and time functions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日期和时间函数
- en: In the previous recipe, *Working with date properties*, we focused on the properties
    that the `DateTime` object has. The parameters we saw for `Get-Date` also worked
    on these properties. In this recipe, we shall look at methods within the `DateTime`
    object, and learn to use them to our benefit. The main idea behind this recipe,
    though, is to make you comfortable using methods that are part of the output objects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的食谱《使用日期属性》中，我们专注于`DateTime`对象的属性。我们看到的`Get-Date`参数也作用于这些属性。在本食谱中，我们将查看`DateTime`对象中的方法，并学习如何利用它们。这个食谱的主要思想是让你能够熟练使用作为输出对象一部分的方法。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现…
- en: Let us first start with converting local time into UTC.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从将本地时间转换为UTC开始。
- en: At the prompt, type in `Get-Date` and list out the members of the output object.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入`Get-Date`并列出输出对象的成员。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There is a method, called `ToUniversalTime`. Call the method.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个方法叫做`ToUniversalTime`。调用这个方法。
- en: Reduce keystrokes by using tab-completion.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用自动完成减少敲击键盘的次数。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Compare the output to your local time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出与本地时间进行比较。
- en: Next, let us see what day it would be, exactly thirty-five days from today.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们看看从今天起35天后是星期几。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you would like to see what time it would be after three hours and eighteen
    minutes:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想查看三小时十八分钟后的时间：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, find out how many days have passed since the World Environment Day, 2016.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找出自2016年世界环境日以来已经过去了多少天。
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/f40255e1-1726-409d-ab88-f5eae0366a3b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f40255e1-1726-409d-ab88-f5eae0366a3b.png)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The object that is returned by `Get-Date` has several methods just like how
    it has properties. In this recipe, we use the methods to manipulate date the way
    we need it. Methods are called with arguments. When you do not want to specify
    any argument, ensure still to call the methods with an empty pair of parentheses.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Date`返回的对象有多个方法，就像它有属性一样。在本食谱中，我们使用这些方法来根据需要操作日期。方法通过传递参数调用。如果你不想指定任何参数，确保仍然调用方法并使用空的圆括号。'
- en: Methods can be chained in the way we did in adding hours as well as minutes.
    As long as the output object does not change, in most cases, you should be able
    to call methods pertaining to the object by chaining them. If, for instance, you
    convert the date object into string at the first method, the second method should
    be a string-input-enabled method. When in doubt, use the `Get-Member` cmdlet on
    the output to see what methods it would support.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 方法可以像我们在添加小时和分钟时那样链接。只要输出对象不发生变化，在大多数情况下，你应该能够通过链接方法来调用与对象相关的方法。例如，如果你在第一个方法中将日期对象转换为字符串，那么第二个方法应该是一个接受字符串输入的方法。当不确定时，可以使用`Get-Member`
    cmdlet来查看输出对象支持哪些方法。
- en: When you look at `Get-Member` run against the `DateTime` object, you see that
    the `Subtract` method accepts `DateTime` as its argument. Hence the use of `Get-Date`
    *within* the argument. Passing a cmdlet output as an argument to a method requires
    the cmdlet, along with the parameters that are passed, to be enclosed within an
    additional pair of parentheses–`Subtract((Get-Date '5 June 2016'))` as opposed
    to `Subtract(Get-Date '5 June 2016')`–so that the inner command is executed first
    to get a value, and then, passed to the method.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你查看`Get-Member`命令在`DateTime`对象上运行的结果时，会看到`Subtract`方法接受`DateTime`作为参数。因此，使用`Get-Date`作为参数的一部分。将cmdlet的输出作为方法的参数传递时，cmdlet和传递的参数需要被额外的括号包围–例如`Subtract((Get-Date
    '5 June 2016'))`，而不是`Subtract(Get-Date '5 June 2016')`–这样内部命令先执行，获取一个值，再将其传递给方法。
- en: Working with currently-running processes to measure resource consumption
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理当前正在运行的进程以测量资源消耗。
- en: A good chunk of administration involves working with processes on a given computer.
    PowerShell contains cmdlets that enable you to work with processes on a computer.
    In this recipe, we will list out all the processes running in the system, and
    fetch the amount of resources the processes are collectively consuming.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 管理工作的一个重要部分是处理计算机上的进程。PowerShell包含了可以让你处理计算机上进程的cmdlet。在这个食谱中，我们将列出系统中所有正在运行的进程，并获取这些进程总共消耗的资源量。
- en: In the following chapter, *Passing data through pipelines*, we would look at
    other options such as filtration and so on, using what we learn in this recipe.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，*通过管道传递数据*，我们将会了解其他选项，如过滤等，利用在本食谱中学到的知识。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As we already discussed, our goal here is to work with processes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，我们在这里的目标是操作进程。
- en: List out the cmdlets that help you work with processes.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出帮助你处理进程的cmdlet。
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Remember that PowerShell uses only singular nouns.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，PowerShell仅使用单数名词。
- en: We get five cmdlets. What we initially need is Get-Process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了五个cmdlet。我们最初需要的是Get-Process。
- en: Run the cmdlet to see what it shows.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行cmdlet，查看它的输出。
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The output is a long table of processes, the memory they are consuming, the
    CPU time they are using, etc.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是一张长表，包含进程、它们所消耗的内存、它们使用的CPU时间等。
- en: Get the total count of processes currently running in the system.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前系统中正在运行的进程的总数。
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, fetch the average of the pages of memory used by the processes. The term
    for this is Working Set, denoted as WS.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，获取进程使用的内存页面的平均值。这个术语称为工作集（Working Set），用WS表示。
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There are other fields in the hash table as well. Let us get all of that information.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哈希表中还有其他字段。让我们获取所有这些信息。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Get the average, sum, minimum and maximum for both, the working set, as well
    as the CPU.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取工作集和CPU的平均值、总和、最小值和最大值。
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/4352fcb8-f849-4aa5-8832-54d1d1d7f056.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4352fcb8-f849-4aa5-8832-54d1d1d7f056.png)'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The cmdlet, Get-Process, gives out an entire table of all the processes running
    in the system. Think of each row as an individual object, and the entire table
    as an array of these rows. Count (or in other words, length) is, logically, a
    property of an array. Therefore, we call the cmdlet, and on the object that is
    output, we run a counting operation. This gives us how many processes are running
    in the system at the moment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: cmdlet Get-Process会输出一张包含所有正在运行进程的完整表格。可以将每一行视为一个单独的对象，整个表格是这些行的数组。计数（或者说长度）逻辑上是数组的一个属性。因此，我们调用cmdlet，并对输出的对象运行计数操作。这会告诉我们系统当前运行的进程数量。
- en: 'The next cmdlet we see is an important one, as well: `Measure-Object`. This
    cmdlet is designed to perform measurements on the objects that are output. In
    our case, we pick the property, `WS` to perform measurements on. If no property
    is specified, PowerShell will pick the property based on its definition in the
    output object.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的下一个 cmdlet 也是一个重要的命令：`Measure-Object`。此 cmdlet 旨在对输出对象执行度量。在我们的案例中，我们选择属性
    `WS` 进行度量。如果没有指定属性，PowerShell 会根据输出对象中的定义选择一个属性。
- en: '`Measure-Object` is capable of performing some neat arithmetic calculations
    on the output object. We use this capability of the cmdlet to fetch the average
    first, and then, the sum, the minimum value, and the maximum value as well. The
    `Property` parameter accepts a string array as input (`Get-Help Measure-Object
    -Parameter Property`). Therefore, we specify WS as well as CPU (separated by commas)
    in the cmdlet, and then perform the measurement operation.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Measure-Object` 能够对输出对象执行一些巧妙的算术计算。我们利用这个 cmdlet 的功能，首先获取平均值，然后是总和、最小值和最大值。`Property`
    参数接受一个字符串数组作为输入（`Get-Help Measure-Object -Parameter Property`）。因此，我们在 cmdlet 中指定了
    WS 和 CPU（用逗号分隔），然后执行度量操作。'
- en: Launching and stopping a process
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和停止进程
- en: All pro-terminal administrators launch and stop processes from the terminal
    all the time. This usually happens at the terminal prompt on Bash. With PowerShell,
    the process is not very different. This recipe will show you how to work the processes.
    And by the way, this recipe where you go on a full information fast.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所有专业终端管理员都经常从终端启动和停止进程。这通常发生在 Bash 的终端提示符下。使用 PowerShell 时，过程并没有太大不同。本节将向你展示如何操作进程。顺便提一下，本节还将带你进行一次全面的信息禁食。
- en: Getting Ready
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Open VS Code. If the status bar at the bottom is blue, chances are that a folder
    is open in VS Code. VS Code saves the location it is open at, and so, even if
    you start a session of VS Code after a fresh reboot, you would still see a folder
    open. We need the folder closed. To do this, press Ctrl + Shift + N (or go to
    File > New Window). Close the window where a folder is open.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 VS Code。如果底部的状态栏是蓝色的，说明可能有一个文件夹在 VS Code 中打开。VS Code 会保存它打开的路径，因此即使在重新启动后重新启动
    VS Code，会看到仍然有文件夹打开。我们需要关闭这个文件夹。为此，按 Ctrl + Shift + N（或转到 文件 > 新建窗口）。关闭打开文件夹的窗口。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: If you listed out the commands in the previous recipe, scroll up to find what
    cmdlets might help you with this recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你列出了上一节中的命令，请向上滚动查看哪些 cmdlet 可能对本节有所帮助。
- en: At the prompt, type in the following to start Visual Studio Code.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入以下内容以启动 Visual Studio Code。
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ensure that the status bar at the bottom is not blue. If it is blue, read the
    *Getting Ready* section of this recipe. Press Ctrl + Shift + E or click on Explorer
    icon on the left sidebar of VS Code. There should not be any directory open there.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 确保底部的状态栏不是蓝色的。如果是蓝色的，请阅读本节的 *准备就绪* 部分。按 Ctrl + Shift + E 或点击 VS Code 左侧边栏中的资源管理器图标。那里不应有任何目录打开。
- en: Open VS Code at the directory you created the `hello-world` script.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建 `hello-world` 脚本的目录下打开 VS Code。
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Press Ctrl + Shift + E or click on Explorer icon on the left sidebar of VS Code.
    Do you see the directory open?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按 Ctrl + Shift + E 或点击 VS Code 左侧边栏中的资源管理器图标。你看到目录打开了吗？
- en: Now, let us stop the VS Code process.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们停止 VS Code 进程。
- en: List out the processes running in the system and see if anything matches `code`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出系统中正在运行的进程，看看是否有任何进程与 `code` 匹配。
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you want the PowerShell way of doing it, run the following command and note
    the name in the `ProcessName` column:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想用 PowerShell 的方式来做，运行以下命令，并注意 `ProcessName` 列中的名称：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: PowerShell deals with objects; `grep` outputs text. Therefore, now that we know
    that the exact name of the process is `code`, we directly get details on the process.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PowerShell 处理对象；`grep` 输出文本。因此，既然我们知道进程的确切名称是 `code`，我们可以直接获取该进程的详细信息。
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That gives us a valid output.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供有效的输出。
- en: Stop all the `code` processes.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止所有 `code` 进程。
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That would not work; the cmdlet accepts a `System.Diagnostics.Process` object
    as input.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是行不通的；该 cmdlet 接受一个 `System.Diagnostics.Process` 对象作为输入。
- en: Enclose `Get-Process` within parentheses and pass the input to `Stop-Process`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Get-Process` 放在括号内，并将输入传递给 `Stop-Process`。
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, see if there is a `code` process running any more.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，查看是否还有 `code` 进程正在运行。
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](img/d4e99014-7a79-4f58-9d80-a711853638b3.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4e99014-7a79-4f58-9d80-a711853638b3.png)'
- en: The best way of stopping a process is using its ID.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 停止进程的最佳方法是使用其 ID。
- en: I am running `dconf-editor` on my PC right now, and would like to close it.
    You may choose any process to stop; play safe, though.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我现在在我的电脑上运行`dconf-editor`，并且想要关闭它。你可以选择停止任何一个进程，但还是建议小心操作。
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The cmdlet, Start-Process, works with paths. In case of `code`, though, Linux
    knows the path where the package is installed. Therefore, simply calling the package
    by "command" is sufficient.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: cmdlet Start-Process与路径一起工作。但是，对于`code`，Linux知道该软件包的安装路径。因此，只需要通过“命令”调用该软件包就足够了。
- en: The VS Code process accepts directory/file location as an input. Therefore,
    we add the `ArgumentList` parameter and pass the path to the process as an argument.
    This opens that directory in VS Code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code进程接受目录/文件位置作为输入。因此，我们添加了`ArgumentList`参数，并将路径作为参数传递给进程。这将使该目录在VS Code中打开。
- en: Stopping a process requires a .NET object as input by default; `Stop-Process`
    would not accept string as the default input. Therefore, we enclose the `Get-Process`
    cmdlet within parentheses, so that it gets executed first and outputs a `System.Diagnostics.Process`
    object, which is then processed by `Stop-Process`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 停止进程默认需要一个.NET对象作为输入；`Stop-Process`不会接受字符串作为默认输入。因此，我们将`Get-Process` cmdlet放在括号内，这样它首先执行并输出一个`System.Diagnostics.Process`对象，然后由`Stop-Process`处理。
- en: In order to be exact with respect to which process we would like to stop, we
    use the Process ID, and pass it as the argument to `Stop-Process`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准确确定我们想要停止的进程，我们使用进程ID，并将其作为参数传递给`Stop-Process`。
- en: Finding the owner of a process
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找进程的所有者
- en: In the recipe, *Working with currently-running processes…*, we listed out the
    processes running in the system. The table did not show us the process owner.
    In this recipe, we look at working with processes started by a certain owner.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方中，*处理当前正在运行的进程…*，我们列出了系统中正在运行的进程。表格没有显示进程的所有者。在本配方中，我们将讨论如何处理由特定所有者启动的进程。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: The `Get-Process` cmdlet can fetch us this information.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Process` cmdlet可以为我们获取这个信息。'
- en: At the prompt, type the following to get all the parameters that the `Get-Process`
    cmdlet accepts.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，键入以下内容以获取`Get-Process` cmdlet接受的所有参数。
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We see a parameter `IncludeUserName` (the name suggests it is a switch parameter).
    Get more information on it.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们看到有一个参数`IncludeUserName`（名称表明它是一个开关参数）。了解更多信息。
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](img/c0afced1-67c8-48e2-bb2a-faff5025c2b6.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0afced1-67c8-48e2-bb2a-faff5025c2b6.png)'
- en: 'Run the command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Filter out the processes started by you. We will use `grep` for this operation,
    until we learn how to filter in PowerShell.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 筛选出由你启动的进程。我们将使用`grep`来完成这个操作，直到我们学会如何在PowerShell中进行筛选。
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Count the number of processes running under your name.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算以你的名字运行的进程数量。
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you would like to use the `Measure-Object` cmdlet, you can.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用`Measure-Object` cmdlet，也可以。
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Let us now see how what amount of working set all of the processes started by
    you consume.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看你启动的所有进程消耗了多少工作集。
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](img/ca96880c-e0ef-4261-9578-d0b31a8234e2.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca96880c-e0ef-4261-9578-d0b31a8234e2.png)'
- en: There is an error.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 出现错误。
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`Get-Process` does not show you the process owner information by default. In
    some situations, it may be necessary to have this information. In this simple
    recipe, we use the help documentation to get all the parameters and use the `IncludeUserName`
    switch parameter to get the process owner information.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Get-Process`不会显示进程所有者信息。在某些情况下，可能需要这些信息。在这个简单的配方中，我们使用帮助文档获取所有参数，并使用`IncludeUserName`开关参数来获取进程所有者信息。
- en: In the next step, we filter out the processes started by a certain user, and
    then, count the number of processes. We do the same using `Measure-Object` as
    well, and notice that the output is the same. `Measure-Object` has "object" in
    its name, but worked on text that was output by `grep`. At the same time, it said
    at the next step that the value of `Property` is invalid.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们筛选出由特定用户启动的进程，然后统计进程数量。我们也使用`Measure-Object`做了同样的操作，结果是相同的。`Measure-Object`名字中有"object"，但它处理的是`grep`输出的文本。同时，下一步提到`Property`的值是无效的。
- en: 'The answer to why `Measure-Object` worked when counting, is in the step that
    precedes it. We know that if an array is output, PowerShell can count the number
    of elements in the array. `Measure-Object` is also capable of the same: measuring
    what can be measured in string arrays—`Count` works on string arrays.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`Measure-Object` 在计数时有效的原因在于其前面的步骤。我们知道如果输出是一个数组，PowerShell 可以计数数组中的元素个数。`Measure-Object`
    也能够做到这一点：衡量字符串数组中可以衡量的内容——`Count` 对字符串数组有效。'
- en: However, when we tried to fetch the total working set, `Measure-Object` could
    not get us that. The reason is that the output of `grep`, as we have seen before,
    is plain text.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们尝试获取总工作集时，`Measure-Object` 无法给出结果。原因是，正如我们之前所看到的，`grep` 的输出是纯文本。
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: There's more...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Something perhaps a few steps ahead, but, what if we wanted to get that working
    set information anyway, from the output of `grep`? Simple challenge, accepted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这或许有点超前，但如果我们想从 `grep` 的输出中获取工作集信息呢？简单的挑战，接受！
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![](img/a7449853-658a-4dc1-bb60-82cb93f4e8f3.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7449853-658a-4dc1-bb60-82cb93f4e8f3.png)'
- en: Do not worry too much about how that works, for now. Once we read and understand
    looping through available elements, we will have a better understanding of how
    we got this to work. For now, understand that we converted each of the returned
    strings into `double` values using the `Double` type accelerator. Then, we did
    a `Measure-Object` and found the sum.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时不用过于担心这如何工作。一旦我们阅读并理解了如何遍历可用元素，我们就能更好地理解这个是如何工作的。现在，理解我们通过 `Double` 类型加速器将每个返回的字符串转换成
    `double` 值。然后，我们做了一个 `Measure-Object`，并得到了总和。
- en: Of course, with only PowerShell, this would be much simpler.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，单靠 PowerShell，这一过程会更加简便。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe 2.4: Comparing the outputs of Bash and PowerShell.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 食谱 2.4：比较 Bash 和 PowerShell 的输出。
- en: Invoking an application based on the file type
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于文件类型调用应用程序
- en: So far, we have seen how to use `Start-Process` to start an application. That
    involves, in many cases, launching the application, and from the application,
    opening a file that you want to work on, using the application. In this recipe,
    we will leverage the concept of file association, and a proper calling cmdlet
    to launch an application. In fact, we will go a little further than that.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过如何使用`Start-Process`启动一个应用程序。这通常包括启动应用程序，并通过应用程序打开你想要处理的文件。在本食谱中，我们将利用文件关联的概念，并使用适当的调用
    cmdlet 来启动一个应用程序。实际上，我们将走得更远一些。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Download a few images from the web to work with this recipe. They could be anything,
    just ensure that all of them are of the same file type.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络上下载几张图片，用来处理这个食谱。它们可以是任何类型的，只要确保所有图片都是相同的文件类型。
- en: Navigate to the location where you saved the image files.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你保存图像文件的位置。
- en: At the prompt, type in the following command to open your image viewer, and
    the files in it.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下，输入以下命令来打开你的图像查看器，并查看其中的文件。
- en: '[PRE40]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, create a text file in the same location.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在相同位置创建一个文本文件。
- en: '[PRE41]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now, invoke all the files in their respective applications.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，调用所有文件并让它们在各自的应用程序中打开。
- en: '[PRE42]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the recipe, *Calling a PowerShell cmdlet from outside of PowerShell*, we
    called a PowerShell script from Bash by first invoking PowerShell and then passing
    the script as an argument to the `pwsh` command. The process is very similar in
    PowerShell as well, as seen in *Launching and stopping a process*.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱中，*从外部调用 PowerShell cmdlet*，我们通过先调用 PowerShell，然后将脚本作为参数传递给 `pwsh` 命令，从 Bash
    调用了一个 PowerShell 脚本。PowerShell 中的过程也非常相似，正如在 *启动和停止进程* 中所看到的。
- en: The `Invoke-Item` cmdlet relies on the internal file association to open the
    files. The real use of `Invoke-Item` is when opening multiple files, whether of
    the same kind, or different kinds of files within the same path using the respective
    applications that handle them.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Invoke-Item` cmdlet 依赖于内部文件关联来打开文件。`Invoke-Item` 的真正用途是在打开多个文件时，无论是相同类型的文件，还是同一路径下不同类型的文件，都能通过各自的应用程序来处理它们。'
- en: Installing the Crontab PowerShell module
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Crontab PowerShell 模块
- en: In this recipe, we will discuss the installation details of a PowerShell module
    to manage Cron jobs using PowerShell on a Linux machine.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将讨论如何安装一个 PowerShell 模块，用于在 Linux 机器上使用 PowerShell 管理 Cron 作业。
- en: There are times when there is a need for performing administrative tasks or
    scheduling a script to execute automatically at given time. Linux distros, by
    default, come with a scheduling utility, called, Crontab, which allows any given
    tasks to be run automatically in the background at a given time. Cron is a time-based
    scheduler program. It generates events based on the definition in the `crontab`
    file.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要执行管理任务或安排脚本在指定时间自动执行。Linux 发行版默认提供了一个调度工具，名为 Crontab，它允许任何任务在指定的时间自动在后台运行。Cron
    是一个基于时间的调度程序，它根据 `crontab` 文件中的定义生成事件。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The PowerShell crontab wrapper module is not available in the PowerShell repository
    as yet. You must download the files manually to install the module. The simplest
    way is to clone the PowerShell repository and install the module from within its
    `demos` directory.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell crontab 包装模块目前尚未在 PowerShell 仓库中提供。你必须手动下载文件来安装该模块。最简单的方法是克隆 PowerShell
    仓库，并从其 `demos` 目录中安装模块。
- en: If you would rather only install the CronTab module alone, download the `<repo>/demos/crontab` *directory*
    manually. Then, start PowerShell as super-user, and navigate to `crontab`. Continue
    from step 4.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只希望单独安装 CronTab 模块，可以手动下载 `<repo>/demos/crontab` *目录*。然后，以超级用户身份启动 PowerShell，导航到
    `crontab`。从第 4 步继续。
- en: Clone the PowerShell repository on to your computer.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 PowerShell 仓库克隆到你的计算机上。
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Start `pwsh` as a super-user.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以超级用户身份启动 `pwsh`。
- en: Go to the `demos/crontab/CronTab` directory within the repository. This is where
    the module manifest is placed.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到仓库中的 `demos/crontab/CronTab` 目录。该目录中放置了模块清单。
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Use the `Import-Module` cmdlet on the module manifest to import the module.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Import-Module` cmdlet 导入模块清单以加载该模块。
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: To list the components of CronTab module use the `Get-Module` cmdlet.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出 CronTab 模块的组件，请使用 `Get-Module` cmdlet。
- en: '[PRE46]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: To list the available command types of `CronTab` module use  the `Get-Command`
    cmdlet.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出 `CronTab` 模块的可用命令类型，请使用 `Get-Command` cmdlet。
- en: '[PRE47]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you download theCronTab module,  the following files get copied to the
    CronTab folder from the URL mentioned in the recipe, and these files contain the
    module data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当你下载 CronTab 模块时，以下文件将从食谱中提到的网址复制到 CronTab 文件夹中，这些文件包含模块数据。
- en: CronTab.ps1xml
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CronTab.ps1xml
- en: CronTab.psd1
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CronTab.psd1
- en: CronTab.psm1
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CronTab.psm1
- en: The `Import-Module` cmdlet registers the cmdlets available in the module into
    the PowerShell session and makes the module ready for use. The Import-Module cmdlet
    is run against the module manifest, which is the `psd1` file.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`Import-Module` cmdlet 会将模块中可用的 cmdlet 注册到 PowerShell 会话中，并使该模块准备好使用。Import-Module
    cmdlet 会根据模块清单（即 `psd1` 文件）执行。'
- en: When you run the `Get-Command` cmdlet, you get a list of all the cmdlets available
    in the module.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `Get-Command` cmdlet 时，你将得到该模块中所有可用 cmdlet 的列表。
- en: Scheduling jobs in PowerShell
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PowerShell 中安排任务
- en: In this recipe, we will see how to schedule a job using PowerShell cmdlets.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将展示如何使用 PowerShell cmdlet 安排任务。
- en: Getting Ready
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Log in to the terminal using SU privileges.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 SU 权限登录终端。
- en: Open a PowerShell console using the `pwsh` command.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `pwsh` 命令打开 PowerShell 控制台。
- en: 'Import the module (refer the recipe: Installation of the Crontab PowerShell
    module).'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入模块（请参考食谱：安装 Crontab PowerShell 模块）。
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, check the existence of the command or scripts that you want to schedule
    from a terminal
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，检查你要在终端中安排的命令或脚本是否存在。
- en: '[PRE48]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: To run the script based on a schedule, use the `New-CronJob` cmdlet.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要根据计划运行脚本，请使用 `New-CronJob` cmdlet。
- en: '[PRE49]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: To get the list of currently scheduled jobs, run the `Get-CronJob` cmdlet.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取当前计划的任务列表，请运行 `Get-CronJob` cmdlet。
- en: '[PRE50]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: To view the contents of scheduled jobs in the crontab configuration file, use
    `Get-CronTab`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 crontab 配置文件中已安排任务的内容，请使用 `Get-CronTab`。
- en: '[PRE51]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The PowerShell implementation of `crontab` technically a wrapper, which encapsulates
    the `crontab` commands that work in Linux. Why use PowerShell to schedule jobs
    if the underlying functions are that of `crontab`? The reason would be the uniformity
    of usage, the consistency and the object-oriented approach. If you know to use
    PowerShell, that is all you need in order to be able to use `crontab` as well.
    That is the goal.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 实现的 `crontab` 技术上是一个包装器，它封装了在 Linux 中工作的 `crontab` 命令。如果底层功能就是 `crontab`，为什么还要使用
    PowerShell 来安排任务呢？原因是使用的一致性、稳定性以及面向对象的方法。如果你会使用 PowerShell，那就是你使用 `crontab` 的全部需求。这就是目标所在。
- en: The New-CronTab cmdlet is used to define new tasks. The parameters available
    define the frequency with which the tasks are to be executed. The Cron jobs are
    executed with the same privileges as with which the `New-CronTab` cmdlet was executed.
    In other words, if you launched PowerShell as a super-user and ran New-CronTab
    to define a schedule, the commands that would be run on the specified schedule
    would be run with super-user privileges.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`New-CronTab` cmdlet 用于定义新任务。可用的参数定义了任务执行的频率。Cron 任务以执行 `New-CronTab` cmdlet
    时所用的权限运行。换句话说，如果你以超级用户身份启动 PowerShell 并运行 `New-CronTab` 来定义调度，那么按指定调度运行的命令将以超级用户权限执行。'
- en: In the steps, the command to run is listed using `-Command` parameter.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤中，运行的命令通过 `-Command` 参数列出。
- en: 'Let us also look in brief how what inputs the New-CronTab accepts. There are
    two ways to run a command every 15 minutes: The first is where each minute is
    specified:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解一下 `New-CronTab` 接受哪些输入。有两种方式可以每 15 分钟运行一次命令：第一种是指定每分钟的时间：
- en: '[PRE52]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Alternatively,  you can simplify the same to `*/15`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以将其简化为 `*/15`。
- en: '[PRE53]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Range can also be specified for scheduling a job. In our example, the job runs
    at 10 A.M,11 A.M and 12 P.M hours using the range option.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过指定范围来安排任务。在我们的示例中，任务将在上午 10 点、11 点和中午 12 点运行，使用的是范围选项。
- en: '[PRE54]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In the last example, (the Names format), the job is scheduled to run using the
    DayOfweek (Sun, Tue, Fri) and Month (Jan, Mar) parameters.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中（名称格式），任务计划根据星期几（Sun, Tue, Fri）和月份（Jan, Mar）参数来运行。
- en: '[PRE55]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The Cron Table configuration is read using `Get-CronTab` cmdlet. Each line represents
    a record of metadata about the scheduled job; it specifies the frequency and the
    command/script that should be executed.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Get-CronTab` cmdlet 读取 Cron 表配置。每一行表示有关计划任务的元数据记录；它指定了任务的执行频率和应执行的命令/脚本。
- en: The caveat as of now is that if you setup Cron jobs incorrectly they appear
    to silently fail. Cron has an own reserved `syslog` facility, so you should have
    a look at the `/etc/syslog.conf` file (or the equivalent file in your Linux distro)
    to see where messages from `cron` are sent. The common destinations include `/var/log/cron`,
    `/var/log/messages` and `/var/log/syslog`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的一个注意事项是，如果你设置的 Cron 任务不正确，它们可能会悄无声息地失败。Cron 有自己的保留 `syslog` 功能，因此你应该查看 `/etc/syslog.conf`
    文件（或你 Linux 发行版中等效的文件），看看来自 `cron` 的消息被发送到了哪里。常见的目标包括 `/var/log/cron`、`/var/log/messages`
    和 `/var/log/syslog`。
- en: Removing the jobs in PowerShell
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PowerShell 中移除任务
- en: In this recipe, we're going to see the steps to remove the entries from the
    CronTab file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到从 CronTab 文件中移除条目的步骤。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: That we have created entries into the `cron` configuration file, let us attempt
    to remove those entries.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经在 `cron` 配置文件中创建了条目，让我们尝试删除这些条目。
- en: List the jobs using the `Get-CronJob` cmdlet. This will get you the list of
    jobs that are created by reading the `CronTab` file
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Get-CronJob` cmdlet 列出任务。这将帮助你获取通过读取 `CronTab` 文件创建的任务列表。
- en: '[PRE56]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, apply a conditional logic to segregate the required job entries using `Where-Object`
    clause. You will read more about this in the chapter, *Passing Data Through Pipelines*.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，应用条件逻辑来使用 `Where-Object` 子句隔离所需的任务条目。你将在 *通过管道传递数据* 章节中进一步了解这一点。
- en: '[PRE57]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Remove the entries using `Remove-CronJob`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Remove-CronJob` 删除条目。
- en: '[PRE58]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we would like to remove cron jobs, we list out the cron jobs and then,
    pass the job objects via the pipeline to the cmdlet, `Remove-CronJob`, to remove
    the jobs from the configuration file.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要移除 cron 任务时，我们会列出 cron 任务，然后通过管道将任务对象传递给 cmdlet `Remove-CronJob`，从配置文件中删除这些任务。
