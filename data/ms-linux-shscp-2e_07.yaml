- en: Creating Building Blocks with Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数创建构建模块
- en: In this chapter, we will dive into the wonderful world of functions. We can
    look at these as modular building blocks creating powerful and adaptive scripts.
    By creating functions, we add the code in a single building block isolated from
    the rest of the script. Focusing on improvements of a single function is a lot
    easier than trying to improve the script as a single object. Without functions,
    it is difficult to hone in on problem areas and the code is often repeated, which
    means that updates need to happen in many locations. Functions are named as blocks
    of code or scripts within scripts and they can overcome many problems associated
    with more complex code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探索函数的精彩世界。我们可以将它们看作是构建强大且灵活脚本的模块化构建块。通过创建函数，我们可以将代码封装在一个与其他脚本隔离的构建块中。专注于改进单一函数要比尝试改进整个脚本更容易。如果没有函数，往往很难专注于问题区域，而且代码会被重复多次，这意味着更新需要在多个位置进行。函数是作为代码块或脚本内脚本的命名元素，它们能够解决更复杂代码中存在的许多问题。
- en: 'As we make our way through the chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入函数
- en: Passing parameters to functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向函数传递参数
- en: Variable scope
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量作用域
- en: Returning values from functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从函数返回值
- en: Recursive functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归函数
- en: Using functions in menus
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在菜单中使用函数
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter07)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter07)'
- en: Introducing functions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入函数
- en: 'Functions are blocks of code that exist in memory as **named elements**. These
    elements can be created within the shell environment, as well as within the script
    execution. When a command is issued at the command line, aliases are checked first
    and, following this, we check for a matching function name. To display the functions
    residing in your shell environment, you can use the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是存在于内存中的**命名元素**代码块。这些元素可以在shell环境中创建，也可以在脚本执行中创建。当在命令行输入命令时，首先会检查别名，接着会检查是否有匹配的函数名。要显示在shell环境中存在的函数，可以使用以下命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will vary depending on the distribution you are using and the number
    of functions you have created. On my Linux Mint, the partial output is shown in
    the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果会根据你使用的发行版和你创建的函数数量而有所不同。在我的Linux Mint中，部分输出如下所示：
- en: '![](img/6d280f40-0bea-4847-81c0-5b1bf0377f89.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d280f40-0bea-4847-81c0-5b1bf0377f89.png)'
- en: 'Using the small `-f` option, you can display the function and the associated
    definition. However, if we want to see just a single function definition, we can
    use the `type` command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用小的`-f`选项，你可以显示函数及其相关定义。然而，如果我们只想查看单个函数定义，可以使用`type`命令：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous code example will display the code block for the `quote` function,
    if it exists within your shell. We can see the output of this command in the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码示例会显示`quote`函数的代码块，如果它存在于你的shell中。我们可以在下面的截图中看到这个命令的输出：
- en: '![](img/6409e11b-7f72-454e-b4a9-2cc2aad5a3fe.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6409e11b-7f72-454e-b4a9-2cc2aad5a3fe.png)'
- en: 'The `quote` function in bash inserts single quotes around a supplied input
    parameter. For example, we can expand the `USER` variable and display the value
    as a string literal; this is shown in the following screenshot. The screenshot
    captures the command and output:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: bash中的`quote`函数会在提供的输入参数周围插入单引号。例如，我们可以展开`USER`变量并将值作为字符串字面量显示；如下面的截图所示。截图捕捉了命令和输出：
- en: '![](img/bffd9d56-fb94-4d67-9ec6-0e7ba69d2192.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bffd9d56-fb94-4d67-9ec6-0e7ba69d2192.png)'
- en: 'Most code can be represented by a pseudo-code which shows an example layout.
    Functions are no different and the code to create a function is listed in the
    following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码可以通过伪代码来表示，伪代码展示了示例布局。函数也不例外，创建函数的代码如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, there is another way of defining functions, like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有另一种定义函数的方法，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `keyword` function is deprecated for portability with the **Portable Operating
    System Interface** (**POSIX**) specification, but it is still used by some developers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyword`函数已被弃用，以符合**可移植操作系统接口**（**POSIX**）规范，但仍有一些开发人员在使用它。'
- en: Note that the `()` are not necessary when using the `keyword` function, but
    they are a must if you define the function without the `keyword` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`keyword`函数时不需要`()`，但如果您在没有`keyword`函数的情况下定义该函数，则必须使用`()`。
- en: The function is created without a `do` and `done` block, as we have used in
    the previous loops. It is the purpose of the curly brackets to define the code
    block boundaries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数没有使用`do`和`done`块，这在我们之前的循环中有用。大括号的目的是定义代码块的边界。
- en: 'A simple function to display aggregated system information is shown in the
    following code. This can be created at the command line and will be resident in
    your shell. This will not persist the logins and will be lost when the shell is
    closed or the function is unset. To allow the function to persist, we need to
    add this to the login script of our user account. The sample code is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显示聚合系统信息的简单函数如下所示。这可以在命令行中创建，并将驻留在您的 shell 中。此函数不会在登录后保持有效，并将在关闭 shell 或取消设置函数时丢失。为了让该函数保持有效，我们需要将其添加到用户帐户的登录脚本中。示例代码如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can print the detail of the function similar to the prior instance using
    the `type` command; this is shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像前面提到的实例一样使用`type`命令打印函数的详细信息，截图如下所示：
- en: '![](img/d9fabef5-8440-4b12-b440-2edcc07412ef.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9fabef5-8440-4b12-b440-2edcc07412ef.png)'
- en: 'To execute the function, we simply need to type `show_system` and we will see
    the static text and output from the three commands: `uptime`, `lscpu`, and `who`.
    This is, of course, a very simple function but we can start to add more functionality
    by allowing parameters to be passed at runtime.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该函数时，我们只需输入`show_system`，然后我们将看到来自三条命令`uptime`、`lscpu`和`who`的静态文本和输出。当然，这是一个非常简单的函数，但我们可以通过允许在运行时传递参数来增加更多的功能。
- en: Passing parameters to functions
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向函数传递参数
- en: Earlier within this chapter, we referred to functions as scripts within scripts
    and we will still maintain that analogy. Similar to how a script can have input
    parameters, we can create functions that also accept parameters that can make
    their operation less static. Before we work on a script, we can look at a useful
    function in the command line.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面，我们将函数称为脚本中的脚本，我们将继续保持这个类比。就像脚本可以有输入参数一样，我们可以创建接受参数的函数，使其操作不那么静态。在我们编写脚本之前，可以先看看命令行中有用的函数。
- en: One of my pet peeves is overcommented configuration files, especially where
    documentation exists to detail the options available.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我最讨厌的一件事就是配置文件中的注释过多，尤其是在已有文档详细说明可用选项的情况下。
- en: The **GNU's Not Unix** (**GNU**) Linux `sed` command can easily edit the file
    for us and remove commented lines and empty lines. We are introducing the stream
    editor, `sed`, here but we will look at it in more detail in the following chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**GNU''s Not Unix**（**GNU**）Linux `sed` 命令可以轻松编辑文件并删除注释行和空行。我们在这里介绍了流编辑器`sed`，但我们将在接下来的章节中更详细地了解它。'
- en: 'The `sed` command line that runs the in-place edit will be as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 执行原地编辑的`sed`命令行如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can run out forensics in the command line by breaking it down element by
    element. Let''s take a deeper look:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过逐个拆解命令行来运行我们的取证分析。让我们深入看看：
- en: '`sed -i.bak`: This edits the file and creates a backup with the extension `.bak`.
    The original file will then be accessible as `<filename>.bak`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sed -i.bak`：这会编辑文件并创建一个扩展名为`.bak`的备份文件。原始文件将作为`<filename>.bak`可访问。'
- en: '`/^`: This caret character (`^`) means edit the lines that start with what
    after the caret. So the caret matches the beginning of a line.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/^`：此插入符号（`^`）表示编辑以插入符号后面的内容开头的行。因此，插入符号匹配行的开始部分。'
- en: '`\s*`: This means any amount of white space, including no spaces or tabs.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\s*`：这表示任意数量的空白字符，包括没有空格或制表符。'
- en: '`#/`: This is a normal `#` sign. So the total expression `^\s*#` means we are
    looking for lines that begin with comment or spaces and a comment.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#/`：这是一个普通的`#`符号。因此，完整的表达式`^\s*#`意味着我们在寻找以注释或空格和注释开头的行。'
- en: '`d`: This is the delete action to remove matching lines.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d`：这是删除操作，用于移除匹配的行。'
- en: '`;/^$/d`: The semicolon is used to separate expressions and the second expression
    is similar to the first but this time we are preparing to delete empty lines.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`;/^$/d`：分号用于分隔表达式，第二个表达式类似于第一个，不过这次我们准备删除空行。'
- en: 'To move this into a function, we will simply need to think of a great name.
    I like to build verbs into function names; it helps with the uniqueness and identifies
    the purpose of the function. We will create the `clean_file` function as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转化为函数，我们只需要想一个好的名称。我喜欢将动词融入函数名，这有助于保持独特性并明确函数的目的。我们将按如下方式创建`clean_file`函数：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As within scripts, we use positional parameters to accept command-line arguments.
    We can replace the hardcoded filename that we used previously with `$1` within
    the function. We will quote this variable to protect against spaces within the
    filename. To test the `clean_file` function, we will make a copy of a system file
    and work with the copy. In this way, we can be sure that no harm comes to any
    system file. We can assure all readers that no system files were harmed during
    the making of this book. The following are the detailed steps we need to follow
    to perform the test on the new function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们使用位置参数来接受命令行参数。我们可以用`$1`替代之前硬编码的文件名。在函数中，我们会对这个变量加引号，以防文件名中包含空格。为了测试`clean_file`函数，我们将复制一个系统文件并操作这个副本。这样，我们可以确保不会对任何系统文件造成损害。我们可以向所有读者保证，在本书制作过程中，任何系统文件都没有受到伤害。以下是我们需要遵循的详细步骤来测试新函数：
- en: Create the `clean_file` function as described
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照描述创建`clean_file`函数
- en: Move to your `home` directory using the `cd` command without arguments
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令（不带参数）进入你的`home`目录
- en: Copy the time configuration file to your `home` directory `cp /etc/ntp.conf
    $HOME`
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将时间配置文件复制到你的`home`目录 `cp /etc/ntp.conf $HOME`
- en: Count the number of lines in the file with the following command: `wc -l $HOME/ntp.conf`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令计算文件中的行数：`wc -l $HOME/ntp.conf`
- en: Now remove the commented and empty lines with `clean_file $HOME/ntp.conf`
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`clean_file $HOME/ntp.conf`删除注释行和空行
- en: Now recount the lines using `wc -l $HOME/ntp.conf`
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用`wc -l $HOME/ntp.conf`重新计算行数
- en: 'Also, check the count the backup of the original file that we created: `wc
    -l $HOME/ntp.conf.bak`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，检查我们创建的原文件备份的行数：`wc -l $HOME/ntp.conf.bak`
- en: 'The sequence of commands is shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的顺序如以下截图所示：
- en: '![](img/f403ad2f-0f83-49c6-ad61-c45577a8042d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f403ad2f-0f83-49c6-ad61-c45577a8042d.png)'
- en: We can direct the attention of the function to the required file using the argument
    that was supplied while executing the function. If we need to persist this function,
    then we should add it to a login script. However, if we want to test this within
    a shell script, we can create the following file to do this and practice some
    of the other elements we have learned. We will need to take notice that the functions
    should always be created at the start of the script as they need to be stored
    in memory by the time they are called. Just think that your function needs to
    be unlocked and loaded before you pull the trigger.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在执行函数时提供的参数来将函数的注意力指向所需的文件。如果我们需要保存这个函数，那么应该将其添加到登录脚本中。然而，如果我们想在脚本中进行测试，可以创建以下文件来执行此操作，并练习我们学到的其他元素。需要注意的是，函数应该始终在脚本开始时创建，因为它们需要在调用时被加载到内存中。可以理解为你的函数需要在启动前被解锁并加载。
- en: 'We will create a new shell script, `$HOME/bin/clean.sh`, and the execute permission,
    as always, will need to be set. The code of the script is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的Shell脚本`$HOME/bin/clean.sh`，并像往常一样设置执行权限。脚本的代码如下：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have provided two functions within the script. The first, `is_file`, simply
    tests to ensure that the filename we have entered is a regular file. Then we declare
    the `clean_file` function with a little added functionality, displaying the line
    count of the file before and after the operation. We can also see that functions
    can be nested and we call the `is_file` function with `clean_file`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本中提供了两个函数。第一个，`is_file`，只是简单地测试确保我们输入的文件名是一个常规文件。然后我们声明`clean_file`函数，并增加了一些功能，显示操作前后文件的行数。我们还可以看到，函数是可以嵌套的，我们在`clean_file`中调用了`is_file`。
- en: Without the function definitions, we have only three lines of code at the end
    of the file, which we can see in the example code laid out in the previous code
    block that has been saved as `$HOME/bin/clean.sh`. We first prompt for the filename
    and then run the `clean_file` function, which in turn calls the `is_file` function.
    The simplicity of the main code is important here. The complexity is in the functions,
    as each function can be worked on as a standalone unit.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有函数定义，我们在文件末尾只有三行代码，正如之前代码块中的示例代码那样，已保存为`$HOME/bin/clean.sh`。我们首先提示输入文件名，然后运行`clean_file`函数，后者又调用了`is_file`函数。这里主代码的简洁性很重要，复杂性在于函数，因为每个函数都可以作为独立单元进行处理。
- en: 'We can now test the script operation, first using a wrong filename, as we can
    see in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以测试脚本操作，首先使用一个错误的文件名，正如我们在以下截图中看到的：
- en: '![](img/b6df07e9-3208-43a8-9f26-b8cf9e0a4d6e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6df07e9-3208-43a8-9f26-b8cf9e0a4d6e.png)'
- en: 'Now that we have seen the operation with an incorrect file, we can try again
    using an actual file! We can use the same system file we worked on before. We
    need to first return the files to their original state:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到使用错误文件的操作，现在可以尝试使用一个实际文件！我们可以使用之前处理过的同一个系统文件。首先，我们需要将文件恢复到原始状态：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the file now ready, we can execute the script from the `$HOME` directory
    as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在文件已经准备好，我们可以从`$HOME`目录执行脚本，如下图所示：
- en: '![](img/6628efa2-505b-472e-a56a-a836aab2f329.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6628efa2-505b-472e-a56a-a836aab2f329.png)'
- en: Passing arrays
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递数组
- en: 'Not all your passed values will be single values; you may need to pass an array
    to the function. Let''s see how to pass an array as a parameter:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 并非你传递的所有值都是单一值；你可能需要将数组传递给函数。我们来看看如何将数组作为参数传递：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/290b2825-016a-4ce3-9f8c-bb517a0f05f5.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/290b2825-016a-4ce3-9f8c-bb517a0f05f5.png)'
- en: From the result, you can see that the used array is returned the way it is from
    the function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果中可以看出，使用的数组是按原样从函数返回的。
- en: 'Note that we used `$@` to get the array inside the function. If you use `$1`,
    it will return the first array element only:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了`$@`来获取函数中的数组。如果你使用`$1`，它只会返回第一个数组元素：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/b4a129d6-1d1d-4e27-8ffc-b329a6b1b92e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4a129d6-1d1d-4e27-8ffc-b329a6b1b92e.png)'
- en: Because we used `$1`, it returns only the first array element.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了`$1`，它只返回第一个数组元素。
- en: Variable scope
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量作用域
- en: By default, any variable you declare inside a function is a global variable.
    That means this variable can be used outside and inside the function without problems.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，你在函数内部声明的任何变量都是全局变量。这意味着这个变量可以在函数内外都使用，没有问题。
- en: 'Check out this example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个例子：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you run this script, it will return `50`, which is the value changed inside
    the function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个脚本，它将返回`50`，这是在函数内部更改的值。
- en: What if you want to declare a variable that is exclusive to the function? This
    is called a local variable.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想声明一个只在函数内有效的变量呢？这就是所谓的局部变量。
- en: 'You can declare local variables by using the `local` command like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`local`命令来声明局部变量，像这样：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To ensure that the variable is used only inside the function, let''s check
    out the following example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保变量仅在函数内使用，我们来看一下以下例子：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you run this script, it will print `30`, which means that the local version
    of the variable is different than the global version.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个脚本，它将打印出`30`，这意味着局部变量的版本与全局变量的版本不同。
- en: Returning values from functions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从函数返回值
- en: Whenever we have statements that are printed on the screen within the function,
    we can see their result. However, lots of times we will want the function to populate
    a variable within the script and not display anything. In this case, we use `return`
    in the function. This is especially important when we are gaining input from users.
    We may prefer the case to translate the input to a known case to make the condition
    testing easier. Embedding the code in a function allows it to be used many times
    within a script.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们有在函数内部打印到屏幕上的语句时，我们可以看到它们的结果。然而，很多时候我们希望函数在脚本中填充一个变量，而不显示任何内容。在这种情况下，我们在函数中使用`return`。这在获取用户输入时尤其重要。我们可能希望将输入的内容转换为已知的格式，以便更轻松地进行条件测试。将代码嵌入函数中使得它可以在脚本中多次使用。
- en: 'The following code shows how we can achieve this by creating the `to_lower`
    function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何通过创建`to_lower`函数来实现这一点：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Stepping through the code, we can begin to understand the operation of this
    function:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步查看代码后，我们可以开始理解这个函数的操作：
- en: '`input="$1"`: This is more for ease than anything else; we assign the first
    input parameter to a named variable input.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input="$1"`：这主要是为了方便，我们将第一个输入参数分配给名为input的变量。'
- en: '`output=$( echo $input | tr [A-Z] [a-z])`: This is the main engine of the function,
    where the translation from uppercase to lowercase occurs. We pipe the input to
    the `tr` command to convert uppercase to lowercase.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output=$( echo $input | tr [A-Z] [a-z])`：这是函数的主要引擎，负责将大写字母转换为小写字母。我们将输入通过管道传递给`tr`命令来进行大小写转换。'
- en: '`return $output`: This is how we create the return value.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return $output`：这是我们创建返回值的方式。'
- en: 'One use of this function will be within a script that reads the user''s input
    and simplifies the test to see whether they choose `Q` or `q`. This can be seen
    in the following extract of code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的一个使用场景是在一个读取用户输入并简化测试的脚本中，看看他们是否选择了`Q`或`q`。这一点可以在以下代码片段中看到：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Recursive functions
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归函数
- en: A recursive function is a function that calls itself from inside itself. This
    function is very useful when you need to call the function to do something again
    from inside of it. The most famous example for that is calculating factorials.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 递归函数是一个从内部调用自身的函数。当你需要从函数内部再次调用该函数时，这个函数非常有用。最著名的例子就是计算阶乘。
- en: 'To calculate the factorial of 4, you multiply the number by the descending
    numbers. You can do it like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算4的阶乘，你需要将数字乘以递减的数字。你可以这样做：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `!` sign means factorial.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`!`符号表示阶乘。'
- en: 'Let''s write a recursive function that calculates the factorial of any given
    number:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个递归函数，计算任何给定数字的阶乘：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/0b71574b-6af6-4bb3-b2e7-7ba140b064f1.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b71574b-6af6-4bb3-b2e7-7ba140b064f1.png)'
- en: First, we define the function which is called `calc_factorial` and inside it
    we check if the number equals 1 and if so, the function will return 1 because
    the factorial of 1 equals 1.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个名为`calc_factorial`的函数，在其中我们检查数字是否等于1，如果是，函数将返回1，因为1的阶乘等于1。
- en: Then we decrement the number by one and call the function from inside it and
    that will call the function again.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将数字减1，并从函数内部调用该函数，这将再次调用该函数。
- en: This will continue to happen until it reaches 1 and then the function will exit.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将继续进行，直到它达到1，然后函数将退出。
- en: Using functions in menus
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在菜单中使用函数
- en: 'In [Chapter 6](a9bad548-8c76-4e5f-adb1-8cf4e6198c50.xhtml), *Iterating with
    Loops*, we created the `menu.sh` file. Menus are great targets to use functions,
    as the `case` statement is maintained very simply with single-line entries, while
    the complexity can still be stored in each function. We should consider creating
    a function for each menu item. If we copy the previous `$HOME/bin/menu.sh` to
    `$HOME/bin/menu2.sh`, we can improve the functionality. The new menu should look
    like the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](a9bad548-8c76-4e5f-adb1-8cf4e6198c50.xhtml)中，*使用循环迭代*，我们创建了`menu.sh`文件。菜单是使用函数的绝佳目标，因为`case`语句通过单行条目非常简单地保持，而复杂性仍然可以存储在每个函数中。我们应该考虑为每个菜单项创建一个函数。如果我们将之前的`$HOME/bin/menu.sh`复制到`$HOME/bin/menu2.sh`，我们可以改善功能。新菜单应如下所示：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As we can see, we still maintain the simplicity of the `case` statement; however,
    we can develop the script to add in more complexity through the functions. For
    example, when choosing option `b` for the calendar, we now check to see whether
    the `ncal` command is available. If it is, we use `ncal` and use the `-w` option
    to print the week number. We can see this in the following screenshot, where we
    have chosen to display the calendar and install `ncal`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们仍然保持了`case`语句的简洁性；然而，我们可以通过函数来增加脚本的复杂性。例如，当选择日历的`b`选项时，我们现在会检查`ncal`命令是否可用。如果可用，我们使用`ncal`并使用`-w`选项来打印周数。我们可以在以下截图中看到这一点，其中我们选择了显示日历并安装了`ncal`：
- en: '![](img/3aa8b650-4e05-4b77-bf93-1064c38aae86.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3aa8b650-4e05-4b77-bf93-1064c38aae86.png)'
- en: We can also not be concerned about the *Caps Lock* key as the `to_lower` function
    converts our selection to lowercase. Over time, it would be very easy to add additional
    elements to the functions, knowing that we only affect that single function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不需要担心*Caps Lock*键，因为`to_lower`函数会将我们的选择转换为小写字母。随着时间的推移，向函数中添加更多元素将变得非常简单，因为我们只影响该单一函数。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We are still making progress in leaps and bounds in script writing. I hope these
    ideas stay with you and you find the code examples useful. Functions are very
    important for the ease of maintenance of your scripts and their ultimate functionality.
    The easier the scripts are to maintain, the more likely you are to add improvements
    over time. We can define functions at the command line or within scripts but they
    need to be included in the script before they are used.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在编写脚本方面仍在快速进步。希望这些想法能对你有所帮助，并且你发现代码示例有用。函数对于脚本的易维护性和最终功能非常重要。脚本越容易维护，你就越有可能随着时间的推移进行改进。我们可以在命令行或脚本中定义函数，但它们必须在使用之前包含在脚本中。
- en: The functions themselves are loaded into memory while the script is running,
    but as long as the script is forked and not sourced, they will be released from
    memory once the script is finished. We have touched a little upon `sed` in this
    chapter and we will look more at using the stream editor (`sed`) in the next chapter.
    The `sed` command is very powerful and we can make good use of it within scripts.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 函数本身在脚本运行时被加载到内存中，但只要脚本是通过fork方式运行而不是通过source方式运行，它们将在脚本执行完毕后从内存中释放。我们在本章中简要介绍了`sed`，在下一章我们将更深入地探讨流编辑器（`sed`）的使用。`sed`命令非常强大，我们可以在脚本中充分利用它。
- en: Questions
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the printed value of the following code?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码打印的值是什么？
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What is the output of the following code?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码的输出是什么？
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What is the problem with the following code? And how can you fix it?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码有什么问题？你如何修复它？
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What is the problem with the following code? And how can you fix it?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码有什么问题？你如何修复它？
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Further reading
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，获取与本章相关的进一步阅读材料：
- en: '[http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-8.html](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-8.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-8.html](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-8.html)'
- en: '[http://tldp.org/LDP/abs/html/functions.html](http://tldp.org/LDP/abs/html/functions.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/abs/html/functions.html](http://tldp.org/LDP/abs/html/functions.html)'
- en: '[https://likegeeks.com/bash-functions/](https://likegeeks.com/bash-functions/)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://likegeeks.com/bash-functions/](https://likegeeks.com/bash-functions/)'
