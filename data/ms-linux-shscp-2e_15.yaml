- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章
- en: 'The error is in the second line: There should be no spaces in the variable
    declaration.'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误出在第二行：变量声明中不应该有空格。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The result will be `Tuesday` because the array is zero based.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将是`Tuesday`，因为数组是从零开始的。
- en: 'There are two errors here: the first error is the space in the variable declaration
    and the second error is the usage of single quotes where we should use backticks
    instead.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里有两个错误：第一个错误是变量声明中的空格，第二个错误是使用了单引号，而应该使用反引号。
- en: 'Solution:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The value of `b` variable will be `c` and the value of `c` will be `a`.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量`b`的值将是`c`，而变量`c`的值将是`a`。
- en: Since we didn't use dollar signs in the assignment lines, the variable will
    take the character value instead of the integer value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在赋值行中没有使用美元符号，变量将会取字符值而不是整数值。
- en: Chapter 2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章
- en: Three
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三
- en: This is because the whole bash shebang is primarily a comment, so there are
    three lines of comment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为整个bash shebang主要是注释，所以有三行注释。
- en: There is no space between the option `-b` and its value, so it will be treated
    as an option.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选项`-b`和它的值之间没有空格，因此它将被视为一个选项。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '1'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1'
- en: Four
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 四
- en: This is because we have five passed parameters and we use the shift to drop
    a parameter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们传递了五个参数，并且使用了shift来丢弃一个参数。
- en: '2'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2'
- en: '`-n`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`-n`'
- en: This is because it's on the left and the `shift` command drops parameters from
    the left.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它在左侧，而`shift`命令会从左侧移除参数。
- en: Chapter 3
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章
- en: '`False`'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`False`'
- en: Since lower-case characters have a higher ASCII order, the statement will return `False`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于小写字符的ASCII顺序较高，因此该语句会返回`假`。
- en: Both are correct and will return the same result, which is `Strings` are not
    identical.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两者都是正确的，并且会返回相同的结果，即`字符串`不相等。
- en: '`Three`'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`三`'
- en: 'We can use the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下内容：
- en: '`-ge`: Greater than or equal to'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ge`：大于或等于'
- en: '`-gt`: Greater than'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-gt`：大于'
- en: '`-ne`: Not equal to'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ne`：不等于'
- en: 'True'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真
- en: Since one test is enough to return true, so we can be sure that the second test
    will return true.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一个测试足以返回真值，因此我们可以确定第二个测试也会返回真值。
- en: Chapter 4
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: 'We can make the following changes :'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以进行以下更改：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `source` command.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`source`命令。'
- en: Chapter 5
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章
- en: 'By using `((`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`((`：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The problem is with the space in the filename. To fix it, put the filename
    between quotes:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题出在文件名中的空格。要修复它，请将文件名用引号括起来：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is no dollar sign before the parentheses:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在括号前面没有美元符号：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Chapter 6
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章
- en: No lines. Since the loop output is redirected to a file, nothing will appear
    on the screen.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有行。因为循环输出被重定向到文件中，所以屏幕上不会显示任何内容。
- en: Four. The loop will start at `8` and continue until it reaches `12`, it will
    match the condition which is greater than or equal, and it will break the loop.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四。循环将从`8`开始，直到达到`12`，它会匹配大于或等于的条件，并会中断循环。
- en: 'The problem is with the comma in the `for` loop definition. It should be semicolon
    instead. So the correct script should be as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题出在`for`循环定义中的逗号，应该改为分号。因此，正确的脚本如下：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the decrement statement is outside the loop, the count variable will be
    the same value, which is `10`. It's an endless loop, it will print `10` forever,
    and to stop it, you need to press* Ctrl *+ *C*.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于递减语句在循环外部，计数变量将保持相同的值，即`10`。这是一个无限循环，它将永远打印`10`，要停止它，你需要按*Ctrl*+*C*。
- en: Chapter 7
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章
- en: Since we used the `$1` variable not `$@`, the function will return the first
    element only.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用了`$1`变量，而不是`$@`，该函数将只返回第一个元素。
- en: '`50`. Yes, it''s a global variable, but because we printed the value before
    the function call, the variable isn''t affected.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`50`。是的，它是一个全局变量，但由于我们在函数调用之前打印了它的值，变量不会受到影响。'
- en: 'Missing brackets `()` or adding the keyword function before the function name.
    It should be written like this:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缺少括号`()`或在函数名之前没有添加关键字function。应该这样写：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The problem is in the function call. We shouldn''t use brackets `()` during
    a function call. Brackets should only be used in function definitions. The correct
    code will be like this:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题出在函数调用中。我们在函数调用时不应该使用括号`()`，括号应该仅用于函数定义中。正确的代码应该是这样的：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Chapter 8
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章
- en: None. Because you are searching for Sed with a capital letter which does not
    exist
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无。因为你在搜索大写的Sed，而它是不存在的。
- en: None. The delete command `d` only deletes lines from the stream, not the file.
    To delete from the file, you can use the `-i` option.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无。删除命令`d`仅删除流中的行，而不是文件中的行。要删除文件中的行，可以使用`-i`选项。
- en: Fourth line. Because we used append command a, it will be inserted after the
    specified position.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第四行。因为我们使用了追加命令a，它将在指定位置之后插入。
- en: None, because the `w` flag is only used with the substitute command `s`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有，因为`w`标志仅与替换命令`s`一起使用。
- en: Chapter 9
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章
- en: 'You can use the following command to print line number 50:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令打印第50行：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can use following command to change Apache default port `80` to `8080`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令将Apache的默认端口`80`更改为`8080`：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We search for `Listen`, where it defines the Apache default port, search for
    the number beside it, and change it to `Listen 8080`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索`Listen`，它定义了Apache的默认端口，查找旁边的数字并将其更改为`Listen 8080`。
- en: Chapter 10
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章
- en: Nothing
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么都没有
- en: You should use the variable name without the dollar sign to print it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用变量名而不是美元符号来打印它。
- en: 'Solution: zero'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案：零
- en: Because you should print `$1` instead of `$2` where `$1` is the first field.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你应该打印`$1`而不是`$2`，其中`$1`是第一个字段。
- en: The `while` loop should iterate with `i` value less than `4` not `3`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`while`循环应该以`i`值小于`4`而不是`3`进行迭代。'
- en: '`1`'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1`'
- en: Because the only user that has UID less than `1` is root (`UID=0`), so one line
    will be printed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因为唯一的用户UID小于`1`的是root（`UID=0`），所以将打印一行。
- en: Chapter 11
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章
- en: 0 lines
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0行
- en: 'Because there is a period after the word `awesome`, if you want to print that
    line, you can use the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`awesome`后面有一个句点，如果你想打印那一行，可以使用以下命令：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 2 lines
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2行
- en: Since we search for the line that contains the word `scripting`. With a period
    after it followed by any text, this pattern only exists in two lines because the
    third line doesn't contain a period after the word.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们搜索包含`scripting`单词的行，并且该单词后面跟着句点和任意文本，这个模式只出现在两行中，因为第三行的`scripting`后面没有句点。
- en: 3 lines
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3行
- en: As we used the question mark that means the character class is not a must for
    the pattern to match.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了问号，这意味着字符类不是模式匹配的必要条件。
- en: Nothing
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么都没有
- en: As we used the pipe symbol, which is an ERE character, and as we used sed, we
    must use the `-r` option for sed to turn the extended engine on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了管道符，它是一个ERE字符，并且我们使用了sed，所以我们必须使用`-r`选项来启用sed的扩展引擎。
- en: Chapter 12
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: Field 1
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字段1
- en: You can use `print NR` or alternatively pipe the output to `wc -l`
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用`print NR`，或者将输出通过管道传递给`wc -l`
- en: We must use `-l` otherwise, it will count words instead.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用`-l`，否则它将计算单词数。
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You should use head `-n 1` to get the one page only.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用head `-n 1`来只获取一页。
- en: Chapter 13
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章
- en: Use the `lastlog` command
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`lastlog`命令
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use the `wc` command
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`wc`命令
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Zero. Because the line ends with two asterisks.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 零，因为该行以两个星号结尾。
- en: Chapter 14
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章
- en: '8'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '8'
- en: Since we are using the `sys` module, we should import it first.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在使用`sys`模块，我们应该先导入它。
- en: 'So the correct code should look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以正确的代码应该是这样的：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '2'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '2'
