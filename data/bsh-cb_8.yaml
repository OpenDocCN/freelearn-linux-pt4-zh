- en: Advanced Scripting Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级脚本编写技巧
- en: 'In this chapter, we will introduce the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下内容：
- en: Calculating and reducing the runtime of a script
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算和减少脚本的运行时间
- en: Writing one-line conditional statements and loops
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单行条件语句和循环
- en: Avoiding command not found warnings/errors and improving portability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免“命令未找到”警告/错误并提高可移植性
- en: Creating a config file and using it in tandem with your scripts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建配置文件并将其与脚本配合使用
- en: Improving your shell – GCC and command line colors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进你的Shell – GCC和命令行颜色
- en: Adding aliases, and altering user paths/variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加别名，修改用户路径/变量
- en: Echoing output to raw terminal devices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出回显到原始终端设备
- en: Creating simple frontend GUIs for Bash scripts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Bash脚本创建简单的前端GUI
- en: Compiling and installing your own Bash Shell
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和安装你自己的Bash Shell
- en: Recording terminal sessions for automation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录终端会话以实现自动化
- en: Writing high-quality scripts by example
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过示例编写高质量的脚本
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter will help the readers to learn about advanced scripting techniques
    as well as how to customize their shell. Users will learn to calculate as well
    as reduce the runtime of the script. It will be easy for users to write one-line
    loops and conditional statements. Users will learn to write scripts to avoid warnings
    and errors. They will learn how to create a config file and use it. Users will
    learn to improve the shell, adding aliases, altering path variables, and echoing
    output to terminal devices. Users will also learn about recording terminal sessions
    and writing scripts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助读者学习高级脚本编写技巧，以及如何自定义他们的Shell。用户将学习如何计算并减少脚本的运行时间。编写单行循环和条件语句将变得非常容易。用户将学习如何编写脚本以避免警告和错误，学习如何创建配置文件并使用它。用户还将学会如何改进Shell，添加别名，修改路径变量，并将输出回显到终端设备。用户还将了解如何记录终端会话和编写脚本。
- en: Calculating and reducing the runtime of a script
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算和减少脚本的运行时间
- en: In this recipe, we are going to learn how to calculate and reduce the script’s
    runtime. A simple `time` command will help in calculating the execution time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何计算并减少脚本的运行时间。一个简单的`time`命令将有助于计算执行时间。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Besides having a terminal open, make sure you have the necessary scripts present
    in your system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，请确保系统中已经存在必要的脚本。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Now, we will write a simple script that contains a few commands, and then, using
    the `time` command, we will get the runtime of that script. Create a script `cal_runtime.sh`
    and write the following code in it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个简单的脚本，包含几个命令，然后使用`time`命令来获取该脚本的运行时间。创建一个名为`cal_runtime.sh`的脚本，并在其中写入以下代码。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Now, we have written a script `cal_runtime.sh` and four commands in that script:
    `clear, ls, date,` and a `python3` installation command. Run your script as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经编写了一个脚本`cal_runtime.sh`，并在该脚本中包含了四个命令：`clear`、`ls`、`date`和一个`python3`安装命令。按如下方式运行你的脚本：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the execution, you will get the runtime of the script at the bottom of
    your output.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，你将在输出的底部看到脚本的运行时间。
- en: Writing one-line conditional statements and loops
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单行条件语句和循环
- en: In this recipe, we are going to write scripts that will contain one-line conditional
    statements as well as looping statements.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将编写包含单行条件语句和循环语句的脚本。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have basic knowledge of conditional and looping statements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要具备基本的条件语句和循环语句知识。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Now we will write a script for a one-line conditional statement. In this script,
    we will write a simple `if` condition. Create a script named `if_oneline.sh` and
    write the following code in it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写一个包含单行条件语句的脚本。在这个脚本中，我们将编写一个简单的`if`条件。创建一个名为`if_oneline.sh`的脚本，并在其中写入以下代码：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we will write a script for a one-line `loop` statement. In it, we are
    going to write a command that will execute 10 times. Create a script `for_online.sh`,
    and write this code in it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个包含单行`loop`语句的脚本。在其中，我们将编写一个执行10次的命令。创建一个名为`for_online.sh`的脚本，并在其中写入以下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will write a script for a one-line `while` statement. This will be
    an infinite loop. Create a script named `while_oneline.sh` and write the following
    code in it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个包含单行`while`语句的脚本。这个脚本将是一个无限循环。创建一个名为`while_oneline.sh`的脚本，并在其中写入以下代码：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we wrote three scripts for a one-line if statement, for loop,
    and while loop. In the if example, the condition will be checked and then the
    output will be displayed on the screen.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们为一行 if 语句、for 循环和 while 循环编写了三个脚本。在 if 示例中，条件将被检查，然后输出将显示在屏幕上。
- en: In the `for` loop example, the `echo` command will be executed 10 times and
    Hello world will be displayed 10 times on the screen. In the while example, it
    will be an infinite loop. We have given a sleep of `2` seconds so that the output,
    10, will be executed infinitely every 2 seconds.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `for` 循环示例中，`echo` 命令将执行 10 次，"Hello world" 会在屏幕上显示 10 次。在 while 示例中，它将是一个无限循环。我们已设置了
    `2` 秒的休眠时间，以便每 2 秒执行一次输出 10 的操作。
- en: Avoiding command not found warnings/errors and improving portability
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免 "command not found" 警告/错误并提高可移植性
- en: In this recipe, we are going to learn how to avoid warnings and errors in a
    shell script. For that, we are going to use the concept of redirection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何避免 Shell 脚本中的警告和错误。为此，我们将使用重定向的概念。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: Besides having a terminal open, you need to have basic knowledge of the redirection
    technique.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，你还需要具备重定向技术的基本知识。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Sometimes, while debugging your shell scripts, you may not want to view the
    errors or warning messages as well as your standard output. So for that, we are
    going to use the redirection technique. Now, we will write `lynda` as a command
    in our terminal. Run the command as follows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在调试你的 Shell 脚本时，你可能不想查看错误或警告信息以及标准输出。因此，我们将使用重定向技术。现在，我们将在终端中输入 `lynda` 命令，按如下方式运行该命令。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/7ed9fec7-b57e-4722-a086-e913a25c9419.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ed9fec7-b57e-4722-a086-e913a25c9419.jpg)'
- en: You will get the `command not found` error. We can avoid this error by running
    the following command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你将遇到 `command not found` 错误。我们可以通过运行以下命令来避免这个错误。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will write a script with a wrong syntax for declaring the variable. And we
    will redirect that error message to `log.txt`. Create a script `avoid_error.sh`,
    and write following content in it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个声明变量时语法错误的脚本。并将该错误信息重定向到 `log.txt`。创建一个名为 `avoid_error.sh` 的脚本，并在其中写入以下内容。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the second line, `a = 100`, we will get an error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，`a = 100`，我们会遇到一个错误。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Whatever error message you get after pressing *Enter*, that error will get
    stored in `log.txt`. Now view the contents of `log.txt` as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你按下 *Enter* 后遇到什么错误信息，那个错误都会被存储在 `log.txt` 中。现在，按照以下方式查看 `log.txt` 的内容：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/83deac13-d1ee-4119-80d9-f65d92f2118b.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83deac13-d1ee-4119-80d9-f65d92f2118b.jpg)'
- en: 'So, in this way, you can avoid warnings as well as errors. Now, run the script
    as:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你可以避免警告和错误。现在，按照以下方式运行脚本：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The error message will get stored in `log.txt`. You can view it by running the `cat
    log.txt` command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息将被存储在 `log.txt` 中。你可以通过运行 `cat log.txt` 命令查看它。
- en: Creating a config file and using it in tandem with your scripts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个配置文件并与脚本一起使用
- en: In this recipe, we are going to create a config file and use it in our shell
    script.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将创建一个配置文件，并在我们的 Shell 脚本中使用它。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: Besides having a terminal open, you need basic knowledge of creating scripts
    and config files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，你还需要具备创建脚本和配置文件的基本知识。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now, we are going to create a script and config file. The extension of the
    configuration file is `.conf`. Create a script called `sample_script.sh` and write
    this code in it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个脚本和配置文件。配置文件的扩展名为 `.conf`。创建一个名为 `sample_script.sh` 的脚本，并在其中写入以下代码：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will now create a configuration file. Create a file called `sampleconfig.conf`
    and write the following code in it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个配置文件。创建一个名为 `sampleconfig.conf` 的文件，并在其中写入以下代码：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After running the script username, password, and hostname, it will display the
    command we mentioned in  `PROMPT_COMMAND`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本后，用户名、密码和主机名将会显示在我们在 `PROMPT_COMMAND` 中提到的命令里。
- en: Improving your shell – GCC and command line colors
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改善你的 Shell – GCC 和命令行颜色
- en: In this recipe, we are going learn how a user can improve the shell. We will
    do this using the PS1 bash environment variable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何改进 Shell。我们将使用 PS1 Bash 环境变量来实现这一点。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: Besides a terminal, you need basic knowledge of PS1.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了终端之外，你还需要具备基本的 PS1 知识。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The terminal appearance is taken by the `PS1` shell variable. The content allowed
    in `PS1` will contain backslash-escape special characters.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 终端外观由 `PS1` shell 变量控制。`PS1` 中允许包含反斜杠转义特殊字符。
- en: 'First, we will see what PS1''s current contents in the system. For that, run
    the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看系统中 PS1 的当前内容。为此，请运行以下命令：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/16726413-5619-429c-8eca-2dee1118ee41.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16726413-5619-429c-8eca-2dee1118ee41.jpg)'
- en: 'Here are the backslash-escape special characters:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是反斜杠转义特殊字符：
- en: '`\u`: Current username'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\u`：当前用户名'
- en: '`\h`: Hostname'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\h`：主机名'
- en: '`\W`: Current working directory'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\W`：当前工作目录'
- en: '`\$`: Will display `#` if the user is root; otherwise it will display $ only'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\$: 如果用户是 root，则显示 `#`；否则仅显示 $'
- en: '`\@`: Current time in 12-hour AM/PM format'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\@`：当前时间，12 小时制 AM/PM 格式'
- en: 'Now, we will modify our Bash. Run the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改我们的 Bash。运行以下命令：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/7654f47a-4b67-4ee6-b8ff-d9c638fb4999.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7654f47a-4b67-4ee6-b8ff-d9c638fb4999.jpg)'
- en: Now, we will write a command to change the colors.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来更改颜色。
- en: 'To make the text color blue, run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要使文本颜色为蓝色，请运行以下命令：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/19605f38-20c8-4883-b1d5-05474fd373d3.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19605f38-20c8-4883-b1d5-05474fd373d3.jpg)'
- en: 'Now we, will see the `tput` command. Run the following commands:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 `tput` 命令。运行以下命令：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/ab886273-6eb9-4bfd-85ea-06292a5397f3.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab886273-6eb9-4bfd-85ea-06292a5397f3.jpg)'
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/3a93a212-9120-47a3-b059-3d1ce40b04d6.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a93a212-9120-47a3-b059-3d1ce40b04d6.jpg)'
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We used the `PS1` shell variable to improve our shell. We add colors in the
    `PS1` variable and the colors were changed. We used the `tput` command too. This
    command is also used to modify the settings. `setaf` sets the foreground color,
    and `setab` sets the background color. The color codes for the `tput` command
    are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `PS1` shell 变量来改进我们的 shell。我们在 `PS1` 变量中添加了颜色并更改了颜色。我们还使用了 `tput` 命令。此命令还用于修改设置。`setaf`
    设置前景色，`setab` 设置背景色。`tput` 命令的颜色代码如下：
- en: '| **Code** | **Color** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **颜色** |'
- en: '| 0 | Black |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 黑色 |'
- en: '| 1 | Red |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 红色 |'
- en: '| 2 | Green |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 绿色 |'
- en: '| 3 | Yellow |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 黄色 |'
- en: '| 4 | Blue |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 蓝色 |'
- en: '| 5 | Magenta |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 洋红色 |'
- en: '| 6 | Cyan |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 青色 |'
- en: '| 7 | White |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 白色 |'
- en: Adding aliases, and altering user paths/variables
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加别名，并改变用户路径/变量
- en: In this recipe, we are going to create an alias of a command and alter the user
    path variable. We are going to learn about the `alias` command. Using `alias`
    command, we are going to create aliases for other commands.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个命令的别名并改变用户路径变量。我们将学习 `alias` 命令。使用 `alias` 命令，我们将为其他命令创建别名。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Besides having a terminal open, we need the basic knowledge of the alias command.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开一个终端外，我们还需要基本的别名命令知识。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will create a alias for the `pwd` command. Run this command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为 `pwd` 命令创建一个别名。运行此命令：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we will create an alias for the `ls` command. Run the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为 `ls` 命令创建一个别名。运行以下命令：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `alias` command is used to create a shortcut for commonly used commands.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`alias` 命令用于创建常用命令的快捷方式。'
- en: We have created an alias `p` for command `pwd`. So, we just run the `p` command
    to get the present working directory.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为 `pwd` 命令创建了别名 `p`。因此，只需运行 `p` 命令即可获取当前工作目录。
- en: We have created an alias `l` for command `ls`. So, we just run the `l` command
    to get the list.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为 `ls` 命令创建了别名 `l`。因此，只需运行 `l` 命令即可获取列表。
- en: Echoing output to raw terminal devices
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将输出回显到原始终端设备
- en: In this recipe, we are going to learn how we can echo the output from one terminal
    to another. To achieve this, we are going to use `tty`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何将一个终端的输出回显到另一个终端。为了实现这一点，我们将使用 `tty`。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Besides having a terminal open, you need basic knowledge of `tty`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开一个终端外，您还需要基本的 `tty` 知识。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: '**tty** means **teletype.** `tty` displays terminal-related information. Everything
    in Linux is a file. So, `tty` prints the filename of the terminal that is connected
    to standard input.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**tty** 意味着 **电传打字机**。`tty` 显示与标准输入连接的终端的文件名。在 Linux 中，一切都是文件。因此，`tty` 打印连接到标准输入的终端的文件名。'
- en: 'Now, open a terminal and run tty:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开一个终端并运行 tty：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After running this command, the current `tty` session will be displayed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，将显示当前 `tty` 会话。
- en: Open another terminal B and do the same; you will get that terminal’s tty session.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打开另一个终端 B 并执行相同操作；您将获取该终端的 tty 会话。
- en: 'Now I have two tty sessions as:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有两个 tty 会话如下：
- en: Terminal A = `/dev/pts/4`
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端 A = `/dev/pts/4`
- en: Terminal B = `/dev/pts/7`
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终端 B = `/dev/pts/7`
- en: 'In Terminal A, run the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端 A 中，运行以下命令：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now check Terminal B; `Hello world` will be displayed on the terminal. Again,
    run the following command to send another string to terminal B.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查终端 B；`Hello world` 将显示在终端上。再次运行以下命令，将另一个字符串发送到终端 B。
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The following will be the output on terminal B.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在终端 B 上的输出。
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating simple frontend GUIs for Bash scripts
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Bash 脚本创建简单的前端 GUI
- en: In this recipe, we are going to create a simple GUI. We are going to use the
    zenity tool to do so.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将创建一个简单的 GUI。我们将使用 zenity 工具来实现它。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Besides having a terminal open, make sure you have zenity installed in your
    system.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，请确保你的系统中安装了 zenity。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现…
- en: '**Zenity** is used to add a graphical interface to shell scripts using a single
    command. Zenity comes by default with Ubuntu. If not, then install it as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zenity** 用于通过一个命令为 Shell 脚本添加图形界面。Zenity 默认包含在 Ubuntu 中。如果没有，请按以下方式安装：'
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: First, we will catch a `yes/no` response in our shell script and then perform
    different commands based on the button. Run the following command to get the `yes/no`
    response.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在 Shell 脚本中捕获 `yes/no` 响应，然后根据按钮执行不同的命令。运行以下命令以获取 `yes/no` 响应。
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/c8d69678-1488-4269-8d2d-703879be84df.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8d69678-1488-4269-8d2d-703879be84df.jpg)'
- en: 'Run the following command to get the error message box:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以获取错误消息框：
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/217d5a79-cacf-46da-acb2-d5e2092e5fad.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/217d5a79-cacf-46da-acb2-d5e2092e5fad.jpg)'
- en: 'Run the following command to get the text entry:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以获取文本输入框：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/d31b659d-2deb-4591-af99-77af34fd7c87.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d31b659d-2deb-4591-af99-77af34fd7c87.jpg)'
- en: Now we will create a script where the user has to enter a time and till that
    time the user has to wait. When the wait is over, the user will get a message.
    Create a script, `user_wait.sh`, and write the following content in it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个脚本，用户需要输入一个时间，直到该时间过去，用户才可以继续。当等待时间结束时，用户将收到一条消息。创建一个脚本 `user_wait.sh`，并在其中写入以下内容。
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use 10s for 10 seconds, 20m for 20 minutes, or 3h for 3 hours as shown in the
    following screenshots:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 10s 表示 10 秒，20m 表示 20 分钟，或 3h 表示 3 小时，如下截图所示：
- en: '![](img/6f9dec70-4bc4-4fff-b35f-b6191178c535.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f9dec70-4bc4-4fff-b35f-b6191178c535.jpg)'
- en: '![](img/25c0fec8-e204-45cb-91bc-17d83b379e9b.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25c0fec8-e204-45cb-91bc-17d83b379e9b.jpg)'
- en: 'The timer is over:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 定时器已结束：
- en: '![](img/4d4b7d73-cf24-4e4f-930e-c18e652ddaae.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d4b7d73-cf24-4e4f-930e-c18e652ddaae.jpg)'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Zenity is an open source application that displays dialog boxes using shell
    scripts as well as the command line. Using zenity communication between the user
    and shell will be easy:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Zenity 是一个开源应用程序，通过 Shell 脚本和命令行显示对话框。使用 zenity，用户与 Shell 之间的通信将变得简单：
- en: '`--question`: Displays question dialog box'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--question`：显示问题对话框'
- en: '`--error`: Displays error dialog box'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--error`：显示错误对话框'
- en: '`--entry`: Displays text entry dialog box'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--entry`：显示文本输入对话框'
- en: '`--info`: Displays info dialog box'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--info`：显示信息对话框'
- en: In the script `user_wait.sh`, we are creating a Timer using a text entry dialogbox
    and info dialogbox. We have created a variable named `time`. We are asking the
    user to enter a duration of time and that value will be stored in the time variable.
    Then we are providing that variable to sleep. Therefore, until that time, the
    user has to wait. After the time completes, the user will get the information
    dialogbox as the time is over.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本 `user_wait.sh` 中，我们使用文本输入对话框和信息对话框创建了一个定时器。我们创建了一个名为 `time` 的变量。我们让用户输入一个时间段，该值将存储在
    time 变量中。然后，我们将该变量传递给 sleep。因此，在此期间，用户需要等待。时间结束后，用户将收到信息对话框，表示时间已到。
- en: Compiling and installing your own Bash shell
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译并安装你自己的 Bash shell
- en: In this recipe, we are going to learn about compile and install the Bash shell.
    We are going to use SHC, which is shell script compiler.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何编译并安装 Bash shell。我们将使用 SHC，它是一个 Shell 脚本编译器。
- en: Getting ready
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Besides having a terminal open, make sure you have SHC installed in your system.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，请确保你的系统中安装了 SHC。
- en: How to do it...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现…
- en: Now we will write a simple shell script that will print `“Hello World”`. Using
    SHC, the Shell script will be converted into binaries directly. Create a script
    `hello.sh`, and write the following content in it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将编写一个简单的 Shell 脚本来打印 `“Hello World”`。使用 SHC，Shell 脚本将直接转换为二进制文件。创建一个脚本 `hello.sh`，并在其中写入以下内容。
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, to log all commands, run the `logger` command as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要记录所有命令，请运行以下 `logger` 命令：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'After executing the script, two extra files will be created. The files are:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 执行脚本后，将创建两个额外的文件。文件包括：
- en: '`hello.sh.x`: This file is the stripped binary encrypted shell script in binary
    format'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hello.sh.x`：此文件是以二进制格式加密的Shell脚本的二进制版本'
- en: '`hello.sh.x.c`: This file is the C source code of `hello.sh`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hello.sh.x.c`：该文件是`hello.sh`的C源代码'
- en: 'Now, execute the encrypted shell script as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按如下方式执行加密的Shell脚本：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The logger command will make an entry about your file in the syslog file, which
    is present in the `/var/log` directory of your system. You can check out that
    file. Navigate to `/var/log` directory and run `nano syslog`; you will find the
    entry in it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录命令将在你的系统的`/var/log`目录下的syslog文件中记录关于你的文件的条目。你可以查看该文件。导航到`/var/log`目录并运行`nano
    syslog`；你将在其中找到相关条目。
- en: Recording terminal sessions for automation
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 录制终端会话以实现自动化
- en: In this recipe, we are going to learn how to record terminal sessions. We are
    going to use the **ttyrec** tool to do this.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何记录终端会话。我们将使用**ttyrec**工具来实现。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Besides having a Terminal open, make sure ttyrec is installed in your system.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，确保你的系统已安装ttyrec。
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To record terminal data, we use the ttyrec tool. You can also play the recorded
    data. Now, to record the terminal session, enter the `ttyrec` command in the terminal.
    You can end the recording by typing `exit`. Run the following command to record
    the terminal session:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要记录终端数据，我们使用ttyrec工具。你还可以播放录制的数据。现在，输入`ttyrec`命令以记录终端会话。你可以通过输入`exit`来结束录制。运行以下命令以记录终端会话：
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: 'When you run the `ttyrec` command, the terminal record session will be started.
    The recording will go on until you type exit. As soon as you type `exit`, the
    recording will be stopped and a file will be created in your current working directory.
    The filename will be `ttyrecord`. You can play this file by running the `ttyplay`
    command. Run the `ttyrecord` file as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`ttyrec`命令时，终端会话的记录将开始。录制会一直持续，直到你输入`exit`。一旦输入`exit`，录制将停止，并且一个文件将在当前工作目录中创建。文件名将是`ttyrecord`。你可以通过运行`ttyplay`命令来播放此文件。如下所示运行`ttyrecord`文件：
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Writing high-quality scripts by example
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过示例编写高质量脚本
- en: In this recipe, we are going to see functions in shell scripts. We will see
    how our program testing is done, sequentially on the various parts, using functions.
    Functions help improve the readability of a program.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到Shell脚本中的函数。我们将看到如何在程序的各个部分逐步进行测试，使用函数。函数有助于提高程序的可读性。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Besides having a terminal open, you need to have a basic knowledge of functions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开终端外，你还需要具备基本的函数知识。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'We are going to write a simple function in our shell script to return the current
    date and time. Create a script `function_example.sh`, and write this code in it:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Shell脚本中编写一个简单的函数来返回当前的日期和时间。创建一个脚本`function_example.sh`，并在其中编写如下代码：
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now we will create another script containing two functions with the same name.
    Create a script `function2.sh`, and write the following content in it.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建另一个脚本，其中包含两个相同名称的函数。创建一个脚本`function2.sh`，并在其中编写以下内容。
- en: '[PRE34]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In the first script, we created a function named `print_date()` and we just
    printed a date using a function.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个脚本中，我们创建了一个名为`print_date()`的函数，并通过该函数打印了一个日期。
- en: In the second script, we wrote two functions with the same name. However, after
    execution, the last value was printed on the screen. So in this case, Second block
    Number 2 will be printed on the screen.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个脚本中，我们编写了两个相同名称的函数。然而，执行后，最后一个值会被打印到屏幕上。所以在这种情况下，第二块编号2会被打印到屏幕上。
