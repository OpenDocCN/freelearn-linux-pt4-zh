- en: Process Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程管理
- en: Processes access multiple resources in a running system. Process management
    is essential to manage these resources effectively and keep your system up and
    running smoothly. In this chapter, you will learn how to view processes running
    on a Linux system and how to employ interactive management from the command line.
    Then, you will learn how to control different programs running on a Linux system
    using the command line. You will also learn how to communicate with different
    processes using signals and how to modify their priority level on a running system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 进程在运行系统中访问多个资源。进程管理对于有效管理这些资源并保持系统平稳运行至关重要。在本章中，你将学习如何查看在 Linux 系统上运行的进程，以及如何通过命令行进行交互式管理。然后，你将学习如何使用命令行控制在
    Linux 系统上运行的不同程序。你还将学习如何使用信号与不同的进程进行通信，以及如何在运行系统中修改它们的优先级。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding processes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解进程
- en: Viewing current processes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看当前进程
- en: Communicating with processes using signals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号与进程进行通信
- en: Monitoring processes and load averages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控进程和负载平均值
- en: Managing a processes' priority levels with nice and renice
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 nice 和 renice 管理进程的优先级
- en: Controlling jobs on the command line
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行中控制作业
- en: Understanding processes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解进程
- en: This section deals with various concepts related to processes, such as their
    types, states, attributes, and so on. Process management is an essential skill
    that all types of users of Linux systems should master.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍与进程相关的各种概念，如进程的类型、状态、属性等。进程管理是所有类型的 Linux 系统用户应掌握的重要技能。
- en: Defining a process
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义进程
- en: 'A process is an instance of a program in execution. It differs from a program
    or command in the sense that a single program can start several processes simultaneously.
    Each process uses several resources, as mentioned in the following list:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 进程是程序执行的实例。它不同于程序或命令，因为单个程序可以同时启动多个进程。每个进程使用多个资源，如下所列：
- en: An address space in memory
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存中的地址空间
- en: Each process has some security properties, such as ownership, privileges, and
    so on
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有一些安全属性，如所有权、权限等。
- en: Each process has a state
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有一个状态
- en: Each process has local and global environment variables
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有本地和全局环境变量
- en: Each process has a scheduling context
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有一个调度上下文
- en: Each process has allocated resources, such as file descriptors, network ports,
    and so on
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个进程都有分配的资源，如文件描述符、网络端口等。
- en: A kernel keeps tracks of each process by assigning each process a unique **process
    ID** (**PID**) number
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核通过为每个进程分配一个独特的**进程 ID**（**PID**）编号来跟踪每个进程。
- en: A user's program accesses the information for each process through a directory
    called `/proc/PID`, which is maintained by a kernel
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户的程序通过一个名为 `/proc/PID` 的目录访问每个进程的信息，该目录由内核维护。
- en: Process creation on a Linux system
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 系统上的进程创建
- en: All processes on CentOS 7 are descendants of the first system process, known
    as **systemd**. An existing process (parent) duplicates its own address space
    using a fork system call to create a new process (child) structure. Each new process
    is assigned a unique PID for tracking process state, CPU usage, memory usage,
    and other characteristics. PIDs are generally assigned in ascending order when
    a new process is created. The PID 1 is assigned to the systemd process. The PID
    and **PPID** (short for **Parent Process ID**) are the attributes of each process
    running on a Linux system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS 7 上的所有进程都是第一个系统进程的后代，该进程被称为**systemd**。一个现有进程（父进程）通过 fork 系统调用复制自己的地址空间，创建一个新的进程（子进程）结构。每个新进程都会被分配一个独特的
    PID，用于跟踪进程状态、CPU 使用率、内存使用率等特征。PID 通常在创建新进程时按升序分配。PID 1 被分配给 systemd 进程。PID 和**PPID**（即**父进程
    ID**）是每个在 Linux 系统上运行的进程的属性。
- en: PPID is the PID of a parent process that starts the child process. If a parent
    dies, that process is known as an **orphan** process. For a long time, the orphan
    process has been adopted by the `init` (PID=1) process. However, nowadays, in
    recent kernels, `kthread` (PID=2) is the adoptive process for orphan child processes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PPID 是启动子进程的父进程的 PID。如果父进程死亡，该进程被称为**孤儿进程**。长期以来，孤儿进程由 `init`（PID=1）进程收养。然而，在现代内核中，`kthread`（PID=2）是孤儿子进程的收养进程。
- en: A **thread ID** (**TID**) number is the same as PID for single-threaded processes.
    For multi-threaded processes, each thread shares the same PID, but a different
    TID.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程 ID**（**TID**）号与单线程进程的 PID 相同。对于多线程进程，所有线程共享相同的 PID，但每个线程有不同的 TID。'
- en: Processes types
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程类型
- en: There are different types of processes, based on the task they are performing.
    Some of the common types of processes that exist on a Linux system are described
    in the following subsections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据任务的不同，进程有不同的类型。以下子节描述了一些 Linux 系统上常见的进程类型。
- en: Interactive processes
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式进程
- en: This type of process is started by a user, either on the command line or a through
    graphical user interface, such as Bash shell, Firefox, `top` command, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的进程由用户启动，可以通过命令行或图形用户界面启动，如 Bash shell、Firefox、`top` 命令等。
- en: Batch processes
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批处理进程
- en: These kind of processes are scheduled to run from the Terminal and disconnect
    themselves from the Terminal at a later stage. An example of this is `updatedb`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的进程通常在终端中调度运行，并在稍后的阶段断开与终端的连接。例如，`updatedb` 就是一个例子。
- en: Daemons
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 守护进程
- en: These processes are automatically started on system boot up and continue to
    run until shutdown or until stopped in-between manually. They continuously wait
    for a user or system request in the background. By convention, the names of most
    daemon programs end with the letter `d`, such as `httpd`, `named`, `mysqld`, and
    so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进程在系统启动时自动启动，并持续运行，直到关机或在中途被手动停止。它们在后台不断等待用户或系统请求。按照惯例，大多数守护进程的名称以字母 `d` 结尾，如
    `httpd`、`named`、`mysqld` 等。
- en: Threads
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程
- en: Threads are also known as **lightweight processes** (**LWPs**). Each thread
    has a main process whose memory and other resources are shared by a thread. Each
    thread is scheduled and runs independently by the kernel. A thread can end at
    any time without terminating the whole process, and a process can also create
    new threads at any time. For example, when we open multiple tabs in a Firefox
    browser, it creates multiple threads, and each thread runs independently.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 线程也被称为 **轻量级进程**（**LWPs**）。每个线程都有一个主进程，线程与主进程共享内存和其他资源。每个线程由内核调度并独立运行。线程可以随时结束，而不会终止整个进程，进程也可以随时创建新的线程。例如，当我们在
    Firefox 浏览器中打开多个标签页时，浏览器会创建多个线程，每个线程独立运行。
- en: Kernel threads
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内核线程
- en: These are kernel tasks that are started and used by the kernel, and users do
    not have much control over them, such as `kthreadd`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是由内核启动并使用的内核任务，用户对它们的控制非常有限，例如 `kthreadd`。
- en: Process states
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程状态
- en: Linux is a multitasking operating system, where each CPU core executes one process
    at any single point in time. This process of scheduling (constantly shifting processes
    on and off the CPU), and allocating CPU time as per priority, is one of the key
    functions of a kernel. Based on this, processes are assigned a state such as running,
    sleeping, stopped, and so on, which keeps changing with the circumstances.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 是一个多任务操作系统，每个 CPU 核心在任何时刻执行一个进程。这个调度过程（不断地将进程从 CPU 上切换下来和分配 CPU 时间，依据优先级）是内核的关键功能之一。基于此，进程被分配一个状态，如运行、休眠、停止等，并且随着情况的变化而不断变化。
- en: 'The following table lists Linux process states with their flags and descriptions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了 Linux 进程状态及其标志和描述：
- en: '| **Name of process state** | **Flag** | **Kernel defined name** | **Description**
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **进程状态名称** | **标志** | **内核定义名称** | **描述** |'
- en: '| Running | `R` | `TASK_RUNNING` | In this state, a process is either currently
    executing on a CPU or waiting to run in a queue. This state is also known as **runnable**
    when a process is ready to run and is waiting in a queue. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 运行中 | `R` | `TASK_RUNNING` | 在此状态下，进程要么正在 CPU 上执行，要么在队列中等待运行。这个状态也被称为 **可运行**，当进程准备好运行并在队列中等待时。
    |'
- en: '| Sleeping | `S` | `TASK_INTERRUPTIBLE` | In this state, a process is waiting
    for an event to complete. On receiving a signal, the process returns to the running
    state. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 休眠中 | `S` | `TASK_INTERRUPTIBLE` | 在此状态下，进程正在等待某个事件完成。接收到信号时，进程将返回到运行状态。
    |'
- en: '| `D` | `TASK_UNINTERRUPTIBLE` | In this state, a process will not respond
    to a signal. It is used only in specific conditions, usually associated with I/O,
    when interruptions are not desirable. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `D` | `TASK_UNINTERRUPTIBLE` | 在此状态下，进程不会响应信号。它仅在特定条件下使用，通常与 I/O 相关，当不希望中断时使用。
    |'
- en: '| `K` | `TASK_KILLABLE` | In this state, a process is in the sleeping state and
    will only respond to a kill signal to exit. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `K` | `TASK_KILLABLE` | 在此状态下，进程处于休眠状态，并且只会响应 kill 信号以退出。 |'
- en: '| Stopped | `T` | `TASK_STOPPED` | This state is reached when a process is
    stopped by a job control signal. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 停止 | `T` | `TASK_STOPPED` | 该状态发生在进程被作业控制信号停止时。 |'
- en: '| Zombie | `Z` | `EXIT_ZOMBIE` | A zombie or defunct process state is one where
    a process has terminated but its entry is not removed from the process table by
    the respective parent. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 僵尸 | `Z` | `EXIT_ZOMBIE` | 僵尸或死掉的进程状态是指进程已终止，但其条目没有被相应的父进程从进程表中移除。 |'
- en: Viewing current processes
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看当前进程
- en: Each process running on a Linux system has various attributes, such as PID,
    PPID, the CPU time consumed by the process, the physical and virtual memory consumption
    of the process, and so on. All of this information can be found in the process
    table of the operating system. When working in a multi-user environment, it might
    happen that a process started by a user consumes the CPU cycle excessively. Hence,
    it is essential to manage processes and to manage computer resources efficiently.
    For this, we need to identify the types of processes and change their priority
    levels, or even terminate them if required. This section describes the use of
    various commands that are helpful for viewing processes and their attributes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在Linux系统上运行的进程都有各种属性，如PID、PPID、进程消耗的CPU时间、进程的物理和虚拟内存消耗等。所有这些信息都可以在操作系统的进程表中找到。当在多用户环境中工作时，可能会发生某个用户启动的进程过度消耗CPU周期。因此，管理进程和计算机资源的效率至关重要。为此，我们需要识别进程的类型并调整其优先级，甚至在必要时终止它们。本节描述了多种有助于查看进程及其属性的命令。
- en: Listing running processes
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出正在运行的进程
- en: The **ps** (short for **process status**) is used to list the current processes
    information that's available in the process table. It's similar to the `tasklist`
    command of Windows, which also used to list the running tasks of Windows in the
    command prompt.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**ps**（即**进程状态**的缩写）用于列出进程表中当前的进程信息。它类似于Windows中的`tasklist`命令，用于在命令提示符下列出Windows正在运行的任务。'
- en: The ps command
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ps命令
- en: 'The Linux version of the `ps` command supports three types of format, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Linux版的`ps`命令支持三种格式，如下所示：
- en: '**Unix (POSIX) standard**: In this format, options may be grouped and prefixed
    with a hyphen'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unix (POSIX)标准**：在此格式中，选项可以组合使用，并且前面带有连字符'
- en: '**BSD standard**: In this format, various options can be grouped, but they
    are not prefixed with a hyphen symbol'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BSD标准**：在此格式中，多个选项可以组合使用，但不以连字符符号为前缀'
- en: '**GNU standard**: In this format, long options are used, which are prefixed
    with two hyphen symbols'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU标准**：在此格式中，使用长选项，且前面带有两个连字符符号'
- en: Various uses for the `ps` command, are described in the following subsections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令的各种用法在以下小节中进行了描述。'
- en: Displaying processes running from the current shell
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前shell运行的进程
- en: 'Use the `ps` command, as shown in the following screenshot to list the process
    running from the current shell:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ps`命令，如下所示的截图，列出当前shell运行的进程：
- en: '![](img/f43c215a-365a-4cd8-9a58-864c5ff1d60b.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f43c215a-365a-4cd8-9a58-864c5ff1d60b.png)'
- en: 'The output shows rows of data with the following columns:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示数据行，包含以下列：
- en: '| **Command** | ** Description** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `PID` | The process ID of the running process |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `PID` | 正在运行的进程的进程ID |'
- en: '| `TTY` | The Terminal type from which the process is running |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `TTY` | 进程运行的终端类型 |'
- en: '| `TIME` | The cumulative CPU time consumed by the process and the child processes
    started by the process |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `TIME` | 进程及其启动的子进程所消耗的累积CPU时间 |'
- en: '| `CMD` | The command that runs as the current process |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `CMD` | 当前进程运行的命令 |'
- en: Displaying all processes by their user
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按用户显示所有进程
- en: 'The `ps` command can be used with the `-u` option to filter processes by user,
    as shown in the following command line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ps`命令和`-u`选项通过用户过滤进程，如下所示的命令行：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Displaying all processes in different formats
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以不同格式显示所有进程
- en: 'The `ps` command can be used display all running processes on a system in different
    formats, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以以不同的格式显示系统中所有正在运行的进程，如下所示：'
- en: Display all the processes running in the system in Unix format.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以Unix格式显示系统中所有正在运行的进程。
- en: 'The `ps` command can be used to display all running processes in a simple Unix
    format with either the `-A` option or the `-e` option, as shown in the following
    command line:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以使用`-A`或`-e`选项显示系统中所有正在运行的进程，以简单的Unix格式，如下所示的命令行：'
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ps` command can be used to display a detailed listing of all the running
    processes by using the `-e` option to show all the processes and the `-f` option
    to show full details of each process in Unix format, as shown in the following
    command line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以通过使用`-e`选项显示所有正在运行的进程，并使用`-f`选项显示每个进程的完整细节，以Unix格式显示，如下所示的命令行：'
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output on execution of preceding command is shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述命令后的输出如下所示：
- en: '![](img/d227967a-e12a-4c2f-b813-8d7a2ed119fd.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d227967a-e12a-4c2f-b813-8d7a2ed119fd.png)'
- en: In the preceding example, we have limited the output of the `ps` command to
    display only the top five lines using the head command. In subsequent examples,
    we have used the same technique to limit the output of `ps` command for demonstration
    purposes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已将`ps`命令的输出限制为仅显示前五行，使用了`head`命令。在后续示例中，我们使用了相同的技巧来限制`ps`命令的输出以便进行演示。
- en: 'The output shows rows of data with the following columns:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示带有以下列的数据行：
- en: '| **Command** | **Description** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `UID` | User ID of the person who ran the command |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `UID` | 执行命令的用户ID |'
- en: '| `PID` | Process ID of the command |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `PID` | 命令的进程ID |'
- en: '| `PPID` | Parent process that started the command |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `PPID` | 启动该命令的父进程 |'
- en: '| `C` | Number of children a process has |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 进程拥有的子进程数量 |'
- en: '| `STIME` | Start time for the process |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `STIME` | 进程的启动时间 |'
- en: '| `TTY` | Terminal associated with the process; you will see a question mark `?` if
    a process is not attached to a Terminal |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `TTY` | 与进程关联的终端；如果进程没有附加到终端，你将看到一个问号`?` |'
- en: '| `TIME` | Cumulative CPU time consumed by the process and the child processes
    started by the process |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `TIME` | 进程及其子进程消耗的累计CPU时间 |'
- en: '| `CMD` | The command that was run to start the process |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `CMD` | 启动该进程的命令 |'
- en: '| Using the `-F` option with `-e` (`$ ps -eF` ) will list further columns:
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 使用`-F`选项与`-e`选项一起使用（`$ ps -eF`）将列出更多的列： |'
- en: '| `PSR` | Processor number to which the process is assigned |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `PSR` | 分配给进程的处理器编号 |'
- en: '| `SZ` | Total amount of memory size in physical pages for the given process
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `SZ` | 给定进程的物理页面总内存大小 |'
- en: '| `RSS` | Resident set size is the actual physical memory size consumed by
    a process |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `RSS` | 常驻内存集大小，表示进程实际占用的物理内存大小 |'
- en: Display all the processes running in system using BSD syntax.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BSD语法显示系统中所有正在运行的进程。
- en: 'The `ps` command can be used with the aux option to display all running processes
    in BSD syntax, as shown in the following command line. Here, option a lists all
    of the processes attached to Terminals, option u lists the users of processes,
    and option `x` lists all processes that are not associated with a Terminal:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令可以与aux选项一起使用，以BSD语法显示所有运行的进程，如下所示的命令行。在这里，选项`a`列出所有附加到终端的进程，选项`u`列出进程的用户，选项`x`列出所有未与终端关联的进程：'
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output on execution of the preceding command is shown in the following
    screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述命令后的输出如下所示：
- en: '![](img/6d1532ae-6d36-4f53-b48d-8d84b47d9a78.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d1532ae-6d36-4f53-b48d-8d84b47d9a78.png)'
- en: 'The output shows rows of data with the following columns:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示带有以下列的数据行：
- en: '| **Command** | **Description** |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `USER` | The name of the user associated with the process |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `USER` | 与该进程关联的用户名称 |'
- en: '| `PID` | The unique numeric process ID assigned to the process |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `PID` | 分配给该进程的唯一数字进程ID |'
- en: '| `%CPU` | Percentage of the CPU used by a process (the length of time the
    process has been running for, divided by the total CPU time used by the process)
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `%CPU` | 进程使用的CPU百分比（进程运行的时间长度除以进程使用的总CPU时间） |'
- en: '| `%MEM` | Percentage of the RAM memory used by the process (memory used divided
    by the total memory available) |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `%MEM` | 进程使用的RAM内存百分比（使用的内存除以总可用内存） |'
- en: '| `VSZ` | Virtual memory size expressed in KiB |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `VSZ` | 表示虚拟内存大小，以KiB为单位 |'
- en: '| `RSS` | Resident set size is the actual physical memory size consumed by
    the process |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `RSS` | 常驻内存集大小，表示进程实际占用的物理内存大小 |'
- en: '| `TTY` | The Terminal controlling the process; you will see `?` if the process
    is not attached to a Terminal |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `TTY` | 控制该进程的终端；如果进程没有附加到终端，你将看到`?` |'
- en: '| `STAT` | Displays the following process states: `R`: Running`S`: Sleep interruptible`D`:
    Sleep uninterruptible`T`: Stopped`Z`: Zombie`<`: High priority`N`: Low priority`L`:
    Has pages locked into memory`s`: Session leader`l`: Multithreaded`+`: Foreground
    process |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `STAT` | 显示以下进程状态：`R`：运行中`S`：可中断休眠`D`：不可中断休眠`T`：已停止`Z`：僵尸进程`<`：高优先级`N`：低优先级`L`：内存中有页面被锁定`s`：会话领导进程`l`：多线程`+`：前台进程
    |'
- en: '| `START` | Date or time when the process was started |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `START` | 进程启动的日期或时间 |'
- en: '| `TIME` | Cumulative CPU time consumed by the process and the child processes
    started by the process |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `TIME` | 进程及其启动的子进程所消耗的累计CPU时间 |'
- en: '| `CMD` | Command used to start the process |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `CMD` | 启动进程时使用的命令 |'
- en: Sorting processes based on different parameters
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于不同参数排序进程
- en: In this section, we will cover different examples to show you how the sorting
    of processes can be done with the `ps` command based on different parameters.
    The output of each example is shown in the subsequent screenshots.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示不同的示例，向您展示如何根据不同的参数使用`ps`命令对进程进行排序。每个示例的输出将在随后的截图中显示。
- en: 'Sort processes in ascending order by the highest CPU utilization:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按CPU利用率升序排序进程：
- en: '![](img/adfa6205-dc85-49c3-95e4-057125b6dd1c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adfa6205-dc85-49c3-95e4-057125b6dd1c.png)'
- en: 'Sort processes in ascending order by the highest memory utilization:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按内存利用率升序排序进程：
- en: '![](img/b7e334a7-6bbd-4663-8570-50e2f7e960b9.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7e334a7-6bbd-4663-8570-50e2f7e960b9.png)'
- en: 'Combine both the CPU and memory utilization for sorting by a single command:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过单一命令结合CPU和内存利用率进行排序：
- en: '![](img/0f3f70cf-e7c7-4fef-88a6-e7f935e8068a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f3f70cf-e7c7-4fef-88a6-e7f935e8068a.png)'
- en: If a zombie process entry is available in the process table, it will appear
    as exiting or defunct.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进程表中有僵尸进程条目，它将显示为退出或无效。
- en: Displaying processes by user
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按用户显示进程
- en: 'To filter processes by user, the `-u` option is followed by the username. Multiple
    usernames can be provided, separated by a comma. In the following example, the `ps`
    command is used to list the processes started by user Apache only, as shown in
    the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要按用户过滤进程，`-u`选项后跟用户名。可以提供多个用户名，用逗号分隔。以下示例使用`ps`命令仅列出由用户Apache启动的进程，如下图所示：
- en: '![](img/60c34509-b0b3-45ea-8e99-59ccac66a75c.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60c34509-b0b3-45ea-8e99-59ccac66a75c.png)'
- en: Displaying process information by name
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按进程名显示进程信息
- en: 'To list process information by process name, use the `-C` option, followed
    by the exact process name, as shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要按进程名列出进程信息，使用`-C`选项，后跟准确的进程名，如下图所示：
- en: '![](img/a135fd94-43df-4eda-9f57-064b942750b5.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a135fd94-43df-4eda-9f57-064b942750b5.png)'
- en: Displaying process details by PID
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按PID显示进程详情
- en: 'To display process information using PID, use the `-p` option, followed by
    the PID of processes, separated by a comma, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PID显示进程信息时，使用`-p`选项，后跟进程的PID，多个PID之间用逗号分隔，如下图所示：
- en: '![](img/3da3f660-3c0c-47ff-b05e-ca9407c6770a.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3da3f660-3c0c-47ff-b05e-ca9407c6770a.png)'
- en: Displaying a process hierarchy in a tree style
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以树形结构显示进程层次
- en: 'To display the parent-child relationship between processes, the `--forest`
    option is used, as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示进程之间的父子关系，可以使用`--forest`选项，如下图所示：
- en: '![](img/ea5ac33d-c828-4fd5-8a7a-6434ab6c84cc.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea5ac33d-c828-4fd5-8a7a-6434ab6c84cc.png)'
- en: Displaying the child processes of a parent
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示父进程的子进程
- en: 'To display the child processes of a parent using the PID of the main process,
    we can use the `--ppid` option. The main parent process is owned by the root,
    and child processes are forked and owned by the parent. The example of the `ps`
    command to display the child of a specified parent `PID` is shown in the following
    screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示某个父进程的子进程，可以使用`--ppid`选项，后跟主进程的PID。主父进程由root拥有，子进程由父进程分叉并由父进程拥有。以下示例展示了如何使用`ps`命令显示指定父进程PID的子进程：
- en: '![](img/57a00456-d200-4547-a44e-48d8aebfa462.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57a00456-d200-4547-a44e-48d8aebfa462.png)'
- en: Displaying the thread of a process
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示进程的线程
- en: 'To display the thread of a process, the `-L` option is used with the `ps` command,
    as shown in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示进程的线程，`-L`选项与`ps`命令一起使用，如下图所示：
- en: '![](img/5f0262ea-1f87-45b7-9382-beab79e39e96.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f0262ea-1f87-45b7-9382-beab79e39e96.png)'
- en: The output shows rows of data with several columns, all of which have been covered
    in previous examples, except the `LWP` column, which represents the TID, and **NLWP**
    (short for **Number of Lightweight Processes**), which represents the number of
    threads in a process here.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了一行行数据，包含多个列，所有列都已在前面的示例中介绍，除了 `LWP` 列（表示 TID）和 **NLWP**（即 **Number of Lightweight
    Processes** 的缩写，表示进程中线程的数量）。
- en: Displaying the pid of a process if the process name is known
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果已知进程名称，则显示该进程的 pid
- en: 'To print only the PIDs of processes whose names are known, we use the `-C`
    option, followed by the exact process name and the `-o` option, followed by `pid=`,
    as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 若要仅打印已知名称的进程的 PID，可以使用 `-C` 选项，后跟精确的进程名称，并使用 `-o` 选项，后跟 `pid=`，如下所示：
- en: '![](img/a802249d-0c48-4504-9efd-1dd27ed0d9da.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a802249d-0c48-4504-9efd-1dd27ed0d9da.png)'
- en: You can look up the meaning of all the labels and the various process state
    descriptions in the Unix standard and BSD standard from the man page of the `ps`
    command.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 `ps` 命令的手册页中查找 Unix 标准和 BSD 标准中所有标签的含义以及各种进程状态描述。
- en: Using the pstree command
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `pstree` 命令
- en: 'This command is used to display the parent-child relationship in hierarchical
    format. The output of this command is quite similar to the output of the `ps axjf`
    command and the `ps -ef --forest` command, as shown in the following command line:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于以层次格式显示父子关系。此命令的输出与 `ps axjf` 命令和 `ps -ef --forest` 命令的输出非常相似，如以下命令行所示：
- en: '[PRE4]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot displays the tree hierarchy of a single process with
    PID using the `pstree` command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了使用 `pstree` 命令显示单个进程的 PID 树状层次结构：
- en: '![](img/f01d7b8e-9c74-472b-bb08-12367fc49564.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f01d7b8e-9c74-472b-bb08-12367fc49564.png)'
- en: 'Display the tree hierarchy of a user''s processes by executing the command
    line given:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 执行给定命令行来显示用户进程的树状层次结构：
- en: '[PRE5]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On execution of the preceding command, the PIDs assigned to each process are
    shown in parentheses after each process name.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述命令时，分配给每个进程的 PID 将显示在每个进程名称后面的括号中。
- en: Finding the PID of a running process
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找正在运行的进程的 PID
- en: Very often, we need to identify a PID to manage it, for example, if you need
    to stop the execution of a process. Sometimes, you may need to change the priority
    level of a process. Hence, to communicate with a process, the most commonly used
    method is using its PID. This section covers multiple commands that are used to
    find the PID of a running process.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，我们需要识别一个 PID 来管理它，例如，如果你需要停止某个进程的执行。有时，你可能需要改变进程的优先级。因此，最常用的方法是通过 PID 与进程进行通信。本节介绍了多种用于查找正在运行的进程
    PID 的命令。
- en: Using the pgrep command
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `pgrep` 命令
- en: 'The `pgrep` command is used to look up currently running processes based on
    their name and other attributes, and displays the matching process PID. Its syntax
    is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`pgrep` 命令用于根据进程的名称和其他属性查找当前正在运行的进程，并显示匹配的进程 PID。其语法如下：'
- en: '[PRE6]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following are examples to explain the use of the `pgrep` command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是解释如何使用 `pgrep` 命令的示例：
- en: 'To list processes with the `sshd` command name, which is also owned by root,
    execute the command line as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出命令名为 `sshd` 的进程（该进程也由 root 所有），可以按如下命令行执行：
- en: '[PRE7]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To list processes owned by the user `root` or `daemon`, execute the command
    line as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出由用户 `root` 或 `daemon` 所拥有的进程，执行如下命令行：
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `pgrep` command can be used to list processes by specifying a pattern containing
    the process name. The following command line will find the PID of process that
    has the name of Firefox:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`pgrep` 命令可用于通过指定包含进程名称的模式来列出进程。以下命令行将查找名为 Firefox 的进程的 PID：'
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following example shows the usage of the `pgrep` command to list all the
    processes of the user student:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用 `pgrep` 命令列出用户 student 的所有进程：
- en: '[PRE10]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: pidof
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pidof
- en: 'The `pidof` command can be used to find the process ID of a running program,
    if the argument provided to the `pidof` command is the exact process name, as
    shown in the following command line:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`pidof` 命令可用于查找正在运行的程序的进程 ID，如果提供给 `pidof` 命令的参数是精确的进程名称，如下所示：'
- en: '[PRE11]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The ps command with grep
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `ps` 命令与 grep
- en: 'Practically, it is difficult to remember the exact name of processes running
    on a Linux system. In scenarios where you do not remember the exact name of a
    process, the `pidof` command will not return the PID in the output. In such cases,
    the `ps` command output can be given as input to the grep filter to find the desired
    process name, as shown in the following command line:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，很难记住 Linux 系统上正在运行的进程的准确名称。在无法记住进程精确名称的情况下，`pidof` 命令不会返回进程的 PID。此时，可以将
    `ps` 命令的输出作为输入，使用 grep 过滤器查找所需的进程名称，命令行如下所示：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The second column of output contains the PID of the filtered process.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第二列包含了被过滤进程的 PID。
- en: Communicating with processes using signals
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与进程通过信号进行通信
- en: Processes communicate with each other using signals. We can also communicate
    with processes using `kill`, `pkill`, or the `killall` command to pass different
    signals.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 进程通过信号进行相互通信。我们也可以使用 `kill`、`pkill` 或 `killall` 命令与进程进行通信，传递不同的信号。
- en: Defining a signal and its types
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义信号及其类型
- en: A signal is a kind of software interrupt to a process. A signal can also be
    considered as a notification that needs to be processed for a specific event.
    `Kill`, `pkill`, and `killall` are programs that are used to deliver these signals
    to processes. On Linux, every signal name begins with the characters SIG. The
    signal numbers described in the following table may vary on different Linux hardware
    platforms, however, in any case, the signal name and meaning will remain the same.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是一种软件中断，作用于进程。信号也可以看作是需要处理的特定事件的通知。`Kill`、`pkill` 和 `killall` 是用来将这些信号发送到进程的程序。在
    Linux 系统中，所有的信号名称都以 SIG 开头。以下表格中描述的信号编号在不同的 Linux 硬件平台上可能会有所不同，但信号名称和含义始终保持一致。
- en: 'The following table lists the popular signals used for process management,
    along with their descriptions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了用于进程管理的常见信号及其描述：
- en: '| **Signal****no.** | **Signal****name** | **Meaning** | **Description** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **信号**编号 | **信号**名称 | **含义** | **描述** |'
- en: '| `1` | `SIGHUP` | Hangup | Given when controlling Terminal hangup (closed
    when user is away). |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `SIGHUP` | 挂起 | 当控制终端挂起（用户离开时终端关闭）时发送。 |'
- en: '| `2` | `SIGINT` | Keyboard interrupt | Used to terminate a program using the
    keyboard key combination *Ctrl *+ *C*. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `SIGINT` | 键盘中断 | 用于通过键盘组合键 *Ctrl* + *C* 终止程序。 |'
- en: '| `3` | `SIGQUIT` | Keyboard quit | Used to terminate a program using the keyboard
    key combination *Ctrl* + *D*. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `SIGQUIT` | 键盘退出 | 用于通过键盘组合键 *Ctrl* + *D* 终止程序。 |'
- en: '| `9` | `SIGKILL` | Terminateforcefully | Causes the forceful, abrupt termination
    of a program by the user. Cannot be blocked, ignored, or handled. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `9` | `SIGKILL` | 强制终止 | 强制、突然地终止程序。无法被阻塞、忽略或处理。 |'
- en: '| `15`(default) | `SIGTERM` | Terminategracefully | Terminates the program
    gracefully. This signal can be blocked, ignored, or handled. It is the default
    signal sent by the `kill` command. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `15`（默认） | `SIGTERM` | 优雅终止 | 优雅地终止程序。此信号可以被阻塞、忽略或处理。它是 `kill` 命令发送的默认信号。
    |'
- en: '| `18` | `SIGCONT` | Continue | Tells a stopped process to resume. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `18` | `SIGCONT` | 继续 | 告诉已停止的进程恢复运行。 |'
- en: '| `19` | `SIGSTOP` | Stop | Suspends a process. This signal can''t be blocked
    or handled. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `19` | `SIGSTOP` | 停止 | 暂停一个进程。此信号无法被阻塞或处理。 |'
- en: '| `20` | `SIGTSTP` | KeyboardStop | Used to suspend a process using the keyboard
    key combination *Ctrl* + *Z*. This signal can be blocked, ignored, or handled.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `20` | `SIGTSTP` | 键盘暂停 | 用于通过键盘组合键 *Ctrl* + *Z* 暂停进程。此信号可以被阻塞、忽略或处理。 |'
- en: 'The `kill` command is used to list all of the signals supported by your Linux,
    system as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill` 命令用于列出 Linux 系统支持的所有信号，如以下截图所示：'
- en: '![](img/c82560f5-ba87-4f7b-9bb1-ae06fcf81c7f.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c82560f5-ba87-4f7b-9bb1-ae06fcf81c7f.png)'
- en: Each signal has a default action associated with it, such as the termination
    of a process, stopping a process, continuing a stopped process, and so on.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 每个信号都有一个默认的动作，例如终止进程、停止进程、继续已停止的进程等。
- en: Sending signals to processes
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向进程发送信号
- en: There are multiple methods for sending signals to a process. One of the most
    common is using a keyboard interrupt such as *Ctrl* + *C*, *Ctrl* + *D*, and so
    on. Another method is using the `kill`, `killall`, and `pkill` commands.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 向进程发送信号的方法有多种。最常见的一种是使用键盘中断，如 *Ctrl* + *C*、*Ctrl* + *D* 等。另一种方法是使用 `kill`、`killall`
    和 `pkill` 命令。
- en: Sending signals to processes by PID using the kill command
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 kill 命令按 PID 向进程发送信号
- en: 'The `kill` command sends a signal to a process by PID. Contrary to its name,
    the `kill` command can be used to send any signal to processes. The default signal
    sent by the `kill` command is `SIGTERM`, for example, signal number `15`. The
    syntax of the kill command is as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`kill`命令通过 PID 向进程发送信号。与其名称相反，`kill`命令可用于向进程发送任何信号。`kill`命令发送的默认信号是`SIGTERM`，例如信号编号`15`。`kill`命令的语法如下：'
- en: '[PRE13]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following are examples to explain the usage of `kill` command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，解释`kill`命令的用法：
- en: 'For sending a default signal to a process to terminate it gracefully, use the
    following command:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送默认信号以优雅地终止进程，请使用以下命令：
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To terminate a process using the signal name, use the following command:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用信号名称终止进程，请使用以下命令：
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To terminate a process using the signal number, use the following command:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用信号编号终止进程，请使用以下命令：
- en: '[PRE16]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To terminate a process forcefully, use either of the following commands:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要强制终止进程，请使用以下命令之一：
- en: '[PRE17]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is similar to the operation that we perform using the Task Manager in
    Windows when we right-click on the process name in the Task Manager and pass the
    end process command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于我们在 Windows 的任务管理器中执行的操作，当我们右键点击任务管理器中的进程名并传递结束进程命令时：
- en: 'The `kill` command can be used to suspend/stop a process and send it to the
    background if it is running in the foreground. This can be done by using either
    of the following commands:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`命令可用于挂起/停止一个进程，并在其在前台运行时将其发送到后台。可以使用以下任一命令来实现：'
- en: '[PRE18]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To resume a process if it has been stopped, use either of the following commands:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果进程已被停止，使用以下任一命令来恢复进程：
- en: '[PRE19]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Sending signals to multiple processes by name
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按名称向多个进程发送信号
- en: We can also send signals to a process or multiple processes using by their name
    with the help of the `killall` command and the `pkill` command, as discussed in
    the following subsections.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`killall`命令和`pkill`命令，通过进程名称向一个或多个进程发送信号，具体内容将在以下小节中讨论。
- en: killall
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: killall
- en: 'The `killall` command is used to send a signal to one or more processes on
    matching one of the following conditions:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`killall`命令用于在匹配以下条件之一时，向一个或多个进程发送信号：'
- en: '**Command**: Match exact process name'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令**：匹配精确的进程名称'
- en: '**Owner**: Match exact name of the owner of the process'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有者**：匹配进程所有者的精确名称'
- en: '**All system**: System-wide processes'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有系统**：系统范围的进程'
- en: 'Its syntax is as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 其语法如下：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: pkill
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pkill
- en: 'The `pkill` command is also used to send a signal to multiple processes on
    matching a combination of the criteria, which is explained in following examples:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`pkill`命令还可以在匹配一组条件时，向多个进程发送信号，以下是一些示例：'
- en: 'Using `pkill` with the command pattern: The `pkill` command can be used to
    send a signal to the matching processes name, as shown here:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有命令模式的`pkill`：`pkill`命令可以向匹配的进程名称发送信号，如下所示：
- en: '[PRE21]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The example of sending a signal to multiple sleep processes using a single
    `pkill` command is shown in the following screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了使用单个`pkill`命令向多个`sleep`进程发送信号的示例：
- en: '![](img/a835084d-be8b-41e6-89ed-6a4108a9ae40.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a835084d-be8b-41e6-89ed-6a4108a9ae40.png)'
- en: 'Using the `pkill` command with UID: The `pkill` command can be used to send
    a signal to processes owned by the specified Linux user account by specifying
    its UID, as shown in the following syntax:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有 UID 的`pkill`命令：`pkill`命令可以通过指定 UID，将信号发送给由指定 Linux 用户帐户拥有的进程，具体语法如下：
- en: '[PRE22]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using the `pkill` command with GID: The `pkill` command can be used to send
    a signal to processes owned by the specified Linux group account by specifying
    its GID, as shown in the following syntax:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有 GID 的`pkill`命令：`pkill`命令可以通过指定 GID，将信号发送给由指定 Linux 组帐户拥有的进程，具体语法如下：
- en: '[PRE23]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Using the `pkill` command with Parent PID: The `pkill` command can be used
    to send a signal to all of the child processes of the specified parent process,
    as shown in the following syntax:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有父 PID 的`pkill`命令：`pkill`命令可用于向指定父进程的所有子进程发送信号，具体语法如下：
- en: '[PRE24]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Using the `pkill` command with Terminal name: The `pkill` command can be used
    to send a signal to processes running from a specific controlling Terminal, as
    shown in the following syntax:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有终端名称的`pkill`命令：`pkill`命令可以向从特定控制终端运行的进程发送信号，具体语法如下：
- en: '[PRE25]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Monitoring processes and load averages
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控进程和负载平均值
- en: 'The load average is the average of the load for a given period of time on each
    CPU. It takes into account the following:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 负载平均值是给定时间段内每个CPU的负载平均值。它考虑了以下因素：
- en: Actively running processes (including each thread as an individual, separate
    task) on a CPU core.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积极运行的进程（包括将每个线程视为独立的、单独的任务）在CPU核心上运行。
- en: Runnable processes, waiting for a CPU to become available.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可运行的进程，等待CPU变得可用。
- en: Sleeping processes, for example, waiting for some kind of resource (generally
    disk I/O or network I/O) to become available.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 睡眠中的进程，例如，等待某种资源（通常是磁盘I/O或网络I/O）变得可用。
- en: 'Linux counts each physical CPU core and microprocessor hyper-thread as separate
    execution units, and refers to them as individual CPUs. Each CPU has an independent
    request queue. We can count the total number of system CPUs using by the following
    command:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux将每个物理CPU核心和微处理器超线程视为独立的执行单元，并将其称为独立的CPU。每个CPU都有一个独立的请求队列。我们可以使用以下命令来计算系统CPU的总数：
- en: '[PRE26]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Understanding load averages on Linux
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linux中的负载平均值
- en: The load average of processes are viewed using the `w`, `uptime`, or `top` command,
    or with gnome-system-monitor in GUI mode. These commands display the load averages
    by using a combined representation of all CPUs for the last 1, 5, and 15 minutes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 进程的负载平均值可以通过使用`w`、`uptime`或`top`命令来查看，也可以在图形界面模式下通过gnome-system-monitor查看。这些命令通过结合所有CPU在过去1、5和15分钟内的负载平均值来显示负载。
- en: uptime
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: uptime
- en: 'The `uptime` command tells you how long your system has been up and running.
    However, at the same time, it provides other useful information, such as the number
    of users currently logged in and the system load average for the past 1, 5, and
    15 minutes:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`uptime`命令告诉你系统已经运行了多长时间。不过，它同时还提供了其他有用的信息，例如当前登录的用户数以及过去1、5和15分钟内的系统负载平均值：'
- en: '![](img/6c93dc49-3a08-4ef5-8736-c293f8de198f.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c93dc49-3a08-4ef5-8736-c293f8de198f.png)'
- en: When we have more than one CPU, the load average will be divided by the number
    of CPUs as explained in the preceding screenshot. The increase in load for a short
    duration is not a problem, however, a continuous spike in the last 5 or 15 minute
    load averages may be a cause for concern.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有多个CPU时，负载平均值将根据前面的截图进行按CPU数量的划分。短时间内负载的增加并不成问题，但如果过去5分钟或15分钟的负载平均值持续上升，则可能需要关注。
- en: w
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: w
- en: 'The `w` command is used to display information about the users that are currently
    logged onto the machine and their running processes. The first line (header) in
    the output is the same as what we saw in the `uptime` output. An example of the `w`
    command is shown in the following screenshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`w`命令用于显示当前登录到机器的用户及其正在运行的进程的信息。输出的第一行（标题）与我们在`uptime`命令输出中看到的相同。以下截图展示了`w`命令的一个示例：'
- en: '![](img/fb21f45c-80fc-476b-a1e9-b8bfc56a47f8.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb21f45c-80fc-476b-a1e9-b8bfc56a47f8.png)'
- en: 'The output shows rows of data with the following columns:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了包含以下列的数据行：
- en: '| **Command**  | **Description** |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| **命令**  | **描述** |'
- en: '| `USER` | User login name |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `USER` | 用户登录名 |'
- en: '| `TTY` | The controlling Terminal type, listed as pts/N (pseudo-terminal)
    in GUI, or ttyN on the system console or other directly connected device |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `TTY` | 控制终端类型，在GUI中显示为pts/N（伪终端），或在系统控制台或其他直接连接的设备上显示为ttyN |'
- en: '| `FROM` | Remote hostname from which the user has logged in |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `FROM` | 用户登录的远程主机名 |'
- en: '| `LOGIN@` | Login time of the user |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `LOGIN@` | 用户的登录时间 |'
- en: '| `IDLE` | How long it has been since the user typed any input on that Terminal
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `IDLE` | 自用户在该终端上输入命令以来的空闲时间 |'
- en: '| `JCPU` | CPU time consumption of all the processes attached to tty, including
    jobs currently running in the background  |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `JCPU` | 所有附加到tty的进程的CPU时间消耗，包括当前在后台运行的作业 |'
- en: '| `PCPU` | CPU time consumption of the current processes named in the `WHAT`
    field |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `PCPU` | 当前进程（在`WHAT`字段中列出）的CPU时间消耗 |'
- en: '| `WHAT` | The command line of the process currently executing  |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `WHAT` | 当前执行进程的命令行 |'
- en: Real-time interactive process monitoring
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时交互式进程监控
- en: The `ps` command gives static snapshots of processes running on a system. Sometimes,
    real-time monitoring of a system is also required. The `top` command is used to
    perform real-time monitoring of a system.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`ps`命令提供系统上正在运行的进程的静态快照。有时，也需要对系统进行实时监控。`top`命令用于执行系统的实时监控。'
- en: top
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: top
- en: 'The `top` program provides a continuously updated real-time view of the processes
    running on a system after every 2 seconds, until its execution is stopped by pressing
    *q*. It displays multiple pieces of information, including system uptime, a list
    of the running tasks, the CPU status, and a memory status summary, followed by
    the different resources consumed by each process. The `top` command is executed
    as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`top` 程序提供一个每2秒更新一次的系统进程实时视图，直到按 *q* 停止执行。它显示多项信息，包括系统的运行时间、正在运行的任务列表、CPU状态、内存状态摘要，并显示每个进程所消耗的不同资源。`top`
    命令的执行方式如下：'
- en: '[PRE27]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output on execution of the preceding command is shown in the following
    screenshot:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述命令时的输出如下面的截图所示：
- en: '![](img/708956ef-e200-4b2e-ba7d-b01d3e7f5042.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/708956ef-e200-4b2e-ba7d-b01d3e7f5042.png)'
- en: 'The output shows a system information summary, followed by each different processes''
    information in rows, with the descending order of CPU usage in the following columns:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了系统信息摘要，接下来是每个不同进程的信息，以行的形式排列，按CPU使用率从高到低排列在以下列中：
- en: '| **System Information Summary** |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| **系统信息摘要** |'
- en: '| 1) The first line displays how long the system has been up, how many users
    are logged on, and what the load average is. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 1) 第一行显示系统已运行的时间、登录用户的数量以及负载平均值。 |'
- en: '| 2) The second line displays the total number of processes followed by the
    number of running, sleeping, stopped, and zombie processes. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 2) 第二行显示了进程总数，后面跟着正在运行、休眠、停止和僵尸进程的数量。 |'
- en: '| 3) The third line displays the various CPU usage parameters: |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 3) 第三行显示各种CPU使用参数： |'
- en: '| `us` | Percentage of CPU time used running un-niced user processes |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `us` | CPU时间中用于运行非优先用户进程的百分比 |'
- en: '| `sy` | Percentage of CPU time used running kernel processes |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `sy` | CPU时间中用于运行内核进程的百分比 |'
- en: '| `ni` | Percentage of CPU time used running user-niced processes |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `ni` | CPU时间中用于运行用户优先进程的百分比 |'
- en: '| `id` | Percentage of CPU time spent when the kernel handler was idle |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `id` | 内核处理程序处于空闲状态时花费的CPU时间百分比 |'
- en: '| `wa` | Percentage of CPU time spent waiting for I/O completion |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `wa` | CPU时间中用于等待I/O完成的百分比 |'
- en: '| `hi` | Percentage of CPU time spent serving hardware interrupts |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `hi` | CPU时间中用于处理硬件中断的百分比 |'
- en: '| `si` | Percentage of CPU time spent serving software interrupts |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `si` | CPU时间中用于处理软件中断的百分比 |'
- en: '| `st` | Steal time is the percentage of a CPU''s idle time used by the virtual
    machine''s hypervisor |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `st` | 抢占时间是虚拟机管理程序使用的CPU空闲时间的百分比 |'
- en: '| 4) The fourth and fifth lines display memory usage. Line number four displays
    physical memory and line number five displays virtual memory. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| 4) 第四行和第五行显示内存使用情况。第四行显示物理内存，第五行显示虚拟内存。 |'
- en: '| 5) The sixth line contains the heading for the process information list in
    descending order of CPU usage. It has the following fields: |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 5) 第六行包含了按CPU使用率降序排列的进程信息列表的标题。它包含以下字段：'
- en: '| `PID` | Process ID number. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `PID` | 进程ID号。 |'
- en: '| `USER` | Username of the owner of the process. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `USER` | 进程所有者的用户名。 |'
- en: '| `PR` | System priority of the process. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `PR` | 进程的系统优先级。 |'
- en: '| `NI` | User priority value for a process, also known as the nice value. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `NI` | 进程的用户优先级值，也称为“优先值”。 |'
- en: '| `VIRT` | Total memory a process is using. Virtual memory is a combination
    of resident set, shared memory, and swapped memory. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `VIRT` | 进程使用的总内存。虚拟内存是常驻内存、共享内存和交换内存的组合。 |'
- en: '| `RES` | Physical memory used by a process. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `RES` | 进程使用的物理内存。 |'
- en: '| `SHR` | Shared memory used by a process. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `SHR` | 进程使用的共享内存。 |'
- en: '| `S` | Process status codes are displayed here (D,R, S, T, and Z). |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| `S` | 显示进程状态代码（D、R、S、T、Z）。 |'
- en: '| `%CPU` | Percentage of CPU used since the process started. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `%CPU` | 进程启动以来使用的CPU百分比。 |'
- en: '| `%MEM` | Percentage of memory used by a process. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `%MEM` | 进程使用的内存百分比。 |'
- en: '| `TIME+` | Execution time. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `TIME+` | 执行时间。 |'
- en: '| `COMMAND` | Command name used to start the process. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `COMMAND` | 启动进程时使用的命令名称。 |'
- en: The `top` command is like command line Task Manager in Linux. Using top, we
    can perform interactive monitoring and manage running processes. There are quite
    a few single-key shortcuts to manage the different attributes of a running process.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`top` 命令类似于Linux中的命令行任务管理器。使用`top`，我们可以进行交互式监控并管理正在运行的进程。还有一些单键快捷键可以管理运行中进程的不同属性。'
- en: 'The following table lists various keyboard shortcuts that are used to manage
    the `top` command, as well as their descriptions:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了用于管理`top`命令的各种键盘快捷键及其描述：
- en: '| **Keyboard shortcut**(on top) | **Description** |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| **键盘快捷键**（在顶部） | **描述** |'
- en: '| *t* | Toggle display of summary information |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| *t* | 切换显示汇总信息 |'
- en: '| *m* | Toggle display of memory information |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| *m* | 切换显示内存信息 |'
- en: '| *l* | Toggle display of uptime information |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| *l* | 切换显示正常运行时间信息 |'
- en: '| 1 | Toggle display of all CPUs'' summary or individual CPU''s summary |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 切换显示所有CPU的汇总信息或单个CPU的汇总信息 |'
- en: '| *H* | Toggle threads display in summary information of tasks |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| *H* | 切换在任务的汇总信息中显示线程 |'
- en: '| *s* | Change the refresh rate of the screen in seconds |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| *s* | 更改屏幕刷新率（以秒为单位） |'
- en: '| *A* | Sort the process list by the top resource consumers |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| *A* | 按最顶级资源消耗者排序进程列表 |'
- en: '| *r* | Renice (change the priority) a selected process, by providing PID and
    then the nice value |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| *r* | 重设（修改优先级）一个选定进程，通过提供PID和nice值 |'
- en: '| *k* | Send a signal to a specific process (the default signal is to terminate),
    by providing PID and then a signal number |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| *k* | 向特定进程发送信号（默认信号是终止），通过提供PID和信号编号 |'
- en: '| f | Open the configuration screen of the top command |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| f | 打开`top`命令的配置界面 |'
- en: '| M | Sort processes by memory usage, in descending order |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| M | 按内存使用量降序排序进程 |'
- en: '| P | Sort processes by CPU utilization in descending order |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| P | 按CPU利用率降序排序进程 |'
- en: '| ? or h | Display help for interactive keystrokes |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| ? 或 h | 显示交互式键盘快捷键的帮助信息 |'
- en: '| U | Filter display for usernames |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| U | 筛选用户名显示 |'
- en: '| *q* | Quit |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| *q* | 退出 |'
- en: '| *Enter*, Space key | Immediately refreshes the displayed information |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| *Enter*, 空格键 | 立即刷新显示的信息 |'
- en: 'The following are examples to explain the usage of the `top` command:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，用于解释`top`命令的使用：
- en: 'Display the process status of only the specified `pid` with the following command:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令仅显示指定`pid`的进程状态：
- en: '[PRE28]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Specify a delay between consecutive screen refreshes while running `top` commands
    with the following command:'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令指定连续屏幕刷新的延迟时间：
- en: '[PRE29]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Display the `top` command''s output for specified iterations only by using
    the following command:'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令仅显示`top`命令在指定迭代次数下的输出：
- en: '[PRE30]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can read more about sophisticated utilities, such as `htop` for process
    monitoring, which gives you the ability to scroll down vertically and horizontally
    to view more processes.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以了解更多关于高级工具的信息，例如`htop`，它是一个进程监控工具，允许你垂直和水平滚动以查看更多的进程。
- en: Managing a processes' priority with nice and renice
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nice和renice管理进程的优先级
- en: Linux is a multi-program system. At any given point of time, several processes
    are running or waiting in a queue on the system, however, a single CPU can actually
    execute one task at a time. If we have more long process queue, then it might
    happen that some more important processes spend more time waiting than executing.
    So, to overcome this problem, Linux allows us to set and modify a processes' priority.
    Lower-priority processes get less CPU time and higher-priority processes get more
    CPU time. Using the `nice` and `renice` command, we can manage the priority of
    processes.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个多任务操作系统。在任何给定的时间，系统上都有多个进程在运行或等待队列中等待，但单个CPU实际上一次只能执行一个任务。如果进程队列过长，可能会导致一些更重要的进程花费更多时间在等待上，而不是执行。因此，为了解决这个问题，Linux允许我们设置和修改进程的优先级。低优先级进程会获得更少的CPU时间，而高优先级进程则会获得更多的CPU时间。通过使用`nice`和`renice`命令，我们可以管理进程的优先级。
- en: Understanding priority
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解优先级
- en: The priority of a process is known as its **nice** value (or **niceness**).
    It tells you how much nice (number of CPU cycles used) a process is on CPU. Its
    value varies from `-20` to `19`. A lower nice value represents a higherpriority
    process, which will take more CPU cycles, while a higher nice value represents
    a lowpriority process that can wait longer and consumes less CPU cycles. So, a
    nice value of `-20` represents the highest priority and a nice value of `19` represents
    the lowest priority. The default value for new processes is generally `0`, which
    is inherited from their parent.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 进程的优先级被称为它的**nice**值（或**友好度**）。它告诉你进程在CPU上的友好程度（使用的CPU周期数）。它的值从`-20`到`19`不等。较低的nice值代表较高优先级的进程，将占用更多的CPU周期，而较高的nice值代表低优先级的进程，可以等待更长时间且占用更少的CPU周期。因此，`-20`表示最高优先级，`19`表示最低优先级。新进程的默认值通常是`0`，它继承自父进程。
- en: Modifying priority
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改优先级
- en: Assigning a low nice value, that is, a higher priority, to a CPU-hungry process
    will impact the performance of other processes running on the same Linux system.
    Hence, only root is allowed to give a higher priority to a process, for example,
    setting negative nice values on running processes.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 为 CPU 密集型进程分配低的 nice 值，即更高的优先级，会影响在同一 Linux 系统上运行的其他进程的性能。因此，只有 root 用户才被允许为进程分配更高的优先级，例如，为正在运行的进程设置负的
    nice 值。
- en: Normal users can only lower the priority of their processes, that is, they can
    set only a higher positive value than the existing nice value for a given process.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户只能降低自己进程的优先级，即他们只能为给定进程设置一个比现有 nice 值更大的正值。
- en: Viewing the priority of a process
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看进程的优先级
- en: 'The priority of a process can be viewed using different commands in CentOS
    7, as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 7 中，可以使用不同的命令来查看进程的优先级，如下所示：
- en: 'Using gnome-system-monitor to display the nice level in GUI mode. This is the
    GUI Task Manager in CentOS 7\. It is invoked by pressing Application | System
    Tools | System Monitor:'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 gnome-system-monitor 在图形界面模式下显示 nice 值。这是 CentOS 7 中的图形任务管理器。可以通过按下应用程序 |
    系统工具 | 系统监视器来调用：
- en: '![](img/5d89d342-8fbe-4f25-93b8-5596d58ee63e.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d89d342-8fbe-4f25-93b8-5596d58ee63e.png)'
- en: The `top` command can also be used to display the priority of processes. It
    shows two columns, named `NI` (displaying the `nice` level mapping of processes)
    and `PR` (displaying the priority value mapping in a kernel to a larger priority
    queue).
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`命令也可以用来显示进程的优先级。它显示两列，分别为 `NI`（显示进程的 nice 值映射）和 `PR`（显示内核中优先级值的映射，表示更大的优先级队列）。'
- en: 'The `ps` command can also be used to display the `nice` level by using `o`
    option to print selected columns, which will also include the nice field, as shown
    in the following screenshot:'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`命令也可以通过使用`o`选项来显示`nice`级别，打印所选列，其中也包括 nice 字段，如下图所示：'
- en: '![](img/b4d2b30c-de0b-401a-9ed4-7b4822795bf4.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4d2b30c-de0b-401a-9ed4-7b4822795bf4.png)'
- en: If a minus (`-`) symbol is displayed in the output of the `ps` command, then
    it means that a process is running with a different scheduling policy with a higher
    priority.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`ps`命令的输出中显示了负号（`-`），则意味着该进程正在以不同的调度策略运行，具有更高的优先级。
- en: Modifying the priority of a new process (nice value)
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改新进程的优先级（nice 值）
- en: 'Normally, when a process is started, it gets the default priority value of
    `0`. The `nice` command is used to start a process with a different priority.
    Its syntax is as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当进程启动时，它会获得默认的优先级值 `0`。`nice` 命令用于以不同的优先级启动进程。其语法如下：
- en: '[PRE31]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'An example of changing priority of a process using the `nice` command is shown
    in the following screenshot:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`nice`命令修改进程优先级的示例如下图所示：
- en: '![](img/52310257-f130-485f-8fec-686fbedf5a2c.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52310257-f130-485f-8fec-686fbedf5a2c.png)'
- en: Root can set a nice value between (`-20` to `19`), and an unprivileged, normal
    user can set a nice value between (`0` to `19`).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: root 用户可以设置 nice 值在（`-20` 到 `19`）之间，而非特权的普通用户只能设置 nice 值在（`0` 到 `19`）之间。
- en: Modifying the priority of a running process (renice)
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改正在运行的进程优先级（renice）
- en: 'The `renice` command is used to change the nice level of an existing process.
    Its syntax is as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`renice`命令用于修改已存在进程的 nice 值。其语法如下：'
- en: '[PRE32]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the following screenshot, a standard user is trying to increase the priority
    of a process by assigning a negative value, hence they are getting Permission
    denied, as shown in the following screenshot:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，普通用户试图通过分配负值来提高进程优先级，因此他们收到了“权限拒绝”的提示，正如下面截图所示：
- en: '![](img/840d7a82-36cd-4252-8ae9-b73aa99ccabc.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/840d7a82-36cd-4252-8ae9-b73aa99ccabc.png)'
- en: 'Now, when a standard user lowers the priority of a process by assigning a positive
    value, it is set immediately, as shown in the following screenshot:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当普通用户通过分配正值来降低进程优先级时，会立即生效，如下图所示：
- en: '![](img/c47e5a49-5860-4d2d-8a66-f48823269047.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c47e5a49-5860-4d2d-8a66-f48823269047.png)'
- en: 'Apart from the `renice` command, the `top` command can also be used to modify
    the nice value of a running process. The following steps are used to modify a
    process priority using the `top` command:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`renice`命令外，`top`命令也可以用来修改正在运行的进程的 nice 值。使用以下步骤通过`top`命令修改进程优先级：
- en: Invoke the `top` command
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`top`命令
- en: Press *r* key on the keyboard to bring up the option for specifying a new nice
    value on the `top` command's current interactive session
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘上的 *r* 键，在 `top` 命令的当前交互会话中弹出设置新 nice 值的选项
- en: Enter the new `nice` value and PID, followed by pressing the *Enter* key
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入新的`nice`值和PID，然后按*Enter*键
- en: Controlling jobs on the command line
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在命令行中控制作业
- en: Linux supports executing programs in the foreground as well as in the background.
    This feature allows you to run multiple programs from a single instance of a shell.
    This feature is known as job control or job management.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: Linux支持在前台和后台执行程序。这个特性允许你在单个Shell实例中运行多个程序。这个特性称为作业控制或作业管理。
- en: Understanding different terms related to job management
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解与作业管理相关的不同术语
- en: This section describes various terms related to job management on a Terminal.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了与终端上的作业管理相关的各种术语。
- en: Jobs management with its associated controlling Terminal
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业管理及其关联的控制终端
- en: A job is a command that's launched from a Terminal window. Each job can run
    as an independent background program or as an attached program from a Terminal
    (also known as the controlling Terminal here). The `TTY` field of the `ps` command
    is used to display the controlling Terminal name associated with a program.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 作业是从终端窗口启动的命令。每个作业可以作为独立的后台程序运行，或作为附加程序从终端运行（这里也称为控制终端）。`ps`命令中的`TTY`字段用于显示与程序关联的控制终端名称。
- en: Some programs, such as daemons (system services), are started by the system
    and do not have any controlling Terminal. Hence, these programs are not considered
    a member of a job and cannot be run in the foreground. Such programs have `?`
    in the `TTY` field of the `ps aux` command.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序，例如守护进程（系统服务），是由系统启动的，并且没有任何控制终端。因此，这些程序不被视为作业的一部分，不能在前台运行。此类程序在`ps aux`命令的`TTY`字段中显示为`?`。
- en: 'When a program is started as a foreground process from a Terminal, then that
    Terminal cannot be used for anything else, as it is executing that particular
    foreground process. Take the following command, for example:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序作为前台进程从终端启动时，终端无法用于其他任何操作，因为它正在执行该前台进程。例如，以下命令：
- en: '[PRE33]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After execution of the preceding command, the Terminal will not respond to any
    other program, as it is controlling the sleep program in the frontend for `1000`
    seconds.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，终端将无法响应任何其他程序，因为它正在前台控制`sleep`程序，持续时间为`1000`秒。
- en: Foreground processes or jobs
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前台进程或作业
- en: A foreground process or job is a process that is directly executed from the
    shell (also known as the **controlling** Terminal here). As long as that foreground
    job is running, other processes have to wait until it has completed for shell
    access.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 前台进程或作业是直接从Shell执行的进程（这里也称为**控制**终端）。只要该前台作业正在运行，其他进程必须等到它完成才能访问Shell。
- en: This method of launching programs is fine, as long as a program is short and
    gets completed in a short period of time. If a program that requires a long time
    (say, many hours to complete) is launched from the shell in the foreground, it
    will make that shell unavailable for that number of hours. Such a practice is
    not suitable for command execution.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这种启动程序的方法是可以的，只要程序运行时间较短并且能够在短时间内完成。如果从Shell中以前台方式启动一个需要很长时间（比如需要几个小时完成）的程序，它将使该Shell在这段时间内无法使用。这种做法不适合用于命令执行。
- en: A foreground process will have `+` appended to its status when its details are
    viewed using the `ps` command. The plus `+` symbol means that it is in a foreground
    process group.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 前台进程在使用`ps`命令查看其详细信息时，会在其状态后添加`+`符号。加号`+`表示它处于前台进程组中。
- en: 'Start a `sleep` command in the foreground in one Terminal, as shown in the
    following command line:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个终端中启动`sleep`命令作为前台进程，如以下命令行所示：
- en: '[PRE34]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following image list all the processes with specified columns and filter
    them using the `grep` command to display the a list of processes with sleep in
    their command name:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像列出了所有进程，并使用`grep`命令对它们进行过滤，以显示命令名称中包含sleep的进程列表：
- en: '![](img/061f2025-9dd0-4a0c-a963-7090fc7af202.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/061f2025-9dd0-4a0c-a963-7090fc7af202.png)'
- en: If you want to terminate a foreground program in-between, then use *Ctrl* +
    *C* (interrupt from the keyboard).
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想中断一个正在运行的前台程序，可以使用*Ctrl* + *C*（从键盘中断）。
- en: Background processes or jobs
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台进程或作业
- en: For a program that takes a long time to complete, launching it as a background
    process (job) is the ideal practice. This frees up the shell, making it available
    for other tasks. We can execute other commands in the Terminal while a program
    is running as a background job from the controlling Terminal.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要较长时间完成的程序，将其作为后台进程（作业）启动是理想的做法。这可以释放Shell，使其可用于其他任务。在程序作为后台作业运行时，我们可以在终端中执行其他命令。
- en: 'By default, all programs are executed as a foreground job from the Terminal.
    To start a `job` in the background from the Terminal, add an and at the end of
    the command. For example, start a `sleep` command in the background from a Terminal,
    as shown in the following screenshot:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有程序都是作为前台任务从终端执行的。要从终端启动后台作业，只需在命令末尾添加一个“和”符号。例如，从终端启动`sleep`命令作为后台任务，如下图所示：
- en: '![](img/421ac252-61ac-4e7e-8345-be53afbede87.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](img/421ac252-61ac-4e7e-8345-be53afbede87.png)'
- en: Suspending a foreground process to the background
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将前台进程挂起到后台
- en: 'We can move a foreground process to the background by following these two steps:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下两个步骤将前台进程移至后台：
- en: First, press *Ctrl* + *Z*, which moves the process to the background in a Stopped
    state
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，按下*Ctrl* + *Z*，将进程移到后台并使其进入Stopped状态
- en: 'Second, enter the `bg` command to change state of the last background process
    to Running from `Stoppedas`, as shown in the following screenshot:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，输入`bg`命令，将最后一个后台进程的状态从`Stoppedas`改为Running，如下图所示：
- en: '![](img/de824493-779c-48aa-b4f5-05fd92632107.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de824493-779c-48aa-b4f5-05fd92632107.png)'
- en: Managing jobs in the background
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理后台作业
- en: 'A program is started in the background by appending an ampersand (&) to the
    end of a command. On launching the program in the background, it displays a job
    ID (unique for the running session) and the PID of the background process, as
    shown in the following screenshot:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在命令末尾加上&符号，可以将程序启动为后台进程。启动后台程序时，会显示作业ID（该会话唯一）和后台进程的PID，如下图所示：
- en: '![](img/32f2a14c-cb0e-48b9-8482-258488b89b2d.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32f2a14c-cb0e-48b9-8482-258488b89b2d.png)'
- en: 'Use the `jobs` command to display the background jobs associated with the shell.
    The jobs command displays the job ID, state, and command name. If there is more
    the one background job, the default selection will have `+` in front of it, as
    shown in the following screenshot:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jobs`命令显示与Shell相关的后台作业。`jobs`命令显示作业ID、状态和命令名称。如果有多个后台作业，默认选择将会在前面加上`+`，如下图所示：
- en: '![](img/5fa188c0-65e9-4f2a-9ca2-33b18b489801.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5fa188c0-65e9-4f2a-9ca2-33b18b489801.png)'
- en: 'The `fg` command is used to bring a background job to the foreground using
    its job ID. The job ID and the `%` of the program is followed by the job number
    displayed in square brackets, as shown in the following screenshot:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`fg`命令用于将后台作业通过其作业ID带到前台。作业ID和程序的`%`后面跟着方括号中的作业号，如下图所示：'
- en: '![](img/a0a80770-4299-428a-9127-085f58961129.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0a80770-4299-428a-9127-085f58961129.png)'
- en: 'Send a foreground program to the background by first suspending it using *Ctrl *+
    *Z* on the Terminal, as shown in the following screenshot:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 通过首先使用*Ctrl* + *Z*在终端中挂起前台程序，然后将其发送到后台，如下图所示：
- en: '![](img/09e7e6cf-2ccc-49ae-9e03-4d27def73246.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09e7e6cf-2ccc-49ae-9e03-4d27def73246.png)'
- en: 'The `jobs` command, when used with the `-l` option, will also list the program
    ID. To get some more information, we can use the `ps` command with the `j` option,
    as shown in the following screenshot:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`jobs`命令并加上`-l`选项时，还会列出程序ID。为了获得更多信息，我们可以使用`ps`命令并加上`j`选项，如下图所示：
- en: '![](img/1a1dcca4-d853-4456-8137-e26f62d41fc9.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a1dcca4-d853-4456-8137-e26f62d41fc9.png)'
- en: 'The `bg` command followed by `%` and the job ID is used to start a stopped
    program in the background, as shown in the following screenshot:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`bg`命令并跟上`%`和作业ID，可以将已停止的程序恢复到后台，如下图所示：
- en: '![](img/d1adc34f-5c3e-469c-a6d6-c30e9bb73a2c.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1adc34f-5c3e-469c-a6d6-c30e9bb73a2c.png)'
- en: Summary
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we began by learning what a process is, and what different
    states and types of processes are in a Linux system. Then, we looked at different
    methods that exist in CentOS 7 to view running processes. This was followed by
    understanding how processes communicate with each other and how we can communicate
    with processes using signals. Thereafter, we learned how to monitor running processes
    and how to manage their priority using nice values. Finally, we looked at how
    `jobs` (commands) are managed on the command line by launching some applications
    in the background and switching an application from the background to the foreground,
    and vice versa.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了什么是进程，以及在 Linux 系统中不同的进程状态和类型。接着，我们了解了 CentOS 7 中查看正在运行的进程的不同方法。随后，我们了解了进程之间如何相互通信，以及我们如何通过信号与进程进行通信。然后，我们学习了如何监控正在运行的进程，以及如何通过调整优先级值（nice
    值）来管理它们的优先级。最后，我们了解了如何在命令行中管理`jobs`（命令），通过将一些应用程序在后台启动并将应用程序从后台切换到前台，反之亦然。
- en: In the next chapter, we will learn about networking concepts and networking
    commands in CentOS 7\. We will also learn how to perform secure remote logins
    and backups over a network.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 CentOS 7 中的网络概念和网络命令。我们还将学习如何通过网络执行安全的远程登录和备份。
