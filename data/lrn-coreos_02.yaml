- en: Chapter 2. Setting Up Your CoreOS Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 设置 CoreOS 环境
- en: CoreOS can be installed on a variety of platforms such as bare metal servers,
    cloud provider's virtual machines, physical servers, and so on. This chapter describes
    in detail how to bring up your first CoreOS environment focusing on deploying
    CoreOS on a Virtual Machine. When deploying in a virtualization environment, tools
    such as Vagrant come in very handy in managing CoreOS virtual machines. **Vagrant**
    enables setting up CoreOS with multiple nodes even on single laptops or workstations
    easily with minimum configuration. Vagrant supports VirtualBox, a commonly used
    virtualization application. Both Vagrant and VirtualBox are available for multiple
    architecture, such as Intel or AMD, and operating systems such as Windows, Linux,
    Solaris, and Mac.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 可以安装在多种平台上，如裸金属服务器、云提供商的虚拟机、物理服务器等。本章详细描述了如何在虚拟机上部署 CoreOS，帮助你启动第一个 CoreOS
    环境。当在虚拟化环境中进行部署时，像 Vagrant 这样的工具在管理 CoreOS 虚拟机时非常有用。**Vagrant** 使得即使在单个笔记本电脑或工作站上，也能轻松设置多个节点的
    CoreOS 环境，且配置最小化。Vagrant 支持 VirtualBox，这是一个常用的虚拟化应用程序。Vagrant 和 VirtualBox 都支持多种架构，如
    Intel 或 AMD，以及多种操作系统，如 Windows、Linux、Solaris 和 Mac。
- en: 'This chapter covers setting up CoreOS on VirtualBox, VMware VSphere, and the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在 VirtualBox、VMware VSphere 上设置 CoreOS，以及以下内容：
- en: VirtualBox installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox 安装
- en: Introduction to Vagrant
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 介绍
- en: CoreOS on VMware VSphere setup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware VSphere 上的 CoreOS 设置
- en: Introduction to Docker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 介绍
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: GIT is used for downloading all the required software mentioned in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GIT 用于下载本章提到的所有所需软件。
- en: Installing GIT
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GIT
- en: Download the latest version of GIT installation as per the host operating system
    from [http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html).
    After the download is complete, start the installation. The installation of GIT
    using this procedure is useful for Mac and Windows. For all Linux distributions,
    the GIT client is available through its package manager. For example, if the operation
    system is CentOS, the package manager `yum` can be used to install GIT.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据主机操作系统，从 [http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)
    下载最新版本的 GIT 安装包。下载完成后，启动安装程序。使用此方法安装 GIT 对 Mac 和 Windows 系统有帮助。对于所有 Linux 发行版，GIT
    客户端可以通过其包管理器安装。例如，如果操作系统是 CentOS，可以使用包管理器 `yum` 安装 GIT。
- en: Installing VirtualBox
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 VirtualBox
- en: Download the latest version of VirtualBox as per the host operating system and
    architecture from [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads).
    After the download is complete, start the installation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据主机操作系统和架构，从 [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    下载最新版本的 VirtualBox。下载完成后，启动安装程序。
- en: During installation, continue with the default options. VirtualBox installation
    resets the host machine's network adapters during installation. This will result
    in the network connection toggle. After the installation is successful, Installer
    will print the status of the operation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程中，继续使用默认选项。VirtualBox 安装过程中会重置主机机器的网络适配器，这将导致网络连接切换。安装成功后，安装程序将打印操作状态。
- en: Introduction to Vagrant
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 介绍
- en: Vagrant provides a mechanism to install and configure a development, test, or
    production environment. Vagrant works with various virtualization applications
    such as VirtualBox, VMware, AWS and so on. All installation, setup information,
    configuration, and dependencies are maintained in a file and virtual machine can
    be configured and brought up using a simple Vagrant command. This also helps to
    automate the process of installation and configuration of machines using commonly
    available scripting languages. Vagrant helps in creating an environment that is
    exactly the same across users and deployments. Vagrant also provides simple commands
    to manage the virtual machines. In the context of CoreOS, Vagrant will help to
    create multiple machines of the CoreOS cluster with ease and with the same environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 提供了一种机制来安装和配置开发、测试或生产环境。Vagrant 可以与多种虚拟化应用程序配合使用，如 VirtualBox、VMware、AWS
    等。所有的安装、设置信息、配置和依赖项都保存在文件中，虚拟机可以通过简单的 Vagrant 命令进行配置并启动。这也有助于使用常见的脚本语言自动化机器的安装和配置过程。Vagrant
    帮助创建一个在所有用户和部署中完全相同的环境。Vagrant 还提供了简单的命令来管理虚拟机。在 CoreOS 的上下文中，Vagrant 将帮助轻松创建具有相同环境的多个
    CoreOS 集群节点。
- en: Installing Vagrant
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Vagrant
- en: Download and install the latest version of Vagrant from [http://www.vagrantup.com/downloads](http://www.vagrantup.com/downloads).
    Choose default settings during installation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://www.vagrantup.com/downloads](http://www.vagrantup.com/downloads)下载并安装最新版本的Vagrant。在安装过程中选择默认设置。
- en: Vagrant configuration files
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vagrant配置文件
- en: The Vagrant configuration file contains the configuration and provisioning information
    of the virtual machines. The configuration filename is `Vagrantfile` and the file
    syntax is `Ruby`. The configuration file can be present in any of the directory
    levels starting from the current working directory. The file in the current working
    directory is read first, then the file (if present) in one directory level back,
    and so on until `/`. Files are merged as they are read. For most of the configuration
    parameters, newer settings overwrite the older settings except for a few parameters
    where they are appended.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant配置文件包含虚拟机的配置和预配置信息。配置文件名为`Vagrantfile`，文件语法为`Ruby`。配置文件可以出现在任何目录级别，从当前工作目录开始。首先读取当前工作目录中的文件，然后是上一级目录（如果存在）中的文件，依此类推，直到根目录`/`。文件在读取时会合并。对于大多数配置参数，新的设置会覆盖旧的设置，只有少数参数会被追加。
- en: 'A `Vagrantfile` template and other associated files can be *cloned* from the
    GIT repository ([https://github.com/coreos/coreos-vagrant.git](https://github.com/coreos/coreos-vagrant.git)).
    Run the following command from the terminal to clone the repository. Note that
    the procedure to start a terminal may vary from OS to OS. For example, in Windows,
    the terminal for running GIT commands is by running `Git` `Bash`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Vagrantfile`模板及其他相关文件可以从GIT仓库中*克隆*（[https://github.com/coreos/coreos-vagrant.git](https://github.com/coreos/coreos-vagrant.git)）。通过终端运行以下命令来克隆仓库。请注意，启动终端的过程可能因操作系统不同而有所不同。例如，在Windows中，运行GIT命令的终端是通过运行`Git`
    `Bash`启动的：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A directory, `coreos-vagrant`, is created after `git clone`. Along with other
    files associated to the `Git` repository, the directory contains `Vagrantfile`,
    `user-data.sample`, and `config.rb.sample`. Rename `user-data.sample` to `user-data`
    and `config.rb.sample` to `config.rb`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在`git clone`之后，会创建一个目录`coreos-vagrant`。该目录除了包含与`Git`仓库相关的其他文件外，还包含`Vagrantfile`、`user-data.sample`和`config.rb.sample`文件。将`user-data.sample`重命名为`user-data`，并将`config.rb.sample`重命名为`config.rb`：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`Vagrantfile` contains template configuration to create and configure the CoreOS
    virtual machine using VirtualBox. `Vagrantfile` includes the `config.rb` file
    using the `require` directive:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vagrantfile`包含创建和配置CoreOS虚拟机的模板配置，使用的是VirtualBox。`Vagrantfile`通过`require`指令包含了`config.rb`文件：'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Cloud-config
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cloud-config
- en: '**cloud config** files are special files that get executed by the `cloud-init`
    process when the CoreOS system starts or when the configuration is dynamically
    updated. Typically, the cloud config file contains the various OS level configuration
    of the docker container such as networking, user administration, systemd units
    and so on. For CoreOS, `user-data` is the name of the `cloud-config` file and
    is present inside the base directory of the `vagrant` folder. The `systemd units`
    files are configuration files containing information about a process.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**cloud config**文件是特殊的文件，在CoreOS系统启动或配置动态更新时，会被`cloud-init`进程执行。通常，cloud config文件包含docker容器的各种操作系统级配置，例如网络配置、用户管理、systemd单元等。对于CoreOS来说，`user-data`是`cloud-config`文件的名称，并且位于`vagrant`文件夹的基础目录中。`systemd
    units`文件是包含关于进程信息的配置文件。'
- en: 'The `cloud-config` file uses the YAML file format. A `cloud-config` file must
    contain `#cloud-config` as the first line, followed by an associative array that
    has zero or more of the following keys:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`cloud-config`文件使用YAML文件格式。一个`cloud-config`文件必须包含`#cloud-config`作为第一行，之后是一个关联数组，包含零个或多个以下键：'
- en: '`coreos`: This key provides configuration of the services provided by CoreOS.
    Configuration for some of the important services are described next:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coreos`：这个键提供了CoreOS提供的服务配置。接下来描述了其中一些重要服务的配置：'
- en: '`etc2`: This key replaces the previously used `etc` service. The parameters
    for `etc2` are used to generate the systemd unit drop-in file for `etcd2` services.
    Some of the important parameters of the `etc2` configuration are:'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etc2`：这个键替代了先前使用的`etc`服务。`etc2`的参数用于生成`etcd2`服务的systemd单元文件。一些`etc2`配置的重要参数包括：'
- en: '`discovery`: This specifies the unique token used to identify all the etcd
    members forming a cluster. The unique token can be generated by accessing the
    free discovery service ([https://discovery.etcd.io/new?sizhttp://e=<clustersize>](https://discovery.etcd.io/new?sizhttp://e=<clustersize>)).
    This is used when the discovery mechanism is used to identify cluster etcd members
    in cases where IP addresses of all the nodes are not known beforehand. The token
    generated is also called the discovery URL. The discovery service helps clusters
    to connect to each other using `initial-advertise-peer-urls` provided by each
    member by storing the connected etcd members, the size of the cluster, and other
    metadata against the discovery URL. For more information regarding forming the
    CoreOS cluster, refer to [Chapter 3](part0026_split_000.html#OPEK1-31555e2039a14139a7f00b384a5a2dd8
    "Chapter 3. Creating Your CoreOS Cluster and Managing the Cluster"), *Creating
    Your CoreOS Cluster and Managing the Cluster*.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`discovery`：指定用于标识所有形成集群的 etcd 成员的唯一令牌。可以通过访问免费的发现服务 ([https://discovery.etcd.io/new?sizhttp://e=<clustersize>](https://discovery.etcd.io/new?sizhttp://e=<clustersize>))
    来生成唯一令牌。当使用发现机制识别集群的 etcd 成员时（例如，所有节点的 IP 地址尚不清楚时），将使用此令牌。生成的令牌也称为发现 URL。发现服务通过存储已连接的
    etcd 成员、集群大小和其他元数据，帮助集群之间相互连接，并通过每个成员提供的 `initial-advertise-peer-urls` 进行连接。有关如何形成
    CoreOS 集群的更多信息，请参阅 [第 3 章](part0026_split_000.html#OPEK1-31555e2039a14139a7f00b384a5a2dd8
    "第 3 章：创建你的 CoreOS 集群并管理集群")，*创建你的 CoreOS 集群并管理集群*。'
- en: '`initial-advertise-peer-urls`: This specifies the member''s own peer URLs that
    are advertised to the cluster. The IP should be accessible to all etcd members.
    Depending on accessibility, a public and/or private IP can be used.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`initial-advertise-peer-urls`：指定成员自己向集群广告的对等 URL。该 IP 应该对所有 etcd 成员可访问。根据可访问性，可以使用公共和/或私有
    IP。'
- en: '`advertise-client-urls`: This specifies the member''s own client URLs that
    are advertised to the cluster. The IP should be accessible to all etcd members.
    Depending on accessibility, a public and/or private IP can be used.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`advertise-client-urls`：指定成员自己向集群广告的客户端 URL。该 IP 应该对所有 etcd 成员可访问。根据可访问性，可以使用公共和/或私有
    IP。'
- en: '`listen-client-urls`: This specifies the list of self URLs on which the member
    is listening for client traffic. All advertised client URLs should be part of
    this configuration.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`listen-client-urls`：指定成员监听客户端流量的自我 URL 列表。所有广告的客户端 URL 应该是此配置的一部分。'
- en: '`listen-peer-urls`: This specifies the list of self URLs on which the member
    is listening for peer traffic. All advertised peer URLs should be part of this
    configuration.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`listen-peer-urls`：指定成员监听对等流量的自我 URL 列表。所有广告的对等 URL 应该是此配置的一部分。'
- en: On some platforms, the providing IP can be automated by using *templating feature*.
    Instead of providing actual IP addresses, the fields `$public_ipv4` or `$private_ipv4`
    can be provided.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些平台上，可以通过使用*模板功能*来自动化提供 IP。可以提供字段 `$public_ipv4` 或 `$private_ipv4`，而无需提供实际的
    IP 地址。
- en: '`$public_ipv4` is a substitution variable for the public IPV4 address of the
    machine.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$public_ipv4` 是机器的公共 IPV4 地址的替代变量。'
- en: '`$private_ipv4` is a substitution variable for the private IPV4 address of
    the machine.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$private_ipv4` 是机器的私有 IPV4 地址的替代变量。'
- en: 'The following is sample `coreos` configuration in the `cloud-config` file:'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 `cloud-config` 文件中的示例 `coreos` 配置：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`fleet`: The parameters for fleet are used to generate environment variables
    for the fleet service. The fleet service manages the running of containers on
    clusters. Some of the important parameters of the fleet configuration are:'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fleet`：fleet 的参数用于为 fleet 服务生成环境变量。fleet 服务管理集群中容器的运行。fleet 配置的一些重要参数包括：'
- en: '`etcd_servers`: This provides the list of URLs through which etcd services
    can be reached. The URLs configured should be one of the `listen-client-urls`
    for etcd services.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`etcd_servers`：提供可以通过其访问 etcd 服务的 URL 列表。配置的 URL 应该是 etcd 服务的 `listen-client-urls`
    之一。'
- en: '`public_ip`: The IP address that should be published with the local machine''s
    state.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public_ip`：应该与本地机器状态一起发布的 IP 地址。'
- en: 'The following is a sample fleet configuration in the `cloud-config` file:'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 `cloud-config` 文件中的示例 fleet 配置：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`flannel`: The parameters for flannel are used to generate environment variables
    for the flannel service. The flannel service provides communication between containers.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flannel`：flannel 的参数用于为 flannel 服务生成环境变量。flannel 服务提供容器之间的通信。'
- en: '`locksmith`: The parameters for locksmith are used to generate environment
    variables for the locksmith service. The locksmith service provides reboot management
    of clusters.'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locksmith`：locksmith的参数用于生成locksmith服务的环境变量。locksmith服务提供集群的重启管理。'
- en: '`update`: These parameters manipulate settings related to how CoreOS instances
    are updated.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：这些参数用于操作与CoreOS实例更新相关的设置。'
- en: '`Units`: These parameters specify the set of systemd units that need to be
    started after boot-up. Some of the important parameters of unit configuration
    are:'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Units`：这些参数指定系统启动后需要启动的systemd单元集。单元配置的一些重要参数包括：'
- en: '**name**: This specifies the name of the service.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**name**：该参数指定服务的名称。'
- en: '**command**: This parameter specifies the command to execute on the unit: start,
    stop, reload, restart, try-restart, reload-or-restart, reload-or-try-restart.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**command**：该参数指定在单元上执行的命令：start、stop、reload、restart、try-restart、reload-or-restart、reload-or-try-restart。'
- en: '**enable**: This flag (true/false) specifies if the Install section of the
    unit file has to be ignored or not.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**enable**：此标志（true/false）指定是否忽略单元文件中的Install部分。'
- en: '**drop-ins**: This contains a list of the unit''s drop-in files. Each unit
    information set contains *name*, which specifies the unit''s drop-in files, and
    *content*, which is plain text representing the unit''s drop-in file.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**drop-ins**：此项包含单元的drop-in文件列表。每个单元信息集包含*name*，指定单元的drop-in文件，和*content*，这是表示单元drop-in文件的纯文本。'
- en: 'The following is a sample unit configuration in the `cloud-config` file:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是`cloud-config`文件中的单元配置示例：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`ssh_authorized_keys`: This parameter specifies the public SSH keys that will
    be authorized for the core user.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh_authorized_keys`：此参数指定将被授权的核心用户的公共SSH密钥。'
- en: '`hostname`: This specifies the hostname of the member.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname`：该参数指定成员的主机名。'
- en: '`users`: This specifies the list of users to be created or updated on the member.
    Each user information contains name, password, homedir, shell, and so on.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users`：该参数指定要在成员上创建或更新的用户列表。每个用户信息包含姓名、密码、主目录、shell等。'
- en: '`write_files`: This specifies the list of files that are to be created on the
    member. Each file information contains path, permission, owner, content, and so
    on.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write_files`：该参数指定要在成员上创建的文件列表。每个文件信息包含路径、权限、所有者、内容等。'
- en: '`manage_etc_hosts`: This specifies the content of the `/etc/hosts` file for
    local name resolution. Currently, only localhost is supported.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage_etc_hosts`：该参数指定本地名称解析的`/etc/hosts`文件的内容。目前仅支持localhost。'
- en: The config.rb configuration file
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`config.rb` 配置文件'
- en: 'This file contains information to configure the CoreOS cluster. This file provides
    the configuration value for the parameters used by `Vagrantfile`. `Vagrantfile`
    accesses the configuration by including the `config.rb` file. The following are
    the parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含用于配置CoreOS集群的信息。此文件为`Vagrantfile`使用的参数提供配置值。`Vagrantfile`通过包含`config.rb`文件来访问配置。以下是参数：
- en: '`$num_instances`: This parameter specifies the number of nodes in the cluster'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$num_instances`：此参数指定集群中节点的数量。'
- en: '`$shared_folders`: This parameter specifies the list of shared folder paths
    on the host machine along with the respective path on the member'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$shared_folders`：该参数指定主机上共享文件夹的路径列表，以及成员上的相应路径。'
- en: '`$forwarded_ports`: This specifies the port forwarding from the member to the
    host machine'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$forwarded_ports`：该参数指定从成员到主机的端口转发。'
- en: '`$vm_gui`: This flag specifies if GUI is to be set up for the member'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vm_gui`：此标志指定是否为成员设置GUI。'
- en: '`$vm_memory`: This parameter specifies the memory for the member in MBs'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vm_memory`：该参数指定成员的内存大小（以MB为单位）。'
- en: '`$vm_cpus`: This specifies the number of CPUs to be allocated for the member'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$vm_cpus`：该参数指定要分配给成员的CPU数量。'
- en: '`$instance_name_prefix`: This parameter specifies the prefix to be used for
    the member name'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$instance_name_prefix`：该参数指定用于成员名称的前缀。'
- en: '`$update_channel`: This parameter specifies the update channel (alpha, beta,
    and so on) for CoreOS'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$update_channel`：该参数指定CoreOS的更新渠道（如alpha、beta等）。'
- en: 'The following is a sample `config.rb` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`config.rb`文件示例：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Starting a CoreOS VM using Vagrant
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动CoreOS VM使用Vagrant
- en: 'Once the `config.rb` and `user-config` files are updated with the actual configuration
    parameter, execute the command `vagrant up` in the directory where configuration
    files are present to start the CoreOS VM image. Once the `vagrant up` command
    is successfully executed, the CoreOS in the VM environment is ready:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `config.rb` 和 `user-config` 文件更新了实际的配置参数，在包含配置文件的目录中执行命令 `vagrant up` 来启动
    CoreOS 虚拟机镜像。成功执行 `vagrant up` 命令后，虚拟机环境中的 CoreOS 已准备好：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The VM is running. To stop this VM, you can run `vagrant halt` to shut it down
    forcefully, or you can run `vagrant suspend` to simply suspend the virtual machine.
    In either case, to restart it again, simply run `vagrant up`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机正在运行。要停止此虚拟机，可以运行 `vagrant halt` 强制关闭它，或者可以运行 `vagrant suspend` 仅暂停虚拟机。在任何情况下，要重新启动它，只需运行
    `vagrant up`。
- en: Setting up CoreOS on VMware vSphere
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 VMware vSphere 上设置 CoreOS
- en: VMware vSphere is a server virtualization platform that uses VMware's ESX/ESXi
    hypervisor. VMware VSphere provides complete platform, toolsets and virtualization
    infrastructure to provide and manage virtual machines in bare metal. VMware vSphere
    consists of VMware vCenter Server and VMware vSphere Client. VMware vCenter Server
    manages the virtual as well as the physical resources. VMware vSphere Client provides
    a GUI to install and manage virtual machines in bare metal.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: VMware vSphere 是一个服务器虚拟化平台，使用 VMware 的 ESX/ESXi 虚拟机管理程序。VMware vSphere 提供了完整的平台、工具集和虚拟化基础设施，以在裸金属上提供和管理虚拟机。VMware
    vSphere 由 VMware vCenter Server 和 VMware vSphere Client 组成。VMware vCenter Server
    管理虚拟资源和物理资源。VMware vSphere Client 提供一个图形界面，用于在裸金属上安装和管理虚拟机。
- en: Installing VMware vSphere Client
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 VMware vSphere Client
- en: Download the latest version of VMware vSphere Client installation as per the
    host operating system and architecture from [http://vsphereclient.vmware.com/vsphereclient/1/9/9/3/0/7/2/VMware-viclient-all-5.5.0-1993072.exe](http://vsphereclient.vmware.com/vsphereclient/1/9/9/3/0/7/2/VMware-viclient-all-5.5.0-1993072.exe).
    After the download is complete, start the installation. During installation, continue
    with the default options.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据主机操作系统和架构，从 [http://vsphereclient.vmware.com/vsphereclient/1/9/9/3/0/7/2/VMware-viclient-all-5.5.0-1993072.exe](http://vsphereclient.vmware.com/vsphereclient/1/9/9/3/0/7/2/VMware-viclient-all-5.5.0-1993072.exe)
    下载 VMware vSphere Client 安装程序的最新版本。下载完成后，开始安装。安装过程中，继续使用默认选项。
- en: Once the installation is complete, open the VMware vSphere Client application.
    This opens a new GUI. In the **IP address** / **Name** field, enter the IP address/hostname
    to directly manage a single host. Enter the IP address/hostname of vCenter Server
    to manage multiple hosts. In the **User name** and **Password** field, enter the
    username and password.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开 VMware vSphere Client 应用程序。这将打开一个新的图形界面。在 **IP 地址** / **名称** 字段中，输入
    IP 地址/主机名，以直接管理单个主机。输入 vCenter Server 的 IP 地址/主机名，以管理多个主机。在 **用户名** 和 **密码** 字段中，输入用户名和密码。
- en: 'Download the latest version of the CoreOS image from [http://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova](http://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova).
    Once the download is complete, the next step is to create the VM image using the
    downloaded `ova` file. The steps to create the VM image are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [http://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova](http://stable.release.core-os.net/amd64-usr/current/coreos_production_vmware_ova.ova)
    下载最新版本的 CoreOS 镜像。下载完成后，下一步是使用下载的 `ova` 文件创建虚拟机镜像。创建虚拟机镜像的步骤如下：
- en: Open the VMware vSphere Client application.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VMware vSphere Client 应用程序。
- en: Enter IP address, username and password as mentioned earlier.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入之前提到的 IP 地址、用户名和密码。
- en: Click on the **File** menu.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件** 菜单。
- en: Click on **Deploy OVF Template**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **部署 OVF 模板**。
- en: This opens a new Wizard. Specify the location of the `ova` file that was downloaded
    earlier. Click on **Next.**
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个新的向导。指定之前下载的 `ova` 文件的位置。点击 **下一步**。
- en: Specify the name of the VM and inventory location in the **Name and Location**
    tab.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **名称和位置** 选项卡中指定虚拟机的名称和库存位置。
- en: Specify the host/server where this VM is to be deployed in the **Host/Cluster**
    tab.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **主机/集群** 选项卡中指定此虚拟机要部署的主机/服务器。
- en: Specify the location where the VM image should be stored in the **Storage**
    tab.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **存储** 选项卡中指定虚拟机镜像应存储的位置。
- en: Specify the disk format in the **Disk Format** tab.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **磁盘格式** 选项卡中指定磁盘格式。
- en: Click on **Next**. It takes a while to deploy the VM image.![Installing VMware
    vSphere Client](img/00011.jpeg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步**。部署虚拟机镜像需要一些时间。![安装 VMware vSphere Client](img/00011.jpeg)
- en: 'Once the VM image is deployed in the VMware server, we need to start the CoreOS
    VM with the appropriate `cloud-config` file having required configuration property.
    The `cloud-config` file in VMware vSphere should be specified by attaching a config-drive
    which is an `iso` file with filesystem labeled `config-2` by attaching CD-ROMs
    or new drives. The following are the commands to create the `iso` file in a Linux-based
    operating system:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦虚拟机镜像在 VMware 服务器中部署完成，我们需要使用适当的`cloud-config`文件启动 CoreOS 虚拟机，该文件包含所需的配置属性。在
    VMware vSphere 中，`cloud-config`文件应通过附加一个配置驱动（config-drive）来指定，配置驱动是一个带有`config-2`标签的`iso`文件，可以通过附加
    CD-ROM 或新驱动来实现。以下是在基于 Linux 的操作系统中创建`iso`文件的命令：
- en: 'Create a folder, say `/tmp/new-drive/openstack/latest`, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹，例如`/tmp/new-drive/openstack/latest`，如下所示：
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Copy the `user_data` file, which is the `cloud-config` file, into the folder:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`user_data`文件（即`cloud-config`文件）复制到以下文件夹：
- en: '[PRE9]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the `iso` file using the command `mkisofs` as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令`mkisofs`创建`iso`文件：
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the `config-drive` file is created, perform the following steps to attach
    the `config` file to the VM:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`config-drive`文件创建完成，执行以下步骤将`config`文件附加到虚拟机：
- en: Transfer the `iso` image to the machine wherein the VMware vSphere Client program
    is running.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`iso`镜像传输到运行 VMware vSphere Client 程序的机器。
- en: Open VMware vSphere Client.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VMware vSphere Client。
- en: Click on the CoreOS VM and go to the **Summary** tab of the VM as shown in the
    following screenshot:![Installing VMware vSphere Client](img/00012.jpeg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 CoreOS 虚拟机，然后转到虚拟机的**概述**标签，如下图所示：![安装 VMware vSphere 客户端](img/00012.jpeg)
- en: Right-click over the **Datastore** section and click on **Browse Datastore**.
    This will open a new window called **Datastore Browser**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**数据存储**部分，然后点击**浏览数据存储**。这将打开一个名为**数据存储浏览器**的新窗口。
- en: Select the folder named `iso`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名为`iso`的文件夹。
- en: Click on the **Upload file to Datastore** icon.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**上传文件到数据存储**图标。
- en: Select the `iso` file in the local machine and upload the `iso` file to the
    **Datastore**.![Installing VMware vSphere Client](img/00013.jpeg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择本地机器中的`iso`文件，并将该`iso`文件上传到**数据存储**。![安装 VMware vSphere 客户端](img/00013.jpeg)
- en: 'The next step is to attach the `iso` file as a `cloud-config` file for the
    VM. Perform the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将`iso`文件附加为虚拟机的`cloud-config`文件。执行以下步骤：
- en: Go to **CoreOS VM** and right-click.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**CoreOS 虚拟机**并右键点击。
- en: Click on **Properties**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**属性**。
- en: Select **CD/DVD drive 1**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**CD/DVD 驱动器 1**。
- en: On the right-hand side, select **Device Status** as **Connected** as well as
    **Connect at power on**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧，选择**设备状态**为**已连接**，并勾选**开机时连接**。
- en: Click on **Datastore ISO File** and select the uploaded `iso` file from the
    data store.![Installing VMware vSphere Client](img/00014.jpeg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**数据存储 ISO 文件**，然后从数据存储中选择上传的`iso`文件。![安装 VMware vSphere 客户端](img/00014.jpeg)
- en: Once the `iso` file is uploaded and attached to the VM, start the VM. The CoreOS
    VM the VMware environment is ready.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`iso`文件上传并附加到虚拟机（VM）上，启动虚拟机。VMware 环境中的 CoreOS 虚拟机已经准备好。
- en: Introduction to Docker
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 简介
- en: Linux Containers, as described before, provide a lightweight or stripped-down
    version of OS within the host OS. Applications can be installed on Linux Containers
    and can be ported to any host OS supporting Linux Containers. A user doesn't have
    to care about releasing different software for different target machines. Multiple
    Linux Containers can be created on a host OS, thus providing the capability to
    run multiple instances of software on the same machine independent of each other.
    Imagine software using a large number of ports and a tedious configuration file.
    In a traditional approach, the user has to carefully create the configuration
    file for each instance so that they don't conflict with another instance. In Linux
    Containers, the same configuration file would work on all Container instances.
    This helps with faster deployment and simpler operation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前所述，Linux 容器在宿主操作系统内提供了一个轻量级或简化版本的操作系统。可以在 Linux 容器上安装应用程序，并可以移植到任何支持 Linux
    容器的宿主操作系统上。用户无需为不同的目标机器发布不同的软件。可以在宿主操作系统上创建多个 Linux 容器，从而提供在同一台机器上独立运行多个软件实例的能力。想象一下软件使用大量端口和冗长的配置文件。在传统方法中，用户必须小心地为每个实例创建配置文件，以避免与其他实例冲突。而在
    Linux 容器中，同一个配置文件适用于所有容器实例。这有助于更快的部署和更简单的操作。
- en: Docker containers are primarily Linux Containers that are capable of running
    a single application by design. They have the capability to run on any machine
    with Docker installed. Docker can be installed over a variety of machines running
    different operating systems such as Linux or Mac and thus making the application
    portable. Let's understand some Docker concepts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器主要是 Linux 容器，按设计只能运行单个应用程序。它们可以在任何安装了 Docker 的机器上运行。Docker 可以安装在运行不同操作系统（如
    Linux 或 Mac）的各种机器上，从而使得应用程序具有可移植性。让我们了解一些 Docker 的概念。
- en: Image
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜像
- en: Docker image is a read-only template. Usually, images contain an OS snapshot,
    but Docker images can contain anything, such as a database and OS or application.
    They are read only and are shared across multiple Docker containers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像是一个只读的模板。通常，镜像包含操作系统快照，但 Docker 镜像可以包含任何内容，例如数据库、操作系统或应用程序。它们是只读的，并且可以在多个
    Docker 容器之间共享。
- en: Images can be created from scratch, or from an existing image listed on docker
    hub. **Docker hub** is a public `Docker Registry` that hosts docker images that
    can be downloaded and used. We can also set up a private docker registry.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像可以从头开始创建，或者从 Docker Hub 上的现有镜像创建。**Docker Hub** 是一个公共的 `Docker Registry`，托管着可以下载和使用的
    Docker 镜像。我们还可以设置一个私有的 Docker 镜像库。
- en: Images have a unique ID and a unique human-readable name and tag pair. Images
    can be called, for example, `ubuntu:latest`, `ubuntu:precise`, `django:1.6`, `django:1.7`,
    and so on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像具有唯一的 ID 和唯一的可读名称与标签对。例如，镜像可以被称为 `ubuntu:latest`、`ubuntu:precise`、`django:1.6`、`django:1.7`
    等等。
- en: Docker uses **Union File System** to combine layers of images to form a single
    Docker image. Union File System allows files and directories in different filesystems
    to be overlaid over a single filesystem. A docker image starts with the base image,
    usually a standard OS image over which other layers of images are appended. Each
    layer provides additional functionalities over the previous layers. Upon image
    changes, only impact layers need to be provided instead of the complete image.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使用 **联合文件系统** 来结合镜像层，形成一个单一的 Docker 镜像。联合文件系统允许不同文件系统中的文件和目录叠加在一个单一的文件系统上。一个
    Docker 镜像从基础镜像开始，通常是一个标准的操作系统镜像，然后将其他镜像层附加到其上。每一层都提供比前一层更多的功能。在镜像发生变化时，仅需要提供影响的层，而不是整个镜像。
- en: Container
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: '**Containers** are created from the Docker Image. Container holds everything
    required for an application to run, such as user files, metadata, user applications,
    and so on. To expose the service provided by the containers, Docker allows exposing
    specific ports of a container.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器** 是从 Docker 镜像创建的。容器包含应用程序运行所需的一切，如用户文件、元数据、用户应用程序等。为了暴露容器提供的服务，Docker
    允许暴露容器的特定端口。'
- en: Volumes
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卷
- en: As described before, Docker images are layers of read-only Union filesystems.
    When we start a container, additionally a read-write layer is created over the
    top of the read-only layer as there may be a requirement to modify a file (for
    instance). When some modification is made, data is present in both the read-write
    and read-only layers. This is required so that the image used in the container
    remains unchanged. The scope of this read-write layer is only until the container
    exists. Once the container is deleted, the read-write layer is destroyed and the
    read-only (unchanged) image is available for reuse. **Volumes** provide a mechanism
    to manage data within and across containers. They also provide a mechanism to
    share data from the host machine to the container, thus enabling data to be outside
    the container. Data can be directly shared from the host folder or from another
    container. It's recommended to create a data-only container and share data from
    that container.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker 镜像是只读联合文件系统的层。当我们启动一个容器时，除了只读层外，还会在其上创建一个读写层，因为可能需要修改文件（例如）。当修改发生时，数据会同时出现在读写层和只读层中。这是为了确保容器中使用的镜像保持不变。这个读写层的作用范围仅限于容器存在期间。一旦容器被删除，读写层就会被销毁，而只读（未改变的）镜像将可以重新使用。**卷**提供了一种机制来管理容器内外的数据。它们还提供了一种机制来共享主机机器到容器的数据，从而使数据能够存在于容器外部。数据可以直接从主机文件夹或另一个容器共享。推荐创建一个仅数据的容器并从该容器共享数据。
- en: Links
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: Docker containers can connect to each other using the network port mappings
    created while containers are created. This brings some element of hardcoding as
    the ports are preconfigured. Container links can also be used by linking the source
    container to the recipient container using container names. Docker exposes connectivity
    information for the source container to the recipient container through environment
    variables and by modifying the `/etc/hosts` file. The environment variables are
    prefixed with the link name and follow naming convention to help the recipient
    identify the interface details (such as protocol used, IP address, port, and so
    on). The `/etc/hosts` file is updated with the source container IP address and
    the hostname as the container name.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器可以通过容器创建时创建的网络端口映射相互连接。这带来了一定的硬编码元素，因为端口是预配置的。容器链接也可以通过使用容器名称将源容器与目标容器链接来实现。Docker通过环境变量和修改`/etc/hosts`文件将源容器的连接信息暴露给目标容器。环境变量以链接名称为前缀，并遵循命名约定，帮助目标容器识别接口详细信息（如使用的协议、IP地址、端口等）。`/etc/hosts`文件会更新源容器的IP地址和容器名称作为主机名。
- en: Installing Docker
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Docker
- en: 'Docker can also be installed on a variety of platforms, virtual machines and
    cloud providers. Docker contains two components:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Docker也可以在各种平台、虚拟机和云服务提供商上安装。Docker包含两个组件：
- en: 'Docker Client: The user invokes Docker Client to start, stop, and manage the
    Docker container.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker客户端：用户通过Docker客户端启动、停止和管理Docker容器。
- en: 'Docker Daemon: Docker Client interfaces with Docker Daemon to actually start,
    stop, and manage the Docker container. Docker Daemon can only run on Linux machines.
    So if Docker is installed on Windows or Mac, Docker Daemon runs inside Linux Virtual
    Machine (for instance, in VirtualBox).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Daemon：Docker客户端与Docker Daemon接口，实际启动、停止和管理Docker容器。Docker Daemon只能在Linux机器上运行。所以，如果Docker安装在Windows或Mac上，Docker
    Daemon会在Linux虚拟机内运行（例如，在VirtualBox中）。
- en: 'There are two ways to create a Docker image:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Docker镜像有两种方式：
- en: Using Docker File and the Docker `build` command
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker File和Docker `build`命令
- en: Using the pre-built docker images from dockerhub
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用来自dockerhub的预构建docker镜像
- en: Creating a sample Docker image using Docker File
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Docker File创建示例Docker镜像
- en: In this section, we will learn how to create Docker containers through Docker
    File. Docker File has obvious benefits. Docker File helps automate the build process,
    it can be version controlled for the project, and inline comments serve as help
    for beginners and many others.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何通过Docker File创建Docker容器。Docker File有明显的优点。Docker File有助于自动化构建过程，可以对项目进行版本控制，并且内联注释为初学者和其他人提供帮助。
- en: 'The following is the simple Docker File that creates a docker image using the
    CentOS base image:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用CentOS基础镜像创建docker镜像的简单Docker File：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Docker File
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker File
- en: 'Docker File contains the instructions used by Docker to build the images. The
    Docker File takes the following format:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Docker File包含Docker用于构建镜像的指令。Docker File的格式如下：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The instructions are run in order. The lines beginning with `#` are treated
    as comments and are not executed. Environment variables can also be used as variables
    in instruction arguments. Some of the important instructions are:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 指令按顺序执行。以`#`开头的行被视为注释，不会执行。环境变量也可以作为指令参数中的变量使用。一些重要的指令包括：
- en: '`FROM`: This sets the base image for the Docker image. This is the first instruction.
    Arguments can be in any one of the following format:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM`：此指令设置Docker镜像的基础镜像。这是第一条指令。参数可以采用以下任一格式：'
- en: '[PRE13]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If `tag` or `digest` is not provided, the latest image is selected.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未提供`tag`或`digest`，则会选择最新的镜像。
- en: '`RUN`: This instruction specifies the commands to be executed for building
    the container. Typical usages of `RUN` instructions are updating the base image
    with OS patches, installing specific packages, updating system configuration,
    and so on. Each command runs in a separate layer on top of the current image and
    committed. The committed image is then used for the next step. Arguments can be
    in any one of the following format:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RUN`：此指令指定构建容器时要执行的命令。`RUN`指令的典型用途包括更新基础镜像的操作系统补丁、安装特定的软件包、更新系统配置等。每个命令都在当前镜像的基础上单独运行并被提交。提交的镜像然后用于下一步。参数可以采用以下任一格式：'
- en: '[PRE14]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this form, `command` is executed within shell /`bin/sh -c`. Shell `/bin/sh
    –c` is the default `ENTRYPOINT` for docker:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种形式下，`command`将在shell /`bin/sh -c`中执行。Shell `/bin/sh -c`是Docker的默认`ENTRYPOINT`：
- en: '[PRE15]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this form, `command` is executed directly without invoking a shell.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种格式下，`command`会直接执行，而不通过调用shell。
- en: '`ENTRYPOINT`: This specifies the executable and its corresponding parameters
    when docker is started. Any parameters that are passed during the starting of
    docker are appended to `ENTRYPOINT` and executed.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT`：这指定了Docker启动时的可执行文件及其相应的参数。启动Docker时传递的任何参数都会附加到`ENTRYPOINT`并执行。'
- en: 'Arguments can be in any one of the following formats:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数可以是以下任意一种格式：
- en: '`ENTRYPOINT ["executable", "param1", "param2"]`: In this format, command is
    executed directly without invoking a shell.'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT ["executable", "param1", "param2"]`：在这种格式下，命令会直接执行，而不通过调用shell。'
- en: '`ENTRYPOINT <command> <paramters>`: In this format, command is executed within
    shell `/bin/sh -c`.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENTRYPOINT <command> <paramters>`：在这种格式下，命令会在shell `/bin/sh -c`内执行。'
- en: '`CMD`: This specifies the defaults (that is, executable, shell, and command-line
    parameters) for the containers to be executed when docker is started. This is
    different from `RUN` as `RUN` instructions are only executed during building an
    image.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD`：这指定了当Docker启动时要执行的容器的默认值（即可执行文件、shell和命令行参数）。这与`RUN`不同，因为`RUN`指令仅在构建镜像时执行。'
- en: 'Arguments can be in any one of the following format:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数可以是以下任意一种格式：
- en: '`CMD ["executable","param1","param2"]`: This format is used when `ENTRYPOINT`
    is not provided. Command is executed here without a shell.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD ["executable","param1","param2"]`：当没有提供`ENTRYPOINT`时使用这种格式。命令在这里会直接执行，而不经过shell。'
- en: '`CMD ["param1","param2"]`: This format is used when `ENTRYPOINT` is provided
    with a default command. The parameters provided here are appended to `ENTRYPOINT`
    and executed.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD ["param1","param2"]`：当提供了默认命令的`ENTRYPOINT`时使用这种格式。这里提供的参数会附加到`ENTRYPOINT`上并执行。'
- en: '`CMD command param1 param2` (shell form): In this format, command is executed
    within shell `/bin/sh -c`.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CMD command param1 param2`（shell形式）：在这种格式下，命令会在shell `/bin/sh -c`内执行。'
- en: Only one `CMD` instruction is executed. If multiple `CMD` instructions are provided,
    the last instruction is used.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只会执行一个`CMD`指令。如果提供了多个`CMD`指令，则使用最后一条指令。
- en: '`EXPOSE`: This specifies the list of listening ports on which Docker is listening.
    The format of this field is: `EXPOSE <port> [<port>...]`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE`：这指定了Docker监听的端口列表。该字段的格式为：`EXPOSE <port> [<port>...]`'
- en: '`VOLUME`: This specifies the mount path in the container and the external directories
    from the host machine or volumes from another container. The format of this field
    is: `VOLUME <directory> [<directory>…]`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VOLUME`：这指定了容器内的挂载路径以及来自主机机器的外部目录或来自另一个容器的卷。该字段的格式为：`VOLUME <directory> [<directory>…]`'
- en: Pulling the Docker image from Docker Hub
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Docker Hub拉取Docker镜像
- en: '**Docker Hub** is a community-driven docker image hosting service provided
    by Docker that has capabilities for public and private content. Already there
    are more than 100,000 images available in the Docker Hub registry. Instead of
    building docker images using Docker File, docker images can be directly downloaded
    from Docker Hub. The docker `pull` command is used to pull the images directly
    from Docker Hub and the format is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker Hub**是由Docker提供的社区驱动的Docker镜像托管服务，支持公共和私有内容。目前，Docker Hub注册表中已有超过100,000个镜像。Docker镜像可以直接从Docker
    Hub下载，而不需要通过Docker File构建。使用docker `pull`命令可以直接从Docker Hub拉取镜像，格式如下：'
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Running Docker Image
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Docker镜像
- en: 'Let''s start by running an already existing system command from the Docker
    container. The Docker container in this example prints the system information
    and exits:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Docker容器中运行一个已经存在的系统命令。这个Docker容器在本例中打印系统信息并退出：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `run` parameter runs Docker containers. The image name is provided as `centos`.
    During the first run, if the image is not available in the local machine, the
    latest-version `centos` image is downloaded from the public image registry Docker
    Hub. Since no version of the image was specified, the latest version was chosen.
    If a specific version is required to be installed, it can also be provided, for
    example, `centos:6.6`. The `uname –a` command is then executed inside the container
    using the default `ENTRYPOINT` `/bin/sh -c`. After the command execution is completed,
    the container exits.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`参数运行Docker容器。镜像名称为`centos`。在第一次运行时，如果本地机器上没有该镜像，将从公共镜像注册表Docker Hub下载最新版本的`centos`镜像。由于没有指定镜像的版本，因此选择了最新版本。如果需要安装特定版本，也可以提供，例如，`centos:6.6`。然后在容器内使用默认的`ENTRYPOINT`
    `/bin/sh -c`执行`uname –a`命令。命令执行完毕后，容器退出。'
- en: 'We will create a more sophisticated Docker File container that executes the
    `RUN` instruction to install a package over the base image and listens for a TCP
    connection:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个更复杂的 Docker File 容器，该容器执行 `RUN` 指令，在基础镜像上安装一个软件包，并监听 TCP 连接：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Port `12345` from the container is mapped to port `12344` on the host. If the
    host tries to connect on `12344`, a connection gets established on the container.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的端口 `12345` 映射到主机的端口 `12344`。如果主机尝试连接到 `12344`，则会在容器上建立连接。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were able to set up and run CoreOS with a single machine
    using Vagrant and VirtualBox. We were also able to create and run Docker images.
    In due process, we familiarized ourselves with the important configuration files
    and their contents.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功地通过 Vagrant 和 VirtualBox 在单台机器上设置并运行了 CoreOS。我们还成功地创建并运行了 Docker 镜像。在此过程中，我们熟悉了重要的配置文件及其内容。
- en: In the next chapter, we will learn how to set up a CoreOS cluster with multiple
    machines. We will also learn how machines are discovered and services are scheduled
    on those machines.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何设置一个由多台机器组成的 CoreOS 集群。我们还将了解机器如何被发现，以及如何在这些机器上调度服务。
