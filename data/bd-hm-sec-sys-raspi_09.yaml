- en: Chapter 9. Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 将所有内容整合
- en: Over the past eight chapters, we've explored the elements and concepts of a
    full-featured home security system that you'd expect to have installed in your
    property. It's been presented in a modular fashion so that you can choose which
    features you want for your system, to allow you to make it as compact and basic
    or large and complex as you require.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的八章中，我们探讨了你希望在住宅中安装的全功能家庭安全系统的元素和概念。它以模块化的方式呈现，这样你可以选择系统中想要的功能，从而使其变得紧凑基础，或大型复杂，完全根据你的需求来定制。
- en: Fundamentally, the idea behind a home security system is to detect whether particular
    zone inputs are triggered high or low by an external sensor, be that a switch,
    motion detector, or water detector. At the end of the day, as far as the control
    software is concerned, the type of sensor is irrelevant and the system software's
    job is to simply check the state of its inputs and alert accordingly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，家庭安全系统的理念是检测特定区域输入是否被外部传感器触发为高或低信号，不管是开关、运动探测器，还是水探测器。归根结底，控制软件关心的不是传感器的类型，而是系统软件的任务就是检查输入的状态并根据情况发出警报。
- en: 'In this final chapter, we''re going to put all of the concepts together to
    come up with a security system framework and write the control scripts around
    it. This is what we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将把所有概念整合在一起，构建一个安全系统框架，并围绕它编写控制脚本。我们将覆盖以下内容：
- en: Defining a high-level overview of our system, detailing the connected elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义我们系统的高层次概述，详细说明连接的元素
- en: Building the entire modular security system framework control script, exploring
    the code in detail
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建整个模块化安全系统框架控制脚本，详细探讨代码
- en: Delving into some detailed shell scripting techniques to perform certain tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨一些详细的 Shell 脚本技巧，用于执行某些任务
- en: Learning how to make our system automatically start at boot-time
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何让我们的系统在启动时自动启动
- en: Preventing the burning out of our SD card by creating a RAM-based file system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建基于 RAM 的文件系统来防止 SD 卡烧毁
- en: Alarm system diagram
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报警系统示意图
- en: So that we don't get lost in this process, the first thing I recommend is to
    come up with a complete system diagram that we can follow. I do this for any system
    I design and put together so that it can be built in a structured way, and easily
    documented and modified.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在过程中迷失方向，我建议首先绘制出一张完整的系统示意图，以便我们能够遵循。我在设计和组装任何系统时都会这么做，这样可以以结构化的方式构建系统，并且便于文档化和修改。
- en: For the home security system in this chapter, I have come up with the following
    system diagram that we will look to as a framework. The whole concept is designed
    to be modular, so you can come up with your own system to suit your requirements
    and implement it accordingly, using the scripts presented in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的家庭安全系统，我设计了以下系统示意图，我们将以此作为框架。整个概念设计为模块化的，因此你可以根据自己的需求设计适合的系统，并根据本章中展示的脚本进行实现。
- en: '![Alarm system diagram](img/B04579_09_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![报警系统示意图](img/B04579_09_01.jpg)'
- en: The final home security system diagram
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的家庭安全系统示意图
- en: Overview of the system elements
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统元素概述
- en: 'The preceding system diagram comprises the elements and modules that we have
    discussed in previous chapters. Here''s a quick recap of these:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的系统示意图包含了我们在前几章中讨论的元素和模块。以下是这些内容的快速回顾：
- en: A +12V power supply
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 +12V 电源
- en: This is the primary power supply to our system, which we will obtain from an
    external mains adapter that could be **battery-backed**. This supply needs to
    be smooth and regulated to ensure that it remains stable for the system as currently
    drawn.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们系统的主要电源，我们将从一个外部的主电源适配器中获取，适配器可能是**电池备份**的。此电源需要平稳且经过调节，以确保其对当前绘制的系统保持稳定。
- en: All of the alarm wiring and sensors will be supplied with this power, as will
    peripherals such as sounders and bells, which usually operate from a 12V supply.
    [Chapter 5](ch05.html "Chapter 5. Adding a Passive Infrared Motion Sensor"), *Adding
    a Passive Infrared Motion Sensor* discussed the merits of using a 12V supply for
    the alarm circuits.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有报警接线和传感器将由该电源供电，外设如声响器和铃声也会从 12V 电源获得电力。[第5章](ch05.html "第5章. 添加被动红外运动传感器")，*添加被动红外运动传感器*
    讨论了使用 12V 电源为报警电路供电的优点。
- en: A +3.3V power supply
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 +3.3V 电源
- en: This supply is a regulated +3.3V supply for the digital port expander circuit;
    it also provides the logical alarm zone inputs via an opto-coupler. The +3.3V
    power supply can be derived from either the +12V supply (recommended), or the
    +5V supply from the Raspberry Pi's GPIO connector, using a voltage regulator chosen
    according to how much current you need.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此电源是数字端口扩展电路的调节+3.3V电源；它还通过光耦合器提供逻辑报警区输入。+3.3V电源可以从+12V电源（建议）或根据所需电流选择树莓派GPIO连接器上的+5V电源派生，使用电压调节器。
- en: '[Chapter 3](ch03.html "Chapter 3. Extending Your Pi to Connect More Things"),
    *Extending Your Pi to Connect More Things*, showed you how to build a +3.3V regulated
    supply.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。扩展Pi以连接更多事物")，*扩展Pi以连接更多事物*，向您展示了如何构建+3.3V调节供电。'
- en: The opto-isolator input module
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 光电隔离输入模块
- en: This will isolate the +12V zone input power lines from the port expander and
    GPIO digital inputs, which should only have a maximum of +3.3V presented to them
    when triggered high.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当高触发时，此将隔离+12V区域输入电源线与端口扩展器和GPIO数字输入，并且当高时应只向其呈现最大+3.3V。
- en: The circuit for these opto-isolated input modules was discussed and shown in
    [Chapter 5](ch05.html "Chapter 5. Adding a Passive Infrared Motion Sensor"), *Adding
    a Passive Infrared Motion Sensor*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些光电隔离输入模块的电路在[第5章](ch05.html "第5章。添加被动红外运动传感器")中进行了讨论并显示出来，*添加被动红外运动传感器*。
- en: The port expander
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 端口扩展器
- en: The port expander is our main digital input/output system that will take the
    alarm zone inputs and transmit them to the Raspberry Pi using the I2C bus, or
    allow the Raspberry Pi to switch outputs on and off.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 端口扩展器是我们的主要数字输入/输出系统，将接收报警区输入并通过I2C总线将其传输到树莓派，或允许树莓派开关输出。
- en: We built our MCP23017-based port expander circuit in [Chapter 3](ch03.html "Chapter 3. Extending
    Your Pi to Connect More Things"), *Extending Your Pi to Connect More Things* and
    configured the software for it in [Chapter 4](ch04.html "Chapter 4. Adding a Magnetic
    Contact Sensor"), *Adding a Magnetic Contact Sensor*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。扩展Pi以连接更多事物")中构建了基于MCP23017的端口扩展器电路，*扩展Pi以连接更多事物*，并在[第4章](ch04.html
    "第4章。添加磁接触传感器")中为其配置了软件，*添加磁接触传感器*。
- en: An arm/disarm switch
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 武装/解除开关
- en: The arm/disarm input overrides the arm/disarm **soft-switch** function on our
    web-based control panel, and is a switch (key, digital keypad, or otherwise) connected
    to GP0 directly on the Raspberry Pi's GPIO connector.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 武器/解除输入覆盖了我们基于Web的控制面板上的武器/解除**软开关**功能，并且是连接到树莓派GPIO连接器上的GP0的开关（键盘、数字键盘或其他）。
- en: Remember to connect any switch circuit appropriately to the GPIO pin to avoid
    damage to your Raspberry Pi. This was discussed in [Chapter 2](ch02.html "Chapter 2. Connecting
    Things to Your Pi with GPIO"), *Connecting Things to Your Pi with GPIO*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住将任何开关电路适当连接到GPIO引脚，以避免损坏您的树莓派。这在[第2章](ch02.html "第2章。使用GPIO连接Pi的事物")中进行了讨论，*使用GPIO连接Pi的事物*。
- en: Alarm outputs
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 报警输出
- en: In our system, we have several output devices that are controlled by our Raspberry
    Pi via output driver circuits. We have an output for an entry/exit buzzer, an
    armed status LED, an alarm bell, and an alarm LED indicator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统中，我们有几个输出设备由我们的树莓派通过输出驱动电路控制。我们有一个出入口蜂鸣器的输出，一个武装状态LED，一个报警铃声和一个报警LED指示灯。
- en: These are switched on and off by our Raspberry Pi GPIO connector via driver
    circuits that allow us to drive high current and inductive loads using the GPIO
    pins. These driver circuits, based around TIP120 Darlington transistors, were
    discussed in [Chapter 6](ch06.html "Chapter 6. Adding Cameras to Our Security
    System"), *Adding Cameras to Our Security System* and [Chapter 8](ch08.html "Chapter 8. A
    Miscellany of Things"), *A Miscellany of Things*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些由我们的树莓派GPIO连接器通过驱动电路开关控制，允许我们使用GPIO引脚驱动高电流和感性负载。这些驱动电路基于TIP120达林顿晶体管，在[第6章](ch06.html
    "第6章。向我们的安全系统添加摄像头")中讨论过，*向我们的安全系统添加摄像头*和[第8章](ch08.html "第8章。各种各样的事物")中讨论过，*各种各样的事物*。
- en: Designing the control scripts
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计控制脚本
- en: Before we start writing the scripts to control our alarm systems, it is probably
    a good idea to outline the **high-level** process for the system. The following
    **flow-chart** helps us picture how our system should work, and the various logical
    decisions our script needs to make.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写控制我们的报警系统的脚本之前，最好先概述系统的**高级**流程。以下**流程图**帮助我们理解我们的系统应如何工作，以及我们的脚本需要做出的各种逻辑决策。
- en: 'The flowchart might look a bit complicated with all its lines in different
    directions, but it''s actually pretty linear and in a downward direction. Referring
    to the flowchart, it shows the following tasks that the control script will be
    doing:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图可能看起来有些复杂，因为它的线条方向各异，但实际上它是非常线性且朝下的。参考流程图，它展示了控制脚本将要执行的以下任务：
- en: Sitting quietly until the system is armed either by the hardware key switch
    or the web-based panel's soft switch.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安静地坐着，直到通过硬件钥匙开关或基于Web的面板软开关启动系统。
- en: When the system is first armed, it will sound the exit buzzer for a pre-determined
    amount of time before actually arming the system. This gives you a chance to leave
    the property or disarm the system again, before it starts monitoring the inputs.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当系统首次启用时，它将在真正启动系统之前响起出口蜂鸣器一段预定的时间。这为您提供了离开房产或再次解除系统的机会，系统才开始监控输入。
- en: Once the system is armed, the armed LED will be switched on and the system will
    wait to see if any of the alarm zone inputs are triggered. It will also wait to
    see if the alarm is disarmed on your return to the property. We can optionally
    put an entry timer in here on the entry zone to delay before triggering the alarm.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦系统被启用，启用指示灯将亮起，系统将等待查看是否有任何报警区的输入被触发。它还将等待查看是否在您返回房产时解除报警。我们还可以选择在入口区添加一个进入计时器，以延迟触发报警。
- en: If the alarm is ultimately triggered, then the main alarm bell will be switched
    on, as well as the exit buzzer. The main bell should only sound for a while, depending
    on environmental restrictions in your neighborhood, and so, this will be switched
    off after a pre-defined period, but the internal buzzer will stay on.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果报警最终被触发，主报警铃声和出口蜂鸣器将被打开。主铃声应仅持续一段时间，具体时间取决于您所在社区的环境限制，因此，它将在预定时间后关闭，但内部蜂鸣器将保持开启。
- en: When triggered, the system will then wait for you to disarm it, before resetting
    it.![Designing the control scripts](img/B04579_09_02.jpg)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦触发，系统将等待您解除警报，然后再进行重置。![设计控制脚本](img/B04579_09_02.jpg)
- en: The control script flowchart
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 控制脚本流程图
- en: Building the control script
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建控制脚本
- en: Now that we have designed our system the way we want it to work, we can start
    writing our Bash **control script**. As before, we'll locate our scripts in the
    folder, `/etc/pi-alarm`, which, you'll remember from [Chapter 7](ch07.html "Chapter 7. Building
    a Web-Based Control Panel"), *Building a Web-Based Control Panel*, is also where
    our Web-based control panel writes its configuration status file, `alarm.cfg`
    to. We'll be referring to that file in our scripts too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经按照预期设计好了系统，接下来可以开始编写我们的Bash **控制脚本**。和之前一样，我们将把脚本放在`/etc/pi-alarm`文件夹中，您可能还记得在[第7章](ch07.html
    "第7章：构建基于Web的控制面板")，*构建基于Web的控制面板*中，也有提到该文件夹是我们的Web控制面板写入配置状态文件`alarm.cfg`的地方。我们在脚本中也将引用该文件。
- en: 'In this script, we are going to use the **bc** tool (the Bash command-line
    **calculator**) to convert **hex** values to **binary**. It''s not installed by
    default, so you''ll need to get the package:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们将使用**bc**工具（Bash命令行**计算器**）将**十六进制**值转换为**二进制**。这个工具默认并未安装，因此您需要安装该软件包：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Our script file is quite long so, as before, you might want to sit on the sofa
    and write it on your laptop using something such as Notepad++. Remember, however,
    if you're using a PC, ensure that the end-of-line (EOL) format is converted to
    the Unix format, otherwise the Bash script won't run on the Pi when you copy it
    across. Notepad++ will do this for you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的脚本文件相当长，所以和之前一样，您可能会想坐在沙发上用笔记本电脑写它，使用类似Notepad++的工具。不过请记住，如果您使用的是PC，确保将行尾（EOL）格式转换为Unix格式，否则当您将脚本复制到Pi时，Bash脚本将无法运行。Notepad++会为您自动完成这项转换。
- en: Exploring the script code
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索脚本代码
- en: I'm now going to walk you through the various sections of the control script
    code I've written, which will be used as a framework for our system. I say "framework"
    because, while it will provide you with a fully functional control script for
    the system, it can be modified and extended to suit your particular requirements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将引导您了解我所编写的控制脚本代码的各个部分，它将作为我们系统的框架。我之所以称其为“框架”，是因为尽管它为您提供了一个完全可用的控制脚本，但它仍然可以根据您的特定需求进行修改和扩展。
- en: The following code listings are all part of the single bash script, `alarm-control.sh`,
    that can be downloaded in full with comments from the Packt Publishing website.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码清单都属于一个名为`alarm-control.sh`的单一bash脚本，您可以从Packt Publishing网站下载完整的带注释的版本。
- en: Declarations
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明
- en: 'We''ll start off by setting up the various **control variables** needed to
    track the system''s state:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置追踪系统状态所需的各种**控制变量**：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Because we could face the situation whereby a HIGH or a LOW input could represent
    a triggered zone, depending on its configuration and wiring, I have introduced
    an array of *normalized* status flags in the variable, `ALM_ZONES_STAT`, which
    will be the definitive state as far as the script is concerned. We'll look at
    the function that deals with this later.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们可能会遇到这样一种情况，输入的HIGH或LOW可能代表一个触发区域，具体取决于其配置和接线方式，所以我在变量`ALM_ZONES_STAT`中引入了一组*标准化*的状态标志，这将是脚本所关注的最终状态。我们稍后会查看处理这个的函数。
- en: Updating config settings
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新配置设置
- en: In [Chapter 7](ch07.html "Chapter 7. Building a Web-Based Control Panel"), *Building
    a Web-Based Control Panel*, we introduced the configuration file, `alarm.cfg`,
    which stores the system status and configuration for the benefit of the Web-based
    control panel. This file not only needs to be read by the main control script
    to get any settings made using the control panel, but also needs to be updated
    with status values from the main control script so that they can be presented
    back to the control panel, essentially exchanging data between the two sub-systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章. 构建基于Web的控制面板")，*构建基于Web的控制面板*中，我们介绍了配置文件`alarm.cfg`，该文件存储系统状态和配置，以便Web控制面板使用。这个文件不仅需要被主控制脚本读取，以便获取通过控制面板进行的设置，还需要通过主控制脚本更新状态值，以便它们可以反馈到控制面板，基本上是在两个子系统之间交换数据。
- en: 'Therefore, we''re going to include a helper function that contains the same
    code called by the Web page PHP script to update this file from the control panel:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将包含一个帮助函数，该函数包含与网页PHP脚本调用相同的代码，用来从控制面板更新此文件：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting up the GPIO
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置GPIO
- en: 'We now need to set up the Raspberry Pi''s GPIO pins for our purposes, as outlined
    by the earlier system diagram. The following commands were first discussed in
    [Chapter 2](ch02.html "Chapter 2. Connecting Things to Your Pi with GPIO"), *Connecting
    Things to Your Pi with GPIO*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要根据之前的系统图设置树莓派的GPIO引脚。以下命令最早在[第2章](ch02.html "第2章. 用GPIO连接树莓派")，*用GPIO连接树莓派*中讨论过：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that you can only **export** a GPIO pin once, unless it has been subsequently
    **unexported**. Therefore, you might see the error, `echo: write error: Device
    or resource busy`, if you re-run the script when it tries to export the pin again.
    You can safely ignore this.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，GPIO引脚只能**导出**一次，除非它已被**取消导出**。因此，如果你重新运行脚本，试图再次导出引脚，你可能会看到错误`echo: 写入错误:
    设备或资源忙碌`。你可以安全地忽略这个错误。'
- en: 'We''ll also throw in a few helper functions that will easily allow us to switch
    on or off various outputs to simplify the main code. I''m a big fan of implementing
    functions, however simple, as they keep the code modular, reusable, and simpler
    to read in most cases:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会添加一些帮助函数，这些函数将使我们能够轻松地打开或关闭各种输出，从而简化主代码。我是一个很喜欢实现函数的人，不管它们多么简单，因为它们使代码保持模块化、可重用，并且在大多数情况下更容易阅读：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And, we''ll add a helper function that will read the ARM switch status from
    the D0 (GPIO17) of the Raspberry Pi and from the web-console to see if the ARM
    soft switch has been set:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，我们将添加一个帮助函数，它将从树莓派的D0（GPIO17）和Web控制台读取ARM开关状态，以查看ARM软开关是否已经设置：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Setting up the I2C port expander
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置I2C端口扩展器
- en: 'The next few lines of code set up the I2C port expander to set all of the pins,
    on both Port A and Port B, as inputs. In our system here, we''re only using Port
    A, but this allows us to have another 8 inputs if we want to expand our system.
    We originally looked at this in [Chapter 4](ch04.html "Chapter 4. Adding a Magnetic
    Contact Sensor"), *Adding a Magnetic Contact Sensor*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几行代码设置I2C端口扩展器，将端口A和端口B上的所有引脚设置为输入。在我们的系统中，我们只使用端口A，但这也允许我们在需要扩展系统时再增加8个输入。我们在[第4章](ch04.html
    "第4章. 添加磁性接触传感器")，*添加磁性接触传感器*中讨论过这个问题：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you don''t have your I2C port expander attached, then you''ll see the following
    error when you try to run these commands: *Error: Write failed*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有连接I2C端口扩展器，那么在你尝试运行这些命令时，会看到以下错误：*错误：写入失败*
- en: Decoding the zone inputs status
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解码区域输入状态
- en: The next function is a big one—and key to our system. It will read the Port
    A value from the I2C port expander. It'll be returned as a hexadecimal value,
    so we need to convert this to a binary value with a 0 or 1 flag representing each
    input bit. We'll use the `bc` tool installed earlier to do this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个功能是关键的功能—对我们的系统至关重要。它将从I2C端口扩展器读取端口A的值。该值将以十六进制返回，因此我们需要将其转换为二进制值，用0或1标记每个输入位。我们将使用之前安装的`bc`工具来完成此操作。
- en: 'Once we have the status of each input bit, we then normalize the status by
    determining whether a 0 or a 1 determines a positive trigger. The resulting output
    is the array, `ALM_ZONES_STAT`, which contains the status of each zone—with a
    1 representing a positive triggered zone de-facto:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了每个输入位的状态，我们就通过确定0或1表示正触发来规范化状态。结果输出是数组`ALM_ZONES_STAT`，它包含每个区域的状态——其中1表示正被触发的区域。
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Initialization
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: 'Now that we have declared our module-level variables and helper functions,
    we will start our main routine. First, we''ll initialize the system that clears
    the `SYSTEM_ARMED` status and reads in the initial settings from the config file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经声明了模块级变量和辅助函数，我们将开始我们的主程序。首先，我们将初始化系统，清除`SYSTEM_ARMED`状态，并从配置文件中读取初始设置：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The system monitoring loop
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统监控循环
- en: 'The script then jumps into a never-ending loop that will be the main control
    system, monitoring the arm/disarm status and, when armed, monitoring the zone
    input status and responding accordingly:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本随后进入一个永无止境的循环，这将成为主要控制系统，监控武装/解除武装状态，并在武装时，监控区域输入状态并做出相应反应：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Arming the system
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 武装系统
- en: 'When the system goes into the ARMED state, it will first switch on the exit
    buzzer and then wait for a pre-determined amount of time. This will give you time
    to leave the property or disarm the system:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统进入ARMED状态时，它将首先启动退出蜂鸣器，然后等待预定的时间。这将给你时间离开房产或解除系统武装：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Monitoring the zones
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控区域
- en: Once armed, the system will monitor the zone inputs in a continuous loop until
    either the system is disarmed, or a zone input is triggered. When a zone is triggered,
    it will check against the `ZONE_ENABLE_n` configuration to see if that zone has
    been disabled (this is done in the Web-based control panel). If the zone is not
    disabled, then the alarm system is deemed triggered.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦武装，系统将持续监控区域输入，直到系统被解除武装或某个区域输入被触发。当区域被触发时，系统将检查`ZONE_ENABLE_n`配置，看看该区域是否被禁用（此操作在基于网页的控制面板中完成）。如果区域未被禁用，则视为报警系统被触发。
- en: 'The `ZONE_STATUS_n` setting is also updated here so that the web-based control
    panel indicates which zone or zones have been triggered:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZONE_STATUS_n`设置也在此更新，以便基于网页的控制面板显示出哪些区域已被触发：'
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Entry delay
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 入口延迟
- en: 'When an alarm zone is triggered, it will first check whether it was the entry/exit
    zone that was triggered. If it was, then the system will delay before sounding
    the main alarm to give you a chance to disarm the system. Only the entry buzzer
    will sound at this time:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当报警区域被触发时，系统将首先检查是否触发的是进出口区。如果是，系统将在发出主报警声之前延迟，给你机会解除系统武装。此时只会响起入口蜂鸣器：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Sounding the main alarm
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响起主报警
- en: 'If, at this point, the system hasn''t been disarmed, then we need to sound
    the main bell. We have a duration limit for sounding the bell to cater to environmental
    noise restrictions; we wouldn''t want the alarm sounding for hours, annoying the
    neighbors until we got home. At this point, you can also add code from [Chapter
    6](ch06.html "Chapter 6. Adding Cameras to Our Security System"), *Adding Cameras
    to Our Security System*, if you want to be sent an alert email to your mobile
    device:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此时系统还没有解除武装，我们需要响起主铃。由于环境噪声限制，我们对铃声的持续时间有所限制；我们不希望报警响上几个小时，直到我们回家才停止，这样会烦扰邻居。此时，如果你希望收到发送到手机的警报邮件，可以参考[第六章](ch06.html
    "第6章：向我们的安全系统添加摄像头")，*向我们的安全系统添加摄像头*，添加代码：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Disarming and resetting the system
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解除武装并重置系统
- en: 'When we disarm the system, we need to reset its status and complete the monitoring
    loop so that we can start all over again and wait for it to be re-armed:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们解除系统武装时，需要重置其状态并完成监控循环，这样我们就可以重新开始并等待重新武装：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We're done (almost)…
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们完成了（差不多）…
- en: 'And there we have it: a framework for an entire alarm control script on our
    Raspberry Pi. Additional features that you may want to implement within your script
    could include the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里了：树莓派上整个报警控制脚本的框架。如果你希望在脚本中实现其他功能，可能包括以下内容：
- en: Sending a photo or video clip from a zone's camera when it's triggered
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当触发时，从某区域的摄像头发送照片或视频片段
- en: Sending an email alert with status details when the alarm has been triggered
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当触发报警时，发送包含状态详情的电子邮件提醒
- en: Writing a regular log file recording historical status information
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入一个定期的日志文件，记录历史状态信息
- en: Adding additional environmental sensors to port B
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将额外的环境传感器添加到 B 端口
- en: Tip
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Each of the script blocks is taken from the single script file, `alarm-control.sh`,
    so you should be able to put all of the described pieces together into one file
    to have a fully functional script.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个脚本块都来自单个脚本文件`alarm-control.sh`，所以你应该能够将所有描述的部分组合到一个文件中，以便拥有一个完全功能的脚本。
- en: 'As always, before we can run it we need to give the script execute rights:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，在运行脚本之前，我们需要赋予它执行权限：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After we copy the script to our Raspberry Pi, this is what we should see in
    our `/etc/pi-alarm` folder:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本复制到树莓派后，我们应该能在`/etc/pi-alarm`文件夹中看到以下内容：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Automatically starting the system
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动启动系统
- en: Now, obviously, we don't want to have to manually start the alarm control script
    each time the Raspberry Pi boots up, for example, after a power failure—for a
    start, we may not even be there. Therefore, we need to set up our operating system
    so that it will automatically start up the `alarm-control.sh` script at boot time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显然我们不希望每次树莓派启动时都手动启动报警控制脚本，例如在停电后——首先，我们甚至可能不在现场。因此，我们需要设置操作系统，使其在启动时自动启动`alarm-control.sh`脚本。
- en: 'To do this, we need to edit the `rc.local` file using Nano:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要使用 Nano 编辑`rc.local`文件：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Before the line containing `exit 0`, insert the following line:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含`exit 0`的行之前，插入以下一行：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `&` symbol at the end of the line is important because it will then make
    the script run in a different process, otherwise the `rc.local` script would never
    exit.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 行末的`&`符号很重要，因为它会使脚本在一个不同的进程中运行，否则`rc.local`脚本将永远无法退出。
- en: 'Your `rc.local` file should now look something like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`rc.local`文件现在应该像这样：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The operating system runs the `rc.local` script after the system boots up, so
    you can put anything in there that you want to happen automatically at this time.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统在系统启动后运行`rc.local`脚本，因此你可以将任何想要在此时自动发生的操作放入该脚本。
- en: Preserving the SD card
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持 SD 卡的完整性
- en: One final topic I want to share with you is that of preserving your Raspberry
    Pi's SD card. SD cards have a finite write cycle, and continuous writing to the
    card will eventually burn it out. If we're going to be writing lots of log file
    entries and taking lots of camera images, we will want to protect our SD card
    in order to maintain the integrity and reliability of our system; using the system
    RAM instead can help us with this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我想分享的最后一个话题是如何保护树莓派的 SD 卡。SD 卡有有限的写入周期，持续写入会最终损坏它。如果我们要频繁写入日志文件并拍摄大量图像，我们就需要保护
    SD 卡，以保持系统的完整性和可靠性；使用系统 RAM 来代替可以帮助我们实现这一点。
- en: Creating a RAM-based file system
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基于 RAM 的文件系统
- en: Our Raspberry Pi has plenty of fast system RAM available to us (1Gb on the latest
    models) that isn't susceptible to this write burn-out issue. Therefore, I'm going
    to show you how to allocate some of it to create a temporary disk in memory, which
    we can write files to that we don't need kept on the SD card. Such files would
    include the, quite large, camera image files that will be emailed out of the system—
    which, therefore, don't need to be stored permanently. You should also consider
    any log files that are regularly written to, which would then be shipped off the
    system at regular intervals.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派拥有大量的快速系统 RAM（最新型号有 1Gb），它不容易受到写入烧毁问题的影响。因此，我将向你展示如何分配一部分内存，用来创建一个临时磁盘，这样我们可以将不需要保存在
    SD 卡上的文件写入其中。此类文件包括那些相当大的摄像头图像文件，它们会被通过电子邮件发送出去——因此不需要永久存储。你还应该考虑那些定期写入的日志文件，这些日志文件会定期从系统中传送出去。
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that this is a RAM-based file system, so content will be lost when
    the Raspberry Pi shuts down or reboots. So, don't store any data here that you
    want to persist after a restart.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这是一个基于 RAM 的文件系统，所以当树莓派关闭或重启时，内容会丢失。因此，不要将任何需要在重启后保留的数据存储在这里。
- en: 'Let''s create a Bash script file called `setup-ramfs.sh`, and copy it to our
    `/etc/pi-alarm` folder:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `setup-ramfs.sh` 的 Bash 脚本文件，并将其复制到我们的 `/etc/pi-alarm` 文件夹中：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`setup-ramfs.sh` RAM disk creation script'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup-ramfs.sh` RAM 磁盘创建脚本'
- en: 'Running the preceding script will create a RAM disk folder at `/ramfs`—you
    can treat it just like any other folder; it''s just that it resides in the system
    memory rather than on the SD card:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的脚本将会在 `/ramfs` 创建一个 RAM 磁盘文件夹——你可以像对待任何其他文件夹一样对待它；唯一不同的是，它存在于系统内存中，而不是
    SD 卡上：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can call this script from the `alarm-control.sh` script as part of the
    initialization process by including the line:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 `alarm-control.sh` 脚本中包含以下行，在初始化过程中调用此脚本：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conclusion
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The Raspberry Pi is a powerful little beast and a great platform for building
    low-cost, but highly capable, embedded systems. The interfaces built into its
    GPIO connector make it easy to bolt on modules using simple low-cost electronics
    and a bit of configuration to create very functional and flexible systems. The
    inclusion of a dedicated camera interface and networking interfaces give you everything
    you could possible need for an Internet-connected home security system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一款强大的小型计算机，是构建低成本但高度可用的嵌入式系统的理想平台。其 GPIO 接口的设计使得通过简单的低成本电子元件和一些配置，就能轻松地将模块与之连接，从而构建出功能强大且灵活的系统。专用的相机接口和网络接口的加入，提供了构建互联网连接家庭安全系统所需的所有功能。
- en: I've covered a lot of topics in this book, and I could have gone on and on,
    but I hope that what I have presented has been done in a structured and methodical
    way, and has given you the tools and techniques to carry on this journey so that
    you are able to create the perfect home security system for your needs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我涉及了很多话题，虽然我本可以继续深入，但我希望我所呈现的内容是有条理且方法论的，并且能为你提供继续这段旅程的工具和技巧，使你能够根据自己的需求打造完美的家庭安全系统。
- en: Tips for building systems
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建系统的技巧
- en: 'As a systems guy who has to work with many different technologies and disciplines
    on a day-to-day basis, I just want to leave you with the following thoughts to
    consider, if you choose to build upon the system we''ve put together in this book,
    which, of course, I hope you will:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个需要日常处理多种技术和学科的系统工程师，我只想给你留下以下几点思考，供你在选择基于我们在本书中所构建的系统进行扩展时参考，当然，我希望你会选择这样做：
- en: Create a high-level diagram of your proposed system first—a bit like the one
    I produced earlier in this chapter.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先创建你提议系统的高层次图——有点像我在本章早些时候展示的那种图。
- en: Define everything in a modular way so that you can build and test your system
    in small chunks. This makes it much easier to spot issues early on.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以模块化的方式定义所有内容，这样你可以将系统分成小块进行构建和测试，这使得尽早发现问题变得更容易。
- en: Building the system using smaller modules makes it easier to re-use and replace
    circuits and code, and don't be afraid to mix-and-match technologies using what's
    best for the individual module.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更小模块来构建系统，使得重新使用和替换电路和代码变得更加容易，而且不要害怕混合和搭配不同的技术，使用最适合单个模块的技术。
- en: Don't try to re-invent the wheel—use existing code and circuit resources that
    are proven to work. This makes it much quicker to get things working and minimizes
    the number of times you have to hit your head against a brick wall. I call it
    blagging.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要试图重新发明轮子——使用已有的经过验证的代码和电路资源。这可以让你更快速地让系统工作，并最小化你与难题作斗争的次数。我称之为“借力”。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Well, we've reached the end of our journey to build a fully functional and extensible
    home security system using the mighty Raspberry Pi mini-PC. In this final chapter,
    we put together all of the elements and concepts from the previous chapters to
    create a home security framework, both from a hardware and software perspective.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经走到了使用强大的树莓派迷你计算机构建一个功能完备且可扩展的家庭安全系统的旅程的终点。在本章的最后，我们将前几章的所有元素和概念结合起来，从硬件和软件角度共同构建了一个家庭安全框架。
- en: In particular, this chapter guided us toward building a modular framework for
    our home security system, implementing features that you would find in any commercially
    available system, and also things that you don't see out there. We walked through
    the complete control script, exploring its various sections and understanding
    how they fit into our system.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章指导我们构建了一个模块化的家庭安全系统框架，实施了任何商业化系统中都会有的功能，还有一些市面上看不到的功能。我们详细分析了完整的控制脚本，探索了其各个部分，并理解它们如何融入我们的系统中。
- en: We also learned how to automatically start-up our home security system script
    when our Raspberry Pi boots up, and how data is shared between the Pi and the
    web-based control panel in real-time via the configuration file. Finally, we looked
    at how to prevent our SD card from burning out by creating a rather useful RAM-based
    temporary file system.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何在树莓派启动时自动启动我们的家庭安全系统脚本，以及数据是如何通过配置文件在树莓派和基于网页的控制面板之间实时共享的。最后，我们探讨了如何通过创建一个非常实用的基于
    RAM 的临时文件系统来防止 SD 卡烧毁。
