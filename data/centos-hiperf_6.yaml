- en: Chapter 6. Measuring and Increasing Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。衡量与提升性能
- en: Up to this point, we have created an active/passive cluster, added several resources
    to it, and tested its failover capabilities. We also discussed how to troubleshoot
    common issues. The final step in our journey consists of measuring and increasing
    the performance of our cluster as it has been installed so far—as far as the services
    running on it are concerned.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个主动/被动集群，向其添加了几个资源并测试了其故障转移功能。我们还讨论了如何排查常见问题。我们旅程的最后一步是衡量和提高集群的性能，直到目前为止它的安装情况——就其上运行的服务而言。
- en: In addition, we will provide the overall instructions to convert your A/P cluster
    into an A/A one.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将提供将 A/P 集群转换为 A/A 集群的整体指南。
- en: Setting up a sample database
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置示例数据库
- en: In order to properly test our MariaDB database server, we need a database populated
    with sample data. For this reason, we will use the Employees database, developed
    by Patrick Crews and Giuseppe Maxia and provided by Oracle Corporation under a
    Creative Commons Attribution-Share Alike 3.0 Unported License. It provides a very
    large dataset (~160 MB and ~4 million records) spread over six tables, which will
    be ideal for our performance tests.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确测试我们的 MariaDB 数据库服务器，我们需要一个填充了示例数据的数据库。因此，我们将使用 Employees 数据库，由 Patrick
    Crews 和 Giuseppe Maxia 开发，并由 Oracle 公司根据创意共享署名-相同方式共享 3.0 国际许可协议提供。它提供了一个非常大的数据集（约
    160 MB 和约 400 万条记录），分布在六个表中，非常适合我们的性能测试。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Creative Commons Attribution-Share Alike 3.0 Unported License, available
    at [http://creativecommons.org/licenses/by-sa/3.0/](http://creativecommons.org/licenses/by-sa/3.0/),
    grants us the following freedoms regarding the Employees database:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创意共享署名-相同方式共享 3.0 国际许可协议，详情请见[http://creativecommons.org/licenses/by-sa/3.0/](http://creativecommons.org/licenses/by-sa/3.0/)，它赋予我们以下自由，关于
    Employees 数据库：
- en: '*Share: This lets us copy and redistribute the material in any medium or format*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*分享：这使我们能够在任何介质或格式中复制和再分发该素材*'
- en: '*Adapt: This lets us remix, transform, and build upon the material*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*改编：这使我们能够混合、转化并基于该素材进行创作*'
- en: '*for any purpose, even commercially.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*用于任何目的，包括商业用途。*'
- en: '*The licensor cannot revoke these freedoms as long as you follow the license
    terms.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*只要你遵循许可证条款，许可方不能撤销这些自由。*'
- en: Downloading and installing the Employees database
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装 Employees 数据库
- en: 'Let''s proceed with downloading and installing the database using the following
    steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过以下步骤下载并安装数据库：
- en: To download the Employees table, go to [https://launchpad.net/test-db/](https://launchpad.net/test-db/)
    and grab the link for the tarball of the latest stable release (at the time of
    writing this book, it is v1.0.6), as shown in the following screenshot:![Downloading
    and installing the Employees database](img/00067.jpeg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载 Employees 表，请访问[https://launchpad.net/test-db/](https://launchpad.net/test-db/)并获取最新稳定版本的
    tarball 链接（在写这本书时，版本是 v1.0.6），如下图所示：![下载并安装 Employees 数据库](img/00067.jpeg)
- en: 'Then, download it to the node on which the database server is running (in our
    case, it is `node01`). To do so, you will need to install two packages named `wget`
    and `bzip2` first, using the following command:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将其下载到运行数据库服务器的节点（在我们的案例中，是 `node01`）。为此，首先需要使用以下命令安装名为 `wget` 和 `bzip2` 的两个软件包：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, extract/unarchive its contents in your current working directory:'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，在当前工作目录中提取/解压其内容：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will create a subdirectory named `employees_db`, where the main installation
    script (`employees.sql`) resides, as can be seen in the output of the following
    two commands:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个名为 `employees_db` 的子目录，其中包含主安装脚本（`employees.sql`），如以下两个命令的输出所示：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, use the following command to connect to the cluster database server we
    set up and configured in [Chapter 4](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "Chapter 4. Real-world Implementations of Clustering"), *Real-world Implementations
    of Clustering* (note that you will be prompted to enter the password for the root
    MariaDB user):'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令连接到我们在[第4章](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "第4章。集群的实际应用")中设置和配置的集群数据库服务器，*集群的实际应用*（注意，你将被提示输入 root MariaDB 用户的密码）：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will also install the employees database and load the corresponding information
    into its tables:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这还将安装 employees 数据库并将相应的信息加载到其表中：
- en: '`departments`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`departments`'
- en: '`employees`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`employees`'
- en: '`dept_emp`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dept_emp`'
- en: '`dept_manager`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dept_manager`'
- en: '`titles`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`titles`'
- en: '`salaries`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salaries`'
- en: Note
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After you are done setting up the sample database, feel free to perform a forced
    failover to verify that the resources and the database, along with their tables
    and records, become available in the current passive node. Review chapter 4 to
    recall instructions if you need.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在设置好示例数据库后，随时进行强制故障转移，验证资源和数据库（以及它们的表和记录）是否能在当前被动节点中变得可用。如果需要，回顾第4章以回顾相关指令。
- en: 'Due to the high volume of data being loaded into the database, it is to be
    expected that the installation may take around a minute or two to complete. While
    we are at it, we will see the progress of the import process: the database structure
    and the storage engine are instantiated, then the tables are created, and finally,
    they are populated with data, as shown here:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于大量数据正在加载到数据库中，预计安装过程可能需要一两分钟的时间才能完成。我们在此期间会看到导入过程的进展：数据库结构和存储引擎被实例化，然后创建表，最后填充数据，如下所示：
- en: '![Downloading and installing the Employees database](img/00068.jpeg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![下载并安装员工数据库](img/00068.jpeg)'
- en: 'We can verify by logging into the database server and issuing these commands
    to first list all databases. Then, switch to the recently installed Employees
    database, and use it for the subsequent queries:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过登录到数据库服务器并执行这些命令来验证，首先列出所有数据库。然后，切换到最近安装的员工数据库，并用它进行后续查询：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output should be similar to the one shown in the preceding screenshot.![Downloading
    and installing the Employees database](img/00069.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出应该类似于前面截图所示的内容。![下载并安装员工数据库](img/00069.jpeg)
- en: 'Before we proceed with the actual performance tests (measuring general performance
    before and after a failover event), feel free to investigate those tables (and
    the fields they contain) using the `DESCRIBE` statement. Then browse the records
    with the `SELECT` statement, as shown here:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续进行实际性能测试（在故障转移事件前后测量整体性能）之前，可以使用`DESCRIBE`语句来调查那些表（以及它们包含的字段）。然后，使用`SELECT`语句浏览记录，如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The result can be seen in the following screenshot:![Downloading and installing
    the Employees database](img/00070.jpeg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果可以在以下截图中看到：![下载并安装员工数据库](img/00070.jpeg)
- en: Once you have taken some time to become acquainted with the structure of the
    database, we are ready to proceed with the tests.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你花时间熟悉了数据库的结构，我们就准备好继续进行测试了。
- en: Introducing initial cluster tests
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入初始集群测试
- en: In addition, for the actual performance tests, you should note that MariaDB
    comes with several database-related utilities that can come in handy for a variety
    of administration tasks. One of them is `mysqlshow`, which returns complete information
    about databases and tables in one quick command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于实际的性能测试，你应该注意，MariaDB附带了几个与数据库相关的工具，这些工具可以帮助你完成各种管理任务。其中之一是`mysqlshow`，它可以通过一个快速命令返回关于数据库和表的完整信息。
- en: 'Its generic syntax is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它的通用语法如下：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, we could use the following command to display the description for the titles
    table in the `employees` database:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们可以使用以下命令来显示`employees`数据库中`titles`表的描述：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can list the complete set of utilities that are included in your MariaDB
    installation using the `ls /bin | grep mysql` command. Each of those tools has
    a corresponding manual page, which can be invoked from the command line as usual.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`ls /bin | grep mysql`命令列出包含在MariaDB安装中的完整工具集。每个工具都有相应的手册页面，可以像平常一样从命令行调用。
- en: We will use another of the tools that are included by MariaDB to see how our
    database server performs when placed under significant load. The tool is `mysqlslap`,
    a diagnostic program designed to emulate client load for a MariaDB/MySQL server
    and to report the timing of each stage. It works as if multiple clients are accessing
    the server simultaneously.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用MariaDB附带的另一个工具，看看在显著负载下我们的数据库服务器表现如何。该工具是`mysqlslap`，这是一个诊断程序，旨在模拟MariaDB/MySQL服务器的客户端负载，并报告每个阶段的时间。它的工作方式就像多个客户端同时访问服务器一样。
- en: 'Before executing the actual commands that we will use in the following tests,
    we will introduce a few of the flags available for `mysqlslap`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行我们将在后续测试中使用的实际命令之前，我们将介绍`mysqlslap`的几个可用标志：
- en: '`--create-schema`: This command specifies the database in which we will run
    the tests'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--create-schema`：此命令指定我们将在其中运行测试的数据库'
- en: '`--query`: This is a string (or alternatively, a file) containing the `SELECT`
    statements used to retrieve data'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--query`：这是一个字符串（或者说是一个文件），其中包含用于检索数据的`SELECT`语句'
- en: '`--delimiter`: This command allows you to specify a delimiter to separate multiple
    queries in the same string in `--query`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--delimiter`：此命令允许你指定一个分隔符，用来分隔`--query`中同一字符串中的多个查询'
- en: '`--concurrency`: This command is the number of simultaneous connections to
    simulate'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--concurrency`：此命令表示模拟的并发连接数'
- en: '`--iterations`: This is the number of times to run the tests'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--iterations`：这是运行测试的次数'
- en: '`--number-of-queries`: This command limits each client (refer to `--concurrency`)
    to that amount of queries'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--number-of-queries`：此命令限制每个客户端（参见`--concurrency`）的查询数量'
- en: In addition, there are other switches listed in the manual page for `mysqlslap`
    that you can use if you want.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`mysqlslap`手册页中列出了其他你可以使用的开关，如果你愿意的话。
- en: That said, we will run the following tests against the database server in our
    cluster.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们将在集群中的数据库服务器上运行以下测试。
- en: Test 1 – retrieving all fields from all records
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 1 – 检索所有记录的所有字段
- en: 'In this first test, we will perform a rather simple query that consists of
    retrieving all fields from all records in the employees table. We will simulate
    `10` concurrent connections and make `50` queries overall. This will result in
    clients running `5` queries each (50/10 = 5):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个测试中，我们将执行一个相当简单的查询，内容是从员工表中检索所有记录的所有字段。我们将模拟`10`个并发连接，总共进行`50`次查询。这将导致每个客户端运行`5`次查询（50/10
    = 5）：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After a couple of minutes, you will be able to see output similar to the one
    shown in the following screenshot. Although here we list the result of an isolated
    test, you may want to perform this operation several times on your own and write
    down the results for a later comparison. However, if you choose to do so, make
    sure that the query results are not cached by running the following command in
    your MariaDB server session after each run:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你将能够看到类似以下截图中的输出。虽然这里列出了一个独立测试的结果，但你可能希望自己多次执行此操作并记录结果以供后续对比。然而，如果你选择这样做，请确保查询结果没有被缓存，在每次运行后，运行以下命令清除
    MariaDB 服务器会话中的缓存：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Test 1 – retrieving all fields from all records](img/00071.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![测试 1 – 检索所有记录的所有字段](img/00071.jpeg)'
- en: Test 2 – performing JOIN operations
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 2 – 执行 JOIN 操作
- en: 'In this second test, we will do a `JOIN` operation between the employees and
    salaries tables (a more realistic example) and modify the number of connections,
    queries, and iterations a bit:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第二个测试中，我们将执行一个`JOIN`操作，将员工表和薪资表进行连接（一个更现实的例子），并稍微调整连接数、查询数和迭代次数：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the following screenshot, we can see an expected increase in the time it
    took to run the queries this time:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到这次运行查询所花费的时间有所增加，这是预期中的结果：
- en: '![Test 2 – performing JOIN operations](img/00072.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![测试 2 – 执行 JOIN 操作](img/00072.jpeg)'
- en: Before proceeding further, feel free to play around with the number of connections,
    iterations, and queries, or with the query itself. Based on these values, you
    may knock the database server down. That is to be expected at some point, since
    we have been building our infrastructure and examples on a virtual machine-based
    cluster. For this reason, you may want to increase the processing resources on
    each node's Virtualbox configuration to the extent of the available capacity,
    or consider acquiring real hardware to set up your cluster.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，可以随意调整连接数、迭代次数和查询，或者修改查询本身。根据这些值，你可能会使数据库服务器崩溃。这在某些时候是可以预期的，因为我们构建基础设施和示例时使用的是基于虚拟机的集群。因此，你可能希望在每个节点的
    VirtualBox 配置中增加处理资源，尽可能利用可用容量，或者考虑购买真实硬件来搭建集群。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Database administration and optimization are topics out of the scope of this
    book. It is strongly recommended that you also take these subjects into account
    before moving the cluster to a production environment. Since the performance of
    the database and web servers can be optimized separately through their corresponding
    settings, in this book, we will focus our efforts on analyzing and improving the
    availability of these resources (which we have named `dbserver` and `webserver`
    respectively) using their respective configuration files and internal settings.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理和优化是本书范围之外的话题。强烈建议在将集群迁移到生产环境之前，您也要考虑这些主题。由于数据库和Web服务器的性能可以通过各自的设置单独优化，在本书中，我们将重点分析并改进这些资源（分别命名为`dbserver`和`webserver`）的可用性，使用它们各自的配置文件和内部设置。
- en: Performing a failover
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行故障切换
- en: 'We will now force a failover by stopping the cluster functionality on the node
    where all the resources are currently running (`node01`) so that they will move
    to `node02`. Here, we will perform tests 1 and 2, and we expect to see a similar
    behavior to what we saw earlier. It is important to keep in mind that during a
    failover, data is not encrypted automatically. If you have concerns about sensitive
    data being failed over an unsecured connection, you should take the necessary
    precaution to use encryption either at the filesystem or at the Logical Volume
    level. Before we do this, however, we must keep in mind that moving a sensitive
    resource, such as a database server, around a cluster constantly may negatively
    impact the availability of such resource. For this reason, we will want it to
    remain in the node where it is active unless in the case that there is an actual
    node shutdown. The concept of resource stickiness does exactly this: it allows
    us to instruct all cluster resources to either fall back to their original node
    when it becomes available again after an outage, or to remain where they are currently
    active. The following syntax is used to specify the default value for all resources:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在通过停止当前所有资源运行所在节点（`node01`）上的集群功能来强制进行故障切换，这样资源将转移到`node02`。在这里，我们将执行测试1和测试2，预计会看到与之前相似的行为。需要牢记的是，在故障切换期间，数据不会自动加密。如果您担心敏感数据在不安全的连接上传输，您应采取必要的预防措施，使用加密措施，无论是在文件系统级别还是在逻辑卷级别。然而，在我们进行此操作之前，必须牢记，频繁将敏感资源（例如数据库服务器）在集群中移动可能会对该资源的可用性产生负面影响。因此，我们希望它保持在当前活动的节点上，除非发生实际的节点停机。资源粘性正是实现这一目标：它允许我们指示所有集群资源，在节点恢复可用后，要么恢复到其原始节点，要么保持在当前活动的节点上。以下语法用于指定所有资源的默认值：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The higher the value, the more the resource will prefer to stay where it is.
    By default, Pacemaker uses `0` as value, which tells the cluster that it is desired
    (and optimal) to move the resource around in the case of failover. To specify
    the stickiness of a specific resource, use the following syntax to set the stickiness
    for a specific resource:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 值越高，资源越倾向于保持当前所在的位置。默认情况下，Pacemaker使用`0`作为值，这意味着在发生故障切换时，集群希望（并且认为最优）将资源迁移到其他位置。要为特定资源指定粘性，请使用以下语法设置该资源的粘性：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s assume that you use `INFINITY` as the value in the preceding command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在前面的命令中使用`INFINITY`作为值：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: (Where you need to replace `resource_id` with the actual resource identification)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: （其中，`resource_id`需要替换为实际的资源标识符）
- en: 'Then, both the default stickiness for all resources and for the resource identified
    by `resource_id` will be set to `INFINITY`. That being said, let''s now perform
    the failover. Take note of the current node and resource status by using the following
    command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，所有资源的默认粘性和由`resource_id`标识的资源的粘性将设置为`INFINITY`。话虽如此，现在我们开始执行故障切换。请使用以下命令记录当前节点和资源状态：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, stop the cluster by using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过以下命令停止集群：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, verify that all resources have been properly started on the other node.
    If not, troubleshoot using the tools explained in [Chapter 5](part0041_split_000.html#173721-1d2c6d19b9d242db82da724021b51ea0
    "Chapter 5. Monitoring the Cluster Health"), *Monitoring the Cluster Health*.
    Finally, proceed to run tests 1 and 2 on `node02`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，验证所有资源是否在另一个节点上正确启动。如果没有，使用[第5章](part0041_split_000.html#173721-1d2c6d19b9d242db82da724021b51ea0
    "第5章 监控集群健康")中解释的工具进行故障排除，*监控集群健康*。最后，继续在`node02`上运行测试1和测试2。
- en: The results in our present case are explained here.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当前情况下的结果在此解释。
- en: 'For test 1, refer to the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试 1，请参考以下截图：
- en: '![Performing a failover](img/00073.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![执行故障转移](img/00073.jpeg)'
- en: Summarizing results of test 1 on both nodes
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 总结测试 1 在两个节点上的结果
- en: 'For our convenience, let''s put both results in the following for a quick comparison:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便比较，我们将两个结果汇总如下：
- en: '| TEST 1 [seconds] | Node01 | Node02 |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 测试 1 [秒] | Node01 | Node02 |'
- en: '| --- | --- | --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Average, all queries | 20.770 | 20.179 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 平均值，所有查询 | 20.770 | 20.179 |'
- en: '| Minimum, all queries | 20.242 | 19.930 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 最小值，所有查询 | 20.242 | 19.930 |'
- en: '| Maximum, all queries | 21.298 | 20.428 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 最大值，所有查询 | 21.298 | 20.428 |'
- en: 'On the other hand, for test 2, the following screenshot and the next table
    show the details:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，对于测试 2，以下截图和下一张表格展示了详细信息：
- en: '![Performing a failover](img/00074.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![执行故障转移](img/00074.jpeg)'
- en: Summarizing results of test 2 on both nodes
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 总结测试 2 在两个节点上的结果
- en: '| TEST 2 [seconds] | Node01 | Node02 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 测试 2 [秒] | Node01 | Node02 |'
- en: '| --- | --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Average, all queries | 40.008 | 39.084 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 平均值，所有查询 | 40.008 | 39.084 |'
- en: '| Minimum, all queries | 38.713 | 38.779 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 最小值，所有查询 | 38.713 | 38.779 |'
- en: '| Maximum, all queries | 41.304 | 39.389 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 最大值，所有查询 | 41.304 | 39.389 |'
- en: As you can see, the results are very similar in both cases, which confirms that
    the failover did not affect the performance of the database server running on
    top of our cluster. While it is true that the failover did not improve performance
    either, we can see that the availability of the resource during a failover has
    been confirmed with a negative impact on the functionality of the cluster.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，两种情况下的结果非常相似，这证明了故障转移并未影响我们集群上运行的数据库服务器的性能。虽然故障转移确实没有提高性能，但我们可以看到，资源在故障转移期间的可用性已经得到确认，并且对集群的功能有一定的负面影响。
- en: Measuring and improving performance
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量和提高性能
- en: You will recall from earlier chapters that by definition, a resource is a service
    that is made highly available by the cluster. Every resource is assigned what
    is called a **resource agent**, an external shell script that manages the actual
    resource for the cluster, independently of how those services would be managed
    by systemd if they were left to its care. Thus, the actual operation of the resource
    is transparent to the cluster, since it is being managed by the resource agent.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，在之前的章节中，按照定义，资源是由集群使其高度可用的服务。每个资源都会被分配一个叫做 **资源代理** 的外部 Shell 脚本，负责独立于系统管理的方式（如
    systemd）管理集群中的实际资源。因此，资源的实际操作对集群来说是透明的，因为它是由资源代理来管理的。
- en: Resource agents are found inside `/usr/lib/ocf/resource.d`, so feel free to
    take a look at them to become better acquainted with their structure. In most
    circumstances, you will not need to modify them, but work on the specific resources'
    configuration files, as we shall see. You will recall from earlier chapters that
    adding a cluster resource involved using an argument of the `standard:provider:resource_agent`
    form (`ocf:heartbeat:mysql`, for example).You can also view the complete list
    of resource standards and providers with `pcs resource standards` and `pcs resource
    providers` respectively. Additionally, you can view the available agents for each
    `standard:provider` pair with `pcs resource agents standard:provider`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 资源代理位于 `/usr/lib/ocf/resource.d` 目录下，您可以随意查看它们，以便更好地了解它们的结构。在大多数情况下，您无需修改它们，而是需要修改特定资源的配置文件，正如我们接下来将看到的那样。您可能还记得，在之前的章节中，添加集群资源涉及使用
    `standard:provider:resource_agent` 形式的参数（例如 `ocf:heartbeat:mysql`）。您还可以通过分别使用
    `pcs resource standards` 和 `pcs resource providers` 查看完整的资源标准和提供者列表。此外，您可以通过 `pcs
    resource agents standard:provider` 查看每个 `standard:provider` 配对的可用代理。
- en: Apache's configuration and settings
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache 的配置和设置
- en: When the Apache web server is first installed, by default, it comes with several
    modules in the form of **Dynamic Shared Objects** (**DSOs**) that extend its functionality.
    The downside is that some of them may consume resources unnecessarily if they
    remain loaded and your applications don't' use them. As you can probably guess,
    this may lead to performance loss over time.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Apache web 服务器首次安装时，默认情况下，它会附带几个模块，形式为 **动态共享对象** (**DSO**)，用于扩展其功能。缺点是，如果这些模块持续加载，而您的应用程序并没有使用它们，它们可能会不必要地消耗资源。正如您可能猜到的，这可能会随着时间的推移导致性能损失。
- en: 'In CentOS 7, you can view the list of currently loaded and shared modules with
    `httpd -M`. The following output is truncated for the sake of brevity, but should
    be very similar in your case:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 7 中，您可以通过 `httpd -M` 查看当前加载和共享的模块列表。以下输出由于简洁起见已被截断，但在您的情况下应该非常相似：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A careful inspection of the module list and solid knowledge of what your applications
    actually needs will help you define which modules are not needed, and thus, they
    can be unloaded for the time being.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查模块列表，并充分了解您的应用程序实际需要哪些模块，这将帮助您定义哪些模块不需要，因此可以暂时卸载它们。
- en: 'Look at the following line in `/etc/httpd/conf/httpd.conf`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `/etc/httpd/conf/httpd.conf` 中的以下行：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This line indicates that Apache will look in the `conf.modules.d` directory
    for instructions to load module inside `.conf` files. For example, in the standard
    installation, `00-base.conf` contains ~70 `LoadModule` directives that point to
    DSOs inside /`etc/httpd/modules`. It is in these `.conf` files that you can enable
    or disable (by prepending each `LoadModule` directive with a `#` symbol, thus
    commenting that line) Apache modules. Note that this must be performed on both
    nodes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行表示 Apache 将在 `conf.modules.d` 目录中查找加载 `.conf` 文件内模块的指令。例如，在标准安装中，`00-base.conf`
    包含约 70 个 `LoadModule` 指令，指向 `/etc/httpd/modules` 内的 DSO。在这些 `.conf` 文件中，您可以启用或禁用
    Apache 模块（通过在每个 `LoadModule` 指令前添加 `#` 符号，从而注释掉该行）。请注意，这必须在两个节点上执行。
- en: Loading and disabling modules
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载和禁用模块
- en: 'In the following screenshot, `userdir_module` modules, `version_module`, and
    `vhost_alias_module` are loaded, whereas `buffer_module`, `watchdog_module`, and
    `heartbeat_module` are disabled through `00-base.conf`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，已加载 `userdir_module` 模块、`version_module` 和 `vhost_alias_module`，而 `buffer_module`、`watchdog_module`
    和 `heartbeat_module` 通过 `00-base.conf` 被禁用：
- en: '![Loading and disabling modules](img/00075.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![加载和禁用模块](img/00075.jpeg)'
- en: 'For example, in order to disable the `userdir` module, comment the corresponding
    `LoadModule` directive in `/etc/httpd/conf.modules.d/00-base.conf` on both nodes:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要禁用 `userdir` 模块，请在两个节点的 `/etc/httpd/conf.modules.d/00-base.conf` 中注释掉对应的
    `LoadModule` 指令：
- en: '[PRE18]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Restart the cluster resource on the node where it is currently active:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前节点上重启集群资源：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Placing limits on the number of Apache processes and children
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制 Apache 进程和子进程的数量
- en: In order for Apache to be able to handle as many simultaneous requests as needed,
    but preventing it from consuming more RAM than you can afford for your application(s),
    you need to set the `MaxRequestWorkers` (called `MaxClients` before version 2.3.13)
    directive to an appropriate value based mostly on the available physical memory
    that can be allotted in your specific environment. Note that if this value is
    set too high, you may bring the web server (and the resource altogether) to its
    knees.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 Apache 能够处理所需的并发请求数量，同时防止其占用超过您为应用程序所能承受的 RAM，您需要将 `MaxRequestWorkers`（在
    2.3.13 版本之前称为 `MaxClients`）指令设置为一个适当的值，主要依据您的特定环境中可分配的物理内存。请注意，如果此值设置得过高，可能会导致
    Web 服务器（以及资源本身）崩溃。
- en: On the other hand, setting it to an appropriate value, which is calculated based
    on the memory usage of each Apache process compared to the allotted RAM, will
    allow the web server to respond to that many requests at once. If the number of
    requests surpasses the capacity of the server, the extra requests will be served
    once the first ones have already been served, thus avoiding the resource from
    hanging for all connections.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，设置一个适当的值，该值是基于每个 Apache 进程的内存使用情况与分配的 RAM 相比计算出来的，将使 Web 服务器能够同时响应如此多的请求。如果请求数量超过服务器的处理能力，多余的请求将在先前的请求处理完毕后才会被处理，从而避免所有连接的资源挂起。
- en: For further details, refer to the Apache MPM Common directives documentation
    at [http://httpd.apache.org/docs/2.4/mod/mpm_common.html](http://httpd.apache.org/docs/2.4/mod/mpm_common.html).
    Keep in mind that Apache fine-tuning is out of the scope of this book, and the
    actions mentioned here are generally not enough for production use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详情，请参阅 Apache MPM 常用指令文档：[http://httpd.apache.org/docs/2.4/mod/mpm_common.html](http://httpd.apache.org/docs/2.4/mod/mpm_common.html)。请记住，Apache
    的精细调优超出了本书的范围，文中提到的操作通常不足以用于生产环境。
- en: Database resource
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库资源
- en: Since you will seldom use a web server without an accompanying database server,
    you also need to look on that side of things to improve performance. Here are
    some basic things you will want to look at.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你很少会使用没有附带数据库服务器的 Web 服务器，因此你也需要关注那一侧的性能优化。以下是一些你可能需要关注的基本事项。
- en: Creating indexes
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建索引
- en: A database containing tables of hundreds of thousands or million of records
    can quickly become a performance bottleneck when a typical `SELECT-FROM-WHERE`
    statement is made to retrieve a specific record. Going through every row in a
    table to accomplish this is considered highly inefficient as it is performed at
    the hard disk level.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含数十万或百万条记录的数据库，在执行典型的 `SELECT-FROM-WHERE` 语句以检索特定记录时，可能迅速成为性能瓶颈。为了实现这一点，必须逐行检查表中的每一行，这在硬盘级别上执行时被认为是非常低效的。
- en: With indexes, the operation is performed in memory instead of disk, and records
    can be automatically sorted so that it's faster to find the one we want because
    an index only contains the actual sorted data and a link to the original data
    record. In addition, we can create an index for each column we need to sort by,
    so using indexes becomes a handy tool to improve performance.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引时，操作会在内存中执行而不是在磁盘上，且记录可以自动排序，这样查找我们想要的记录会更快，因为索引仅包含实际排序的数据和指向原始数据记录的链接。此外，我们可以为每个需要排序的列创建索引，因此使用索引成为提高性能的便捷工具。
- en: 'To begin, exit your MariaDB session and run test 3 to measure performance without
    indexes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，退出 MariaDB 会话并运行测试 3，以衡量没有索引时的性能：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let''s create indexes on the `emp_no` field in the employees and salaries
    tables since we will use them in our `WHERE` clause, and then perform test 3 again.
    Perform these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `employees` 和 `salaries` 表的 `emp_no` 字段上创建索引，因为我们将在 `WHERE` 子句中使用它们，然后再次执行测试
    3。执行以下步骤：
- en: 'First, log in to the database server using the following command:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令登录到数据库服务器：
- en: '[PRE21]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, issue the following commands from the MariaDB shell:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从 MariaDB shell 中执行以下命令：
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After that, exit the MariaDB shell and run the test again to compare performance.
    The results are shown in the following screenshots and summarized against the
    previous example (without indexes) in the next table:![Creating indexes](img/00076.jpeg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，退出 MariaDB shell 并再次运行测试以比较性能。结果显示在以下截图中，并在下一个表格中与之前的示例（没有索引）进行了汇总：![创建索引](img/00076.jpeg)
- en: 'Now, let''s look at the results of the same test, but this time using indexes:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下相同测试的结果，不过这次使用了索引：
- en: '![Creating indexes](img/00077.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![创建索引](img/00077.jpeg)'
- en: Summarizing results of test 2 with and without indexes on node01
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 总结 node01 上有索引和没有索引的测试 2 结果
- en: '| TEST 3 (in seconds) | Node01 (without indexes) | Node01 (with indexes) |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 测试 3（秒） | Node01（没有索引） | Node01（有索引） |'
- en: '| --- | --- | --- |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Average, all queries | 0.043 | 0.038 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 平均值，所有查询 | 0.043 | 0.038 |'
- en: '| Minimum, all queries | 0.035 | 0.037 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 最小值，所有查询 | 0.035 | 0.037 |'
- en: '| Maximum, all queries | 0.055 | 0.046 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 最大值，所有查询 | 0.055 | 0.046 |'
- en: The preceding screenshots demonstrate that creating indexes on searchable fields
    will improve performance as it will prevent the server from having to go through
    all rows before returning the results.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图演示了在可搜索字段上创建索引将提高性能，因为它可以防止服务器在返回结果之前必须遍历所有行。
- en: Using query cache
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询缓存
- en: In a MariaDB database server, the results of `SELECT` queries are stored in
    a query cache so that when the exact same operation is performed again, the results
    can be returned faster. This is precisely the case in most modern websites where
    similar queries are made over and over again (high-read and low-write environments).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MariaDB 数据库服务器中，`SELECT` 查询的结果存储在查询缓存中，这样当相同的操作再次执行时，结果可以更快地返回。现代大多数网站正是如此，重复进行相似的查询（高读低写环境）。
- en: So, how does this happen at the server level? If an incoming query is not found
    in the cache, it will be processed normally and then stored, along with its result
    set, in the query cache. Otherwise, the results are pulled from the cache, which
    makes it possible to complete the operation much faster than if it was processed
    normally.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这在服务器级别是如何发生的呢？如果一个传入的查询在缓存中找不到，它将按正常方式处理，然后将其结果集存储在查询缓存中。否则，结果将从缓存中提取，这使得操作比正常处理时完成得要快得多。
- en: 'In MariaDB, the query cache is enabled by default (`SHOW VARIABLES LIKE ''query''query''_cache_type'';`),
    but its size is set to zero (`SHOW VARIABLES LIKE ''query''query''_cache_size'';`),
    as indicated in the following screenshot:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在MariaDB中，默认启用查询缓存（`SHOW VARIABLES LIKE 'query'_cache_type';`），但其大小设置为零（`SHOW
    VARIABLES LIKE 'query'_cache_size';`），如以下截图所示：
- en: '![Using query cache](img/00078.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![使用查询缓存](img/00078.jpeg)'
- en: 'For this reason, we need to set the query cache size variable to an appropriate
    value according to the use of our application. In the following screenshot, this
    variable is set to 100 KB (`SET GLOBAL query_cache_size = 102400;`), and we can
    see that the query cache size has been updated accordingly:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这个原因，我们需要根据应用程序的使用情况设置查询缓存大小变量为一个合适的值。在下面的截图中，这个变量设置为100 KB（`SET GLOBAL query_cache_size
    = 102400;`），我们可以看到查询缓存大小已经相应更新：
- en: '![Using query cache](img/00079.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![使用查询缓存](img/00079.jpeg)'
- en: Note that the right value for the query cache size will depend largely, if not
    entirely, on the needs of your specific case. Setting it too high will result
    in performance degradation as the system will have to allocate extra resources
    to manage a large cache. On the other hand, setting it to a very low value will
    cause at least some repeated queries to be processed normally and not be cached.
    In the preceding example, we allocated 100 KB of data as cache to store queries
    and their corresponding results.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，查询缓存大小的正确值在很大程度上（如果不是完全）取决于您具体案例的需求。将其设置得过高会导致性能下降，因为系统必须分配额外的资源来管理一个较大的缓存。另一方面，设置得过低会导致至少一些重复查询正常处理而不被缓存。在前面的示例中，我们将100
    KB的数据分配为缓存，以存储查询及其对应的结果。
- en: For further details, refer to the MariaDB documentation ([https://mariadb.com](https://mariadb.com)),
    specifically to the *Managing MariaDB/Optimization and tuning* section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多详细信息，请参考MariaDB文档（[https://mariadb.com](https://mariadb.com)），特别是*管理MariaDB/优化与调优*部分。
- en: Note
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The MariaDB documentation contains very helpful information to tune a database
    server starting from the ground up (all the way from the operating system level
    through query optimization). Other tools to increase performance and stability
    are MySQL tuner ([http://mysqltuner.com/](http://mysqltuner.com/)), MySQL Tuning
    Primer ([https://launchpad.net/mysql-tuning-primer](https://launchpad.net/mysql-tuning-primer)),
    and phpMyAdmin Advisor ([https://www.phpmyadmin.net/](https://www.phpmyadmin.net/)).
    The last tool is available in the **Status** tab of a standard phpMyAdmin installation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB文档包含非常有用的信息，帮助从头开始调优数据库服务器（从操作系统级别到查询优化）。其他可以提高性能和稳定性的工具包括MySQL调优器（[http://mysqltuner.com/](http://mysqltuner.com/)）、MySQL调优指南（[https://launchpad.net/mysql-tuning-primer](https://launchpad.net/mysql-tuning-primer)）以及phpMyAdmin顾问（[https://www.phpmyadmin.net/](https://www.phpmyadmin.net/)）。最后一个工具可以在标准phpMyAdmin安装的**状态**标签页中找到。
- en: Moving to an A/A cluster
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向A/A集群
- en: As you will recall from the introduction of [Chapter 3](part0023_split_000.html#LTSU2-1d2c6d19b9d242db82da724021b51ea0
    "Chapter 3. A Closer Look at High Availability"), *A Closer Look at High Availability*,
    A/A clusters tend to provide higher availability as several nodes are actively
    running applications at the same time (which, by the way, requires that the necessary
    data for those applications be available simultaneously on all cluster members).
    The downside is that if one or more nodes go offline, the remaining ones are assigned
    extra processing load, thus negatively impacting the overall performance of the
    cluster.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从[第3章](part0023_split_000.html#LTSU2-1d2c6d19b9d242db82da724021b51ea0 "第3章：深入了解高可用性")的介绍中记得的那样，*深入了解高可用性*，A/A集群倾向于提供更高的可用性，因为多个节点同时运行应用程序（顺便说一下，这要求所有集群成员上同时可用这些应用程序所需的数据）。其缺点是，如果一个或多个节点下线，剩余的节点将被分配额外的处理负载，从而对集群的整体性能产生负面影响。
- en: That being said, let's examine briefly the required steps to convert our current
    A/P cluster to an A/A one. Make sure a STONITH resource has been defined (refer
    to chapter 3 for further details).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们简要地看一下将当前的A/P集群转换为A/A集群所需的步骤。确保已定义STONITH资源（有关更多详细信息，请参考第3章）。
- en: 'Enable STONITH resource by using the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启用STONITH资源：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Install the additional software that will be needed for this:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装将需要的额外软件：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As opposed to a traditional journaling filesystem such as `ext4` (which we have
    used for our filesystems up until this point in the book), you will need a way
    to ensure that all nodes are granted simultaneous access to the same block storage.
    **Global File System 2** (also known as **GFS2**) provides such a feature through
    its command-line tools, which are included in the `gfs2-utils` package.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与传统的日志文件系统如`ext4`（我们在本书中到目前为止使用的文件系统）不同，你将需要一种方式来确保所有节点能够同时访问相同的块存储。**全局文件系统2**（也称为**GFS2**）通过其命令行工具提供了这一功能，这些工具包含在`gfs2-utils`包中。
- en: 'In addition, the `dlm` package will install the **Distributed Lock Manager**
    (also known as **DLM**), a requirement in cluster filesystems to synchronize access
    to shared resources. Add (and clone) the Distributed Lock Manager as a cluster
    resource of the `ocf` class, pacemaker provider, and `controld` class:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，`dlm`包将安装**分布式锁管理器**（也称为**DLM**），这是集群文件系统中同步访问共享资源的要求。将（并克隆）分布式锁管理器作为`ocf`类的集群资源，pacemaker提供程序和`controld`类：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, push the newly created resource to the CIB:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将新创建的资源推送到CIB：
- en: '[PRE26]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Choose a replicated storage resource and create a `gfs2` filesystem on top of
    its associated device node.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个复制存储资源，并在其关联的设备节点上创建`gfs2`文件系统。
- en: 'For example, let''s use the `/dev/drbd0` device we created in [Chapter 4](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "Chapter 4. Real-world Implementations of Clustering"), *Real-world Implementations
    of Clustering*. We will need to unmount it from the node with the DRBD primary
    role (most likely, `node01`) before we can create a `gfs2` filesystem on it:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，我们可以使用在[第4章](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "第4章. 集群的实际实现")，*集群的实际实现*中创建的`/dev/drbd0`设备。在我们能够在该设备上创建`gfs2`文件系统之前，需要先将其从具有DRBD主角色的节点（最可能是`node01`）卸载：
- en: '[PRE27]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, as you can see in the following screenshot, `MyCluster` is the original
    name of our cluster, `Web` is a random name, and the `-j` flag is used to indicate
    that the filesystem will use two journals (in this case one for each node - you
    will want to change this number if your cluster consists in more nodes). Finally,
    the `-p` option tells us that we are going to use the DLM provided by the kernel:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示，`MyCluster`是我们集群的原始名称，`Web`是一个随机名称，`-j`标志表示文件系统将使用两个日志（在这种情况下，每个节点一个——如果你的集群包含更多节点，您将需要更改此数字）。最后，`-p`选项告诉我们，我们将使用由内核提供的DLM：
- en: '![Moving to an A/A cluster](img/00080.jpeg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![移动到A/A集群](img/00080.jpeg)'
- en: 'You will also need to change the `fstype` option of the `web_fs` resource from
    `ext4` (the original filesystem used when we first created it in [Chapter 4](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "Chapter 4. Real-world Implementations of Clustering"), *Real-world Implementations
    of Clustering*) to `gfs2` in the PCS resource configuration:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还需要将`web_fs`资源的`fstype`选项从`ext4`（我们在[第4章](part0030_split_000.html#SJGS1-1d2c6d19b9d242db82da724021b51ea0
    "第4章. 集群的实际实现")，*集群的实际实现*中首次创建时使用的原始文件系统）更改为`gfs2`，并在PCS资源配置中进行相应更改：
- en: '[PRE28]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'It is important to note that if the cluster attempts to start `web_fs` before
    `dlm-clone`, we will run into an issue (we cannot mount a `gfs2` filesystem if
    the `dlm` functionality is not present). Thus, we need to add colocation and ordering
    constraints so that `web_fs` will always start on the node where `dlm-clone` starts:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是，如果集群在`dlm-clone`之前尝试启动`web_fs`，我们将遇到问题（如果没有`dlm`功能，就无法挂载`gfs2`文件系统）。因此，我们需要添加同居和排序约束，以确保`web_fs`总是在`dlm-clone`启动的节点上启动：
- en: '[PRE29]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`anddlm-clone` will be started before `web_fs`.'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`anddlm-clone`将在`web_fs`之前启动。'
- en: The `pcs constraint` order `dlm-clone` then `web_fsClone` the virtual IP address
    resource.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pcs constraint`顺序`dlm-clone`然后`web_fsClone`虚拟IP地址资源。'
- en: 'Cloning the IP address will allow us to effectively use resources on both nodes,
    but at the same time, any given packet will be sent to only one node (thus, implementing
    a basic load-balancing method in our cluster):'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 克隆IP地址将使我们能够有效地在两个节点上使用资源，但与此同时，任何给定的数据包将只会发送到一个节点（从而在集群中实现基本的负载均衡方法）：
- en: 'To do this, we will save the cluster configuration to a file named `load_balancing_cfg`
    and update such file with the :'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为此，我们将把集群配置保存到一个名为`load_balancing_cfg`的文件中，并使用以下命令更新该文件：
- en: '[PRE30]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will notice from the pcs resource help that the clone operation allows
    you to specify certain options. In the following lines, `clone-max` specifies
    the number of nodes that host the `virtual_ip` resource (2 in this case), whereas
    clone-node-max indicates the number of resource instances each node is allowed
    to run. Next, `globally-unique` instructs the resource agent that each node is
    distinct from the rest and thus, handles distinct traffic as well. Finally, `clusterip_hash=sourceip`
    tells us that the packet''s source IP address will be used to decide which node
    gets to process which request:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 pcs resource 帮助中你会注意到，克隆操作允许你指定某些选项。在接下来的几行中，`clone-max` 指定了承载 `virtual_ip`
    资源的节点数量（在本例中为 2），而 `clone-node-max` 指定了每个节点允许运行的资源实例数量。接下来，`globally-unique` 指示资源代理每个节点与其他节点不同，因此也处理不同的流量。最后，`clusterip_hash=sourceip`
    告诉我们，将使用数据包的源 IP 地址来决定哪个节点处理哪个请求：
- en: '[PRE31]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The next steps consists of cloning the filesystem and Apache and/or MariaDB
    resources. Note that in order to allow two primaries in a DRBD device so that
    you can serve content from both at the same time, you will need to set the allow-two-primaries
    directive to yes (`allow-two-primaries yes;`) in the net section of the resource
    configuration file (`/etc/drbd.d/drbd0.res`, for example):'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一步是克隆文件系统和 Apache 和/或 MariaDB 资源。请注意，为了允许 DRBD 设备中的两个主节点同时提供内容，你需要在资源配置文件的网络部分中将
    `allow-two-primaries` 指令设置为 yes（例如，`allow-two-primaries yes;`），配置文件路径为 `/etc/drbd.d/drbd0.res`：
- en: '[PRE32]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once again, save the current CIB to a local file and add the clone resource
    information. In the next example, we will use `web_fs`, `web_drbd_clone` and `webserver`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次保存当前的 CIB 到本地文件，并添加克隆资源信息。在下一个示例中，我们将使用 `web_fs`、`web_drbd_clone` 和 `webserver`：
- en: '[PRE33]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, `web_drbd` should be allowed to serve both instances as primary or master:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`web_drbd` 应该被允许作为主节点或主节点提供两个实例：
- en: '[PRE34]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, activate the new configuration:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，激活新的配置：
- en: '[PRE35]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Last but not least, you need to keep in mind that you will need to set the value
    of the resource stickiness to `0` in order for it to return an instance to its
    original node after a failover. To do so, refer to the *Performing a failover*
    section this same chapter.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，你需要记住，你需要将资源粘性值设置为 `0`，以便在故障转移后将实例返回其原始节点。为此，请参考本章的 *执行故障转移* 部分。
- en: You can now proceed to force a failover as usual, and test the resource availability.
    Unfortunately, this is not possible in a Virtualbox environment as I have explained
    previously. However, it's entirely possible if you are able to build your cluster
    with real hardware and an actual STONITH device.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像往常一样强制进行故障转移并测试资源的可用性。不幸的是，正如我之前所解释的那样，在 Virtualbox 环境中这是不可能的。然而，如果你能够使用真实硬件和实际的
    STONITH 设备构建集群，那么完全是可行的。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this last chapter, we set up a couple of performance testing tools for the
    example services that you need to make highly available in your cluster, and provided
    a few suggestions to optimize their performance separately as well. Note that
    those suggestions are not intended to represent an exhaustive list of tuning methods,
    but a starting point instead. We have also provided the overall instructions so
    that you can convert an A/P cluster into an A/A one.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们为需要在集群中实现高可用性的示例服务设置了一些性能测试工具，并提供了一些建议来分别优化它们的性能。请注意，这些建议并不旨在代表一份详尽的调优方法清单，而只是一个起点。我们还提供了整体的指导，以便你可以将一个
    A/P 集群转变为 A/A 集群。
- en: Finally, keep in mind that this book was written using virtual machines instead
    of specialized hardware. Thus, we have run into some associated limitations, such
    as the lack for real STONITH devices that would otherwise have allowed us to actually
    demonstrate the functionalities of an A/A cluster. However, the principles outlined
    in this book will undoubtedly be a guide to set up your own clusters, whether
    you are experimenting with virtual machines as well or using real hardware.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请记住，本书是使用虚拟机而非专用硬件编写的。因此，我们遇到了一些相关的限制，例如缺少真实的 STONITH 设备，否则我们本可以实际演示 A/A
    集群的功能。然而，本书中概述的原则无疑将成为你自己搭建集群的指南，无论你是使用虚拟机进行实验还是使用真实硬件。
- en: Best of success in your endeavors!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在努力中取得成功！
