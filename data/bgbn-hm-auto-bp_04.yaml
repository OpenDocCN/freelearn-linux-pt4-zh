- en: Chapter 4. Google Docs Weather Station
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章. Google Docs 气象站
- en: In this chapter, we're going to take a look at a simple weather station that
    can also be used as an IoT device. This time, our BeagleBone Black will collect
    environment data and send them to a remote database in order to be reworked and
    presented into a shared environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看一个简单的气象站，它也可以作为一个物联网设备使用。这次，我们的 BeagleBone Black 将收集环境数据，并将其发送到远程数据库，以便重新处理并展示到共享环境中。
- en: Both local and remote data will be available in our preferred browser since,
    as it's a local system, we're going to use the `wfrog` tool, and as remote system,
    we're going to use a Google Docs spreadsheet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本地和远程数据都可以在我们喜欢的浏览器中查看，因为这是一个本地系统，我们将使用 `wfrog` 工具，作为远程系统，我们将使用 Google Docs
    表格。
- en: The basics of functioning
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能基础
- en: In this project, our BeagleBone Black will collect the weather data through
    two sensors. But this time, instead of writing a dedicated software, we are going
    to use ready-made weather station software on our BeagleBone Black board to do
    the job. While on the remote side, we're going to use the well known Google Docs
    cloud system to store the data and then present them to the user.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们的 BeagleBone Black 将通过两个传感器收集天气数据。但这一次，我们将使用现成的气象站软件，而不是编写专门的软件，在 BeagleBone
    Black 板上完成工作。远程端，我们将使用著名的 Google Docs 云系统来存储数据，并将其展示给用户。
- en: In this manner, we can achieve a (*quasi*) professional result with minor effort!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以用较少的努力实现一个（*准*）专业的结果！
- en: In this scenario, our job is to connect the sensors, adapt the weather station
    software to our hardware in order to read the data from the sensors, and then
    add the proper code to send our data to a Google Docs spreadsheet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的工作是连接传感器，将气象站软件调整到我们的硬件上，以便读取传感器数据，然后添加适当的代码，将数据发送到 Google Docs 表格。
- en: Setting up the hardware
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件设置
- en: This time, the hardware setting is not very tricky since we just need two I²C
    chips to get the basic environment data for our weather station, while all the
    complexity is in the software settings, since we need at least a 3.13 kernel to
    manage the sensors and a complete software toolchain to talk with the Google Docs
    system!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，硬件设置并不复杂，因为我们只需要两个 I²C 芯片就可以获取气象站的基本环境数据，而所有的复杂性都在软件设置中，因为我们需要至少 3.13 版本的内核来管理传感器，并且需要完整的软件工具链来与
    Google Docs 系统进行通信！
- en: Maybe this is not the case with you, but my BeagleBone Black runs a kernel version
    3.8 where some drivers are missing. That's why I decided to install a new distribution
    based on kernel release 3.13 on an external microSD so that I do not have to modify
    the default on-board eMMC settings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这对你来说不是问题，但我的 BeagleBone Black 运行的是 3.8 版本的内核，缺少一些驱动程序。这就是为什么我决定在一个外部 microSD
    上安装基于 3.13 内核版本的新发行版，这样我就不必修改默认的板载 eMMC 设置。
- en: 'In any case, just to set up the hardware, I can use the current running kernel
    where I can enable the I²C bus named `I2C1` with the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，单纯设置硬件时，我可以使用当前运行的内核，在该内核中我可以通过以下命令启用名为 `I2C1` 的 I²C 总线：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If everything works well, you should see the following kernel activities on
    your board:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该在板上看到以下内核活动：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And a new device, `/dev/i2c-2` should now be available:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该可以使用新的设备 `/dev/i2c-2`：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Okay, now we can start adding the hardware to our BeagleBone Black and testing
    the connections with the current kernel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们可以开始将硬件添加到 BeagleBone Black，并测试与当前内核的连接。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The reader can also take a look at the book *BeagleBone Essentials*, *Packt
    Publishing*, written by the author of this book, in order to have more information
    regarding how to manage BeagleBone Black's I²C buses needed to communicate with
    the sensors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 读者还可以查看本书作者所写的《*BeagleBone Essentials*》，由 *Packt Publishing* 出版，获取更多关于如何管理 BeagleBone
    Black 上的 I²C 总线的信息，这些总线是与传感器通信所必需的。
- en: Setting up the temperature/humidity sensor
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置温湿度传感器
- en: 'As a temperature and humidity sensor, I decided to use the device shown in
    the following image:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为温湿度传感器，我决定使用下图所示的设备：
- en: '![Setting up the temperature/humidity sensor](img/B00255_04_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![设置温湿度传感器](img/B00255_04_01.jpg)'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/humidity-sensor](http://www.cosino.io/product/humidity-sensor).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以通过以下链接购买（或者通过网络搜索）：[http://www.cosino.io/product/humidity-sensor](http://www.cosino.io/product/humidity-sensor)。
- en: The datasheet of this device is available at [http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf](http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备的数据手册可以在 [http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf](http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf)
    找到。
- en: 'This device is very simple. The I²C connections are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备非常简单。I²C 连接如下：
- en: '| Pin | Temperature/humidity sensor pin |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 温湿度传感器引脚 |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| P9.4 - Vcc | + |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| P9.4 - Vcc | + |'
- en: '| P8.17 - CLK | CL |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| P8.17 - CLK | CL |'
- en: '| P8.18 - SDA | DA |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| P8.18 - SDA | DA |'
- en: '| P9.2 - GND | - |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| P9.2 - GND | - |'
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For further reading on the working of I²C bus, the reader can start with the
    Wikipedia article at [http://en.wikipedia.org/wiki/I%C2%B2C](http://en.wikipedia.org/wiki/I%C2%B2C).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步了解 I²C 总线的工作原理，可以从维基百科的文章 [http://en.wikipedia.org/wiki/I%C2%B2C](http://en.wikipedia.org/wiki/I%C2%B2C)
    开始阅读。
- en: 'Now, to verify the connections, we can use the `i2cdetect` command, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了验证连接，我们可以使用 `i2cdetect` 命令，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that even if the I²C bus is named `I2C1` on the system, it must be addressed
    with the `2` ID number!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使系统中的 I²C 总线被命名为 `I2C1`，它也必须使用 `2` 作为 ID 编号进行寻址！
- en: 'The string `UU` (or `40`) at the `0x40` address means that the device is connected!
    However, it may happen that you get no `UU` strings at all due to some hardware
    issues regarding this device. In this case, we can use the `i2cget` command as
    follows in order to force an I²C activity on the device:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `0x40` 地址处的字符串 `UU`（或 `40`）表示设备已连接！然而，由于某些硬件问题，您可能根本无法获取 `UU` 字符串。在这种情况下，我们可以使用
    `i2cget` 命令，如下所示，强制设备进行 I²C 活动：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Okay, the device is connected. But if you get the following output, you must
    recheck the connections:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，设备已连接。但如果您收到以下输出，必须重新检查连接：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you may need to disable the on-board pull-up resistors by clearing
    the soldered jumper on your sensor. In fact, the BeagleBone Black's I²C controller
    has the internal pull-up required by the I²C bus specifications, and under some
    circumstances, the pull-up on the sensor board may interfere with it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可能需要通过清除传感器上的焊接跳线来禁用板载上拉电阻。实际上，BeagleBone Black 的 I²C 控制器具有 I²C 总线规范所需的内部上拉电阻，在某些情况下，传感器板上的上拉电阻可能会干扰它。
- en: Setting up the barometric sensor
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置气压传感器
- en: 'As barometric sensor, I decided to use the device shown in the following image:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为气压传感器，我决定使用下图所示的设备：
- en: '![Setting up the barometric sensor](img/B00255_04_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![设置气压传感器](img/B00255_04_02.jpg)'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/barometric_sensor](http://www.cosino.io/product/barometric_sensor).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以通过以下链接购买（或通过上网搜索）：[http://www.cosino.io/product/barometric_sensor](http://www.cosino.io/product/barometric_sensor)。
- en: The datasheet of this device is available at [http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf),
    and a useful application note is at [http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备的数据手册可以在 [http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf)
    找到，另附有有用的应用说明：[http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf)。
- en: 'This device has two interfaces: I²C and SPI. However, since the previous device
    was an I²C one, I decided to use the same interface. So, the connections must
    be done as reported in the following table, leaving the other pins unconnected:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备有两个接口：I²C 和 SPI。然而，由于之前的设备是 I²C 接口，我决定使用相同的接口。因此，连接必须按照以下表格中的方式进行，其他引脚不连接：
- en: '| Pin | Barometric sensor pin |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 气压传感器引脚 |'
- en: '| --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| P9.4 - Vcc | VCC |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| P9.4 - Vcc | VCC |'
- en: '| P8.17 - CLK | SCL/SCLK |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| P8.17 - CLK | SCL/SCLK |'
- en: '| P8.18 - SDA | SDA/MOSI |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| P8.18 - SDA | SDA/MOSI |'
- en: '| P9.2 - GND | GND |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| P9.2 - GND | GND |'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we're going to connect both devices to the same I²C bus. For the moment,
    you can disconnect the previous sensor and then connect this one. But keep in
    mind that in the final configuration, all sensor devices are connected together
    with the same bus.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将把两个设备连接到同一 I²C 总线。暂时，您可以断开之前的传感器，然后连接这个传感器。但请记住，在最终配置中，所有传感器设备都将连接到同一总线。
- en: 'Now, to verify the connections, we can use the `i2cdetect` command, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了验证连接，我们可以使用 `i2cdetect` 命令，如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As the preceding command shows, the string `77` (or `UU`) at the `0x77` address
    means that the device is connected! This time, the device should be detected without
    any issue. So, if you do not get the preceding output, please consider rechecking
    your hardware connections.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的命令所示，`0x77` 地址处的字符串 `77`（或 `UU`）表示设备已连接！这时，设备应该能顺利被检测到。所以，如果你没有看到前面的输出，请考虑重新检查硬件连接。
- en: The final picture
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终图片
- en: The following screenshot shows the prototype I realized to implement this project
    and to test the software. As you can see, the connections this time are very tricky.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我实现该项目并测试软件的原型。如你所见，这次的连接非常复杂。
- en: '![The final picture](img/B00255_04_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![最终图片](img/B00255_04_03.jpg)'
- en: Setting up the software
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置软件
- en: Now, it's time to play hard! We have to install a new kernel with specific patches
    in order to add the needed drivers. Then, we must set up our Google account in
    order enable the Google Docs API to manage a spreadsheet on the cloud. And, in
    the end, we must install and properly configure the weather station software we
    chose to collect the weather data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候全力以赴了！我们必须安装一个带有特定补丁的新内核，以添加所需的驱动程序。然后，我们需要设置我们的 Google 账户，以启用 Google
    Docs API 来管理云端的电子表格。最后，我们必须安装并正确配置我们选择的天气站软件，用于收集天气数据。
- en: Installing a new kernel
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装新内核
- en: 'To install a new kernel, we must use a host PC where we use the following command
    to download the sources:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装新内核，我们必须使用主机 PC，通过以下命令下载源代码：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When finished, we must enter the `bb-kernel` directory and then check out the
    kernel, version 3.13:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们必须进入 `bb-kernel` 目录，然后检出内核版本 3.13：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we should configure the compilation suite by generating a proper configuration
    file named `system.sh`, starting from the sample file as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该通过从示例文件生成一个名为 `system.sh` 的配置文件来配置编译套件，操作如下：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On my system, I modified the newly created `system.sh` file with the following
    settings:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的系统上，我使用以下设置修改了新创建的 `system.sh` 文件：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `MMC` variable is used by the installer tool (named `install_kernel.sh`),
    and it points to the device corresponding to the microSD where the BeagleBone
    system is installed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`MMC` 变量由安装工具（名为 `install_kernel.sh`）使用，并指向安装了 BeagleBone 系统的 microSD 所对应的设备。'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Warning! You must pay attention and be sure about the `MMC` define settings
    or the host machine may get damaged.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！你必须小心并确保 `MMC` 定义设置正确，否则主机可能会受到损坏。
- en: 'Now we must apply the patch into `chapter_04/0001-Add-support-for-I2C1-bus-and-the-connected-devices.patch`
    file in the book''s example code repository in order to enable the I²C bus named
    `I2C1` and the drivers for the preceding sensors and to add the missing driver
    for the barometric sensor. The command is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将补丁应用到书中的示例代码库中的 `chapter_04/0001-Add-support-for-I2C1-bus-and-the-connected-devices.patch`
    文件，以启用名为 `I2C1` 的 I²C 总线以及前述传感器的驱动程序，并为气压传感器添加缺失的驱动程序。命令如下：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the `--whitespace=nowarn` command line option is needed just in case
    your `git` system is configured to automatically fix up the whitespace errors,
    which is wrong in this case.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`--whitespace=nowarn` 命令行选项是必要的，以防你的 `git` 系统配置为自动修复空格错误，而在这种情况下这是错误的。
- en: 'If everything works well, the following command should display the following
    text:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，以下命令应该显示以下文本：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Before starting the kernel compilation, let me spend a few words regarding
    this patch. It simply adds the following two patches:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始内核编译之前，让我简单介绍一下这个补丁。它仅添加了以下两个补丁：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first patch is to add the driver for the barometric sensor and the second
    one is to enable the I²C bus labeled `I2C1` and to define the connected devices.
    In particular, the second patch completes the steps shown in the following snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个补丁是添加气压传感器的驱动程序，第二个补丁是启用标记为 `I2C1` 的 I²C 总线并定义已连接的设备。特别地，第二个补丁完成了以下代码片段中的步骤：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, the preceding code defines the `i2c1_pins` group by selecting the proper
    `pinmux` settings, and then it enables the `I2C1` bus, sets the correct bus frequency,
    and defines the proper drivers for the attached sensor devices.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，前面的代码通过选择合适的 `pinmux` 设置来定义 `i2c1_pins` 组，然后它启用 `I2C1` 总线，设置正确的总线频率，并为附加的传感器设备定义了合适的驱动程序。
- en: 'Then, the patch adds the code needed to enable their application as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，补丁添加了启用其应用所需的代码，如下所示：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, as the last step, it enables the newly added driver into the default
    kernel''s configuration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，作为最后一步，它将新添加的驱动程序启用到默认内核的配置中：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Okay, all modifications have been explained, and we can now start to compile
    the kernel with the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所有修改都已说明，现在我们可以使用以下命令开始编译内核：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This step and the subsequent ones are time consuming and require patience, so
    you should take a cup of your preferred tea or coffee and just wait.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步以及后续步骤需要较长时间，并且需要耐心，因此您应该拿一杯自己喜欢的茶或咖啡，耐心等待。
- en: After some time, the procedure will present the standard kernel configuration
    panel, and now we should verify that the needed drivers are enabled. You should
    navigate to the menu in **Device Drivers** | **Hardware Monitoring support** where
    the **Measurement Specialties HTU21D humidity/temperature sensors** entry should
    be selected as module (**<M>**), and in **Device Drivers** | **Industrial I/O
    support** | **Pressure sensors** where the **EPCOS T5403 digital barometric pressure
    sensor driver** entry should be selected as module too.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，程序将显示标准的内核配置面板，我们应该验证所需的驱动程序是否已启用。您应该导航至**设备驱动程序** | **硬件监控支持**，并在**Measurement
    Specialties HTU21D湿度/温度传感器**项中选择模块（**<M>**）；在**设备驱动程序** | **工业I/O支持** | **压力传感器**中，应该选择**EPCOS
    T5403数字气压传感器驱动程序**作为模块。
- en: 'Then, exit from the menu and the kernel compilation will start. When it ends,
    the new kernel image is ready, and the following message should appear:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，退出菜单，内核编译将开始。当编译结束时，新的内核映像已准备好，应该会出现以下信息：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that when executing the `build_kernel.sh` file, you may get the following
    error message:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当执行`build_kernel.sh`文件时，可能会出现以下错误信息：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this case, you may resolve the problem by simply giving the preceding two
    suggested `apt-get` (or `aptitude`) commands.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您可以通过执行前面两个建议的`apt-get`（或`aptitude`）命令来解决问题。
- en: 'Now, we can install it on the microSD using the installation tool:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用安装工具将其安装到microSD上：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Before updating the kernel, the tool asks whether the user is really sure about
    the device where the kernel must be placed. For example, on my system, I get the
    following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新内核之前，工具会询问用户是否确定选择要安装内核的设备。例如，在我的系统中，我得到以下输出：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: My `MMC` variable is set to `/dev/sdd`; so, if I carefully take a look at the
    corresponding lines, I can verify that these are the right names of the BeagleBone
    Black's filesystem. So, I can safely answer yes by entering the `y` character.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我的`MMC`变量设置为`/dev/sdd`；所以，如果我仔细查看相应的行，就可以验证这些是BeagleBone Black文件系统的正确名称。这样，我可以放心地输入`y`字符，选择“是”。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the microSD should be a *class 10* and at least of 4 GB in size.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，microSD应为*class 10*，并且至少为4GB大小。
- en: 'At the end of the command execution, we should get the output as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令执行结束时，我们应该得到如下输出：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, just remove the microSD from the host machine and put it in your BeagleBone
    Black. Turn it on by keeping the user button pressed in order to force the boot
    from the microSD and, if everything works well, we can verify after the usual
    login that the new kernel is really running by using the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需从主机上取下microSD，并将其放入BeagleBone Black中。按住用户按钮开机，强制从microSD启动。如果一切正常，我们可以在正常登录后使用以下命令验证新的内核是否正在运行：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The reader can also take a look at the book *BeagleBone Essentials*, *Packt
    Publishing*, written by the author of this book, in order to have more information
    regarding how to install a newer kernel on an external microSD.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 读者还可以参考这本书《*BeagleBone Essentials*》，*Packt Publishing*出版，由本书的作者撰写，以获取更多关于如何在外部microSD上安装更新内核的信息。
- en: 'Okay, the new kernel is ready! Now we can verify that the needed drivers are
    also correctly loaded:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，新内核已经准备好！现在我们可以验证所需的驱动程序是否也正确加载：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The new devices can now be accessed through the *sysfs* interface. To get the
    current barometric pressure, we can use the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 新设备现在可以通过*sysfs*接口进行访问。要获取当前的气压值，可以使用以下命令：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The data is given in **kilopascal** (**kPa**).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数据以**千帕**（**kPa**）为单位给出。
- en: 'The temperature/humidity sensor can be accessed using the following commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令访问温湿度传感器：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The humidity is given as a relative humidity percentage (m%RH), and the temperature
    is given in thousandths of Celsius degrees (m°C), so we have to divide both measurements
    by 1000 in order to have the relative humidity percentage (%RH) and the Celsius
    degrees (°C).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 湿度以相对湿度百分比（m%RH）给出，温度以千分之一摄氏度（m°C）给出，因此我们需要将这两个数值分别除以 1000，以得到相对湿度百分比（%RH）和摄氏度（°C）。
- en: Running the weather station software
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行气象站软件
- en: Now it's time to set up our weather station. To do so, as already stated, we
    decided to use an already made project instead of writing a new one. This is because
    there are tons of well-done weather station software existing that we can use
    to locally display the collected data in a better manner.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是设置我们的气象站的时候了。为了做到这一点，正如之前所说，我们决定使用一个现成的项目，而不是编写一个新的。这是因为现有很多非常优秀的气象站软件，我们可以使用它们来以更好的方式在本地显示收集到的数据。
- en: The software is the `wfrog` project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个软件就是 `wfrog` 项目。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The home site of the project is at [https://code.google.com/p/wfrog/](https://code.google.com/p/wfrog/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的主页在 [https://code.google.com/p/wfrog/](https://code.google.com/p/wfrog/)。
- en: 'To install it, we can get the sources from the online repository with the following
    command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，我们可以通过以下命令从在线仓库获取源代码：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `svn` command is located in the `subversion` package that can be installed
    by using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`svn` 命令位于 `subversion` 包中，可以通过以下命令安装：'
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that a compressed archive of the program can be found in the `chapter_04/wfrog/wfrog-read-only.tgz`
    file in the book's example code repository.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，程序的压缩档案可以在书本示例代码库中的 `chapter_04/wfrog/wfrog-read-only.tgz` 文件中找到。
- en: 'After the download, we should go into the newly created directory `wfrog-read-only`
    and generate the `debian` package with the following commands:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，我们应该进入新创建的目录 `wfrog-read-only`，并通过以下命令生成 `debian` 包：
- en: '[PRE29]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that your system may miss some needed packages in order to be able to
    generate new `debian` packages. By using the following command, you should install
    whatever you need in order to do the job:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的系统可能缺少某些必要的软件包，以便能够生成新的 `debian` 包。通过以下命令，您应该可以安装所需的一切，以完成这项工作：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If everything goes well, the `rules` command should display the following message:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，`rules` 命令应该显示以下信息：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, to install the new packages, we can use the `gdebi` command, which will
    download all package''s dependencies for us, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了安装新的软件包，我们可以使用 `gdebi` 命令，它将为我们下载所有包的依赖项，如下所示：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `gdebi` command can be installed by using the following command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下命令安装 `gdebi` 命令：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Okay, now the software is installed, but we still need to complete some steps
    before going further. The first one is to configure the system with a special
    simulator in order to verify that the web interface and the data collecting system
    are working correctly. To do so, we should execute the `wfrog` command as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在软件已经安装完毕，但我们仍然需要完成一些步骤才能继续。第一个步骤是通过一个特殊的模拟器配置系统，以验证网页界面和数据采集系统是否正常工作。为此，我们应按如下方式执行
    `wfrog` 命令：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that, in case you get an error like the one shown as follows during the
    very first execution of the software, you may need the following patch to fix
    up the problem:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在软件第一次运行时遇到如下所示的错误，您可能需要以下补丁来修复问题：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The patch is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁如下：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Then, you simply need to rebuild the package.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您只需要重新构建软件包。
- en: The preceding patch can be found in the `chapter_04/wfrog/0001-fix-setup.diff`
    file in the book's example code repository.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 上述补丁可以在书本示例代码库中的 `chapter_04/wfrog/0001-fix-setup.diff` 文件中找到。
- en: 'Now, you should answer all the questions carefully selecting the `1) random-simulator`
    option when the systems asks you to enter the driver for your station model, as
    follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该仔细回答所有问题，并在系统要求您输入气象站模型的驱动程序时选择 `1) random-simulator` 选项，如下所示：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once configured, you can start the weather station system by issuing the following
    two commands:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，您可以通过执行以下两个命令启动气象站系统：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, the web interface can be accessed at `7680` port of the BeagleBone Black''s
    IP address (usually `192.168.7.2`), as shown in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，网页界面可以通过 BeagleBone Black 的 IP 地址（通常是 `192.168.7.2`）的 `7680` 端口访问，如下所示的截图所示：
- en: '![Running the weather station software](img/B00255_04_04.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![运行气象站软件](img/B00255_04_04.jpg)'
- en: Okay, it works; but the system is now using a simulator, and we want it to use
    the data from the weather sensors we just installed! So, we have to add a new
    driver to our new weather station. To do so, we have to modify the sources just
    downloaded.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，它已经工作了；但是系统现在使用的是模拟器，我们希望它使用我们刚刚安装的气象传感器的数据！因此，我们必须向新的气象站添加一个新驱动程序。为此，我们必须修改刚下载的源代码。
- en: 'In the `wfrog-read-only/wfdriver/station/` directory, we have to add a new
    file called `bbb_habp.py`. The following shows a first snippet of its code with
    the lines that define a new class related to our new station:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`wfrog-read-only/wfdriver/station/`目录下，我们需要添加一个名为`bbb_habp.py`的新文件。以下显示了它的代码的第一部分，其中定义了一个与我们新站点相关的新类：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, the code defines the functions to read the environment data: the `get_press()`
    function reads the pressure, `get_temp()` reads the temperature, and `get_hum()`
    reads the humidity, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码定义了读取环境数据的函数：`get_press()`函数读取压力，`get_temp()`函数读取温度，`get_hum()`函数读取湿度，如下所示：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After this, the code defines the core function that has the task to generate
    all weather events by calling the `generate_event()` function with a proper argument.
    The events just generated are stored into the `e` variable, and we have to only
    fill its fields and send the data to the weather station with the `send_event()`
    function, as shown in the following code snippet:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，代码定义了核心功能，该功能通过调用`generate_event()`函数并传入适当的参数来生成所有天气事件。刚生成的事件存储在`e`变量中，我们只需填写其字段并通过`send_event()`函数将数据发送到气象站，如下所示的代码片段：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The last lines are used to schedule the next period:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行用于安排下一个周期：
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding code is reported in the `chapter_04/wfrog/bbb_habp.py` file in
    the book's example code repository.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在书中示例代码库的`chapter_04/wfrog/bbb_habp.py`文件中报告。
- en: 'Now, to finish the job, we have to patch the `wfrog-read-only/wfdriver/station/__init__.py`
    file as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了完成任务，我们需要按照以下方式修补`wfrog-read-only/wfdriver/station/__init__.py`文件：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In this manner, we are saying to the `wfrog` system that a new station has been
    added.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们告诉`wfrog`系统已经添加了一个新站点。
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The patch is held in the `chapter_04/wfrog/0002-add-bbb_habp-station.diff` file
    in the book's example code repository.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁保存在书中示例代码库的`chapter_04/wfrog/0002-add-bbb_habp-station.diff`文件中。
- en: 'After all the preceding modifications, we have to regenerate the package as
    just shown and reconfigure it by rerunning the configuration program and selecting
    the new driver as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行所有前面的修改后，我们必须按照刚才展示的方式重新生成软件包，并通过重新运行配置程序并选择新的驱动程序来重新配置它，具体如下：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Let me remind you that in order to regenerate the package, you have to execute
    the following two commands:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我提醒你，为了重新生成软件包，你必须执行以下两个命令：
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that this time, a new entry named `bbb_habp` is added, so just select it
    and reconfigure the system as needed.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这一次，添加了一个名为`bbb_habp`的新条目，因此只需选择它并根据需要重新配置系统。
- en: 'When all modifications are in place, we have to stop the running `wfrog` tasks:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有修改完成后，我们必须停止正在运行的`wfrog`任务：
- en: '[PRE46]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we can safely clear the files where `wfrog` holds the weather data with
    the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以安全地使用以下命令清除`wfrog`保存天气数据的文件：
- en: '[PRE47]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'And then, we can restart `wfrog` tasks as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按照以下方式重新启动`wfrog`任务：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now, if you take the files in the `/var/lib/wfrog` directory under control,
    you should see that they will be repopulated with the new data from the sensors.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你控制`/var/lib/wfrog`目录中的文件，你应该会看到它们将会被传感器的新数据重新填充。
- en: Adding the Google Docs API
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Google Docs API
- en: Our weather station is now fully functional, but as stated at the beginning
    of this chapter, we want more—we want a weather station able to save its data
    over the network on a cloud system. And to do so, we have decided to use a Google
    Docs spreadsheet.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的气象站现在已经完全正常工作，但正如本章一开始所述，我们还希望更进一步——我们希望一个能够通过网络将数据保存到云系统的气象站。为了做到这一点，我们决定使用
    Google Docs 表格。
- en: The idea is to obtain a worksheet with the current weather data and the historical
    ones saved in it where all the data are updated periodically. So, let's see how
    to do this.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是获取一个包含当前天气数据和保存的历史数据的工作表，所有数据都会定期更新。让我们看看如何做到这一点。
- en: 'The API to be used for this task is implemented by the `gspread` tool, which
    can be installed into our BeagleBone Black by using the following commands:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此任务的 API 由`gspread`工具实现，我们可以通过以下命令将其安装到我们的 BeagleBone Black 上：
- en: '[PRE49]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The home site of the project is at [https://github.com/burnash/gspread](https://github.com/burnash/gspread).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的主页地址是 [https://github.com/burnash/gspread](https://github.com/burnash/gspread)。
- en: After the installation of all the preceding packages, we need to prepare a Google
    account. In this project, I used my own account, so I simply get access to my
    Google Docs page. Then, I create a new spreadsheet named `bbb_weather`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装所有前述包之后，我们需要准备一个Google账户。在这个项目中，我使用了自己的账户，所以我只是访问了我的Google Docs页面。然后，我创建了一个名为`bbb_weather`的新电子表格。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to the Google Docs documentation at [https://support.google.com/docs](https://support.google.com/docs)
    for further information about the Google Doc usage.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅Google Docs文档 [https://support.google.com/docs](https://support.google.com/docs)，了解有关Google
    Docs使用的更多信息。
- en: 'Once created, we have to publish the spreadsheet in such a way that we can
    get access to it from a remote computer. To do so, we must follow the instructions
    at [http://gspread.readthedocs.org/en/latest/oauth2.html](http://gspread.readthedocs.org/en/latest/oauth2.html),
    where the OAuth2 authorization system is explained. The following is a little
    list of the needed steps directly from that page:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，我们必须以一种可以从远程计算机访问的方式发布电子表格。为此，我们必须按照[http://gspread.readthedocs.org/en/latest/oauth2.html](http://gspread.readthedocs.org/en/latest/oauth2.html)中的说明进行操作，那里解释了OAuth2授权系统。以下是直接来自该页面的所需步骤的小列表：
- en: Navigate to Google Developers Console ([https://console.developers.google.com/project](https://console.developers.google.com/project))
    and create a new project (or select the one you have).
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Google开发者控制台 ([https://console.developers.google.com/project](https://console.developers.google.com/project))
    并创建一个新项目（或选择您已有的项目）。
- en: Under **API & auth** in the API, enable **Drive API**.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API中的**API & auth**下，启用**Drive API**。
- en: Navigate to **Credentials** and click on **Create new Client ID**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**凭证**，然后点击**创建新的客户端ID**。
- en: 'Select **Service account**. Clicking on **Create Client ID** will generate
    a new public-private key pair. You will automatically download a JSON file with
    the following data inside:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**服务账户**。点击**创建客户端ID**将生成一对新的公钥和私钥。您将自动下载一个JSON文件，里面包含以下数据：
- en: '[PRE50]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Go to Google Sheets and share your spreadsheet with an e-mail you have in your
    `json_key['client_email']`. Otherwise, you'll get a `SpreadsheetNotFound` exception
    when trying to open it.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Google Sheets，并与您在`json_key['client_email']`中拥有的电子邮件共享电子表格。否则，当您尝试打开它时，您将遇到`SpreadsheetNotFound`异常。
- en: Note
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the next code examples, my Google credentials are stored in the `Project-9a372e9e20e6.json`
    file which, for security reasons, is not reported in the book's example code repository.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的代码示例中，我的Google凭据存储在`Project-9a372e9e20e6.json`文件中，出于安全原因，该文件没有在书籍的示例代码库中提供。
- en: 'Now, to test if everything has been correctly set up, you can use the following
    command to create a void sheet in the newly-created spreadsheet:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试一切是否正确设置，您可以使用以下命令在新创建的电子表格中创建一个空白工作表：
- en: '[PRE51]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the preceding file in the `chapter_04/wfrog/create_new.py` file
    in the book's example code repository.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在书籍示例代码库中的`chapter_04/wfrog/create_new.py`文件中找到前面的文件。
- en: 'If you get no errors, you should find a new sheet named `BBB weather`, as shown
    in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，您应该能找到一个名为`BBB weather`的新工作表，如下图所示：
- en: '![Adding the Google Docs API](img/B00255_04_05.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![添加Google Docs API](img/B00255_04_05.jpg)'
- en: Tip
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that when executing the preceding command, you may get the following error:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在执行前述命令时，您可能会遇到以下错误：
- en: '[PRE52]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In this case, you may resolve installing the missing `python-httplib2` package
    with the following command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您可以通过以下命令解决安装缺失的`python-httplib2`包的问题：
- en: '[PRE53]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Or you may get the following error:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可能会遇到以下错误：
- en: '[PRE54]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In this case, the solution is to install the missing `python-crypto` package
    with the following command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，解决方法是使用以下命令安装缺失的`python-crypto`包：
- en: '[PRE55]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The code in the `create_new.py` file is quite simple, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_new.py`文件中的代码非常简单，如下所示：'
- en: '[PRE56]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: First of all, you should note that you must provide your own credentials to
    the `json.load()` function (that is, your `Project-xxxxxxxxxxxx.json` file obtained
    just now). Then, note that after opening the `bbb_weather` spreadsheet, we simply
    add a new worksheet called `sh.add_worksheet()` by using the `gc.open()` function.
    Then, we set up the cells content with the `wks.update_acell()` method.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要注意，必须向 `json.load()` 函数提供您自己的凭证（即刚刚获得的 `Project-xxxxxxxxxxxx.json` 文件）。然后，注意在打开
    `bbb_weather` 电子表格后，我们通过使用 `gc.open()` 函数简单地添加了一个名为 `sh.add_worksheet()` 的新工作表。接着，我们使用
    `wks.update_acell()` 方法设置单元格内容。
- en: Now, the reader may be curious regarding why the cell A7 holds the `LAST` string.
    Be patient, this will be explained soon!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，读者可能会好奇为什么 A7 单元格包含 `LAST` 字符串。耐心点，这将在稍后解释！
- en: 'Okay, now we need a way to send the collected data to our new worksheet. As
    seen before, the `wfrog` program stores its data into two files: `wfrog-current.xml`,
    which holds the current values, and `wfrog.csv`, which holds the historical data.
    To do the job, we can use the code stored in the `chapter_04/send_data.py` file
    in the book''s example code repository. The following are some relevant snippets.
    The first part of this file is the same as the `create_new.py` command, so we
    can skip the beginning till the opening of the `bbb_weather` spreadsheet:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们需要一种方法将收集到的数据发送到我们的新工作表。如前所述，`wfrog` 程序将其数据存储在两个文件中：`wfrog-current.xml`
    存储当前值，`wfrog.csv` 存储历史数据。为此，我们可以使用存储在书籍示例代码库中的 `chapter_04/send_data.py` 文件中的代码。以下是一些相关的代码片段。该文件的第一部分与
    `create_new.py` 命令相同，因此我们可以跳过开头部分，直到打开 `bbb_weather` 电子表格为止：
- en: '[PRE57]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Once extracted, this data can be sent on the relative cells:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提取，这些数据可以发送到相应的单元格：
- en: '[PRE58]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now it''s time to save the historical data. This is where the `LAST` string
    comes to help us! First of all, we have to parse the `.csv` file:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存历史数据的时候了。这时，`LAST` 字符串帮助我们解决了问题！首先，我们需要解析 `.csv` 文件：
- en: '[PRE59]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Then, we ask for the row number holding the `LAST` string inside our worksheet
    by using the `wks.find("LAST").row` method. Since the `LAST` string is in the
    row number 7 at the very beginning, we can find how many rows to skip in the `wfrog.csv`
    file in order to find the new data to be stored, as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `wks.find("LAST").row` 方法请求包含 `LAST` 字符串的行号。由于 `LAST` 字符串最初位于第 7 行，我们可以找到在
    `wfrog.csv` 文件中跳过多少行，从而找到要存储的新数据，如下所示：
- en: '[PRE60]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now we can extract the data and save them in the worksheet by using the `wks.insert_row(data,
    n)` function that stores them in the *nth* row:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过使用 `wks.insert_row(data, n)` 函数将数据提取并保存到工作表中，将它们存储在 *第 n 行*：
- en: '[PRE61]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'To test the code, we can execute the `send_data.py` command as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试代码，我们可以执行以下 `send_data.py` 命令：
- en: '[PRE62]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Tip
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that in the preceding file, you have to modify the following line according
    to your JSON filename!
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的文件中，您必须根据您的 JSON 文件名修改以下行！
- en: '[PRE63]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The program correctly detects that no historical data was saved before, and
    it starts to save new data from the very beginning. My worksheet now looks like
    what is shown in the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 程序正确地检测到之前没有保存历史数据，并从头开始保存新数据。我的工作表现在看起来像下面的截图所示：
- en: '![Adding the Google Docs API](img/B00255_04_06.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![添加 Google Docs API](img/B00255_04_06.jpg)'
- en: 'Now, the `LAST` string points to the row 15, so if we wait for new data and
    rerun the command, we get the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`LAST` 字符串指向第 15 行，因此如果我们等待新数据并重新运行命令，我们会得到如下结果：
- en: '[PRE64]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As we can see in the following screenshot, our program has just saved the new
    data at the right position:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，我们的程序已经将新数据保存在了正确的位置：
- en: '![Adding the Google Docs API](img/B00255_04_07.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![添加 Google Docs API](img/B00255_04_07.jpg)'
- en: To automate these steps, we can use the `cron` daemon, scheduling the execution
    of the `send_data.py` program at the desired delays.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化这些步骤，我们可以使用 `cron` 守护进程，按照预定的延迟安排执行 `send_data.py` 程序。
- en: Final test
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终测试
- en: 'This time, the final test needs more time than other projects since we must
    collect several data to get suitable graphics. So, we execute the `wfrog` tasks
    as shown in the preceding screenshot. Then, we leave them running for two days
    or more. For my test, the results are shown in the following two screenshots:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，最终测试比其他项目需要更多的时间，因为我们必须收集多项数据才能得到合适的图形。因此，我们按照前面的截图所示执行 `wfrog` 任务。然后，我们让它们运行两天或更长时间。对于我的测试，结果如下两个截图所示：
- en: '![Final test](img/B00255_04_08.jpg)![Final test](img/B00255_04_09.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![最终测试](img/B00255_04_08.jpg)![最终测试](img/B00255_04_09.jpg)'
- en: 'Then, we can verify that the preceding weather data has also been stored in
    the Google Docs spreadsheet by taking a look at our Google account. The following
    screenshot shows my test results:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过查看我们的 Google 账户来验证前面的天气数据是否已存储在 Google Docs 表格中。以下截图显示了我的测试结果：
- en: '![Final test](img/B00255_04_10.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![最终测试](img/B00255_04_10.jpg)'
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we discovered how to install a ready-to-use weather station
    software into our BeagleBone Black by adapting it to our hardware sensors and
    by installing a new kernel release with proper drivers. Then, we took a look at
    how to store data in a Google Docs spreadsheet for future processing.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何通过将现成的天气站软件安装到我们的 BeagleBone Black 上，适配硬件传感器，并安装带有适当驱动程序的新内核版本。接着，我们查看了如何将数据存储到
    Google Docs 表格中，以便日后处理。
- en: In the next chapter, we'll continue to interact with a remote system in order
    to manage a laundry monitoring system. We're going to use the WhatsApp system
    to know when our washing machine has finished its duty.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将继续与远程系统进行交互，以便管理洗衣监控系统。我们将使用 WhatsApp 系统来了解洗衣机何时完成工作。
