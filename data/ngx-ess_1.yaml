- en: Chapter 1. Getting Started with Nginx
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：开始使用 Nginx
- en: Nginx has emerged as a robust and scalable general-purpose web server in the
    last decade. It is a choice of many webmasters, startup founders, and site reliability
    engineers because of its simple yet scalable and expandable architecture, easy
    configuration, and light memory footprint. Nginx offers a lot of useful features,
    such as on-the-fly compression and caching out of the box.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 在过去十年中已经发展成一个强大且可扩展的通用 Web 服务器。由于其简单而可扩展的架构、易于配置以及轻量的内存占用，许多网站管理员、创业公司创始人和站点可靠性工程师选择了它。Nginx
    提供了许多有用的功能，例如开箱即用的动态压缩和缓存功能。
- en: Nginx integrates with existing web technologies such as Apache web server and
    PHP, and helps solving day-to-day problems in an easy way. Nginx is backed by
    a large, active community as well as a consulting company funded by venture capital.
    Therefore, it is actively supported.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 与现有的 Web 技术（如 Apache Web 服务器和 PHP）集成，并帮助轻松解决日常问题。Nginx 拥有一个庞大而活跃的社区，以及一家由风险资本资助的咨询公司。因此，它得到了积极的支持。
- en: This book will help you get started with Nginx and learn skills necessary to
    turn it into a powerful tool, a workhorse that will help you to solve your day-to-day
    challenges.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将帮助你入门 Nginx，并学习将其转化为强大工具所需的技能，这个工具将帮助你解决日常工作中的挑战。
- en: Installing Nginx
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Nginx
- en: Before you can dive into specific features of Nginx, you need to learn how to
    install Nginx on your system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在你深入了解 Nginx 的具体功能之前，你需要先学习如何在你的系统上安装 Nginx。
- en: It is strongly recommended that you use prebuilt binary packages of Nginx if
    they are available in your distribution. This ensures best integration of Nginx
    with your system and reuse of best practices incorporated into the package by
    the package maintainer. Prebuilt binary packages of Nginx automatically maintain
    dependencies for you and package maintainers are usually fast to include security
    patches, so you don't get any complaints from security officers. In addition to
    that, the package usually provides a distribution-specific startup script, which
    doesn't come out of the box.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈推荐在你的发行版中使用预构建的 Nginx 二进制包。如果有的话，这能确保 Nginx 与系统的最佳集成，并且能重用包维护者在包中所采用的最佳实践。预构建的
    Nginx 二进制包会自动为你管理依赖关系，并且包维护者通常会迅速发布安全补丁，这样你就不会收到来自安全人员的投诉。此外，这个包通常会提供特定发行版的启动脚本，而这并不是默认提供的。
- en: Refer to your distribution package directory to find out if you have a prebuilt
    package for Nginx. Prebuilt Nginx packages can also be found under the **download**
    link on the official [Nginx.org](http://Nginx.org) site.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你的发行版包目录，看看是否有预构建的 Nginx 包。你也可以在官方 [Nginx.org](http://Nginx.org) 网站的 **下载**
    链接下找到预构建的 Nginx 包。
- en: In this chapter, we will quickly go through most common distributions that contain
    prebuilt packages for Nginx.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将快速介绍包含预构建 Nginx 包的最常见发行版。
- en: Installing Nginx on Ubuntu
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Nginx
- en: 'The Ubuntu Linux distribution contains a prebuilt package for Nginx. To install
    it, simply run the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Linux 发行版包含了一个预构建的 Nginx 包。要安装它，只需运行以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will install all the required files on your system, including
    the `logrotate` script and service autorun scripts. The following table describes
    the Nginx installation layout that will be created after running this command
    as well as the purpose of the selected files and folders:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将会在你的系统上安装所有所需的文件，包括 `logrotate` 脚本和服务自动启动脚本。以下表格描述了运行此命令后创建的 Nginx 安装布局，以及所选文件和文件夹的目的：
- en: '| Description | Path/Folder |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 路径/文件夹 |'
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nginx configuration files | `/etc/nginx` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| Nginx 配置文件 | `/etc/nginx` |'
- en: '| Main configuration file | `/etc/nginx/nginx.conf` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 主配置文件 | `/etc/nginx/nginx.conf` |'
- en: '| Virtual hosts configuration files (including default one) | `/etc/nginx/sites-enabled`
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟主机配置文件（包括默认文件） | `/etc/nginx/sites-enabled` |'
- en: '| Custom configuration files | `/etc/nginx/conf.d` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 自定义配置文件 | `/etc/nginx/conf.d` |'
- en: '| Log files (both access and error log) | `/var/log/nginx` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 日志文件（包括访问日志和错误日志） | `/var/log/nginx` |'
- en: '| Temporary files | `/var/lib/nginx` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 临时文件 | `/var/lib/nginx` |'
- en: '| Default virtual host files | `/usr/share/nginx/html` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 默认虚拟主机文件 | `/usr/share/nginx/html` |'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Default virtual host files will be placed into `/usr/share/nginx/html`. Please
    keep in mind that this directory is only for the default virtual host. For deploying
    your web application, use folders recommended by **Filesystem Hierarchy Standard**
    (**FHS**).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认虚拟主机文件将放置在 `/usr/share/nginx/html` 中。请记住，此目录仅适用于默认虚拟主机。要部署您的 Web 应用程序，请使用
    **文件系统层次结构标准** (**FHS**) 推荐的文件夹。
- en: 'Now you can start the Nginx service with the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令启动 Nginx 服务：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will start Nginx on your system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动您的系统上的 Nginx。
- en: Alternatives
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代方案
- en: The prebuilt Nginx package on Ubuntu has a number of alternatives. Each of them
    allows you to fine tune the Nginx installation for your system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上预构建的 Nginx 包有多个选项。每个选项都允许您根据系统的需求微调 Nginx 安装。
- en: Installing Nginx on Red Hat Enterprise Linux or CentOS/Scientific Linux
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Red Hat Enterprise Linux 或 CentOS/Scientific Linux 上安装 Nginx
- en: Nginx is not provided out of the box in Red Hat Enterprise Linux or CentOS/Scientific
    Linux. Instead, we will use the **Extra Packages for Enterprise Linux** (**EPEL**)
    repository. EPEL is a repository that is maintained by Red Hat Enterprise Linux
    maintainers, but contains packages that are not a part of the main distribution
    for various reasons. You can read more about EPEL at [https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 在 Red Hat Enterprise Linux 或 CentOS/Scientific Linux 中并未开箱即用提供。相反，我们将使用
    **企业 Linux 的额外软件包** (**EPEL**) 仓库。EPEL 是由 Red Hat Enterprise Linux 维护人员维护的一个仓库，但其中包含一些由于各种原因未包含在主发行版中的软件包。您可以在
    [https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL) 阅读更多关于
    EPEL 的信息。
- en: 'To enable EPEL, you need to download and install the repository configuration
    package:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 EPEL，您需要下载并安装仓库配置包：
- en: 'For RHEL or CentOS/SL 7, use the following link:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 RHEL 或 CentOS/SL 7，请使用以下链接：
- en: '[http://download.fedoraproject.org/pub/epel/7/x86_64/repoview/epel-release.html](http://download.fedoraproject.org/pub/epel/7/x86_64/repoview/epel-release.html)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://download.fedoraproject.org/pub/epel/7/x86_64/repoview/epel-release.html](http://download.fedoraproject.org/pub/epel/7/x86_64/repoview/epel-release.html)'
- en: 'For RHEL/CentOS/SL 6 use the following link:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 RHEL/CentOS/SL 6，请使用以下链接：
- en: '[http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html](http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html](http://download.fedoraproject.org/pub/epel/6/i386/repoview/epel-release.html)'
- en: 'If you have a newer/older RHEL version, please take a look at the *How can
    I use these extra packages?* section in the original EPEL wiki at the following
    link:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是更新或较旧版本的 RHEL，请查看原始 EPEL 维基中的 *如何使用这些额外的软件包？* 部分，链接如下：
- en: '[https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://fedoraproject.org/wiki/EPEL](https://fedoraproject.org/wiki/EPEL)'
- en: 'Now that you are ready to install Nginx, use the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您准备好安装 Nginx 了，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding command will install all the required files on your system, including
    the `logrotate` script and service autorun scripts. The following table describes
    the Nginx installation layout that will be created after running this command
    and the purpose of the selected files and folders:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的系统上安装所有必需的文件，包括`logrotate`脚本和服务自动启动脚本。下表描述了运行此命令后创建的 Nginx 安装布局，以及所选文件和文件夹的用途：
- en: '| Description | Path/Folder |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 路径/文件夹 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nginx configuration files | /`etc/nginx` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Nginx 配置文件 | `/etc/nginx` |'
- en: '| Main configuration file | `/etc/nginx/nginx.conf` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 主配置文件 | `/etc/nginx/nginx.conf` |'
- en: '| Virtual hosts configuration files (including default one) | `/etc/nginx/conf.d`
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟主机配置文件（包括默认配置） | `/etc/nginx/conf.d` |'
- en: '| Custom configuration files | `/etc/nginx/conf.d` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 自定义配置文件 | `/etc/nginx/conf.d` |'
- en: '| Log files (both access and error log) | `/var/log/nginx` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 日志文件（包括访问日志和错误日志） | `/var/log/nginx` |'
- en: '| Temporary files | `/var/lib/nginx` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 临时文件 | `/var/lib/nginx` |'
- en: '| Default virtual host files | `/usr/share/nginx/html` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 默认虚拟主机文件 | `/usr/share/nginx/html` |'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Default virtual host files will be placed into `/usr/share/nginx/html`. Please
    keep in mind that this directory is only for the default virtual host. For deploying
    your web application, use folders recommended by FHS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认虚拟主机文件将放置在 `/usr/share/nginx/html` 中。请记住，此目录仅适用于默认虚拟主机。要部署您的 Web 应用程序，请使用
    FHS 推荐的文件夹。
- en: 'By default, the Nginx service will not autostart on system startup, so let''s
    enable it. Refer to the following table for the commands corresponding to your
    CentOS version:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nginx 服务不会在系统启动时自动启动，因此我们需要启用它。请参考以下表格，查看与您 CentOS 版本对应的命令：
- en: '| Function | Cent OS 6 | Cent OS 7 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 功能 | Cent OS 6 | Cent OS 7 |'
- en: '| --- | --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Enable Nginx startup at system startup | `chkconfig nginx on` | `systemctl
    enable nginx` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 在系统启动时启用 Nginx 启动 | `chkconfig nginx on` | `systemctl enable nginx` |'
- en: '| Manually start Nginx | `service nginx start` | `systemctl start nginx` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 手动启动 Nginx | `service nginx start` | `systemctl start nginx` |'
- en: '| Manually stop Nginx | `service nginx stop` | `systemctl start nginx` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 手动停止 Nginx | `service nginx stop` | `systemctl start nginx` |'
- en: Installing Nginx from source files
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源文件安装 Nginx
- en: Traditionally, Nginx is distributed in the source code. In order to install
    Nginx from the source code, you need to download and compile the source files
    on your system.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Nginx 以源代码的形式发布。为了从源代码安装 Nginx，你需要在系统上下载并编译源代码文件。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is not recommended that you install Nginx from the source code. Do this
    only if you have a good reason, such as the following scenarios:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议你从源代码安装 Nginx，只有在你有充分的理由时，例如以下场景，才建议这样做：
- en: You are a software developer and want to debug or extend Nginx
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是一名软件开发者，想要调试或扩展 Nginx
- en: You feel confident enough to maintain your own package
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你对维护自己的包有足够的信心
- en: A package from your distribution is not good enough for you
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你觉得发行版中的包不够适合你的需求
- en: You want to fine-tune your Nginx binary
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你希望微调你的 Nginx 二进制文件
- en: In either case, if you are planning to use this way of installing for real use,
    be prepared to sort out challenges such as dependency maintenance, distribution,
    and application of security patches.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，如果你计划使用这种安装方式进行实际使用，请准备好解决依赖关系维护、分发和应用安全补丁等挑战。
- en: In this section, we will be referring to the configuration script. Configuration
    script is a shell script similar to one generated by autoconf, which is required
    to properly configure the Nginx source code before it can be compiled. This configuration
    script has nothing to do with the Nginx configuration file that we will be discussing
    later.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将提到配置脚本。配置脚本是一个类似于 autoconf 生成的 shell 脚本，必须正确配置 Nginx 源代码才能进行编译。这个配置脚本与我们稍后将讨论的
    Nginx 配置文件无关。
- en: Downloading the Nginx source files
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载 Nginx 源代码文件
- en: 'The primary source for Nginx for an English-speaking audience is [Nginx.org](http://Nginx.org).
    Open [http://nginx.org/en/download.html](http://nginx.org/en/download.html) in
    your browser and choose the most recent stable version of Nginx. Download the
    chosen archive into a directory of your choice (`/usr/local` or `/usr/src` are
    common directories to use for compiling software):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 面向英语用户的 Nginx 主要来源是 [Nginx.org](http://Nginx.org)。在浏览器中打开 [http://nginx.org/en/download.html](http://nginx.org/en/download.html)，选择最新的稳定版本的
    Nginx。将所选的归档文件下载到你选择的目录中（`/usr/local` 或 `/usr/src` 是常用的编译软件的目录）：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Extract the files from the downloaded archive and change to the directory corresponding
    to the chosen version of Nginx:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从下载的归档文件中提取文件，并切换到相应版本的 Nginx 目录：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To configure the source code, we need to run the `./configure` script included
    in the archive:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置源代码，我们需要运行归档文件中包含的 `./configure` 脚本：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This script will produce a lot of output and, if successful, will generate a
    `Makefile` file for the source files.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将产生大量输出，并且如果成功，将为源代码生成一个 `Makefile` 文件。
- en: Notice that we showed the non-privileged user prompt `$` instead of the root
    `#` in the previous command lines. You are encouraged to configure and compile
    software as a regular user and only install as root. This will prevent a lot of
    problems related to access restriction while working with the source code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在之前的命令行中显示了非特权用户提示符 `$`，而不是 root 用户的 `#`。建议你作为常规用户配置和编译软件，只在安装时以 root
    用户身份运行。这将防止在处理源代码时遇到与访问限制相关的许多问题。
- en: Troubleshooting
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 故障排除
- en: The troubleshooting step, although very simple, has a couple of common pitfalls.
    The basic installation of Nginx requires the presence of OpenSSL and **Perl-compatible
    Regex** (**PCRE**) developer packages in order to compile. If these packages are
    not properly installed or not installed in locations where the Nginx configuration
    script is able to locate them, the configuration step might fail.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除步骤虽然非常简单，但有几个常见的陷阱。Nginx 的基本安装需要 OpenSSL 和 **Perl 兼容正则表达式** (**PCRE**) 开发者包，以便编译。如果这些软件包没有正确安装，或者没有安装在
    Nginx 配置脚本能够找到的位置，配置步骤可能会失败。
- en: Then, you have to choose between disabling the affected Nginx built-in modules
    (rewrite or SSL, installing required packages properly, or pointing the Nginx
    configuration script to the actual location of those packages if they are installed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你必须在禁用受影响的 Nginx 内置模块（如重写或 SSL）、正确安装所需的包，或者如果它们已经安装，指向 Nginx 配置脚本的实际位置之间做出选择。
- en: Building Nginx
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 Nginx
- en: 'You can build the source files now using the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用以下命令来构建源文件：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You''ll see a lot of output on compilation. If build is successful, you can
    install the Nginx file on your system. Before doing that, make sure you escalate
    your privileges to the super user so that the installation script can install
    the necessary files into the system areas and assign necessary privileges. Once
    successful, run the `make install` command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中你会看到大量输出。如果构建成功，你可以在系统上安装 Nginx 文件。在此之前，确保将权限提升为超级用户，以便安装脚本能将必要的文件安装到系统区域并分配必要的权限。成功后，运行
    `make install` 命令：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command will install all the necessary files on your system.
    The following table lists all locations of the Nginx files that will be created
    after running this command and their purposes:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会将所有必要的文件安装到你的系统上。下表列出了在运行此命令后创建的所有 Nginx 文件的位置及其用途：
- en: '| Description | Path/Folder |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 路径/文件夹 |'
- en: '| --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Nginx configuration files | `/usr/local/nginx/conf` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Nginx 配置文件 | `/usr/local/nginx/conf` |'
- en: '| Main configuration file | `/usr/local/nginx/conf/nginx.conf` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 主配置文件 | `/usr/local/nginx/conf/nginx.conf` |'
- en: '| Log files (both access and error log) | `/usr/local/nginx/logs` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 日志文件（包括访问日志和错误日志） | `/usr/local/nginx/logs` |'
- en: '| Temporary files | `/usr/local/nginx` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 临时文件 | `/usr/local/nginx` |'
- en: '| Default virtual host files | `/usr/local/nginx/html` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 默认虚拟主机文件 | `/usr/local/nginx/html` |'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike installations from prebuilt packages, installation from source files
    does not harness Nginx folders for the custom configuration files or virtual host
    configuration files. The main configuration file is also very simple in its nature.
    You have to take care of this yourself.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与从预构建包安装不同，从源文件安装不会为自定义配置文件或虚拟主机配置文件使用 Nginx 文件夹。主配置文件本身也很简单。你必须自己处理这个问题。
- en: 'Nginx must be ready to use now. To start Nginx, change your working directory
    to the `/usr/local/nginx` directory and run the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 现在应该已经准备好使用了。要启动 Nginx，切换到 `/usr/local/nginx` 目录，并运行以下命令：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will start Nginx on your system with the default configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的系统上使用默认配置启动 Nginx。
- en: Troubleshooting
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'This stage works flawlessly most of the time. A problem can occur in the following
    situations:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段大多数时候都能顺利完成。以下情况可能会出现问题：
- en: You are using nonstandard system configuration. Try to play with the options
    in the configuration script in order to overcome the problem.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在使用非标准的系统配置。尝试修改配置脚本中的选项来克服这个问题。
- en: You compiled in third-party modules and they are out of date or not maintained.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你编译了第三方模块，但它们已经过时或未被维护。
- en: Switch off third-party modules that break your build or contact the developer
    for assistance.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用那些破坏构建的第三方模块，或者联系开发者寻求帮助。
- en: Copying the source code configuration from prebuilt packages
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从预构建包复制源代码配置
- en: Occasionally you might want to amend Nginx binary from a prebuilt packages with
    your own changes. In order to do that you need to reproduce the build tree that
    was used to compile Nginx binary for the prebuilt package.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望根据自己的修改来调整通过预构建包得到的 Nginx 二进制文件。为了做到这一点，你需要重现用于编译 Nginx 二进制文件的构建树，这样才能使用预构建包。
- en: 'But how would you know what version of Nginx and what configuration script
    options were used at the build time? Fortunately, Nginx has a solution for that.
    Just run the existing Nginx binary with the `-V` command-line option. Nginx will
    print the configure-time options. This is shown in the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你怎么知道在构建时使用了什么版本的 Nginx 和什么配置脚本选项呢？幸运的是，Nginx 提供了解决方案。只需使用 `-V` 命令行选项运行现有的
    Nginx 二进制文件。Nginx 会打印配置时的选项。如下所示：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the output of the preceding command, reproduce the entire build environment,
    including the Nginx source tree of the corresponding version and modules that
    were included into the build.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面命令的输出，重现整个构建环境，包括相应版本的 Nginx 源代码树以及包含在构建中的模块。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, the output of the Nginx `-V` command is trimmed for simplicity. In reality,
    you will be able to see and copy the entire command line that was passed to the
    configuration script at the build time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，Nginx `-V` 命令的输出已被简化。实际上，你将能够看到并复制在构建时传递给配置脚本的完整命令行。
- en: You might even want to reproduce the version of the compiler used in order to
    produce a binary-identical Nginx executable file (we will discuss this later when
    discussing how to troubleshoot crashes).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想重现所使用的编译器版本，以便生成一个二进制完全相同的Nginx可执行文件（我们稍后会在讨论如何排查崩溃时讨论此问题）。
- en: Once this is done, run the `./configure` script of your Nginx source tree with
    options from the output of the `-V` option (with necessary alterations) and follow
    the remaining steps of the build procedure. You will get an altered Nginx executable
    on the `objs/` folder of the source tree.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行Nginx源树中的`./configure`脚本，并使用`-V`选项输出的选项（进行必要的更改），然后按照构建步骤继续操作。你将获得一个修改过的Nginx可执行文件，存放在源树的`objs/`文件夹中。
- en: The structure of the Nginx installation
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nginx安装结构
- en: When Nginx is installed, we can quickly study the structure of the installation.
    This will help you to know your installation better and manage it more confidently.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Nginx后，我们可以快速研究安装的结构。这将帮助你更好地了解你的安装，并更有信心地管理它。
- en: For each installation method, we have a set of generic locations and default
    paths. Let's see what these default locations contain.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种安装方式，我们都有一组通用位置和默认路径。让我们看看这些默认位置包含了什么内容。
- en: The Nginx configuration folder
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nginx配置文件夹
- en: 'This folder contains the main configuration file and a set of parameter files.
    The following table describes the purpose of each of the default parameter files:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件夹包含主配置文件和一组参数文件。下表描述了每个默认参数文件的目的：
- en: '| File name | Description |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 文件名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `mime.types` | This contains the default MIME type map for converting file
    extensions into MIME types. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `mime.types` | 这是包含用于将文件扩展名转换为MIME类型的默认MIME类型映射的文件。 |'
- en: '| `fastcgi_params` | This contains the default FastCGI parameters required
    for FastCGI to function. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `fastcgi_params` | 这是包含FastCGI正常运行所需的默认FastCGI参数。 |'
- en: '| `scgi_params` | This contains the default SCGI parameters required for SCGI
    to function. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `scgi_params` | 这是包含SCGI正常运行所需的默认SCGI参数。 |'
- en: '| `uwsgi_params` | This contains the default UWCGI parameters required for
    UWCGI to function. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `uwsgi_params` | 这是包含UWCGI正常运行所需的默认UWCGI参数。 |'
- en: '| `proxy_params` | This contains the default proxy module parameters. This
    parameter set is required for certain web servers when they are behind Nginx,
    so that they can figure out they are behind a proxy. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `proxy_params` | 这是包含默认代理模块参数的文件。这个参数集是某些Web服务器在位于Nginx后面时所必需的，目的是让它们能够知道自己是在代理后面。
    |'
- en: '| `naxsi.rules` (optional) | This is the main rule set for the NAXSI web application
    firewall module. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `naxsi.rules`（可选） | 这是NAXSI Web应用防火墙模块的主要规则集。 |'
- en: '| `koi-utf`, `koi-win`, and `win-utf` | These are the Cyrillic character set
    conversion tables. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `koi-utf`、`koi-win` 和 `win-utf` | 这些是西里尔字符集转换表。 |'
- en: The default virtual host folder
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认虚拟主机文件夹
- en: The default configuration contains references to this site as root. It is not
    recommended that you use this directory for real sites, as it is not a good practice
    for the Nginx folders hierarchy to contain the site hierarchy. Use this directory
    for testing purposes or for serving auxiliary files.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置将此站点引用为根目录。我们不建议你将此目录用于真实站点，因为将站点层级包含在Nginx文件夹层级中并不是一个好做法。请将此目录用于测试或提供辅助文件。
- en: The virtual hosts configuration folder
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚拟主机配置文件夹
- en: This is the location of virtual host configuration files. The recommended structure
    of this folder is to have one file per virtual host in this folder or one folder
    per virtual host, containing all files related to this virtual host. In this way,
    you will always know which files were used and which are now being used, and what
    each of the files contain and which files can be purged.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是虚拟主机配置文件的位置。推荐的文件夹结构是每个虚拟主机在此文件夹中有一个文件，或者每个虚拟主机有一个文件夹，里面包含与该虚拟主机相关的所有文件。这样，你将始终知道使用了哪些文件，哪些文件正在使用，以及每个文件包含什么内容，哪些文件可以被清除。
- en: The log folder
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志文件夹
- en: This is the location for Nginx log files. The default access log file and error
    log file will be written to this location. For installation from source files,
    it is not recommended that you use the default location `/usr/local/nginx/logs`
    for real sites. Instead, make sure all your log files are stored in the system
    log file location, such as `/var/log/nginx`, to provide better overview and management
    of your log files.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Nginx 日志文件的存储位置。默认的访问日志文件和错误日志文件将被写入该位置。对于从源文件安装的情况，不建议将日志文件存储在默认位置 `/usr/local/nginx/logs`，尤其是在实际站点上。相反，请确保将所有日志文件存储在系统日志文件的位置，比如
    `/var/log/nginx`，这样可以更好地概览和管理日志文件。
- en: The temporary folder
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 临时文件夹
- en: Nginx uses temporary files for receiving large request bodies, and proxies large
    files from upstream. Files that are created for this purpose can be found in this
    folder.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 使用临时文件来接收大请求体，并从上游代理大文件。为此目的创建的文件可以在这个文件夹中找到。
- en: Configuring Nginx
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Nginx
- en: Now that you know how to install Nginx and the structure of its installation,
    we can study how to configure Nginx. Simplicity of configuration is one of the
    reasons Nginx is popular among webmasters, because this saves them a lot of time.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何安装 Nginx 及其安装结构，我们可以学习如何配置 Nginx。配置简单是 Nginx 受欢迎的原因之一，因为这能节省大量的时间。
- en: 'In a nutshell, Nginx configuration files are simply sequences of directives
    that can take up to eight space-separated arguments, for example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Nginx 配置文件就是一系列指令，每条指令最多可以接受八个以空格分隔的参数，例如：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the configuration file, the directives are delimited by a semicolon (`;`)
    from one another. Some of the directives may have a block instead of a semicolon.
    A block is delimited by curly brackets (`{}`). A block can contain arbitrary text
    data, for example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，指令之间使用分号 (`;`) 分隔。有些指令可能会用块而不是分号。块用花括号 (`{}`) 括起来。一个块可以包含任意文本数据，例如：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A block can also contain a list of other directives. In this case, the block
    is called a section. A section can enclose other sections, thus establishing a
    hierarchy of sections.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个块也可以包含其他指令的列表。在这种情况下，这个块被称为一个部分。一个部分可以包含其他部分，从而形成一个部分层次结构。
- en: Most important directives have short names; this reduces the effort required
    to maintain the configuration file.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的指令通常都有简短的名称，这样可以减少维护配置文件所需的工作量。
- en: Value types
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值类型
- en: 'In general, a directive can have arbitrary quoted or unquoted strings as arguments.
    But many directives have arguments that have common value types. To help you quickly
    get your head around the value types I listed them in the following table:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，指令可以接受任意的带引号或不带引号的字符串作为参数。但许多指令有一些常见的值类型作为参数。为了帮助你快速理解这些值类型，我在下面的表格中列出了它们：
- en: '| Value type | Format | Example of a value |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 值类型 | 格式 | 值示例 |'
- en: '| --- | --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Flag | [on&#124;off] | `on`, `off` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | [on&#124;off] | `on`, `off` |'
- en: '| Signed integer | -?[0-9]+ | `1024` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 有符号整数 | -?[0-9]+ | `1024` |'
- en: '| Size | [0-9]+([mM]&#124;[kK])? | `23M`, `12348k` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 大小 | [0-9]+([mM]&#124;[kK])? | `23M`, `12348k` |'
- en: '| Offset | [0-9]+([mM]&#124;[kK]&#124;[gG])? | `43G`, `256M` |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 偏移量 | [0-9]+([mM]&#124;[kK]&#124;[gG])? | `43G`, `256M` |'
- en: '| Milliseconds | [0-9]+[yMwdhms]? | `30s`, `60m` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 毫秒 | [0-9]+[yMwdhms]? | `30s`, `60m` |'
- en: Variables
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are named objects that can be assigned a textual value. Variables
    can only appear inside the `http` section. A variable is referred to by its name,
    prefixed by the dollar (`$`) symbol. Alternatively, a variable reference can enclose
    a variable name in curly brackets to prevent merging with surrounding text.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是可以赋予文本值的命名对象。变量只能出现在 `http` 部分。变量通过其名称进行引用，前面加上美元符号 (`$`) 。另外，变量引用可以用花括号将变量名括起来，以防与周围文本合并。
- en: 'Variables can be used in any directive that accepts them, as shown here:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以在任何接受它们的指令中使用，如下所示：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This directive sets the HTTP header host in a forwarded request to HTTP host
    name from the original request. This is equivalent to the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该指令将转发请求中的 HTTP 头部主机设置为原始请求中的 HTTP 主机名。其等价于以下内容：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With the following syntax, you can specify the host name:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下语法，你可以指定主机名：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding command will append a string `_squirrel` to the value of the original
    host name. Without curly brackets, the string `_squirrel` would have been interpreted
    as a part of the variable name, and the reference would have pointed to a variable
    "http_host_squirrel" rather than `http_host`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会将字符串`_squirrel`附加到原始主机名的值上。如果没有大括号，字符串`_squirrel`将被解释为变量名的一部分，引用将指向名为“http_host_squirrel”的变量，而不是`http_host`。
- en: 'There are also special variable names:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些特殊的变量名：
- en: 'Variables from `$1` to `$9` refer to the capture arguments in the regular expressions,
    as shown here:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`$1`到`$9`的变量指的是正则表达式中的捕获参数，如下所示：
- en: '[PRE15]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding configuration will set the HTTP header `X-Script-Name` in the
    forwarded request to the name of the PHP script in the request URI. The captures
    are specified in a regular expression using round brackets.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的配置将会把转发请求中的HTTP头`X-Script-Name`设置为请求URI中的PHP脚本名称。捕获项通过正则表达式中的圆括号指定。
- en: 'Variables that start with `$arg_` refer to the corresponding query argument
    in the original HTTP request, as shown here:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$arg_`开头的变量指的是原始HTTP请求中对应的查询参数，如下所示：
- en: '[PRE16]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding configuration will set the HTTP header `X-Version-Name` in the
    forwarded request to the value of the `ver` query argument in the original request.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的配置会将转发请求中的HTTP头`X-Version-Name`设置为原始请求中`ver`查询参数的值。
- en: Variables that start with `$http_` refer to the corresponding HTTP header line
    in the original request.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$http_`开头的变量指的是原始请求中的相应HTTP头行。
- en: Variables that start with `$sent_http_` refer to the corresponding HTTP header
    line in the outbound HTTP request.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$sent_http_`开头的变量指的是出站HTTP请求中的相应HTTP头行。
- en: Variables that start with `$upstream_http_` refer to the corresponding HTTP
    header line in the response received from an upstream.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$upstream_http_`开头的变量指的是从上游收到的响应中的相应HTTP头行。
- en: Variables that start with `$cookie_ refer` to the corresponding cookie in the
    original request.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$cookie_`开头的变量指的是原始请求中的相应cookie。
- en: Variables that start with `$upstream_cookie_` refer to the corresponding cookie
    in the response received from an upstream.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以`$upstream_cookie_`开头的变量指的是从上游收到的响应中的相应cookie。
- en: Variables must be declared by Nginx modules before they can be used in the configuration.
    Built-in Nginx modules provide a set of core variables that allow you to operate
    with the data from HTTP requests and responses. Refer to the Nginx documentation
    for the complete list of core variables and their functions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 变量必须在Nginx模块中声明，才能在配置中使用。内置的Nginx模块提供了一组核心变量，允许你操作来自HTTP请求和响应的数据。完整的核心变量列表及其功能可以参考Nginx文档。
- en: Third-party modules can provide extra variables. These variables have to be
    described in the third-party module's documentation.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方模块可以提供额外的变量。这些变量必须在第三方模块的文档中描述。
- en: Inclusions
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含项
- en: 'Any Nginx configuration section can contain inclusions of other files via the
    `include` directive. This directive takes a single argument containing a path
    to a file to be included, as shown here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Nginx配置部分都可以通过`include`指令包含其他文件。该指令接受一个单一的参数，包含要包含的文件路径，如下所示：
- en: '[PRE17]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once specified, the `include` directive instructs Nginx to process the contents
    of the file or files specified by the argument of this directive as if they were
    specified in place of the `include` directive.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦指定，`include`指令会指示Nginx处理由该指令参数指定的文件或文件的内容，就像它们直接在`include`指令的位置一样。
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Relative paths are resolved with respect to the path of the configuration file
    the directive is specified in. This is good to keep in mind when the `include`
    directive is specified in another included file, such as when a virtual host configuration
    file contains a relative `include` directive.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 相对路径的解析是相对于包含该指令的配置文件的路径进行的。记住这一点很重要，尤其是当`include`指令出现在另一个被包含的文件中时，比如当虚拟主机配置文件包含一个相对路径的`include`指令时。
- en: 'The `include` directive can also contain a globbed path with wild cards, either
    relative or absolute. In this case, the globbed path is expanded and all files
    matching the specified pattern are included in no particular order. Take a look
    at the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`include`指令也可以包含带有通配符的通配路径，路径可以是相对路径或绝对路径。在这种情况下，通配路径会被展开，所有与指定模式匹配的文件会被包含，顺序不固定。看看以下代码：'
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `include` directive with wild cards is an obvious solution for including
    site configurations, as their number can vary greatly. Using the `include` directive,
    you can properly structure the configuration file or reuse certain parts multiple
    times.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有通配符的 `include` 指令是包括站点配置的显而易见的解决方案，因为其数量可能会有很大差异。通过使用 `include` 指令，您可以合理地组织配置文件，或多次复用某些部分。
- en: Sections
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分
- en: A section is a directive that encloses other directives in its block. Each section's
    delimiters must be located in the same file, while the content of a section can
    span multiple files via the `include` directive.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 部分是一个指令，它将其他指令封装在其块中。每个部分的定界符必须位于同一个文件中，而一个部分的内容可以通过 `include` 指令跨多个文件进行。
- en: It is not possible to describe every possible configuration directive in this
    chapter. Refer to the Nginx documentation for more information. However, I will
    quickly go over the Nginx configuration section types so that you can orient in
    the structure of the Nginx configuration files.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本章无法描述所有可能的配置指令。有关更多信息，请参考 Nginx 文档。不过，我将快速浏览 Nginx 配置部分类型，以帮助您在 Nginx 配置文件的结构中定位。
- en: The http section
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: http 部分
- en: The `http` section enables and configures the HTTP service in Nginx. It has
    the server and upstream declarations. As far as individual directives are concerned,
    the `http` section usually contains those that specify defaults for the entire
    HTTP service.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`http` 部分在 Nginx 中启用并配置 HTTP 服务。它包含服务器和上游声明。就单个指令而言，`http` 部分通常包含为整个 HTTP 服务指定默认值的指令。'
- en: 'The `http` section must contain at least one `server` section in order to process
    HTTP requests. Here is a typical layout of the `http` section:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`http` 部分必须至少包含一个 `server` 部分，以便处理 HTTP 请求。以下是 `http` 部分的典型布局：'
- en: '[PRE19]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here and in other examples of this book, we use `[…]` to refer to omitted irrelevant
    parts of the configuration.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的此处和其他示例中，我们使用 `[…]` 来表示省略的无关配置部分。
- en: The server section
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: server 部分
- en: The `server` section configures an HTTP or HTTPS virtual host and specifies
    listening addresses for them using the `listen` directive. At the end of the configuration
    stage, all listening addresses are grouped together and all listening addresses
    are activated at startup.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`server` 部分配置一个 HTTP 或 HTTPS 虚拟主机，并通过 `listen` 指令指定其监听地址。在配置阶段结束时，所有监听地址会被集中在一起，并且所有监听地址在启动时都会被激活。'
- en: The `server` section contains the `location` sections, as well as sections that
    can be enclosed by the `location` section (see description of other sections types
    for details). Directives that are specified in the `server` section itself go
    into the so-called default location. In that regard, the `server` section serves
    the purpose of the `location` section itself.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`server` 部分包含 `location` 部分，以及可以被 `location` 部分封装的部分（有关其他部分类型的详细信息，请参见描述）。在
    `server` 部分中指定的指令会进入所谓的默认位置。就此而言，`server` 部分本身就是 `location` 部分的目的所在。'
- en: When a request comes in via one of the listening addresses, it is routed to
    the `server` sections that match a virtual host pattern specified by the `server_name`
    directive. The request is then routed further to the location that matches the
    path of the request URI or processed by the default location if there is no match.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求通过某个监听地址到达时，它会被路由到与 `server_name` 指令指定的虚拟主机模式匹配的 `server` 部分。然后，请求会进一步路由到与请求
    URI 的路径匹配的位置，或者如果没有匹配项，则由默认位置处理。
- en: The upstream section
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: upstream 部分
- en: The `upstream` section configures a logical server that Nginx can pass requests
    to for further processing. This logical server can be configured to be backed
    by one or more physical servers external to Nginx with concrete domain names or
    IP addresses.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`upstream` 部分配置一个逻辑服务器，Nginx 可以将请求传递给该服务器进行进一步处理。这个逻辑服务器可以配置为由一个或多个外部物理服务器提供支持，这些物理服务器拥有具体的域名或
    IP 地址。'
- en: Upstream can be referred to by name from any place in the configuration file
    where a reference to a physical server can take place. In this way, your configuration
    can be made independent of the underlying structure of the upstream, while the
    upstream structure can be changed without changing your configuration.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上游可以通过名称在配置文件中任何可以引用物理服务器的地方进行引用。通过这种方式，您的配置可以独立于上游的底层结构，而上游结构可以在不改变配置的情况下进行更改。
- en: The location section
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: location 部分
- en: The `location` section is one of the workhorses in Nginx. The `location` directive
    takes parameters that specify a pattern that is matched against the path of the
    request URI. When a request is routed to a location, Nginx activates configuration
    that is enclosed by that `location` section.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`location` 部分是 Nginx 中的核心部分之一。`location` 指令接受一些参数，这些参数指定与请求 URI 路径匹配的模式。当请求被路由到某个位置时，Nginx
    将激活该 `location` 部分所包含的配置。'
- en: 'There are three types of location patterns: simple, exact, and regular expression
    location patterns.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 位置模式有三种类型：简单、精确和正则表达式位置模式。
- en: Simple
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单
- en: 'A simple location has a string as the first argument. When this string matches
    the initial part of the request URI, the request is routed to that location. Here
    is an example of a simple location:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 简单位置的第一个参数是一个字符串。当这个字符串与请求 URI 的初始部分匹配时，请求将被路由到该位置。以下是一个简单位置的示例：
- en: '[PRE20]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Any request with a URI that starts with `/images`, such as `/images/powerlogo.png`,
    `/images/calendar.png`, or `/images/social/github-icon.png` will be routed to
    this location. A URI with a path that equals to `/images` will be routed to this
    location as well.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 任何以 `/images` 开头的 URI 请求，如`/images/powerlogo.png`、`/images/calendar.png` 或 `/images/social/github-icon.png`，都将被路由到此位置。路径等于
    `/images` 的 URI 请求也将被路由到此位置。
- en: Exact
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精确
- en: 'Exact locations are designated with an equals (`=`) character as the first
    argument and have a string as the second argument, just like simple locations
    do. Essentially, exact locations work just like simple locations, except that
    the path in the request URI has to match the second argument of the `location`
    directive exactly in order to be routed to that location:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 精确位置通过等号（`=`）字符作为第一个参数进行指定，第二个参数是一个字符串，类似于简单位置。实际上，精确位置与简单位置的工作方式相同，不同之处在于请求
    URI 中的路径必须完全匹配 `location` 指令的第二个参数，才能被路由到该位置：
- en: '[PRE21]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding configuration will return an empty GIF file if and only if the
    URI `/images/empty.gif` is requested.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置将在仅请求 `/images/empty.gif` URI 时返回一个空的 GIF 文件。
- en: Regular expression locations
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正则表达式位置
- en: 'Regular expression locations are designated with a tilde (`~`) character or
    `~*` (for case-insensitive matches) as the first argument and have a regular expression
    as the second argument. Regular expression locations are processed after both
    simple and exact locations. The path in the request URI has to match the regular
    expression in the second argument of the `location` directive in order to be routed
    to that location. A typical example is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式位置通过波浪号（`~`）字符或 `~*`（用于大小写不敏感匹配）作为第一个参数进行指定，第二个参数是正则表达式。正则表达式位置在简单位置和精确位置之后进行处理。请求
    URI 中的路径必须与 `location` 指令的第二个参数中的正则表达式匹配，才能被路由到该位置。一个典型的示例如下：
- en: '[PRE22]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: According to the preceding configuration, requests with URIs that end with `.php`
    will be routed to this location.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的配置，所有以`.php`结尾的 URI 请求将被路由到此位置。
- en: The `location` sections can be nested. For that, you just need to specify a
    `location` section inside another `location` section.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`location` 部分可以嵌套。为此，你只需在另一个 `location` 部分内指定一个 `location` 部分。'
- en: The if section
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if` 部分'
- en: The `if` section encloses a configuration that becomes active once a condition
    specified by the `if` directive is satisfied. The `if` section can be enclosed
    by the `server` and `location` sections, and is only available if the `rewrite`
    module is present.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 部分包含一个配置，一旦 `if` 指令指定的条件满足，就会激活该配置。`if` 部分可以被 `server` 和 `location` 部分包含，且只有在
    `rewrite` 模块存在的情况下才可用。'
- en: 'A condition of an `if` directive is specified in round brackets and can take
    the following forms:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 指令的条件用圆括号括起来，可以采用以下形式：'
- en: 'A plain variable, as shown here:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是一个普通的变量示例：
- en: '[PRE23]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If the variable evaluates to true value in runtime, the configuration section
    activates.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果变量在运行时评估为真值，则配置部分将激活。
- en: 'A unary expression that consists of an operator and a string with variables,
    as shown here:'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由运算符和带有变量的字符串组成的一元表达式，如下所示：
- en: '[PRE24]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following unary operators are supported:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持以下一元运算符：
- en: '| Operator | Description | Operator | Description |'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 运算符 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `-f` | True if specified file exists | `!-f` | True if specified file does
    not exist |'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `-f` | 如果指定的文件存在则为真 | `!-f` | 如果指定的文件不存在则为真 |'
- en: '| `-d` | True if specified directory exists | `!-d` | True if specified directory
    does not exist |'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `-d` | 如果指定的目录存在则为真 | `!-d` | 如果指定的目录不存在则为真 |'
- en: '| `-e` | True if specified file exists and is a symbolic link | `!-e` | True
    if specified file does not exist or is not a symbolic link |'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `-e` | 如果指定的文件存在并且是符号链接，则为真 | `!-e` | 如果指定的文件不存在或不是符号链接，则为真 |'
- en: '| `-x` | True if specified file exists and is executable | `!-x` | True if
    specified file does not exist or is not executable |'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `-x` | 如果指定的文件存在并且可执行，则为真 | `!-x` | 如果指定的文件不存在或不可执行，则为真 |'
- en: 'A binary expression that consists of a variable name, an operator, and a string
    with variables. The following binary operators are supported:'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由变量名、运算符和包含变量的字符串组成的二元表达式。以下二元运算符是支持的：
- en: '| Operator | Description | Operator | Description |'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 运算符 | 描述 | 运算符 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `=` | True if a variable matches a string | `!=` | True if a variable does
    not match a string |'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `=` | 如果变量匹配字符串，则为真 | `!=` | 如果变量不匹配字符串，则为真 |'
- en: '| `~` | True if a regular expression matches the value of a variable | `!~`
    | True if a regular expression does not match the value of a variable |'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `~` | 如果正则表达式与变量的值匹配，则为真 | `!~` | 如果正则表达式与变量的值不匹配，则为真 |'
- en: '| `~*` | True if a case-insensitive regular expression matches the value of
    a variable | `!~*` | True if a case-insensitive regular expression does not match
    the value of a variable |'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `~*` | 如果不区分大小写的正则表达式与变量的值匹配，则为真 | `!~*` | 如果不区分大小写的正则表达式与变量的值不匹配，则为真 |'
- en: Let's discuss some examples of the `if` directive.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来讨论一些`if`指令的示例。
- en: 'This one adds a prefix `/msie/` to the URL of any request that contains `MSIE`
    in the user-agent field:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例会给任何包含`MSIE`的用户代理字段的请求的URL添加前缀`/msie/`：
- en: '[PRE25]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next example sets the variable `$id` to the value of the cookie named `id`,
    if it is present:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例将变量`$id`的值设置为名为`id`的cookie的值（如果该cookie存在）：
- en: '[PRE26]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The next one returns HTTP status `405` ("Method Not Allowed") for every request
    with the method `POST`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例会对所有`POST`方法的请求返回HTTP状态`405`（“方法不允许”）：
- en: '[PRE27]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, the configuration in the following example limits the rate to 10 KB
    whenever the variable `$slow` evaluates to true:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下示例中的配置会在变量`$slow`为真时限制速率为10 KB：
- en: '[PRE28]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `if` directive seems like a powerful instrument, but it must be used with
    caution. This is because the configuration inside the `if` section is not imperative,
    that is, it does not alter the request processing flow according to the order
    of the `if` directives.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`指令看起来是一个强大的工具，但必须谨慎使用。这是因为`if`部分中的配置不是强制性的，也就是说，它不会根据`if`指令的顺序改变请求的处理流程。'
- en: Note
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Because of the nonintuitive behavior of the `if` directive, its use is discouraged.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`if`指令的非直观行为，不建议使用它。
- en: Conditions are not evaluated in the order they are specified in the configuration
    file. They are merely applied simultaneously and configuration settings from the
    sections for which conditions were satisfied are merged together and applied at
    once.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 条件并不是按照配置文件中指定的顺序进行评估的。它们只是同时应用，并且满足条件的部分的配置设置会合并在一起并同时应用。
- en: The limit_except section
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: limit_except部分
- en: 'The `limit_except` section activates the configuration that it encloses if
    the request method *does not match* any from the list of methods specified by
    this directive. Specifying the `GET` method in the list of methods automatically
    assumes the `HEAD` method. This section can only appear inside the `location`
    section, as shown here:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit_except`部分会在请求方法*不匹配*该指令指定的方法列表中的任何方法时激活其封装的配置。如果在方法列表中指定了`GET`方法，则自动假定为`HEAD`方法。该部分只能出现在`location`部分内，如下所示：'
- en: '[PRE29]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding configuration will respond with HTTP status `405` ("Method Not
    Allowed") for every request that is not made using the `GET` or `HEAD` method.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置会对每一个不是使用`GET`或`HEAD`方法的请求响应HTTP状态`405`（“方法不允许”）。
- en: Other section types
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他部分类型
- en: Nginx configuration can contain other section types, such as `main` and `server`
    in the `main` section, as well as section types provided by third-party modules.
    In this book, we will not pay close attention to them.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx配置可以包含其他部分类型，例如`main`部分中的`main`和`server`，以及第三方模块提供的部分类型。在本书中，我们将不会对这些内容进行详细讨论。
- en: Refer to the documentation of the corresponding modules for information about
    these types of configuration sections.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考相关模块的文档，了解有关这些类型的配置部分的信息。
- en: Configuration settings' inheritance rules
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置设置的继承规则
- en: Many Nginx configuration settings can be inherited from a section of outer level
    to a section of inner level. This saves a lot of time when you configure Nginx.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Nginx 配置设置可以从外层的某一部分继承到内层的某一部分。这在配置 Nginx 时可以节省大量时间。
- en: 'The following figure illustrates how inheritance rules work:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了继承规则的工作原理：
- en: '![Configuration settings'' inheritance rules](img/B04282_01_01.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![配置设置的继承规则](img/B04282_01_01.jpg)'
- en: 'All settings can be attributed to three categories:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 所有设置可以归为三类：
- en: Those that make sense only in the entire HTTP service (marked red)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于整个 HTTP 服务的设置（标记为红色）
- en: Those that make sense in the virtual host configuration (marked blue)
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于虚拟主机配置的设置（标记为蓝色）
- en: Those that make sense on all levels of configuration (marked green)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有配置层级中都适用的设置（标记为绿色）
- en: The settings from the first category do not have any inheritance rules, because
    they cannot inherit values from anywhere. They can be specified in the `http`
    section only and can be applied to the entire HTTP service. These are settings
    set by directives, such as `variables_hash_max_size`, `variables_hash_bucket_size`,
    `server_names_hash_max_size`, and `server_names_hash_bucket_size`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类设置没有任何继承规则，因为它们不能从任何地方继承值。它们只能在 `http` 部分中指定，并可以应用于整个 HTTP 服务。这些设置由指令设置，如
    `variables_hash_max_size`、`variables_hash_bucket_size`、`server_names_hash_max_size`
    和 `server_names_hash_bucket_size`。
- en: The settings from the second category can inherit values only from the `http`
    section. They can be specified both in the `http` and `server` sections, but the
    settings applied to a given virtual host are determined by inheritance rules.
    These are settings set by directives, such as `client_header_timeout`, `client_header_buffer_size`,
    and `large_client_header_buffers`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类设置只能从 `http` 部分继承值。它们可以在 `http` 和 `server` 部分中指定，但应用于给定虚拟主机的设置由继承规则决定。这些设置由指令设置，如
    `client_header_timeout`、`client_header_buffer_size` 和 `large_client_header_buffers`。
- en: Finally, the settings from the third category can inherit values from any section
    up to `http`. They can be specified in any section inside the HTTP service configuration,
    and the settings applied to a given context are determined by inheritance rules.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第三类设置可以从任何到 `http` 的部分继承值。它们可以在 HTTP 服务配置中的任何部分指定，并且应用于给定上下文的设置由继承规则决定。
- en: 'The arrows on the figure illustrate value propagation paths. The colors of
    the arrows specify the scope of the setting. The propagation rules along a path
    are as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图中的箭头表示值传播路径。箭头的颜色表示设置的作用范围。沿路径的传播规则如下：
- en: 'When you specify a value for a parameter at a certain level of the configuration,
    it overrides the value of the same parameter at the outer levels if it is set,
    and automatically propagates to the inner levels of the configuration. Let''s
    take a look at the following example:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在某一层级的配置中指定某个参数的值时，如果外层已经设置了相同的参数值，该值会被覆盖，并自动传播到内层配置中。我们来看一下以下示例：
- en: '[PRE30]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The value of the `root` directive will propagate to the inner sections, so there
    is no need to specify it again. The value of the `gzip` directive in the outer
    section will propagate to the inner sections, but will be overridden by the value
    of the `gzip` directive inside the first inner section. The overall effect of
    that will be that `gzip` compression will be enabled everywhere in the other section,
    except for the first inner section.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`root` 指令的值会传播到内层部分，因此不需要再次指定。外层部分的 `gzip` 指令值会传播到内层部分，但会被第一内层部分中的 `gzip` 指令值覆盖。最终效果是，在其他部分启用
    `gzip` 压缩，但第一内层部分除外。'
- en: When a value for some parameter is not specified in a given configuration section,
    it is inherited from a section that encloses the current configuration section.
    If the enclosing section does not have this parameter set, the search goes to
    the outer level and so on. If a value for a certain parameter is not specified
    at all, a built-in default value is used.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当某个参数在给定的配置部分未指定值时，它会从包含当前配置部分的外层部分继承。如果外层部分没有设置该参数，搜索会继续向外层查找，依此类推。如果某个参数完全未指定值，则使用内置的默认值。
- en: The First sample configuration
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一类示例配置
- en: 'By this point in the chapter, you might have accumulated a lot of knowledge
    without having an idea of what a complete working configuration looks like. We
    will study a short but functioning configuration that will give you an idea of
    what a complete configuration file might look like:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经积累了很多知识，但并不清楚完整的工作配置是怎样的。我们将研究一个简短但可运行的配置，它将帮助您了解完整的配置文件应该是什么样子的：
- en: '[PRE31]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This configuration first instructs Nginx to write the error log to `logs/error.log`.
    Then, it sets up Nginx to use the epoll event processing method (`use epoll`)
    and allocates memory for 1024 connections per worker (`worker_connections 1024`).
    After that, it enables the HTTP service and configures certain default settings
    for the HTTP service (`include mime.types`, `default_type application/octet-stream`).
    It creates a virtual host and sets its names to `example.org` and `www.example.org`
    (`server_name example.org www.example.org`). The virtual host is made available
    at the default listening address `0.0.0.0` and port 80 (`listen 80`).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置首先指示 Nginx 将错误日志写入 `logs/error.log`。接着，配置 Nginx 使用 epoll 事件处理方法（`use epoll`），并为每个工作进程分配
    1024 个连接内存（`worker_connections 1024`）。之后，启用 HTTP 服务并配置一些默认设置（`include mime.types`，`default_type
    application/octet-stream`）。它创建了一个虚拟主机，并将其名称设置为 `example.org` 和 `www.example.org`（`server_name
    example.org www.example.org`）。该虚拟主机通过默认监听地址 `0.0.0.0` 和端口 80（`listen 80`）提供服务。
- en: We then configure two locations. The first location passes every request routed
    to it into a web application server running at `http://localhost:8080` (`proxy_pass
    http://localhost:8080`). The second location is a regular expression location.
    By specifying it we effectively exclude a set of paths from the first location.
    We use this location to return static data such as images, JavaScript files, and
    CSS files. We set the base directory for our media files as `html` (`root html`).
    For all media files, we set the expiration date as 30 days (`expires 30d`).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们配置了两个位置。第一个位置将每个请求转发到运行在 `http://localhost:8080` 的 Web 应用服务器（`proxy_pass
    http://localhost:8080`）。第二个位置是一个正则表达式位置。通过指定它，我们有效地将一组路径从第一个位置中排除。我们使用此位置返回静态数据，如图像、JavaScript
    文件和 CSS 文件。我们将媒体文件的基础目录设置为 `html`（`root html`）。对于所有媒体文件，我们将过期时间设置为 30 天（`expires
    30d`）。
- en: To try out this configuration, back up your default configuration file and replace
    the content of the default configuration file with the preceding configuration.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试此配置，首先备份您的默认配置文件，然后将默认配置文件的内容替换为前面的配置。
- en: Then, restart Nginx for the settings to take effect. After this is done, you
    can navigate to the URL `http://localhost/` to check out your new configuration.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新启动 Nginx 以使设置生效。完成此操作后，您可以访问 `http://localhost/` 来检查您的新配置。
- en: Configuration best practices
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置最佳实践
- en: 'Now that you know more about the elements and structure of the Nginx configuration
    file, you might be curious about what best practices exist in this area. Here
    is a list of recommendations that will help you to maintain your configuration
    more efficiently and make it more robust and manageable:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 Nginx 配置文件的元素和结构，您可能对该领域的最佳实践感到好奇。以下是一些推荐的实践，能够帮助您更高效地维护配置文件，并使其更加稳健和易于管理：
- en: Structure your configuration well. Observe which common parts of the configuration
    are used more often, move them to separate files, and reuse them using the `include`
    directive. In addition to that, try to make each file in your configuration file
    hierarchy of a reasonable length, ideally no more than two screens. This will
    help you to read your files quicker and navigate over them efficiently.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合理组织您的配置。观察配置中哪些常见部分使用频率较高，将它们移动到单独的文件中，并使用 `include` 指令进行复用。此外，尽量确保配置文件层级中的每个文件长度适中，理想情况下不超过两个屏幕。这样可以帮助您更快速地阅读文件并高效地浏览。
- en: Note
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to know exactly how your configuration works to successfully
    manage it. If the configuration doesn't work the way you expect, you might run
    into issues due to wrong settings being applied, for example, unavailability of
    arbitrary URIs, unexpected outages, and security loopholes.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确切了解您的配置如何工作对于成功管理配置至关重要。如果配置未按预期工作，您可能会遇到问题，例如设置错误导致的 URI 不可用、意外中断或安全漏洞。
- en: Minimize use of the `if` directive. The `if` directive has a nonintuitive behavior.
    Try to avoid using it whenever possible to make sure configuration settings are
    applied to the incoming requests as you expect.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化使用`if`指令。`if`指令有一个不直观的行为。尽量避免使用它，以确保配置设置按预期应用于传入的请求。
- en: Use good defaults. Experiment with inheritance rules and try to come up with
    defaults for your settings so that they result in the least number of directives
    to be configured. This includes moving common settings from location to the server
    level and further to the HTTP level.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用良好的默认设置。实验继承规则，并尝试为你的设置设定默认值，以便能够配置最少数量的指令。这包括将常见的设置从位置级别移到服务器级别，再进一步移到HTTP级别。
- en: Summary
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to install Nginx from a number of available
    sources, the structure of Nginx installation and the purpose of various files,
    the elements and structure of the Nginx configuration file, and how to create
    a minimal working Nginx configuration file. You also learned about some best practices
    for Nginx configuration.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何从多个可用来源安装Nginx，Nginx安装的结构以及各个文件的目的，Nginx配置文件的元素和结构，以及如何创建一个最简化的工作Nginx配置文件。你还了解了Nginx配置的一些最佳实践。
- en: In the next chapter, you will learn how to put Nginx into operation and how
    to manage it in action.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何启动Nginx并在实际操作中管理它。
