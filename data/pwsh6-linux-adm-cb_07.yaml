- en: Flow Control using Branches and Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分支和循环的流程控制
- en: 'In this chapter, we cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖以下主题：
- en: Using If–ElseIf–Else conditions to control script flow
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 If–ElseIf–Else 条件来控制脚本流程
- en: Using Switch–Case conditions to control script flow
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Switch–Case 条件来控制脚本流程
- en: Learning to use delays
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 学习使用延迟
- en: Writing a basic looping construct
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写基本的循环结构
- en: Writing a more complex loop on a predefined array
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在预定义数组上编写更复杂的循环
- en: Using the For loop construct
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 For 循环结构
- en: Using the While loop construct
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 While 循环结构
- en: Cleaning empty directories using the Do–While construct
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Do–While 结构清理空目录
- en: Cleaning empty directories using the Do–Until construct
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Do–Until 结构清理空目录
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Just like Working with Strings, this Flow Control is also a favourite part of
    PowerShell to me.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像处理字符串一样，这种流程控制对我来说也是 PowerShell 中喜欢的部分。
- en: Most Linux administrators and Bash scripters would already be familiar with
    the concepts such as the loops and branches, that cover these recipes. The only
    main difference we would see is that we would deal with objects, and a more readable,
    streamlined process of scripting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 管理员和 Bash 脚本编写者可能已经熟悉循环和分支的概念，涵盖了这些技术。我们唯一会看到的主要区别是我们将处理对象，并且脚本编写的过程更加可读、流畅。
- en: Using If–ElseIf–Else conditions to control script flow
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 If–ElseIf–Else 条件来控制脚本流程
- en: We have seen how the operators work. Try out more of the operators until it
    sort of becomes a second nature to you. Most of the flow control as well as filtration
    in scripts happen using these operators.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了操作符如何工作。尝试更多的操作符，直到它几乎成为您的第二天性。大多数脚本中的流程控制和过滤都是使用这些操作符进行的。
- en: 'In this recipe we are going to look at conditional script flow, also known
    as *branching*. In essence, branching works on two conditions (correct: `$true`
    and `$false`). And this is generally achieved using two constructs:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技巧中，我们将看看条件脚本流程，也称为*分支*。基本上，分支根据两个条件（正确：`$true` 和 `$false`）工作。通常使用两种结构来实现：
- en: The If–ElseIf–Else construct
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: If–ElseIf–Else 结构
- en: The Switch–Case construct
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Switch–Case 结构
- en: 'In this recipe, we will give ourselves a simple problem to solve: find if today
    is a weekend.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技巧中，我们将给自己提出一个简单的问题来解决：找出今天是否是周末。
- en: Getting Ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'These recipes require you to try them, in order to understand how they work.
    And these work better on an Integrated Scripting Environment (preferably, Visual
    Studio Code) than at the prompt. To run the scripts in VS Code, use the F5 key. Also,
    these recipes should work identically on Windows PowerShell 3.0+ as well: the
    syntaxes for these constructs are exactly the same in PowerShell and Windows PowerShell.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术要求您尝试以理解它们的工作原理。这些在集成脚本环境（最好是 Visual Studio Code）中比在提示符中更有效。要在 VS Code 中运行脚本，请使用
    F5 键。此外，这些技术在 Windows PowerShell 3.0+ 中也应该完全相同：这些结构的语法在 PowerShell 和 Windows PowerShell
    中完全相同。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Open a new PowerShell file in Visual Studio Code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中打开一个新的 PowerShell 文件。
- en: Enter the following in the code pane to simply find if it is a weekend.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗格中输入以下内容，以简单查找是否为周末。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you would like to get an output on weekdays as well:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想在工作日也获得输出：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you would like to jazz it up a little, and use the whole of `if`–`elseif`–`else`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想稍微添点料，并使用整个 `if`–`elseif`–`else`：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In general, `Write-Output` is a better cmdlet to use than `Write-Host`. `Write-Host`
    writes the output *only* to the host; this output cannot be sent to anything else
    without manipulation. Use `Write-Host` only on occasions that need it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`Write-Output` 是一个比 `Write-Host` 更好的 cmdlet 使用。`Write-Host` 只将输出写入主机；这个输出不能在不进行操作的情况下发送给其他地方。仅在需要时使用
    `Write-Host`。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: Simple branching could work with just the If statement. The statement checks
    for truth, and executes the code block based on the outcome of the condition.
    In case of either–or, where there are only two conditions, use If–Else. When there
    are more than two possible outcomes, use If–ElseIf–Else. The `else` block is the
    catch-all.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的分支可以仅使用 If 语句。该语句检查真值，并根据条件结果执行代码块。在只有两个条件的情况下，使用 If–Else。当存在超过两种可能结果时，请使用
    If–ElseIf–Else。`else` 块是捕捉所有的部分。
- en: Using Switch–Case conditions to control script flow
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Switch–Case 条件来控制脚本流程
- en: If–ElseIf–Else work when you have outcomes coming in categories (weekdays being
    five days, weekends being two). When the outcomes are specific and/or too many
    in number, it could be a little tedious to use the  If–ElseIf–Else construct.
    To understand this better, let us give ourselves a scenario.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: If–ElseIf–Else适用于当你有按类别划分的结果时（例如工作日是五天，周末是两天）。当结果是具体的和/或数量过多时，使用If–ElseIf–Else结构可能会有些繁琐。为了更好地理解这一点，让我们假设一个场景。
- en: The dress code at your workplace is decided by a child, who likes everyone wearing
    the colours of the rainbow. Since she doesn't like anyone working weekends, is
    not a big fan of orange, and absolutely hates yellow, she has come up with the
    following scheme (she does not yet know of "Monday Blues"): Red on Mondays, Violet
    on Tuesdays, Indigo on Wednesdays, Blue on Thursdays, Green on Fridays and Orange
    during the weekends.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你工作场所的着装规范由一个小孩决定，她喜欢每个人穿上彩虹的颜色。由于她不喜欢任何人在周末工作，不太喜欢橙色，而且非常讨厌黄色，她想出了以下方案（她还不知道“星期一忧郁症”）：星期一穿红色，星期二穿紫色，星期三穿靛蓝色，星期四穿蓝色，星期五穿绿色，周末穿橙色。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: This situation would require a whole round of If–ElseIf–Else statements to program.
    A more efficient way of handling the situation is to use the Switch–Case construct.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况需要通过一整套If–ElseIf–Else语句来编程。处理这种情况的更高效方法是使用Switch–Case结构。
- en: 'Open a new PowerShell file and add the following content to it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的PowerShell文件并添加以下内容：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you would rather omit `Default` and use a wildcard matching for the weekends:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你更愿意省略`Default`并使用通配符来匹配周末：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Like we can see, it is more efficient to write, execute as well as troubleshoot
    a Switch–Case construct in such situations, rather than writing a series of if–elseif–elseif–elseif–...–else
    statements. To define a catch-all action in Switch–Case, use `Default`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在这种情况下，编写、执行以及排查Switch–Case结构的故障比编写一系列if–elseif–elseif–elseif–...–else语句更高效。要在Switch–Case中定义一个通用操作，请使用`Default`。
- en: The Switch–Case construct also supports wildcard (`-Wildcard`) and regex (`-Regex`).
    In general, it is not a good practice to omit `Default` unless *all* the possible
    outcomes have been covered.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Switch–Case结构也支持通配符（`-Wildcard`）和正则表达式（`-Regex`）。通常来说，除非*所有*可能的结果都已涵盖，否则省略`Default`不是一个好习惯。
- en: 'The working of Switch–Case is simple: it checks the condition against *all
    the values* among the definitions, and whenever it finds a condition to be true,
    it executes the corresponding script block. Therefore if three conditions among
    five are met, the three script blocks will be executed. This is a little unlike
    If–ElseIf–Else, which exits out of the branching construct the moment the first
    `$true` is met and the script block is executed. Therefore, if you want only one
    outcome from the construct, consider adding the `break` keyword in every script
    block to break out of the construct the moment a `$true` is encountered. For example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Switch–Case的工作原理很简单：它将条件与定义中的*所有值*进行比较，每当它找到一个条件为真时，就执行相应的脚本块。因此，如果五个条件中有三个条件满足，则这三个脚本块会被执行。这与If–ElseIf–Else稍有不同，后者在遇到第一个`$true`时就会退出分支结构并执行脚本块。因此，如果你只希望构造出一个结果，请考虑在每个脚本块中添加`break`关键字，以便在遇到`$true`时立即退出结构。例如：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Of course, in this particular situation, it is not necessary, since the outcome
    would be exclusive.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在这种特定情况下，没有必要这样做，因为结果是独占的。
- en: Learning to use delays
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学会使用延迟
- en: PowerShell usually runs one statement after another; the current statement must
    return the buffer (so to speak) for the next step to begin execution. However,
    in some cases, you still require a wait; situations where the buffer could be
    returned before the desired outcome is achieved.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell通常会一个接一个地运行语句；当前语句必须返回缓冲区（可以这么说），下一个步骤才能开始执行。然而，在某些情况下，你仍然需要等待；也就是说，缓冲区可能会在期望的结果达成之前就已经返回。
- en: While setting up something like this may require some manipulation, to keep
    it simple, let us just assume that we need five seconds to register what day it
    is (sure, disbelief works), before being instructed what to wear.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设置这种情况可能需要一些操作，但为了简化起见，我们可以假设我们需要五秒钟来注册今天是星期几（当然，不相信的话可以这么想），然后才会被告知穿什么衣服。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Let us combine the two scripts from the previous recipe, *Using conditions to
    control script flow*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将之前食谱中的两个脚本结合起来，*使用条件来控制脚本流程*。
- en: 'Open a new file and type the following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新文件并键入以下内容：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/9586edab-e1bb-444a-a119-28584db1a57b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9586edab-e1bb-444a-a119-28584db1a57b.png)'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The reason this is a separate recipe is that it is part of flow control, and
    is useful in some specific situations. The `Start-Sleep` cmdlet accepts `Seconds`
    or `Milliseconds` as input, and waits for that amount of time before processing
    the next instruction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以这是一个单独的示例，是因为它属于流控制的一部分，并且在某些特定情况下非常有用。`Start-Sleep` cmdlet 接受 `Seconds`
    或 `Milliseconds` 作为输入，并在处理下一个指令之前等待指定的时间。
- en: Writing a basic looping construct
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个基本的循环结构
- en: 'Automation is perhaps only half-complete without loops. After all, the point
    of automation in most situations is making the computer do what is repetitive.
    There are six looping constructs in PowerShell in all:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有循环，自动化可能只有一半完成。毕竟，在大多数情况下，自动化的意义在于让计算机做那些重复的工作。PowerShell 中一共有六种循环结构：
- en: Looping using `Foreach-Object`
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Foreach-Object` 循环
- en: The Foreach loop
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Foreach 循环
- en: The For loop
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: For 循环
- en: The While loop
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: While 循环
- en: The Do–While loop
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Do–While 循环
- en: The Do-Until loop
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Do-Until 循环
- en: The `Foreach-Object` looping construct is perhaps the simplest of them all.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`Foreach-Object` 循环结构可能是最简单的一种。'
- en: Let us imagine that we have a list of five guests to a certain event, and you
    would like to greet them each individually.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有五位宾客参加某个活动，并且你想分别向他们打招呼。
- en: How to do it
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: Let us assume that the guests are Mr Jain, Mr Jacobs, Ms Sanders, Mr Shah and
    Mr Hugo.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设宾客分别是 Mr Jain、Mr Jacobs、Ms Sanders、Mr Shah 和 Mr Hugo。
- en: Open a new file in Visual Studio Code and, in the script pane, type the following.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中打开一个新文件，在脚本窗格中输入以下内容。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the script, and at the prompt, type in the names of the guests:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本，在提示符下输入宾客的姓名：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You first take in the input through a prompt from the host. The raw guest list
    is taken in. PowerShell then splits the input string based on the commas and a
    regular expression match (necessary so it would work whether the input contains
    a space after the comma or not: not all users are alike). We use the `-split`
    and cast operators for the operation.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过主机的提示符接收输入。原始的宾客名单被接收。PowerShell 然后根据逗号和正则表达式匹配分割输入字符串（这样可以保证无论输入后是否有空格，它都能工作：并不是所有用户都一样）。我们使用
    `-split` 和类型转换操作符来完成此操作。
- en: The loop part comes in at `Foreach-Object`. You pass the array object into the
    pipeline. The `Foreach-Object` cmdlet picks up the array, and processes one element
    at a time. When referring to the element within the loop, you use the `$PSItem`
    (a.k.a. `$_`) automatic variable, since the object has been passed through the
    pipeline.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 循环部分出现在 `Foreach-Object`。你将数组对象传入管道。`Foreach-Object` cmdlet 会处理数组，并一次处理一个元素。在循环中引用元素时，你使用
    `$PSItem`（即 `$_`）自动变量，因为对象已经通过管道传递。
- en: Writing a more complex loop on a predefined array
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在预定义数组上编写更复杂的循环
- en: In the last recipe, Writing a basic loop construct, we wrote a simple loop by
    passing content through the pipeline. Now, let us consider that we have these
    same guests, but specific seats have been allotted to them. We would like to show
    the seats to the guests. You have the following table in a CSV format.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，编写基本的循环结构时，我们通过管道传递内容编写了一个简单的循环。现在，假设我们有这些相同的宾客，但已经为他们分配了特定的座位。我们想要向宾客展示座位。你将得到以下
    CSV 格式的表格。
- en: '| **Name** | **Seat** |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **姓名** | **座位** |'
- en: '| Mr Jain | A-12 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| Mr Jain | A-12 |'
- en: '| Mr Jacobs | C-28 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| Mr Jacobs | C-28 |'
- en: '| Ms Sanders | B-17 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| Ms Sanders | B-17 |'
- en: '| Mr Shah | M-22 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| Mr Shah | M-22 |'
- en: '| Mr Hugo | E-08 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| Mr Hugo | E-08 |'
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The assumption here is that each row has forty seats, and the aisle goes through
    the centre of the hall.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的假设是每行有四十个座位，过道通过大厅的中心。
- en: If you have not cloned the repository, you could create your own CSV file. Either
    copy the comma-separated content from below, or create a CSV using PowerShell.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有克隆这个仓库，你可以自己创建一个 CSV 文件。你可以从下面复制以逗号分隔的内容，或者使用 PowerShell 创建一个 CSV。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open a new PowerShell file in Visual Studio Code and type the following script:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中打开一个新的 PowerShell 文件，并输入以下脚本：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the script.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。
- en: '![](img/05449802-4f16-462e-a2a1-6ddfb8a26793.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05449802-4f16-462e-a2a1-6ddfb8a26793.png)'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The main idea here is the use of `foreach`. When using the Foreach loop construct,
    you refer to each element with a variable; variables are not identified with an
    index in this case. For every iteration, in our case, `$Guest` picks one value
    from `$Guests`, in sequence, so that the current element can be referred using `$Guest`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要思想是使用 `foreach`。在使用 Foreach 循环结构时，你用一个变量引用每个元素；在这种情况下，变量不带有索引。对于我们的每次迭代，`$Guest`
    从 `$Guests` 中选择一个值，按顺序进行，以便可以使用 `$Guest` 引用当前元素。
- en: 'The seat numbers have a pattern: an alpha row identifier, followed by a hyphen,
    followed by the numeric seat identifier.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 座位号有一个模式：一个字母行标识符，后跟一个连字符，然后是数字座位标识符。
- en: The seat number is a string. We split it at `-`, pick the first element in the
    resultant array, convert it to uppercase (in case it already isn't), convert this
    letter to a character, and then, use the `[byte]` cast operator to find its ASCII
    identifier. And yes, we subtract 64 from it (so `A` becomes `1`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 座位号是一个字符串。我们在 `-` 处拆分它，选取结果数组中的第一个元素，将其转换为大写（如果它不是），将这个字母转换为字符，然后使用 `[byte]`
    强制转换运算符找到其 ASCII 标识符。是的，我们从中减去 64（所以 `A` 变成 `1`）。
- en: To be able to use the number with switch–case without errors, we convert the
    number back to a string. We make the number friendly for use in a sentence. We
    take the second (numeric) part of the array to see which side of the aisle the
    seat is located on. We combine all these to get the resultant greeting-and-guidance
    strings, which are displayed after a delay of one second each.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在 switch-case 中使用数字而不出错，我们将数字转换回字符串。我们使数字适合在句子中使用。我们取数组的第二部分（数字部分），以查看座位位于哪一侧的过道。我们将所有这些组合起来，得到最终的问候和指导字符串，这些字符串在每秒延迟后显示一次。
- en: Using the For loop construct
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 For 循环结构
- en: The Foreach loop and the For loop are different in that the latter uses an index
    to perform operations. We need a variable to control the flow, whose values form
    a range. Let us re-implement the same solution as that in *Writing a more complex
    loop on a predefined array*, but with a For loop construct instead.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Foreach 循环和 For 循环的不同之处在于后者使用索引执行操作。我们需要一个变量来控制流程，其值形成一个范围。让我们重新实现与*在预定义数组上编写更复杂的循环*相同的解决方案，但使用
    For 循环结构而不是 Foreach 循环。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The assumptions made are the same as that in *Writing a more complex loop on
    a predefined array*.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所做的假设与*在预定义数组上编写更复杂的循环*中的假设相同。
- en: Open a new file and paste the following content into it.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新文件，并将以下内容粘贴到其中。
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the script.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它的工作原理...
- en: Some of you might be pointing out that the `foreach` construct was simpler than
    the `for` construct in this case, and you would be right. In my stint as an administrator,
    I may have used the for construct less than ten times over the last three years,
    compared to hundreds of times I used `foreach`. The For construct has its own
    uses; use with a predefined array is of the less-efficient ones.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能会指出，在这种情况下，`foreach` 结构比 `for` 结构更简单，你们是对的。在我担任管理员期间，过去三年里我可能少于十次使用了
    `for` 结构，而使用了 `foreach` 数百次。For 结构有其自己的用途；在预定义数组中使用是效率较低的之一。
- en: Regardless, `for` works as long as the object is an array. `$CurrentGuest` is
    the index we use, which ranges from 0 through the total elements in `$Guests` –
    1\. The loop starts with the index being initialised at 0 in this case, and after
    every iteration of the script block, the index is incremented (`$CurrentGuest++`).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，`for` 在对象为数组时都可以工作。`$CurrentGuest` 是我们使用的索引，其范围从 0 到 `$Guests` 的总元素数减 1。在这种情况下，循环从索引为
    0 开始初始化，并且在脚本块的每次迭代后递增索引（`$CurrentGuest++`）。
- en: One operation where `for` would be more efficient than `foreach` is if every
    *alternate* guest had to be greeted (rude, I know). In that case, the third part
    of the definition of `for` would have been `$CurrentGuest += 2`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 比 `foreach` 更有效的一个操作是，如果每个*交替*访客都必须被问候（粗鲁，我知道）。在这种情况下，`for` 定义的第三部分将是
    `$CurrentGuest += 2`。'
- en: '`$CurrentGuest + 2` instead of `$CurrentGuest += 2` would make this loop infinite,
    since the value of `$CurrentGuest` would not be changed at all.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`$CurrentGuest + 2` 而不是 `$CurrentGuest += 2` 会使这个循环无限循环，因为 `$CurrentGuest`
    的值根本不会改变。'
- en: Using the While loop construct
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 While 循环结构
- en: 'We shall create two scripts in this recipe: the first one to establish the
    similarities between For and While, and another to lay the foundation to understanding
    the Do–While and Do–Until constructs. This way, the learning would be incremental,
    and understanding, easier.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将创建两个脚本：第一个用于建立For和While之间的相似性，另一个用于为理解Do–While和Do–Until结构打下基础。这样，学习将是渐进的，理解也会更加容易。
- en: For the first script, the scenario is the same as described in the last recipe,
    *Using the For loop construct*. For the second, the task is to take the year number
    as input and find the date for Mothers’ Day in that year.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一个脚本，场景与上一个教程中描述的*使用For循环结构*相同。对于第二个任务，目标是输入年份并找到该年份的母亲节日期。
- en: How to do it
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: First, continue with the assumptions you had for the previous recipe.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，继续使用你在上一个教程中的假设。
- en: Open a new file and paste the following content into it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新文件，将以下内容粘贴到其中。
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run the script; the output should be the same as that of the last recipe.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本；输出结果应该与上一个教程的结果相同。
- en: 'Now, create a new PowerShell file and add the following code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个新的PowerShell文件并添加以下代码：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the script. Enter any year and you should get the date for Mothers’ Day
    for that year.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。输入任何年份，你应该能得到该年份母亲节的日期。
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Every finite looping construct requires three things:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每个有限循环结构需要三样东西：
- en: The starting point
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 起始点
- en: The stopping point
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止点
- en: The way to proceed towards the stopping point
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前进到停止点的方式
- en: In case of the Foreach construct, the entire logic is pre-coded. It takes an
    entire array, finds the starting and stopping points, and moves towards the stopping
    point one step at a time. The For construct has these parameters declared in the
    loop declaration statements itself, each parameter separated by a semicolon.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Foreach`结构，整个逻辑是预先编写好的。它获取整个数组，找到起始点和停止点，并一步一步地向停止点移动。`For`结构则在循环声明语句中声明了这些参数，每个参数用分号分隔。
- en: The While loop is not very different. Its starting point is defined outside
    of the loop, the stopping point is the only condition passed, and the operation
    on the index is specified within the loop. These three parameters have been highlighted
    in the scripts. The initialisation should happen outside the loop so it is not
    modified during the course of the loop. The operation on the index should happen
    for every iteration so the loop moves in some direction. Therefore, this operation
    falls within the loop.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`While`循环没有太大不同。它的起始点定义在循环外部，停止点是传递的唯一条件，索引上的操作在循环内部指定。这三个参数在脚本中已经突出了。初始化应该在循环外发生，这样它在循环过程中就不会被修改。对索引的操作应该在每次迭代时发生，这样循环才会朝某个方向移动。因此，这个操作应当在循环内部。'
- en: Be a little careful with the while loop; you are more prone to getting an infinite
    loop, because it is easy to forget to add the starting point or the operation
    to move towards the stopping point.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对`while`循环要稍加小心；你更容易遇到无限循环，因为很容易忘记添加起始点或向停止点移动的操作。
- en: Now to Mothers’ Day. We first get the date object for the 1^(st) of May for
    that year, so we can manipulate it using its members. This date is the starting
    point. We then specify the condition, 'keep the loop going if the day is not a
    Sunday.' Then, we add one day, every iteration. After every iteration, the variable
    is checked against the condition. Finally, when the first Sunday is encountered,
    the variable comes out of the loop. We then add a week to it to find the second
    Sunday, and output the long date version of the value of `$MothersDay`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，来看看母亲节。我们首先获取该年份5月1日的日期对象，这样就可以通过它的成员进行操作。这个日期就是起始点。然后，我们指定条件，“如果不是星期天，继续循环。”每次迭代时，我们加一天。每次迭代后，变量会与条件进行比较。最终，当第一个星期天到达时，变量将跳出循环。然后我们再加上一周，找到第二个星期天，并输出`$MothersDay`的长日期格式。
- en: Cleaning empty directories using the Do–While construct
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Do–While结构清理空目录
- en: In the last recipe, we found the second Sunday of May using the year as input.
    We used a While loop for that. The While loop checks the condition before even
    starting the iteration. If the condition returns $false at the very beginning,
    the loop would not even begin; for instance, if you input the year as `2016`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们通过输入年份找到了五月的第二个星期天。我们使用了`While`循环。`While`循环在开始迭代前会检查条件。如果条件在一开始就返回`false`，循环就不会开始；例如，如果输入的年份是`2016`。
- en: Do–While is a little different; the loop is executed once whether the condition
    is true or not. The condition is checked only *after* the first iteration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Do–While 有些不同；无论条件是否为真，循环都会执行一次。条件检查仅在第一次迭代 *之后* 进行。
- en: The scenario for this recipe is that we want to delete all empty directories
    within a certain directory.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的场景是我们想要删除某个目录下的所有空目录。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to work with this recipe, let us create a few empty directories within
    `$HOME/random`. Use the input file that is part of the git repository of this
    book to get the directories created.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与这个配方一起使用，让我们在 `$HOME/random` 中创建一些空目录。使用本书的 Git 仓库中的输入文件来创建这些目录。
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: If you run the following recipe within the `random` lab directory, all its empty
    subdirectories will be deleted.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 `random` 实验目录中运行以下配方，所有其空的子目录将被删除。
- en: Open a new file and paste the following content into it.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新文件，并将以下内容粘贴到其中。
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let us add some logging to it so we know what is happening.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一些日志记录，这样我们就能知道发生了什么。
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/c622064b-ee5e-4f8c-8898-3b6fcb535608.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c622064b-ee5e-4f8c-8898-3b6fcb535608.png)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The execution is similar to the While construct, however, as shown by `Iteration
    0`, the Do–While construct executes the script block once without checking the
    condition. In our case, we queried the empty directories within the loop. If we
    had placed this query outside of the loop, we would have had to place it within
    as well, for loop control. That is inefficient programming.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 执行方式类似于 While 构造，然而，正如 `Iteration 0` 所示，Do–While 构造会在不检查条件的情况下先执行一次脚本块。在我们的例子中，我们在循环内查询了空目录。如果我们将查询放在循环外面，我们也必须将其放入循环中进行控制，这样的做法效率较低。
- en: PowerShell found nine empty directories during the execution of the script block.
    When the condition check happened after the execution, `9` was evaluated to be
    greater than `0`. The loop ran again. This time, the value of `$EmptyDirectories.Count`
    was evaluated to be `4`. The loop ran again, and this time again, the value was
    `4`, greater than `0`; the condition was still `$true`. During the next run, `$EmptyDirectories.Count`
    was evaluated to be `2`, then `1`, and then, during the last run, `0`. At this
    time, the outcome of the condition became `$false`, and the loop exited. Essentially,
    the loop statement was, 'Go on *while* the count is *more than* zero.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 在执行脚本块时找到了九个空目录。当条件检查在执行后发生时，`9` 被评估为大于 `0`。于是循环再次执行。这一次，`$EmptyDirectories.Count`
    的值被评估为 `4`。循环再次执行，这一次仍然是 `4`，大于 `0`；条件仍然是 `$true`。在下一次运行时，`$EmptyDirectories.Count`
    被评估为 `2`，然后是 `1`，最后在最后一次运行时为 `0`。此时，条件的结果变为 `$false`，循环退出。本质上，循环语句是，“当计数大于零时，继续
    *执行*。”
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe 5.7: Taking actions on the returned objects'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配方 5.7：对返回的对象采取行动
- en: Cleaning empty directories using the Do–Until construct
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Do–Until 构造清理空目录
- en: 'It is easy to confuse between Do–While and Do–Until, since they both share
    a lot of similarities. However, the difference between them is in fact, pretty
    clear. The Do–While loop executes as long as the outcome of the condition check
    is `$true`, and exits the moment it becomes `$false`. Do–Until is the opposite:
    the loop continues as long as the condition check returns $false, and stops the
    moment it the condition check returns `$true`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易混淆 Do–While 和 Do–Until，因为它们有很多相似之处。然而，它们之间的区别实际上是相当明确的。Do–While 循环只要条件检查的结果是
    `$true` 就会执行，条件一旦变为 `$false` 就会退出。而 Do–Until 则正好相反：循环会持续执行，直到条件检查返回 `$true`，才会停止。
- en: Let us use the same scenario of cleaning up empty folders, but this time, use
    the Do–Until loop.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的清理空文件夹的场景，但这次使用 Do–Until 循环。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: You would need to rerun the command to create those empty directories.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要重新运行命令来创建那些空目录。
- en: Open a new file and paste the following content into it.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新文件，并将以下内容粘贴到其中。
- en: '[PRE17]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice the change in the behaviour this time and compare it with the run of
    Do–While.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意这次行为的变化，并与 Do–While 的运行进行比较。
- en: '![](img/368f892a-96c9-4179-b2aa-56ae1c662904.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/368f892a-96c9-4179-b2aa-56ae1c662904.png)'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: This time, it was made evident in the interactive output how it works. The first
    run happened without checking for the condition. At the end of the run, the condition
    was checked for. `9` is greater than `0`, and not equal. The outcome was `$false`,
    so the loop continued. It went on this way until the count came down to `0` (making
    the outcome of the condition `$true`), at which point, the loop exited. Essentially,
    the loop statement was, 'Go on *until* the count *becomes* zero.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，在交互式输出中，它的工作方式变得非常清楚。第一次运行时没有检查条件。在运行结束时，条件被检查。`9` 大于 `0`，并且不相等。结果是 `$false`，因此循环继续。这样持续进行，直到计数降到
    `0`（使条件的结果为 `$true`），此时循环退出。本质上，循环语句是“继续*直到*计数*变成*零”。
- en: That concludes our chapter on flow control. I hope that you had a nice time
    learning the techniques, and that this chapter helps you with a good chunk of
    automation work you wish to carry out after learning to use PowerShell.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们关于流程控制章节的内容。我希望你在学习这些技巧时度过了一段愉快的时光，并且这一章能帮助你在学会使用 PowerShell 后完成你希望进行的自动化工作。
