- en: Chapter 3. Motion for the Biped
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 双足机器人的运动
- en: Now that you've got your biped all up and running, you can start developing
    interesting ways to make it move. In this chapter, you'll learn
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的双足机器人已经启动并运行，你可以开始开发一些有趣的方式来让它移动。在这一章中，你将学习
- en: How to adjust the positions of your servos for the Tyrannosaurus Rex pose
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何调整伺服器的位置以达到霸王龙的姿势
- en: The basic walking gait for your robot
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你机器人的基本行走步态
- en: The basic turn for your robot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的机器人的基本转向
- en: Before you begin, however, it will be best if you create a harness for your
    biped. Your robot is going to be inherently unstable with only two legs, and,
    as you experiment, you're going to make some mistakes. With only two legs, these
    mistakes can, and probably will, result in your robot toppling over, which can
    damage the robot.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，最好为你的双足机器人创建一个支架。你的机器人天生就不稳定，只有两条腿，并且在实验过程中，你可能会犯一些错误。仅凭两条腿，这些错误很可能会导致你的机器人摔倒，从而损坏机器人。
- en: 'If you have an electronics board vise, or an "Extra Hands" device, they can
    be useful for this purpose. Here is a picture of how to use this device to create
    a harness:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有电子板台钳或“额外的手”设备，它们在这方面非常有用。下面是使用这个设备来创建支架的图片：
- en: '![Motion for the Biped](img/B04591_03_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![双足机器人的运动](img/B04591_03_01.jpg)'
- en: If you don't, you can easily create this sort of overhead support using a PVC
    pipe or wood. Really, just something to keep your biped from crashing over during
    your experimentation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有，你也可以使用 PVC 管或木材轻松创建这种悬挂支架。实际上，任何可以防止你在实验过程中摔倒机器人的物品都可以。
- en: A basic stable pose
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个基本的稳定姿势
- en: 'Now that your biped is built and you know how to program the servos using Python,
    you can experiment with some basic poses. You''ll first create a program that
    allows you to set individual servos so that you can experiment. Here is the program:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的双足机器人已经完成，并且你知道如何使用 Python 来编程控制伺服器，你可以尝试一些基本的姿势。你将首先创建一个程序，允许你设置单独的伺服器，这样你就可以进行实验。以下是这个程序：
- en: '![A basic stable pose](img/B04591_03_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![一个基本的稳定姿势](img/B04591_03_02.jpg)'
- en: This code includes the Python `setAngle` function from [Chapter 2](ch02.html
    "Chapter 2. Building the Biped"), *Building the Biped*. The specifics were taken
    from the [www.pololu.com](http://www.pololu.com) website, but it simply allows
    you to set a specific servo to a specific angle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包括了来自[第二章](ch02.html "第二章：构建双足机器人")的 Python `setAngle` 函数，*构建双足机器人*。具体的内容来自于
    [www.pololu.com](http://www.pololu.com) 网站，但它的功能非常简单，就是允许你将特定伺服器设置到特定的角度。
- en: The next part of the code sets all of the servos to their center location. The
    final piece of the code, the `while 1:` code set, simply asks the user for a servo
    and an angle, and then sends the command to the servo controller.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分将所有伺服器设置到它们的中心位置。代码的最后一部分，`while 1:` 代码块，简单地要求用户输入伺服器和角度，然后将命令发送到伺服器控制器。
- en: 'Once the program is run, you should see your biped standing straight up. If
    not, you may need to center your servos by adjusting the position of the horns.
    This is a useful pose, but there are others that are more stable. As an excellent
    first example, you can change the pose to be more like a Tyrannosaurus Rex pose,
    with knees pointing back. Here are the basic servo positions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦程序运行，你应该看到你的双足机器人直立。如果没有，你可能需要通过调整伺服器的角度来重新校准伺服器的位置。这是一个有用的姿势，但还有一些其他更稳定的姿势。作为一个很好的初步示例，你可以将姿势改为更像恐龙霸王龙（Tyrannosaurus
    Rex）的姿势，膝盖指向后方。以下是基本的伺服器位置：
- en: '| Servo | Angle |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 伺服器 | 角度 |'
- en: '| --- | --- |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 | 60 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 60 |'
- en: '| 2 | 60 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 60 |'
- en: '| 3 | 60 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 60 |'
- en: '| 6 | 120 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 120 |'
- en: '| 7 | 120 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 120 |'
- en: '| 8 | 120 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 120 |'
- en: 'The robot pose should look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人姿势应该是这样的：
- en: '![A basic stable pose](img/B04591_03_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![一个基本的稳定姿势](img/B04591_03_03.jpg)'
- en: You can use these angles to achieve this pose. However, this will leave you
    with some limited movement, as your servos will be toward the end of their ability
    to move in one direction. As this is going to be the starting pose for your robot,
    to achieve maximum flexibility, you'll want to center the servos at this position.
    To do this, run the default, `robot.py`, to set the legs to the center position.
    Now, adjust the servo horns to achieve this pose while the values of the servos
    are at a 90 degree angle.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些角度来实现这个姿势。然而，这样会限制你的移动能力，因为你的伺服器将在单一方向上接近最大移动范围。由于这是你机器人起始的姿势，为了实现最大灵活性，你需要将伺服器调整到这个中心位置。为此，运行默认的
    `robot.py` 来将双腿设置为中心位置。现在，调整伺服器角度，以便在伺服器角度为90度时，达到这个姿势。
- en: 'It should look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来像这样：
- en: '![A basic stable pose](img/B04591_03_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![基本稳定姿势](img/B04591_03_04.jpg)'
- en: Now that you have a stable base to work from, you can start programming a simple
    walking motion.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个稳定的基础，你可以开始编写简单的行走动作程序。
- en: A basic walking motion
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本行走动作
- en: Your robot is poised to walk, however, you first have to get a leg off the ground.
    Of course, that is easy enough; if you simply lift the leg by changing the angle
    of the knee joint, your leg can get off the ground. You may also want to change
    the angle of the front to back ankle; this will allow you to lift the leg without
    raising it quite as high.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人已经准备好行走，然而，你首先需要让一条腿离开地面。当然，这很简单；只需通过改变膝关节的角度抬起腿部，腿就能离开地面。你还可以改变前后踝关节的角度；这可以让你抬起腿时不需要抬得太高。
- en: 'However, you''ll have a problem if you change just these two servos; as you
    lift the leg, your robot will fall over. This is due to a simple principle called
    the center of gravity. When your robot is at rest, your center of gravity looks
    like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果仅仅调整这两个伺服器，你会遇到问题；当你抬起腿时，机器人会摔倒。这是由于一个简单的原理，叫做重心。当机器人处于静止状态时，重心是这样的：
- en: '![A basic walking motion](img/B04591_03_05.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_05.jpg)'
- en: 'It is clear that if you lift a leg, the robot will fall over in the direction
    of the leg that has been lifted. What you need to do is to shift the center of
    gravity over the leg that will be left on the ground using the ankle servo that
    can tilt the robot left and right, so that it ends up like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果你抬起一条腿，机器人会朝着被抬起的腿的方向摔倒。你需要做的是使用可以使机器人左右倾斜的踝关节伺服器，将重心转移到将留在地面的腿上，这样它最终会像这样：
- en: '![A basic walking motion](img/B04591_03_06.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_06.jpg)'
- en: 'You''ll then want to set your servos to lift the left leg. Here is a side view
    of these servo settings:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要设置伺服器来抬起左腿。以下是这些伺服器设置的侧视图：
- en: '![A basic walking motion](img/B04591_03_07.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_07.jpg)'
- en: 'Now, it''s time for some Python code to make this happen. You''ll start with
    your `robot.py` code and will add the following lines to a function called `liftLeftLeg`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候编写一些 Python 代码来实现这一点了。你将从 `robot.py` 代码开始，并在一个名为 `liftLeftLeg` 的函数中添加以下几行代码：
- en: '![A basic walking motion](img/B04591_03_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_08.jpg)'
- en: 'This will tip the robot onto its right leg, and then lift the left leg, like
    this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这样会让机器人倾斜到右腿上，然后抬起左腿，如下所示：
- en: '![A basic walking motion](img/B04591_03_09.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_09.jpg)'
- en: 'Now, it is fairly easy to step forward. Just move the hip joint on the left
    leg forward, and then move the ankle joint on the right leg to tip the entire
    robot forward. Here is the diagram and servo settings:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向前迈步相对容易。只需将左腿的髋关节向前移动，然后将右腿的踝关节移动，以便将整个机器人向前倾斜。下面是图示和伺服器设置：
- en: '![A basic walking motion](img/B04591_03_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_10.jpg)'
- en: 'Here is the Python code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 代码：
- en: '![A basic walking motion](img/B04591_03_11.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_11.jpg)'
- en: 'Here is a picture of the robot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是机器人的照片：
- en: '![A basic walking motion](img/B04591_03_12.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_12.jpg)'
- en: 'This is the first stage of a walking gait. So, let''s detail all the motions
    you''ll need in order to walk your robot forward. Here are the side view diagrams
    of the different states:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是行走步态的第一阶段。那么，让我们详细说明你需要的所有动作，以便让机器人向前行走。以下是不同状态的侧视图：
- en: '![A basic walking motion](img/B04591_03_13.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_13.jpg)'
- en: 'These are the pictures of the robot in each of the different states:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是机器人在不同状态下的图片：
- en: '![A basic walking motion](img/B04591_03_14.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_14.jpg)'
- en: 'Here is the Python code for each of the functions for the different states:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是不同状态下各个函数的 Python 代码：
- en: '![A basic walking motion](img/B04591_03_15.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_15.jpg)'
- en: You'll notice that each function has a number of different servo control statements;
    these must be performed in this order to get the desired result.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到每个功能都有一些不同的伺服控制指令；这些必须按照这个顺序执行才能得到期望的结果。
- en: 'Here is the Python code to sequence the functions for two steps: one with the
    left leg, and the other with the right leg:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是将两个步骤的函数按顺序排列的 Python 代码：一个是左腿，另一个是右腿：
- en: '![A basic walking motion](img/B04591_03_16.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![基本行走动作](img/B04591_03_16.jpg)'
- en: This is a very simple gait; it's not particularly elegant. You can see that
    each state is made up of many individual servo moves. You can certainly add more
    servo moves to make it smoother and more refined. Your exact servo angle settings
    will certainly vary from these; you'll need to do some experimentation to get
    your biped's legs positioned correctly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常简单的步态，虽然不算特别优雅。你可以看到每个状态都是由许多独立的伺服动作组成的。当然，你可以添加更多的伺服动作，使其更加平滑和精细。你具体的伺服角度设置可能会与这些不同；你需要进行一些实验来确保双足机器人的腿部定位正确。
- en: Now that you can walk, you will also need to teach your robot how to turn.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经能让机器人行走了，接下来你还需要教它如何转弯。
- en: A basic turn for the robot
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人的基本转弯
- en: 'Your robot can walk forward, but you''ll also want your robot to be able to
    turn. Your turning is limited to the amount you can turn the hip of your robot,
    which is around 20 degrees for this robot. So, to perform a full 90 degree turn,
    you''ll need to take the turn in several steps. The big difference here is that
    when you return to the standing state, you do not want to reset your hip rotation
    servos to 90 degrees. Here are the diagrams, including several that are rear view,
    for a turn:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人可以向前走，但你还希望它能够转弯。转弯的限制在于你能转动机器人髋部的角度，对于这款机器人来说，大约是 20 度。所以，要完成一个 90 度的转弯，你需要将转弯分为几个步骤。这里的一个重要区别是，当你回到站立状态时，你不想将髋部旋转伺服电机重置为
    90 度。以下是转弯的图示，其中包括一些后视图：
- en: '![A basic turn for the robot](img/B04591_03_17.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![机器人的基本转弯](img/B04591_03_17.jpg)'
- en: 'Here is the Python code for a basic turning operation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本转弯操作的 Python 代码：
- en: '![A basic turn for the robot](img/B04591_03_18.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![机器人的基本转弯](img/B04591_03_18.jpg)'
- en: 'And here is the Python code to chain these basic states together to step a
    turn:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将这些基本状态连接在一起，以实现转弯的 Python 代码：
- en: '![A basic turn for the robot](img/B04591_03_19.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![机器人的基本转弯](img/B04591_03_19.jpg)'
- en: Now your robot can walk and turn! Obviously, your robot could walk backward
    by reversing the order of servo control statements in each of the functions. There
    are many more types of motions you can program with your robot, following the
    planning method outlined in this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的机器人可以行走并转弯了！显然，通过反转每个函数中的伺服控制语句顺序，机器人还可以向后走。按照本章中概述的规划方法，你还可以编程更多类型的动作。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now, your robot is mobile. The next step is to add some sensors so that your
    robot can avoid, or find, objects in its path.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，机器人可以移动了。下一步是添加一些传感器，使机器人能够避开或找到路径上的物体。
