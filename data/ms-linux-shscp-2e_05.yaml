- en: Alternative Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代语法
- en: So far in the scripting journey, we have seen that we can use the `test` command
    to determine a conditional status. We have taken this a little further and discovered
    that we can also make use of the single square bracket. Here, we will recap the
    `test` command and look at the single square bracket in more detail. After having
    learned more about the square bracket, we will move onto more advanced variable
    or parameter management, thus providing defaults and understating quoting issues.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在脚本编写过程中，我们已经看到可以使用`test`命令来判断条件状态。我们已经进一步了解，除了`test`命令，还可以使用单方括号。在这里，我们将回顾`test`命令，并更详细地了解单方括号。通过进一步了解方括号，我们将转向更高级的变量或参数管理，提供默认值并理解引用问题。
- en: Finally, we are going to see that within advanced shells such as bash, Korn,
    and Zsh, we can go with double brackets! Making use of the double round parenthesis
    and double square bracket can simplify the overall syntax and allow the standardization
    of the use of mathematical symbols.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到在如bash、Korn和Zsh等高级shell中，我们可以使用双括号！利用双圆括号和双方括号可以简化整体语法，并标准化数学符号的使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Recapping `test`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾`test`命令
- en: Providing parameter defaults
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供参数默认值
- en: When in doubt – quote!
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有疑问时 – 引用！
- en: Advanced tests using `[[`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`[[`进行高级测试
- en: Arithmetic operations using `((`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`((`进行算术运算
- en: Technical requirement
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter05](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter05)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter05](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter05)'
- en: Recapping the test command
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾test命令
- en: 'So far, we have used the built-in `test` command to drive our conditional statements.
    Using other options with `test`, we can look at the returned value to determine
    the status of files in the filesystem. Running the `test` command without any
    options will return a false output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用内建的`test`命令来驱动条件语句。通过与`test`结合使用其他选项，我们可以查看返回的值，以判断文件系统中文件的状态。如果不带任何选项运行`test`命令，将返回假输出：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Testing files
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试文件
- en: 'Commonly, we can use `test` to check the conditions based around files. For
    example, to test whether a file is present or not, we can use the `-e` option.
    The following command will test the existence of the `/etc/hosts` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以使用`test`来检查与文件相关的条件。例如，要测试文件是否存在，可以使用`-e`选项。以下命令将测试`/etc/hosts`文件是否存在：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can run this `test` again, but this time check that the file not only exists
    but is a regular file as opposed to having some special purpose. Specific file
    types can be directories, pipes, and links, among others. The option for a regular
    file is `-f`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次运行`test`命令，但这次要检查文件不仅存在，而且是常规文件，而不是具有某种特殊用途的文件。特定的文件类型可能是目录、管道和链接等。常规文件的选项是`-f`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding logic
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加逻辑
- en: 'If we need to open a file from within our script, we test that the file is
    both a regular file and has the read permission set. To achieve this with `test`,
    we can also include the `-a` option to `AND` multiple conditions together. In
    the following example command, we will use the `-r` condition to check that the
    file is readable:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在脚本中打开文件，我们会测试该文件是否是常规文件，并且已设置可读权限。为了使用`test`实现这一点，我们还可以包含`-a`选项，将多个条件通过`AND`连接在一起。在以下示例命令中，我们将使用`-r`条件来检查文件是否可读：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, the use of `-o` is supported to `OR` two conditions within an expression.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，使用`-o`选项可以在表达式中对两个条件进行`OR`操作。
- en: Square brackets as not seen before
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前所未见的方括号
- en: 'As an alternative to the `test` command, we can implement the same conditional
    tests using the single square bracket. Repeating the previous conditional `test`
    and omitting the command itself. We will rewrite this, as shown in the following
    command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`test`命令的替代方法，我们可以使用单方括号来实现相同的条件测试。重复之前的`test`条件，并省略命令本身。我们将按照以下命令进行重写：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Many times, even as experienced administrators, we are used to language elements
    and we accept them as they are. I feel many Linux administrators will be surprised
    to learn that `[` is a command for both a shell built-in and a standalone file.
    Using the `type` command, we can verify this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，即使是经验丰富的管理员，我们也习惯了某些语言元素，并接受它们原本的样子。我觉得很多 Linux 管理员会很惊讶地发现 `[` 是一个既是 shell
    内建命令又是独立文件的命令。使用 `type` 命令，我们可以验证这一点：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see the output of this command in the following screenshot confirming
    its existence:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下屏幕截图中看到此命令的输出，确认其存在：
- en: '![](img/af5fd18f-715b-4990-8093-d42b9adefdcb.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af5fd18f-715b-4990-8093-d42b9adefdcb.png)'
- en: The built-in `[` command imitates the `test` command but it requires a closing
    bracket.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 `[` 命令模仿了 `test` 命令，但它需要一个闭括号。
- en: 'Now we know a little more about the `[` command, which is found in bash and
    the earlier Bourne shell, we can now continue to add a little command-line list
    syntax. In addition to the command-line list, we can see the desired functionality
    working in the following command sample:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 `[` 命令有了更多了解，它既出现在 bash 中，也出现在早期的 Bourne shell 中，我们现在可以继续添加一些命令行列表语法。除了命令行列表，我们可以在以下命令示例中看到所需的功能：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Having set the parameter `FILE` variable, we can test that it is both a regular
    file and is readable by the user before attempting to list the file contents.
    In this way, the script becomes more robust without the need for a complex script
    logic. We can see the code in use in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了 `FILE` 参数变量后，我们可以测试它是否为常规文件，并且在尝试列出文件内容之前，用户是否可读。这样，脚本变得更加健壮，而不需要复杂的脚本逻辑。我们可以在以下屏幕截图中看到代码的使用：
- en: '![](img/9c04243c-1855-4723-b90a-44d825d28e77.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c04243c-1855-4723-b90a-44d825d28e77.png)'
- en: This type of abbreviation is quite common and is easily recognizable. We should
    always be cautious of using abbreviations if they do not add readability. Our
    aim in scripting should be to write clear and understandable code and avoid shortcuts
    if they do not add to this goal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种缩写非常常见，且容易识别。如果缩写没有提高可读性，我们应该始终小心使用它们。我们编写脚本的目标应是写出清晰且易于理解的代码，避免使用那些并没有增加可读性的简写。
- en: Providing parameter defaults
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供参数默认值
- en: 'Within bash parameters, there are named spaces in the memory that allow us
    access to stored values. There are two types of parameters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 bash 参数中，有一些命名的内存空间允许我们访问存储的值。参数有两种类型：
- en: Variables
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Special parameters
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊参数
- en: Variables
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: We already described what variables are and how to define them in Chapter 1,
    *The What and Why of Scripting with Bash*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一章中已经描述了什么是变量以及如何定义它们，*使用 Bash 编写脚本的背景和目的*。
- en: 'Just to refresh your memory, you can define a variable by assigning a value
    with an equals sign and without any spaces like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了提醒你，你可以通过使用等号并且没有空格来定义一个变量，例如：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So nothing new here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里没有什么新内容。
- en: Special parameters
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊参数
- en: 'Special parameters are the second parameter type and are managed by the shell
    itself and are presented as read-only. We have come across these before in parameters
    such as `$0` but let''s take a look at another `$-`. We can expand these parameters
    to gain an understanding of their use, using the `echo` command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊参数是第二类参数，由 shell 本身管理，并以只读形式呈现。我们以前在诸如 `$0` 的参数中遇到过这些，但让我们来看一下另一个 `$-`。我们可以扩展这些参数，通过使用
    `echo` 命令来理解它们的用法：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the annotated text that I have added, we can understand that the `$-` option
    represents the shell options that are configured. These can be displayed using
    the set `-o` command but it can be read programmatically using `$-`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从我添加的注释文本中，我们可以理解`$-`选项表示配置的 shell 选项。可以通过 `set -o` 命令显示这些选项，但可以使用 `$-` 通过程序化方式读取。
- en: 'We can see this in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下屏幕截图中看到这一点：
- en: '![](img/b4b7bb52-bd42-4f29-acf6-01839cf6d812.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4b7bb52-bd42-4f29-acf6-01839cf6d812.png)'
- en: 'The options set here are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此处设置的选项如下：
- en: '`h`: This is short for hashall; it allows for programs to be found using the `PATH`
    parameter'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`：这是 hashall 的缩写；它允许通过 `PATH` 参数查找程序'
- en: '`i`: This shows that this is an interactive shell'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i`：这表示这是一个交互式 shell'
- en: '`m`: This is short for monitor; it allows the use of the `bg` and `fg` commands
    to bring commands in and out of the background'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`：这是 monitor 的缩写；它允许使用 `bg` 和 `fg` 命令将命令从后台调入或调出'
- en: '`B`: This allows the brace expansion or `mkdirdir{1,2}`, where we create `dir1`
    and `dir2`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`B`：这允许使用大括号扩展或 `mkdirdir{1,2}`，其中我们创建 `dir1` 和 `dir2`'
- en: '`H`: This allows history expansion of running commands, such as `!501` to repeat
    commands from history'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`H`：允许历史命令扩展，例如使用 `!501` 来重复历史命令。'
- en: Setting defaults
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置默认值
- en: 'Using either the `test` command or the brackets, we can provide default values
    for variables, including command-line parameters. Taking the `hello4.sh` script
    we worked with earlier, we can modify it and set the `name` parameter if it is
    zero bytes:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `test` 命令或括号，我们可以为变量提供默认值，包括命令行参数。以我们之前处理的 `hello4.sh` 脚本为例，我们可以修改它，并在 `name`
    参数为零字节时进行设置：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This code is functional but it is our choice how we code in the default value.
    We can, alternatively, assign a default value directly to the parameter. Consider
    the following command, where a default assignment is made directly:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是可行的，但如何编写默认值的代码是我们自己的选择。我们也可以直接将默认值赋给参数。考虑以下命令，其中直接进行默认值赋值：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In bash, this is known as **parameter substitution** and can be written in
    the following pseudo-code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 bash 中，这称为 **参数替换**，可以写成以下伪代码：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Wherever a variable (`parameter`) has not been declared and has a null value,
    the default value will be used. If the parameter has been explicitly declared
    with a null value, we will use the `:-` syntax, as shown in the following example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时，若变量（`parameter`）未声明且值为空，将使用默认值。如果该参数已明确声明为空值，我们将使用 `:-` 语法，如下例所示：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By editing the script now, we can create `hello8.sh` to make use of bash parameter
    substitution to provide the default value:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编辑脚本，我们可以创建 `hello8.sh`，利用 bash 参数替换来提供默认值：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This script and its output, both with and without a supplied value, are shown
    in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了此脚本及其输出，包括有无提供值的情况：
- en: '![](img/22032c85-3f5a-457b-bf7f-e7307cb9988e.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22032c85-3f5a-457b-bf7f-e7307cb9988e.png)'
- en: The `hello8.sh` script provides the functionality that we need, with the logic
    built directly into the parameter assignment. The logic and assignment are now a
    single line of code within the script and this is a major step in keeping the
    script simple and maintaining the readability.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello8.sh` 脚本提供了我们所需的功能，逻辑直接嵌入到参数赋值中。现在，逻辑和赋值已经合并为脚本中的一行代码，这是保持脚本简洁并维护可读性的重要一步。'
- en: When in doubt – quote!
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 若有疑问 —— 请加引号！
- en: Having established that variables are a type of parameter, we should always
    keep this in mind, especially when reading manuals and *HOWTOs*. Often the documentation
    refers to parameters and, in doing so, they include variables, as well as the
    bash special parameters, such as `$1` and so on. In keeping with this, we will
    look at why it is advisable to quote the parameters when we use them on the command
    line or within scripts. Learning this now can save us a lot of pain and heartache
    later, especially when we start looking at loops.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确定变量是一种参数类型后，我们应始终牢记这一点，特别是在阅读手册和 *HOWTO* 时。文档中通常提到参数，并且在提及时，包括了变量以及 bash 特殊参数，如
    `$1` 等。基于此，我们将探讨为何在命令行或脚本中使用参数时最好加上引号。现在学习这一点，可以帮助我们避免以后遇到的许多麻烦，尤其是在我们开始研究循环时。
- en: 'First, the correct term that we should use for reading the value of variables
    is **parameter expansion**. To you and me, this is reading a variable, but to
    bash this would be too simple. The assignment of a correct name, such as parameter
    expansion, reduces any ambiguity to its meaning but adds complexity at the same
    time. In the following example, the first line of command assigns the value of
    `fred` to the `name` parameter. The second line of command uses parameter expansion
    to print the stored value from memory. The `$` symbol is used to allow the expansion
    of the parameter:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该使用的正确术语是 **参数扩展** 来读取变量的值。对你我而言，这就是读取变量，但对 bash 来说，这样描述太简单。正确的术语，如参数扩展，减少了含义上的歧义，但同时增加了复杂性。在以下示例中，第一行命令将
    `fred` 的值赋给 `name` 参数。第二行命令使用参数扩展打印存储在内存中的值。`$` 符号用于实现参数扩展：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the example, we have used the double quotes to allow `echo` to print the
    single string as we have used spaces. Without the use of quotes, `echo` might
    have seen this as multiple arguments, the space being the default field separator
    in most shells, including bash. Often, when we do not think to use quotes, we
    do not see the spaces directly. Consider the following extract of command-line
    code that we made use of earlier:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了双引号来允许`echo`打印出单一字符串，因为我们使用了空格。如果不使用引号，`echo`可能会将其视为多个参数，空格是大多数shell（包括bash）中的默认字段分隔符。通常，当我们没有想到使用引号时，我们并不会直接看到空格。考虑我们之前使用过的命令行代码片段：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Even though this worked, we may have been a little fortunate, especially if
    we were populating the `FILE` parameter from a list of files that we had not created
    ourselves. It is quite conceivable that a file can have spaces within its name.
    Let''s now replay this command using a different file. Consider the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这样做成功了，但我们可能有些幸运，特别是当我们从一个我们没有自己创建的文件列表中填充`FILE`参数时。可以想象，一个文件名中可能包含空格。现在让我们使用另一个文件重新执行这个命令。考虑以下命令：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Even though, structurally, there has been no change to the code, it now fails.
    This is because we are providing too many arguments to the `[` command. The failing
    result will be the same even if we use the `test` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 即使从结构上来看，代码没有任何变化，它现在失败了。这是因为我们向`[`命令提供了太多的参数。即使我们使用`test`命令，失败的结果也是一样的。
- en: 'Even though we have correctly quoted the assignment of the filename to the
    parameter `FILE`, we have not protected the spaces when the parameter is expanded.
    We can see the code failing, as it is captured in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经正确引用了文件名分配给`FILE`参数，但当参数被扩展时，我们并没有保护空格。我们可以看到代码失败，如下截图所示：
- en: '![](img/93d92de0-8e42-4c20-99b3-575ecdcf2121.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93d92de0-8e42-4c20-99b3-575ecdcf2121.png)'
- en: We can see that this will not be ready for our scripts. Alas, what we once thought
    of as robust is now in tatters and, like the Titanic, our code has sunk.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这样的代码对于我们的脚本来说并不合适。唉，我们曾经认为坚固的代码现在四分五裂，就像“泰坦尼克号”一样，我们的代码已经沉没。
- en: 'However, a simple solution is to revert to quoting parameter expansion unless
    specifically not desired. We can make this ship unsinkable with a simple edit
    to the code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个简单的解决方法是，在不特别不需要时，恢复引用参数扩展。我们只需简单修改代码，就能使这艘船变得不可沉：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can now proudly stand on the White Star Line dock, as we see the Titanic
    II get launched in the following code example, which is captured in the following
    screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以骄傲地站在白星航线的码头上，看到“泰坦尼克号II”在以下代码示例中被启动，截图如下：
- en: '![](img/c81415b8-5644-400f-8caf-8364adcd5986.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c81415b8-5644-400f-8caf-8364adcd5986.png)'
- en: 'It is truly amazing and sometimes just a little unbelievable what effect these
    tiny quotes can have. We should never ignore the quotes when expanding variables.
    To ensure that we drill home this point, we can highlight this phenomenon in another,
    even simpler, example. Let''s take the scenario where we now just want to remove
    the file. In the first example, we do not use quotes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些微小的引号所带来的效果真是令人惊讶，有时甚至有些难以置信。在扩展变量时，我们绝不应该忽视引号。为了确保我们能强调这一点，我们可以通过另一个更简单的例子来说明这个现象。假设我们现在只想删除文件。在第一个例子中，我们没有使用引号：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This code will produce failures as the parameter expansion will lead to the
    following perceived command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将失败，因为参数扩展将导致以下被视为命令：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The code will fail because it is unable to find the `my` file or the `file`
    file. Even worse, we could potentially be deleting incorrect files if any of the
    names could be resolved accidentally. However, quoting the parameter expansion
    will save the day, as we see in the second example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 代码会失败，因为它无法找到`my`文件或`file`文件。更糟糕的是，如果任何文件名被意外解析，我们可能会删除错误的文件。然而，引用参数扩展会拯救我们，正如我们在第二个例子中看到的那样：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is correctly expanded to the desired command that we illustrate in the
    following command example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是正确扩展到所需命令的结果，我们将在以下命令示例中进行说明：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I certainly hope that these examples demonstrate the need for care when expanding
    parameters and make you aware of the pitfalls.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实希望这些例子能展示出在扩展参数时需要小心，并让你意识到潜在的陷阱。
- en: Advanced tests using [[
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用[[进行的高级测试
- en: 'The use of the double brackets `[[ condition ]]` allows us to do more advanced
    condition testing but it is not compatible with the Bourne shell. The double brackets
    were first introduced as a defined keyword in the KornShell and are also available
    in bash and Zsh. Unlike the single bracket, this is not a command but a keyword.
    The use of the `type` command can confirm this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双括号`[[ condition ]]`允许我们进行更高级的条件测试，但它与Bourne shell不兼容。双括号最初作为一个定义的关键字出现在KornShell中，并且在bash和Zsh中也可用。与单括号不同，这不是一个命令，而是一个关键字。使用`type`命令可以确认这一点：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: White space
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空白字符
- en: 'The fact that `[[` is not a command is significant where white space is concerned.
    As a keyword, `[[` parses its arguments before bash expands them. As such, a single
    parameter will always be represented as a single argument. Even though it goes
    against best practice, `[[` can alleviate some of the issues associated with white
    space within parameter values. Reconsidering the condition we tested earlier,
    we can omit the quotes when using `[[`, as shown in the following example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[`不是命令这一事实在空白字符处理方面具有重要意义。作为一个关键字，`[[`会在bash扩展其参数之前解析它们。因此，单个参数将始终作为单个参数表示。尽管这违背了最佳实践，但`[[`可以缓解与参数值中空白字符相关的一些问题。重新考虑我们之前测试的条件，我们在使用`[[`时可以省略引号，如下例所示：'
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We still need to quote the parameter when using `cat`, as you can see, and we
    can use quotes within the double brackets but they become optional. Note that
    we can also use the more traditional `&&` and `||` to represent `-a` and `-o`
    respectively.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cat`时我们仍然需要引用参数，如你所见，我们可以在双括号内使用引号，但它们变得可选。注意，我们还可以使用更传统的`&&`和`||`分别表示`-a`和`-o`。
- en: Other advanced features
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他高级功能
- en: These are some of the extra features that we can include with the double brackets.
    Even if we lose portability in using them, there are some great features that
    overcome the loss. Remember that if we only use bash, then we can use the double
    brackets but can't run our scripts in the Bourne shell. The advanced features
    that we gain, which are covered in the following sections, include pattern matching
    and regular expressions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可以通过双括号包含的额外功能。即使使用它们可能失去可移植性，但也有一些强大的功能可以克服这一损失。记住，如果我们只使用bash，那么我们可以使用双括号，但无法在Bourne
    shell中运行脚本。我们在接下来的章节中将讨论的高级功能包括模式匹配和正则表达式。
- en: Pattern matching
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式匹配
- en: 'Using the double brackets, we can do more than just match strings, we can use
    pattern matching. For example, we may need to work exclusively with Perl scripts,
    files that end with `.pl`. We will be able to implement this easily within a condition
    by including the pattern as a match, as shown in the following example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双括号，我们不仅可以匹配字符串，还可以使用模式匹配。例如，我们可能需要专门处理Perl脚本，即以`.pl`结尾的文件。我们可以通过将模式作为匹配项轻松地在条件中实现这一点，如下例所示：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Regular expressions
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: We will talk in dept about regular expressions in a [Chapter 11](165453d1-d266-4144-882a-11ded6d1dd98.xhtml),
    *Regular Expressions*, but let's take a small glimpse now.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](165453d1-d266-4144-882a-11ded6d1dd98.xhtml)中深入探讨正则表达式，*正则表达式*，但现在先简要了解一下。
- en: 'We could rewrite the last example using a regular expression:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用正则表达式重写最后一个示例：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As the single dot or period has a special meaning in regular expressions, we
    need to escape it with `\`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单个点或句号在正则表达式中有特殊含义，我们需要使用`\`对其进行转义。
- en: 'The following screenshot shows the regular expression matching working with
    a file called `my.pl` and another called `my.apl`. The match correctly shows for
    the file that ends in `.pl`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了正则表达式匹配在一个名为`my.pl`的文件和另一个名为`my.apl`的文件中的工作情况。匹配正确地显示了以`.pl`结尾的文件：
- en: '![](img/84268ff7-79fb-4aa0-8205-1edb1d9f5a3c.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84268ff7-79fb-4aa0-8205-1edb1d9f5a3c.png)'
- en: Regular expression script
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式脚本
- en: 'Another simple demonstration of conditional testing using regular expressions
    will be to expose the US and UK spelling of *color*, being *color* and *colour*
    respectively. We may prompt the user if they want a color or mono output for the
    script but at the same time cater for both spellings. The line that will do the
    work in the script is as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式进行条件测试的另一个简单示范是暴露美式和英式拼写的*color*，分别为*color*和*colour*。我们可以提示用户是否想要脚本输出颜色或单色，但同时兼容这两种拼写。脚本中执行此操作的代码如下：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The regular expression caters to both spellings of *color* by making the `u`
    optional: `u?`. Furthermore, we can disable case sensitivity allowing for *COLOR*
    and *color* by setting a shell option:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式通过使`u`变为可选来适应两种拼写形式的*color*：`u?`。此外，我们可以通过设置shell选项来禁用大小写敏感，使其能够匹配*COLOR*和*color*：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This option can be disabled again at the end of the script with the following
    command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项可以通过以下命令在脚本末尾再次禁用：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When we use the variable parameters that we have named `$GREEN` and `$RESET`,
    we affect the color of the output. The color green will only be shown where we
    have sourced the color definition file. This is set when we choose the color display.
    Selecting mono will ensure that the variable parameters are null and have no effect.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用命名的变量参数`$GREEN`和`$RESET`时，会影响输出的颜色。绿色将仅在我们源自颜色定义文件的地方显示。这在选择颜色显示时被设置。选择单色将确保变量参数为空，并且没有影响。
- en: 'The complete script is shown in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本显示在以下截图中：
- en: '![](img/75571831-e4dd-4318-bd61-47d8dd661620.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75571831-e4dd-4318-bd61-47d8dd661620.png)'
- en: Arithmetic operations using ((
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用((进行的算术运算
- en: When using bash and some other advanced shells, we can make use of the `(( ))`
    notation to simplify mathematical operations with scripts.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用bash和一些其他高级shell时，我们可以利用`(( ))`符号简化脚本中的数学运算。
- en: Simple math
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的数学运算
- en: 'The double parenthesis construct in bash allows for arithmetic expansion. Using
    this in the simplest format, we can easily carry out integer arithmetic. This
    becomes a replacement for the `let` built-in. The following examples show the
    use of the `let` command and the double parenthesis to achieve the same result:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: bash中的双括号构造允许算术扩展。以最简单的格式使用它时，我们可以轻松进行整数运算。这可以替代`let`内建命令。以下示例展示了使用`let`命令和双括号来实现相同的结果：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In both cases, the `a` parameter is populated with the sum of `2 + 3`. If you
    want to write it on a shell script, you need to add a dollar sign before the parentheses:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，`a`参数被赋值为`2 + 3`的和。如果你想在脚本中编写它，必须在括号前加上美元符号：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Parameter manipulation
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数操作
- en: 'Perhaps a little more useful to us in scripting is the C-style parameter manipulation
    that we can include using the double parenthesis. We can often use this to increment
    a counter within a loop and also put a limit on the number of times the loop iterates.
    Consider the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们在脚本编写中可能更有用的是可以使用双括号来实现的C风格参数操作。我们可以经常用它在循环中递增计数器，并限制循环的迭代次数。考虑以下命令：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Within this example, we first set `COUNT` to `1` and then we increment it with
    the `++` operator. When it is echoed in the final line, the parameter will have
    a value of `2`. We can see the results in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先将`COUNT`设置为`1`，然后用`++`操作符递增它。当在最后一行回显时，参数的值将是`2`。我们可以在以下截图中看到结果：
- en: '![](img/7cf03547-dc20-44b4-8601-79f0c49c00ec.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cf03547-dc20-44b4-8601-79f0c49c00ec.png)'
- en: 'We can achieve the same result in longhand by using the following syntax:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下语法以详细形式实现相同的结果：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This of course allows for any increment of the `COUNT` parameter and not just
    a single unit increase. Similarly, we can count down using the `--` operator,
    as shown in the following example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这允许对`COUNT`参数进行任何增量，而不仅仅是单一单位的增加。同样，我们可以使用`--`操作符进行倒计时，如下例所示：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We start using a value of `10`, reducing the value by `1` within the double
    parentheses.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`10`开始，通过双括号将值减少`1`。
- en: Note that we do not use the `$` to expand the parameters within the parentheses.
    They are used for parameter manipulation and, as such, we do not need to expand
    parameters explicitly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在括号内不使用`$`来展开参数。它们用于参数操作，因此我们不需要显式地展开参数。
- en: Standard arithmetic tests
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准算术测试
- en: 'Another advantage that we can gain from these double parentheses is with the
    tests. Rather than having to use `-gt` for greater than, we can simply use `>`.
    We can demonstrate this in the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这些双括号中获得的另一个优势是用于测试。我们无需使用`-gt`来表示“大于”，可以直接使用`>`。我们可以在以下代码中演示这一点：
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following screenshot demonstrates this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图演示了这一点：
- en: '![](img/65fa7cb8-2ece-45dd-abaf-9d71392808d6.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65fa7cb8-2ece-45dd-abaf-9d71392808d6.png)'
- en: It is this standardization, both in the C-style manipulation and tests, that
    makes the double parenthesis so useful to us. This use extends to both the command
    line and scripts. We will use this feature extensively when we look at looping
    constructs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这种标准化的操作，无论是在 C 风格的操作还是测试中，使得双圆括号变得如此对我们有用。这种用法不仅适用于命令行，也适用于脚本。在我们研究循环结构时，我们将广泛使用这个功能。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Within this chapter, I really hope that we have introduced many new and interesting
    choices to you. This was an area with a wide range where we began by recapping the
    use of `test` and discovered that the `[` is a command not a syntax construct.
    The main effect that it is a command is on white space and we looked at the need
    to quote variables.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我真心希望我们向你介绍了许多新的、有趣的选择。这是一个范围广泛的领域，我们从回顾 `test` 的使用开始，发现 `[` 实际上是一个命令，而不是语法结构。它作为命令的主要影响体现在空格上，我们还看到了引用变量的必要性。
- en: Even though we may commonly call variables variables, we have also seen that
    their correct name, especially in documentation, is parameters. Reading a variable
    is a parameter expansion. Understanding parameter expansion can help us understand
    the use of the keyword `[[`. The double square brackets are not commands and do
    not expand the parameters. This means that we do not need to quote variables even
    if they do contain white space. Moreover, we can use advanced tests with double
    square brackets, such as pattern matching or regular expressions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们常常称变量为“变量”，但我们也已经看到它们的正确名称，特别是在文档中，是参数。读取一个变量是参数扩展。理解参数扩展有助于我们理解 `[[` 关键字的使用。双中括号并不是命令，它们不会扩展参数。这意味着即使变量中包含空格，我们也不需要引用它们。此外，使用双中括号时，我们可以进行高级测试，如模式匹配或正则表达式。
- en: Finally, we looked at arithmetic expansion and parameter manipulation using
    the double parenthesis notation. The biggest feature this delivers is the possibility
    to easily increment and decrement counters.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过使用双圆括号符号，了解了算术扩展和参数操作。它带来的最大特点是能够轻松地增减计数器。
- en: In the next chapter, we will move onto the looping constructs found in bash
    and make use of some of our new-found skills from this chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 bash 中的循环结构，并将运用本章学到的一些新技能。
- en: Questions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do you subtract 8 from 25 using shell scripting?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 shell 脚本中从 25 中减去 8？
- en: What is wrong with the following code? And how can you fix it?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码有什么问题？如何修复？
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: What is the problem with the following code?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码有什么问题？
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Further reading
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容以进一步阅读与本章相关的资料：
- en: '[http://tldp.org/LDP/abs/html/arithexp.html](http://tldp.org/LDP/abs/html/arithexp.html)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/abs/html/arithexp.html](http://tldp.org/LDP/abs/html/arithexp.html)'
- en: '[http://wiki.bash-hackers.org/commands/classictest](http://wiki.bash-hackers.org/commands/classictest)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://wiki.bash-hackers.org/commands/classictest](http://wiki.bash-hackers.org/commands/classictest)'
