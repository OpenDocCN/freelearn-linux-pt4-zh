- en: Regular Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: In this chapter, we will talk about the most mysterious part of using **stream
    editor** (**sed**) and AWK. They are regular expressions, or regexes for short.
    In the previous chapters, we discussed some regular expressions shyly and that's
    because we don't need to dig into them without a good understanding.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论使用 **流编辑器** (**sed**) 和 AWK 时最神秘的部分。它们就是正则表达式，简称 regex。在前几章中，我们略微提到过正则表达式，这是因为没有充分理解它们之前我们不需要深入探讨。
- en: If you understand how regular expressions are written, you will save a lot of
    time and effort. With regular expressions, you will unleash the real power behind
    sed and AWK and will use them professionally.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你理解了正则表达式的写法，你将节省大量时间和精力。通过正则表达式，你将释放 sed 和 AWK 背后的真正威力，并能以专业的方式使用它们。
- en: 'This chapter will cover the following aspects:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Regular expression engines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式引擎
- en: Defining BRE patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 BRE 模式
- en: Defining ERE patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 ERE 模式
- en: Using `grep`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `grep`
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter11](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter11)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter11](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter11)'
- en: Regular expression engines
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式引擎
- en: To start with, what are regular expressions?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，什么是正则表达式？
- en: Regular expressions are strings that the regex engine interprets to match a
    specific text. It's like an advanced way of searching.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是引擎用来匹配特定文本的字符串。它就像一种高级的搜索方式。
- en: 'Assume that you want to search a file for lines starting with any small letters,
    or you want to search for lines that contain a number, or maybe search for lines
    starting with specific text. The normal search can''t be generic: the only way
    to do that is to use regular expressions.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在文件中搜索以任何小写字母开头的行，或者你想搜索包含数字的行，或者你想搜索以特定文本开头的行。普通搜索不能做到这一点：唯一的方法是使用正则表达式。
- en: And what is the regex engine?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是正则表达式引擎呢？
- en: The regex engine is the piece of software that understands these strings and
    translates them to find the matched text.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式引擎是理解这些字符串并将其转换为找到匹配文本的软件部分。
- en: There are many regex engines out there; for example, the engines that are shipped
    with programming languages such as Java, Perl, and Python. Also, the engines that
    Linux tools use are sed and AWK, and the important thing for us now is to learn
    the types of regex engine in Linux.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多正则表达式引擎，例如与编程语言（如 Java、Perl 和 Python）一起发布的引擎。还有 Linux 工具使用的引擎，例如 sed 和 AWK，现在对我们来说重要的是学习
    Linux 中正则表达式引擎的类型。
- en: 'There are two types of regex engine in Linux:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 中有两种正则表达式引擎：
- en: The **Basic Regular Expression** (**BRE**) engine
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本正则表达式** (**BRE**) 引擎'
- en: The **Extended Regular Expression** (**ERE**) engine
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展正则表达式** (**ERE**) 引擎'
- en: Most Linux binaries understand both engines, such as sed and AWK.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 二进制文件都能理解两种引擎，例如 sed 和 AWK。
- en: '`grep` also can understand ERE, but you have to use the `-E` option, which
    is equivalent to using `egrep`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep` 也能理解 ERE，但你必须使用 `-E` 选项，这相当于使用 `egrep`。'
- en: We will see how to define a regex pattern for sed and AWK. We will start by
    defining BRE patterns, so let's get started.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何为 sed 和 AWK 定义正则表达式模式。我们将从定义 BRE 模式开始，所以让我们开始吧。
- en: Defining BRE patterns
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 BRE 模式
- en: 'To define a regex pattern, you can type the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义正则表达式模式，你可以输入以下内容：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/0b72a10f-089f-49d4-abd9-31b3e728cf5b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b72a10f-089f-49d4-abd9-31b3e728cf5b.png)'
- en: 'A very important thing you need to know about regex patterns in general is
    they are case sensitive:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于正则表达式的一件非常重要的事情是，它们是区分大小写的：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/3672126e-36f9-4e1c-8260-a225ade9dd96.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3672126e-36f9-4e1c-8260-a225ade9dd96.png)'
- en: 'Say you want to match any of the following characters:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想匹配以下任意字符：
- en: '`.*[]^${}\+?|()`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`.*[]^${}\+?|()`'
- en: You must escape them with a backslash because these characters are special characters
    for the regex engines.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须使用反斜杠对它们进行转义，因为这些字符是正则表达式引擎的特殊字符。
- en: Now you know how to define a BRE pattern. Let's use the common BRE characters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何定义 BRE 模式。接下来，我们来使用常见的 BRE 字符。
- en: Anchor characters
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锚字符
- en: 'Anchor characters are used to match the beginning or the end of a line. There
    are two anchor characters: the caret (`^`) and the dollar sign (`$`).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 锚字符用于匹配行的开头或结尾。这里有两个锚字符：插入符号（`^`）和美元符号（`$`）。
- en: 'The caret character is used to match the beginning of a line:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 插入符号字符用于匹配行的开头：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/d8f1ea73-b463-4950-9c52-83b5072c813d.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8f1ea73-b463-4950-9c52-83b5072c813d.png)'
- en: So, the caret character is used to check whether the specified text is at the
    beginning of the line.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，插入符号字符用于检查指定的文本是否位于行的开头。
- en: If you want to search for the caret as a character, you should escape it with
    a backslash if you use AWK.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查找插入符号字符作为普通字符，如果使用AWK，你应该用反斜杠对其进行转义。
- en: 'However, if you use `sed`, you don''t need to escape it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你使用`sed`，你就不需要转义它：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/3b7e3143-dce9-44fb-8c75-74d909d6c774.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b7e3143-dce9-44fb-8c75-74d909d6c774.png)'
- en: 'To match the end of the text, you can use the dollar sign character (`$`):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配文本的结尾，你可以使用美元符号字符（`$`）：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/33bcc23d-2001-4748-b36c-abe7823253c9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33bcc23d-2001-4748-b36c-abe7823253c9.png)'
- en: You can use both characters (`^`) and (`$`) in the same pattern to specify text.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在同一个模式中同时使用插入符号（`^`）和美元符号（`$`）来指定文本。
- en: 'You can use these characters to do something useful, such as search for empty
    lines and trim them:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些字符来执行有用的操作，例如查找空行并将其删除：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The exclamation mark (`!`) is called the negation character, which negates what's
    after it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 感叹号（`!`）被称为否定字符，它会否定它后面的内容。
- en: The pattern searches for `^$` where the caret (`^`) refers to the beginning
    of a line and the dollar sign (`$`) refers to the end of a line, which means search
    for lines that have nothing between the beginning and the end which means empty
    lines. Then we negate that with the exclamation mark (`!`) to get the other lines
    that are not empty.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该模式搜索`^$`，其中插入符号（`^`）表示行的开头，美元符号（`$`）表示行的结尾，这意味着搜索开头和结尾之间没有内容的行，即空行。然后，我们用感叹号（`!`）来取反，得到非空行。
- en: 'Let''s apply it to the following file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其应用于以下文件：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s see the magic:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下魔法：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/c5be77fb-44be-46be-a43a-315f2b15ae9b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5be77fb-44be-46be-a43a-315f2b15ae9b.png)'
- en: The lines are printed without the empty lines.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的行不包含空行。
- en: The dot character
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点字符
- en: 'The dot character matches any character except the new line (`\n`). Let''s
    use it against the following file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 点字符匹配除了换行符（`\n`）以外的任何字符。我们可以将其应用于以下文件：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Say we use the following commands:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们使用以下命令：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This pattern matches any line containing `sh` and any text before it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该模式匹配任何包含`sh`以及其之前的任何文本的行：
- en: '![](img/c8a32a75-3f95-4a96-869f-2d85c23a0a56.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8a32a75-3f95-4a96-869f-2d85c23a0a56.png)'
- en: As you can see, it matches the first two lines only because the third line starts
    with `sh`, so no match for the third line.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它只匹配前两行，因为第三行以`sh`开头，所以第三行没有匹配。
- en: The character class
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符类
- en: We saw how to match any character using the dot character. What if you want
    to match a specific set of characters only?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用点字符匹配任何字符。如果你想只匹配特定的一组字符呢？
- en: You can pass the characters you want to match between square brackets `[]` to
    match them, and this is the character class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将你想匹配的字符放在方括号`[]`中进行匹配，这就是字符类。
- en: 'Let''s take the following file as an example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以以下文件为例：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s see how the character class works:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看字符类是如何工作的：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/28fb6091-3614-4e70-91ef-7239f1fdf206.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28fb6091-3614-4e70-91ef-7239f1fdf206.png)'
- en: The character class `[mbr]` matches any of the included characters followed
    by ash, so this matches the three lines.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 字符类`[mbr]`匹配任何一个包含字符，并且后面跟着“ash”，因此它匹配这三行。
- en: 'You can employ it in something useful, such as matching an uppercase or a lower
    case character:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在有用的操作中使用它，例如匹配大写或小写字符：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The character class is negated using the caret character like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 字符类使用插入符号字符来取反，如下所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/34670994-fa8c-4609-9d6c-6e9cdf6c2eeb.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34670994-fa8c-4609-9d6c-6e9cdf6c2eeb.png)'
- en: Here, we match any line that contains ash and starts neither with `b` nor `r`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们匹配任何包含“ash”并且既不以`b`也不以`r`开头的行。
- en: Remember that using the caret character (`^`) outside the square brackets means
    the beginning of a line.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在方括号外使用插入符号字符（`^`）表示行的开头。
- en: Using character class, you specify your characters. What if you have a long
    range of characters?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符类，你可以指定你想要的字符。如果你有一个长范围的字符怎么办？
- en: Ranges of characters
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符范围
- en: 'You can specify a range of characters to match between square brackets as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在方括号中指定一组字符范围，如下所示：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This means the range of characters from `a` to `d`, so `a`, `b`, `c`, and `d`
    are included.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着从 `a` 到 `d` 的字符范围，所以 `a`、`b`、`c` 和 `d` 都包含在内。
- en: 'Let''s use the same previous example file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前的示例文件：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/6f93ec93-4c27-433a-a297-5f0e63776824.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f93ec93-4c27-433a-a297-5f0e63776824.png)'
- en: The character range from `a` to `m` is selected. The third line contains `r`
    before ash, which is not in our range, so only the second line doesn't match.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `a` 到 `m` 的字符范围被选择。第三行包含 `r` 在灰烬之前，这不在我们的范围内，因此只有第二行不匹配。
- en: 'You can use numbers ranges as well:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用数字范围：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This pattern means from `0` to `9` is matched.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模式意味着从 `0` 到 `9` 的字符会被匹配。
- en: 'You can write multiple ranges in the same bracket:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在同一个括号中写多个范围：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/27ed86b0-52da-4632-b4ae-626b7b772dfd.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27ed86b0-52da-4632-b4ae-626b7b772dfd.png)'
- en: In this pattern, from `d` to `h` and from `m` to `z` are selected and since
    the first line contains `b` before ash, only the first line doesn't match.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模式中，从 `d` 到 `h` 和从 `m` 到 `z` 被选中，因为第一行包含 `b` 在灰烬之前，所以只有第一行不匹配。
- en: 'You can use the ranges to select all uppercase and lowercase characters as
    follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用范围选择所有大写和小写字母，如下所示：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Special character classes
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊字符类
- en: We saw how to match a set of characters using the character class, then we saw
    how to match a range of characters using character ranges.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用字符类来匹配一组字符，然后我们看到了如何使用字符范围来匹配一组字符。
- en: 'Actually, the ERE engine offers ready-to-use classes to match some common sets
    of characters as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，ERE 引擎提供了现成的类，用于匹配一些常见的字符集，如下所示：
- en: '| `[[:alpha:]]` | Matches any alphabetical character |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `[[:alpha:]]` | 匹配任何字母字符 |'
- en: '| `[[:upper:]]`         | Matches A–Z uppercase only |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `[[:upper:]]`         | 只匹配 A–Z 大写字母 |'
- en: '| `[[:lower:]]`  | Matches a–z lowercase only |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `[[:lower:]]`  | 只匹配 a–z 小写字母 |'
- en: '| `[[:alnum:]]`         | Matches 0–9, A–Z, or a–z |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `[[:alnum:]]`         | 匹配 0–9、A–Z 或 a–z |'
- en: '| `[[:blank:]] `        | Matches space or Tab only |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `[[:blank:]] `        | 只匹配空格或 Tab |'
- en: '| `[[:space:]]`         | Matches any whitespace character: space, Tab, CR
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `[[:space:]]`         | 匹配任何空白字符：空格、Tab、CR |'
- en: '| `[[:digit:]]`        | Matches from `0` to `9` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `[[:digit:]]`        | 匹配从 `0` 到 `9` 的数字 |'
- en: '| `[[:print:]]`          | Matches any printable character |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `[[:print:]]`        | 匹配任何可打印字符 |'
- en: '| `[[:punct:]]`         | Matches any punctuation character |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `[[:punct:]]`         | 匹配任何标点字符 |'
- en: So, if you want to match uppercase characters, you can use `[[:upper:]]` and
    it will work exactly as the character range [A-Z].
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想匹配大写字母，可以使用 `[[:upper:]]`，它将与字符范围 [A-Z] 完全一样有效。
- en: 'Let''s test one of them against the following example file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对以下示例文件进行测试：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will match the uppercase characters to see how it works:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将匹配大写字母，看看它是如何工作的：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](img/e84ecdd0-f595-4b80-b87a-ca8b9be0b072.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e84ecdd0-f595-4b80-b87a-ca8b9be0b072.png)'
- en: The uppercase special class makes it easy to match any line that contains uppercase
    letters.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 大写字母特殊类使得匹配任何包含大写字母的行变得更加容易。
- en: The asterisk
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 星号
- en: The asterisk is used to match the existence of a character or a character class
    zero or more times.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 星号用于匹配字符或字符类的存在零次或多次。
- en: 'This can be useful when searching for a word with multiple variations or that
    has been misspelled:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在查找一个有多种变体或拼写错误的词时，这会很有用：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](img/eb7e9eba-4b9a-4a35-beac-2b997b5fe68f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb7e9eba-4b9a-4a35-beac-2b997b5fe68f.png)'
- en: If the character `u` doesn't exist at all or exists, that will match the pattern.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符 `u` 根本不存在，或者存在，这都将匹配该模式。
- en: We can benefit from the asterisk character by using it with the dot character
    to match any number of characters.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将星号与点字符一起使用，来匹配任意数量的字符。
- en: 'Let''s see how to use them against the following example file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在以下示例文件中使用它们：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s write a pattern that matches any line that contains the word `this`
    and anything after it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个匹配包含单词 `this` 和其后所有内容的模式：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/4287e60f-8f82-4e9c-8833-85373ef9401f.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4287e60f-8f82-4e9c-8833-85373ef9401f.png)'
- en: The fourth line contains the word `this`, but the first and third lines contain
    a capital `T`, so that it doesn't match.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行包含单词 `this`，但第一行和第三行包含大写字母 `T`，因此不匹配。
- en: The second line contains the word and text after it, whereas the fourth line
    contains the word and nothing after it, and in both cases, the asterisk matches
    zero or more instances.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行包含了单词和其后的文本，而第四行包含了单词和后面没有任何内容，在这两种情况下，星号匹配零个或多个实例。
- en: You can use the asterisk with the character class to match the existence of
    any character inside the character class for one time or none at all.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将星号与字符类一起使用，匹配字符类中任意字符出现一次或没有出现。
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](img/077b53df-f18a-4cd9-9711-aa066c304951.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/077b53df-f18a-4cd9-9711-aa066c304951.png)'
- en: The first line contains the character `o` two times, so it matches.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行包含字符 `o` 两次，因此它匹配。
- en: The second line contains the `n` character, which doesn't exist in the character
    class, so there is no match.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行包含 `n` 字符，它不在字符类中，所以没有匹配。
- en: The third line contains the characters `a` and `r`, once for each, and they
    exist in the character class, so that line matches the pattern too.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行包含字符 `a` 和 `r`，每个字符出现一次，并且它们都在字符类中，因此该行也匹配该模式。
- en: Defining ERE patterns
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 ERE 模式
- en: We saw how easy it is to define BRE patterns. Now, we will see some ERE patterns,
    which are more powerful.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何轻松定义 BRE 模式。现在，我们将看到一些更强大的 ERE 模式。
- en: 'ERE engines understand the following patterns besides BRE patterns:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 BRE 模式外，ERE 引擎还理解以下模式：
- en: Question marks
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问号
- en: Plus signs
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加号
- en: Curly braces
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花括号
- en: Pipe characters
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道字符
- en: Expression grouping
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式分组
- en: By default, AWK supports ERE patterns, and sed needs `-r` to understand these
    patterns.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，AWK 支持 ERE 模式，而 sed 需要 `-r` 来理解这些模式。
- en: The question mark
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问号
- en: 'The question mark matches the existence of the preceding character or character
    class zero or one time only:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 问号匹配前一个字符或字符类出现零次或一次：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/7bcf636d-ba4a-4cb1-bbea-e8e2c994bb96.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bcf636d-ba4a-4cb1-bbea-e8e2c994bb96.png)'
- en: In the first two examples, the character `o` exists zero and one time, whereas
    in the third example, it exists two times, which doesn't match the pattern
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个示例中，字符 `o` 出现零次或一次，而在第三个示例中，它出现了两次，这不符合模式。
- en: 'In the same way, you can use the question mark with the character class:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以相同的方式，你可以将问号与字符类一起使用：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/0e811e77-6ec6-43b0-afb4-e1208a15dcc5.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e811e77-6ec6-43b0-afb4-e1208a15dcc5.png)'
- en: The third example only doesn't match because it contains the `o` character two
    times.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个示例只没有匹配，因为它包含了两次 `o` 字符。
- en: Note that when using the question mark with the character class, it doesn't
    need to have all of character class in the text; one is enough to pass the pattern
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当将问号与字符类一起使用时，文本中不需要包含字符类中的所有字符；只要有一个字符匹配即可通过模式。
- en: The plus sign
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加号
- en: 'The plus sign matches the existence of the preceding character or character
    class one time or more, so it must exist at least once:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 加号匹配前一个字符或字符类出现一次或多次，因此它至少必须出现一次：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/5064634c-3d63-494c-bb9a-c73b222dcb2f.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5064634c-3d63-494c-bb9a-c73b222dcb2f.png)'
- en: The first example doesn't have an `o` character, and that's why it's the only
    example that has no match.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例没有 `o` 字符，这就是为什么它是唯一没有匹配的示例。
- en: 'Also, we can use the plus sign with the character class:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以将加号与字符类一起使用：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/1f9349ec-3cf3-4421-8205-0687c94763f9.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f9349ec-3cf3-4421-8205-0687c94763f9.png)'
- en: The first example only doesn't match because it contains no `o` character at
    all.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例只没有匹配，因为它完全没有 `o` 字符。
- en: Curly braces
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 花括号
- en: 'The curly braces define the number of existence of the preceding character
    or character class:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号定义了前一个字符或字符类出现的次数：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](img/26941951-26af-4be6-a3b5-a6590b37a572.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26941951-26af-4be6-a3b5-a6590b37a572.png)'
- en: The third example doesn't contain any matches because the `o` character exists
    two times. So, what if you want to specify a more flexible number?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个示例没有任何匹配，因为 `o` 字符出现了两次。那么，如果你想指定一个更灵活的数量呢？
- en: 'You can specify a range inside the curly braces:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在花括号内指定一个范围：
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/4077696d-7328-4b22-9f81-a9181f03e081.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4077696d-7328-4b22-9f81-a9181f03e081.png)'
- en: Here, we match the `o` character if it exists one or two times.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们匹配 `o` 字符，如果它出现一次或两次。
- en: 'Also, you can use the curly braces with the character class:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以将花括号与字符类一起使用：
- en: '[PRE31]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](img/8c3c15cb-3de6-4cf6-a140-3fac0523afdd.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c3c15cb-3de6-4cf6-a140-3fac0523afdd.png)'
- en: As expected, if any of the characters `[oa]` exists for one time, the pattern
    will match.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，如果 `[oa]` 中的任何字符出现一次，模式就会匹配。
- en: The pipe character
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道字符
- en: 'The pipe character (`|`) tells the regex engine to match any of the passed
    strings. So, if one of them exists, that is enough for the pattern to match. It''s
    like a logical `OR` between the passed strings:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 管道字符 (`|`) 告诉正则表达式引擎匹配传入的任何字符串。因此，如果其中之一存在，模式就会匹配。这就像是传入字符串之间的逻辑 `OR`：
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](img/34c4b0fa-ea04-4185-a4ae-607b9b44fdc2.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34c4b0fa-ea04-4185-a4ae-607b9b44fdc2.png)'
- en: All the previous examples have a match, since any of the three words exists
    in each example.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前的示例都有匹配，因为每个示例中都有这三个单词中的任意一个。
- en: There are no spaces between the pipes and the words.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 管道符与单词之间没有空格。
- en: Expression grouping
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式分组
- en: 'You can use parentheses `()` to group characters or words to make them one
    piece in the eyes of the regex engine:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用括号`()`来分组字符或单词，使它们在正则表达式引擎看来是一个整体：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](img/65059931-7d4e-4bec-a292-51b6ec6273fe.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65059931-7d4e-4bec-a292-51b6ec6273fe.png)'
- en: Since the `shell scripting` string is grouped with parentheses, it will be treated
    as a single piece.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`shell scripting`字符串被括号分组，它将被当作一个整体处理。
- en: So, if the entire sentence doesn't exist, the pattern will fail.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果整个句子不存在，模式将会失败。
- en: 'You may have realized that you can achieve that without parentheses like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经意识到，你可以像这样不使用括号也能实现相同的效果：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: So, what is the benefit of using parentheses or expression grouping? Check the
    following examples to know the difference.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，使用括号或表达式分组有什么好处呢？请查看以下示例，了解其中的区别。
- en: 'You can use any of the ERE characters with the grouping parentheses:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何ERE字符与分组括号一起使用：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](img/d3416465-eb77-481c-8153-f1fc151c952c.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3416465-eb77-481c-8153-f1fc151c952c.png)'
- en: In the first example, we search for the whole sentence `bash scripting` for
    zero or one time using the question mark, and because the whole sentence doesn't
    exist, the pattern succeeds.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们使用问号查找整个句子`bash scripting`，查找零次或一次，因为整个句子不存在，所以模式成功匹配。
- en: Without expression grouping, you won't get the same result.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有表达式分组，你将无法得到相同的结果。
- en: Using grep
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用grep
- en: If we wanted to talk properly about `grep`, an entire book would not be enough.
    `grep` supports many engines along with BRE and ERE. It supports engines such
    as **Perl-compatible regular expression** (**PCRE**).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要深入讨论`grep`，一本书也不够。`grep`支持许多引擎，包括BRE和ERE。它支持的引擎有**Perl兼容正则表达式**（**PCRE**）。
- en: The `grep` is a very powerful tool that most system administrators use every
    day. We just want to enlighten the point of using BRE and ERE patterns as we did
    with sed and AWK.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`是一个非常强大的工具，几乎所有系统管理员每天都会使用它。我们只是想通过类似于sed和AWK的方式，启发大家如何使用BRE和ERE模式。'
- en: '`grep` tool understands BRE patterns by default, and if you want to use ERE
    patterns, you should use the `-E` option.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`grep`工具默认理解BRE模式，如果你想使用ERE模式，你需要使用`-E`选项。'
- en: 'Let''s work with the following example file and use a BRE pattern:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下示例文件并应用一个BRE模式：
- en: '[PRE36]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s test a BRE pattern:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一个BRE模式：
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](img/87d4985b-8e2b-40ad-bc18-c3d8db1d2c91.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87d4985b-8e2b-40ad-bc18-c3d8db1d2c91.png)'
- en: The results are colored in red.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 结果以红色高亮显示。
- en: 'Let''s test an ERE pattern:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一个ERE模式：
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](img/a6b3f540-f2f8-47d9-ac20-e41e0ef8d74c.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6b3f540-f2f8-47d9-ac20-e41e0ef8d74c.png)'
- en: All other ERE characters can be used in the same way.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 其他所有ERE字符也可以以相同的方式使用。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered regular expressions and the regex engines BRE and
    ERE. We learned how to define patterns for them.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了正则表达式以及正则表达式引擎BRE和ERE。我们学习了如何为它们定义模式。
- en: We learned how to write these patterns for sed, AWK, and `grep`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何为sed、AWK和`grep`编写这些模式。
- en: Also, we saw how the special character classes make it easy to match sets of
    characters.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还看到了特殊字符类如何使匹配字符集变得更加容易。
- en: We saw how to use the powerful ERE patterns and how to group expressions.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用强大的ERE模式以及如何对表达式进行分组。
- en: Finally, we saw how to use the `grep` tool and how to define BRE and ERE patterns.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何使用`grep`工具以及如何定义BRE和ERE模式。
- en: In the next two chapters, we will see some practical examples for AWK.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将看到一些AWK的实际示例。
- en: Questions
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Assume that you have the following file:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你有以下文件：
- en: '[PRE39]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Say you run the following command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你运行以下命令：
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How many lines will be printed in the output?
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将打印多少行？
- en: How many lines will be printed if we use the following command against the previous
    file?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们对前面的文件使用以下命令，会打印多少行？
- en: '[PRE41]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How many lines will be printed if we use the following command against the previous
    sample file?
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们对前面的示例文件使用以下命令，会打印多少行？
- en: '[PRE42]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: What is the output of the following command?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令的输出是什么？
- en: '[PRE43]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Further reading
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading related to this chapter:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下内容，了解与本章相关的进一步阅读资料：
- en: '[https://www.regular-expressions.info/engine.html](https://www.regular-expressions.info/engine.html)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.regular-expressions.info/engine.html](https://www.regular-expressions.info/engine.html)'
- en: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_04.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_04.html)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_04.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/chap_04.html)'
