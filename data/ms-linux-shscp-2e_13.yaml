- en: A Better lastlog with AWK
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWK改进lastlog
- en: We have already seen, in [Chapter 12](313640b7-9414-431e-8b29-b105ea325da0.xhtml),
    *Summarizing Logs with AWK*, how we can create complex reports from large amounts
    of data mined from purely text files. Similarly, we can create extensive reports
    using the output from standard command-line tools, such as the `lastlog` tool.
    In itself, `lastlog` can report the last login time for all users. Often, though,
    we may wish to filter the output from `lastlog`. Perhaps you need to exclude user
    accounts that have never been used to log in to the system. It may also be irrelevant
    to report on `root`, as the account may be predominately used for `sudo` only
    and not used to record regularly for standard logins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第12章](313640b7-9414-431e-8b29-b105ea325da0.xhtml)《使用AWK汇总日志》中看到了如何从大量纯文本文件中挖掘的数据创建复杂报告。类似地，我们可以使用标准命令行工具的输出创建广泛的报告，比如`lastlog`工具。`lastlog`本身可以报告所有用户的最后登录时间。然而，我们通常可能希望过滤`lastlog`的输出。也许你需要排除那些从未用于登录系统的用户账户。报告`root`账户也可能不相关，因为该账户可能主要用于`sudo`，并没有用于常规登录时记录数据。
- en: 'In working through this chapter, we will work with `lastlog` and formatting
    XML data. As this is the last chapter in which we investigate AWK, we will configure
    record separators. We have already seen the use of field separators in AWK but
    we can change the default record separator from a newline to something more specific
    to our needs. More specifically, within this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用`lastlog`并格式化XML数据。由于这是我们研究AWK的最后一章，我们将配置记录分隔符。我们已经看过AWK中字段分隔符的使用，但我们可以将默认的记录分隔符从换行符更改为更符合我们需求的内容。本章将具体介绍：
- en: Using AWK ranges to exclude data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWK范围来排除数据
- en: Conditions based on the number of fields
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于字段数量的条件
- en: Manipulating the AWK record separator to report on XML data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操控AWK记录分隔符来报告XML数据
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter13](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter13)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter13](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter13)'
- en: Using AWK ranges to exclude data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWK范围来排除数据
- en: So far in this book, we have predominately looked at including data with ranges
    either for `sed` or for `awk`. With both of these tools, we can negate the range
    so that we exclude the specified rows. For a perfect explanation, we will use
    the output from the `lastlog` command. This will print all the login data for
    all the users, including accounts that have never been logged in. These accounts
    that have never been logged in might be service accounts or for new users that
    have not logged into the system so far.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们主要关注的是如何在`sed`或`awk`中使用范围来包含数据。对于这两个工具，我们可以否定范围，从而排除指定的行。为了更好地解释这一点，我们将使用`lastlog`命令的输出。它将打印所有用户的登录数据，包括那些从未登录的账户。这些从未登录的账户可能是服务账户，或者是那些至今没有登录系统的新用户。
- en: The lastlog command
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lastlog命令
- en: 'If we look at the output from `lastlog`, when it is used without any options,
    we can begin to understand the issue. From the command line, we execute the command
    as a standard user. There is no requirement to run it as the root account. The
    command is shown in the following example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`lastlog`的输出，在没有任何选项的情况下使用时，我们可以开始理解这个问题。从命令行执行该命令时，作为标准用户执行即可。没有要求必须以root账户运行。命令示例如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The partial output is shown within the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了部分输出：
- en: '![](img/e5e1aa3f-c1b1-4ff9-91c6-4ab01b427a3e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5e1aa3f-c1b1-4ff9-91c6-4ab01b427a3e.png)'
- en: We can see, even from this limited output, that we have a cluttered output due
    to the virtual noise being created by the accounts that have not logged in. It
    is possible to alleviate this to some degree using the `lastlog` options but it
    may not entirely resolve the issue. To demonstrate this, we can add an option
    to `lastlog` to show standard users only and filter out other system and services
    users. This may vary on your system but on the sample CentOS 6 host that I am
    using, the first user will be UID 500. On CentOS 7, standard users UID starts
    from 1000.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使从这个有限的输出中，我们也能看到由于未登录的账户产生的虚拟噪声，我们得到了杂乱的输出。可以使用 `lastlog` 的选项在某种程度上缓解这个问题，但它可能无法完全解决。为了演示这一点，我们可以为
    `lastlog` 添加一个选项，仅显示标准用户，并过滤掉其他系统和服务用户。这在你的系统上可能有所不同，但在我使用的 CentOS 6 示例主机上，第一个用户的
    UID 为 500。在 CentOS 7 中，标准用户的 UID 从 1000 开始。
- en: 'If we use the `lastlog -u 500-5000` command, we will only print data for those
    users with a UID within this range. On the simple demonstration system, we have
    just three user accounts for which the output is acceptable. However, we can understand
    that we may still have some clutter due to these accounts that have not yet been
    used. This is shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 `lastlog -u 500-5000` 命令，我们将只打印 UID 在此范围内的用户数据。在这个简单的演示系统中，我们只有三个用户账户，因此输出是可以接受的。然而，我们也可以理解，由于这些尚未使用的账户，可能仍然会有一些杂乱。这在以下截图中得到了展示：
- en: '![](img/a5d841e5-a646-4048-be7b-b7342e77a971.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5d841e5-a646-4048-be7b-b7342e77a971.png)'
- en: In addition to the superfluous data being printed from `Never logged in` accounts,
    we may only be interested in the `Username` and `Latest` fields. This is another
    reason to support the need to use AWK as our data filter. In this way, we can
    provide both horizontal and vertical data filtering, rows, and columns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从 `Never logged in` 账户打印出来的冗余数据外，我们可能只对 `Username` 和 `Latest` 字段感兴趣。这也是支持使用
    AWK 作为数据过滤工具的另一个原因。这样，我们可以提供水平和垂直的数据过滤，过滤行和列。
- en: Horizontally filtering rows with AWK
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWK 进行水平行过滤
- en: 'To provide this filtering using AWK, we will pipe the data from `lastlog` directly
    to `awk`. We will make use of a simple control file, initially providing the horizontal
    filtering or reducing the rows that we see. First, the command pipeline will be
    as simple as the following command example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 AWK 进行过滤，我们将直接通过管道将 `lastlog` 的数据传递给 `awk`。我们将使用一个简单的控制文件，最初提供水平过滤或减少我们看到的行数。首先，命令管道将像下面的命令示例一样简单：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Of course, the complexity is abstracted from the command line and concealed
    within the control file that we use. Initially, the control file is kept simple
    and reads as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，复杂性已经从命令行中抽象出来，并隐藏在我们使用的控制文件中。最初，控制文件保持简单，内容如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The range is set up as we have seen previously and precedes the main code block.
    Using the exclamation mark in front of the parentheses negates or reverses the
    selected range. The double vertical bar acts as a logical `OR`. We do not include
    lines that contain `Never logged in`, nor do we include lines that start with
    `Username`. This removes the header-line that is printed by `lastlog`. Finally,
    we exclude the root account from the display. This initiates the rows that we
    work with and the main code block will print those lines.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 范围设置如我们之前所见，位于主代码块之前。在括号前加上感叹号会否定或反转所选范围。双竖线作为逻辑 `OR`。我们不包括包含 `Never logged
    in` 的行，也不包括以 `Username` 开头的行。这会去掉 `lastlog` 打印出的表头行。最后，我们排除了 root 账户的显示。这启动了我们处理的行，主代码块将打印出这些行。
- en: Counting matched rows
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算匹配的行数
- en: We may also want to count the number of rows returned by the filter. For example,
    using the internal `NR` variable will show all rows and not just matched rows;
    for us to be able to report the number of users that have logged in, we must use
    our own variable. The following code will maintain the count within the variable
    that we name `cnt`. We increment this using the C style `++` for each iteration
    of the main code block.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还希望计算过滤器返回的行数。例如，使用内部的 `NR` 变量将显示所有行，而不仅仅是匹配的行；为了能够报告已登录的用户数量，我们必须使用自己的变量。以下代码将保持计数在我们命名为
    `cnt` 的变量中。每次主代码块迭代时，我们使用 C 风格的 `++` 来递增它。
- en: 'We can use the `END` code block to display the closing value of this variable:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `END` 代码块来显示这个变量的最终值：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can see from the following code and output how this appears on my system:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下代码和输出中，我们可以看到它在我的系统上是如何表现的：
- en: '![](img/5e652e26-f2d1-4e8d-bc1a-6cce1fc1e14f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e652e26-f2d1-4e8d-bc1a-6cce1fc1e14f.png)'
- en: From the display output, we can now see that we show only users that have logged
    in and, in this case, it is just the single user. However, we may also decide
    that we want to abstract the data further and display only certain fields from
    the matched rows. This should be a simple task but it is complicated, as the number
    of fields will vary depending on how the login was executed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从显示输出中，我们现在可以看到，我们只显示已登录的用户，而在这种情况下，只有单个用户。然而，我们也可以决定进一步抽象数据，并仅显示匹配行中的某些字段。这应该是一个简单的任务，但事实并非如此，因为登录执行的字段数量将不同。
- en: Conditions based on the number of fields
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于字段数量的条件
- en: 'If a user logs onto the server''s physical console directly rather than logging
    on through a remote or graphical pseudo-terminal, then the `lastlog` output will
    not display the host field. To demonstrate this, I have logged on to my CentOS
    host directly to the `tty1` console and avoided the GUI. The output from the previous
    AWK control file shows that we now have the users `tux` and `bob`; `bob` though
    lacks the host field as he is connected to a console:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户直接登录到服务器的物理控制台而不是通过远程或图形伪终端登录，则 `lastlog` 输出将不显示主机字段。为了演示这一点，我已经直接登录到我的
    CentOS 主机上的 `tty1` 控制台，并避免使用图形界面。来自先前 AWK 控制文件的输出显示，我们现在有用户 `tux` 和 `bob`；但是 `bob`
    缺少主机字段，因为他连接到控制台：
- en: '![](img/03832b05-a56d-4a9b-afd8-32169cf5ca23.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03832b05-a56d-4a9b-afd8-32169cf5ca23.png)'
- en: Although in itself it's not an issue, it will be if we want to filter the fields
    and the two row's field numbers will vary where a field is omitted from some lines.
    For `lastlog,` we will have `9` fields for most connections and only `8` fields
    for those that connect directly to the server console. The goal for the application
    is that we print the username and the date, but not the time of the last login.
    We will also print our own header in the `BEGIN` block. To ensure that we use
    the correct placements we will need to count the fields in each row using the
    `NF` internal variable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本身没有问题，但如果我们想要过滤字段，并且两行的字段编号将因一些行中省略了字段而有所不同，则会有问题。对于 `lastlog`，对于大多数连接，我们将有
    `9` 个字段，而对于直接连接到服务器控制台的连接，只有 `8` 个字段。应用程序的目标是打印用户名和日期，但不打印最后登录时间。我们还将在 `BEGIN`
    块中打印我们自己的标题。为了确保我们使用正确的位置，我们将需要使用 `NF` 内部变量来计算每行的字段数。
- en: 'For the `8` fields'' lines we want to print fields `1`, `4`, `5`, and `8`;
    for the longer lines with additional host information, we will use fields `1`,
    `5`, `6` and `9`. We will also use `printf` so that we can align the column data
    correctly. The control file should be edited, as shown in the following example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有 `8` 个字段的行，我们希望打印字段 `1`、`4`、`5` 和 `8`；对于具有额外主机信息的更长行，我们将使用字段 `1`、`5`、`6`
    和 `9`。我们还将使用 `printf` 以便能够正确对齐列数据。控制文件应如下例所示进行编辑：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can see the command and the output it produces in the following screenshot.
    We can see how we can create a more suitable display based on information that
    we want to focus on:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下面的屏幕截图中看到命令及其产生的输出。我们可以看到如何根据我们想要关注的信息创建一个更合适的显示：
- en: '![](img/4470b002-4a96-43a5-b3e6-bae9bce56b27.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4470b002-4a96-43a5-b3e6-bae9bce56b27.png)'
- en: If we look at the output, I have chosen to display the date before the month
    so we do not display the fields in numerical order. This, of course, is a personal
    choice and customizable to suit the way you feel the data should be displayed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看输出，我选择显示日期在月份之前，以便不按数字顺序显示字段。当然，这是个人选择，并可根据您希望显示数据的方式进行定制。
- en: We can use the principles of what we have seen in the `lastlog` control file
    with output from any command and you should practice with the commands that you
    want to filter the data from.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用我们在 `lastlog` 控制文件中看到的原理来处理来自任何命令的输出，并且您应该使用您希望从中过滤数据的命令进行实践。
- en: Manipulating the AWK record separator to report on XML data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操纵 AWK 记录分隔符以报告 XML 数据
- en: So far, while we have been working with AWK we have limited ourselves to working
    with individual rows, with each new row representing a new record. Although this
    is often what we want, where we work with tagged data, such as XML where an individual
    record may span multiple lines. In this case, we may need to look at setting the
    `RS` or `record` separator internal variable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，虽然我们一直在使用 AWK 处理单独的行，每一行都代表一个新记录。尽管这通常是我们想要的情况，但在处理标记数据（例如 XML，其中一个单独记录可能跨越多行）时，我们可能需要设置
    `RS` 或记录分隔符内部变量。
- en: Apache Virtual Hosts
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache 虚拟主机
- en: 'In [Chapter 9](ad6cd6e4-212d-4e2a-8df3-81208f5cb38d.xhtml), *Automating Apache
    Virtual Hosts*, we worked with **Apache Virtual Hosts**. This uses tagged data
    that defines the start and end of each virtual host. Even though we prefer to
    store each virtual host in its own file, they can be combined into a single file.
    Consider the following file that stores the possible virtual host definitions;
    this can be stored as the `virtualhost.conf` file, as shown:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ad6cd6e4-212d-4e2a-8df3-81208f5cb38d.xhtml)，*自动化Apache虚拟主机*，我们使用了**Apache虚拟主机**。这使用了标记数据，定义了每个虚拟主机的开始和结束。即使我们更倾向于将每个虚拟主机存储在自己的文件中，它们也可以合并到一个文件中。考虑以下存储可能的虚拟主机定义的文件；它可以存储为`virtualhost.conf`文件，如下所示：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have the three virtual hosts within a single file. Each record is separated
    by an empty line, meaning that we have two new line characters that logically
    separate each entry. We will explain this to AWK by setting the `RS` variable
    as follows: `RS="\n\n"`. With this in place, we can then print the required virtual
    host record. This will be set in the `BEGIN` code block of the control file.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将三个虚拟主机存储在一个文件中。每个记录由一个空行分隔，这意味着我们有两个换行符，它们在逻辑上分隔了每个条目。我们可以通过将`RS`变量设置为以下方式来向AWK解释这一点：`RS="\n\n"`。设置好后，我们可以打印所需的虚拟主机记录。这将被设置在控制文件的`BEGIN`代码块中。
- en: 'We will also need to dynamically search the command line for the desired host
    configuration. We build this into the control file. The control file should look
    similar to the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要动态地在命令行中搜索所需的主机配置。我们将其构建到控制文件中。控制文件应类似于以下代码：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `BEGIN` block sets the variable and then we move onto the range. The range
    is set so that the record (`$0`) matches (`~`) the `search` variable. We must
    set the variable when `awk` is executed. The following command demonstrates the
    command line execution where the control file and configuration file are located
    within our working directory:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`BEGIN`块设置了变量，然后我们进入了范围部分。这个范围设置使得记录（`$0`）与`search`变量匹配（`~`）。我们必须在执行`awk`时设置该变量。以下命令演示了命令行执行，其中控制文件和配置文件位于我们的工作目录中：'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can see this more clearly by looking at the command and the output that
    is produced in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看下面截图中的命令和输出结果，清楚地看到这一点：
- en: '![](img/44905680-8349-437a-b642-1cda2008fa5b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44905680-8349-437a-b642-1cda2008fa5b.png)'
- en: XML catalog
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML目录
- en: 'We can extend this further into XML files where we may not want to display
    the complete record, but just certain fields. Consider the following product `catalog`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将这个概念扩展到XML文件中，在这些文件中，我们可能不想显示完整的记录，而只是某些特定的字段。考虑以下产品`catalog`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Logically, each record is delimited as before with the empty line. Each field
    though is a little more detailed and we need to use the delimiter as follows:
    `FS="[><]"`. We define either the opening or closing angle bracket as the field
    delimiter.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，每个记录像之前一样以空行分隔。然而，每个字段的细节更加详细，我们需要使用以下分隔符：`FS="[><]"`。我们将开括号或闭括号定义为字段分隔符。
- en: 'To help analyze this, we can print a single record as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助分析，我们可以按照如下方式打印一个单独的记录：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Each angle brace is a field separator, which means that we will have some empty
    fields. We could rewrite this line as a CSV file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个尖括号是一个字段分隔符，这意味着我们将有一些空字段。我们可以将这一行重写为CSV文件：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We just replace each angle bracket with a comma; in this way it is more easily
    read by us. We can see that the content of field `5` is the `top` value.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需将每个尖括号替换为逗号；这样更容易被我们读取。我们可以看到字段`5`的内容是`top`值。
- en: Of course, we will not edit the XML file, we will leave it in the XML format.
    The conversion here is just to highlight how the field separators can be read.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们不会编辑XML文件，我们会保持其XML格式。这里的转换只是为了突出显示字段分隔符是如何读取的。
- en: 'The control file that we use to extract data from the XML file is illustrated
    in the following code example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 用于从XML文件中提取数据的控制文件示例如下：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Within the `BEGIN` code block, we set the `FS` and `RS` variables as we have
    discussed. We also set the **Output Field Separator** (`OFS`) or  to a space.
    In this way, when we print the fields we separate the values with a space rather
    than leaving in the angle brackets. The range makes use of the same match as we
    used before when looking at the virtual hosts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在`BEGIN`代码块中，我们设置了`FS`和`RS`变量，正如我们之前所讨论的。我们还将**输出字段分隔符**（`OFS`）设置为空格。通过这种方式，当我们打印字段时，会用空格分隔各个值，而不是保留尖括号。范围使用了我们在查看虚拟主机时所使用的相同匹配条件。
- en: 'If we need to search for the product drill from within the `catalog`, we can
    use the command in the following example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要在`catalog`中查找产品钻孔，可以使用以下命令：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output in detail:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图详细显示了输出：
- en: '![](img/86b9bef1-16e5-489b-8d1b-5995016e46b3.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86b9bef1-16e5-489b-8d1b-5995016e46b3.png)'
- en: We have now been able to take a rather messy XML file and create readable reports
    from the catalog. The power of AWK is highlighted again and, for us, the last
    time within this book. By now, I hope you too can start to make use of this on
    a regular basis.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经能够处理一个相当杂乱的 XML 文件，并从目录中生成可读的报告。AWK 的强大功能再次得到体现，对于我们来说，这是在本书中的最后一次使用。到现在为止，我希望你也能开始定期使用它。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We had three chapters where we used AWK, starting with some basic usage statements
    in [Chapter 10](e179c20a-9176-473d-b49a-dc3c84d1ffc9.xhtml), *AWK Fundamentals*
    where we became comfortable with AWK. In [Chapter 12](313640b7-9414-431e-8b29-b105ea325da0.xhtml),
    *Summarizing Logs with AWK*, and this chapter, we started building our bespoke
    applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三章使用了 AWK，首先是一些基本用法的介绍，在[第10章](e179c20a-9176-473d-b49a-dc3c84d1ffc9.xhtml)中，*AWK基础知识*，我们熟悉了
    AWK。接着，在[第12章](313640b7-9414-431e-8b29-b105ea325da0.xhtml)中，*使用AWK汇总日志*，以及本章，我们开始构建定制应用程序。
- en: Specifically, in this chapter we saw how we could create reports from the output
    of standard commands, such as `lastlog`. We saw that we could negate ranges and
    additionally make use of the `OR` statement. We then built an application that
    will allow us to query XML data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中我们展示了如何从标准命令的输出（如`lastlog`）中创建报告。我们看到可以否定范围，并额外使用`OR`语句。然后我们构建了一个应用程序，使我们能够查询
    XML 数据。
- en: For the next two chapters, we will move away from shell scripts and look at
    scripts using perl and Python so we can compare these scripting languages and
    make appropriate choices.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，我们将不再使用 Shell 脚本，而是转向使用 Perl 和 Python 脚本，以便比较这些脚本语言并做出合适的选择。
- en: Questions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do we get the users who never logged into the system?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何获取那些从未登录过系统的用户？
- en: From the previous question, how do you count the number of users who never logged
    in?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据前一个问题，如何计算从未登录的用户数量？
- en: How many lines will be printed from the following command?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令将打印多少行？
- en: Further reading
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，进一步阅读与本章相关的资料：
- en: '[https://linux.die.net/man/8/lastlog](https://linux.die.net/man/8/lastlog)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://linux.die.net/man/8/lastlog](https://linux.die.net/man/8/lastlog)'
- en: '[https://en.wikipedia.org/wiki/Lastlog](https://en.wikipedia.org/wiki/Lastlog)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Lastlog](https://en.wikipedia.org/wiki/Lastlog)'
