- en: Chapter 3. CoreOS Autoupdate
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第三章 CoreOS 自动更新
- en: One of the missions of CoreOS is to keep the operating system as secure as possible.
    One way to achieve this is to keep the OS up to date with the latest patches.
    The CoreOS automatic update scheme provides you with a secure, reliable, and robust
    mechanism that provides pushed updates. CoreOS provides enough controls to the
    user to control the update based on their environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 的使命之一是确保操作系统尽可能安全。实现这一目标的一种方法是保持操作系统更新到最新的补丁。CoreOS 自动更新方案为您提供了一个安全、可靠、强大的机制来推送更新。CoreOS
    还提供了足够的控制，让用户根据自己的环境控制更新。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The CoreOS release cycle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 发布周期
- en: The partition scheme used in CoreOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 中使用的分区方案
- en: The CoreOS automatic update infrastructure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 自动更新基础设施
- en: The configuration of the CoreOS update
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 更新的配置
- en: The CoreUpdate commercial service from CoreOS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS 的 CoreUpdate 商业服务
- en: All examples from this chapter will use CoreOS in the AWS environment. There
    is a section on Vagrant CoreOS update where Vagrant-specific CoreOS updates are
    mentioned.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有示例将使用在 AWS 环境中的 CoreOS。文中还提到了一个关于 Vagrant CoreOS 更新的部分，讨论了 Vagrant 特定的
    CoreOS 更新。
- en: The CoreOS release cycle
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 发布周期
- en: 'Alpha, Beta, and Stable are release channels within CoreOS. CoreOS releases
    progress through each channel in this order: Alpha->Beta->Stable. An Alpha channel
    is a development channel. An Alpha release in the Alpha channel gets promoted
    to the Beta channel after reaching defined quality level and becomes a Beta release.
    A Beta release in the Beta channel gets promoted to the Stable channel when it
    gets to production quality and becomes a Stable release. All releases get started
    as Alpha, but the promotion to Beta and Stable happens on the basis of testing.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha、Beta 和 Stable 是 CoreOS 中的发布渠道。CoreOS 的发布按以下顺序通过每个渠道进行：Alpha -> Beta ->
    Stable。Alpha 渠道是开发渠道。Alpha 渠道中的 Alpha 发布在达到定义的质量标准后会晋升到 Beta 渠道，成为 Beta 发布。Beta
    渠道中的 Beta 发布在达到生产质量后会晋升到 Stable 渠道，成为 Stable 发布。所有发布最初都是 Alpha，但晋升到 Beta 和 Stable
    是基于测试结果进行的。
- en: 'The CoreOS release page reflects the latest Alpha, Beta, and Stable releases
    ([https://coreos.com/releases/](https://coreos.com/releases/)). The following
    are the latest releases as of August 19, 2015:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 发布页面反映了最新的 Alpha、Beta 和 Stable 发布（[https://coreos.com/releases/](https://coreos.com/releases/)）。以下是截至
    2015 年 8 月 19 日的最新发布：
- en: '![](img/00401.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00401.jpg)'
- en: The major version number (for example, 766 in 766.3.0) is the number of days
    from July 13, 2013, which was the CoreOS epoch.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 主版本号（例如 766 在 766.3.0 中）是从 2013 年 7 月 13 日开始计算的天数，这一天是 CoreOS 的纪元。
- en: 'As CoreOS is composed of multiple system components such as etcd, fleet, flannel,
    Docker, and RKT, every release will have a particular version of the system components
    based on the stability of individual components. For example, the following are
    the versions of the critical system components as of CoreOS version 808.0.0:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CoreOS 由多个系统组件组成，例如 etcd、fleet、flannel、Docker 和 RKT，每个发布将根据各个组件的稳定性有一个特定版本的系统组件。例如，以下是截至
    CoreOS 版本 808.0.0 时，关键系统组件的版本：
- en: '![](img/00404.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00404.jpg)'
- en: 'The following command can be used to check the CoreOS version in the node.
    The node here is running image `723.3.0`, which was a stable release at that point:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于检查节点中的 CoreOS 版本。此节点运行的是 `723.3.0` 版本，当时是一个稳定版本：
- en: '![](img/00036.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpg)'
- en: 'The following command can be used to check the CoreOS Linux kernel version:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于检查 CoreOS Linux 内核版本：
- en: '![](img/00411.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00411.jpg)'
- en: 'The following are versions of critical system components in CoreOS release
    723.3.0:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 CoreOS 版本 723.3.0 中关键系统组件的版本：
- en: '![](img/00413.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00413.jpg)'
- en: The partition table on CoreOS
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 中的分区表
- en: 'The partition table shows you the disk partitions maintained by the OS. The
    following image shows you a partition table in one of the CoreOS cluster nodes
    using the `sudo cgpt show /dev/xvda` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 分区表展示了操作系统维护的磁盘分区。以下图像展示了在使用 `sudo cgpt show /dev/xvda` 命令时，CoreOS 集群节点中的一个分区表：
- en: '![](img/00084.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpg)'
- en: 'The following screenshot shows the `df –k` output in the same node:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了同一节点中的 `df –k` 输出：
- en: '![](img/00105.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpg)'
- en: 'The following are some notes on the preceding two outputs:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于前两个输出的一些说明：
- en: There are nine partitions in total. The key partitions are `USR-A`, `USR-B`,
    `OEM`, and `ROOT`.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总共有九个分区。关键分区是 `USR-A`、`USR-B`、`OEM` 和 `ROOT`。
- en: System files are in the `USR` partition, user files are in the `ROOT` partition,
    and provider-related files are in the `OEM` partition.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统文件位于`USR`分区，用户文件位于`ROOT`分区，提供商相关的文件位于`OEM`分区。
- en: The `USR` partition is mounted as read-only, and the `ROOT` partition is mounted
    as read-write.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`USR`分区挂载为只读，`ROOT`分区挂载为读写。'
- en: The `ROOT` partition gets mounted as `/`, the `USR-A` or `USR-B` partition gets
    mounted in `/usr`, and the `OEM` partition gets mounted in `/usr/share/oem`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROOT`分区挂载为`/`，`USR-A`或`USR-B`分区挂载为`/usr`，`OEM`分区挂载为`/usr/share/oem`。'
- en: There are two `/usr` partitions, `USR-A` and `USR-B`. By default, the system
    comes up with the `USR-A` partition. When the CoreOS update is done, the root
    partition is downloaded to `USR-B` and, using persistent flags such as `priority`,
    `tries`, and `successful`, the CoreOS bootloader selects the appropriate USR partition
    on bootup. In the preceding example, the `USR-A` partition has priority set to
    `1` and the `USR-B` partition has priority set to `0`, and the CoreOS bootloader
    picks `USR-A`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有两个`/usr`分区，`USR-A`和`USR-B`。默认情况下，系统启动时使用`USR-A`分区。当CoreOS更新完成后，根分区会被下载到`USR-B`，并通过持久性标志如`priority`、`tries`和`successful`，CoreOS启动加载程序会在启动时选择合适的USR分区。在前面的例子中，`USR-A`分区的优先级设置为`1`，`USR-B`分区的优先级设置为`0`，因此CoreOS启动加载程序选择了`USR-A`。
- en: 'I did a manual update of OS and the following output shows the active partition
    being `USR-B` with priority for `USR-B` being higher. The manual update of the
    CoreOS system can be done using the command specified in the following Update
    examples section. The `/usr` directory is now pointing to `/dev/xvda4`, which
    is `USR-B`, and it was earlier pointing to `/dev/xvda3`, which was `USR-A`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我手动更新了操作系统，以下输出显示活动分区为`USR-B`，且`USR-B`的优先级较高。CoreOS系统的手动更新可以使用以下“更新示例”部分指定的命令进行。现在，`/usr`目录指向`/dev/xvda4`，即`USR-B`，而之前指向的是`/dev/xvda3`，即`USR-A`：
- en: '![](img/00257.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00257.jpg)'
- en: CoreOS automatic update
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS自动更新
- en: 'CoreOS relies on the automatic update mechanism to keep the OS up to date.
    The following are some aspects of the CoreOS update:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS依赖于自动更新机制保持操作系统的最新状态。以下是CoreOS更新的几个方面：
- en: The CoreOS update mechanism is based on Google's open source Omaha protocol
    ([https://code.google.com/p/omaha/](https://code.google.com/p/omaha/)) that is
    used in the Chrome browser.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS更新机制基于谷歌开源的Omaha协议（[https://code.google.com/p/omaha/](https://code.google.com/p/omaha/)），该协议用于Chrome浏览器。
- en: Either CoreOS public servers or private servers can be used as an image repository.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用CoreOS公共服务器或私有服务器作为镜像仓库。
- en: The dual partition scheme is used where an update is done to the secondary partition
    while the primary partition is not touched. On reboot, there is a binary swap
    from the primary to the secondary partition. This keeps the update scheme robust.
    If there are issues with the new image, CoreOS automatically rolls back to the
    working image in the other partition.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用双分区方案进行更新，在更新时，次要分区会被更新，而主分区保持不变。重启时，主分区与次要分区之间会进行二进制交换。这保持了更新机制的稳定性。如果新镜像出现问题，CoreOS会自动回滚到另一个分区中正常工作的镜像。
- en: Images are signed and verified on each update.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镜像在每次更新时都会进行签名和验证。
- en: 'The following screenshot shows you the steps for the automatic update:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了自动更新的步骤：
- en: '![](img/00259.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpg)'
- en: Update and reboot services
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更新和重启服务
- en: There are two critical services controlling update and reboot in CoreOS. They
    are `update-engine.service` and `locksmithd.service`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS中有两个控制更新和重启的关键服务，它们是`update-engine.service`和`locksmithd.service`。
- en: Update-engine.service
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update-engine.service`'
- en: '`Update-engine.service` takes care of periodically checking for updates from
    the appropriate release channel specified. A default check for update is done
    10 minutes after reboot or at one-hour intervals.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update-engine.service`负责定期检查指定的适当发布渠道中的更新。默认的更新检查会在重启后的10分钟或每小时一次的间隔内进行。'
- en: 'The following output shows you the status of update-engine.service:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了`update-engine.service`的状态：
- en: '![](img/00261.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00261.jpg)'
- en: 'The release channel is specified in `/etc/coreos/update.conf`. In the following
    node, the release channel is selected as stable. The release channel is derived
    from `cloud-config`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 发布渠道在`/etc/coreos/update.conf`中指定。在以下节点中，选择的发布渠道为稳定版。发布渠道是通过`cloud-config`派生的：
- en: '![](img/00263.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00263.jpg)'
- en: '`Update-engine.service` takes care of updating the appropriate partition, `USR-A`
    or `USR-B`. The currently used partition is not touched.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update-engine.service`负责更新适当的分区，`USR-A`或`USR-B`。当前使用的分区不会被更改。'
- en: 'The following command can be executed to trigger a manual update:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可以执行以触发手动更新：
- en: '`update_engine_client -check_for_update`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_engine_client -check_for_update`'
- en: Debugging update-engine.service
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 调试update-engine.service
- en: Logs for the update service can be checked using `journalctl –u update-engine.service`.
    From the logs, we can identify the Omaha protocol request and response, and debugging
    can be done using error codes in the response.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`journalctl –u update-engine.service`查看更新服务的日志。从日志中，我们可以识别奥马哈协议的请求和响应，并可以使用响应中的错误代码进行调试。
- en: Locksmithd.service
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Locksmithd.service
- en: '`Locksmithd.service` takes care of rebooting the CoreOS node using the selected
    reboot strategy. `Locksmithd.service` runs as a daemon.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locksmithd.service`负责使用选定的重启策略重启CoreOS节点。`Locksmithd.service`作为守护进程运行。'
- en: 'The following output shows you the status of `locksmithd.service`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了`locksmithd.service`的状态：
- en: '![](img/00266.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00266.jpg)'
- en: Locksmith strategy
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Locksmith策略
- en: The following are the four configurable strategies for the CoreOS node reboot
    after a new image update.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CoreOS节点在新镜像更新后重启的四种可配置策略。
- en: The etcd-lock scheme
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: etcd-lock方案
- en: In this scheme, the reboot is done after first taking a lock from `etcd`. In
    a multinode cluster, this works out really well as it prevents all the nodes from
    rebooting at the same time and maintains cluster integrity. We can control the
    number of nodes that can reboot together using the lock count mechanism. The lock
    `max` count specifies the number of nodes that can acquire a lock simultaneously.
    In a three-node cluster, we need to limit the lock `max` count to `1`, but in
    a five-node cluster, we can keep the lock `max` count up to `2`, which allows
    a maximum of two nodes to acquire lock and reboot simultaneously.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方案中，首先从`etcd`获取锁，然后执行重启。在多节点集群中，这种方式效果非常好，因为它防止所有节点同时重启，并保持集群的完整性。我们可以使用锁定计数机制控制可以同时重启的节点数。锁定`最大`计数指定可以同时获取锁的节点数。在三节点集群中，我们需要将锁定`最大`计数限制为`1`，但在五节点集群中，我们可以将锁定`最大`计数保持为`2`，这样最多允许两个节点同时获取锁并重启。
- en: 'The following example shows you how the available lock count varies when we
    do the locking and unlocking operation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了在我们执行锁定和解锁操作时，锁定计数的变化情况：
- en: '![](img/00268.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00268.jpg)'
- en: Reboot
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 重启
- en: In this scheme, the node is rebooted immediately without taking a lock from
    the cluster. This is useful in scenarios where the upgrade is manually controlled
    by the administrator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方案中，节点会立即重启，而无需从集群中获取锁。这在管理员手动控制升级的场景中非常有用。
- en: Best-effort
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 尽力而为
- en: In this scheme, it is first checked whether `etcd` is running. If `etcd` is
    running, the `etcd` lock is acquired and then the rebooting is done. Otherwise,
    reboot is done immediately. This is a variation of the etcd-lock scheme mentioned
    before.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方案中，首先检查`etcd`是否正在运行。如果`etcd`正在运行，则获取`etcd`锁并执行重启。否则，立即执行重启。这是前面提到的etcd-lock方案的变体。
- en: 'Off'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭
- en: This causes locksmithd to exit and do nothing. This option should not be chosen
    unless the administrator wants to control the upgrades with great precision.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致locksmithd退出并不做任何操作。除非管理员希望精确控制升级，否则不应选择此选项。
- en: Groups
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 组
- en: Locksmith groups were introduced in locksmithd version 0.3.1\. With groups,
    we can group a set of CoreOS nodes and locking will be applicable to this group.
    For example, let's say that we have a five-node cluster and two nodes are running
    load balancers. If we set the lock-max-count to `2`, it is possible that both
    the nodes running load balancers can reboot at the same time and we can lose that
    service during this period. To avoid this issue, we can set a different lock `max`
    count for the default group and the `lb` group.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Locksmith组是在locksmithd版本0.3.1中引入的。通过组，我们可以将一组CoreOS节点进行分组，锁定将适用于该组。例如，假设我们有一个五节点集群，其中两个节点正在运行负载均衡器。如果我们将锁定最大计数设置为`2`，那么两个运行负载均衡器的节点可能会同时重启，在此期间我们可能会失去该服务。为避免此问题，我们可以为默认组和`lb`组设置不同的锁定`最大`计数。
- en: 'In the example shown in following screenshot, we have set the lock count of
    `2` for the default group and lock count of `1` for the `lb` group. Groups can
    be defined as part of starting the `locksmithd service`. To put a CoreOS node
    in a locksmith group, we need to start locksmithd with the `--group` option or
    set the `LOCKSMITHD_GROUP` environment variable and restart the locksmithd service:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图示例中，我们为默认组设置了 `2` 的锁定计数，并为 `lb` 组设置了 `1` 的锁定计数。组可以在启动 `locksmithd service`
    时定义。要将 CoreOS 节点放入 locksmith 组，我们需要通过 `--group` 选项启动 locksmithd，或设置 `LOCKSMITHD_GROUP`
    环境变量并重启 locksmithd 服务：
- en: '![](img/00270.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00270.jpg)'
- en: Locksmithctl
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Locksmithctl
- en: Locksmithctl is a frontend CLI to control locksmith. Using this, we can get
    the status of locksmith service, lock and unlock groups, set the `lock max` count,
    and so on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Locksmithctl 是一个用于控制 locksmith 的前端 CLI。通过这个工具，我们可以查看 locksmith 服务的状态、锁定和解锁组、设置
    `lock max` 数量等。
- en: Debugging locksmithd.service
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 调试 locksmithd.service
- en: Logs for this service can be checked with `journalctl –u locksmithd.service`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `journalctl –u locksmithd.service` 检查此服务的日志。
- en: Setting update options
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 设置更新选项
- en: CoreOS update options can be set using either `cloud-config` or by changing
    configuration files manually. Using `cloud-config`, update options are configured
    as part of the node configuration after reboot. With the manual approach, we need
    to start the appropriate update services for changes to take effect. The manual
    approach is used mainly to debug.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 更新选项可以通过 `cloud-config` 或手动更改配置文件来设置。使用 `cloud-config` 时，更新选项作为节点配置的一部分在重启后进行配置。手动方法需要启动适当的更新服务才能使更改生效。手动方法主要用于调试。
- en: Using cloud-config
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cloud-config
- en: The following is a sample `cloud-config` with the release channel group set
    to `stable` and the locksmith reboot strategy set to `etcd-lock`. (The default
    server used is [https://public.update.core-os.net/](https://public.update.core-os.net/),
    so this is not specified here.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例 `cloud-config`，其中发布渠道组设置为 `stable`，而 locksmith 重启策略设置为 `etcd-lock`。（默认使用的服务器是
    [https://public.update.core-os.net/](https://public.update.core-os.net/)，因此此处未指定。）
- en: '`#cloud-config coreos:   etcd2:     # specify the initial size of your cluster with ?size=X
        discovery: https://discovery.etcd.io/eb32a1397bd087f84e65ab802b6aa2f7     advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
        initial-advertise-peer-urls: http://$private_ipv4:2380     listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
        listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001   update:
        reboot-strategy: "etcd-lock"     group: "stable"   units:     - name: etcd2.service
          command: start     - name: fleet.service       command: start`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`#cloud-config coreos:   etcd2:     # 指定 集群的初始大小 ?size=X     discovery: https://discovery.etcd.io/eb32a1397bd087f84e65ab802b6aa2f7
        advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
        initial-advertise-peer-urls: http://$private_ipv4:2380     listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
        listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001   update:
        reboot-strategy: "etcd-lock"     group: "stable"   units:     - name: etcd2.service
          command: start     - name: fleet.service       command: start`'
- en: 'After starting the cluster using the preceding `cloud-config`, we can check
    whether `/etc/coreos/update.conf` is updated with the correct parameters:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用前述 `cloud-config` 启动集群后，我们可以检查 `/etc/coreos/update.conf` 是否已经更新了正确的参数：
- en: '![](img/00273.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00273.jpg)'
- en: Manual configuration
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 手动配置
- en: 'The default reboot strategy is `best-effort`. In the following node, the reboot
    strategy is not specified, so it is using best-effort:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的重启策略是 `best-effort`。在以下节点中，未指定重启策略，因此使用的是 best-effort：
- en: '![](img/00275.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00275.jpg)'
- en: 'Let''s change the reboot strategy to `reboot` in `/etc/coreos/update.conf`.
    We need to restart `locksmithd.service`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将重启策略更改为 `reboot`，并在 `/etc/coreos/update.conf` 中进行修改。然后需要重启 `locksmithd.service`：
- en: '![](img/00277.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00277.jpg)'
- en: 'As shown in the following logs, the reboot strategy is taking effect:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如下日志所示，重启策略正在生效：
- en: '![](img/00280.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00280.jpg)'
- en: Update examples
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更新示例
- en: We can do updates within the same release channel or across release channels.
    If we do updates in the same release channel, the node gets updated to the latest
    version in that release channel. If we do updates across release channels, the
    node gets updated to the latest version in the new release channel.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在同一发布渠道内进行更新，也可以跨发布渠道进行更新。如果我们在同一发布渠道内进行更新，则节点会更新到该发布渠道的最新版本。如果我们跨发布渠道进行更新，则节点会更新到新发布渠道的最新版本。
- en: Updating within the same release channel
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一发布渠道内更新
- en: 'Let''s look at the initial version and reboot strategy. The node is running
    stable version 723.3.0 as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看初始版本和重启策略。节点正在运行稳定版本723.3.0，如下图所示：
- en: '![](img/00282.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00282.jpg)'
- en: Looking at the CoreOS releases page, the latest STABLE release is 766.3.0\.
    If we do an update on the STABLE channel, the node should get updated to 766.3.0.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查看CoreOS发布页面，最新的STABLE版本是766.3.0。如果我们在STABLE渠道上进行更新，节点应该会更新到766.3.0。
- en: 'Let''s trigger the update manually with the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令手动触发更新：
- en: '`update_engine_client -check_for_update`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_engine_client -check_for_update`'
- en: If we don't trigger the update manually, `update-engine` will still do the update
    based on its periodic checks.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有手动触发更新，`update-engine`仍会根据其定期检查自动进行更新。
- en: 'The following logs from `update-engine.service` show the Omaha request to the
    CoreOS public imaging server:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下来自`update-engine.service`的日志显示了Omaha向CoreOS公共映像服务器的请求：
- en: '![](img/00284.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00284.jpg)'
- en: 'The following logs from update-engine show the Omaha response from the CoreOS
    public server giving the image with version 766.3.0:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下来自update-engine的日志显示了来自CoreOS公共服务器的Omaha响应，提供了版本为766.3.0的映像：
- en: '![](img/00287.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00287.jpg)'
- en: 'After the update is successful, the following message appears on the node from
    `locksmithd.service,` indicating that the node will be updated with the new image.
    The new image is updated to the non-active USR partition:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更新成功后，以下信息将出现在节点的`locksmithd.service`中，表明该节点将使用新映像进行更新。新映像将被更新到非活动的USR分区：
- en: '![](img/00289.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00289.jpg)'
- en: 'The following is the node version after reboot. We can see that the version
    is upgraded successfully to 766.3.0:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是重启后的节点版本。我们可以看到版本已成功升级到766.3.0：
- en: '![](img/00291.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00291.jpg)'
- en: Updating from one release channel to another
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个发布渠道更新到另一个发布渠道
- en: 'We can switch release channels by updating `/etc/coreos/update.conf`. These
    are the steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更新`/etc/coreos/update.conf`来切换发布渠道。以下是步骤：
- en: 'Update the release channel group from `stable` to `alpha`, as shown in the
    following screenshots:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将发布渠道组从`stable`更新到`alpha`，如以下截图所示：
- en: '![](img/00294.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/00294.jpg)'
- en: 'Restart `update-engine.service`:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启`update-engine.service`：
- en: '`sudo systemctl restart update-engine`'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sudo systemctl restart update-engine`'
- en: 'The `update-engine` service will check for an update after 10 minutes. We can
    force the update with the following command:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update-engine`服务将在10分钟后检查更新。我们可以通过以下命令强制更新：'
- en: '`update_engine_client -check_for_update`'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`update_engine_client -check_for_update`'
- en: 'The following log shows you that the version 808.0.0 image is being fetched
    now:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下日志显示正在获取版本808.0.0的映像：
- en: '![](img/00296.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00296.jpg)'
- en: 'The following is the version after the node is rebooted. We can see that the
    image is upgraded to the latest alpha release `808.0.0`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是节点重启后的版本。我们可以看到映像已升级到最新的alpha发布`808.0.0`：
- en: '![](img/00300.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00300.jpg)'
- en: CoreUpdate
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: CoreUpdate
- en: 'CoreUpdate is a commercial service provided by CoreOS to manage the customer
    updates of CoreOS clusters. The following are some of the features provided by
    the CoreUpdate service:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CoreUpdate是CoreOS提供的一项商业服务，用于管理CoreOS集群的客户更新。以下是CoreUpdate服务提供的一些功能：
- en: The GUI dashboard provides you with a summary and detailed view of all the updates.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GUI仪表盘为您提供了所有更新的摘要和详细视图。
- en: Custom image servers will be provided on a per customer basis.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户定制的映像服务器将根据每个客户的需求提供。
- en: Server groups can be created so that updates can be done in groups and rate
    limiting can be done on a per group basis.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以创建服务器组，以便进行分组更新，并且可以对每个组进行速率限制。
- en: An HTTP API is provided so that CoreUpdate can be integrated with existing DevOps
    systems available with the customer.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供HTTP API，以便CoreUpdate可以与客户现有的DevOps系统集成。
- en: Images can be hosted on public servers or customer's local servers. This is
    useful from a security perspective so that customers don't have to worry about
    opening up their firewall.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映像可以托管在公共服务器或客户的本地服务器上。从安全角度来看，这非常有用，这样客户就不必担心开放防火墙。
- en: '`Updateservicectl` is provided as a frontend CLI.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Updateservicectl`作为前端CLI提供。'
- en: Vagrant CoreOS update
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant CoreOS 更新
- en: If the Vagrant box is already downloaded, the new CoreOS version will be updated
    only if the box is updated.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Vagrant盒子已经下载，只有当该盒子更新时，新的CoreOS版本才会被更新。
- en: Even though we change the version in Vagrantfile from stable to alpha to beta,
    the new CoreOS version does not get updated on `vagrant reload --provision`. Only
    when we perform vagrant destroy and restart, the new version gets loaded. We can
    directly trigger an update from the CoreOS node using `update-engine`, and it
    works irrespective of the VBOX version.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在 Vagrantfile 中将版本从稳定版更改为 alpha 再到 beta，新的 CoreOS 版本在执行 `vagrant reload
    --provision` 时并未更新。只有在执行 `vagrant destroy` 并重新启动后，新的版本才会加载。我们可以通过 `update-engine`
    直接在 CoreOS 节点上触发更新，并且不受 VBOX 版本的影响。
- en: 'We get the following message when Vagrant CoreOS is not up to date:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Vagrant CoreOS 未更新时，我们会收到以下消息：
- en: '![](img/00302.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00302.jpg)'
- en: 'To update the Vagrant box version, we can perform `vagrant box update` as shown
    in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新 Vagrant box 版本，我们可以执行 `vagrant box update`，如下图所示：
- en: '![](img/00304.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00304.jpg)'
- en: The `vagrant reload` command or `vagrant reload --provision` command do not
    help to update the CoreOS version. We need to destroy and recreate the cluster
    to get the latest version.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`vagrant reload` 命令或 `vagrant reload --provision` 命令无法帮助更新 CoreOS 版本。我们需要销毁并重新创建集群以获取最新版本。'
- en: Summary
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered different aspects of the CoreOS update, including
    the CoreOS release cycle, services controlling the CoreOS update, and options
    available to customers to control their cluster's update strategy. The CoreOS
    update mechanism is simple, unique, and robust, and it takes care of the biggest
    concern in the cloud, which is security. In the next chapter, we will cover details
    on critical CoreOS services—`systemd`, `etcd`, and `fleet`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了 CoreOS 更新的不同方面，包括 CoreOS 发布周期、控制 CoreOS 更新的服务，以及客户控制其集群更新策略的选项。CoreOS
    更新机制简单、独特且强大，能够解决云计算中最大的安全问题。在下一章中，我们将详细介绍关键的 CoreOS 服务——`systemd`、`etcd` 和 `fleet`。
- en: References
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'CoreOS releases: [https://coreos.com/releases/](https://coreos.com/releases/)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoreOS 发布: [https://coreos.com/releases/](https://coreos.com/releases/)'
- en: 'CoreOS update philosophy: [https://coreos.com/using-coreos/updates/](https://coreos.com/using-coreos/updates/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoreOS 更新理念: [https://coreos.com/using-coreos/updates/](https://coreos.com/using-coreos/updates/)'
- en: 'CoreUpdate service: [https://coreos.com/products/coreupdate/](https://coreos.com/products/coreupdate/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoreUpdate 服务: [https://coreos.com/products/coreupdate/](https://coreos.com/products/coreupdate/)'
- en: 'Locksmith GitHub page: [https://github.com/coreos/locksmith](https://github.com/coreos/locksmith)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Locksmith GitHub 页面: [https://github.com/coreos/locksmith](https://github.com/coreos/locksmith)'
- en: 'Update strategies: [https://coreos.com/os/docs/latest/update-strategies.html](https://coreos.com/os/docs/latest/update-strategies.html)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '更新策略: [https://coreos.com/os/docs/latest/update-strategies.html](https://coreos.com/os/docs/latest/update-strategies.html)'
- en: Further reading and tutorials
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读和教程
- en: 'The anatomy of a CoreOS update: [https://www.youtube.com/watch?v=JeICd9XyXfY](https://www.youtube.com/watch?v=JeICd9XyXfY)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoreOS 更新的结构: [https://www.youtube.com/watch?v=JeICd9XyXfY](https://www.youtube.com/watch?v=JeICd9XyXfY)'
- en: 'The Omaha update protocol: [https://github.com/google/omaha](https://github.com/google/omaha)
    and [https://coreos.com/docs/coreupdate/custom-apps/coreupdate-protocol/](https://coreos.com/docs/coreupdate/custom-apps/coreupdate-protocol/)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Omaha 更新协议: [https://github.com/google/omaha](https://github.com/google/omaha)
    和 [https://coreos.com/docs/coreupdate/custom-apps/coreupdate-protocol/](https://coreos.com/docs/coreupdate/custom-apps/coreupdate-protocol/)'
