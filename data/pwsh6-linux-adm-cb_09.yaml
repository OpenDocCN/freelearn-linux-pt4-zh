- en: Performing Calculations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行计算
- en: 'In this chapter, we discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论以下主题：
- en: Performing arithmetic operations
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行算术运算
- en: Performing calculations on the output
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对输出进行计算
- en: Working with the administrative constants
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用行政常量
- en: Working with calculated properties
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用计算属性
- en: Working with binary numbers
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用二进制数字
- en: Performing base conversions
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行进制转换
- en: Technical Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Here are the technical requirements to work with this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章工作的技术要求。
- en: PowerShell installed on the computer. Refer *Installation, Reference and Help*
    for steps.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算机上安装 PowerShell。请参考《安装、参考和帮助》中的步骤。
- en: Visual Studio Code (recommended). Refer the recipe, *Installing Visual Studio
    Code* in the chapter, *Preparing for Administration using PowerShell*.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio Code（推荐）。请参考章节《*使用 PowerShell 准备管理*》中的配方《*安装 Visual Studio Code*》。
- en: Some throw-away files for the recipes. Use the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from
    within the `ch05` directory of the book's GitHub repository.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些用于配方的临时文件。请从书籍 GitHub 仓库中的 `ch05` 目录运行脚本 `Initialize-PacktPs6CoreLinuxLab.ps1`。
- en: The scripts used in this chapter are available at: [https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09](https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的脚本可在以下位置找到：[https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09](https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09)。
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Performing calculations is an integral part of automation. Of course PowerShell
    allows for this; it also takes things up a level by providing administrators with
    what is called Administrative Constants, which help ease calculations. We will
    look into these concepts in the following recipes. We will first look at common
    arithmetic operations, and then, move towards using the concepts on outputs using
    Calculated Properties like we saw in *Passing Objects Through the Pipeline*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 执行计算是自动化的一个关键部分。当然，PowerShell 可以实现这一点；它还通过提供管理员所谓的行政常量来提升操作级别，从而简化计算。我们将在接下来的配方中讨论这些概念。我们将首先介绍常见的算术运算，然后使用计算属性输出的概念，正如我们在*通过管道传递对象*中所看到的那样。
- en: We will also look at cases where we could ease automation using binary numbers
    to identify flags, perform base conversion, and finally, use some of .NET Accelerators/cast
    operators to simplify scripting.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论如何使用二进制数字简化自动化，通过标志识别、进行进制转换，并最终使用一些 .NET 加速器/强制转换运算符来简化脚本编写。
- en: Performing arithmetic operations
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行算术运算
- en: 'As administrators, we do not use much of arithmetic operations like the sin,
    cos, log and exp operations. However, it is possible to do all of them on PowerShell,
    since PowerShell can leverage .NET. In general, we may use these operations as
    administrators: `Abs` (as in absolute), `Ceiling`, `Floor`, `Round` and `Truncate`.
    In this recipe, we will use three of these methods, based on the scenario we have.
    Use of the other methods is very similar. Here is the scenario:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，我们很少使用像正弦、余弦、对数和指数等算术运算。然而，PowerShell 是可以进行这些运算的，因为它能够利用 .NET。通常，管理员可能会使用以下运算：`Abs`（绝对值）、`Ceiling`、`Floor`、`Round`
    和 `Truncate`。在本配方中，我们将根据实际场景使用这三种方法。其他方法的使用方式非常相似。以下是我们的场景：
- en: You have an application that creates logs throughout the day. These logs consume
    a lot of space. You would like to clean up logs that are between 30 and 31 days
    old. You are not allowed to use a dual condition for comparison.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个应用程序，它会在一天中生成日志。这些日志占用了大量空间。你希望清理掉 30 至 31 天前的日志文件。你不能使用双重条件进行比较。
- en: Create a function that looks for files of 30 days of age. Your script should
    also say how much of the log space was cleared, rounded off to the nearest megabyte.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数，查找 30 天前的文件。你的脚本还应该显示清理了多少日志空间，四舍五入到最接近的兆字节。
- en: Getting Ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Run the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05`
    directory of the book's GitHub repository. This is just so we have some files
    to work on. Next, run the script, `Set-LastWriteTime.ps1` from within the `ch09`
    directory of the repository.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从书籍 GitHub 仓库的 `ch05` 目录中运行脚本 `Initialize-PacktPs6CoreLinuxLab.ps1`。这是为了让我们有一些文件可以操作。接下来，从仓库的
    `ch09` 目录中运行脚本 `Set-LastWriteTime.ps1`。
- en: If you would like to specify a path other than `~/random` for the content, add
    `-Path '//your/custom/path'` to the last line of the script. Ensure you do this
    in both the scripts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想指定一个不同于`~/random`的路径用于内容，可以在脚本的最后一行添加`-Path '//your/custom/path'`。请确保在两个脚本中都进行此修改。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作……
- en: Navigate to the directory that contains your lab files; here is where all the
    action happens. If you did not specify a custom -Path when running the scripts,
    it should be `~/random`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到包含实验文件的目录；所有的操作都发生在这里。如果你在运行脚本时没有指定自定义的-Path，默认路径应该是`~/random`。
- en: Open the terminal and, using a code editor (`vi`, `nano` or VS Code), create
    a new file called `Clear-LogFiles.ps1`. Remember, CamelCase is just a convention.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，使用代码编辑器（如`vi`、`nano`或VS Code），创建一个名为`Clear-LogFiles.ps1`的新文件。记住，CamelCase只是一个约定。
- en: Enter the following content. I suggest typing it by yourself rather than copy-pasting
    it.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容。建议自己手动输入，而不是复制粘贴。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is no need to actually delete the files. If you would like to anyway,
    remove the `-WhatIf` switch from line 12.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无需实际删除文件。如果你还是想删除文件，请移除第12行中的`-WhatIf`开关。
- en: It is recommended to use Visual Studio Code to write this script since its IntelliSense
    auto-completion is very helpful. You could write this script at the terminal itself,
    in which case, use shorter versions of parameters and tab-completions as necessary.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用Visual Studio Code来编写这个脚本，因为它的IntelliSense自动完成功能非常有帮助。你也可以直接在终端编写这个脚本，在这种情况下，必要时使用更简短的参数版本和Tab自动补全功能。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The `[math]::` accelerator allows us to use the methods of the `System.Math`
    class. The `Round()` method accepts one or two arguments; in case of a single
    argument, the rounding happens to the nearest integer. The optional second parameter
    specifies the number of digits after the decimal point.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`[math]::`加速器允许我们使用`System.Math`类的方法。`Round()`方法接受一个或两个参数；如果只有一个参数，四舍五入会发生到最接近的整数。可选的第二个参数指定小数点后的位数。'
- en: 'The `Pow()` method is almost self-explanatory: 1024² in our case. The `Floor()`
    method brought down numbers from 30.00 to less than 31, down to 30.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pow()`方法几乎不言自明：在我们的案例中是1024²。`Floor()`方法将30.00的数字降低到小于31的数值，最终降至30。'
- en: 'This is what we did:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做了什么：
- en: 'Listed out the files to delete: we subtracted the `LastWriteTime` from today,
    and performed a Floor operation on it since we were not allowed to use the `-and`
    operator.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出了要删除的文件：我们将`LastWriteTime`与今天的日期进行比较，并对结果进行`Floor`操作，因为我们不允许使用`-and`运算符。
- en: Displayed the files.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示文件。
- en: We performed a remove operation on each of the files, while also adding the
    size of each of the files to `$TotalFileSize`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对每个文件执行了删除操作，同时将每个文件的大小加到`$TotalFileSize`中。
- en: In the end, we divided `$TotalFileSize` by 1024² and rounded it off to the nearest
    MB.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，我们将`$TotalFileSize`除以1024²，并四舍五入到最接近的MB。
- en: See also
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: '[System.Math Methods](https://msdn.microsoft.com/en-us/library/system.math_methods(v=vs.110).aspx)
    (Microsoft documentation)'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[System.Math 方法](https://msdn.microsoft.com/en-us/library/system.math_methods(v=vs.110).aspx)（Microsoft文档）'
- en: Performing calculations on the output
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对输出进行计算
- en: 'In the last recipe, we performed some nifty calculations on the objects themselves,
    and listed out files that were 30 days old. In the process, we also output the
    total amount of space to be cleared. In this recipe, we will output this information
    as a PowerShell object, and also, perform a small calculation during output. Here
    is the scenario:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们对对象本身进行了巧妙的计算，并列出了30天前的文件。在这个过程中，我们还输出了要清理的空间总量。在这个例子中，我们将以PowerShell对象的形式输出这些信息，并且在输出过程中进行一个小的计算。以下是场景：
- en: Modify the script you created in Performing Arithmetic Operations to output
    a structured PSCustomObject. The output should have the total number of files
    in the directory, files that are 30 days old, and the total amount of space cleared
    (without any calculations). Also, separately, show the amount of space cleared
    by the cleanup, in MB.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你在执行算术操作时创建的脚本，使其输出一个结构化的PSCustomObject。输出应包含目录中的文件总数、30天前的文件，以及清理的总空间量（无需进行计算）。另外，单独显示清理过程中释放的空间量，以MB为单位。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有实验文件或在前面的步骤中删除了文件，可以运行脚本`Initialize-PacktPs6CoreLinuxLab.ps1`，该脚本位于书籍GitHub仓库的`ch05`目录中。接着，运行位于`ch09`目录中的`Set-LastWriteTime.ps1`脚本。
- en: How to do it
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现
- en: We will simply build on the previous recipe to save ourselves some time and
    effort. The changes from the script in the previous recipe have been emboldened.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单地在前一个步骤的基础上进行改进，以节省时间和精力。前一个脚本中的更改已加粗。
- en: Open your favourite code editor, enter the following in the file and save the
    file as a `ps1` file.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你最喜欢的代码编辑器，将以下内容输入到文件中，并将文件保存为`ps1`文件。
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Call the PowerShell script.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用PowerShell脚本。
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here is a glimpse of what that outputs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出的一部分。
- en: '![](img/23e66bdf-6918-40c5-a598-2fcce9dc03f6.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23e66bdf-6918-40c5-a598-2fcce9dc03f6.png)'
- en: Now, pick just the `SpaceCleared` parameter.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，仅提取`SpaceCleared`参数。
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice the reference to the `SpaceCleared` property, and the output just before
    the prompt.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意参考`SpaceCleared`属性，并且在提示符之前的输出。
- en: '![](img/f40eaf52-ba68-4227-8ced-94c8e9a8dfdf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f40eaf52-ba68-4227-8ced-94c8e9a8dfdf.png)'
- en: Divide the output by 1024² to get the value in MB.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输出除以1024²，以获得MB为单位的值。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similar to the one above; the total space cleared in MB.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面类似；清理的总空间（单位：MB）。
- en: '![](img/82f3680a-fbf5-46d3-9d2e-614f73356e49.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82f3680a-fbf5-46d3-9d2e-614f73356e49.png)'
- en: How it works
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原理
- en: Not only cmdlets and functions, but scripts also output objects. In the previous
    recipe, this was a string object; in this, it was a `PSCustomObject`. This way,
    even though the information gathered from both the recipes was the same, we were
    able to process the output further by running calculations on the fly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅是cmdlet和函数，脚本也会输出对象。在前面的步骤中，输出是一个字符串对象；在这里，它是一个`PSCustomObject`。这样，尽管从两个步骤中收集到的信息是相同的，我们仍然能够通过动态计算进一步处理输出。
- en: There's more
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: Perform a `Round()` operations on `SpaceCleared` to get the output in MB, with
    two digits after the decimal point.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`SpaceCleared`执行`Round()`操作，以便将输出以MB为单位并保留两位小数。
- en: Show the number of files that were omitted from deletion.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示被排除在删除之外的文件数量。
- en: Assign the output object of the script to a variable: `$FileCleanupInfo = (&
    //path/to/02-Clear-LogFiles.ps1)` in order to make things easier.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本的输出对象赋值给一个变量：`$FileCleanupInfo = (& //path/to/02-Clear-LogFiles.ps1)`，以便更轻松操作。
- en: Working with Administrative Constants
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与管理常量的工作
- en: The one thing that may have irked a few of us was how difficult it was to convert
    the `Length` property to MB. We had to go `[math]::Pow(1024, 2)`. Simplify the
    output of the previous recipe.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可能让我们一些人感到困扰的一件事是将`Length`属性转换为MB是多么困难。我们不得不使用`[math]::Pow(1024, 2)`。简化前面步骤的输出。
- en: Also, imagine that you have these files loaded on a 250 GB SSD, and you would
    like to see what percent of space was cleared.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，假设你在一块250 GB的SSD上加载了这些文件，并且你想查看清理了多少空间的百分比。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有实验文件或在前面的步骤中删除了文件，可以运行脚本`Initialize-PacktPs6CoreLinuxLab.ps1`，该脚本位于书籍GitHub仓库的`ch05`目录中。接着，运行位于`ch09`目录中的`Set-LastWriteTime.ps1`脚本。
- en: How to do it
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现
- en: We will use the same script as the previous recipe.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与前面步骤相同的脚本。
- en: Assign the object returned by the previous recipe to a variable.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前一步骤返回的对象赋值给一个变量。
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Call the `SpaceCleared` property and divide it by Administrative Constants.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`SpaceCleared`属性，并将其除以管理常量。
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice how the results are not just the numbers divided by powers of 1000.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意结果不仅仅是将数字除以1000的幂。
- en: '![](img/d156b713-9b47-4582-b8d7-5a9526c42753.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d156b713-9b47-4582-b8d7-5a9526c42753.png)'
- en: 'To show how much of space got cleared from a 250 GB SSD:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示从250 GB SSD清理了多少空间：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: An almost negligible number in our case, but here it is.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中几乎是一个可以忽略的小数字，但它就在这里。
- en: '![](img/5e03aa51-3d22-4c06-81fd-6b2eb4acd117.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e03aa51-3d22-4c06-81fd-6b2eb4acd117.png)'
- en: How it works
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原理
- en: PowerShell has been created with administrators in mind. Given that we rely
    on a myriad of file operations on a regular basis, PowerShell contains administrative
    constants. These constants represent powers of 1024 (1024¹, 1024², 1024³...).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 是为管理员设计的。考虑到我们定期依赖大量的文件操作，PowerShell 包含了管理员常量。这些常量代表 1024 的幂（1024¹，1024²，1024³
    等等）。
- en: Hard drive and flash drive manufacturers usually use powers of 1000 to represent
    drive sizes. In our recipe, we use the scientific notation to convert the size
    of the drive into bytes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 硬盘和闪存驱动器的制造商通常使用 1000 的幂来表示驱动器大小。在我们的例子中，我们使用科学计数法将驱动器的大小转换为字节。
- en: Working with calculated properties
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用计算属性
- en: If you read through the recipe, *Selecting columns from the output* in *Passing
    Data through the Pipeline*, you may skip this recipe. This recipe has been created
    in the interest of context as well as those who have skipped the said chapter/recipe.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读了 *从输出中选择列* 和 *通过管道传递数据* 的内容，可以跳过本例。此例的目的是为了提供上下文，特别是对于那些跳过了前面章节/示例的读者。
- en: 'Calculated properties is another form of performing calculations on the fly.
    Here is the scenario:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性是另一种即时进行计算的方式。这里是一个场景：
- en: You need a report of all the files present in a certain directory, with the
    names of the files, the last modified date, the full paths and the sizes in MB.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一份报告，列出某个目录中所有文件的文件名、最后修改日期、完整路径和以 MB 为单位的大小。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有实验文件，或者删除了上一个例子中的文件，请从书籍 GitHub 仓库的 `ch05` 目录中运行脚本 `Initialize-PacktPs6CoreLinuxLab.ps1`。接着，从仓库的
    `ch09` 目录中运行脚本 `Set-LastWriteTime.ps1`。
- en: How to do it
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: This is going to be a one-liner.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个单行命令。
- en: At the terminal, type the following and press Enter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，输入以下内容并按 Enter 键。
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: 'A calculated property takes in two things: the name of the property and the
    expression that would produce the desired result. Technically, this is a hashtable
    with `n` (or `Name`) and `e` (or `Expression`) being the two name-value pairs.
    The `Expression` in itself is a script block. When broken down into lines, the
    query looks like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性包含两个部分：属性名称和生成期望结果的表达式。从技术角度来看，它是一个哈希表，其中 `n`（或 `Name`）和 `e`（或 `Expression`）是两个名称-值对。`Expression`
    本身是一个脚本块。当分解为行时，查询如下所示：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since we separated the `Name` and the `Expression` by a line, we don't need
    the semicolon anymore.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们通过一行将 `Name` 和 `Expression` 分开，因此不再需要分号。
- en: Calculated properties come in handy in situation where you don't really want
    to create a new script, but instead, want some information at the terminal itself,
    as though running a query. The value of Name is the name of the property, and
    the values in the column are determined by the expression.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性在不想创建新脚本的情况下非常有用，而是希望在终端本身获取一些信息，就像运行查询一样。`Name` 的值是属性名称，列中的值由表达式决定。
- en: Working with binary numbers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理二进制数字
- en: In the interest of specificity, we are going to use the hexadecimal notification
    for this recipe. If you have worked with colours on your computer, chances are
    that you are aware of RGB. The levels of these primary colours are commonly represented
    as numbers ranging from 0 to 255 (24-bit colours). You may have also come across
    the hexadecimal representation of these colours, especially if you worked with
    HTML/CSS.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保精确，我们将在本例中使用十六进制表示。如果你在电脑上处理过颜色，可能已经知道 RGB。三种原色的级别通常表示为从 0 到 255 的数字（24
    位颜色）。你也许遇到过这些颜色的十六进制表示，特别是在处理 HTML/CSS 时。
- en: The scenario here is to write a simple script that converts any given hexadecimal
    code into decimal RGB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的场景是编写一个简单的脚本，将任何给定的十六进制代码转换为十进制 RGB。
- en: How to do it
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: We will assume that the input is going to be with or without the `#` (as in,
    `55bc9a` or `#55bc9a`).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设输入可能带或不带 `#`（即 `55bc9a` 或 `#55bc9a`）。
- en: 'Open a new PowerShell file and type the following:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 PowerShell 文件，并输入以下内容：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the script.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本。
- en: Enter any valid hexadecimal RGB value, with or without the preceding `#`. Press
    Enter.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入任意有效的十六进制 RGB 值，带或不带前缀 `#`。按 Enter 键。
- en: Here is an example.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例。
- en: '![](img/94d666b2-56dd-468c-8133-e16db174148d.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94d666b2-56dd-468c-8133-e16db174148d.png)'
- en: How it works
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: First, how the script works to separate the R, G and B values. We first trim
    the hexadecimal string to exclude the `#` in case there is one. We need the last
    6 characters of the string. Therefore, we PowerShell to begin the substring at
    1 in case there is a `#` and 0 in case the string is 6 characters long. We then
    pick two characters at a time, starting at 0 (of the trimmed string), 2 and 4.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看看脚本是如何分离 R、G 和 B 值的。我们首先修剪十六进制字符串，以去除其中的 `#`（如果有）。我们需要字符串的最后六个字符。因此，我们让
    PowerShell 从第 1 个字符开始截取子字符串（以防有 `#`），如果字符串有六个字符，则从第 0 个字符开始。接着，我们每次取两个字符，从修剪后的字符串的
    0、2、4 开始。
- en: The conversion happens at the last line. First, we instruct PowerShell that
    we would like an integer output using the cast operator. Then, we tell PowerShell
    that the string is a hexadecimal string by adding `0x` to its beginning.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 转换发生在最后一行。首先，我们指示 PowerShell 使用类型转换运算符将输出结果设为整数。然后，我们告诉 PowerShell 该字符串是一个十六进制字符串，方法是给它加上
    `0x` 前缀。
- en: This is a simple way of converting hexadecimal into integer. Next, we will look
    at a few other conversions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种将十六进制转换为整数的简单方法。接下来，我们将查看其他几种转换方法。
- en: Performing base conversion
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行进制转换
- en: The last recipe was a simple conversion using a cast operator and string addition.
    Next, we will look at converting an integer into multiple bases such as octal,
    hexadecimal and binary strings.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个示例是一个简单的转换，使用了类型转换运算符和字符串相加。接下来，我们将看看如何将一个整数转换为多个进制，比如八进制、十六进制和二进制字符串。
- en: How to do it
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: The input will be taken as a string. The output would also be string, but the
    octal, hexadecimal and binary representations. We will use a .NET accelerator
    for this.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输入将作为字符串处理。输出也将是字符串，但包含八进制、十六进制和二进制表示。我们将使用 .NET 加速器来实现这一点。
- en: 'Open a new PowerShell file and type the following:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的 PowerShell 文件，并输入以下内容：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the script and enter an integer to get the octal, hexadecimal and binary
    representations of it.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本并输入一个整数，即可获得它的八进制、十六进制和二进制表示。
- en: Do not forget to try negative numbers as well.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记尝试负数。
- en: '![](img/fc10c26b-d796-43b9-ac9b-15eba90fa9af.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc10c26b-d796-43b9-ac9b-15eba90fa9af.png)'
- en: How it works
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: This recipe leverages the `[System.Convert]` .NET accelerator. The input and
    the output of the script are strings.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例利用了 `[System.Convert]` .NET 加速器。脚本的输入和输出都是字符串。
- en: 'The `ToString()` method accepts input in the form of int64\. When only one
    argument is passed, the integer is output as it is, except the object type is
    no more `int`, but `string`. The optional second argument passed to the method
    is the base: `2` stands for decimal, `8` stands for octal and `16` stands for
    hexadecimal.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToString()` 方法接受的输入形式为 int64。当只传递一个参数时，整数会按原样输出，但对象类型不再是 `int`，而是 `string`。传递给方法的可选第二个参数是基数：`2`
    代表十进制，`8` 代表八进制，`16` 代表十六进制。'
- en: There's more
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容
- en: When I was learning PowerShell, I came across this recipe by Lee Holmes, where
    he showed how file attribute flags worked in PowerShell. To see what attributes
    are available in PowerShell for files and directories, and see their decimal and
    binary representations, enter the following at the PowerShell prompt.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我学习 PowerShell 时，我遇到了 Lee Holmes 提供的这篇示例，它展示了 PowerShell 中文件属性标志的工作方式。要查看 PowerShell
    中文件和目录的可用属性，以及它们的十进制和二进制表示，可以在 PowerShell 提示符下输入以下内容。
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is what the command gives you.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该命令的输出结果。
- en: '![](img/7dcf63f7-fa21-48b0-8d58-cb8e3480c39e.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7dcf63f7-fa21-48b0-8d58-cb8e3480c39e.png)'
- en: That brings us to the end of this chapter. Basic arithmetic calculations have
    been omitted since they are no different from any of the most common languages.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本章到此结束。基本的算术计算已被省略，因为它们与任何常见的编程语言并无区别。
