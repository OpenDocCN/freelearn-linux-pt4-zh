- en: Chapter 6. IoT – Internet of Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：物联网（IoT）——物联网
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Easy access to hardware
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松访问硬件
- en: Installing the GrovePi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装GrovePi
- en: Controlling devices from a web page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网页控制设备
- en: Connecting to an IoT platform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到物联网平台
- en: Creating an IoT gateway
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建物联网网关
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The recipes in this chapter show how devices and sensors – things – attached
    to the Raspberry Pi can be connected to the **Internet of Things** (**IoT**).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱展示了如何将连接到树莓派的设备和传感器——物品——连接到**物联网**（**IoT**）。
- en: The (**IoT**) describes the Internet when it is being used to enable physical
    objects – Things – to exchange data. When connected to the Internet, the Raspberry
    Pi can participate in the IoT, exchanging real-time data using its **general-purpose
    input/output** (**GPIO**) and other hardware interfaces. This chapter has a collection
    of recipes that show how the Raspberry Pi can participate in the Internet of Things.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: （**物联网**）描述了当互联网被用于使物理物体——物品——交换数据时的状态。当树莓派连接到互联网时，它可以参与物联网，通过其**通用输入/输出**（**GPIO**）和其他硬件接口交换实时数据。本章包含了一些食谱，展示了树莓派如何参与物联网。
- en: The recipes in this chapter are specific to the Raspberry Pi. They utilize the
    hardware interfaces of the Raspberry Pi – the GPIO pins. The concepts can be used
    with other Linux computers; however, the instructions are specific to the Raspberry
    Pi.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱特定于树莓派。它们利用树莓派的硬件接口——GPIO引脚。虽然这些概念可以应用于其他Linux计算机，但这些指令特定于树莓派。
- en: After completing the recipes in this chapter, you will have configured and controlled
    devices and sensors attached directly to the Raspberry Pi and via the GrovePi
    hardware system. You will also have controlled devices attached to the Raspberry
    Pi from a web page hosted on the Raspberry and through the IoT service providers
    SmartLiving.io and ThingBox.io.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章的食谱后，您将能够配置和控制直接连接到树莓派的设备和传感器，或通过GrovePi硬件系统连接的设备。您还将能够通过树莓派上托管的网页和物联网服务提供商SmartLiving.io与ThingBox.io控制连接到树莓派的设备。
- en: Easy access to hardware
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻松访问硬件
- en: This recipe demonstrates how simple it is to access hardware from a Raspberry
    Pi.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱演示了如何轻松从树莓派访问硬件。
- en: In this recipe, an LED connected to one of the Raspberry Pi's GPIO pins is made
    to blink using simple Bash commands (`ls`, `cat`, and `echo`).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，使用简单的Bash命令（`ls`、`cat`和`echo`）使连接到树莓派GPIO引脚的LED闪烁。
- en: After completing this recipe, you will be able to control the GPIO ports attached
    to your Raspberry Pi from the Bash command line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个食谱后，您将能够通过Bash命令行控制连接到树莓派的GPIO端口。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Ingredients:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 配料：
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that is not
    powered on
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未开机的树莓派的初始设置或基础网络设置
- en: An LED
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED
- en: A pushbutton switch
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个推钮开关
- en: Three 330 Ohm resisters
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个330欧姆电阻器
- en: A breadboard
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块面包板
- en: A few breadboarding wires
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些面包板连接线
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱不需要桌面GUI，可以从基于文本的控制台运行，或者从`LXTerminal`中运行。
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果树莓派的安全外壳服务器正在运行，可以使用安全外壳客户端远程完成这个食谱。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to easily accessing hardware from the command line are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行轻松访问硬件的步骤如下：
- en: Before powering on the Raspberry Pi, use the following two diagrams to connect
    a pushbutton switch to GPIO port 23 (pin 16) and an LED to GPIO port 24 (pin 18).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开树莓派电源之前，请使用以下两个图示将推按钮开关连接到GPIO端口23（引脚16），并将LED连接到GPIO端口24（引脚18）。
- en: 'The following diagram shows the component layout for this recipe:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图示显示了本食谱的组件布局：
- en: '![How to do it...](img/B04745_06_01.jpg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B04745_06_01.jpg)'
- en: The pushbutton switch should be connected to pin 2 (5V) on one side. The other
    side of the pushbutton switch should have two 330 Ohm resisters connected – one
    resister leading to pin 6 (GND) and one resistor leading to pin 16 (GPIO 23).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推钮开关应连接到引脚2（5V）的一侧。推按钮开关的另一侧应连接两个330欧姆的电阻器——一个电阻器连接到引脚6（GND），另一个电阻器连接到引脚16（GPIO
    23）。
- en: The LED should be connected to pin 18 (GPIO port 24) on one side. The other
    side of the LED should have a 330 Ohm resistor connected leading to pin 20 (GND).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED应连接到引脚18（GPIO端口24）的一侧。LED的另一侧应连接一个330欧姆的电阻器，电阻器另一端连接到引脚20（GND）。
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Turn the LED around if the first try does not work.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果第一次尝试失败，重新旋转LED。
- en: An LED is a light emitting diode. Diodes only allow current to flow in one direction.
    A reversed diode is a common electronic circuit bug.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LED是一种发光二极管。二极管只允许电流单向流动。反向二极管是常见的电子电路故障。
- en: After you have validated that the pushbutton switch, the LED, and the two 330
    Ohm resistors are connected correctly, power on the Raspberry Pi.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证按钮开关、LED和两个330欧姆电阻连接正确后，启动树莓派。
- en: 'The following diagram shows the pin layout of the Raspberry Pi''s GPIO interface:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图示显示了树莓派GPIO接口的针脚布局：
- en: '![How to do it...](img/B04745_06_02.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B04745_06_02.jpg)'
- en: Log in to the Raspberry Pi either directly or remotely.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接或远程登录到树莓派。
- en: Use the `cd` command to navigate through the Raspberry Pi's kernel parameters
    to the `/sys/class/gpio` directory.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令导航到树莓派内核参数的`/sys/class/gpio`目录。
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use the `ls` command to list the contents of the kernel parameter directory
    containing GPIO parameters and interfaces.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls`命令列出包含GPIO参数和接口的内核参数目录的内容。
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Use the `echo` command to tell the Raspberry Pi's kernel to `export` the interfaces
    to GPIO ports `23` and `24` into user space.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`echo`命令告诉树莓派内核将GPIO端口`23`和`24`的接口`export`到用户空间。
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use the `ls` command to once again display the contents of the kernel parameters
    and interfaces directory, `/sys/class/gpio`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls`命令再次显示内核参数和接口目录`/sys/class/gpio`的内容。
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice the two new user space accessible kernel interfaces to GPIO port 23 (`gpio23`)
    and GPIO port 24 (`gpio24)`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意两个新的用户空间可访问的内核接口：GPIO端口23（`gpio23`）和GPIO端口24（`gpio24`）。
- en: Use the `echo` command to configure GPIO port 23 (`gpio23`) to receive input
    signals (`in`) and GPIO port 24 (`gpio24`) to send output signals (`out`).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`echo`命令将GPIO端口23（`gpio23`）配置为接收输入信号（`in`），将GPIO端口24（`gpio24`）配置为发送输出信号（`out`）。
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Use the `cat` command to see the current state of the pushbutton switch when
    it's not being pressed (`0`) and when it is pressed (`1`).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cat`命令查看当按钮开关未按下（`0`）和按下（`1`）时的当前状态。
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The pushbutton switch works!
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮开关工作正常！
- en: Use the `echo` command to turn the LED on (`1`) and then off (`0`).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`echo`命令打开LED（`1`），然后关闭LED（`0`）。
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The LED works!
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LED工作正常！
- en: Use the following `while` loop to control the LED with the pushbutton. Use *Ctrl-C*
    (`^C`) to stop the `while` loop.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`while`循环控制LED与按钮开关配合使用。使用*Ctrl-C*（`^C`）停止`while`循环。
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The pushbutton switch controls the LED!
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮开关控制LED！
- en: Use the `echo` command to `unexport` GPIO ports `23` and `24` from user space,
    and use the `ls` command to see that the Raspberry Pi kernel has removed the `gpio23`
    and `gpio24` interfaces.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`echo`命令将GPIO端口`23`和`24`从用户空间`unexport`，并使用`ls`命令查看树莓派内核已移除`gpio23`和`gpio24`接口。
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe uses a connected input device (pushbutton switch) to activate an
    output device (LED). The recipe begins by connecting the input and output devices
    to the Raspberry Pi. Once the devices are connected, each of the devices is tested
    individually. Finally, a Bash script activates the output device whenever the
    input device signals.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用一个连接的输入设备（按钮开关）来激活一个输出设备（LED）。步骤首先是将输入和输出设备连接到树莓派。一旦设备连接好，将对每个设备进行单独测试。最后，通过一个Bash脚本，每当输入设备发出信号时，激活输出设备。
- en: Before the Raspberry Pi is powered on two devices, a pushbutton switch and an
    **LED**, are connected to the Raspberry Pi.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在树莓派通电之前，两个设备，一个按钮开关和一个**LED**，已连接到树莓派。
- en: Connect the pushbutton switch to GPIO port 23
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将按钮开关连接到GPIO端口23。
- en: The pushbutton switch acts as an input device. It is connected to +5v on one
    side via pin 2and to GPIO port 23 on the other side via pin 16\. When the pushbutton
    switch is pressed, GPIO port 23 (pin 16) detects a high signal coming from +5v
    (pin 2) through the closed pushbutton switch.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮开关作为输入设备。一端通过第2针连接到+5v，另一端通过第16针连接到GPIO端口23。当按钮开关被按下时，GPIO端口23（第16针）会检测到来自+5v（第2针）通过闭合的按钮开关传来的高电平信号。
- en: In addition to the pushbutton switch, two 330 Ohm resistors are necessary to
    safely complete this part of the circuit. One 330 Ohm resistor is used to limit
    the current flow when the pushbutton switch is pressed (closed) and the signal
    is high. The other 330 Ohm resistor is used to pull the signal down to low when
    the pushbutton switch is not pressed (open).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除了按钮开关外，还需要两个 330 欧姆电阻来安全完成电路的这一部分。一个 330 欧姆电阻用于在按钮开关按下（闭合）且信号高时限制电流流动。另一个 330
    欧姆电阻用于在按钮开关未按下（打开）时将信号拉低到低电平。
- en: The current-limiting resistor connects the pushbutton switch to GPIO port 23
    (pin 16). The pull-down resistor connects GPIO port 23 (pin 16) to GND (pin 6).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 电流限制电阻将按钮开关连接到 GPIO 端口 23（引脚 16）。下拉电阻将 GPIO 端口 23（引脚 16）连接到 GND（引脚 6）。
- en: When the pushbutton switch is open, GPIO port 23 (pin 16) detects a low signal
    coming through the pull-down resistor connected to GND (pin 6). When the pushbutton
    switch is closed, GPIO port 23 (pin 16) detects a high signal coming from +5v
    (pin 2) through the current-limiting resistor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮开关打开时，GPIO 端口 23（引脚 16）通过连接到 GND（引脚 6）的下拉电阻检测到低信号。当按钮开关闭合时，GPIO 端口 23（引脚
    16）通过限流电阻从 +5v（引脚 2）检测到高信号。
- en: Connect the LED to GPIO port 24
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 LED 连接到 GPIO 端口 24
- en: The LED acts as an output device. It is connected to GPIO port 24 (pin 18) on
    one side. On the other side, the LED is connected to a current-limiting 330 Ohm
    resistor leading to GND (pin 20).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: LED 充当输出设备。它一侧连接到 GPIO 端口 24（引脚 18）。另一侧，LED 通过一个限流 330 欧姆电阻连接到 GND（引脚 20）。
- en: When GPIO port 24 (pin 18) emits a high signal, enough current passes through
    the circuit to light the LED. When the signal is low, the LED remains unlit.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GPIO 端口 24（引脚 18）发出高信号时，电路中的足够电流通过以点亮 LED。信号低时，LED 保持未点亮。
- en: Power on and log in
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开机并登录
- en: Once you have validated that the LED, the pushbutton switch, and the three protective
    330 Ohm resistors are connected correctly, turn on the Raspberry Pi and log in.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证了 LED、按钮开关和三个保护用的 330 欧姆电阻正确连接，打开树莓派并登录。
- en: Navigating the Linux kernel with sysfs
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 sysfs 导航 Linux 内核
- en: After you have logged in, the recipe uses the `cd` command to navigate to the
    `/sys/class/gpio` directory within the `sysfs` virtual file system. The `sysfs`
    virtual file system is a user space mapping of Linux kernel parameters and interfaces.
    The kernel parameters for the GPIO interface are accessible from `/sys/class/gpio`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，该示例使用 `cd` 命令导航到 `sysfs` 虚拟文件系统中的 `/sys/class/gpio` 目录。`sysfs` 虚拟文件系统是 Linux
    内核参数和接口的用户空间映射。GPIO 接口的内核参数可以从 `/sys/class/gpio` 访问。
- en: The `ls` command is used to see which GPIO port interfaces are currently exported
    from kernel space to user space. So far, no interfaces have been exported.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ls` 命令查看当前从内核空间导出到用户空间的 GPIO 端口接口。到目前为止，尚未导出任何接口。
- en: 'The gpio directory only contains three entries: two pseudo-parameters, `export`
    and `unexport`; and one interface, `gpiochip0`. The interface to `gpiochip0` is
    not used in this recipe. The two pseudo-parameters are used to `export` and `unexport`
    GPIO port interfaces from kernel space to user space.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: gpio 目录仅包含三个条目：两个伪参数 `export` 和 `unexport`；以及一个接口 `gpiochip0`。本示例未使用 `gpiochip0`
    接口。这两个伪参数用于从内核空间到用户空间导出和取消导出 GPIO 端口接口。
- en: Export GPIO ports 23 and 24
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出 GPIO 端口 23 和 24
- en: The recipe uses the `echo` command to write the numbers 23 and 24 to the `export`
    pseudo-parameter. This tells the Raspberry Pi's Linux kernel to export the interfaces
    to GPIO ports 23 and 24 into user space (at `/sys/class/gpio`).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例使用 `echo` 命令将数字 23 和 24 写入 `export` 伪参数。这告诉树莓派的 Linux 内核将 GPIO 端口 23 和 24
    的接口导出到用户空间（位于 `/sys/class/gpio`）。
- en: The command line for exporting the GPIO port 23 interface, `echo 23 >export`,
    works because it writes (**>**) the number 23 (echo 23) to the Linux kernel pseudo-parameter
    `/sys/class/gpio/export` telling the kernel to create an interface subdirectory
    (gpio23) for GPIO port 23.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 导出 GPIO 端口 23 接口的命令行为 `echo 23 >export`，它有效是因为它将数字 23（echo 23）写入 Linux 内核的伪参数
    `/sys/class/gpio/export`，告诉内核为 GPIO 端口 23 创建一个接口子目录（gpio23）。
- en: After the kernel has been told to export the two GPIO ports, the `ls` command
    is used once again to show that the Linux kernel has created two new GPIO port
    interface subdirectories, one for GPIO port 23, `/sys/class/gpio/gpio23`, and
    one for GPIO port 24, `/sys/class/gpio/gpio24`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核被告知导出两个 GPIO 端口后，再次使用 `ls` 命令显示 Linux 内核已为 GPIO 端口 23 `/sys/class/gpio/gpio23`
    和 GPIO 端口 24 `/sys/class/gpio/gpio24` 创建了两个新的 GPIO 端口接口子目录。
- en: Configure each interface direction as input or output
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置每个接口的方向为输入或输出
- en: The recipe then uses the `echo` command to write (**>**) either `in` (for input)
    or `out` (for output) to the `direction` parameter within each of the GPIO ports'
    interface subdirectories (gpio23 and gpio24).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，方案使用 `echo` 命令将 (**>**) `in`（用于输入）或 `out`（用于输出）写入每个 GPIO 端口接口子目录（gpio23 和
    gpio24）中的 `direction` 参数。
- en: The input device (pushbutton switch) is connected to GPIO port 23, so the direction
    parameter for GPIO port 23 (gpio23) is set to input (`echo in > gpio23/direction`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输入设备（按钮开关）连接到 GPIO 端口 23，因此 GPIO 端口 23（gpio23）的方向参数设置为输入（`echo in > gpio23/direction`）。
- en: The output device (LED) is connected to GPIO port 24, so the direction for GPIO
    port 24 (gpio24) is set to output (`echo out > gpio24/direction`).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出设备（LED）连接到 GPIO 端口 24，因此 GPIO 端口 24（gpio24）的方向设置为输出（`echo out > gpio24/direction`）。
- en: Once the input/output direction for each GPIO port has been configured, the
    interface to each port can be tested.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦每个 GPIO 端口的输入/输出方向被配置完毕，就可以测试每个端口的接口。
- en: Testing the input device
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试输入设备
- en: The input device is tested using the `cat` command to display the value of GPIO
    port 23 (`gpio23/value`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `cat` 命令测试输入设备，显示 GPIO 端口 23 的值（`gpio23/value`）。
- en: The value of GPIO port 23 (`gpio23/value`) is displayed when the pushbutton
    switch is released and when it is being pressed. When the pushbutton switch is
    released (the switch is open), the value of GPIO port 23 (`gpio23/value`) is low
    (0). When the pushbutton switch is pressed (closed), the value is high (1).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮开关释放时以及按下时，GPIO 端口 23（`gpio23/value`）的值会被显示。当按钮开关释放（开关断开）时，GPIO 端口 23（`gpio23/value`）的值为低（0）。当按钮开关被按下（闭合）时，值为高（1）。
- en: Testing the output device
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试输出设备
- en: The output device is tested using the `echo` command.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输出设备通过 `echo` 命令进行测试。
- en: When the value high is sent to GPIO port 24 (echo 1 >gpio24/value), the LED
    glows. When the value low is sent (echo 0 >gpio24/value), the LED stops glowing.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当高电平值发送到 GPIO 端口 24（`echo 1 >gpio24/value`）时，LED 会亮起。当发送低电平值（`echo 0 >gpio24/value`）时，LED
    停止亮起。
- en: Using the input device to activate the output device
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用输入设备激活输出设备
- en: After successfully testing the input (pushbutton switch) and output (LED) devices,
    the recipe connects the two devices with a simple `while` loop.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功测试输入设备（按钮开关）和输出设备（LED）后，该方案将两个设备通过一个简单的 `while` 循环连接起来。
- en: First, the shell variable `in` is defined to be an alias for the value of GPIO
    port 23 (`gpio23/value`) and the variable `out` is defined to be an alias for
    the value of GPIO port 24 (`gpio24/value`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 shell 变量 `in` 定义为 GPIO 端口 23（`gpio23/value`）值的别名，将变量 `out` 定义为 GPIO 端口
    24（`gpio24/value`）值的别名。
- en: Then, the two variables are used in an infinite loop (`while true; do`) that
    reads the input signal from GPIO port 23 (`$(cat in)`) and uses the `echo` command
    to write the signal to GPIO port 24 (`>$out`).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，两个变量被用于一个无限循环（`while true; do`），该循环从 GPIO 端口 23 读取输入信号（`$(cat in)`），并使用 `echo`
    命令将信号写入 GPIO 端口 24（`>$out`）。
- en: While the loop is running, the LED lights whenever the pushbutton switch is
    pressed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环运行时，每当按钮开关被按下，LED 就会亮起。
- en: Pressing *Ctrl+C* stops the loop.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Ctrl+C* 可停止循环。
- en: Cleanup
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理
- en: After running the loop, the `cat` command is used to unexport the Linux kernel
    interfaces from user space to GPIO port 23 (`/sys/class/gpio/gpio23`) and GPIO
    port 24 (`/sys/class/gpio/gpio24`).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行循环后，`cat` 命令用于将 Linux 内核接口从用户空间导出到 GPIO 端口 23 (`/sys/class/gpio/gpio23`)
    和 GPIO 端口 24 (`/sys/class/gpio/gpio24`)。
- en: After the GPIO port interfaces have been unexported, the `ls` command is used
    to validate that the two GPIO port interfaces (`gpio23` and `gpio24`) have been
    removed from the `/sys/class/gpio` user space directory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GPIO 端口接口被取消导出后，使用 `ls` 命令验证这两个 GPIO 端口接口（`gpio23` 和 `gpio24`）是否已从 `/sys/class/gpio`
    用户空间目录中移除。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '**General-purpose** **input/output** ([https://en.wikipedia.org/wiki/General-purpose_input/output](https://en.wikipedia.org/wiki/General-purpose_input/output)):
    This Wikipedia article describes how General-purpose input/output interfaces work.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用输入输出** ([https://en.wikipedia.org/wiki/General-purpose_input/output](https://en.wikipedia.org/wiki/General-purpose_input/output))：这篇维基百科文章描述了通用输入输出接口的工作原理。'
- en: '**sysfs** ([https://en.wikipedia.org/wiki/Sysfs](https://en.wikipedia.org/wiki/Sysfs)):
    This Wikipedia article describes the `sysfs` filesystem, its history, and how
    it works.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sysfs** ([https://en.wikipedia.org/wiki/Sysfs](https://en.wikipedia.org/wiki/Sysfs))：这篇维基百科文章描述了`sysfs`文件系统、它的历史以及工作原理。'
- en: '**Pull-up resistor** ([https://en.wikipedia.org/wiki/Pull-up_resistor](https://en.wikipedia.org/wiki/Pull-up_resistor)):
    This Wikipedia article describes how pull-up resistors are used to ensure a circuit
    has valid logic levels.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上拉电阻** ([https://en.wikipedia.org/wiki/Pull-up_resistor](https://en.wikipedia.org/wiki/Pull-up_resistor))：这篇维基百科文章描述了如何使用上拉电阻来确保电路具有有效的逻辑电平。'
- en: '**Diode** ([https://en.wikipedia.org/wiki/Diode](https://en.wikipedia.org/wiki/Diode)):
    This Wikipedia article explains diodes in great detail.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二极管** ([https://en.wikipedia.org/wiki/Diode](https://en.wikipedia.org/wiki/Diode))：这篇维基百科文章详细解释了二极管。'
- en: '**Bash Guide for Beginners** ([http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)):
    This book is a practical guide for using Bash and the Bash scripting language.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bash初学者指南** ([http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html))：这是一本实用的Bash和Bash脚本语言指南。'
- en: Installing the GrovePi
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GrovePi
- en: This recipe configures access to the Grove Pi extension board for the Raspberry
    Pi.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱配置了对树莓派的Grove Pi扩展板的访问。
- en: The Grove hardware system by Seeed is a Lego-like system for plugging together
    electronic components without the need for soldering.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Seeed的Grove硬件系统是一种类似乐高的系统，可以将电子组件拼接在一起，无需焊接。
- en: The GrovePi by Dexter Industries turns the Raspberry Pi into a central control
    hub for Grove components.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Dexter Industries的GrovePi将树莓派转变为Grove组件的中央控制中心。
- en: 'The following image shows the GrovePi+ installed on a Raspberry Pi 2:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了GrovePi+安装在树莓派2上的样子：
- en: '![Installing the GrovePi](img/B04745_06_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![安装GrovePi](img/B04745_06_03.jpg)'
- en: After completing this recipe, you will be able to control Grove components attached
    to the GrovePi from your Raspberry Pi using the Python scripting language.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本食谱后，您将能够通过Python脚本语言从树莓派控制连接到GrovePi的Grove组件。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Ingredients:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 材料：
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on, but the GrovePi has not yet been installed. You have also logged in
    as the user `pi` (see the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* for how to boot and log in, and the recipes
    in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration* for how
    to log in remotely).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的初始设置或基础网络设置，树莓派已通电，但GrovePi尚未安装。你还需要以`pi`用户登录（参考[第1章](ch01.html "第1章 安装与设置")，*安装与设置*了解如何启动和登录，参考[第2章](ch02.html
    "第2章 管理")，*管理*了解如何远程登录）。
- en: A GrovePi GPIO expansion board.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块GrovePi GPIO扩展板。
- en: A Grove LED.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗Grove LED。
- en: A Grove pushbutton switch.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗Grove按钮开关。
- en: Two Grove connector wires.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两根Grove连接线。
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果树莓派的安全外壳服务器正在运行，本食谱可以通过安全外壳客户端远程完成。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to installing the GrovePi are:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 安装GrovePi的步骤如下：
- en: Before attaching the GrovePi to the Raspberry Pi, use the `git` command to download
    the GrovePi installation files from the `DexterInd/GrovePi` repository on `github.com`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将GrovePi连接到树莓派之前，使用`git`命令从`github.com`上的`DexterInd/GrovePi`仓库下载GrovePi安装文件。
- en: '[PRE9]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Use the `cd` command to navigate to the directory containing the installation
    script, `GrovePi/Scripts`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令切换到包含安装脚本的目录`GrovePi/Scripts`。
- en: '[PRE10]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Use the `sh` command to execute the installation script. The command requires
    super user privileges (use `sudo`).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sh`命令执行安装脚本。该命令需要超级用户权限（使用`sudo`）。
- en: '[PRE11]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As the installation continues, it will prompt for permission to install new
    software packages. Press the *Enter* key to accept the default answer to the prompts
    (`Y`).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中，系统会提示是否安装新的软件包。按*Enter*键接受默认回答（`Y`）。
- en: When the installation script completes, you will be prompted to restart the
    Raspberry Pi. Instead, use the `poweroff` command to shut down the Raspberry Pi.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当安装脚本完成时，系统会提示你重新启动树莓派。相反，请使用`poweroff`命令关闭树莓派。
- en: '[PRE12]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While the Raspberry Pi is shut down and the power has been disconnected, attach
    the GrovePi to the Raspberry Pi.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树莓派关闭且电源已断开时，将GrovePi连接到树莓派。
- en: 'The following image shows how to attach the GrovePi+ to the Raspberry Pi 2:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下图展示了如何将GrovePi+连接到树莓派2：
- en: '![How to do it...](img/B04745_06_04.jpg)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![How to do it...](img/B04745_06_04.jpg)'
- en: After the GrovePi has been attached to the Raspberry Pi, reconnect the power
    and log in once the Raspberry Pi finishes booting.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GrovePi连接到树莓派后，重新连接电源，并在树莓派启动完成后登录。
- en: 'After logging in, use the `i2cdetect` command to validate that the GrovePi
    has been installed correctly. Note: if you are using an original Raspberry Pi,
    use the option `–y 0` instead of `–y 1`.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，使用`i2cdetect`命令验证GrovePi是否已正确安装。注意：如果使用的是原版树莓派，请使用`–y 0`选项，而不是`–y 1`。
- en: '[PRE13]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, use the `apt-get install` command to install the Python setup tools (`python-setuptools`).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`apt-get install`命令安装Python设置工具（`python-setuptools`）。
- en: '[PRE14]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use the `cd` command to navigate to the GrovePi Python software library (`~/GrovePi/Software/Python`).
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令导航到GrovePi Python软件库（`~/GrovePi/Software/Python`）。
- en: '[PRE15]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use the `python setup.py` command to `build` and `install` the `grovepi` module.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python setup.py`命令来`构建`并`安装``grovepi`模块。
- en: '[PRE16]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Attach a `Grove LED` device to port `D2` and a `Grove pushbutton switch` to
    port `D4` of the `GrovePi`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`Grove LED`设备连接到`D2`端口，将一个`Grove 按钮开关`连接到`D4`端口的`GrovePi`上。
- en: A `Grove pushbutton switch` and a `Grove LED` are attached to the `GrovePi+`,
    as depicted in the following image:![How to do it...](img/B04745_06_05.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个`Grove 按钮开关`和一个`Grove LED`已连接到`GrovePi+`，如下图所示：![How to do it...](img/B04745_06_05.jpg)
- en: Now, use the following Python script (`button.py`), to test the `Grove pushbutton
    switch`. Run the test script (`button.py`) twice – once without pressing the pushbutton
    switch (`0`) and once while pressing the pushbutton switch (`1`). Notice the different
    results.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下Python脚本（`button.py`）来测试`Grove 按钮开关`。运行测试脚本（`button.py`）两次——一次不按按钮开关（`0`），一次按下按钮开关（`1`）。注意结果的不同。
- en: '[PRE17]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, use the following Python script (`led.py`) to test the `LED`. When the
    script (`led.py`) is run, the `LED` should glow for one second.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下Python脚本（`led.py`）来测试`LED`。当运行脚本（`led.py`）时，`LED`应持续发光一秒钟。
- en: '[PRE18]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, use the following Python script to light the `LED` whenever the `Grove
    pushbutton switch` is pressed. Press *Ctrl+C* to stop the script.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下Python脚本在按下`Grove 按钮开关`时点亮`LED`。按*Ctrl+C*停止脚本。
- en: '[PRE19]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This recipe uses the GrovePi attached to the Raspberry Pi to activate an output
    device (`Grove LED`) when the state of an attached input device (`Grove pushbutton
    switch`) changes. The recipe begins by connecting the GrovePi and the input and
    output devices to the Raspberry Pi. Once the devices are connected, each of the
    devices is tested individually. Finally, a Python script is used to activate the
    output device whenever the input device changes state.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案使用连接到树莓派的GrovePi，通过输入设备（`Grove 按钮开关`）的状态变化来激活输出设备（`Grove LED`）。该方案首先将GrovePi及输入输出设备连接到树莓派。设备连接后，逐一测试每个设备。最后，使用Python脚本在输入设备状态变化时激活输出设备。
- en: Before the GrovePi is attached to the Raspberry Pi, the GrovePi drivers are
    installed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在将GrovePi连接到树莓派之前，已经安装了GrovePi驱动程序。
- en: Installing the GrovePi drivers and interfaces
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装GrovePi驱动程序和接口
- en: The GrovePi drivers and interfaces are downloaded directly from their source
    repository on GitHub ([https://github.com/](https://github.com/)). The `git clone`
    command uses a secure Internet connection (`https://`) to download the GrovePi
    interfaces and drivers from their repository, `DexterInd/GrovePi`. The downloaded
    files include the installation scripts.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: GrovePi的驱动程序和接口直接从其源代码库（GitHub）下载（[https://github.com/](https://github.com/)）。`git
    clone`命令使用安全的互联网连接（`https://`）从其代码库`DexterInd/GrovePi`下载GrovePi接口和驱动程序。下载的文件包括安装脚本。
- en: The installation script, `install.sh`, is located in the `GrovePi/Scripts` directory.
    The `cd` command is used to navigate to the `GrovePi/Scipts` directory.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 安装脚本`install.sh`位于`GrovePi/Scripts`目录中。使用`cd`命令导航到`GrovePi/Scripts`目录。
- en: In the `GrovePi/Scipts` directory, the `sh` command is used to run the `install.sh`
    script. The script requires super user privileges, so `sudo` is used as a command
    prefix.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GrovePi/Scipts`目录中，使用`sh`命令来运行`install.sh`脚本。该脚本需要超级用户权限，因此在命令前使用`sudo`。
- en: Before starting the installation, the `install.sh` script displays a complete
    list of the changes it will make to your Raspberry Pi. The installation script
    prompts you to continue with the install. Press the *Enter* key to accept the
    defaults to all questions during the installation process.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始安装之前，`install.sh`脚本会显示它将对您的Raspberry Pi进行的所有更改的完整列表。安装脚本提示您继续安装。按*Enter*键接受安装过程中所有问题的默认设置。
- en: After the GrovePi interfaces and drivers are installed, you are prompted to
    restart the Raspberry Pi. Shut down the Raspberry Pi instead, so that you can
    remove the power from the Raspberry Pi and attach the GrovePi to it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完GrovePi接口和驱动程序后，您将提示重新启动Raspberry Pi。相反，请关闭Raspberry Pi，以便您可以断开Raspberry
    Pi的电源并将GrovePi连接到其上。
- en: Attach the GrovePi to the Raspberry Pi
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将GrovePi连接到Raspberry Pi
- en: Follow the manufacturer's instructions on [http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/)
    to attach the GrovePi to the Raspberry Pi.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循制造商在[http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/)上的说明，将GrovePi连接到Raspberry
    Pi。
- en: If you are attaching the original 26 pin GrovePi to one of the 40 pin models
    of the Raspberry Pi, make sure that pin 1 is lined up correctly. Even though the
    GrovePi does not cover all of the pins, it will still work perfectly.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将原始的26针GrovePi连接到40针型号的Raspberry Pi之一，请确保引脚1正确对齐。尽管GrovePi不覆盖所有引脚，但仍将完美工作。
- en: You may need to put a protective layer between the GrovePi and the Raspberry
    Pi to prevent the bottom of the GrovePi from touching the Raspberry Pi's USB connectors.
    A snippet of the electrostatic bag in which the GrovePi was shipped is a perfect
    protective layer.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要在GrovePi和Raspberry Pi之间放置保护层，以防止GrovePi的底部接触到Raspberry Pi的USB连接器。GrovePi运送时所用的静电袋片段是一个完美的保护层。
- en: Power on and log in
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开电源并登录
- en: Once you have validated that the GrovePi is attached to the Raspberry Pi correctly,
    attach the power cable to the Raspberry Pi and log in after it reboots.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦验证GrovePi已正确连接到Raspberry Pi，请将电源电缆连接到Raspberry Pi，并在重新启动后登录。
- en: The `i2cdetect` command is used to validate that the GrovePi has been connected
    correctly. The `–y` option is used to bypass interactive mode. Only the original
    Raspberry Pi uses bus `0`, whereas all of the newer Raspberry Pis use bus `1`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`i2cdetect`命令验证GrovePi是否已正确连接。使用`–y`选项绕过交互模式。只有原始的Raspberry Pi使用总线`0`，而所有新型Raspberry
    Pi使用总线`1`。
- en: If the GrovePi is connected correctly, its chip ID `04` will be displayed at
    address `00 4`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果GrovePi连接正确，其芯片ID为`04`将显示在地址`00 4`处。
- en: Now that the GrovePi has been attached and detected, it is time to install the
    GrovePi's Python language **Application Programming Interface** (**API**).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在GrovePi已经连接并被检测到，是时候安装GrovePi的Python语言**应用程序编程接口**（**API**）了。
- en: Install the Python API
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Python API
- en: Before the GrovePi API can be installed, the Python setup tools need to be installed.
    The `apt-get install` command is used to install the `python-setuptools` software
    package. After Python's setup tools are installed, the GrovePi API can be installed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装GrovePi API之前，需要安装Python设置工具。使用`apt-get install`命令安装`python-setuptools`软件包。安装Python的设置工具后，可以安装GrovePi
    API。
- en: The sources for the GrovePi API are located in the `GrovePi/Software/Python`
    directory. The `cd` command is used to navigate to that directory.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: GrovePi API的源代码位于`GrovePi/Software/Python`目录中。使用`cd`命令导航到该目录。
- en: The `python` command is used to run the `setup.py` script, first to build the
    API and then to install the API. Installation requires super user privileges,
    so `sudo` command is used as a command prefix during `install`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`python`命令来运行`setup.py`脚本，首先构建API，然后安装API。安装需要超级用户权限，因此在`install`期间使用`sudo`命令作为命令前缀。
- en: Once the GrovePi Python API is installed, the hardware devices can be tested.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成GrovePi Python API后，可以测试硬件设备。
- en: Test the Grove pushbutton switch
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试Grove按钮开关
- en: The `cat` command is used to create a new script, `button.py`, which tests the
    state of the `Grove pushbutton switch`. The lines immediately following the `cat`
    command up to the end of the data marker (`<<EOD`) are copied to the new script
    (`>button.py`).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令用于创建一个新的脚本`button.py`，该脚本测试`Grove pushbutton switch`的状态。紧随其后的`cat`命令至数据标记（`<<EOD`）的所有行被复制到新脚本（`>button.py`）。'
- en: The `python` command is used to run the `button.py` test script twice.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`python`命令用于运行`button.py`测试脚本两次。'
- en: The first time the `button.py` script is run, it is run without pressing the
    pushbutton switch. The result is 0 because the switch is open (not pressed).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行`button.py`脚本时，没有按下按键开关。结果为0，因为开关是打开的（未按下）。
- en: The second time the script is run, it is run while pressing the pushbutton switch.
    The result is 1 because the switch is closed (pressed).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次运行脚本时，按下了按键开关。结果为1，因为开关是闭合的（按下）。
- en: Test the Grove LED
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试Grove LED。
- en: The `cat` command is also used to create another test script, `led.py`, which
    tests the `Grove LED`. The lines immediately following the `cat` command up to
    the end of data marker (`<<EOD`) are copied to the new script (`>led.py`).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令还用于创建另一个测试脚本`led.py`，该脚本测试`Grove LED`。紧随其后的`cat`命令至数据标记（`<<EOD`）的所有行被复制到新脚本（`>led.py`）。'
- en: The `python` command is used to run the `led.py` test script. When the script
    (`led.py`) is run, the `Grove LED` should glow for one second.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`python`命令用于运行`led.py`测试脚本。当脚本（`led.py`）运行时，`Grove LED`应该亮起一秒钟。'
- en: Pressing the pushbutton switch lights the LED
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按下按键开关时，LED会亮起。
- en: The `cat` command is used once more to create the `loop.py` Python script. This
    short program will loop forever sending signal values from the input device (pushbutton
    switch) to the output device (LED).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令再次用于创建`loop.py` Python脚本。这个简短的程序将无限循环，发送来自输入设备（按键开关）的信号值到输出设备（LED）。'
- en: The `loop.py` script imports the complete `(*) grovepi` API. It also imports
    the `sleep` function from the `time` API.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop.py`脚本导入了完整的`(*) grovepi` API，并从`time` API中导入了`sleep`函数。'
- en: A variable, `led`, is used to represent digital port `2`, the port that connects
    the LED to the GrovePi. The `pinMode` function from the `grovepi` API is used
    to set the signal direction for the LED port to output.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一个变量`led`用来表示数字端口`2`，即连接LED与GrovePi的端口。`grovepi` API中的`pinMode`函数用于将LED端口的信号方向设置为输出。
- en: Another variable, `button`, is used to represent digital port `4`, the port
    that connects the pushbutton switch to the GrovePi. The `pinMode` function is
    used to set the signal direction for the `button` port to `input`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个变量`button`用来表示数字端口`4`，即连接按键开关与GrovePi的端口。`pinMode`函数用于将`button`端口的信号方向设置为`input`。
- en: The main body of the script is an infinite loop (`while True:`) that only breaks
    when a `KeyboardInterrupt exception` occurs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的主体是一个无限循环（`while True:`），只有在发生`KeyboardInterrupt`异常时才会跳出。
- en: The loop first uses the `digitalRead` function to receive the current value
    of the `button` port. The value received is stored in the variable `state`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 循环首先使用`digitalRead`函数接收`button`端口的当前值。接收到的值存储在变量`state`中。
- en: The value of the `state` variable is then sent to the led port using the `digitalWrite`
    function.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`state`变量的值通过`digitalWrite`函数发送到LED端口。
- en: Before the `while` loop continues, the program sleeps for 0.01 seconds. This
    gives the Raspberry Pi a chance to do something else in between setting the `state`
    of the led port and reading the next `state` from the `button` port.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环继续之前，程序会休眠0.01秒。这样可以给Raspberry Pi一个机会在设置LED端口的`state`和从`button`端口读取下一个`state`之间做些其他操作。
- en: 'The `while` loop listens for two exceptions: `KeyboardInterrupt` and `IOError`.
    When a `KeyboardInterrupt` occurs, the script uses the `digitalWrite` function
    to send the LED port the signal for off (`0`) and the script breaks the `while`
    loop ending the program. When an `IOError` occurs, the message `IOError` is printed.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环监听两种异常：`KeyboardInterrupt`和`IOError`。当发生`KeyboardInterrupt`时，脚本使用`digitalWrite`函数向LED端口发送关闭信号（`0`），并跳出`while`循环结束程序。当发生`IOError`时，打印消息`IOError`。'
- en: The `python` command is used to run the `loop.py` script. While the script is
    running, the LED glows whenever the pushbutton switch is pressed. The LED stops
    glowing whenever the pushbutton switch is released. Use *Ctrl+C* to send a `KeyboardInterrupt`
    exception and end the program.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`python`命令用于运行`loop.py`脚本。当脚本运行时，每当按下按钮开关时，LED会亮起；松开按钮开关时，LED会熄灭。使用*Ctrl+C*发送`KeyboardInterrupt`异常并结束程序。'
- en: There's more…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: The GrovePi expansion board from Dexter Industries can connect the Raspberry
    PI to more than 100 components from the Grove hardware platform developed by Seeed
    Studio. The official website is [http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/).
    These components can be manipulated with simple Python scripts as well as integrated
    into larger applications programmed in C, Go, or Java.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Dexter Industries的GrovePi扩展板可以将树莓派与Seeed Studio开发的Grove硬件平台的100多个组件连接。官方网站是[http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/)。这些组件可以通过简单的Python脚本进行操作，也可以集成到用C、Go或Java编写的更大应用程序中。
- en: In addition to the digital ports used in this recipe, The GrovePi also has analog
    ports that can receive signal levels ranging from 0 to 1023 and can end signal
    levels from 0 to 255\. The GrovePi also has 3 I2C ports and a **Universal Asynchronous
    Receiver/Transmitter** (**UART**) serial port that can be used to communicate
    with more complex devices.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本配方中使用的数字端口外，GrovePi还具有模拟端口，可以接收0到1023之间的信号级别，并可以输出0到255之间的信号级别。GrovePi还具有3个I2C端口和一个**通用异步收发器/传输器**（**UART**）串行端口，可用于与更复杂的设备通信。
- en: Complete GrovePi documentation, including the Python API, can be found on Dexter
    Industries' website. More information about the Grove System can be found on Seeed
    Studio's wiki.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的GrovePi文档，包括Python API，可以在Dexter Industries的网站上找到。更多关于Grove系统的信息可以在Seeed
    Studio的Wiki上找到。
- en: See also
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '**GrovePi**: at [http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/).
    The GrovePi home page has a complete list of compatible sensors and devices.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GrovePi**: 位于[http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/)。GrovePi主页提供了兼容传感器和设备的完整列表。'
- en: '**The Grove System**: [http://www.seeedstudio.com/wiki/Category:Grove](http://www.seeedstudio.com/wiki/Category:Grove).
    This wiki page describes the Lego-like Grove hardware system in more detail.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**The Grove System**: [http://www.seeedstudio.com/wiki/Category:Grove](http://www.seeedstudio.com/wiki/Category:Grove)。该Wiki页面更详细地描述了类似乐高的Grove硬件系统。'
- en: '**The Grove System – Python Library Documentation**: [http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/](http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/).
    This website documents the Python programming language library for the GrovePi.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**The Grove System – Python Library Documentation**: [http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/](http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/)。这个网站记录了GrovePi的Python编程语言库。'
- en: '**Python**: [https://www.python.org/](https://www.python.org/). The Python
    website has complete reference documentation for the Python language.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**: [https://www.python.org/](https://www.python.org/)。Python官网提供了Python语言的完整参考文档。'
- en: '**GrovePi Windows IoT: LED Blink**: [https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38](https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38).
    A blinking LED example for Windows 10 and the GrovePi.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GrovePi Windows IoT: LED Blink**: [https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38](https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38)。这是一个适用于Windows
    10和GrovePi的LED闪烁示例。'
- en: '**Dexter Industries**: [https://en.wikipedia.org/wiki/Dexter_Industries](https://en.wikipedia.org/wiki/Dexter_Industries).
    Dexter Industries is best known for their robotic sensors for the Raspberry Pi.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dexter Industries**: [https://en.wikipedia.org/wiki/Dexter_Industries](https://en.wikipedia.org/wiki/Dexter_Industries)。Dexter
    Industries最著名的是他们为树莓派开发的机器人传感器。'
- en: '**Seeed Studio**: [http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/).
    Seeed is a hardware innovation platform developed in Shenzhen, China.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Seeed Studio**: [http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/)。Seeed是一个位于中国深圳的硬件创新平台。'
- en: '**GitHub**: [http://github.com](http://github.com). GitHub is a collaborative
    repository for open source software.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**: [http://github.com](http://github.com)。GitHub是一个开放源代码软件的协作仓库。'
- en: '**i2cdetect**: [http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect](http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect).
    The Debian man page for i2cdetect documents the command and its options.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**i2cdetect**: [http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect](http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect)。Debian的i2cdetect手册页记录了该命令及其选项。'
- en: Controlling devices from a web page
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网页控制设备
- en: This recipe uses a simple Python script to show how devices attached to the
    Raspberry Pi can be controlled from a web page.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用一个简单的Python脚本，展示了如何从网页控制连接到Raspberry Pi的设备。
- en: The `web.py` programming framework for Python can be used to serve web pages
    from scripts that are written in the Python programming language. This recipe
    features a Python script that serves a web page displaying the current state of
    a GrovePi LED and enables a button on the web page to turn a GrovePi LED on and
    off. It is a simple example, but is an excellent foundation for simple Internet
    of Things projects.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.py` Python编程框架可用于从使用Python编程语言编写的脚本提供网页。本教程介绍了一个Python脚本，用于提供显示GrovePi
    LED当前状态的网页，并允许网页上的按钮打开和关闭GrovePi LED。这是一个简单的示例，但是是简单物联网项目的良好基础。'
- en: After completing this recipe, you will have installed and applied the `web.py`
    Python framework to serve a web page that can be used to turn an LED on and off.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此教程后，您将安装并应用了`web.py` Python框架，用于提供一个可用于打开和关闭LED灯的网页。
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are the ingredients for controlling devices from a web page:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从网页控制设备所需的组件：
- en: An initial setup or basic networking setup for the Raspberry Pi that already
    has the GrovePi interfaces and drivers installed (see the previous recipe, *Installing
    the GrovePi*, for instructions). You have also logged in as the user `pi` (see
    the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"), *Installation
    and Setup*, for how to boot and log in and the recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*, for how to log in remotely).
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于已安装了GrovePi接口和驱动程序的Raspberry Pi的初始设置或基本网络设置（请参见前一教程*安装GrovePi*的说明）。您也已登录为用户`pi`（请参见[第1章](ch01.html
    "Chapter 1. Installation and Setup")的教程，*安装和设置*，了解如何启动和登录，以及[第2章](ch02.html "Chapter 2. Administration")的教程，*Administration*，了解如何远程登录）。
- en: A GrovePi should already be attached to the Raspberry Pi.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GrovePi应该已连接到Raspberry Pi上。
- en: A Grove LED should be attached to port `D2` of the GrovePi.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grove LED应连接到GrovePi的D2端口。
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal` application.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程不需要桌面GUI，可以从基于文本的控制台或`LXTerminal`应用程序运行。
- en: If the Raspberry Pi's secure shell server is running, this recipe can be completed
    remotely using a secure shell client.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Raspberry Pi的安全外壳服务器正在运行，则可以使用安全外壳客户端远程完成此教程。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps to controlling devices from a web page are:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 控制设备从网页的步骤是：
- en: Log in to the Raspberry Pi either directly or remotely.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Raspberry Pi，可以直接或远程登录。
- en: Use the `apt-get install` command to install the `web.py` web framework for
    Python.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`apt-get install`命令为Python安装`web.py`网页框架。
- en: '[PRE20]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After `web.py` is installed, use the `cat` command to create a Python script
    that serves a web page used to turn the Grove LED on and off.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装了`web.py`后，使用`cat`命令创建一个Python脚本，用于提供一个用于打开和关闭Grove LED灯的网页。
- en: '[PRE21]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Use the `python` command to start serving the web page.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python`命令启动网页服务。
- en: '[PRE22]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: From a web browser, you will be able to see the web page. Use the IP address
    of your Raspberry Pi plus the port `8080` to access the web page (for example,
    `http://192.168.2.19:8080`).
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Web浏览器，您可以看到网页。使用您的Raspberry Pi的IP地址加上端口`8080`访问网页（例如，`http://192.168.2.19:8080`）。
- en: The web page displays one button. If the LED is off, the button is labeled `on`.
    If the LED is on, the button is labeled `off`. Clicking the button sets the LED
    as stated by the button's label.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网页显示一个按钮。如果LED灯灭了，按钮标签为`on`。如果LED灯亮了，按钮标签为`off`。点击按钮设置LED灯状态，与按钮标签说明一致。
- en: Use *Ctrl+C* to stop serving the web page.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl+C*停止提供网页服务。
- en: How it works...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下...
- en: After logging in to the Raspberry Pi, the recipe first uses the `apt-get install`
    command to install the `python-webpy` software package. This software package
    contains the `web.py` web framework for Python.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 登录Raspberry Pi后，本教程首先使用`apt-get install`命令安装`python-webpy`软件包。该软件包包含Python的`web.py`网页框架。
- en: The `web.py` web framework is a toolkit for creating web servers that use the
    Python programming language to create web pages. The Python script in this recipe
    also uses the GrovePi API introduced in the previous recipe, *Installing the GrovePi*.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.py`网页框架是用Python编写的，用于创建使用Python编程语言创建网页的Web服务器工具包。本教程中的Python脚本还使用了前一教程中介绍的GrovePi
    API，即*安装GrovePi*。'
- en: Create and run the ledpage website
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建并运行ledpage网站
- en: The `cat` command is used to create a new script, `ledpage.py`. The lines immediately
    following the `cat` command up to the end of the data marker (`<<EOD`) are copied
    to the new script (`>ledpage.py`).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令用于创建一个新的脚本`ledpage.py`。紧随`cat`命令之后的行一直到数据标记（`<<EOD`）结束，都会复制到新的脚本中（`>ledpage.py`）。'
- en: This new script will serve a web page that can be used to control a GrovePi
    LED. In the example script, the LED is attached to port `D2` of the GrovePi.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新脚本将提供一个网页，可以用来控制GrovePi的LED。在示例脚本中，LED连接到GrovePi的`D2`端口。
- en: The `ledpage.py` script is run using the `python` command. When the script is
    run, a web server is started listening on port `8080` of every network interface
    attached to the Raspberry Pi (`http://0.0.0.0`).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`ledpage.py`脚本通过`python`命令运行。运行该脚本时，一个网页服务器会在每个网络接口的`8080`端口上启动，监听来自Raspberry
    Pi的请求（`http://0.0.0.0`）。'
- en: The output of the web server can be viewed in a web browser. Open a browser
    and browse to `http://ipaddress:8080`, the URL of the running `ledpage.py` script.
    Replace the `ipaddress` in the URL with the IP address of your Raspberry Pi (instructions
    for determining the IP address can be found in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration*).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在网页浏览器中查看网页服务器的输出。打开浏览器，访问`http://ipaddress:8080`，即运行`ledpage.py`脚本的网址。将网址中的`ipaddress`替换为你Raspberry
    Pi的IP地址（有关如何确定IP地址的说明，请参见[第2章](ch02.html "第2章 管理")，*管理*）。
- en: Action URLs
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作网址
- en: The default view (`http://ipaddress:8080/`) shows a single button that can be
    used to change the current state of the LED. The button is labeled `on` when the
    LED is off and it's labeled `off` when the LED is on. When clicked, the button
    turns the LED to the labeled state.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 默认视图（`http://ipaddress:8080/`）显示一个按钮，用于更改LED的当前状态。当LED关闭时，按钮上标注为`on`，当LED打开时，按钮上标注为`off`。点击按钮后，LED将切换到按钮上标注的状态。
- en: When the button is labeled `on`, clicking the button sends the browser to the
    URL `http://ipaddress:8080/on`; and when the button is labeled `off`, clicking
    the button sends the browser to the URL `http://ipaddress:8080/off`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮上标注为`on`时，点击按钮会将浏览器引导到网址`http://ipaddress:8080/on`；当按钮上标注为`off`时，点击按钮会将浏览器引导到网址`http://ipaddress:8080/off`。
- en: Browsing to the `/on` URL turns the light on and displays an `off` button. Browsing
    to the `/off` URL turns the light off and displays an `on` button. The action
    URLs, `/on` and `/off`, are defined in `ledpage.py`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到`/on`网址会开启灯光，并显示一个`off`按钮。浏览到`/off`网址会关闭灯光，并显示一个`on`按钮。这些操作网址`/on`和`/off`在`ledpage.py`中定义。
- en: Use Ctrl+C to quit
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ctrl+C退出
- en: The Python web server continues to run until *Ctrl+C* is pressed.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Python网页服务器会持续运行，直到按下*Ctrl+C*。
- en: There's more…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: 'The `ledpage.py` script is a simple yet complete example of a web service that
    controls a device attached to the Raspberry Pi. The script can be broken into
    four parts: initialization, the `request handler` class, the `html_page` function,
    and the `main` loop.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`ledpage.py`脚本是一个简单而完整的网页服务示例，用于控制连接到Raspberry Pi的设备。该脚本可以分为四个部分：初始化、`request
    handler`类、`html_page`函数和`main`循环。'
- en: Initialization
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: 'The script begins with two `import` statements: one for the `grovepi` API and
    one for the `web` API. The `web` API is used to set up the web server and the
    `grovepi` API is used to connect to the Grove LED.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本以两个`import`语句开始：一个用于`grovepi` API，另一个用于`web` API。`web` API用于设置网页服务器，`grovepi`
    API用于连接到Grove LED。
- en: 'After the `import` statements, two constants are defined: `LED` and `URLS`.
    The `LED` constant defines which digital output port will be used on the GrovePi
    (`2`), and the `URLS` constant defines a mapping between a regular expression
    (`/(.*)`) and a request handler (`request_handler`).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在`import`语句之后，定义了两个常量：`LED`和`URLS`。`LED`常量定义了将用于GrovePi的数字输出端口（`2`），而`URLS`常量定义了正则表达式（`/(.*)`）和请求处理器（`request_handler`）之间的映射。
- en: The defined regular expression (`/(.*)`) matches all URLs. The matched part
    of the URL, anything after the slash (`(.*)`), will be passed to the `request_handler`
    (as `url_match`).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 定义的正则表达式（`/(.*)`）匹配所有网址。网址中匹配的部分，即斜杠后面的内容（`(.*)`），将被传递给`request_handler`（作为`url_match`）。
- en: The request_handler class
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`request_handler`类'
- en: The `request_handler` class defines how HTTP requests are handled by the web
    server. In this script, only the `GET` method of the **HyperText Transfer Protocol**
    (**HTTP**) is implemented.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`request_handler`类定义了如何处理网页服务器的HTTP请求。在这个脚本中，只实现了**超文本传输协议**（**HTTP**）的`GET`方法。'
- en: When you browse to the Python web server's URL (`http://ipaddress:8080`), a
    `GET` method is received by the web server and the `GET` method (`GET ( self,
    url_match )`) of the `request_handler` class is called.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当你浏览到 Python Web 服务器的 URL（`http://ipaddress:8080`）时，Web 服务器会收到一个 `GET` 方法，并且会调用
    `request_handler` 类的 `GET` 方法（`GET ( self, url_match )`）。
- en: The `GET` method uses the `web` API function `header` to set the `Content-type`
    of the HTTP response to be `text/html` and the character set encoding to be UTF-8
    (`charset=utf-8`). The `Content-type` response header tells the browser what type
    of web content (web page, plain text, image, audio, video, and so on) is located
    at this URL. The response for this URL is a web page (`text/html`) that uses the
    UTF-8 character set.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 方法使用 `web` API 函数 `header` 来设置 HTTP 响应的 `Content-type` 为 `text/html`，并且字符集编码为
    UTF-8（`charset=utf-8`）。`Content-type` 响应头告诉浏览器这个 URL 下的内容类型是什么（网页、纯文本、图片、音频、视频等）。该
    URL 的响应是一个使用 UTF-8 字符集的网页（`text/html`）。'
- en: Then, the `GET` method checks the value of the `url_match` parameter.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`GET` 方法会检查 `url_match` 参数的值。
- en: When the `url_match` is `on` (`http://ipaddress:8080/on`), the `grovepi` API
    function `digitalWrite` is used to first turn the `LED` on (`1`) and then `return`
    an `html_page` to the browser with an `off` button.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `url_match` 为 `on`（`http://ipaddress:8080/on`）时，`grovepi` API 函数 `digitalWrite`
    会首先打开 `LED`（`1`），然后将带有 `off` 按钮的 `html_page` 返回给浏览器。
- en: When the `url_match` is `off` (`http://ipaddress:8080/off`), the `digitalWrite`
    function is used to turn the `LED` off (`0`) and an `html_page` is `returned`
    to the browser with an `on` button.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `url_match` 为 `off`（`http://ipaddress:8080/off`）时，`digitalWrite` 函数会关闭 `LED`（`0`），并将带有
    `on` 按钮的 `html_page` 返回给浏览器。
- en: If the matched URL (`url_match`) is neither `on` nor `off`, an `html_page` with
    an `on` button is `returned` to the browser. The state of the `LED` is not changed.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果匹配的 URL（`url_match`）既不是 `on` 也不是 `off`，则会将带有 `on` 按钮的 `html_page` 返回给浏览器。此时
    `LED` 的状态不会改变。
- en: The html_page function
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: html_page 函数
- en: The `html_page` function (`html_page( state )`) renders the HTML that will be
    sent to the browser to display the web page.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`html_page` 函数（`html_page( state )`）渲染将要发送给浏览器的 HTML，以显示网页。'
- en: The function has one parameter, `state`, which is used to specify the label
    (`value`) for the button (`<input type="submit">`) and the `action` for the HTML
    `<form>` tag.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数有一个参数 `state`，用于指定按钮（`<input type="submit">`）的标签（`value`）和 HTML `<form>`
    标签的 `action`。
- en: A string variable, `form`, is created to build the HTML `<form>` part of the
    web page.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个字符串变量 `form` 来构建网页的 HTML `<form>` 部分。
- en: The `action` attribute of the HTML `<form>` tag is set either to `/on` or `/off`
    depending on the value of the `state` parameter. The `action` attribute defines
    the URL where the browser will be sent when the HTML `<form>` is submitted (that
    is, when the button is pressed).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: HTML `<form>` 标签的 `action` 属性根据 `state` 参数的值设置为 `/on` 或 `/off`。`action` 属性定义了当
    HTML `<form>` 被提交时（即按钮被按下时），浏览器会被发送到的 URL。
- en: The `value` attribute (the label) of the `<input type="submit">` tag (the button)
    is set either to `on` or to `off` depending on the value of the `state` parameter.
    When clicked, the tag (the button) will submit the HTML `<form>`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input type="submit">` 标签（按钮）的 `value` 属性（标签）根据 `state` 参数的值设置为 `on` 或 `off`。点击按钮时，该标签将提交
    HTML `<form>`。'
- en: Once the HTML `<form>` tag is completely defined including its end tag `</form>`,
    it is wrapped in a `<body>` tag and an `<html>` tag to complete the minimal HTML
    web page.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 HTML `<form>` 标签定义完成，包括结束标签 `</form>`，它会被包裹在 `<body>` 标签和 `<html>` 标签中，形成一个最小的
    HTML 网页。
- en: The complete web page is returned to the `request_handler`, which sends the
    web page to the browser.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的网页会被返回给 `request_handler`，然后 `request_handler` 会将网页发送给浏览器。
- en: The main loop
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主循环
- en: The main loop begins `if __name__ == '__main__':` and is called once after the
    `html_page` function and the `request_handler` have been defined.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 主循环从 `if __name__ == '__main__':` 开始，并在 `html_page` 函数和 `request_handler` 定义后被调用一次。
- en: The main loop first uses the `grovepi` API to initialize the `LED` to the `output
    pinMode`. The GrovePi digital ports can either be used to listen for signals or
    to trigger them. For this script, the `LED` port is configured for `output`.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 主循环首先使用 `grovepi` API 来初始化 `LED` 为 `output pinMode`。GrovePi 数字端口可以用来接收信号或触发信号。对于此脚本，`LED`
    端口被配置为 `output`。
- en: After the `LED` port is configured, the `web` API's `application` function is
    used to create a web application that listens for the specified `URLS` using Python's
    default global variables (`globals()`) as the application context.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 配置`LED`端口后，`web` API的`application`函数用于创建一个Web应用程序，该应用程序使用Python的默认全局变量（`globals()`）作为应用程序上下文，监听指定的`URLS`。
- en: The first parameter to the `web.application` function, `URLS`, defines the mapping
    between URL request patterns (regular expressions) and their request handlers
    (Python classes). The second parameter defines the application context (in this
    case, it is the `global` context). The `web.application` function returns a web
    application object (`app`) that encapsulates the HTTP protocol and manages the
    web server.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`web.application`函数的第一个参数`URLS`定义了URL请求模式（正则表达式）与其请求处理程序（Python类）之间的映射关系。第二个参数定义了应用程序上下文（在此情况下是`global`上下文）。`web.application`函数返回一个Web应用对象（`app`），该对象封装了HTTP协议并管理Web服务器。'
- en: Finally, the web server is started using the `run` function of the newly created
    web application object (`app`).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用新创建的Web应用对象（`app`）的`run`函数启动Web服务器。
- en: The web application listens by default on port `8080` of all the network interfaces
    attached to the Raspberry Pi (`0.0.0.0`). The `app.run` function continues until
    it is interrupted (by *Ctrl+C*).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序默认在树莓派（`0.0.0.0`）附加的所有网络接口的端口`8080`上监听。`app.run`函数会持续运行，直到被中断（通过*Ctrl+C*）。
- en: More information on using `web.py` to create web applications using the Python
    scripting language can be found on the `web.py` website ([http://webpy.org/](http://webpy.org/)).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`web.py`创建基于Python脚本语言的Web应用程序的更多信息可以在`web.py`网站上找到（[http://webpy.org/](http://webpy.org/)）。
- en: See also
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '**web.py** ([http://webpy.org/](http://webpy.org/)): This web framework was
    originally developed at reddit.com where it grew to serve millions of page views
    per day.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**web.py**（[http://webpy.org/](http://webpy.org/)）：这个Web框架最初是在reddit.com开发的，后来它扩展为每天处理数百万页面浏览量。'
- en: '**web.py – Tutorial** ([http://webpy.org/docs/0.3/tutorial](http://webpy.org/docs/0.3/tutorial)):
    This is the root of the `web.py` tutorial.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**web.py – 教程**（[http://webpy.org/docs/0.3/tutorial](http://webpy.org/docs/0.3/tutorial)）：这是`web.py`教程的根本。'
- en: '**Regular Expression HOWTO** ([https://docs.python.org/2/howto/regex.html](https://docs.python.org/2/howto/regex.html)):
    This is an introductory tutorial to using regular expressions in Python.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式如何做**（[https://docs.python.org/2/howto/regex.html](https://docs.python.org/2/howto/regex.html)）：这是一个介绍如何在Python中使用正则表达式的教程。'
- en: '**Hypertext Transfer Protocol** ([https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)):
    This Wikipedia article is about the HTTP protocol.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超文本传输协议**（[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)）：这篇维基百科文章讲解了HTTP协议。'
- en: '**HTML** ([https://en.wikipedia.org/wiki/HTML](https://en.wikipedia.org/wiki/HTML)):
    This Wikipedia article describes the Hypertext Markup Language (HML) and its history.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML**（[https://en.wikipedia.org/wiki/HTML](https://en.wikipedia.org/wiki/HTML)）：这篇维基百科文章描述了超文本标记语言（HTML）及其历史。'
- en: Connecting to an IoT platform
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到物联网平台
- en: This recipe connects your Raspberry Pi to the SmartLiving ([http://smartliving.io](http://smartliving.io))
    Internet of Things (IoT) platform.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将你的树莓派连接到SmartLiving（[http://smartliving.io](http://smartliving.io)）物联网（IoT）平台。
- en: The SmartLiving IoT platform uses a web browser to configure rules that respond
    to sensors and/or activate IoT devices attached to your Raspberry Pi. The SmartLiving
    API includes drivers for the GrovePi from Dexter Industries. This recipe integrates
    your Raspberry Pi with the SmartLiving platform and uses it to control a GrovePi
    device attached to your Raspberry Pi.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: SmartLiving物联网平台使用Web浏览器配置响应传感器和/或激活连接到你的树莓派的物联网设备的规则。SmartLiving API包括来自Dexter
    Industries的GrovePi驱动程序。本食谱将你的树莓派与SmartLiving平台集成，并利用它来控制连接到树莓派的GrovePi设备。
- en: After completing this recipe, you will be able to control Grove devices attached
    to your Raspberry Pi using the SmartLiving Internet of Things platform.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本食谱后，你将能够使用SmartLiving物联网平台控制连接到树莓派的Grove设备。
- en: Getting ready
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Ingredients:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 材料：
- en: A Basic Networking setup for the Raspberry Pi that already has the GrovePi interfaces
    and drivers installed (see the previous recipe, *Installing the GrovePi*, for
    instructions). You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于已经安装了GrovePi接口和驱动的树莓派，基本的网络设置（参考前面的教程《安装GrovePi》获取详细操作）。你也应该已经以用户`pi`身份登录（参考[第1章](ch01.html
    "第1章：安装与设置")《安装与设置》教程中如何启动和登录的操作，或参考[第2章](ch02.html "第2章：管理")《管理》教程中如何远程登录的操作）。
- en: The Raspberry Pi should be connected to the Internet.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派应连接到互联网。
- en: A GrovePi should already be attached to the Raspberry Pi.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗GrovePi应该已经连接到树莓派。
- en: A Grove LED should be attached to port D2 of the GrovePi.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗Grove LED应该已连接到GrovePi的D2端口。
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程不需要桌面GUI，可以从基于文本的控制台或`LXTerminal`中运行。
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果树莓派的安全外壳（Secure Shell）服务器正在运行，可以通过使用安全外壳客户端远程完成此步骤。
- en: How to do it...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to controlling IoT devices from the SmartLiving platform are:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 从SmartLiving平台控制物联网设备的步骤如下：
- en: First, create a free account and log in to the SmartLiving platform at [http://beta.smartliving.io](http://beta.smartliving.io).![How
    to do it...](img/B04745_06_06.jpg)
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个免费账户并登录到SmartLiving平台：[http://beta.smartliving.io](http://beta.smartliving.io)。![如何操作...](img/B04745_06_06.jpg)
- en: Click on the plus icon to create a new device.![How to do it...](img/B04745_06_07.jpg)
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加号图标以创建新设备。![如何操作...](img/B04745_06_07.jpg)
- en: Select the device type Raspberry Pi and name the device (**MyGoldenPi**). Click
    the **right arrow icon** to continue.![How to do it...](img/B04745_06_08.jpg)
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择设备类型为树莓派并命名设备（**MyGoldenPi**）。点击**右箭头图标**继续。![如何操作...](img/B04745_06_08.jpg)
- en: Select the Raspberry Pi by clicking on the Raspberry Pi logo.![How to do it...](img/B04745_06_09.jpg)
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击树莓派图标选择树莓派设备。![如何操作...](img/B04745_06_09.jpg)
- en: Select settings by clicking on the **gear icon**.![How to do it...](img/B04745_06_10.jpg)
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**齿轮图标**选择设置。![如何操作...](img/B04745_06_10.jpg)
- en: Now that your Raspberry Pi is registered and you can see the device ID, client
    ID, and client key, it's time to switch back to the Raspberry Pi.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你的树莓派已注册，你可以看到设备ID、客户端ID和客户端密钥，是时候切换回树莓派了。
- en: Log in to the Raspberry Pi (locally or remotely).
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录树莓派（本地或远程）。
- en: Use the `git clone` command to download the All Things Talk (`allthingstalk`)
    client for Python (`raspberrypi-python-client`).
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git clone`命令下载All Things Talk（`allthingstalk`）Python客户端（`raspberrypi-python-client`）。
- en: '[PRE23]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Use the `cd` command to enter the client install directory, and then use the
    Bash script `setupGrovePi.sh` to install the client.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令进入客户端安装目录，然后使用Bash脚本`setupGrovePi.sh`安装客户端。
- en: '[PRE24]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Press the *Enter* key in response to any and all installation prompts to accept
    the defaults.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有安装提示中按下*Enter*键，以接受默认设置。
- en: When the installation script is complete, use the `reboot` command to restart
    the Raspberry Pi.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装脚本完成后，使用`reboot`命令重启树莓派。
- en: '[PRE25]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now that the All Things Talk (Smart Living) client has been installed, it's
    time to test the Internet of Things.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在All Things Talk（Smart Living）客户端已经安装完成，接下来是测试物联网功能。
- en: Log back in to the Raspberry Pi (locally or remotely).
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新登录树莓派（本地或远程）。
- en: Use the `cd` command to change to the directory with the Smart Living Python
    client, `raspberrypi-python-client`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`命令切换到Smart Living Python客户端`raspberrypi-python-client`所在的目录。
- en: '[PRE26]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Use the `cat` command to create a Python script (`ledserver.py`) that connects
    a Grove LED on port D2 to the Smart Living platform. Make sure you replace the
    values of the three configuration parameters (`IOT.DeviceId`, `IOT.ClientId`,
    and `IO.ClientKey`) with the values from your Smart Living account (from step
    6).
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cat`命令创建一个Python脚本（`ledserver.py`），将Grove LED连接到D2端口，并连接到Smart Living平台。确保用你在Smart
    Living账户中获得的三个配置参数值（`IOT.DeviceId`、`IOT.ClientId`和`IO.ClientKey`）替换脚本中的相应值（步骤6中的值）。
- en: '[PRE27]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Use the `python` command to run the newly created script.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python`命令运行新创建的脚本。
- en: '[PRE28]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the browser, refresh the Smart Living device page. The Raspberry Pi device
    (**MyGoldenPi**) now has a new device (**LED**).![How to do it...](img/B04745_06_11.jpg)
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，刷新智能生活设备页面。树莓派设备（**MyGoldenPi**）现在有了一个新设备（**LED**）。![如何操作...](img/B04745_06_11.jpg)
- en: Toggle the **boolean** switch on the Smart Living web page and the Grove LED
    turns on and off while the running `ledserver.py` script prints additional status
    messages.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在智能生活网页上切换**布尔**开关，Grove LED会随之开关，同时运行中的`ledserver.py`脚本会打印附加的状态信息。
- en: '[PRE29]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Press *Ctrl+C* to stop the `ledserver.py` script.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl+C*停止`ledserver.py`脚本。
- en: How it works…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This recipe has three parts: registering a Raspberry Pi device with the Smart
    Living IoT platform, installing the Smart Living client API, and finally running
    a script that exchanges signals between the Smart Living platform and the Raspberry
    Pi.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程分为三部分：将树莓派设备注册到智能生活物联网平台，安装智能生活客户端API，最后运行一个脚本，交换智能生活平台与树莓派之间的信号。
- en: Register your Raspberry Pi with the IoT platform
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将树莓派注册到物联网平台
- en: The recipe begins by registering for a free account at [http://beta.smartliving.io](http://beta.smartliving.io).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程首先通过[http://beta.smartliving.io](http://beta.smartliving.io)注册一个免费账户。
- en: After registering for an account, a new Raspberry Pi device interface (**MyGoldenPi**)
    is created and the **Device id**, **Client id**, and **Client key** for this device
    are displayed. These three configuration values are used later in this recipe
    to connect the Raspberry Pi to the Smart Living IoT platform.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 注册账户后，创建了一个新的树莓派设备界面（**MyGoldenPi**），并显示该设备的**设备ID**、**客户端ID**和**客户端密钥**。这三个配置值将在本教程后续步骤中用于将树莓派连接到智能生活物联网平台。
- en: Install the IoT platform API
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装物联网平台API
- en: The recipe continues by logging in to the Raspberry Pi.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是登录到树莓派。
- en: The `git clone` command is used to download the All Things Talk client API for
    the Raspberry Pi (`allthingstalk/raspberrypi-python-client`) – the Python API
    that is used to communicate with the Smart Living IoT platform.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`git clone`命令下载适用于树莓派的All Things Talk客户端API（`allthingstalk/raspberrypi-python-client`）——这个Python
    API用于与智能生活物联网平台进行通信。
- en: After the client API is downloaded, the `bash` command is used to run the `setGrovePi.sh`
    script from the client API directory (`raspberrypi-python-client`). The `setupGrovePi.sh`
    installation script installs additional software packages and Python libraries.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端API下载完成后，使用`bash`命令从客户端API目录（`raspberrypi-python-client`）运行`setGrovePi.sh`脚本。`setupGrovePi.sh`安装脚本会安装额外的软件包和Python库。
- en: Exchange signals with the IoT platform
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与物联网平台交换信号
- en: Once the Smart Living client API is installed, the `cat` command is used to
    create a short Python script (`ledserver.py`) that listens for signals from the
    Smart Living IoT platform.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 安装智能生活客户端API后，使用`cat`命令创建一个简短的Python脚本（`ledserver.py`），该脚本监听来自智能生活物联网平台的信号。
- en: The script is run from the `raspberrypi-python-client` directory using the `python`
    command. While the script is running, the Raspberry Pi is connected to the Smart
    Living IoT platform and receives signals from the IoT platform that turn the LED
    on and off.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`python`命令从`raspberrypi-python-client`目录运行脚本。当脚本运行时，树莓派会连接到智能生活物联网平台，并接收来自物联网平台的信号，控制LED的开关。
- en: The IoT signals are sent using the Raspberry Pi device page on the Smart Living
    website. The device page has an **actuator** labeled **LED**. By toggling the
    **false** – **true** switch under the **LED** label, a signal is sent from Smart
    Living platform through the Internet of Things to the Raspberry Pi. A **false**
    signal turns the LED off. A **true** signal turns the LED on.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网信号通过智能生活网站上的树莓派设备页面发送。设备页面上有一个标有**LED**的**执行器**。通过切换**false** – **true**开关，一个信号会从智能生活平台通过物联网发送到树莓派。**false**信号会关闭LED，**true**信号会打开LED。
- en: A local keyboard interrupt signal (pressing *Ctrl+C* on the keyboard) stops
    the script.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 本地键盘中断信号（按下*Ctrl+C*键）会停止脚本。
- en: There's more…
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The Python script, `ledserver.py`, is a simple demonstration of how a Raspberry
    Pi can be connected to an Internet of Things platform. The script listens for
    and responds to a binary signal sent from the Smart Living IoT platform. The signal
    sent from the IoT platform controls a device attached to the Raspberry Pi (an
    LED).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本`ledserver.py`是一个简单的示例，展示了如何将树莓派连接到物联网平台。该脚本监听并响应从智能生活物联网平台发送的二进制信号。来自物联网平台的信号控制连接到树莓派的设备（一个LED）。
- en: 'The script has three parts: initialization, the signal handler, and the main
    loop.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本分为三个部分：初始化、信号处理器和主循环。
- en: Initialization
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: 'The script begins with three `import` statements: one for the GrovePi API (`grovepi`),
    one for the All Things Talk API (ATT_IOT), and one for the `time` API. The `time`
    API provides the `sleep` function; the ATT_IOT API is used to connect with the
    Smart Living IoT platform, and the `grovepi` API is used to connect to the Grove
    LED.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本开始时有三个 `import` 语句：一个导入 GrovePi API（`grovepi`），一个导入 All Things Talk API（ATT_IOT），另一个导入
    `time` API。`time` API 提供 `sleep` 函数；ATT_IOT API 用于连接智能生活物联网平台，而 `grovepi` API
    用于连接 Grove LED。
- en: After the `import` statements, a single constant is defined, **LED**, to represent
    the digital port that will be used on the GrovePi (2).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `import` 语句之后，定义了一个常量 **LED**，表示 GrovePi 上将使用的数字端口（2）。
- en: The signal handler
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信号处理器
- en: The signal handler function `on_message` **( ID, value )** defines the actions
    that are taken when signals (messages) are received from the IoT platform.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 信号处理器函数 `on_message` **( ID, value )** 定义了接收到来自物联网平台的信号（消息）时应采取的操作。
- en: When the last character (`endswith`) of the message **id** is equal to the registered
    asset ID of the LED (`str( LED )`), then the message applies to the **LED** asset.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 当消息的最后一个字符（`endswith`）的 **id** 等于注册的 LED 资产 ID（`str(LED)`）时，消息将应用于 **LED** 资产。
- en: If the value of the message (converted to lowercase, **lower**) is "**true**",
    the LED will be turned on using the grovepi API (`digitalWrite( LED, 1 )`). When
    the value is "**false**", the LED will be turned off (`digitalWrite( LED, 0 )`).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 如果消息的值（转换为小写，**lower**）为 "**true**"，LED 将通过 grovepi API 打开（`digitalWrite( LED,
    1 )`）。当值为 "**false**" 时，LED 将关闭（`digitalWrite( LED, 0 )`）。
- en: The main loop
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主循环
- en: The main loop (`if __name__ == '__main__':`) begins by using the GrovePi API
    to set the pinmode of the LED to output.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 主循环（`if __name__ == '__main__':`）开始时，使用 GrovePi API 将 LED 的引脚模式设置为输出。
- en: The Smart Living client API (IOT) is configured using the **DeviceId**, **ClientId**,
    and **ClientKey** configuration parameters. They are set to the values displayed
    earlier, during the Smart Living registration. The IOT signal handler parameter,
    `on_message` **,** is set to the signal handling function, `on_message`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 智能生活客户端 API（IOT）通过 **DeviceId**、**ClientId** 和 **ClientKey** 配置参数进行配置。这些参数设置为之前在智能生活注册过程中显示的值。IOT
    信号处理器参数 `on_message` **,** 被设置为信号处理函数 `on_message`。
- en: Now that the client API (IOT) is configured, the Raspberry Pi is ready to `connect`
    to the Smart Living IoT platform, register a new device asset (`addAsset`), and
    subscribe to messages coming from the IoT platform.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在客户端 API（IOT）已配置完毕，树莓派已准备好 `connect` 到智能生活物联网平台，注册一个新设备资产（`addAsset`），并订阅来自物联网平台的消息。
- en: The `IOT.connect` method establishes a connection to the Smart Living IoT platform
    using the previously specified **DeviceId**, **ClientId**, and **ClientKey**.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOT.connect` 方法通过之前指定的 **DeviceId**、**ClientId** 和 **ClientKey** 来建立与智能生活物联网平台的连接。'
- en: With the connection established, the Raspberry Pi lets the IoT platform know
    (`addAsset`) that there is a binary (**"boolean"**) output (**True**) device attached
    to port D2 (**LED**). The output device is labeled **"LED"** and has a short description,
    **"Light Emitting Diode"**.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接建立后，树莓派通过 `addAsset` 告知物联网平台，端口 D2 上连接了一个二进制（**"boolean"**）输出（**True**）设备（**LED**）。输出设备被标记为
    **"LED"**，并有简短描述 **"Light Emitting Diode"**（发光二极管）。
- en: The `IOT.subscribe` method lets the Smart Living IoT platform know that the
    Raspberry Pi is ready to receive signals (messages) from the platform.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOT.subscribe` 方法通知智能生活物联网平台，树莓派准备好接收来自平台的信号（消息）。'
- en: The `on_message` function was previously defined as the signal handler. So,
    when a new signal (message) arrives for the Raspberry Pi, the `on_message` function
    receives the signal and acts upon its **id** and **value**.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_message` 函数先前已被定义为信号处理器。因此，当树莓派收到一个新的信号（消息）时，`on_message` 函数会接收该信号并根据其
    **id** 和 **value** 执行相应操作。'
- en: When a **"true"** signal is received, the LED is turned on. When a **"false"**
    signal is received, the LED is turned off.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到 **"true"** 信号时，LED 会打开；当接收到 **"false"** 信号时，LED 会关闭。
- en: IoT Rules
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物联网规则
- en: Although this recipe does show how the Raspberry Pi can connect to and exchange
    signals with the Smart Living IoT platform, it does not show how to create new
    IoT Rules.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个示例展示了树莓派如何连接到智能生活物联网平台并与其交换信号，但并没有展示如何创建新的物联网规则。
- en: 'The Smart Living website ([http://smartliving.io](http://smartliving.io)) has
    a number of examples of how IoT Rules can be used to react to and control the
    Raspberry Pi:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Smart Living网站（[http://smartliving.io](http://smartliving.io)）提供了许多关于如何使用物联网规则来响应和控制树莓派的示例：
- en: Detect movement – light an LED when a sensor detects movement
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测运动——当传感器检测到运动时点亮LED灯
- en: Unplugged smartphone – vibrate when a phone is removed from its charger
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拔掉智能手机——当手机从充电器上拔掉时震动
- en: Smart doorbell – the doorbell rings your smartphone
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能门铃——门铃会响铃并通知您的智能手机
- en: Light sensor – display light levels in a remote room on your smartphone
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光传感器——在智能手机上显示远程房间的光线水平
- en: Smart shop window – use a QR code to control the light in a window
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能商店橱窗——使用二维码控制橱窗内的灯光
- en: Visit the Smart Living website for detailed instructions and a complete reference
    to using the Smart Living IoT platform with the Raspberry Pi and other devices.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Smart Living网站，获取详细的说明和完整的参考资料，了解如何将Smart Living物联网平台与树莓派及其他设备一起使用。
- en: See also
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '**SmartLiving** ([http://www.smartliving.io/](http://www.smartliving.io/)):
    Use the Maker link to sign up for a Smart Living account.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SmartLiving**（[http://www.smartliving.io/](http://www.smartliving.io/)）：使用Maker链接注册Smart
    Living帐户。'
- en: '**All Things Talk** ([http://allthingstalk.com/](http://allthingstalk.com/)):
    The All Things Talk website has more details about the home and business versions
    of their Internet of Things platform.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**All Things Talk**（[http://allthingstalk.com/](http://allthingstalk.com/)）：All
    Things Talk网站提供了更多关于其物联网平台家庭版和商业版的详细信息。'
- en: '**Raspberry Pi kit** ([http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/](http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/)):
    This tutorial is a guide for connecting your Raspberry Pi to Smart Living.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi套件**（[http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/](http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/)）：本教程是将树莓派连接到Smart
    Living的指南。'
- en: '**Raspberry Pi kit Experiments Guide** ([http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/](http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/)):
    There are five experiments on this website to get you started with the IoT.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi套件实验指南**（[http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/](http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/)）：此网站上有五个实验帮助您入门物联网。'
- en: Creating an IoT gateway
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建物联网网关
- en: This recipe turns your Raspberry Pi into an IoT gateway using The ThingBox ([http://thethingbox.io/](http://thethingbox.io/))
    powered by Node-RED ([http://nodered.org/](http://nodered.org/)).
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将您的树莓派变成一个物联网网关，使用由Node-RED（[http://nodered.org/](http://nodered.org/)）支持的The
    ThingBox（[http://thethingbox.io/](http://thethingbox.io/)）。
- en: The ThingBox is a Raspbian-based operating system distribution for wiring together
    hardware devices, APIs, and online services in new and interesting ways. It comes
    preinstalled with the Node-RED visual tool for wiring the Internet of Things.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: The ThingBox是一个基于Raspbian的操作系统发行版，用于以新颖和有趣的方式连接硬件设备、API和在线服务。它预安装了Node-RED可视化工具，用于连接物联网。
- en: In this recipe, The ThingBox is deployed and a new flow is created that lights
    an LED attached to the Raspberry Pi while a pushbutton is pressed. This is a very
    simple example, but completely demonstrates how The ThingBox is used. At the end
    of the recipe, there is a list of additional nodes that could be used in your
    next project.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在此教程中，The ThingBox被部署，并创建了一个新的流程，该流程在按下按钮时点亮连接到树莓派的LED。这是一个非常简单的示例，但完全展示了The
    ThingBox的使用方法。教程的最后，还列出了可以在下一个项目中使用的附加节点。
- en: After completing this recipe, your Raspberry Pi will be an IoT gateway.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此教程后，您的树莓派将成为一个物联网网关。
- en: Getting ready
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Ingredients:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 配料：
- en: An Internet connection for downloading The ThingBox distribution
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于下载The ThingBox发行版的互联网连接
- en: An SD card – 4 GB or greater (class 10 has the best performance)
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张SD卡——4GB或更大（class 10性能最佳）
- en: A Raspberry Pi connected to the local network
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台连接到本地网络的树莓派
- en: This recipe only requires the desktop GUI to set up a wireless network.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 此教程只需要桌面GUI来设置无线网络。
- en: Once the Raspberry Pi is running and connected to the network, this recipe is
    completed from another computer using a web browser.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦树莓派运行并连接到网络，该教程将在另一台计算机上使用网页浏览器完成。
- en: How to do it...
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The steps to creating an IoT gateway from your Raspberry Pi are:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 创建物联网网关的步骤如下：
- en: Download the latest image file from The ThingBox website, [http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)
    (see the recipe *Downloading new SD cards* in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*).
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从The ThingBox网站下载最新的镜像文件，[http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)（请参阅[第1章](ch01.html
    "第1章 安装与设置")中的食谱*下载新SD卡*，*安装与设置*）。
- en: Write the image file to the SD card (see the appropriate disk utility recipe
    for your computer in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*).
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将镜像文件写入SD卡（请参阅[第1章](ch01.html "第1章 安装与设置")中的适当磁盘工具食谱，*安装与设置*）。
- en: Boot your Raspberry Pi using the updated SD card.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用更新的SD卡启动树莓派。
- en: 'If your Raspberry Pi uses a Wi-Fi adapter to connect to the local network,
    you will need to log in to the Raspberry Pi GUI once (username: `root`, password:
    `raspberry`) and use the Wi-Fi config utility to configure the wireless network
    adapter.'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的树莓派使用Wi-Fi适配器连接到本地网络，你需要登录树莓派的GUI一次（用户名：`root`，密码：`raspberry`），然后使用Wi-Fi配置工具来配置无线网络适配器。
- en: After the Raspberry Pi has successfully booted and connected to the network
    (this might take a few seconds longer during the first boot), The ThingBox server
    running on your Raspberry Pi will be available at the local network address, `http://thethingbox.local/`.![How
    to do it...](img/B04745_06_12.jpg)
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树莓派成功启动并连接到网络后（第一次启动时可能需要稍等几秒钟），运行在树莓派上的The ThingBox服务器将在本地网络地址`http://thethingbox.local/`提供服务。![如何操作...](img/B04745_06_12.jpg)
- en: If you click the colored square on the left side of the **Go** node at the beginning
    of the default **Flow**, the message **Hello!** is displayed in the **debug**
    tab.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击默认**Flow**开头的**Go**节点左侧的彩色方块，在**debug**标签页中会显示消息**Hello!**。
- en: Click the **+** tab on the far right side of the center panel (opposite the
    **Flow** tab) to create a new flow.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击中间面板右侧最远处的**+**标签（与**Flow**标签相对）以创建新的流程。
- en: Add an `rpi-gpio` in node to the flow by dragging an in node from the toolbox
    on the left and dropping it on the flow diagram in the center.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从左侧工具箱拖动一个输入节点并将其放置到中间的流程图上，向流程中添加一个`rpi-gpio`输入节点。
- en: Add an `rpi-gpio` out node to the flow by dragging and dropping the out node
    from the toolbox.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从工具箱中拖动并放置输出节点，向流程中添加一个`rpi-gpio`输出节点。
- en: Connect the two nodes by dragging the output connector of the **rpi-gpio** in
    node to the input connector of the **rpi-gpio** out node.![How to do it...](img/B04745_06_13.jpg)
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖动**rpi-gpio**输入节点的输出连接器到**rpi-gpio**输出节点的输入连接器，连接这两个节点。![如何操作...](img/B04745_06_13.jpg)
- en: Now the basic flow has been set up, it's time to configure the nodes. The red
    triangle and blue circle badges on the input and output nodes indicate the configuration
    is not yet complete.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在基本流程已经设置好，是时候配置节点了。输入和输出节点上的红色三角形和蓝色圆圈徽章表示配置尚未完成。
- en: Configure the `Pushbutton` node. Double-click on the `rpi-gpio` in node. Change
    the **GPIO Pin** to **16 – GPIO4 – BCM23**. Change the **Resistor** to **pullup**.
    Change the **Name** parameter to `Pushbutton`. Click on the **Ok** button.![How
    to do it...](img/B04745_06_14.jpg)
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`Pushbutton`节点。双击`rpi-gpio`输入节点。将**GPIO Pin**更改为**16 – GPIO4 – BCM23**。将**Resistor**更改为**上拉**。将**Name**参数更改为`Pushbutton`。点击**Ok**按钮。![如何操作...](img/B04745_06_14.jpg)
- en: Configure the LED node. Double-click on the `rpi-gpio` out node. Change the
    **GPIO Pin** to **18 – GPIO5 – BCM24**. Change the **Type** to **Digital output**.
    Change the **Name** to **LED**. Click on the **Ok** button.![How to do it...](img/B04745_06_15.jpg)
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置LED节点。双击`rpi-gpio`输出节点。将**GPIO Pin**更改为**18 – GPIO5 – BCM24**。将**Type**更改为**数字输出**。将**Name**更改为**LED**。点击**Ok**按钮。![如何操作...](img/B04745_06_15.jpg)
- en: Rename the flow diagram. Double-click on the name, **Sheet 1**. Change the **Name**
    of the flow diagram to **Pushbutton LED**. Click on the Ok button.![How to do
    it...](img/B04745_06_16.jpg)
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名流程图。双击名称**Sheet 1**。将流程图的**Name**更改为**Pushbutton LED**。点击**Ok**按钮。![如何操作...](img/B04745_06_16.jpg)
- en: Start the flow by clicking on the red **Activate** button. Wait until the **Successfully
    Deployed** message appears.![How to do it...](img/B04745_06_17.jpg)
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色**Activate**按钮启动流程。等待**Successfully Deployed**消息出现。![如何操作...](img/B04745_06_17.jpg)
- en: The **Pushbutton LED** flow has started!
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Pushbutton LED**流程已启动！'
- en: Press and hold the **Pushbutton**. The LED glows. Release the **Pushbutton**
    and the **LED** stops glowing.![How to do it...](img/B04745_06_18.jpg)
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住**按钮**不放，LED 灯会亮起。松开**按钮**，**LED**灯熄灭。![操作方式...](img/B04745_06_18.jpg)
- en: Notice that the values next to the green status indicators under the input and
    output nodes change from **0** to **1** whenever the pushbutton is pressed.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，当按下按钮时，输入和输出节点下的绿色状态指示器旁的值会从**0**变为**1**。
- en: The ThingBox IoT gateway is responding to a hardware signal by sending a hardware
    signal. Your IoT gateway works!
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ThingBox 物联网网关通过发送硬件信号来响应硬件信号。您的物联网网关正在工作！
- en: How it works
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'This recipe has two main parts:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方有两个主要部分：
- en: Creating the bootable SD card for The ThingBox IoT gateway
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 ThingBox 物联网网关创建可启动的 SD 卡
- en: Creating the **Pushbutton LED** flow in the running IoT gateway
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行中的物联网网关中创建**按钮 LED**流程
- en: You may also need to configure your Raspberry Pi's wireless networking.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还需要配置 Raspberry Pi 的无线网络。
- en: And you may want to run the example flow when The ThingBox is ready.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 当 ThingBox 准备好后，您可能想运行示例流程。
- en: Creating the bootable SD card
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建可启动的 SD 卡
- en: The current ThingBox bootable disk image is available from The ThingBox website
    ([http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)).
    After the image is downloaded, it needs to be written to an SD card that has at
    least 4 GB of disk space. Class 10 SD cards have the best performance. Instructions
    for creating a bootable SD card can be found in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 ThingBox 可启动磁盘映像可以从 ThingBox 网站下载（[http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)）。下载映像后，需要将其写入至少
    4 GB 存储空间的 SD 卡。Class 10 SD 卡具有最佳性能。有关创建可启动 SD 卡的说明，请参阅[第 1 章](ch01.html "第 1
    章 安装与设置")，*安装与设置*。
- en: Once the ThingBox image is written to the SD card, use it to boot the Raspberry
    Pi. The initial boot takes longer as the filesystem is expanded to fill the whole
    SD card. After the initial boot, subsequent boots will be much faster.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 ThingBox 镜像写入 SD 卡，使用它启动 Raspberry Pi。初次启动时，由于文件系统会扩展以填充整个 SD 卡，因此启动会较慢。初次启动后，随后的启动会快得多。
- en: Configuring wireless networking
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置无线网络
- en: If your Raspberry Pi depends on a Wi-Fi adapter for networking, you will need
    to log in to the Raspberry Pi desktop after the initial boot and configure wireless
    networking. Use the username `root` and the default password `raspberry`.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 Raspberry Pi 依赖 Wi-Fi 适配器进行网络连接，您需要在初始启动后登录 Raspberry Pi 桌面并配置无线网络。使用用户名`root`和默认密码`raspberry`。
- en: The wireless networking configuration application is available from the **Raspberry
    Pi Menu > Preferences > WiFi Configuration** menu.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 无线网络配置应用可以通过**Raspberry Pi 菜单 > 偏好设置 > WiFi 配置**菜单找到。
- en: Once the WiFi Configuration application is running, click **Scan** to display
    the available networks. Double-click on your network's **SSID** to enter your
    network's **Private Security Key** (**PSK**) and then click **Add** to add this
    device to the list of known Wi-Fi interfaces.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 WiFi 配置应用程序启动，点击**扫描**以显示可用的网络。双击您的网络**SSID**，输入您网络的**私有安全密钥**（**PSK**），然后点击**添加**将此设备添加到已知
    Wi-Fi 接口列表中。
- en: Close the **Scan Results** window and you can observe connection status changes
    in the **WiFi Configuration** window. After adding the **SSID** and **PSK** for
    your network, the Raspberry Pi will continue to use that configuration by default
    at each boot.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭**扫描结果**窗口后，您可以在**WiFi 配置**窗口中观察到连接状态的变化。添加您的网络**SSID**和**PSK**后，Raspberry
    Pi将在每次启动时默认使用该配置。
- en: The Wi-Fi configuration can also be set from the ThingBox user interface. Choose
    **Settings** from the configuration menu at the top-right of the user interface
    (the three bars next to the **Activate** button).
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi 配置也可以通过 ThingBox 用户界面进行设置。在用户界面右上角的配置菜单中选择**设置**（位于**激活**按钮旁的三个横条）。
- en: The ThingBox is ready
  id: totrans-419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ThingBox 已准备好
- en: After the Raspberry Pi boots, it broadcasts its name, `thethingbox`, to the
    local multicast DNS server. In a few seconds, after the mDNS server updates, the
    ThingBox user interface is accessible at the URL `http://thethingbox.local/`.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Raspberry Pi 启动后，它会将其名称`thethingbox`广播到本地多播 DNS 服务器。几秒钟后，mDNS 服务器更新后，ThingBox
    用户界面可以通过 URL `http://thethingbox.local/`访问。
- en: There is no need for additional network configuration. However, the device name
    and other network parameters can be changed from the configuration menu at the
    top-right of the user interface.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Running the example flow
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the ThingBox is first accessed, it displays a default **Flow** made up
    of three nodes: **Go**, **Hello!**, and **display**.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Each node has configuration parameters that are set by double-clicking on the
    node. Nodes can also have multiple inputs and outputs, and can process more than
    one message.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: The default **Flow** is activated by clicking the colored square that is on
    the left side of the **Go** node. Clicking the square sends a message (`msg`)
    to the **Hello!** node.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: The **Hello!** node receives the message (`msg`) and sets the `payload` parameter
    of the message to "`Hello!`" and then sends the message on to the **display**
    node.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: The **display** node outputs the value of the `msg.payload` parameter in the
    **debug** tab of the right sidebar.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: This completes the default **Flow**.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Go with the flow
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All flows follow the same basic pattern.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: A message (`msg`) is sent from node to node along the paths that connect each
    node.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Each node can read and update the `msg` as it passes through the node adding,
    updating, or removing `msg` parameters until the `msg` is passed on to the next
    node.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: After reaching the end of a flow, the message (`msg`) is discarded.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Creating the pushbutton LED flow
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Pushbutton LED flow is created by clicking on the **+** tab at the top-right
    of the center panel. This creates a new flow sheet with the default name of **Sheet
    1**.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: From the Raspberry Pi section of the toolbox on the left, drag an `rpi-gpio`
    in node onto the blank flow sheet. Also drag an `rpi-gpio` out node onto the flow
    sheet.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Connect the two nodes by first clicking on the output connector of the **rpio-gpio**
    in node and dragging until a path forms and connects to the input connector of
    the **rpio-cpio** out node.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Now, double-click on each node and enter the appropriate configuration information.
    The **rpi-gpio** in node is named **Pushbutton**, connected to **GPIO4**, and
    has a **pullup** **Resistor**. The **rpi-gpio** out node is named **LED**, has
    the **Type** **Digital output**, and connects to **GPIO5**. The flow sheet is
    renamed **Pushbutton LED** by double-clicking the sheet name, **Sheet 1**.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Once the nodes are configured, clicking on the red **Activate** button deploys
    the flow. The **Activate** button is red whenever there are changes to the flow.
    When the flow has been deployed, the button turns gray.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: While the Pushbutton LED flow is active, the LED glows while the pushbutton
    is pressed and the LED stops glowing when the pushbutton is released.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the green status indicators under the two nodes also change from
    **0** to **1** while the pushbutton is pressed. The Node-RED platform is processing
    each button press.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi is now a gateway for the Internet of Things!
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is a very simple example of The ThingBox powered by Node-RED.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: There is a large library of available nodes
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are dozens of additional APIs and services in the Node-RED platform.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPIO – the hardware GPIO pins
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse – pressing the mouse buttons
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: General I/O
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP – ReSTful services and web pages
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MQTT – message queues
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Sockets – JSON messages
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP/UDP – data streams
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Serial Port – character streams
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Parsing
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV – comma-separated values
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON – JavaScript object notation
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XML – extensible markup language
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML – hypertext markup language
  id: totrans-460
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email – send/receive e-mail messages
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter – send/receive tweets
  id: totrans-463
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Esendx – send SMS messages
  id: totrans-464
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Calendar – add, update, and react to events
  id: totrans-465
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RSS – monitor RSS/Atom feeds
  id: totrans-466
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File – read/write files on disk
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Carriots – data collection from connected objects
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Emoncms – process and visualize environmental data
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Evrythng – drive applications with real-time data
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exosite – operationalized cloud processing
  id: totrans-472
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thingspeak – open IoT platform
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tinamous – IoT platform for privacy and collaboration
  id: totrans-474
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Xively – enterprise IoT application platform
  id: totrans-475
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait 40 seconds before powering off or rebooting
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is one particular caution that is repeated in The ThingBox documentation.
    It says do not shut down or reboot the Raspberry Pi for at least 40 seconds after
    activating (saving) any flow – even if the flow starts working earlier than that!
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Saving the updated flow diagram to disk is scheduled as an independent task
    that runs in parallel with the other tasks (nodes) that are currently running
    in the Node-RED server. So, it is quite likely that changes to the flow diagrams
    are activated in the Node-RED server before they are persisted to disk.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The ThingBox Project** ([http://thethingbox.io/](http://thethingbox.io/)):
    Use Internet of Things technologies without any technical knowledge and for free.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node-RED** ([http://nodered.org/](http://nodered.org/)): Node-RED is a visual
    tool for wiring the Internet of Things.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carriots** ([https://www.carriots.com/](https://www.carriots.com/)): Carriots
    is an IoT platform that will store a year of data for 10 devices for free.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emoncms** ([http://emoncms.org/](http://emoncms.org/)): Emoncms is a powerful
    open source web app for processing, logging, and visualizing energy, temperature,
    and other environmental data.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evrythng** ([https://evrythng.com/](https://evrythng.com/)): Evrythng is
    an IoT platform that connects any consumer product to the web and manages real-time
    data to drive applications.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thingspeak** ([https://thingspeak.com/](https://thingspeak.com/)): Thingspeak
    is an open source platform for the Internet of Things.'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tinamous** ([https://www.tinamous.com/](https://www.tinamous.com/)): Tinamous
    integrates status posts, alerts, and sensor measurements using simple, open connectivity
    solutions easily connecting people and Internet of Things devices.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xively** ([https://xively.com/](https://xively.com/)): Xively simplifies
    the way companies securely and robustly connect their products and users, manage
    IoT data at scale, and engage more closely with their customers, users, and partners.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xively** ([https://xively.com/](https://xively.com/))：Xively简化了公司如何安全且稳健地连接其产品和用户，管理大规模物联网数据，并与客户、用户和合作伙伴更紧密地互动。'
- en: '**Zero-configuration networking** ([https://en.wikipedia.org/wiki/Zero-configuration_networking](https://en.wikipedia.org/wiki/Zero-configuration_networking)):
    This Wikipedia article describes the zero-configuration networking that The ThingBox
    uses to announce its location at `http://thethingbox.local/`.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零配置网络** ([https://en.wikipedia.org/wiki/Zero-configuration_networking](https://en.wikipedia.org/wiki/Zero-configuration_networking))：这篇维基百科文章描述了The
    ThingBox使用的零配置网络，用于在`http://thethingbox.local/`上发布其位置。'
