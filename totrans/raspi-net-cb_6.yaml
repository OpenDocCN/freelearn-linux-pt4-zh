- en: Chapter 6. IoT – Internet of Things
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy access to hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the GrovePi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling devices from a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to an IoT platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an IoT gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter show how devices and sensors – things – attached
    to the Raspberry Pi can be connected to the **Internet of Things** (**IoT**).
  prefs: []
  type: TYPE_NORMAL
- en: The (**IoT**) describes the Internet when it is being used to enable physical
    objects – Things – to exchange data. When connected to the Internet, the Raspberry
    Pi can participate in the IoT, exchanging real-time data using its **general-purpose
    input/output** (**GPIO**) and other hardware interfaces. This chapter has a collection
    of recipes that show how the Raspberry Pi can participate in the Internet of Things.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter are specific to the Raspberry Pi. They utilize the
    hardware interfaces of the Raspberry Pi – the GPIO pins. The concepts can be used
    with other Linux computers; however, the instructions are specific to the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the recipes in this chapter, you will have configured and controlled
    devices and sensors attached directly to the Raspberry Pi and via the GrovePi
    hardware system. You will also have controlled devices attached to the Raspberry
    Pi from a web page hosted on the Raspberry and through the IoT service providers
    SmartLiving.io and ThingBox.io.
  prefs: []
  type: TYPE_NORMAL
- en: Easy access to hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe demonstrates how simple it is to access hardware from a Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, an LED connected to one of the Raspberry Pi's GPIO pins is made
    to blink using simple Bash commands (`ls`, `cat`, and `echo`).
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to control the GPIO ports attached
    to your Raspberry Pi from the Bash command line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that is not
    powered on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pushbutton switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 330 Ohm resisters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few breadboarding wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to easily accessing hardware from the command line are:'
  prefs: []
  type: TYPE_NORMAL
- en: Before powering on the Raspberry Pi, use the following two diagrams to connect
    a pushbutton switch to GPIO port 23 (pin 16) and an LED to GPIO port 24 (pin 18).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram shows the component layout for this recipe:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_06_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The pushbutton switch should be connected to pin 2 (5V) on one side. The other
    side of the pushbutton switch should have two 330 Ohm resisters connected – one
    resister leading to pin 6 (GND) and one resistor leading to pin 16 (GPIO 23).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The LED should be connected to pin 18 (GPIO port 24) on one side. The other
    side of the LED should have a 330 Ohm resistor connected leading to pin 20 (GND).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Turn the LED around if the first try does not work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An LED is a light emitting diode. Diodes only allow current to flow in one direction.
    A reversed diode is a common electronic circuit bug.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you have validated that the pushbutton switch, the LED, and the two 330
    Ohm resistors are connected correctly, power on the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram shows the pin layout of the Raspberry Pi''s GPIO interface:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_06_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `cd` command to navigate through the Raspberry Pi's kernel parameters
    to the `/sys/class/gpio` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `ls` command to list the contents of the kernel parameter directory
    containing GPIO parameters and interfaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `echo` command to tell the Raspberry Pi's kernel to `export` the interfaces
    to GPIO ports `23` and `24` into user space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `ls` command to once again display the contents of the kernel parameters
    and interfaces directory, `/sys/class/gpio`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the two new user space accessible kernel interfaces to GPIO port 23 (`gpio23`)
    and GPIO port 24 (`gpio24)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `echo` command to configure GPIO port 23 (`gpio23`) to receive input
    signals (`in`) and GPIO port 24 (`gpio24`) to send output signals (`out`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `cat` command to see the current state of the pushbutton switch when
    it's not being pressed (`0`) and when it is pressed (`1`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The pushbutton switch works!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `echo` command to turn the LED on (`1`) and then off (`0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The LED works!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the following `while` loop to control the LED with the pushbutton. Use *Ctrl-C*
    (`^C`) to stop the `while` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The pushbutton switch controls the LED!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `echo` command to `unexport` GPIO ports `23` and `24` from user space,
    and use the `ls` command to see that the Raspberry Pi kernel has removed the `gpio23`
    and `gpio24` interfaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses a connected input device (pushbutton switch) to activate an
    output device (LED). The recipe begins by connecting the input and output devices
    to the Raspberry Pi. Once the devices are connected, each of the devices is tested
    individually. Finally, a Bash script activates the output device whenever the
    input device signals.
  prefs: []
  type: TYPE_NORMAL
- en: Before the Raspberry Pi is powered on two devices, a pushbutton switch and an
    **LED**, are connected to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the pushbutton switch to GPIO port 23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pushbutton switch acts as an input device. It is connected to +5v on one
    side via pin 2and to GPIO port 23 on the other side via pin 16\. When the pushbutton
    switch is pressed, GPIO port 23 (pin 16) detects a high signal coming from +5v
    (pin 2) through the closed pushbutton switch.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the pushbutton switch, two 330 Ohm resistors are necessary to
    safely complete this part of the circuit. One 330 Ohm resistor is used to limit
    the current flow when the pushbutton switch is pressed (closed) and the signal
    is high. The other 330 Ohm resistor is used to pull the signal down to low when
    the pushbutton switch is not pressed (open).
  prefs: []
  type: TYPE_NORMAL
- en: The current-limiting resistor connects the pushbutton switch to GPIO port 23
    (pin 16). The pull-down resistor connects GPIO port 23 (pin 16) to GND (pin 6).
  prefs: []
  type: TYPE_NORMAL
- en: When the pushbutton switch is open, GPIO port 23 (pin 16) detects a low signal
    coming through the pull-down resistor connected to GND (pin 6). When the pushbutton
    switch is closed, GPIO port 23 (pin 16) detects a high signal coming from +5v
    (pin 2) through the current-limiting resistor.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the LED to GPIO port 24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LED acts as an output device. It is connected to GPIO port 24 (pin 18) on
    one side. On the other side, the LED is connected to a current-limiting 330 Ohm
    resistor leading to GND (pin 20).
  prefs: []
  type: TYPE_NORMAL
- en: When GPIO port 24 (pin 18) emits a high signal, enough current passes through
    the circuit to light the LED. When the signal is low, the LED remains unlit.
  prefs: []
  type: TYPE_NORMAL
- en: Power on and log in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have validated that the LED, the pushbutton switch, and the three protective
    330 Ohm resistors are connected correctly, turn on the Raspberry Pi and log in.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the Linux kernel with sysfs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you have logged in, the recipe uses the `cd` command to navigate to the
    `/sys/class/gpio` directory within the `sysfs` virtual file system. The `sysfs`
    virtual file system is a user space mapping of Linux kernel parameters and interfaces.
    The kernel parameters for the GPIO interface are accessible from `/sys/class/gpio`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ls` command is used to see which GPIO port interfaces are currently exported
    from kernel space to user space. So far, no interfaces have been exported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gpio directory only contains three entries: two pseudo-parameters, `export`
    and `unexport`; and one interface, `gpiochip0`. The interface to `gpiochip0` is
    not used in this recipe. The two pseudo-parameters are used to `export` and `unexport`
    GPIO port interfaces from kernel space to user space.'
  prefs: []
  type: TYPE_NORMAL
- en: Export GPIO ports 23 and 24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe uses the `echo` command to write the numbers 23 and 24 to the `export`
    pseudo-parameter. This tells the Raspberry Pi's Linux kernel to export the interfaces
    to GPIO ports 23 and 24 into user space (at `/sys/class/gpio`).
  prefs: []
  type: TYPE_NORMAL
- en: The command line for exporting the GPIO port 23 interface, `echo 23 >export`,
    works because it writes (**>**) the number 23 (echo 23) to the Linux kernel pseudo-parameter
    `/sys/class/gpio/export` telling the kernel to create an interface subdirectory
    (gpio23) for GPIO port 23.
  prefs: []
  type: TYPE_NORMAL
- en: After the kernel has been told to export the two GPIO ports, the `ls` command
    is used once again to show that the Linux kernel has created two new GPIO port
    interface subdirectories, one for GPIO port 23, `/sys/class/gpio/gpio23`, and
    one for GPIO port 24, `/sys/class/gpio/gpio24`.
  prefs: []
  type: TYPE_NORMAL
- en: Configure each interface direction as input or output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe then uses the `echo` command to write (**>**) either `in` (for input)
    or `out` (for output) to the `direction` parameter within each of the GPIO ports'
    interface subdirectories (gpio23 and gpio24).
  prefs: []
  type: TYPE_NORMAL
- en: The input device (pushbutton switch) is connected to GPIO port 23, so the direction
    parameter for GPIO port 23 (gpio23) is set to input (`echo in > gpio23/direction`).
  prefs: []
  type: TYPE_NORMAL
- en: The output device (LED) is connected to GPIO port 24, so the direction for GPIO
    port 24 (gpio24) is set to output (`echo out > gpio24/direction`).
  prefs: []
  type: TYPE_NORMAL
- en: Once the input/output direction for each GPIO port has been configured, the
    interface to each port can be tested.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the input device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The input device is tested using the `cat` command to display the value of GPIO
    port 23 (`gpio23/value`).
  prefs: []
  type: TYPE_NORMAL
- en: The value of GPIO port 23 (`gpio23/value`) is displayed when the pushbutton
    switch is released and when it is being pressed. When the pushbutton switch is
    released (the switch is open), the value of GPIO port 23 (`gpio23/value`) is low
    (0). When the pushbutton switch is pressed (closed), the value is high (1).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the output device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output device is tested using the `echo` command.
  prefs: []
  type: TYPE_NORMAL
- en: When the value high is sent to GPIO port 24 (echo 1 >gpio24/value), the LED
    glows. When the value low is sent (echo 0 >gpio24/value), the LED stops glowing.
  prefs: []
  type: TYPE_NORMAL
- en: Using the input device to activate the output device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After successfully testing the input (pushbutton switch) and output (LED) devices,
    the recipe connects the two devices with a simple `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: First, the shell variable `in` is defined to be an alias for the value of GPIO
    port 23 (`gpio23/value`) and the variable `out` is defined to be an alias for
    the value of GPIO port 24 (`gpio24/value`).
  prefs: []
  type: TYPE_NORMAL
- en: Then, the two variables are used in an infinite loop (`while true; do`) that
    reads the input signal from GPIO port 23 (`$(cat in)`) and uses the `echo` command
    to write the signal to GPIO port 24 (`>$out`).
  prefs: []
  type: TYPE_NORMAL
- en: While the loop is running, the LED lights whenever the pushbutton switch is
    pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing *Ctrl+C* stops the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After running the loop, the `cat` command is used to unexport the Linux kernel
    interfaces from user space to GPIO port 23 (`/sys/class/gpio/gpio23`) and GPIO
    port 24 (`/sys/class/gpio/gpio24`).
  prefs: []
  type: TYPE_NORMAL
- en: After the GPIO port interfaces have been unexported, the `ls` command is used
    to validate that the two GPIO port interfaces (`gpio23` and `gpio24`) have been
    removed from the `/sys/class/gpio` user space directory.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**General-purpose** **input/output** ([https://en.wikipedia.org/wiki/General-purpose_input/output](https://en.wikipedia.org/wiki/General-purpose_input/output)):
    This Wikipedia article describes how General-purpose input/output interfaces work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sysfs** ([https://en.wikipedia.org/wiki/Sysfs](https://en.wikipedia.org/wiki/Sysfs)):
    This Wikipedia article describes the `sysfs` filesystem, its history, and how
    it works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pull-up resistor** ([https://en.wikipedia.org/wiki/Pull-up_resistor](https://en.wikipedia.org/wiki/Pull-up_resistor)):
    This Wikipedia article describes how pull-up resistors are used to ensure a circuit
    has valid logic levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diode** ([https://en.wikipedia.org/wiki/Diode](https://en.wikipedia.org/wiki/Diode)):
    This Wikipedia article explains diodes in great detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bash Guide for Beginners** ([http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html)):
    This book is a practical guide for using Bash and the Bash scripting language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the GrovePi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe configures access to the Grove Pi extension board for the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The Grove hardware system by Seeed is a Lego-like system for plugging together
    electronic components without the need for soldering.
  prefs: []
  type: TYPE_NORMAL
- en: The GrovePi by Dexter Industries turns the Raspberry Pi into a central control
    hub for Grove components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the GrovePi+ installed on a Raspberry Pi 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the GrovePi](img/B04745_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After completing this recipe, you will be able to control Grove components attached
    to the GrovePi from your Raspberry Pi using the Python scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on, but the GrovePi has not yet been installed. You have also logged in
    as the user `pi` (see the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* for how to boot and log in, and the recipes
    in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration* for how
    to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GrovePi GPIO expansion board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Grove LED.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Grove pushbutton switch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two Grove connector wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to installing the GrovePi are:'
  prefs: []
  type: TYPE_NORMAL
- en: Before attaching the GrovePi to the Raspberry Pi, use the `git` command to download
    the GrovePi installation files from the `DexterInd/GrovePi` repository on `github.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `cd` command to navigate to the directory containing the installation
    script, `GrovePi/Scripts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `sh` command to execute the installation script. The command requires
    super user privileges (use `sudo`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As the installation continues, it will prompt for permission to install new
    software packages. Press the *Enter* key to accept the default answer to the prompts
    (`Y`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation script completes, you will be prompted to restart the
    Raspberry Pi. Instead, use the `poweroff` command to shut down the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While the Raspberry Pi is shut down and the power has been disconnected, attach
    the GrovePi to the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following image shows how to attach the GrovePi+ to the Raspberry Pi 2:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_06_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the GrovePi has been attached to the Raspberry Pi, reconnect the power
    and log in once the Raspberry Pi finishes booting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After logging in, use the `i2cdetect` command to validate that the GrovePi
    has been installed correctly. Note: if you are using an original Raspberry Pi,
    use the option `–y 0` instead of `–y 1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, use the `apt-get install` command to install the Python setup tools (`python-setuptools`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `cd` command to navigate to the GrovePi Python software library (`~/GrovePi/Software/Python`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `python setup.py` command to `build` and `install` the `grovepi` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Attach a `Grove LED` device to port `D2` and a `Grove pushbutton switch` to
    port `D4` of the `GrovePi`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Grove pushbutton switch` and a `Grove LED` are attached to the `GrovePi+`,
    as depicted in the following image:![How to do it...](img/B04745_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, use the following Python script (`button.py`), to test the `Grove pushbutton
    switch`. Run the test script (`button.py`) twice – once without pressing the pushbutton
    switch (`0`) and once while pressing the pushbutton switch (`1`). Notice the different
    results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, use the following Python script (`led.py`) to test the `LED`. When the
    script (`led.py`) is run, the `LED` should glow for one second.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, use the following Python script to light the `LED` whenever the `Grove
    pushbutton switch` is pressed. Press *Ctrl+C* to stop the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the GrovePi attached to the Raspberry Pi to activate an output
    device (`Grove LED`) when the state of an attached input device (`Grove pushbutton
    switch`) changes. The recipe begins by connecting the GrovePi and the input and
    output devices to the Raspberry Pi. Once the devices are connected, each of the
    devices is tested individually. Finally, a Python script is used to activate the
    output device whenever the input device changes state.
  prefs: []
  type: TYPE_NORMAL
- en: Before the GrovePi is attached to the Raspberry Pi, the GrovePi drivers are
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GrovePi drivers and interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GrovePi drivers and interfaces are downloaded directly from their source
    repository on GitHub ([https://github.com/](https://github.com/)). The `git clone`
    command uses a secure Internet connection (`https://`) to download the GrovePi
    interfaces and drivers from their repository, `DexterInd/GrovePi`. The downloaded
    files include the installation scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The installation script, `install.sh`, is located in the `GrovePi/Scripts` directory.
    The `cd` command is used to navigate to the `GrovePi/Scipts` directory.
  prefs: []
  type: TYPE_NORMAL
- en: In the `GrovePi/Scipts` directory, the `sh` command is used to run the `install.sh`
    script. The script requires super user privileges, so `sudo` is used as a command
    prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the installation, the `install.sh` script displays a complete
    list of the changes it will make to your Raspberry Pi. The installation script
    prompts you to continue with the install. Press the *Enter* key to accept the
    defaults to all questions during the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: After the GrovePi interfaces and drivers are installed, you are prompted to
    restart the Raspberry Pi. Shut down the Raspberry Pi instead, so that you can
    remove the power from the Raspberry Pi and attach the GrovePi to it.
  prefs: []
  type: TYPE_NORMAL
- en: Attach the GrovePi to the Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Follow the manufacturer's instructions on [http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/)
    to attach the GrovePi to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: If you are attaching the original 26 pin GrovePi to one of the 40 pin models
    of the Raspberry Pi, make sure that pin 1 is lined up correctly. Even though the
    GrovePi does not cover all of the pins, it will still work perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: You may need to put a protective layer between the GrovePi and the Raspberry
    Pi to prevent the bottom of the GrovePi from touching the Raspberry Pi's USB connectors.
    A snippet of the electrostatic bag in which the GrovePi was shipped is a perfect
    protective layer.
  prefs: []
  type: TYPE_NORMAL
- en: Power on and log in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have validated that the GrovePi is attached to the Raspberry Pi correctly,
    attach the power cable to the Raspberry Pi and log in after it reboots.
  prefs: []
  type: TYPE_NORMAL
- en: The `i2cdetect` command is used to validate that the GrovePi has been connected
    correctly. The `–y` option is used to bypass interactive mode. Only the original
    Raspberry Pi uses bus `0`, whereas all of the newer Raspberry Pis use bus `1`.
  prefs: []
  type: TYPE_NORMAL
- en: If the GrovePi is connected correctly, its chip ID `04` will be displayed at
    address `00 4`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the GrovePi has been attached and detected, it is time to install the
    GrovePi's Python language **Application Programming Interface** (**API**).
  prefs: []
  type: TYPE_NORMAL
- en: Install the Python API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before the GrovePi API can be installed, the Python setup tools need to be installed.
    The `apt-get install` command is used to install the `python-setuptools` software
    package. After Python's setup tools are installed, the GrovePi API can be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The sources for the GrovePi API are located in the `GrovePi/Software/Python`
    directory. The `cd` command is used to navigate to that directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `python` command is used to run the `setup.py` script, first to build the
    API and then to install the API. Installation requires super user privileges,
    so `sudo` command is used as a command prefix during `install`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the GrovePi Python API is installed, the hardware devices can be tested.
  prefs: []
  type: TYPE_NORMAL
- en: Test the Grove pushbutton switch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cat` command is used to create a new script, `button.py`, which tests the
    state of the `Grove pushbutton switch`. The lines immediately following the `cat`
    command up to the end of the data marker (`<<EOD`) are copied to the new script
    (`>button.py`).
  prefs: []
  type: TYPE_NORMAL
- en: The `python` command is used to run the `button.py` test script twice.
  prefs: []
  type: TYPE_NORMAL
- en: The first time the `button.py` script is run, it is run without pressing the
    pushbutton switch. The result is 0 because the switch is open (not pressed).
  prefs: []
  type: TYPE_NORMAL
- en: The second time the script is run, it is run while pressing the pushbutton switch.
    The result is 1 because the switch is closed (pressed).
  prefs: []
  type: TYPE_NORMAL
- en: Test the Grove LED
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cat` command is also used to create another test script, `led.py`, which
    tests the `Grove LED`. The lines immediately following the `cat` command up to
    the end of data marker (`<<EOD`) are copied to the new script (`>led.py`).
  prefs: []
  type: TYPE_NORMAL
- en: The `python` command is used to run the `led.py` test script. When the script
    (`led.py`) is run, the `Grove LED` should glow for one second.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the pushbutton switch lights the LED
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cat` command is used once more to create the `loop.py` Python script. This
    short program will loop forever sending signal values from the input device (pushbutton
    switch) to the output device (LED).
  prefs: []
  type: TYPE_NORMAL
- en: The `loop.py` script imports the complete `(*) grovepi` API. It also imports
    the `sleep` function from the `time` API.
  prefs: []
  type: TYPE_NORMAL
- en: A variable, `led`, is used to represent digital port `2`, the port that connects
    the LED to the GrovePi. The `pinMode` function from the `grovepi` API is used
    to set the signal direction for the LED port to output.
  prefs: []
  type: TYPE_NORMAL
- en: Another variable, `button`, is used to represent digital port `4`, the port
    that connects the pushbutton switch to the GrovePi. The `pinMode` function is
    used to set the signal direction for the `button` port to `input`.
  prefs: []
  type: TYPE_NORMAL
- en: The main body of the script is an infinite loop (`while True:`) that only breaks
    when a `KeyboardInterrupt exception` occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The loop first uses the `digitalRead` function to receive the current value
    of the `button` port. The value received is stored in the variable `state`.
  prefs: []
  type: TYPE_NORMAL
- en: The value of the `state` variable is then sent to the led port using the `digitalWrite`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Before the `while` loop continues, the program sleeps for 0.01 seconds. This
    gives the Raspberry Pi a chance to do something else in between setting the `state`
    of the led port and reading the next `state` from the `button` port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `while` loop listens for two exceptions: `KeyboardInterrupt` and `IOError`.
    When a `KeyboardInterrupt` occurs, the script uses the `digitalWrite` function
    to send the LED port the signal for off (`0`) and the script breaks the `while`
    loop ending the program. When an `IOError` occurs, the message `IOError` is printed.'
  prefs: []
  type: TYPE_NORMAL
- en: The `python` command is used to run the `loop.py` script. While the script is
    running, the LED glows whenever the pushbutton switch is pressed. The LED stops
    glowing whenever the pushbutton switch is released. Use *Ctrl+C* to send a `KeyboardInterrupt`
    exception and end the program.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GrovePi expansion board from Dexter Industries can connect the Raspberry
    PI to more than 100 components from the Grove hardware platform developed by Seeed
    Studio. The official website is [http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/).
    These components can be manipulated with simple Python scripts as well as integrated
    into larger applications programmed in C, Go, or Java.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the digital ports used in this recipe, The GrovePi also has analog
    ports that can receive signal levels ranging from 0 to 1023 and can end signal
    levels from 0 to 255\. The GrovePi also has 3 I2C ports and a **Universal Asynchronous
    Receiver/Transmitter** (**UART**) serial port that can be used to communicate
    with more complex devices.
  prefs: []
  type: TYPE_NORMAL
- en: Complete GrovePi documentation, including the Python API, can be found on Dexter
    Industries' website. More information about the Grove System can be found on Seeed
    Studio's wiki.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**GrovePi**: at [http://www.dexterindustries.com/grovepi/](http://www.dexterindustries.com/grovepi/).
    The GrovePi home page has a complete list of compatible sensors and devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Grove System**: [http://www.seeedstudio.com/wiki/Category:Grove](http://www.seeedstudio.com/wiki/Category:Grove).
    This wiki page describes the Lego-like Grove hardware system in more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Grove System – Python Library Documentation**: [http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/](http://www.dexterindustries.com/GrovePi/programming/python-library-documentation/).
    This website documents the Python programming language library for the GrovePi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**: [https://www.python.org/](https://www.python.org/). The Python
    website has complete reference documentation for the Python language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GrovePi Windows IoT: LED Blink**: [https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38](https://www.hackster.io/9381/grove-pi-windows-iot-getting-started-94bf38).
    A blinking LED example for Windows 10 and the GrovePi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dexter Industries**: [https://en.wikipedia.org/wiki/Dexter_Industries](https://en.wikipedia.org/wiki/Dexter_Industries).
    Dexter Industries is best known for their robotic sensors for the Raspberry Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seeed Studio**: [http://www.seeedstudio.com/depot/](http://www.seeedstudio.com/depot/).
    Seeed is a hardware innovation platform developed in Shenzhen, China.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub**: [http://github.com](http://github.com). GitHub is a collaborative
    repository for open source software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**i2cdetect**: [http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect](http://manpages.debian.org/cgi-bin/man.cgi?query=i2cdetect).
    The Debian man page for i2cdetect documents the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling devices from a web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses a simple Python script to show how devices attached to the
    Raspberry Pi can be controlled from a web page.
  prefs: []
  type: TYPE_NORMAL
- en: The `web.py` programming framework for Python can be used to serve web pages
    from scripts that are written in the Python programming language. This recipe
    features a Python script that serves a web page displaying the current state of
    a GrovePi LED and enables a button on the web page to turn a GrovePi LED on and
    off. It is a simple example, but is an excellent foundation for simple Internet
    of Things projects.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will have installed and applied the `web.py`
    Python framework to serve a web page that can be used to turn an LED on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the ingredients for controlling devices from a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: An initial setup or basic networking setup for the Raspberry Pi that already
    has the GrovePi interfaces and drivers installed (see the previous recipe, *Installing
    the GrovePi*, for instructions). You have also logged in as the user `pi` (see
    the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"), *Installation
    and Setup*, for how to boot and log in and the recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*, for how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GrovePi should already be attached to the Raspberry Pi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Grove LED should be attached to port `D2` of the GrovePi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal` application.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's secure shell server is running, this recipe can be completed
    remotely using a secure shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to controlling devices from a web page are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `web.py` web framework for
    Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After `web.py` is installed, use the `cat` command to create a Python script
    that serves a web page used to turn the Grove LED on and off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `python` command to start serving the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From a web browser, you will be able to see the web page. Use the IP address
    of your Raspberry Pi plus the port `8080` to access the web page (for example,
    `http://192.168.2.19:8080`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web page displays one button. If the LED is off, the button is labeled `on`.
    If the LED is on, the button is labeled `off`. Clicking the button sets the LED
    as stated by the button's label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use *Ctrl+C* to stop serving the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the recipe first uses the `apt-get install`
    command to install the `python-webpy` software package. This software package
    contains the `web.py` web framework for Python.
  prefs: []
  type: TYPE_NORMAL
- en: The `web.py` web framework is a toolkit for creating web servers that use the
    Python programming language to create web pages. The Python script in this recipe
    also uses the GrovePi API introduced in the previous recipe, *Installing the GrovePi*.
  prefs: []
  type: TYPE_NORMAL
- en: Create and run the ledpage website
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cat` command is used to create a new script, `ledpage.py`. The lines immediately
    following the `cat` command up to the end of the data marker (`<<EOD`) are copied
    to the new script (`>ledpage.py`).
  prefs: []
  type: TYPE_NORMAL
- en: This new script will serve a web page that can be used to control a GrovePi
    LED. In the example script, the LED is attached to port `D2` of the GrovePi.
  prefs: []
  type: TYPE_NORMAL
- en: The `ledpage.py` script is run using the `python` command. When the script is
    run, a web server is started listening on port `8080` of every network interface
    attached to the Raspberry Pi (`http://0.0.0.0`).
  prefs: []
  type: TYPE_NORMAL
- en: The output of the web server can be viewed in a web browser. Open a browser
    and browse to `http://ipaddress:8080`, the URL of the running `ledpage.py` script.
    Replace the `ipaddress` in the URL with the IP address of your Raspberry Pi (instructions
    for determining the IP address can be found in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: Action URLs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default view (`http://ipaddress:8080/`) shows a single button that can be
    used to change the current state of the LED. The button is labeled `on` when the
    LED is off and it's labeled `off` when the LED is on. When clicked, the button
    turns the LED to the labeled state.
  prefs: []
  type: TYPE_NORMAL
- en: When the button is labeled `on`, clicking the button sends the browser to the
    URL `http://ipaddress:8080/on`; and when the button is labeled `off`, clicking
    the button sends the browser to the URL `http://ipaddress:8080/off`.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing to the `/on` URL turns the light on and displays an `off` button. Browsing
    to the `/off` URL turns the light off and displays an `on` button. The action
    URLs, `/on` and `/off`, are defined in `ledpage.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Use Ctrl+C to quit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Python web server continues to run until *Ctrl+C* is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ledpage.py` script is a simple yet complete example of a web service that
    controls a device attached to the Raspberry Pi. The script can be broken into
    four parts: initialization, the `request handler` class, the `html_page` function,
    and the `main` loop.'
  prefs: []
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The script begins with two `import` statements: one for the `grovepi` API and
    one for the `web` API. The `web` API is used to set up the web server and the
    `grovepi` API is used to connect to the Grove LED.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `import` statements, two constants are defined: `LED` and `URLS`.
    The `LED` constant defines which digital output port will be used on the GrovePi
    (`2`), and the `URLS` constant defines a mapping between a regular expression
    (`/(.*)`) and a request handler (`request_handler`).'
  prefs: []
  type: TYPE_NORMAL
- en: The defined regular expression (`/(.*)`) matches all URLs. The matched part
    of the URL, anything after the slash (`(.*)`), will be passed to the `request_handler`
    (as `url_match`).
  prefs: []
  type: TYPE_NORMAL
- en: The request_handler class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `request_handler` class defines how HTTP requests are handled by the web
    server. In this script, only the `GET` method of the **HyperText Transfer Protocol**
    (**HTTP**) is implemented.
  prefs: []
  type: TYPE_NORMAL
- en: When you browse to the Python web server's URL (`http://ipaddress:8080`), a
    `GET` method is received by the web server and the `GET` method (`GET ( self,
    url_match )`) of the `request_handler` class is called.
  prefs: []
  type: TYPE_NORMAL
- en: The `GET` method uses the `web` API function `header` to set the `Content-type`
    of the HTTP response to be `text/html` and the character set encoding to be UTF-8
    (`charset=utf-8`). The `Content-type` response header tells the browser what type
    of web content (web page, plain text, image, audio, video, and so on) is located
    at this URL. The response for this URL is a web page (`text/html`) that uses the
    UTF-8 character set.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `GET` method checks the value of the `url_match` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: When the `url_match` is `on` (`http://ipaddress:8080/on`), the `grovepi` API
    function `digitalWrite` is used to first turn the `LED` on (`1`) and then `return`
    an `html_page` to the browser with an `off` button.
  prefs: []
  type: TYPE_NORMAL
- en: When the `url_match` is `off` (`http://ipaddress:8080/off`), the `digitalWrite`
    function is used to turn the `LED` off (`0`) and an `html_page` is `returned`
    to the browser with an `on` button.
  prefs: []
  type: TYPE_NORMAL
- en: If the matched URL (`url_match`) is neither `on` nor `off`, an `html_page` with
    an `on` button is `returned` to the browser. The state of the `LED` is not changed.
  prefs: []
  type: TYPE_NORMAL
- en: The html_page function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `html_page` function (`html_page( state )`) renders the HTML that will be
    sent to the browser to display the web page.
  prefs: []
  type: TYPE_NORMAL
- en: The function has one parameter, `state`, which is used to specify the label
    (`value`) for the button (`<input type="submit">`) and the `action` for the HTML
    `<form>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: A string variable, `form`, is created to build the HTML `<form>` part of the
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: The `action` attribute of the HTML `<form>` tag is set either to `/on` or `/off`
    depending on the value of the `state` parameter. The `action` attribute defines
    the URL where the browser will be sent when the HTML `<form>` is submitted (that
    is, when the button is pressed).
  prefs: []
  type: TYPE_NORMAL
- en: The `value` attribute (the label) of the `<input type="submit">` tag (the button)
    is set either to `on` or to `off` depending on the value of the `state` parameter.
    When clicked, the tag (the button) will submit the HTML `<form>`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the HTML `<form>` tag is completely defined including its end tag `</form>`,
    it is wrapped in a `<body>` tag and an `<html>` tag to complete the minimal HTML
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: The complete web page is returned to the `request_handler`, which sends the
    web page to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The main loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main loop begins `if __name__ == '__main__':` and is called once after the
    `html_page` function and the `request_handler` have been defined.
  prefs: []
  type: TYPE_NORMAL
- en: The main loop first uses the `grovepi` API to initialize the `LED` to the `output
    pinMode`. The GrovePi digital ports can either be used to listen for signals or
    to trigger them. For this script, the `LED` port is configured for `output`.
  prefs: []
  type: TYPE_NORMAL
- en: After the `LED` port is configured, the `web` API's `application` function is
    used to create a web application that listens for the specified `URLS` using Python's
    default global variables (`globals()`) as the application context.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter to the `web.application` function, `URLS`, defines the mapping
    between URL request patterns (regular expressions) and their request handlers
    (Python classes). The second parameter defines the application context (in this
    case, it is the `global` context). The `web.application` function returns a web
    application object (`app`) that encapsulates the HTTP protocol and manages the
    web server.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the web server is started using the `run` function of the newly created
    web application object (`app`).
  prefs: []
  type: TYPE_NORMAL
- en: The web application listens by default on port `8080` of all the network interfaces
    attached to the Raspberry Pi (`0.0.0.0`). The `app.run` function continues until
    it is interrupted (by *Ctrl+C*).
  prefs: []
  type: TYPE_NORMAL
- en: More information on using `web.py` to create web applications using the Python
    scripting language can be found on the `web.py` website ([http://webpy.org/](http://webpy.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**web.py** ([http://webpy.org/](http://webpy.org/)): This web framework was
    originally developed at reddit.com where it grew to serve millions of page views
    per day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**web.py – Tutorial** ([http://webpy.org/docs/0.3/tutorial](http://webpy.org/docs/0.3/tutorial)):
    This is the root of the `web.py` tutorial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular Expression HOWTO** ([https://docs.python.org/2/howto/regex.html](https://docs.python.org/2/howto/regex.html)):
    This is an introductory tutorial to using regular expressions in Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol** ([https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)):
    This Wikipedia article is about the HTTP protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML** ([https://en.wikipedia.org/wiki/HTML](https://en.wikipedia.org/wiki/HTML)):
    This Wikipedia article describes the Hypertext Markup Language (HML) and its history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to an IoT platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe connects your Raspberry Pi to the SmartLiving ([http://smartliving.io](http://smartliving.io))
    Internet of Things (IoT) platform.
  prefs: []
  type: TYPE_NORMAL
- en: The SmartLiving IoT platform uses a web browser to configure rules that respond
    to sensors and/or activate IoT devices attached to your Raspberry Pi. The SmartLiving
    API includes drivers for the GrovePi from Dexter Industries. This recipe integrates
    your Raspberry Pi with the SmartLiving platform and uses it to control a GrovePi
    device attached to your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to control Grove devices attached
    to your Raspberry Pi using the SmartLiving Internet of Things platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: A Basic Networking setup for the Raspberry Pi that already has the GrovePi interfaces
    and drivers installed (see the previous recipe, *Installing the GrovePi*, for
    instructions). You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi should be connected to the Internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GrovePi should already be attached to the Raspberry Pi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Grove LED should be attached to port D2 of the GrovePi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to controlling IoT devices from the SmartLiving platform are:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a free account and log in to the SmartLiving platform at [http://beta.smartliving.io](http://beta.smartliving.io).![How
    to do it...](img/B04745_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus icon to create a new device.![How to do it...](img/B04745_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the device type Raspberry Pi and name the device (**MyGoldenPi**). Click
    the **right arrow icon** to continue.![How to do it...](img/B04745_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Raspberry Pi by clicking on the Raspberry Pi logo.![How to do it...](img/B04745_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select settings by clicking on the **gear icon**.![How to do it...](img/B04745_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that your Raspberry Pi is registered and you can see the device ID, client
    ID, and client key, it's time to switch back to the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi (locally or remotely).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `git clone` command to download the All Things Talk (`allthingstalk`)
    client for Python (`raspberrypi-python-client`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `cd` command to enter the client install directory, and then use the
    Bash script `setupGrovePi.sh` to install the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key in response to any and all installation prompts to accept
    the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation script is complete, use the `reboot` command to restart
    the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the All Things Talk (Smart Living) client has been installed, it's
    time to test the Internet of Things.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log back in to the Raspberry Pi (locally or remotely).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `cd` command to change to the directory with the Smart Living Python
    client, `raspberrypi-python-client`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `cat` command to create a Python script (`ledserver.py`) that connects
    a Grove LED on port D2 to the Smart Living platform. Make sure you replace the
    values of the three configuration parameters (`IOT.DeviceId`, `IOT.ClientId`,
    and `IO.ClientKey`) with the values from your Smart Living account (from step
    6).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `python` command to run the newly created script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the browser, refresh the Smart Living device page. The Raspberry Pi device
    (**MyGoldenPi**) now has a new device (**LED**).![How to do it...](img/B04745_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle the **boolean** switch on the Smart Living web page and the Grove LED
    turns on and off while the running `ledserver.py` script prints additional status
    messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl+C* to stop the `ledserver.py` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe has three parts: registering a Raspberry Pi device with the Smart
    Living IoT platform, installing the Smart Living client API, and finally running
    a script that exchanges signals between the Smart Living platform and the Raspberry
    Pi.'
  prefs: []
  type: TYPE_NORMAL
- en: Register your Raspberry Pi with the IoT platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe begins by registering for a free account at [http://beta.smartliving.io](http://beta.smartliving.io).
  prefs: []
  type: TYPE_NORMAL
- en: After registering for an account, a new Raspberry Pi device interface (**MyGoldenPi**)
    is created and the **Device id**, **Client id**, and **Client key** for this device
    are displayed. These three configuration values are used later in this recipe
    to connect the Raspberry Pi to the Smart Living IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: Install the IoT platform API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe continues by logging in to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The `git clone` command is used to download the All Things Talk client API for
    the Raspberry Pi (`allthingstalk/raspberrypi-python-client`) – the Python API
    that is used to communicate with the Smart Living IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: After the client API is downloaded, the `bash` command is used to run the `setGrovePi.sh`
    script from the client API directory (`raspberrypi-python-client`). The `setupGrovePi.sh`
    installation script installs additional software packages and Python libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Exchange signals with the IoT platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the Smart Living client API is installed, the `cat` command is used to
    create a short Python script (`ledserver.py`) that listens for signals from the
    Smart Living IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: The script is run from the `raspberrypi-python-client` directory using the `python`
    command. While the script is running, the Raspberry Pi is connected to the Smart
    Living IoT platform and receives signals from the IoT platform that turn the LED
    on and off.
  prefs: []
  type: TYPE_NORMAL
- en: The IoT signals are sent using the Raspberry Pi device page on the Smart Living
    website. The device page has an **actuator** labeled **LED**. By toggling the
    **false** – **true** switch under the **LED** label, a signal is sent from Smart
    Living platform through the Internet of Things to the Raspberry Pi. A **false**
    signal turns the LED off. A **true** signal turns the LED on.
  prefs: []
  type: TYPE_NORMAL
- en: A local keyboard interrupt signal (pressing *Ctrl+C* on the keyboard) stops
    the script.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Python script, `ledserver.py`, is a simple demonstration of how a Raspberry
    Pi can be connected to an Internet of Things platform. The script listens for
    and responds to a binary signal sent from the Smart Living IoT platform. The signal
    sent from the IoT platform controls a device attached to the Raspberry Pi (an
    LED).
  prefs: []
  type: TYPE_NORMAL
- en: 'The script has three parts: initialization, the signal handler, and the main
    loop.'
  prefs: []
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The script begins with three `import` statements: one for the GrovePi API (`grovepi`),
    one for the All Things Talk API (ATT_IOT), and one for the `time` API. The `time`
    API provides the `sleep` function; the ATT_IOT API is used to connect with the
    Smart Living IoT platform, and the `grovepi` API is used to connect to the Grove
    LED.'
  prefs: []
  type: TYPE_NORMAL
- en: After the `import` statements, a single constant is defined, **LED**, to represent
    the digital port that will be used on the GrovePi (2).
  prefs: []
  type: TYPE_NORMAL
- en: The signal handler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The signal handler function `on_message` **( ID, value )** defines the actions
    that are taken when signals (messages) are received from the IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: When the last character (`endswith`) of the message **id** is equal to the registered
    asset ID of the LED (`str( LED )`), then the message applies to the **LED** asset.
  prefs: []
  type: TYPE_NORMAL
- en: If the value of the message (converted to lowercase, **lower**) is "**true**",
    the LED will be turned on using the grovepi API (`digitalWrite( LED, 1 )`). When
    the value is "**false**", the LED will be turned off (`digitalWrite( LED, 0 )`).
  prefs: []
  type: TYPE_NORMAL
- en: The main loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main loop (`if __name__ == '__main__':`) begins by using the GrovePi API
    to set the pinmode of the LED to output.
  prefs: []
  type: TYPE_NORMAL
- en: The Smart Living client API (IOT) is configured using the **DeviceId**, **ClientId**,
    and **ClientKey** configuration parameters. They are set to the values displayed
    earlier, during the Smart Living registration. The IOT signal handler parameter,
    `on_message` **,** is set to the signal handling function, `on_message`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the client API (IOT) is configured, the Raspberry Pi is ready to `connect`
    to the Smart Living IoT platform, register a new device asset (`addAsset`), and
    subscribe to messages coming from the IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: The `IOT.connect` method establishes a connection to the Smart Living IoT platform
    using the previously specified **DeviceId**, **ClientId**, and **ClientKey**.
  prefs: []
  type: TYPE_NORMAL
- en: With the connection established, the Raspberry Pi lets the IoT platform know
    (`addAsset`) that there is a binary (**"boolean"**) output (**True**) device attached
    to port D2 (**LED**). The output device is labeled **"LED"** and has a short description,
    **"Light Emitting Diode"**.
  prefs: []
  type: TYPE_NORMAL
- en: The `IOT.subscribe` method lets the Smart Living IoT platform know that the
    Raspberry Pi is ready to receive signals (messages) from the platform.
  prefs: []
  type: TYPE_NORMAL
- en: The `on_message` function was previously defined as the signal handler. So,
    when a new signal (message) arrives for the Raspberry Pi, the `on_message` function
    receives the signal and acts upon its **id** and **value**.
  prefs: []
  type: TYPE_NORMAL
- en: When a **"true"** signal is received, the LED is turned on. When a **"false"**
    signal is received, the LED is turned off.
  prefs: []
  type: TYPE_NORMAL
- en: IoT Rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although this recipe does show how the Raspberry Pi can connect to and exchange
    signals with the Smart Living IoT platform, it does not show how to create new
    IoT Rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Smart Living website ([http://smartliving.io](http://smartliving.io)) has
    a number of examples of how IoT Rules can be used to react to and control the
    Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Detect movement – light an LED when a sensor detects movement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unplugged smartphone – vibrate when a phone is removed from its charger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart doorbell – the doorbell rings your smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light sensor – display light levels in a remote room on your smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart shop window – use a QR code to control the light in a window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visit the Smart Living website for detailed instructions and a complete reference
    to using the Smart Living IoT platform with the Raspberry Pi and other devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SmartLiving** ([http://www.smartliving.io/](http://www.smartliving.io/)):
    Use the Maker link to sign up for a Smart Living account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All Things Talk** ([http://allthingstalk.com/](http://allthingstalk.com/)):
    The All Things Talk website has more details about the home and business versions
    of their Internet of Things platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raspberry Pi kit** ([http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/](http://docs.smartliving.io/kits/linux-raspberry-pi/stepbystep/)):
    This tutorial is a guide for connecting your Raspberry Pi to Smart Living.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raspberry Pi kit Experiments Guide** ([http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/](http://docs.smartliving.io/kits/linux-raspberry-pi/experiments/)):
    There are five experiments on this website to get you started with the IoT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an IoT gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe turns your Raspberry Pi into an IoT gateway using The ThingBox ([http://thethingbox.io/](http://thethingbox.io/))
    powered by Node-RED ([http://nodered.org/](http://nodered.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: The ThingBox is a Raspbian-based operating system distribution for wiring together
    hardware devices, APIs, and online services in new and interesting ways. It comes
    preinstalled with the Node-RED visual tool for wiring the Internet of Things.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, The ThingBox is deployed and a new flow is created that lights
    an LED attached to the Raspberry Pi while a pushbutton is pressed. This is a very
    simple example, but completely demonstrates how The ThingBox is used. At the end
    of the recipe, there is a list of additional nodes that could be used in your
    next project.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, your Raspberry Pi will be an IoT gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Internet connection for downloading The ThingBox distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An SD card – 4 GB or greater (class 10 has the best performance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Raspberry Pi connected to the local network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe only requires the desktop GUI to set up a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Raspberry Pi is running and connected to the network, this recipe is
    completed from another computer using a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to creating an IoT gateway from your Raspberry Pi are:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest image file from The ThingBox website, [http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)
    (see the recipe *Downloading new SD cards* in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the image file to the SD card (see the appropriate disk utility recipe
    for your computer in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot your Raspberry Pi using the updated SD card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your Raspberry Pi uses a Wi-Fi adapter to connect to the local network,
    you will need to log in to the Raspberry Pi GUI once (username: `root`, password:
    `raspberry`) and use the Wi-Fi config utility to configure the wireless network
    adapter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the Raspberry Pi has successfully booted and connected to the network
    (this might take a few seconds longer during the first boot), The ThingBox server
    running on your Raspberry Pi will be available at the local network address, `http://thethingbox.local/`.![How
    to do it...](img/B04745_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click the colored square on the left side of the **Go** node at the beginning
    of the default **Flow**, the message **Hello!** is displayed in the **debug**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **+** tab on the far right side of the center panel (opposite the
    **Flow** tab) to create a new flow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `rpi-gpio` in node to the flow by dragging an in node from the toolbox
    on the left and dropping it on the flow diagram in the center.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `rpi-gpio` out node to the flow by dragging and dropping the out node
    from the toolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the two nodes by dragging the output connector of the **rpi-gpio** in
    node to the input connector of the **rpi-gpio** out node.![How to do it...](img/B04745_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the basic flow has been set up, it's time to configure the nodes. The red
    triangle and blue circle badges on the input and output nodes indicate the configuration
    is not yet complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the `Pushbutton` node. Double-click on the `rpi-gpio` in node. Change
    the **GPIO Pin** to **16 – GPIO4 – BCM23**. Change the **Resistor** to **pullup**.
    Change the **Name** parameter to `Pushbutton`. Click on the **Ok** button.![How
    to do it...](img/B04745_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the LED node. Double-click on the `rpi-gpio` out node. Change the
    **GPIO Pin** to **18 – GPIO5 – BCM24**. Change the **Type** to **Digital output**.
    Change the **Name** to **LED**. Click on the **Ok** button.![How to do it...](img/B04745_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the flow diagram. Double-click on the name, **Sheet 1**. Change the **Name**
    of the flow diagram to **Pushbutton LED**. Click on the Ok button.![How to do
    it...](img/B04745_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the flow by clicking on the red **Activate** button. Wait until the **Successfully
    Deployed** message appears.![How to do it...](img/B04745_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Pushbutton LED** flow has started!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press and hold the **Pushbutton**. The LED glows. Release the **Pushbutton**
    and the **LED** stops glowing.![How to do it...](img/B04745_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the values next to the green status indicators under the input and
    output nodes change from **0** to **1** whenever the pushbutton is pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ThingBox IoT gateway is responding to a hardware signal by sending a hardware
    signal. Your IoT gateway works!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe has two main parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bootable SD card for The ThingBox IoT gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the **Pushbutton LED** flow in the running IoT gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also need to configure your Raspberry Pi's wireless networking.
  prefs: []
  type: TYPE_NORMAL
- en: And you may want to run the example flow when The ThingBox is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bootable SD card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current ThingBox bootable disk image is available from The ThingBox website
    ([http://thethingbox.io/#packagestable](http://thethingbox.io/#packagestable)).
    After the image is downloaded, it needs to be written to an SD card that has at
    least 4 GB of disk space. Class 10 SD cards have the best performance. Instructions
    for creating a bootable SD card can be found in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the ThingBox image is written to the SD card, use it to boot the Raspberry
    Pi. The initial boot takes longer as the filesystem is expanded to fill the whole
    SD card. After the initial boot, subsequent boots will be much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring wireless networking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your Raspberry Pi depends on a Wi-Fi adapter for networking, you will need
    to log in to the Raspberry Pi desktop after the initial boot and configure wireless
    networking. Use the username `root` and the default password `raspberry`.
  prefs: []
  type: TYPE_NORMAL
- en: The wireless networking configuration application is available from the **Raspberry
    Pi Menu > Preferences > WiFi Configuration** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Once the WiFi Configuration application is running, click **Scan** to display
    the available networks. Double-click on your network's **SSID** to enter your
    network's **Private Security Key** (**PSK**) and then click **Add** to add this
    device to the list of known Wi-Fi interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Close the **Scan Results** window and you can observe connection status changes
    in the **WiFi Configuration** window. After adding the **SSID** and **PSK** for
    your network, the Raspberry Pi will continue to use that configuration by default
    at each boot.
  prefs: []
  type: TYPE_NORMAL
- en: The Wi-Fi configuration can also be set from the ThingBox user interface. Choose
    **Settings** from the configuration menu at the top-right of the user interface
    (the three bars next to the **Activate** button).
  prefs: []
  type: TYPE_NORMAL
- en: The ThingBox is ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the Raspberry Pi boots, it broadcasts its name, `thethingbox`, to the
    local multicast DNS server. In a few seconds, after the mDNS server updates, the
    ThingBox user interface is accessible at the URL `http://thethingbox.local/`.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need for additional network configuration. However, the device name
    and other network parameters can be changed from the configuration menu at the
    top-right of the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Running the example flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the ThingBox is first accessed, it displays a default **Flow** made up
    of three nodes: **Go**, **Hello!**, and **display**.'
  prefs: []
  type: TYPE_NORMAL
- en: Each node has configuration parameters that are set by double-clicking on the
    node. Nodes can also have multiple inputs and outputs, and can process more than
    one message.
  prefs: []
  type: TYPE_NORMAL
- en: The default **Flow** is activated by clicking the colored square that is on
    the left side of the **Go** node. Clicking the square sends a message (`msg`)
    to the **Hello!** node.
  prefs: []
  type: TYPE_NORMAL
- en: The **Hello!** node receives the message (`msg`) and sets the `payload` parameter
    of the message to "`Hello!`" and then sends the message on to the **display**
    node.
  prefs: []
  type: TYPE_NORMAL
- en: The **display** node outputs the value of the `msg.payload` parameter in the
    **debug** tab of the right sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the default **Flow**.
  prefs: []
  type: TYPE_NORMAL
- en: Go with the flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All flows follow the same basic pattern.
  prefs: []
  type: TYPE_NORMAL
- en: A message (`msg`) is sent from node to node along the paths that connect each
    node.
  prefs: []
  type: TYPE_NORMAL
- en: Each node can read and update the `msg` as it passes through the node adding,
    updating, or removing `msg` parameters until the `msg` is passed on to the next
    node.
  prefs: []
  type: TYPE_NORMAL
- en: After reaching the end of a flow, the message (`msg`) is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the pushbutton LED flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Pushbutton LED flow is created by clicking on the **+** tab at the top-right
    of the center panel. This creates a new flow sheet with the default name of **Sheet
    1**.
  prefs: []
  type: TYPE_NORMAL
- en: From the Raspberry Pi section of the toolbox on the left, drag an `rpi-gpio`
    in node onto the blank flow sheet. Also drag an `rpi-gpio` out node onto the flow
    sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Connect the two nodes by first clicking on the output connector of the **rpio-gpio**
    in node and dragging until a path forms and connects to the input connector of
    the **rpio-cpio** out node.
  prefs: []
  type: TYPE_NORMAL
- en: Now, double-click on each node and enter the appropriate configuration information.
    The **rpi-gpio** in node is named **Pushbutton**, connected to **GPIO4**, and
    has a **pullup** **Resistor**. The **rpi-gpio** out node is named **LED**, has
    the **Type** **Digital output**, and connects to **GPIO5**. The flow sheet is
    renamed **Pushbutton LED** by double-clicking the sheet name, **Sheet 1**.
  prefs: []
  type: TYPE_NORMAL
- en: Once the nodes are configured, clicking on the red **Activate** button deploys
    the flow. The **Activate** button is red whenever there are changes to the flow.
    When the flow has been deployed, the button turns gray.
  prefs: []
  type: TYPE_NORMAL
- en: While the Pushbutton LED flow is active, the LED glows while the pushbutton
    is pressed and the LED stops glowing when the pushbutton is released.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the green status indicators under the two nodes also change from
    **0** to **1** while the pushbutton is pressed. The Node-RED platform is processing
    each button press.
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi is now a gateway for the Internet of Things!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is a very simple example of The ThingBox powered by Node-RED.
  prefs: []
  type: TYPE_NORMAL
- en: There is a large library of available nodes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are dozens of additional APIs and services in the Node-RED platform.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPIO – the hardware GPIO pins
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse – pressing the mouse buttons
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: General I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP – ReSTful services and web pages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MQTT – message queues
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Sockets – JSON messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP/UDP – data streams
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Serial Port – character streams
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Parsing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV – comma-separated values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON – JavaScript object notation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XML – extensible markup language
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML – hypertext markup language
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email – send/receive e-mail messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter – send/receive tweets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Esendx – send SMS messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Calendar – add, update, and react to events
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RSS – monitor RSS/Atom feeds
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File – read/write files on disk
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Carriots – data collection from connected objects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Emoncms – process and visualize environmental data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Evrythng – drive applications with real-time data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exosite – operationalized cloud processing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thingspeak – open IoT platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tinamous – IoT platform for privacy and collaboration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Xively – enterprise IoT application platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait 40 seconds before powering off or rebooting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is one particular caution that is repeated in The ThingBox documentation.
    It says do not shut down or reboot the Raspberry Pi for at least 40 seconds after
    activating (saving) any flow – even if the flow starts working earlier than that!
  prefs: []
  type: TYPE_NORMAL
- en: Saving the updated flow diagram to disk is scheduled as an independent task
    that runs in parallel with the other tasks (nodes) that are currently running
    in the Node-RED server. So, it is quite likely that changes to the flow diagrams
    are activated in the Node-RED server before they are persisted to disk.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**The ThingBox Project** ([http://thethingbox.io/](http://thethingbox.io/)):
    Use Internet of Things technologies without any technical knowledge and for free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node-RED** ([http://nodered.org/](http://nodered.org/)): Node-RED is a visual
    tool for wiring the Internet of Things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carriots** ([https://www.carriots.com/](https://www.carriots.com/)): Carriots
    is an IoT platform that will store a year of data for 10 devices for free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emoncms** ([http://emoncms.org/](http://emoncms.org/)): Emoncms is a powerful
    open source web app for processing, logging, and visualizing energy, temperature,
    and other environmental data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evrythng** ([https://evrythng.com/](https://evrythng.com/)): Evrythng is
    an IoT platform that connects any consumer product to the web and manages real-time
    data to drive applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thingspeak** ([https://thingspeak.com/](https://thingspeak.com/)): Thingspeak
    is an open source platform for the Internet of Things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tinamous** ([https://www.tinamous.com/](https://www.tinamous.com/)): Tinamous
    integrates status posts, alerts, and sensor measurements using simple, open connectivity
    solutions easily connecting people and Internet of Things devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xively** ([https://xively.com/](https://xively.com/)): Xively simplifies
    the way companies securely and robustly connect their products and users, manage
    IoT data at scale, and engage more closely with their customers, users, and partners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zero-configuration networking** ([https://en.wikipedia.org/wiki/Zero-configuration_networking](https://en.wikipedia.org/wiki/Zero-configuration_networking)):
    This Wikipedia article describes the zero-configuration networking that The ThingBox
    uses to announce its location at `http://thethingbox.local/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
