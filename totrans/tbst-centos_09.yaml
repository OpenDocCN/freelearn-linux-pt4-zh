- en: Chapter 9. Troubleshooting Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting is not always about disaster recovery or fixing broken systems.
    In fact, most troubleshooters tend to spend their time discovering ways to constantly
    improve a system or assisting other colleagues to get the best out of the technology
    at hand. Some would call this Dev/Ops, but regardless of how you look at it, the
    essential principles remain the same. You are a troubleshooter, and you are a
    crucial part of the support network; so with this in mind, we will take a break
    from "saving the day" and approach the subject of web services a little more proactively.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will review the subject of investigating web services with
    the purpose of making improvements and to build on your knowledge as a troubleshooter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to audit the server with cURL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover ways to check your Akamai headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to implement Varnish on Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover how to validate your Varnish installation with cURL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use cURL in order to access an FTP directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to monitor Apache by installing `mod_status`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing the server with cURL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a web server begins to exhibit problems, it can be for a vast number of
    reasons. However, when experiencing the issue as a troubleshooter, remember that
    you are not looking at the application itself (this is the realm of programmers
    and they will not thank you for joining in), but you will be looking at the state
    of the server.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, you can say that this is a process to scrutinize the server and
    its ability to serve web pages or web applications. So, let's begin by checking
    to confirm that cURL is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, you should use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Having completed this step, you are now ready to run your first cURL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'More specifically, you can choose a particular location in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can pass a string like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the preceding commands will show the entire HTTP content of the target
    URL; and yes, it can make the screen look a bit messy. Thus, instead, you can
    invoke the tidy option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you wish to capture data and save the output to a file of your
    choice, then you can achieve this by using the command-line redirection method
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the `-o` option in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that by invoking the `-o` option approach, the target file must be stated
    first. However, given that the preceding example shows that we are saving the
    output to a text file, you can quite happily change this to almost any type of
    file you want, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, working on the assumption that network connectivity is good, we have chosen
    cURL because we are now dealing with the specific problem of a web server that
    may be exhibiting difficulties in displaying web pages.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already seen, by default, cURL will simply output the contents of
    the web page that was requested. However, by using an assortment of additional
    options (or arguments), you can extend its abilities and request far more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we use the `-w` option (write-out), you can obtain the status
    code of any web page by using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `\n` is used to output the result on a new line (you can also output a
    tab with `\t` or a carriage return with `\r`). You should now know the HTTP status
    code and HTTP content type for the web page in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command is a bit too extensive to print in full,
    but at the end of the output, you should see the following (in which the target
    data is placed on separate lines as requested):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, you can even include a remote IP address like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command should show something like the following towards
    the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can obtain the size (in bytes) of a web page with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command will show `63175` bytes towards the end of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if you are dealing with a web server that uses both `301`
    and `302` redirection methods, we can use the `-L` option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, if you would like to ensure your investigation of the server''s web
    pages provides a complete list of all the headers cURL may encounter, you should
    invoke the `-v` option for verbosity in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, once again you can test Red Hat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command will provide the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While for those of you who would prefer to minimize the output to response
    headers only, instead of using the preceding command you should invoke the `-I`
    option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you retried Red Hat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command will provide the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, there is always a lot more that can be said about cURL. In fact,
    you could write an entire book on the subject; however, before we stray too far
    from our main topic, you will be happy to know that you can discover more about
    cURL by reading the manual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Debugging Akamai headers with cURL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CDNs are becoming commonplace, and the most popular of them all is Akamai.
    However, where a CDN can deliver benefits, they can also provide a stumbling block
    when you are troubleshooting a web service, application, or even a simple home
    page. Look at it this way, with a CDN of any type, you are generally working with
    cached objects and you want to validate the traffic behavior. So, with this in
    mind, we will now discuss how `cURL` can come to the rescue:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we must issue a properly formed Pragma header and, to do this,
    you can use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you wish to include the debug information, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, as Red Hat are known users of Akamai, if you try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, unless there have been any significant changes since the publication
    of this book (and web pages always do change over time), the output will look
    similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Quite a long example I agree, but Akamai headers are quite extensive. Of course,
    this process is not restricted to web pages per se, as it can be used to target
    any object of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to target a particular image, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can target a CSS file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, I am assuming that you know most of the HTTP response codes
    (if not, you can find a reference link at the end of this chapter), but before
    we close this subject, let''s take a brief look at some of the less obvious headers
    you will encounter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`X-Check-Cacheable`: This value will tell us whether the object in question
    is cacheable by Akamai.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Cache-Key`: Ignoring the first two values and starting from the third value
    in the resulting string, you will see the CP code and the relevant TTL, although
    the TTL may differ slightly when set at the application level through the Edge-Control
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Cache`: This value will tell us what the Akamai Edge server returned as
    output. However, this value will also indicate one of the following instances:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_HIT`: This value implies that the object was fresh in cache and the object
    was fetched from the disk cache.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_MISS`: This value implies that the object was not in cache; the server
    fetched the object from the origin.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_REFRESH_HIT`: This value implies that the object was stale in cache and
    we successfully refreshed the origin on an If-Modified-Since request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_REFRESH_MISS`: This value implies that the object was stale in cache,
    and refresh obtained a new object from the origin in response to our If-Modified-Since
    request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_REFRESH_FAIL_HIT`: This value implies that the object was stale in cache,
    and we failed on refresh (couldn''t reach the origin), so we served the stale
    object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_IMS_HIT`: This value implies that an If-Modified-Since request from the
    client and object was fresh in cache and served.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_NEGATIVE_HIT`: This value implies that the object previously returned
    a "not found" message (or any other negatively cacheable response) and that the
    cached response was a hit for this new request.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_MEM_HIT`: This value implies that the object was on disk and in the memory
    cache. The server served it without hitting the disk.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_DENIED`: This value implies that you have been denied access to the client
    for whatever reason.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TCP_COOKIE_DENY`: This value implies that you have been denied access on cookie
    authentication (if the centralized or decentralized authorization feature is being
    used in configuration).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: So, as you can see, debugging Akamai headers using cURL is very easy to do.
    Yes, there are browser plugins that will do the same job, but knowing how to do
    it with cURL is far more fun.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Varnish to Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Varnish is a high-performance HTTP accelerator that not only assists in reducing
    the overall server load, but also serves to improve website response times. For
    this reason, it has become very popular; as a consequence of this, we will look
    at the process of setting up Varnish in conjunction with the Apache web server.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, it will be assumed that Apache is installed. Moreover, you
    should be aware that completing the next steps requires access to the EPEL repository.
    Please refer to [Chapter 4](ch04.html "Chapter 4. Troubleshooting Package Management
    and System Upgrades"), *Troubleshooting Package Management and System Upgrades*,
    for instructions on how to download and install the EPEL repository on CentOS
    7.
  prefs: []
  type: TYPE_NORMAL
- en: 'So when you are ready, let''s begin by installing Varnish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Following a successful installation of Varnish, we will need to enable the
    service at boot. This can be achieved by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then need to activate the service like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'So, having completed the basic installation, you can now check the status of
    Varnish by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you check what version you are running by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'At this stage, we need to complete the basic configuration of this service
    and enable it to work in conjunction with Apache. To do this, we will begin by
    opening the main Apache configuration with your favorite text editor like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, scroll down to find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If the web server is running one or more virtual hosts, you will need to make
    the following adjustment in order to reflect the new port that Apache is listening
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now save the file and run the following command to check your syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, having completed these steps, we will make our first configuration change
    to the original Varnish installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Scroll down and look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now scroll down and locate the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This is where Varnish gets interesting, and where you, as the troubleshooter,
    get to determine the most suitable method for optimizing web performance. Currently,
    you will notice that Varnish is configured to use the server's hard disk to cache
    files, and, in this instance, you have two options.
  prefs: []
  type: TYPE_NORMAL
- en: In a situation where a large cache is expected, where RAM is limited, or you
    intend to build a dedicated Varnish store to cache files, by making a simple adjustment
    to reflect the default settings you can specify the size of your cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to create a disk cache of 20 GB, you can use the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you want the ultimate Varnish experience that uses a RAM-caching
    approach, this can be achieved by customizing the following line to reflect the
    system''s needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Now let's take this one stage further.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want the RAM to cache up to 4 GB of data, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you want to improve the performance of a not-so-rich RAM-based
    environment, you can change this value to 512 MB like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now save and close this file before opening the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This file is the overall configuration file for Varnish. I will not go into
    the exact details at this point, as there are many Varnish-based books that cover
    this topic in an exhaustive manner. However, for the purpose of troubleshooting,
    you will need to make a few basic changes in order to get things up-and-running.
    To do this, simply ensure that the following section reflects the criteria of
    the system in question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, you should now restart Apache in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow this by restarting Varnish like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Well done! The installation of Varnish is now complete; you can continue to
    visit your Apache-based websites in the usual manner, but with the added advantage
    of experiencing improved speed and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Varnish with cURL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the web server relies on Varnish, then it is particularly important to ensure
    that your web pages are being cached and that they are served in a timely manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm this, you can begin with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Having used the `-I` option to display the headers only, if Varnish is installed,
    you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the most important lines are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s run through a quick explanation of these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`X-Varnish: XXXXXXXX XXXXXXXX`: The `X-Varnish` header not only contains an
    ID of the current request, but also maintains the ID of the request that populated
    the cache. If there is only one number, you should be aware that the cache was
    populated with the current request and can be considered to be what is termed
    a cache miss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Age: XXXX`: This value indicates how long the content has been stored in cache.
    If a zero (0) is shown, then it implies that the page in question was not cached
    at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, the exact values shown may be different, but having seen this example,
    you are now able to not only confirm and verify the functionality of Varnish on
    your server, but also keep a constant eye on the `Age` value given (you will know
    how long (in seconds) a page will exist in the cache).
  prefs: []
  type: TYPE_NORMAL
- en: Using cURL to access an FTP directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With practice, everyone can use an FTP client, but a situation where you need
    to script certain events is where you will call on cURL to do all the hard work.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, by starting at the most basic level, the easiest way to access an FTP directory
    with an existing username and password will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'When requested, simply enter your password at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you want to search an FTP directory for a particular list of files,
    you can use the `-s` silent option and `grep` in combination like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You can complete your search and upload a file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can make a direct download with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, you should enter the correct password when prompted but, having found
    the relevant file, you can use the following syntax to discover your current location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to bring this section to an end, you can delete a file in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Remember that you need to be extra careful when deleting a file as there will
    be no prompts. The action to delete with cURL is automatic.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling mod_status in Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `mod_status` is an Apache module that assists in the practice of monitoring
    web server load and current `httpd` connections. It comes complete with an HTML
    interface, and it is accessible using any browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `mod_status`, we need to make a few basic configuration changes to the
    `VirtualHosts` file, so let''s start at the beginning by creating a rudimentary
    virtual host with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember: if you are using Varnish, ensure that it uses the correct port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, you can now add the following lines between the appropriate
    `<VirtualHost></VirtualHost>` directives in order to enable `mod_status`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You can see the line that reads `Allow from all`. For the purpose of the preceding
    example, this is fine, but for security reasons, you should lock the connection
    access to a specific IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, a better option will be to use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you should customize the preceding example code to suit the needs
    of your system; when you are finished, simply save and close the file before restarting
    Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open a browser and visit the chosen virtual host using the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://XXX.XXX.XXX.XXX/server-status`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will give you full access to the static `server-status` page. However,
    if you append the URL with the `refresh` option as follows, the page should refresh
    every 5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://XXX.XXX.XXX.XXX/server-status/?refresh=5`'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting page will then show you an array of information that includes
    server uptime, server load, the total number of connections, CPU usage, process
    IDs, the total number of requests, and which requests are currently being processed.
    All of this should prove most useful when you are attempting to highlight any
    issues related to a specific website on the Apache web server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this chapter was to take a very different view on troubleshooting
    web services. From auditing the server with cURL to making performance enhancements
    with Varnish, we have not only considered the needs of a systems administrator,
    but we have also discovered the world of CDNs and Dev/Ops with the intention of
    showing just how versatile a troubleshooter can be and just how important your
    skills will become.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss some techniques used when troubleshooting
    DNS-based services.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Wikipedia home page for Curl: [http://en.wikipedia.org/wiki/CURL](http://en.wikipedia.org/wiki/CURL)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Curl home page: [http://curl.haxx.se](http://curl.haxx.se)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Wikipedia home page for HTTP status codes: [http://en.wikipedia.org/wiki/List_of_HTTP_status_codes](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTPie, a curl alternative: [https://github.com/jakubroztocil/httpie](https://github.com/jakubroztocil/httpie)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Varnish home page: [https://www.varnish-cache.org](https://www.varnish-cache.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Varnish Administrator Documentation: [https://www.varnish-cache.org/docs/trunk/index.html](https://www.varnish-cache.org/docs/trunk/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
