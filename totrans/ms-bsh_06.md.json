["```\nfor placeholder in list_of_items do\n action_1 $placeholder action_2 $placeholder action_n $placeholderdone\n\n```", "```\n#!/bin/bash for i in 1 2 3 4 5 do\n echo \"$i\"done\n\n```", "```\nzarrelli:~$ ./counter-simple.sh 1 2 3 4 5\n\n```", "```\n#!/bin/bash for i in {10..1..2} do\n echo \"$i\"done\n\n```", "```\nzarrelli:~$ ./counter-brace.sh 10 8 6 4 2\n\n```", "```\nzarrelli:~$ for i in *; do echo \"Found the following file: $i\"; done Found the following file: counter-brace.sh Found the following file: counter-simple.sh\n\n```", "```\nBelfast is in UK Redwood is in USA Milan is in ITALY Paris is in FRANCE\n\n```", "```\n#!/bin/bash for cities in Belfast UK Redwood USA Milan ITALY Paris FRANCE do\n echo \"$cities is in $cities\" done exit 0\n\n```", "```\nzarrelli:$ ./for-pair.sh Belfast is in Belfast UK is in UK Redwood is in Redwood USA is in USA Milan is in Milan ITALY is in ITALY Paris is in Paris FRANCE is in FRANCE\n\n```", "```\n#!/bin/bash for cities in \"Belfast UK\" \"Redwood USA\" \"Milan ITALY\" \"Paris FRANCE\" do\n set -- $cities echo \"$1 is in $2\" done exit 0\n\n```", "```\nzarrelli:~$ ./for-pair-set.sh \n  Belfast is in UK\n Redwood is in USA Milan is in ITALY Paris is in FRANCE\n\n```", "```\nzarrelli:~$ cat for-pair-input.sh #!/bin/bash i=0 for cities do\n echo \"City $((i++)) is: $cities\" done exit 0\n\n```", "```\nzarrelli:~$ ./for-pair-input.sh \nBelfast Redwood Milan Paris City 0 is: Belfast City 1 is: Redwood City 2 is: Milan City 3 is: Paris\n\n```", "```\nzarrelli:~/$ cat counter-function.sh #!/bin/bash counter() {\n echo {10..0..2} } for i in $(counter) do\n echo \"$i\" done\n\n```", "```\nzarrelli:~$ ./counter-function.sh 10 8 6 4 2 0\n\n```", "```\nzarrelli:~$ cat c-for.sh #!/bin/bash for ((i=20;i > 0;i--)) { if (( i % 2 == 0 )) then\n echo \"$i is divisible by 2\"fi } exit 0\n\n```", "```\nzarrelli:~$ ./c-for.sh 20 is divisible by 2 18 is divisible by 2 16 is divisible by 2 14 is divisible by 2 12 is divisible by 2 10 is divisible by 2 8 is divisible by 2 6 is divisible by 2 4 is divisible by 2 2 is divisible by 2\n\n```", "```\nwhile condition do\n command_1 command_2 command_n done\n\n```", "```\n#!/bin/bash for i in 1 2 3 4 5 do\n echo \"$i\" done\n\n```", "```\nzarrelli:~$ ./counter-simple.sh 1 2 3 4 5\n\n```", "```\n#!/bin/bash i=1 while (( i <= 5)) do\n echo \"$i\"((i++)) done\n\n```", "```\nzarrelli:~$ ./while-simple.sh 1 2 3 4 5 \n\n```", "```\nuntil condition do\n command_1 command_2 command_n done\n\n```", "```\n#!/bin/bash i=1 until (( i > 5)) do echo \"$i\"((i++))done\n\n```", "```\nzarrelli:~$ ./until-simple.sh 12345\n\n```", "```\nwhile true ; do echo \"Hello\" ; done\n\n```", "```\n#!/bin/bash while true do\n clear cat <<MENU BACKUP UTIL v 1.0 ------------------ 1\\. Backup a file/directory 2\\. Restore a file/directory 0\\. Quit ------------------ MENU\n read -p \"Please select an option, 0 or Q to exit: \" option case $option in 1 | [Bb]) echo \"You chose the first option, Backup\" sleep 3 ;; 2 | [Rr])  echo \"You chose the second option, Restore\"\n sleep 3 ;; 0 | [Qq]) echo \"You chose the third options, Quit, so we quit!\" break ;; *) echo \"Not a valid choice, please select an option...\" sleep 3 ;; esac done \n\n```", "```\nzarrelli:~$ ./menu.sh \n  BACKUP UTIL v 1.0\n ------------------ 1\\. Backup a file/directory 2\\. Restore a file/directory 0\\. Quit ------------------ Please select an option, 0 or Q to exit: 0 You chose the third options, Quit, so we quit!\n\n```", "```\nzarrelli:~$ cat for-continue.sh #!/bin/bash for i in {0..10} do\n if (( i == 4 )) then continue else echo $i fi done exit 0\n\n```", "```\nzarrelli:~$ ./for-continue.sh 0 1 2 3 5 6 7 8 9 10\n\n```", "```\nselect placeholder [in list] do command_1 command_2 command_n done\n\n```", "```\n#!/bin/bash echo \"Just select the fruit you like:\" select fruit in apple banana orange mango do\n echo \"You picked $fruit (Option $REPLY)\" done\n\n```", "```\nzarrelli:~$ ./simple-select.sh Just select the fruit you like: 1) apple 2) banana 3) orange 4) mango #? 3 You picked orange (Option 3) #? o You picked (Option o) #? pear You picked (Option pear) #? \n\n```", "```\nJust select the fruit you like: Enter the number of the file you want to protect: 1) apple 2) banana 3) orange 4) mango Your choice is: \n\n```", "```\nzarrelli:~$ cat case-select.sh #!/bin/bash PS3=\"Your choice is: \" echo \"Just select the fruit you like:\" select fruit in apple banana orange mango do\n case \"$fruit\" in mango) echo \"You chose $fruit, so we wanna break free!\" break ;; *) echo \"You chose $fruit\" ;; esac done\n\n```", "```\nzarrelli:~$ ./case-select.sh Just select the fruit you like: 1) apple 2) banana 3) orange 4) mango Your choice is: 2 You chose banana Your choice is: 4 You chose mango, so we wanna break free!\n\n```", "```\n#!/bin/bash while true do\n clear cat <<MENU BACKUP UTIL v 1.0 ------------------ 1\\. Backup a file/directory 2\\. Restore a file/directory 0\\. Quit ------------------ MENU PS3=\"Which file do you want to backup? \" touch EXIT \n  read -p \"Please select an option, 0 or Q to exit: \" option\n case $option in 1 | [Bb]) echo \"You chose the first option, Backup\" clear select file in * do case \"$file\" in                    EXIT)\n echo \"Ok, we exit!\" rm EXIT break ;; *)\n echo \"Compressing file $file\" tar cvzf \"${file}\".tgz \"$file\" || exit 1 echo \"File $file compressed.\" ls \"${file}\".tgz echo \"Press a key to return to main menu...\" read                break\n ;; esac done ;; 2 | [Rr])         echo \"You chose the second option, Restore\"\n sleep 3 ;; 0 | [Qq]) echo \"You chose the third options, Quit, so we quit!\" break ;; *) echo \"Not a valid choice, please select an option...\" sleep 3 ;; esac done rm EXIT\n\n```", "```\nBACKUP UTIL v 1.0\n------------------\n1\\. Backup a file/directory\n2\\. Restore a file/directory\n0\\. Quit\n------------------\nPlease select an option, 0 or Q to exit:\n\n```", "```\n1) backup-menu.sh 2) case-select.sh 3) c-for.sh 4) counter-brace.sh 5) counter-function.sh 6) counter-simple.sh 7) EXIT 8) for-continue.sh 9) for-pair-input.sh 10) for-pair-set.sh 11) for-pair.sh 12) simple-select.sh 13) until-simple.sh 14) while-simple.sh Which file do you want to backup? 15 Compressing file tar: Substituting `.' for empty member name tar: : Cannot stat: No such file or directory tar: Exiting with failure status due to previous errors\n\n```", "```\n*)\n if [ -z \"$file\" ] then       echo \"Please, select one of the number displayed\"\n sleep 3 continue fi echo \"Compressing file $file\" tar cvzf \"${file}\".tgz \"$file\" || exit 1 echo \"File $file compressed.\" ls \"${file}\".tgz echo \"Press a key to return to main menu...\" read break ;;\n\n```", "```\ngetops options variable\n\n```", "```\n./our_script.sh -x our_argument -a\n\n```", "```\n#!/bin/bash while getopts \":ax:f\" option do\n case $option in a | f) echo \"You selected $option!\" ;;\n x) echo \"You selected $option with argument $OPTARG\" ;;\n ?) echo \"Invalid switch: -$OPTARG\"\n ;; :) echo \"No arguments provided: -$OPTARG\"\n ;; esac done\n\n```", "```\n-a -x argument -f\n\n```", "```\nzarrelli:~/$ ./getops-simple.sh -a You selected a! zarrelli:~/$ ./getops-simple.sh -f You selected f! zarrelli:~/$ ./getops-simple.sh -f -a You selected f! You selected a! zarrelli:~/$ ./getops-simple.sh -x No arguments provided: -x zarrelli:~/$ ./getops-simple.sh -x hello You selected x with argument hello zarrelli:~/$ ./getops-simple.sh -x hello -a -f You selected x with argument hello You selected a! You selected f! zarrelli:~/$ ./getops-simple.sh -z Invalid switch: -z\n\n```", "```\nzarrelli:~/$ ./getops-simple.sh zarrelli:~/$\n\n```", "```\nif (( $# == 0 )) then \necho \"Please, give at least one option on the command line\" exit 1 fi\n\n```", "```\nzarrelli:~$ ./getops-arguments.sh Please, give at least one option on the command line Is it this all about our errors? Not precisely: zarrelli:~$ ./getops-arguments.sh -a Hello You selected a!\n\n```", "```\nzarrelli:~$ ./getops-arguments.sh -x Hello You selected x with argument Hello zarrelli:~$ ./getops-arguments.sh -a Hello You selected a!\n\n```", "```\necho \"And the argument was $*\" shift \"$((OPTIND-1))\" echo \"And the argument was $*\"\n\n```", "```\nzarrelli:~$ ./getops-arguments.sh -x whatever -a Hello You selected x with argument whatever You selected a! And the argument was -x whatever -a Hello And the argument was Hello\n\n```", "```\ncase $option in\n a | f) echo \"You selected $option with $OPTIND=$OPTIND and the command line argument $*!\" ;; x) echo \"You selected $option with argument $OPTARG with $OPTIND=$OPTIND and the command line $*!\"\n ;; ?) echo \"Invalid switch: -$OPTARG with $OPTIND=$OPTIND\" ;; :) echo \"No arguments provided: -$OPTARG with $OPTIND=$OPTIND\" ;; esac done echo \"$OPTIND at the end of the loop is $OPTIND\" shift \"$((OPTIND-1))\" echo \"But at the end of the script we have this left on the command line: $*\"\n\n```", "```\nzarrelli:~$ ./getops-arguments.sh -f -a Hello You selected f with $OPTIND=2 and the command line argument -f -a Hello! You selected a with $OPTIND=3 and the command line argument -f -a Hello! $OPTIND at the end of the loop is 3\n\n```", "```\n# Library file holding common functions and setting # Functions non_zero_input() {\n if (( $1 == 0 )) then  echo \"Please, give at least one option on the command line\"\n exit 1 fi }\n\n```", "```\n#!/bin/bash source library.lib non_zero_input \"$#\"\n\n```", "```\nzarrelli:~$ ./getops-library.sh \nPlease, give at least one option on the command line.\n\n```", "```\n# Library file holding common functions and setting # Functions #---------- non_zero_input() {\n if (( $1 == 0 )) then  echo \"Please, give at least one option on the command line\"\n exit 1 fi } color_print() {\n printf \"$1$2${CReset}n\" } # Colors - foreground #-------------------- Black='33[0;30m' Red='33[0;31m' Green='33[0;32m' Yellow='33[0;33m' Blue='33[0;34m' Purple='33[0;35m' Cyan='33[0;36m' White='33[0;37m' # Colors - Reset #--------------- CReset='33[0m'\n\n```", "```\ndone echo \"$OPTIND at the end of the loop is $OPTIND\" shift \"$((OPTIND-1))\" echo $@ echo -e \"${Green}But${CReset} at the end of the script we have this left on the command line: ${Red}$@${CReset}\" color_print ${Yellow} \"But we can use our color_print function to have a fancy output: $@\"\n\n```", "```\necho -e \"${Green}But${CReset} at the end of the script we have this left on the command line: ${Red}$@${CReset}\"\n\n```", "```\ncolor_print ${Yellow} \"But we can use our color_print function to have a fancy output: $@\"\n\n```", "```\nzarrelli:~$ dialog --begin 10 30 --backtitle \"Example menu\" --title \"This is a Message Box\" --msgbox 'Your message goes here!' 10 30 \n\n```", "```\nzarrelli:~$ ls -l | zenity --text-info --height=600 --width 800 \n\n```", "```\n#!/bin/bash\nfred=$(tput setaf 1)\nfgreen=$(tput setaf 2)\nfwhite=$(tput setaf 7)\nbblue=$(tput setab 4)\nesmso=$(tput smso)\nxsmso=$(tput rmso)\ndim=$(tput dim)\nreset=$(tput sgr0)\nhide=$(tput civis)\nbox() {\nprintf ${hide} \nprintf ${bblue} \nwidth=$(tput cols)\nheight=$(tput lines)\nmessage=\"Width is: ${esmso}${fgreen}$width${fwhite} Height is: ${dim}${fred}$height${reset}\"\nlength=${#message}\nclear\ntput cup $((height / 2)) $(((width / 2) - ((length - 29) / 2)))\nprintf \"$message\"\n}\ntrap box WINCH\nbox\nwhile true\ndo\n:\ndone \n\n```", "```\n0 black 1 red 2 green 3 yellow 4 blue 5 magenta 6 cyan 7 white\n\n```"]