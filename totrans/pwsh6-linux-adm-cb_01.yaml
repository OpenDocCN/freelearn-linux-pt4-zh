- en: Installation, Reference and Help
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装、参考和帮助
- en: 'In this chapter we''re going to cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下操作步骤：
- en: Installing PowerShell
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PowerShell
- en: Fetching help information in PowerShell
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 中获取帮助信息
- en: Fetching help information for a specific cmdlet
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取特定 cmdlet 的帮助信息
- en: Updating help
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新帮助
- en: Searching help for keywords
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索关键字的帮助信息
- en: Looking for help information specific to a parameter
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找特定参数的帮助信息
- en: Exploring the `about_` topics
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索 `about_` 主题
- en: Discovering cmdlets
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发现 cmdlet
- en: Finding modules
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找模块
- en: Installing modules from the repository
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储库安装模块
- en: Listing the various providers in PowerShell
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出 PowerShell 中的各种提供者
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It all begins with the installation of PowerShell on your system. Installation
    of PowerShell is simple and straightforward. Since PowerShell is open source,
    its source code is available on the arguably largest platform for open source
    projects, GitHub. At the moment, Windows, Debian (and Ubuntu), RedHat Linux (and
    CentOS), Fedora and macOS are officially supported by **the PowerShell project**.
    Arch Linux and Kali Linux are supported by the community. Community support is
    also available for the AppImage edition of PowerShell that can be used on most
    of the modern-day Linux distributions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都从在您的系统上安装 PowerShell 开始。安装 PowerShell 简单而直接。由于 PowerShell 是开源的，其源代码可以在可能是最大的开源项目平台
    GitHub 上获得。目前，Windows、Debian（和 Ubuntu）、RedHat Linux（和 CentOS）、Fedora 和 macOS 是**PowerShell
    项目**的官方支持系统。Arch Linux 和 Kali Linux 得到社区的支持。还有适用于大多数现代 Linux 发行版的 PowerShell AppImage
    版本的社区支持。
- en: An AppImage is a way of packaging applications to run on Linux distributions.
    Every application has its dependencies. On Linux, the package managers manage
    the installation of the dependencies while installing the packages. An AppImage
    package, on the other hand, packs all the necessary dependencies within itself.
    An AppImage can run in **portable** mode, or be installed on the system, based
    on user preference.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AppImage 是将应用程序打包为在 Linux 发行版上运行的一种方式。每个应用程序都有其依赖关系。在 Linux 上，包管理器管理安装依赖项时会安装软件包。另一方面，AppImage
    软件包会将所有必要的依赖项打包到其内部。AppImage 可以以**便携**模式运行，也可以根据用户的喜好安装在系统上。
- en: PowerShell is, as of writing of this chapter, experimentally available for Windows
    on ARM and Raspbian Stretch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 至撰写本章时，PowerShell 已试验性地支持 Windows on ARM 和 Raspbian Stretch。
- en: Installing PowerShell
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PowerShell
- en: Basically, in Linux, it should be fairly simple to get the source code and build
    the application from the source code using make. This approach should work for
    PowerShell as well. However, as noted above, official support and community support
    are available only for a few distributions. We would focus on installing PowerShell
    on Ubuntu and CentOS since they are two of the most popular Linux distributions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，在 Linux 中，应该很容易获取源代码，并使用 make 构建应用程序。这种方法对 PowerShell 也适用。但是，如上所述，官方支持和社区支持仅适用于少数几种发行版。我们将重点放在在
    Ubuntu 和 CentOS 上安装 PowerShell，因为它们是最流行的两种 Linux 发行版之一。
- en: 'PowerShell is available in two releases: stable and preview. The stable releases
    are suitable for production environment since they''re more reliable. The preview
    releases are for test environments where the administrators are allowed to feel
    a little adventurous, and are willing to report bugs they come across along with
    providing feedback on the capabilities.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 有两个版本：稳定版和预览版。稳定版适用于生产环境，因为它们更可靠。预览版适用于测试环境，管理员可以在其中稍作尝试，并愿意报告他们遇到的
    bug，同时提供关于功能的反馈。
- en: Getting Ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Getting ready to install PowerShell on your computer is simple. You simply need
    a working Linux computer, which you have administrator privileges on. Depending
    on what mode you pick to install PowerShell, you may or may not need a package
    manager. Chances are, your Linux distribution already has a package manager available.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 准备在计算机上安装 PowerShell 是简单的。您只需拥有一个可以运行 Linux 的计算机，并具有管理员权限。根据您选择安装 PowerShell
    的模式，您可能需要或不需要包管理器。您的 Linux 发行版很可能已经有可用的包管理器。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As discussed, we will look at the procedure to install PowerShell on Ubuntu
    (and its derivatives) as well as CentOS (and its derivatives).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将讨论在 Ubuntu（及其衍生版本）以及 CentOS（及其衍生版本）上安装 PowerShell 的步骤。
- en: Installation on Ubuntu
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装
- en: There really are many ways to install PowerShell on your computer. Since we're
    installing PowerShell on Ubuntu, we shall look at two ways to do it. The first
    is by adding Microsoft's key and registering the repository and then using the
    Advanced Package Tool (APT) to install PowerShell, and the other, directly using
    the .deb package from GitHub.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确实有很多方法可以在你的计算机上安装PowerShell。由于我们正在Ubuntu上安装PowerShell，我们将介绍两种方法。第一种是通过添加微软的密钥并注册仓库，然后使用高级包工具（APT）安装PowerShell，第二种是直接使用GitHub上的.deb包。
- en: Installing from the repository
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过仓库安装
- en: The last version of Ubuntu that PowerShell has an official package for is Ubuntu
    17.04\. If you have Ubuntu 17.04, use the steps below to install PowerShell. Otherwise,
    it is suggested that you use the direct download method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell的官方包支持的最后一个Ubuntu版本是Ubuntu 17.04。如果你使用的是Ubuntu 17.04，请使用以下步骤安装PowerShell。否则，建议使用直接下载方式。
- en: 'The first step is to import the GPG keys for the public repository:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是导入公共仓库的GPG密钥：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that the key has been added, register the repository---this repository is
    maintained by Microsoft.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，密钥已添加，注册仓库——这个仓库由微软维护。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Update the package list using the following command.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更新包列表。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, install PowerShell.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装PowerShell。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing via direct download
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过直接下载安装
- en: 'Follow the steps below to install PowerShell on Ubuntu:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Ubuntu上安装PowerShell：
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/powershell/powershell](https://github.com/powershell/powershell)。
- en: Scroll down to the table that contains the list of Linux distributions officially
    supported by the PowerShell team.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动，找到包含PowerShell团队正式支持的Linux发行版列表的表格。
- en: 'Click on the relevant link: `.deb` under Downloads (stable)—we will stick to
    the stable release.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击相关链接：在下载（稳定版）下的`.deb`—我们将使用稳定版。
- en: Read the installation instructions if you need additional information.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要更多信息，请阅读安装说明。
- en: Run the .deb file with `gdebi` or `eddy` or one such package installer to complete
    the installation.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`gdebi`、`eddy`或类似的包管理工具运行.deb文件来完成安装。
- en: 'If you aren''t running one of the distributions supported officially by the
    Team or by the community, use the AppImage. Follow steps 1 and 2 from above, and:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有运行PowerShell团队或社区正式支持的发行版，请使用AppImage。按照上述步骤1和2，然后：
- en: Click on Many Linux distributions | AppImage to download the Ap-pImage file.
    An AppImage file is a an application, packaged with all the dependencies required
    to run the application.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Many Linux distributions | AppImage以下载AppImage文件。AppImage文件是一个应用程序，包含运行该应用程序所需的所有依赖项。
- en: Save the AppImage file at a convenient location.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将AppImage文件保存到一个方便的位置。
- en: Once the download completes, navigate to the download location and run the AppImage.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，导航到下载位置并运行AppImage。
- en: If you get a prompt asking if you would like PowerShell installed, choose the
    response appropriate to your environment.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你收到提示询问是否安装PowerShell，请选择适合你环境的选项。
- en: Installation on CentOS
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CentOS上安装
- en: 'Installation of PowerShell on CentOS 7 (or RedHat 7) also has two methods:
    the repository and direct download. The process is similar to that of installation
    on Ubuntu Linux.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS 7（或RedHat 7）上安装PowerShell也有两种方法：仓库和直接下载。过程与在Ubuntu Linux上的安装类似。
- en: Installing from the repository
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过仓库安装
- en: 'To begin installation:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 开始安装：
- en: First, register the Microsoft repository.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，注册微软仓库。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, install PowerShell using `yum`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`yum`安装PowerShell。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing via direct download
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过直接下载安装
- en: 'Follow the steps below to install PowerShell on CentOS:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在CentOS上安装PowerShell：
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://github.com/powershell/powershell](https://github.com/powershell/powershell)。
- en: Scroll down to the table that contains the list of Linux distributions officially
    supported by the PowerShell team.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动，找到包含PowerShell团队正式支持的Linux发行版列表的表格。
- en: 'Click on the relevant link: `.rpm` under Downloads (stable)—we will stick to
    the stable release.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击相关链接：在下载（稳定版）下的`.rpm`—我们将使用稳定版。
- en: Read the installation instructions if you need additional information.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要更多信息，请阅读安装说明。
- en: Install the RPM package using the following command (assuming your download
    is at `~/Downloads` and your PWD is `~/Downloads`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装RPM包（假设你的下载文件在`~/Downloads`，当前工作目录是`~/Downloads`）。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using the AppImage package
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AppImage包
- en: Using the AppImage is much simpler.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AppImage要简单得多。
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://github.com/powershell/powershell](https://github.com/powershell/powershell)。
- en: Scroll down to the Get PowerShell section, and find the AppImage link under
    community-supported distributions.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动至 "Get PowerShell" 部分，并在社区支持的分发版本下找到 AppImage 链接。
- en: Download the AppImage and place it at a convenient location.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 AppImage 并将其放置在一个方便的位置。
- en: Run `chmod a+x PowerShell-<version>-<architecture>.AppImage` to make the AppImage
    executable.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `chmod a+x PowerShell-<version>-<architecture>.AppImage` 以使 AppImage 可执行。
- en: Call the AppImage to run PowerShell. You may be asked if you'd like the AppImage
    installed on your computer. Select Yes if you would like that.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 AppImage 以运行 PowerShell。您可能会被询问是否希望将 AppImage 安装到计算机上。如果希望安装，请选择“是”。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The package manager installs the package with all its dependencies and makes
    the relevant commands available for use.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器会安装该包及其所有依赖，并使相关命令可用。
- en: In case of the AppImage package, the dependencies are all bundled into the package
    (including .NET Core), and the package can either run in portable mode on your
    computer, or can be installed and called. Launch PowerShell by running `pwsh`
    to take a look.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AppImage 包，所有依赖项都已捆绑在包中（包括 .NET Core），且该包可以在您的计算机上以便携模式运行，或者可以安装并调用。通过运行
    `pwsh` 启动 PowerShell 来查看。
- en: See also
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe 2.5: Comparing Windows PowerShell and PowerShell'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 示例 2.5：比较 Windows PowerShell 和 PowerShell
- en: Fetching Help Information in PowerShell
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 PowerShell 中获取帮助信息
- en: 'Commands in PowerShell are called cmdlets (pronounced: command-lets). Cmdlets
    come pre-packaged with all the necessary help information, just like the help
    available for any of the Linux commands. The difference is that there''s a separate
    cmdlet available to get you the necessary help; help is not a switch in PowerShell.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中的命令被称为 cmdlet（发音：command-lets）。Cmdlets 预先包装了所有必要的帮助信息，类似于 Linux
    命令提供的帮助。不同之处在于，PowerShell 中有一个单独的 cmdlet 来获取所需的帮助；在 PowerShell 中，帮助不是一个开关。
- en: Before we begin, let's launch the Terminal (launch any of the terminal emulators
    available on your computer). Let's now type `pwsh` to call PowerShell. Proceed
    with the steps below once you get the PS prompt.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，先启动终端（启动您计算机上任何可用的终端模拟器）。现在输入 `pwsh` 调用 PowerShell。一旦看到 PS 提示符后，按照以下步骤操作。
- en: 'To get help information in PowerShell:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 PowerShell 中获取帮助信息：
- en: 'Enter `Get-Help` at the prompt to get an overview of the help system in PowerShell.
    You would see an output like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符下输入 `Get-Help`，以获取 PowerShell 中帮助系统的概述。您将看到类似如下的输出：
- en: '![](img/f608603b-ab54-460d-996d-23861db19141.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f608603b-ab54-460d-996d-23861db19141.png)'
- en: PowerShell cmdlets are built with help information written in them. Running
    `Get-Help` without any arguments would simply show you basic information on help
    available in PowerShell, which is not quite remarkable. Let us look at another
    recipe to leverage `Get-Help` a little better.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell cmdlet 是内置了帮助信息的命令。运行 `Get-Help` 不带任何参数时，您只会看到有关 PowerShell 中可用帮助的基本信息，这并没有什么特别之处。让我们来看一下另一个示例，如何更好地利用
    `Get-Help`。
- en: Fetching Help Information for a Specific Cmdlet
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取特定 cmdlet 的帮助信息
- en: While Get-Help shows information about help itself, it can also take in other
    cmdlets as arguments and show help for them. Let's pick `Get-Command` as an example
    and get help on the cmdlet.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Get-Help` 显示关于帮助本身的信息时，它也可以接受其他 cmdlet 作为参数，并显示它们的帮助信息。让我们以 `Get-Command`
    为例，获取该 cmdlet 的帮助。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'At the prompt, type in the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入以下内容：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You''d get an output like this:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到类似如下的输出：
- en: '![](img/0f4996e6-5ed6-4bfe-a7da-c37a3cfc3d03.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f4996e6-5ed6-4bfe-a7da-c37a3cfc3d03.png)'
- en: 'You can even get complete help on a cmdlet, including information about each
    of the parameter that you can use with the cmdlet; information such as whether
    the parameter is positional, mandatory and so on. We shall see in detail about
    each of these as we move into administration using PowerShell. To get full help
    on the cmdlet, enter:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你甚至可以获得关于 cmdlet 的完整帮助，包括关于每个可以与 cmdlet 一起使用的参数的信息；这些信息包括该参数是否是位置参数、是否是必需的等等。我们将在后续的
    PowerShell 管理中详细了解每个内容。要获取 cmdlet 的完整帮助，请输入：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To see examples of how to use the cmdlet, enter:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看如何使用 cmdlet 的示例，请输入：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To read help information online, enter:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在线阅读帮助信息，请输入：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that parameters are grouped in the output under SYNTAX. We can see two
    such groups in this case. These groups are called **Parameter Sets**. Parameter
    sets tell us which parameters can be grouped together. Two parameters not appearing
    within the same parameter set cannot be used together.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，参数在输出中按 SYNTAX 组进行分类。在这种情况下，我们可以看到两个这样的组。这些组称为 **参数集**。参数集告诉我们哪些参数可以组合在一起。两个不在同一参数集中的参数不能一起使用。
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you run the cmdlet, `Get-Help` with another cmdlet as the argument, `Get-Help`
    fetches help information for the cmdlet that was passed as the argument; `Get-Command`
    in this case. We shall see in the later chapters how arguments are handled. For
    now, we're simply calling the help for an arbitrary cmdlet.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `Get-Help` cmdlet，并传入另一个 cmdlet 作为参数时，`Get-Help` 会获取传入的 cmdlet（在本例中是 `Get-Command`）的帮助信息。我们将在后续章节中看到参数是如何处理的。目前，我们只是调用一个任意
    cmdlet 的帮助。
- en: If you notice the output, you'd see the name of the cmdlet, the syntax to use
    with the cmdlet, the alias available for the cmdlet and more online help if required.
    Full and Examples are switches which tell PowerShell the level of help you need.
    These are mutually exclusive; you cannot run `-Full` and `-Examples` at the same
    time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看输出，你会看到 cmdlet 的名称、使用该 cmdlet 的语法、可用的 cmdlet 别名以及如果需要的话，更多的在线帮助。`Full`
    和 `Examples` 是用来告诉 PowerShell 你需要哪种级别的帮助的开关。这两个选项是互斥的；你不能同时使用 `-Full` 和 `-Examples`。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe 2.6: Listing out the aliases and using them in place of cmdlets'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方案 2.6：列出别名并将其用作 cmdlet 的替代
- en: 'Recipe 1.4: Updating help'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方案 1.4：更新帮助
- en: 'Recipe 1.3: Fetching help information for a specific cmdlet (Information about
    Parameter Sets)'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方案 1.3：获取特定 cmdlet 的帮助信息（关于参数集的信息）
- en: Updating Help
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新帮助
- en: Help information in PowerShell is dynamic. In most situations, PowerShell goes
    online to fetch the latest help. However, it is also possible to store the help
    files offline. This can be done using the cmdlet, `Update-Help`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中的帮助信息是动态的。在大多数情况下，PowerShell 会在线获取最新的帮助。然而，也可以将帮助文件离线存储。可以使用 `Update-Help`
    cmdlet 完成此操作。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To download the help files for the locally-installed PowerShell modules:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载本地安装的 PowerShell 模块的帮助文件：
- en: Type `exit` to exit PowerShell. This is so that you can relaunch PowerShell
    with elevated privileges.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `exit` 退出 PowerShell。这是为了你可以重新启动 PowerShell，并以提升的权限运行。
- en: Enter `sudo pwsh` to launch PowerShell as a super-user.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `sudo pwsh` 以超级用户身份启动 PowerShell。
- en: At the `PS` prompt, run `Update-Help`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PS` 提示符下，运行 `Update-Help`。
- en: Wait for the update progress bar to appear. The bar will fill as the help files
    download to your computer.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待更新进度条显示。进度条会随着帮助文件下载到你的计算机而填充。
- en: '![](img/0475c76f-4e54-4f67-a125-cc9b7bd7f082.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0475c76f-4e54-4f67-a125-cc9b7bd7f082.png)'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: PowerShell goes online to fetch help information every time you run the Get-Help
    cmdlet—the help files are not stored offline. This is primarily to ensure that
    only the latest help is referred. Besides, viewing help online also does not occupy
    space on the local computer.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行 Get-Help cmdlet 时，PowerShell 都会在线获取帮助信息——帮助文件不会离线存储。这样做的主要目的是确保始终引用最新的帮助信息。此外，在线查看帮助也不会占用本地计算机的存储空间。
- en: In some cases, however, it is necessary that help information be stored for
    offline access. In such situations, it would make sense to download and store
    the help files.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，需要将帮助信息存储以供离线访问。在这种情况下，下载并存储帮助文件是有意义的。
- en: One of the reasons this action requires elevated privileges is that the help
    information is stored within the shell. Therefore, non-administrators may not
    be able to update help without administrator intervention.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作需要提升权限的原因之一是，帮助信息存储在 shell 中。因此，非管理员用户可能无法在没有管理员干预的情况下更新帮助。
- en: Searching Help for Keywords
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在帮助中搜索关键词
- en: Linux administrators are very comfortable using `grep` to search for specific
    text patterns in any textual output. PowerShell, as we know, returns only **object**—PowerShell
    treats text as an object as well.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 管理员非常习惯使用 `grep` 来搜索任何文本输出中的特定文本模式。正如我们所知，PowerShell 只返回 **对象**——PowerShell
    也将文本视为对象。
- en: While converting an object into text diminishes the power of PowerShell, it
    still is necessary in some scenarios. In this case, we shall look for the keyword,
    “common” in the help output.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将对象转换为文本会削弱 PowerShell 的功能，但在某些场景下仍然是必要的。在这种情况下，我们将查找帮助输出中的关键词“common”。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us begin the process of searching by first getting the help information
    for a cmdlet:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过获取 cmdlet 的帮助信息来开始搜索过程：
- en: Launch PowerShell by entering `pwsh` at the terminal.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端输入 `pwsh` 启动 PowerShell。
- en: 'At the prompt, type in:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should give you helpful information on the specified cmdlet.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能给你提供有关指定 cmdlet 的有用信息。
- en: Convert the output into text using the Out-String cmdlet along with the -Stream
    switch to return one string at a time rather than the whole of the help information
    as a single string. This way, we'd be able to run string matching more efficiently
    and get shorter search results.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Out-String` cmdlet 并结合 `-Stream` 参数将输出转换为文本，这样可以一次返回一个字符串，而不是将整个帮助信息作为单一字符串返回。这样，我们能够更高效地执行字符串匹配，并获得更简短的搜索结果。
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There won't be a noticeable difference at the moment. Add the Select-String
    cmdlet to perform the grep-like operation.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前不会有明显的变化。添加 `Select-String` cmdlet 来执行类似 `grep` 的操作。
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This gives you an output with the exact line that has the string, ‘common' in
    it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将输出包含字符串 'common' 的确切行。
- en: '![](img/f417912f-ba4f-4748-a45f-ce68acc26dfc.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f417912f-ba4f-4748-a45f-ce68acc26dfc.png)'
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At the first step, we simply get the help information for the Get-Command cmdlet.
    This output is an object—performing a text lookup operation is best done when
    the output is text. Out-String converts this output into a plain string; the only
    issue is that the whole block of text is one single string. A text lookup this
    way may not be really helpful. We use the -String switch to break the large string
    into smaller pieces (paragraphs in this case). Next, we use the Select-String
    along with the keyword to select the string that contains our keyword.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们简单地获取 `Get-Command` cmdlet 的帮助信息。这个输出是一个对象——当输出为文本时，执行文本查找操作效果最佳。`Out-String`
    将此输出转换为纯文本字符串；唯一的问题是整个文本块是一个单一的字符串。以这种方式进行文本查找可能并不十分有用。我们使用 `-String` 参数将大字符串拆分成更小的部分（在这种情况下是段落）。接下来，我们使用
    `Select-String` 结合关键字来选择包含我们关键字的字符串。
- en: Looking for help information specific to a parameter
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找特定于某个参数的帮助信息
- en: As we saw in the previous sections, PowerShell's help output could be a little
    overwhelming. We run `Get-Help` with the `-Full` switch when we need information
    on the parameters in the cmdlet whose help information we want to access. However,
    this lists out all the parameters. What if we wanted information on only a single
    parameter?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面章节看到的，PowerShell 的帮助输出可能会有点让人应接不暇。当我们需要获取 cmdlet 中参数的信息时，我们可以运行 `Get-Help`
    并使用 `-Full` 参数。然而，这会列出所有的参数。如果我们只想获取某一个参数的信息，该怎么办呢？
- en: Discovering Cmdlets
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现 Cmdlets
- en: So far, we saw how to get help on cmdlets. We used the Get-Command cmdlet as
    the example argument. We would now use Get-Command to discover cmdlets in PowerShell.
    Get-Help and Get-Command thus become the most important cmdlets when you need
    any help information in PowerShell.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何获取 cmdlet 的帮助信息。我们以 `Get-Command` cmdlet 作为示例参数。现在我们将使用 `Get-Command`
    来发现 PowerShell 中的 cmdlet。因此，`Get-Help` 和 `Get-Command` 成为在 PowerShell 中获取帮助信息时最重要的
    cmdlet。
- en: PowerShell is like plain English—PowerShell follows the Verb-Noun format in
    cmdlet naming, which makes the cmdlets sound like plain English commands. PowerShell
    even uses what's known as **approved verbs**, that ensures that verbs follow a
    convention when naming cmdlets. The nouns, on the other hand, can be arbitrary.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 就像纯英语——PowerShell 遵循动词-名词格式来命名 cmdlet，这使得 cmdlet 听起来像普通的英语命令。PowerShell
    甚至使用被称为 **批准动词** 的规范，确保动词在命名 cmdlet 时遵循约定。另一方面，名词可以是任意的。
- en: Most programmers would suggest learning to <q>think in the language</q>. This,
    combined with muscle memory (which helps you remember the keys on the keyboard),
    makes programming as well as scripting faster. PowerShell's structure being like
    English helps a lot in this regard; it's easy to think in PowerShell. For instance,
    if you would like to know the current date, all you have to say is, `Get-Date`,
    and PowerShell will print the date and time on the screen for you.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序员建议学习<q>以语言思考</q>。结合肌肉记忆（帮助你记住键盘上的按键），这使得编程和脚本编写更高效。PowerShell 的结构类似英语，在这方面帮助很大；用
    PowerShell 思考非常容易。例如，如果你想知道当前日期，你只需输入 `Get-Date`，PowerShell 就会在屏幕上显示日期和时间。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us look at how to get information only about the `Noun` parameter of `Get-Help`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何仅获取 `Get-Help` 中 `Noun` 参数的信息。
- en: Invoke PowerShell by running `pwsh` on the terminal window.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端窗口中运行 `pwsh` 启动 PowerShell。
- en: At the prompt, enter `Get-Help Get-Command` to look for basic help information
    on the cmdlet.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下，输入`Get-Help Get-Command`以查找有关 cmdlet 的基本帮助信息。
- en: Note down the parameter which you want more information about. Let's pick the
    parameter `Noun` as an example.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记下你想要了解更多信息的参数。我们以`Noun`参数为例。
- en: 'Enter the following command at the prompt:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下输入以下命令：
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output contains information specific to the `Noun` parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出包含与`Noun`参数相关的信息：
- en: '![](img/35e5d79d-da5e-48da-a3a1-2a533159bf7b.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35e5d79d-da5e-48da-a3a1-2a533159bf7b.png)'
- en: How it works...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is a classic example of object filtering. Since the output of most PowerShell
    cmdlets are objects, it is easy to select the necessary object and discard the
    rest from the output.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的对象筛选示例。由于大多数 PowerShell cmdlet 的输出是对象，因此很容易选择必要的对象并从输出中丢弃其余部分。
- en: When we run `Get-Help` with the cmdlet we need help about and the specific parameter
    of the cmdlet we are looking for, we get a filtered help specific to the cmdlet
    in question. In our case, we picked the Noun parameter of `Get-Command`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用需要帮助的 cmdlet 和我们正在查找的特定参数运行`Get-Help`时，我们会得到一个与该 cmdlet 相关的过滤帮助。在我们的案例中，我们选择了`Get-Command`的
    Noun 参数。
- en: Exploring the About_ Topics
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 About_ 主题
- en: Documentation is one of the key strengths of PowerShell. While not all modules
    have complete documentation, all of the first-party modules do, along with the
    well-done third-party ones. By default, PowerShell itself has exhaustive documentation
    built within it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是 PowerShell 的一大优势。虽然并非所有模块都有完整的文档，但所有官方模块都有完整文档，第三方模块中的一些也做得很好。默认情况下，PowerShell
    本身内置了详尽的文档。
- en: In this recipe, we would look for `about_` topics, pick one of the topics from
    the output and read more about the subject we picked.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将查找`about_`主题，从输出中选择一个主题并深入阅读我们选择的内容。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us begin with listing out all the `about_*` helpfiles.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从列出所有`about_*`帮助文件开始。
- en: Invoke PowerShell using the command, `pwsh`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令`pwsh`启动 PowerShell。
- en: Enter `Get-Help about_*` to list out all the `about_*` helpfiles.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Get-Help about_*`来列出所有的`about_*`帮助文件。
- en: '[PRE15]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Pick out the topic you'd like to read about—we pick `about_Modules`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想阅读的主题——我们选择了`about_Modules`。
- en: Enter `Get-Help about_Modules` to read up on PowerShell modules.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Get-Help about_Modules`来查看 PowerShell 模块的文档。
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Get-Help` gives you information about cmdlets if the cmdlet is passed as an
    argument. In cases where you know only a part of the name of the cmdlet, you can
    use a combination of characters and wildcards to list out cmdlets that match the
    search string (`about_*` in our case).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Help`会提供有关 cmdlet 的信息，如果将 cmdlet 作为参数传递。当你只知道 cmdlet 名称的一部分时，你可以使用字符组合和通配符列出与搜索字符串匹配的
    cmdlet（在我们的案例中是`about_*`）。'
- en: Now, we pick the topic we would like to read about and enter that specific `about_`
    topic. Now, `Get-Help` shows the complete documentation about the topic.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们选择想要阅读的主题并进入该特定的`about_`主题。此时，`Get-Help`会显示有关该主题的完整文档。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Get-Command can help determine the best cmdlet for a task. To find cmdlets,
    follow the steps below:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get-Command`可以帮助确定执行任务的最佳 cmdlet。要查找 cmdlet，请按照以下步骤操作：'
- en: At the Terminal, type `pwsh` to invoke PowerShell.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，输入`pwsh`以启动 PowerShell。
- en: Enter Get-Command to get a list of all cmdlets available in PowerShell. The
    number of cmdlets returned would change based on when you last updated PowerShell
    and the modules you've loaded.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Get-Command`以列出 PowerShell 中所有可用的 cmdlet。返回的 cmdlet 数量会根据你上次更新 PowerShell
    和加载的模块有所不同。
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This may not be particularly useful—what would you do with a list of commands
    if you were looking for something to list out the currently-running processes?
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能并不特别有用——如果你正在寻找列出当前正在运行的进程的命令，那么看到一个命令列表又有什么意义呢？
- en: 'A process is a noun. We want a list of cmdlets that work on *processes*. At
    the prompt, type:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程是一个名词。我们想要一个处理*进程*的 cmdlet 列表。在提示符下，输入：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that in PowerShell, the noun is in the singular form. Therefore, it's Process
    and not Processes.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 PowerShell 中，名词是单数形式。因此，它是Process，而不是Processes。
- en: If you would like to further narrow down the list of cmdlets returned, add the
    verb as well.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想进一步缩小返回的 cmdlet 列表，可以同时添加动词。
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you're feeling lazy, or unsure of the exact conventions, you could even use
    the wildcard.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你感到懒得查找，或者不确定确切的约定，甚至可以使用通配符。
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you'd rather not write so much, and you're almost sure you know the partial
    cmdlet, you can straight away use wildcard search.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不想写太多代码，而且几乎确定你知道部分cmdlet名称，可以直接使用通配符搜索。
- en: If you know the name of the module which contains the cmdlet, you can even use
    the Module parameter when invoking `Get-Command`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你知道包含cmdlet的模块名称，甚至可以在调用`Get-Command`时使用Module参数。
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: PowerShell has the capability to identify the verb and the noun in cmdlets,
    based on the first occurrence of hyphen. Anything that appears before the first
    hyphen is the verb, and anything that appears after, is the noun. When cmdlets
    are loaded from modules, PowerShell identifies the verbs and the nouns in them.
    The search promptly returns the cmdlets based on the search specifications. Filters
    based on the name of the verb, noun or even the module restrict the search accordingly.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell能够基于连字符的首次出现识别cmdlet中的动词和名词。出现在第一个连字符之前的是动词，之后的是名词。当cmdlet从模块中加载时，PowerShell会识别其中的动词和名词。搜索会根据搜索规格迅速返回cmdlet的结果。基于动词、名词或甚至模块名称的过滤器会相应地限制搜索范围。
- en: Finding Modules
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找模块
- en: Loosely coupling the components is one of the keys to success of a framework.
    PowerShell follows this principle as well. All cmdlets are packaged within modules.
    The modules can be first-party-provided, created by you, or even third-party-created.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 松散耦合组件是框架成功的关键之一，PowerShell也遵循这一原则。所有cmdlet都被打包在模块中。这些模块可以是第一方提供的，也可以是你自己创建的，甚至可以是第三方创建的。
- en: Installation of modules, which could've been a hassle in the past, has been
    streamlined today. PowerShell now comes pre-packaged with a package manager called,
    `PowerShellGet`, that connects to the PowerShell gallery ([https://www.powershellgallery.com](https://www.powershellgallery.com)).
    The PowerShell gallery is an online repository that contains modules, scripts
    and other utilities that administrators can download and install in order to extend
    PowerShell's capabilities.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的安装，过去可能是个麻烦事，但如今已经变得更加简化。PowerShell现在预装了一个名为`PowerShellGet`的包管理器，它可以连接到PowerShell库（[https://www.powershellgallery.com](https://www.powershellgallery.com)）。PowerShell库是一个在线仓库，包含模块、脚本和其他实用工具，管理员可以下载并安装这些内容，以扩展PowerShell的功能。
- en: While it is possible to download PowerShell modules from third-party sites,
    our focus in this book would be the PowerShell repository.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然也可以从第三方网站下载PowerShell模块，但本书的重点将是PowerShell仓库。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To find modules in the PowerShell repository, follow these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PowerShell仓库中查找模块，请按照以下步骤操作：
- en: Launch PowerShell by running `pwsh` on the Terminal.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中运行`pwsh`来启动PowerShell。
- en: Look for the command pertaining to modules.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找与模块相关的命令。
- en: '![](img/98edfcda-d148-4d35-a041-807f5ddd86f9.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98edfcda-d148-4d35-a041-807f5ddd86f9.png)'
- en: Notice the list of commands available to work with modules. Some of them are
    of the cmdlet type, while others are functions.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有关模块操作的可用命令列表。其中一些是cmdlet类型的，另一些是函数。
- en: Filter the output further, using the verb.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用动词进一步过滤输出结果。
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You get `Find-Module` as the output.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你将获得`Find-Module`作为输出结果。
- en: Enter the following to list out all the modules.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容以列出所有模块。
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The list begins to appear. The search results are way too many. Press `Ctrl
    + C` to abort the execution.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 列表开始出现。搜索结果太多了。按`Ctrl + C`中止执行。
- en: Search for a module to help you work with Docker containers.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索一个可以帮助你处理Docker容器的模块。
- en: '![](img/788be588-8afd-4bb8-9de4-0fe6ccba964e.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/788be588-8afd-4bb8-9de4-0fe6ccba964e.png)'
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Hundreds of modules, scripts and Desired State Configuration resources have
    been registered with the `PSGallery` repository. Microsoft now recommends using
    the repository for module management. Using the `Find-Module` cmdlet, PowerShell
    makes a connection to the repository and gets a list of all available modules.
    Then, it runs a search on the returned results based on the criteria you mention.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 数百个模块、脚本和所需状态配置资源已经在`PSGallery`仓库中注册。微软现在推荐使用该仓库来管理模块。通过使用`Find-Module` cmdlet，PowerShell与仓库建立连接，并获取所有可用模块的列表。然后，它会根据你提供的标准对返回的结果进行搜索。
- en: You can also similarly find scripts that can perform repetitive tasks. To find
    scripts, use the `Find-Script` cmdlet. It works similar to the `Find-Module` cmdlet,
    except that it finds individual scripts rather than modules.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以类似地找到执行重复任务的脚本。要查找脚本，使用`Find-Script` cmdlet。它的工作方式与`Find-Module` cmdlet类似，只不过它查找的是单个脚本，而不是模块。
- en: Installing Modules from the Repository
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从仓库安装模块
- en: Now that we know how to find modules, we can proceed with getting modules and
    installing them. All cmdlets pertaining to `PowerShellGet` are packaged in the
    module called, `PowerShellGet`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何找到模块，我们可以继续获取并安装模块。所有与`PowerShellGet`相关的命令都打包在名为`PowerShellGet`的模块中。
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We now know the name of the module that would let us manage our Docker infrastructure.
    Let us now try to install the module.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了可以帮助我们管理Docker基础设施的模块名称。现在我们尝试安装该模块。
- en: Installation of modules may require elevated privileges. Open PowerShell with
    `sudo`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装模块可能需要提升权限。使用`sudo`打开PowerShell。
- en: '[PRE24]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now run the following command to install the Docker module from the repository.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令从仓库安装Docker模块。
- en: '[PRE25]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](img/b41b716d-f624-482c-8474-96b30d3b2e87.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b41b716d-f624-482c-8474-96b30d3b2e87.png)'
- en: In some cases, you may want to save the module locally before you install it.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能希望在安装模块之前先将其保存在本地。
- en: '[PRE26]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This way, you can simply import the module in portable mode and run the cmdlets
    without having to install the module in any of the system directories.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以在便携模式下简单地导入模块并运行命令，而无需将模块安装到任何系统目录中。
- en: 'To import the downloaded module, run:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要导入下载的模块，运行：
- en: '[PRE27]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To update the installed module, run:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更新已安装的模块，运行：
- en: '[PRE28]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To remove an installed module, run:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除已安装的模块，运行：
- en: '[PRE29]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Most of these functionalities work with scripts published to the PowerShellGet
    repository as well. Just replace Module with Script in the cmdlet and that should
    do the trick—you can find, save, install, update and uninstall scripts the same
    way you do modules.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能中的大多数也适用于发布到PowerShellGet仓库的脚本。只需在命令中将Module替换为Script即可，操作方法与模块一样——你可以像处理模块一样查找、保存、安装、更新和卸载脚本。
- en: Downloaded scripts need not necessarily be installed; they can be directly called.
    We will see this in the later sections.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的脚本不一定要安装；它们可以直接调用。我们将在后续章节中看到这一点。
- en: How it works...
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What PowerShell really does when running the `Install-Module` is, save the module
    files in one of the locations that PowerShell looks for modules by default.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell在运行`Install-Module`时实际上做的是，将模块文件保存到PowerShell默认查找模块的某个位置。
- en: See also
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe: Module discovery paths in PowerShell (Creating custom modules)'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配方：PowerShell中的模块发现路径（创建自定义模块）
- en: 'Recipe 3.11: Calling a PowerShell script'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配方 3.11：调用PowerShell脚本
- en: Listing the Various Providers in PowerShell
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出PowerShell中的各种提供程序
- en: One more concept before we start preparing for administration using PowerShell
    would be to understand **providers**.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始准备使用PowerShell进行管理之前，还有一个概念需要理解，那就是**提供程序**。
- en: Providers in PowerShell are a great example of the concept of **overloading**
    in object-oriented programming. In essence, a provider is a program that logically
    represents non-file-system drives as though they were drives. For instance, on
    Windows, the Registry is a database of configuration. In PowerShell, the Registry
    is a provider; this way, administrators can use PowerShell to navigate and manipulate
    Registry keys as though they were files. This capability is available on Linux
    as well, however, the providers are not as many as found on Windows.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell中的提供程序是面向对象编程中**重载**概念的一个很好的例子。实际上，提供程序是一个程序，它将非文件系统驱动器以逻辑方式表示为驱动器。例如，在Windows上，注册表是一个配置数据库。在PowerShell中，注册表是一个提供程序；这样，管理员可以像操作文件一样使用PowerShell浏览和操作注册表键。此功能在Linux上也可用，不过提供程序的数量没有Windows上那么多。
- en: How to do it...
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To list out the providers in PowerShell, follow these steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出PowerShell中的提供程序，请按照以下步骤操作：
- en: Run `pwsh` to load PowerShell on the Terminal.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`pwsh`以在终端中加载PowerShell。
- en: 'Run the command:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行命令：
- en: '[PRE30]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](img/f36012e9-b8ba-4762-9952-de78c5ce0ab4.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f36012e9-b8ba-4762-9952-de78c5ce0ab4.png)'
- en: Note the providers available in PowerShell, and the drives and capabilities
    found *within* these providers.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 注意PowerShell中可用的提供程序，以及在这些提供程序*内部*找到的驱动器和功能。
- en: 'Navigate to the Alias: drive.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Alias:驱动器。
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](img/e52ce58e-5686-4671-816a-3cdff1cc4004.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e52ce58e-5686-4671-816a-3cdff1cc4004.png)'
- en: 'Notice the preceding colon after the drive name (Alias: and not Alias). This
    is important to indicate to PowerShell that you''re switching drives. Without
    the colon, PowerShell would simply try to look for a directory called Alias in
    your present working directory.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '注意驱动器名称后面的冒号（Alias: 而不是 Alias）。这很重要，用于告诉PowerShell你正在切换驱动器。如果没有冒号，PowerShell将只会尝试在你当前的工作目录中查找名为Alias的目录。'
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As of now, PowerShell providers don't seem to work as intended, in Linux. However,
    in due course, this should be fixed.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，PowerShell 提供程序似乎在 Linux 上无法按预期工作。然而，随着时间的推移，这个问题应该会得到修复。
- en: Providers wrap the non-file-system like structures into themselves and present
    them to PowerShell as though they were files and directories. These allow you
    to navigate complex structures as though they were simply files and directories,
    which are easier managed using the commands that work on the file system, such
    as `Get-ChildItem`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 提供程序将类似非文件系统的结构封装到自身，并将它们呈现给 PowerShell，就好像它们是文件和目录一样。这使你能够像管理文件和目录那样浏览复杂的结构，而这些结构可以使用文件系统上的命令（如`Get-ChildItem`）进行更简单的管理。
- en: The `Capabilities` column in the output show capabilities such as `Credentials`,
    `ShouldProcess` and `Filter` for each of the providers. This means that the providers
    support passing credentials to the core, availability of parameters such as `-WhatIf`
    and `-Confirm` (which are part of `ShouldProcess`) and the ability to filter output
    using the `-Filter` parameter. We shall learn about each of these in the following
    chapters.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的 `Capabilities` 列显示了每个提供程序的功能，如 `Credentials`、`ShouldProcess` 和 `Filter`。这意味着提供程序支持将凭据传递给核心，支持如
    `-WhatIf` 和 `-Confirm` 这样的参数（它们是 `ShouldProcess` 的一部分），并且可以使用 `-Filter` 参数过滤输出。我们将在接下来的章节中了解这些内容。
- en: See also
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'Recipe: `ShouldProcess` capabilities such as `-Confirm` and `-WhatIf` (Functions)'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配方：`ShouldProcess` 功能，如 `-Confirm` 和 `-WhatIf`（函数）
- en: 'Recipe: Using the `-Filter` parameter'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配方：使用 `-Filter` 参数
