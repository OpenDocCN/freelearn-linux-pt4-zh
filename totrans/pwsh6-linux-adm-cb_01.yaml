- en: Installation, Reference and Help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we''re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching help information in PowerShell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching help information for a specific cmdlet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating help
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Searching help for keywords
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking for help information specific to a parameter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the `about_` topics
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discovering cmdlets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding modules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing modules from the repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listing the various providers in PowerShell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It all begins with the installation of PowerShell on your system. Installation
    of PowerShell is simple and straightforward. Since PowerShell is open source,
    its source code is available on the arguably largest platform for open source
    projects, GitHub. At the moment, Windows, Debian (and Ubuntu), RedHat Linux (and
    CentOS), Fedora and macOS are officially supported by **the PowerShell project**.
    Arch Linux and Kali Linux are supported by the community. Community support is
    also available for the AppImage edition of PowerShell that can be used on most
    of the modern-day Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: An AppImage is a way of packaging applications to run on Linux distributions.
    Every application has its dependencies. On Linux, the package managers manage
    the installation of the dependencies while installing the packages. An AppImage
    package, on the other hand, packs all the necessary dependencies within itself.
    An AppImage can run in **portable** mode, or be installed on the system, based
    on user preference.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell is, as of writing of this chapter, experimentally available for Windows
    on ARM and Raspbian Stretch.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, in Linux, it should be fairly simple to get the source code and build
    the application from the source code using make. This approach should work for
    PowerShell as well. However, as noted above, official support and community support
    are available only for a few distributions. We would focus on installing PowerShell
    on Ubuntu and CentOS since they are two of the most popular Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell is available in two releases: stable and preview. The stable releases
    are suitable for production environment since they''re more reliable. The preview
    releases are for test environments where the administrators are allowed to feel
    a little adventurous, and are willing to report bugs they come across along with
    providing feedback on the capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting ready to install PowerShell on your computer is simple. You simply need
    a working Linux computer, which you have administrator privileges on. Depending
    on what mode you pick to install PowerShell, you may or may not need a package
    manager. Chances are, your Linux distribution already has a package manager available.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed, we will look at the procedure to install PowerShell on Ubuntu
    (and its derivatives) as well as CentOS (and its derivatives).
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There really are many ways to install PowerShell on your computer. Since we're
    installing PowerShell on Ubuntu, we shall look at two ways to do it. The first
    is by adding Microsoft's key and registering the repository and then using the
    Advanced Package Tool (APT) to install PowerShell, and the other, directly using
    the .deb package from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Installing from the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last version of Ubuntu that PowerShell has an official package for is Ubuntu
    17.04\. If you have Ubuntu 17.04, use the steps below to install PowerShell. Otherwise,
    it is suggested that you use the direct download method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to import the GPG keys for the public repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that the key has been added, register the repository---this repository is
    maintained by Microsoft.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Update the package list using the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, install PowerShell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installing via direct download
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps below to install PowerShell on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the table that contains the list of Linux distributions officially
    supported by the PowerShell team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the relevant link: `.deb` under Downloads (stable)—we will stick to
    the stable release.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the installation instructions if you need additional information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the .deb file with `gdebi` or `eddy` or one such package installer to complete
    the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you aren''t running one of the distributions supported officially by the
    Team or by the community, use the AppImage. Follow steps 1 and 2 from above, and:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Many Linux distributions | AppImage to download the Ap-pImage file.
    An AppImage file is a an application, packaged with all the dependencies required
    to run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the AppImage file at a convenient location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download completes, navigate to the download location and run the AppImage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get a prompt asking if you would like PowerShell installed, choose the
    response appropriate to your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation on CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installation of PowerShell on CentOS 7 (or RedHat 7) also has two methods:
    the repository and direct download. The process is similar to that of installation
    on Ubuntu Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing from the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin installation:'
  prefs: []
  type: TYPE_NORMAL
- en: First, register the Microsoft repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, install PowerShell using `yum`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Installing via direct download
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps below to install PowerShell on CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the table that contains the list of Linux distributions officially
    supported by the PowerShell team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the relevant link: `.rpm` under Downloads (stable)—we will stick to
    the stable release.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the installation instructions if you need additional information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the RPM package using the following command (assuming your download
    is at `~/Downloads` and your PWD is `~/Downloads`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using the AppImage package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the AppImage is much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/powershell/powershell](https://github.com/powershell/powershell).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the Get PowerShell section, and find the AppImage link under
    community-supported distributions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the AppImage and place it at a convenient location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `chmod a+x PowerShell-<version>-<architecture>.AppImage` to make the AppImage
    executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the AppImage to run PowerShell. You may be asked if you'd like the AppImage
    installed on your computer. Select Yes if you would like that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package manager installs the package with all its dependencies and makes
    the relevant commands available for use.
  prefs: []
  type: TYPE_NORMAL
- en: In case of the AppImage package, the dependencies are all bundled into the package
    (including .NET Core), and the package can either run in portable mode on your
    computer, or can be installed and called. Launch PowerShell by running `pwsh`
    to take a look.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recipe 2.5: Comparing Windows PowerShell and PowerShell'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching Help Information in PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Commands in PowerShell are called cmdlets (pronounced: command-lets). Cmdlets
    come pre-packaged with all the necessary help information, just like the help
    available for any of the Linux commands. The difference is that there''s a separate
    cmdlet available to get you the necessary help; help is not a switch in PowerShell.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, let's launch the Terminal (launch any of the terminal emulators
    available on your computer). Let's now type `pwsh` to call PowerShell. Proceed
    with the steps below once you get the PS prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get help information in PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `Get-Help` at the prompt to get an overview of the help system in PowerShell.
    You would see an output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f608603b-ab54-460d-996d-23861db19141.png)'
  prefs: []
  type: TYPE_IMG
- en: PowerShell cmdlets are built with help information written in them. Running
    `Get-Help` without any arguments would simply show you basic information on help
    available in PowerShell, which is not quite remarkable. Let us look at another
    recipe to leverage `Get-Help` a little better.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching Help Information for a Specific Cmdlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Get-Help shows information about help itself, it can also take in other
    cmdlets as arguments and show help for them. Let's pick `Get-Command` as an example
    and get help on the cmdlet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the prompt, type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You''d get an output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f4996e6-5ed6-4bfe-a7da-c37a3cfc3d03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can even get complete help on a cmdlet, including information about each
    of the parameter that you can use with the cmdlet; information such as whether
    the parameter is positional, mandatory and so on. We shall see in detail about
    each of these as we move into administration using PowerShell. To get full help
    on the cmdlet, enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To see examples of how to use the cmdlet, enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To read help information online, enter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that parameters are grouped in the output under SYNTAX. We can see two
    such groups in this case. These groups are called **Parameter Sets**. Parameter
    sets tell us which parameters can be grouped together. Two parameters not appearing
    within the same parameter set cannot be used together.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run the cmdlet, `Get-Help` with another cmdlet as the argument, `Get-Help`
    fetches help information for the cmdlet that was passed as the argument; `Get-Command`
    in this case. We shall see in the later chapters how arguments are handled. For
    now, we're simply calling the help for an arbitrary cmdlet.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice the output, you'd see the name of the cmdlet, the syntax to use
    with the cmdlet, the alias available for the cmdlet and more online help if required.
    Full and Examples are switches which tell PowerShell the level of help you need.
    These are mutually exclusive; you cannot run `-Full` and `-Examples` at the same
    time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recipe 2.6: Listing out the aliases and using them in place of cmdlets'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recipe 1.4: Updating help'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recipe 1.3: Fetching help information for a specific cmdlet (Information about
    Parameter Sets)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating Help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Help information in PowerShell is dynamic. In most situations, PowerShell goes
    online to fetch the latest help. However, it is also possible to store the help
    files offline. This can be done using the cmdlet, `Update-Help`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download the help files for the locally-installed PowerShell modules:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `exit` to exit PowerShell. This is so that you can relaunch PowerShell
    with elevated privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `sudo pwsh` to launch PowerShell as a super-user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the `PS` prompt, run `Update-Help`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the update progress bar to appear. The bar will fill as the help files
    download to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0475c76f-4e54-4f67-a125-cc9b7bd7f082.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell goes online to fetch help information every time you run the Get-Help
    cmdlet—the help files are not stored offline. This is primarily to ensure that
    only the latest help is referred. Besides, viewing help online also does not occupy
    space on the local computer.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, however, it is necessary that help information be stored for
    offline access. In such situations, it would make sense to download and store
    the help files.
  prefs: []
  type: TYPE_NORMAL
- en: One of the reasons this action requires elevated privileges is that the help
    information is stored within the shell. Therefore, non-administrators may not
    be able to update help without administrator intervention.
  prefs: []
  type: TYPE_NORMAL
- en: Searching Help for Keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux administrators are very comfortable using `grep` to search for specific
    text patterns in any textual output. PowerShell, as we know, returns only **object**—PowerShell
    treats text as an object as well.
  prefs: []
  type: TYPE_NORMAL
- en: While converting an object into text diminishes the power of PowerShell, it
    still is necessary in some scenarios. In this case, we shall look for the keyword,
    “common” in the help output.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us begin the process of searching by first getting the help information
    for a cmdlet:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch PowerShell by entering `pwsh` at the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, type in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This should give you helpful information on the specified cmdlet.
  prefs: []
  type: TYPE_NORMAL
- en: Convert the output into text using the Out-String cmdlet along with the -Stream
    switch to return one string at a time rather than the whole of the help information
    as a single string. This way, we'd be able to run string matching more efficiently
    and get shorter search results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There won't be a noticeable difference at the moment. Add the Select-String
    cmdlet to perform the grep-like operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This gives you an output with the exact line that has the string, ‘common' in
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f417912f-ba4f-4748-a45f-ce68acc26dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the first step, we simply get the help information for the Get-Command cmdlet.
    This output is an object—performing a text lookup operation is best done when
    the output is text. Out-String converts this output into a plain string; the only
    issue is that the whole block of text is one single string. A text lookup this
    way may not be really helpful. We use the -String switch to break the large string
    into smaller pieces (paragraphs in this case). Next, we use the Select-String
    along with the keyword to select the string that contains our keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Looking for help information specific to a parameter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous sections, PowerShell's help output could be a little
    overwhelming. We run `Get-Help` with the `-Full` switch when we need information
    on the parameters in the cmdlet whose help information we want to access. However,
    this lists out all the parameters. What if we wanted information on only a single
    parameter?
  prefs: []
  type: TYPE_NORMAL
- en: Discovering Cmdlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we saw how to get help on cmdlets. We used the Get-Command cmdlet as
    the example argument. We would now use Get-Command to discover cmdlets in PowerShell.
    Get-Help and Get-Command thus become the most important cmdlets when you need
    any help information in PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell is like plain English—PowerShell follows the Verb-Noun format in
    cmdlet naming, which makes the cmdlets sound like plain English commands. PowerShell
    even uses what's known as **approved verbs**, that ensures that verbs follow a
    convention when naming cmdlets. The nouns, on the other hand, can be arbitrary.
  prefs: []
  type: TYPE_NORMAL
- en: Most programmers would suggest learning to <q>think in the language</q>. This,
    combined with muscle memory (which helps you remember the keys on the keyboard),
    makes programming as well as scripting faster. PowerShell's structure being like
    English helps a lot in this regard; it's easy to think in PowerShell. For instance,
    if you would like to know the current date, all you have to say is, `Get-Date`,
    and PowerShell will print the date and time on the screen for you.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us look at how to get information only about the `Noun` parameter of `Get-Help`.
  prefs: []
  type: TYPE_NORMAL
- en: Invoke PowerShell by running `pwsh` on the terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `Get-Help Get-Command` to look for basic help information
    on the cmdlet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note down the parameter which you want more information about. Let's pick the
    parameter `Noun` as an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command at the prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output contains information specific to the `Noun` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35e5d79d-da5e-48da-a3a1-2a533159bf7b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a classic example of object filtering. Since the output of most PowerShell
    cmdlets are objects, it is easy to select the necessary object and discard the
    rest from the output.
  prefs: []
  type: TYPE_NORMAL
- en: When we run `Get-Help` with the cmdlet we need help about and the specific parameter
    of the cmdlet we are looking for, we get a filtered help specific to the cmdlet
    in question. In our case, we picked the Noun parameter of `Get-Command`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the About_ Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is one of the key strengths of PowerShell. While not all modules
    have complete documentation, all of the first-party modules do, along with the
    well-done third-party ones. By default, PowerShell itself has exhaustive documentation
    built within it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we would look for `about_` topics, pick one of the topics from
    the output and read more about the subject we picked.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us begin with listing out all the `about_*` helpfiles.
  prefs: []
  type: TYPE_NORMAL
- en: Invoke PowerShell using the command, `pwsh`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Get-Help about_*` to list out all the `about_*` helpfiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Pick out the topic you'd like to read about—we pick `about_Modules`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Get-Help about_Modules` to read up on PowerShell modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Get-Help` gives you information about cmdlets if the cmdlet is passed as an
    argument. In cases where you know only a part of the name of the cmdlet, you can
    use a combination of characters and wildcards to list out cmdlets that match the
    search string (`about_*` in our case).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we pick the topic we would like to read about and enter that specific `about_`
    topic. Now, `Get-Help` shows the complete documentation about the topic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get-Command can help determine the best cmdlet for a task. To find cmdlets,
    follow the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: At the Terminal, type `pwsh` to invoke PowerShell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter Get-Command to get a list of all cmdlets available in PowerShell. The
    number of cmdlets returned would change based on when you last updated PowerShell
    and the modules you've loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This may not be particularly useful—what would you do with a list of commands
    if you were looking for something to list out the currently-running processes?
  prefs: []
  type: TYPE_NORMAL
- en: 'A process is a noun. We want a list of cmdlets that work on *processes*. At
    the prompt, type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that in PowerShell, the noun is in the singular form. Therefore, it's Process
    and not Processes.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to further narrow down the list of cmdlets returned, add the
    verb as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you're feeling lazy, or unsure of the exact conventions, you could even use
    the wildcard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you'd rather not write so much, and you're almost sure you know the partial
    cmdlet, you can straight away use wildcard search.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you know the name of the module which contains the cmdlet, you can even use
    the Module parameter when invoking `Get-Command`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell has the capability to identify the verb and the noun in cmdlets,
    based on the first occurrence of hyphen. Anything that appears before the first
    hyphen is the verb, and anything that appears after, is the noun. When cmdlets
    are loaded from modules, PowerShell identifies the verbs and the nouns in them.
    The search promptly returns the cmdlets based on the search specifications. Filters
    based on the name of the verb, noun or even the module restrict the search accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Loosely coupling the components is one of the keys to success of a framework.
    PowerShell follows this principle as well. All cmdlets are packaged within modules.
    The modules can be first-party-provided, created by you, or even third-party-created.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of modules, which could've been a hassle in the past, has been
    streamlined today. PowerShell now comes pre-packaged with a package manager called,
    `PowerShellGet`, that connects to the PowerShell gallery ([https://www.powershellgallery.com](https://www.powershellgallery.com)).
    The PowerShell gallery is an online repository that contains modules, scripts
    and other utilities that administrators can download and install in order to extend
    PowerShell's capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to download PowerShell modules from third-party sites,
    our focus in this book would be the PowerShell repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To find modules in the PowerShell repository, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch PowerShell by running `pwsh` on the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for the command pertaining to modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98edfcda-d148-4d35-a041-807f5ddd86f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice the list of commands available to work with modules. Some of them are
    of the cmdlet type, while others are functions.
  prefs: []
  type: TYPE_NORMAL
- en: Filter the output further, using the verb.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You get `Find-Module` as the output.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the following to list out all the modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The list begins to appear. The search results are way too many. Press `Ctrl
    + C` to abort the execution.
  prefs: []
  type: TYPE_NORMAL
- en: Search for a module to help you work with Docker containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/788be588-8afd-4bb8-9de4-0fe6ccba964e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hundreds of modules, scripts and Desired State Configuration resources have
    been registered with the `PSGallery` repository. Microsoft now recommends using
    the repository for module management. Using the `Find-Module` cmdlet, PowerShell
    makes a connection to the repository and gets a list of all available modules.
    Then, it runs a search on the returned results based on the criteria you mention.
  prefs: []
  type: TYPE_NORMAL
- en: You can also similarly find scripts that can perform repetitive tasks. To find
    scripts, use the `Find-Script` cmdlet. It works similar to the `Find-Module` cmdlet,
    except that it finds individual scripts rather than modules.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Modules from the Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to find modules, we can proceed with getting modules and
    installing them. All cmdlets pertaining to `PowerShellGet` are packaged in the
    module called, `PowerShellGet`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know the name of the module that would let us manage our Docker infrastructure.
    Let us now try to install the module.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of modules may require elevated privileges. Open PowerShell with
    `sudo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now run the following command to install the Docker module from the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b41b716d-f624-482c-8474-96b30d3b2e87.png)'
  prefs: []
  type: TYPE_IMG
- en: In some cases, you may want to save the module locally before you install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This way, you can simply import the module in portable mode and run the cmdlets
    without having to install the module in any of the system directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import the downloaded module, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the installed module, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove an installed module, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Most of these functionalities work with scripts published to the PowerShellGet
    repository as well. Just replace Module with Script in the cmdlet and that should
    do the trick—you can find, save, install, update and uninstall scripts the same
    way you do modules.
  prefs: []
  type: TYPE_NORMAL
- en: Downloaded scripts need not necessarily be installed; they can be directly called.
    We will see this in the later sections.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What PowerShell really does when running the `Install-Module` is, save the module
    files in one of the locations that PowerShell looks for modules by default.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recipe: Module discovery paths in PowerShell (Creating custom modules)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recipe 3.11: Calling a PowerShell script'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listing the Various Providers in PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One more concept before we start preparing for administration using PowerShell
    would be to understand **providers**.
  prefs: []
  type: TYPE_NORMAL
- en: Providers in PowerShell are a great example of the concept of **overloading**
    in object-oriented programming. In essence, a provider is a program that logically
    represents non-file-system drives as though they were drives. For instance, on
    Windows, the Registry is a database of configuration. In PowerShell, the Registry
    is a provider; this way, administrators can use PowerShell to navigate and manipulate
    Registry keys as though they were files. This capability is available on Linux
    as well, however, the providers are not as many as found on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list out the providers in PowerShell, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run `pwsh` to load PowerShell on the Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f36012e9-b8ba-4762-9952-de78c5ce0ab4.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the providers available in PowerShell, and the drives and capabilities
    found *within* these providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Alias: drive.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e52ce58e-5686-4671-816a-3cdff1cc4004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice the preceding colon after the drive name (Alias: and not Alias). This
    is important to indicate to PowerShell that you''re switching drives. Without
    the colon, PowerShell would simply try to look for a directory called Alias in
    your present working directory.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of now, PowerShell providers don't seem to work as intended, in Linux. However,
    in due course, this should be fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Providers wrap the non-file-system like structures into themselves and present
    them to PowerShell as though they were files and directories. These allow you
    to navigate complex structures as though they were simply files and directories,
    which are easier managed using the commands that work on the file system, such
    as `Get-ChildItem`.
  prefs: []
  type: TYPE_NORMAL
- en: The `Capabilities` column in the output show capabilities such as `Credentials`,
    `ShouldProcess` and `Filter` for each of the providers. This means that the providers
    support passing credentials to the core, availability of parameters such as `-WhatIf`
    and `-Confirm` (which are part of `ShouldProcess`) and the ability to filter output
    using the `-Filter` parameter. We shall learn about each of these in the following
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recipe: `ShouldProcess` capabilities such as `-Confirm` and `-WhatIf` (Functions)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recipe: Using the `-Filter` parameter'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
