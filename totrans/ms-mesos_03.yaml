- en: Chapter 3. Getting Started with Mesos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers how to manually set up and run a Mesos cluster on the public
    cloud (AWS, GCE, and Azure) as well as on a private datacenter (on the premises),
    and it also discusses the various debugging methods and explores how to troubleshoot
    the Mesos setup in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to launch instances (virtual machines) on public cloud platforms, such as
    AWS, GCE, and Azure, and we will cover setting up Mesos on top of this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install a Mesos cluster on a private datacenter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to troubleshoot and debug commonly encountered issues faced during the setup
    process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual Machine (VM) instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An instance is a **virtual machine (VM)**, which is hosted on a cloud provider's
    infrastructure. Instances can run Linux and Windows Server images that are provided
    by your cloud provider or any customized versions of the same. You can also build
    and run images of other operating systems. Most cloud providers, such as **Google
    Compute Engine (GCE)**, **Amazon Web Services** (**AWS**), **Microsoft Azure**,
    and so on, also let you specify the machine properties of your instances, such
    as the amount of RAM and number of CPUs required, which are based on the type
    of machine that you use. In the following section, we'll take a look at how to
    set up Mesos on public cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a multi-node Mesos cluster on Amazon Web Services (AWS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please refer to [http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html).
  prefs: []
  type: TYPE_NORMAL
- en: As the name implies, Amazon Web Services (AWS) is a cloud computing platform
    provided by Amazon. This comprises a wide range of web services operating from
    11 physical world regions, which can be accessed remotely. This offers services
    with usage-based pricing; all of this can be used under one account including
    **EC2** (computing or processing), **S3** (storage), **CloudWatch**, **RDS**,
    **DynamoDB**, **EBS**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: AWS gives you a free tier to get you started with Amazon EC2 services. Once
    you sign up, you will be able to launch a **micro machine** (a small machine with
    700 MB of memory) and run this for a year almost free of cost. You will have to
    pay for other services, such as launching a bigger machine, or using their storage
    service, such as Amazon S3\. You can find the updated pricing information on the
    official website.
  prefs: []
  type: TYPE_NORMAL
- en: '**Account Signup and Creation**: Head to [http://aws.amazon.com](http://aws.amazon.com),
    click on **Sign Up**, and follow the instructions to create an account in AWS.
    One of the steps requires phone verification. Once the signup process is complete,
    you will get a confirmation e-mail with the account number specified inside it.
    Make a note of this as this will be required in the next steps.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key Pairs**: By default, AWS uses the public key authentication to log in
    to your Linux instances, as this is more secure. You can choose the key pair while
    you launch the instance from a drop-down list, or you can create a new one at
    the time of launching the instance. If you haven''t created a key pair already,
    you can create one using the Amazon EC2 console. Note that you will need key pair
    for each region, separately.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security Groups**: Security groups act as a firewall for associated instances.
    They can control both inbound and outbound traffic on your instance. You will
    have to enable the rule to accept the connections from your **IP** address to
    the **SSH** port for you to log in to the machine. You can also add or remove
    as many rules as you wish; for example, **HTTP** and **HTTPS** can be accessed
    from anywhere, but SSH connections should only be accessed from your IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: Instance types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual servers or machines on AWS are also known as instances. Amazon EC2 provides
    a wide selection of optimized instance types that are geared towards different
    requirements. Instance types come with a variety of resource (storage, RAM, CPU,
    and network capacity) options, providing users with the flexibility to select
    the right mix for their particular use case. Each instance type includes one or
    more instance sizes, which permits the scaling of your resources to the requirements
    of your target workload.
  prefs: []
  type: TYPE_NORMAL
- en: Instance types are grouped based on the resource type that the application seeks
    to leverage the most; for example, general purpose (for applications that require
    an even mix of all resources), computer optimized (for CPU-intensive workloads),
    GPU instances (for applications requiring GPU capabilities), memory optimized
    (for tasks that need a lot of memory), storage optimized (for applications that
    deal with large volumes of data), and micro instances (for quick trials or lightweight
    applications). Instances are created from preconfigured templates with OS and
    other common software that is already installed, called **Amazon Machine Images**
    (**AMI**). AMIs are either provided by AWS, or they can be obtained through the
    AWS Marketplace. Users can also create and share their own AMIs with a wider community.
  prefs: []
  type: TYPE_NORMAL
- en: Launching instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are multiple ways that an instance can be launched on AWS. Here, we will
    use the common option of launching via the Amazon EC2 console using a selected
    Amazon Machine Image. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Amazon EC2 console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Launch Instance** button from the console as depicted in the
    following diagram:![Launching instances](img/B05186_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **64-bit Ubuntu 14.04 LTS AMI** from the **Choose an Amazon Machine Image
    (AMI)** page, as follows:![Launching instances](img/B05186_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Choose an Instance Type** page, select the required instance, which
    is based on resource requirements (CPU, memory, and so on). For our Mesos cluster,
    we will use **m4.xlarge** instances having **4** cores and **16** GB of memory
    on each node:![Launching instances](img/B05186_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Configure Instance Details** page, change the following settings; choose
    the number of instances as `4` (as we are launching a four node cluster):![Launching
    instances](img/B05186_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Configure Security Group**, add Mesos Web UI port **5050** as **Custom
    TCP Rule**, and make that sure you set **My IP** as the **Source** address. This
    option will restrict any other connections, other than your IP address, from attempting
    to connect to your network:![Launching instances](img/B05186_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Review Instance Launch**. We can skip adding storage and tagging
    instances for now:![Launching instances](img/B05186_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Launch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will be prompted to choose the private key to log in to the machines.
    You can either choose **Create a new key pair** or use the existing one, and then
    the machines will be launched:![Launching instances](img/B05186_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download Key Pair** button and the key pair named `mesos-cluster.pem`
    will be downloaded to your machine. You can use this file to SSH into the machines
    that you are launching in AWS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now log in to all machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's call the first machine from the preceding list as our master machine and
    rest of them as `slave1`, `slave2`, `slave3` for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can install the dependency libraries and software packages on all four
    machines by typing in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, our environment is ready, and we can start building the Mesos binary.
  prefs: []
  type: TYPE_NORMAL
- en: You can build the Mesos binary from the master machine and then copy the build
    to the slave machines instead of building from all the machines.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two different ways that you can get Mesos:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest stable release from Apache (Recommended) at [http://mesos.apache.org/downloads/](http://mesos.apache.org/downloads/).
    At the time of writing this book, the latest version of Mesos is 0.25.0:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Clone the Mesos git repository (Advanced Users Only):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can build Mesos as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can copy the build directory from the Mesos master machine to `slave1`,
    `slave2`, and `slave3` machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Mesos master, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Mesos slaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Mesos Web UI runs on port `5050` on the master machine, and this is where
    the installation completion status can be checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type in the following URL in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://ec2-54-221-197-122.compute-1.amazonaws.com:5050`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the Mesos UI will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building Mesos](img/B05186_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using mesos-ec2 script to launch many machines at once
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mesos provides scripts to create Mesos clusters of various configurations on
    EC2\. The `mesos-ec2` script, which is located in the `ec2` directory allows launching,
    running jobs, and tearing down the Mesos clusters. Note that we can use this script
    even without building Mesos, but you will require Python (>=2.6). We can manage
    multiple clusters using different names.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need an AWS key pair to use the ec2 script, and our access and secret
    key, which we created in the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use the EC2 scripts that are provided with Mesos to launch a new
    cluster using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will launch a cluster named `mesos-cluster` with ten slaves. Once the scripts
    are done, this will also print the Mesos Web UI link in the form of `<master-hostname>:8080`.
    We can confirm that the cluster is up by going to the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script provides a number of options, a few of which are listed in the following
    table. We can list all the available options of the script by running `mesos-ec2
    --help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `--slave` or `–s` | This is the number of slaves in the cluster |'
  prefs: []
  type: TYPE_TB
- en: '| `--key-pair` or `-k` | This is the SSH key pair for authentication |'
  prefs: []
  type: TYPE_TB
- en: '| `--identity-file` or `–i` | This is the SSH identity file used to log in
    to the instances |'
  prefs: []
  type: TYPE_TB
- en: '| `--instance-type` or `–t` | This is a slave instance type, and this must
    be 64-bit |'
  prefs: []
  type: TYPE_TB
- en: '| `--ebs-vol-size` | This is the size of an EBS volume, which is used to store
    the persistent HDFS data |'
  prefs: []
  type: TYPE_TB
- en: '| `--master-instance-type` or `–m` | This is a master instance type, and this
    is must be 64-bit |'
  prefs: []
  type: TYPE_TB
- en: '| `--zone` or `-z` | This is the Amazon availability zone to launch instances
    |'
  prefs: []
  type: TYPE_TB
- en: '| `--resume` | This flag resumes the installation from the previous run |'
  prefs: []
  type: TYPE_TB
- en: 'We can use the login action to log in to the launched cluster by providing
    a cluster name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The script also sets up an HDFS instance, which can be used via commands in
    the `/root/ephemeral-hdfs/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can terminate a cluster using the following command. Be sure to
    copy any important data before terminating the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The script also supports advanced functionalities, such as pausing and restarting
    clusters with EBS-backed instances. The Mesos documentation is a great source
    of information for any clarification. It is worth mentioning that Mesosphere ([http://mesosphere.com](http://mesosphere.com))
    also provides you with an easy way of creating an elastic Mesos cluster on Amazon
    EC2, Google Cloud, and other platforms and provides commercial support for Mesos.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a multi-node Mesos cluster on Google Compute Engine (GCE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Google Compute Engine** (**GCE**) is Google''s **Infrastructure as a Service**
    (**IaaS**) offering, which allows users to run their computational workloads on
    virtual servers that are part of the same infrastructure that powers services,
    such as Gmail, YouTube, and Google''s search engine.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to instance types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Machine types determine the virtualized hardware resources that are available
    to your instances, such as the amount of memory, virtual CPU, and the persistent
    disk limits an instance will have. A single virtual CPU maps to a single hardware
    hyper-thread on the host CPU that is running your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Machine types are divided into different classes, and they are managed by the
    Google Compute Engine. Each machine type has its own pricing and is billed separately.
    For pricing information, review the price sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Available machine types include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard machine types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-CPU machine types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-memory machine types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared-core machine types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to get started with Google Compute Engine is to create a virtual
    machine instance in the browser tool that Google Cloud Platform offers, the Google
    Developers Console, which can be found at [https://console.developers.google.com](https://console.developers.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Set up a Google Cloud Platform project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to set up a Google Cloud Platform project before we begin to launch
    the machines:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Google Developers Console. When prompted, select an existing project
    or create a new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The name you use must be between 1 and 63 characters with a lowercase letter
    as the first character. You can use a dash, lowercase letter, or digit for the
    remaining characters, but the last character cannot be a dash. Also, you should
    be aware that some resource identifiers (such as project IDs) might be retained
    beyond the life of your project. For this reason, avoid storing sensitive information
    in resource identifiers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Follow the prompts to set up billing. If you are new to the Google Cloud Platform,
    you have free trial credit to pay for your instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the network and firewall rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you set up your project and billing, go to the **Networking** section
    in the Developers Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create network** to create your first network and name it `mesos-network`:![Create
    the network and firewall rules](img/B05186_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the network is added, click on the network and click on the **Add Firewall
    Rules** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the rules to open TCP 22 and 5050 ports, this is usually a semicolon separated
    list consisting of `protocol:port`:![Create the network and firewall rules](img/B05186_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After you set up your project and billing, go to the **VM instances** section
    in the Developers Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create a new instance** to create your first instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Name** field of your instance to `mesos-master`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Boot disk**, click on **Change** and select an **Ubuntu 14.04 LTS**
    boot disk image if this is not already specified by default. Compute Engine has
    several other operating systems for you to choose from, but we will use Ubuntu
    for this example. Save your changes:![Create the instances](img/B05186_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Networking** and choose **mesos-network**, which we created in an
    earlier step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create** to create your instance. The page automatically refreshes
    after the instance starts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we launch the `mesos-master` machine, now repeat the preceding steps three
    times to start our `mesos-slave1`, `mesos-slave2`, and for our cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create the instances](img/B05186_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By this point, you will have three machines up and running in the Google Compute
    Cloud named `mesos-master`, `mesos-slave1`, and `mesos-slave2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mesos](img/B05186_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, log in to all three machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can install the dependency libraries and software packages on all three
    machines by typing in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, our environment is ready, and we can start building the Mesos binary.
  prefs: []
  type: TYPE_NORMAL
- en: You can build the Mesos binary from the master machine, and then copy the build
    to the slave machines instead of building from all the machines.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps from the corresponding *Downloading Mesos* subsection under
    the *Setting up a multi-node Mesos cluster on Amazon Web Services (AWS)* section
    to download and extract Mesos on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: Building Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building Mesos is discussed in the corresponding AWS section. You can follow
    the instructions listed there to build Mesos on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: We can now make sure that the installation is complete by looking at the Mesos
    Web UI running on port `5050` on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and head to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://146.148.62.84:5050`'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the Mesos Web UI will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building Mesos](img/B05186_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a multi-node Mesos cluster on Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure is a cloud computing platform and infrastructure, which is created
    by Microsoft to build, deploy, and manage applications and services through a
    global network of Microsoft-managed and Microsoft partner-hosted datacenters.
    For more information check out [https://azure.microsoft.com](https://azure.microsoft.com).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to instance types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Virtual machines are available in two tiers: basic and standard. Both types
    offer a choice of sizes, but the basic tier doesn''t provide some capabilities,
    such as load-balancing and autoscaling, which are available in the standard tier.
    The standard tier of sizes consists of different series: A, D, DS, G, and GS.'
  prefs: []
  type: TYPE_NORMAL
- en: Launching machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with development or test in the cloud, you will need an active
    Microsoft Azure subscription. If you don''t currently have a subscription, you
    can get a free one-month trial with $200 that you can spend on whatever Azure
    services you want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching machines](img/B05186_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you sign-up for Azure, visit the management portal to launch the instances.
    Azure management portal is available at the following URL: [https://manage.windowsazure.com](https://manage.windowsazure.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a cloud service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A cloud service in Azure gives you a public endpoint to access all the services
    (VMs and so on) that are running within the cloud service. An endpoint would look
    something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Following are the steps to create a cloud service:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **CLOUD SERVICES** option from the left-hand side menu panel:![Create
    a cloud service](img/B05186_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **NEW**, then click on **CLOUD SERVICE**, and then click on **QUICK CREATE**:![Create
    a cloud service](img/B05186_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the name `mesos-cluster`; hence, the public endpoint to access this
    service will become `mesos-cluster.cloudapp.net`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Create** **Cloud Service**. Once you create the cloud service, you
    can see it, as follows:![Create a cloud service](img/B05186_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have the cloud service ready, the next thing that you need to do is
    to start the Virtual machines for our Mesos cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **NEW**, then choose **COMPUTE**, and then choose **VIRTUAL MACHINE**:![Create
    the instances](img/B05186_03_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **FROM GALLERY**; this options gives us better choices and controls
    over the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Choose an Image** and click on **UBUNTU**, and then choose the **Ubuntu Server
    14.04 LTS** image from the list and click on **Next**:![Create the instances](img/B05186_03_20.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Virtual Machine Naming**: In this step, you will name your virtual machine.
    This name will be the hostname of the machine that you are about to launch, so
    we will name it `mesos-master`. Choose the **SIZE** as **D3 (which is the 4 cores
    14GB Memory machine)** and type in the password, which you will use to log in
    to the machine. Now, click on **Next**:![Create the instances](img/B05186_03_21.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Virtual Machine Configuration**: In this step you will choose the **mesos-cluster**
    cloud service, which we created earlier. Thus, the very machine that you will
    be launching for this exercise will fall under the `mesos-cluster` cloud service:![Create
    the instances](img/B05186_03_22.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** and hit the **Finish** button:![Create the instances](img/B05186_03_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, follow the same steps to launch `mesos-slave1` and `mesos-slave2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to note here is that for every new machine that you are going to
    launch, if you want to access any of these machines from outside of the `mesos-cluster`
    endpoint, you will have to configure the SSH ports, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Virtual machine configuration** Step, under **ENDPOINTS**, change the
    **PUBLIC PORT** value to another number:![Create the instances](img/B05186_03_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s say the `mesos`-`master` public port was `22`; this means that suppose
    we perform the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will log in to the `mesos-master` machine. Now if you want to log in to
    `mesos-slave1`, then you will configure the public port as `44` so that you can
    log in to `mesos-slave1`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring the network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For security reasons, whenever you deploy a machine in the cloud, always make
    sure that you have opened up the necessary ports to the public.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the SSH port, we also need to open up the Mesos UI port, which runs
    on `5050`. To do this, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Azure console, click on the **mesos-master** machine under the VMs
    provisioned and click on the **End Points**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **ADD** button to add a specific port:![Configuring the network](img/B05186_03_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ADD A STAND-ALONE ENDPOINT** option and click on **Next**:![Configuring
    the network](img/B05186_03_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this `mesos-ui`, choose **TCP** from the protocol list, and use `5050`
    as **PUBLIC PORT**. This will allow you to access it with `http://mesos-cluster.cloudapp.net:5050`
    and assign port `5050` as **PRIVATE PORT**. Click on the **Finish** button:![Configuring
    the network](img/B05186_03_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By this point, you will have three machines up and running in the Azure cloud
    named `mesos-master`, `mesos-slave1`, and `mesos-slave2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mesos](img/B05186_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, log in to all three machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It is ideal to use an advanced Linux Terminal, such as **terminator** or **xterm,**
    to work on multiple machines because these terminals support broadcasting the
    command. You can type the command on a single window, and it will be executed
    on all three machines at once, thereby reducing configuration work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Mesos](img/B05186_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can install the dependency libraries and software packages on all three
    machines by typing in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, our environment is ready, and we can start building the Mesos binary. You
    can build the Mesos binary from the master machine and then copy the build to
    the slave machines instead of building from all the machines.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps from the corresponding *Downloading Mesos* subsection under
    the *Setting up a multi-node Mesos cluster on Amazon Web Services (AWS)* section
    to download and extract Mesos on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: Building Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building Mesos is discussed in the corresponding *Building Mesos* subsection
    under the *Setting up a multi-node Mesos cluster on Amazon Web Services (AWS)*
    section. You can follow the instructions listed there to build Mesos on the master
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we build this, then we can copy the build directory from the `mesos-master`
    machine to the `mesos-slave1` and `mesos-slave2` machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Starting mesos-master
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Issue the following command from the master machine to start `mesos-master`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After the command, you can see the following logs appearing in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The output here lists the build version, various configurations that the master
    has used, and the master ID of the cluster. The slave process should be able to
    connect to the master. The slave process can specify the IP address or the hostname
    of the master by the `--master` option.
  prefs: []
  type: TYPE_NORMAL
- en: Start mesos-slaves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Issue the following commands on the slave machines to start the slave service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This output confirms the connection to the master and lists the slave resources.
    Now, the cluster is running with two slaves and is ready to run the frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: We can now make sure that the installation is complete by looking at the Mesos
    Web UI running on port `5050` on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and head on to the following URL: `http://mesos-cluster.cloudapp.net:5050`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Start mesos-slaves](img/B05186_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mesos commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you look into the `bin` directory of Mesos, you can find the following executables,
    which can be used for various operations as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-local.sh` | This command launches an in-memory cluster within a single
    process. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-tests.sh` | This command runs the Mesos test case suite. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos.sh` | This is a wrapper script, which is used to launch the Mesos
    commands. Running without any arguments shows all the available commands. |'
  prefs: []
  type: TYPE_TB
- en: '| `gdb-mesos-*` | This command launches the corresponding processes in debugging
    mode using `gdb`. |'
  prefs: []
  type: TYPE_TB
- en: '| `lldb-mesos-*` | This command launches the corresponding processes in debugging
    mode using `lldb`. |'
  prefs: []
  type: TYPE_TB
- en: '| `valgrind-mesos-*` | This command launches the corresponding Valgrind instrumentation
    framework. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-daemon.sh` | This command starts/stops a Mesos daemon process. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-start-cluster.sh` | This command starts the Mesos cluster on nodes
    in the `[install-prefix]/var/mesos/deploy/masters` and `[install-prefix]/var/mesos/deploy/slaves`
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-stop-cluster.sh` | This command stops the Mesos cluster on nodes in
    the `[install-prefix]/var/mesos/deploy/masters` and `[install-prefix]/var/mesos/deploy/slaves`
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-start-masters.sh` | This command starts the Mesos masters on nodes
    listed in the masters file. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-stop-masters.sh` | This command stops the Mesos masters on nodes listed
    in the masters file. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-start-slaves.sh` | This command starts the Mesos slaves on nodes listed
    in the slaves file. |'
  prefs: []
  type: TYPE_TB
- en: '| `mesos-stop-slaves.sh` | This command stops the Mesos slaves on nodes listed
    in the slaves file. |'
  prefs: []
  type: TYPE_TB
- en: Testing the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now test the installation of our cluster by running the simple examples
    (C++, Java, and Python) that are shipped with Mesos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Testing the installation](img/B05186_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also look at the status of the tasks from the Web UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the installation](img/B05186_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build the example frameworks, make sure that you build the test suite by
    performing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a multi-node Mesos cluster on your private datacenter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explain how to get Mesos up and running on your fully-managed
    datacenter. For the sake of simplicity, let's assume you have a datacenter having
    three machines, and you are going to set up Mesos on top of these. Let's also
    assume your datacenter VMs are running the **CentOS 6.6** Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that the following machines are opted in to install Mesos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We will choose `machine-a` as the Mesos master machine for our cluster and `machine-b`,
    `machine-c` will be running the slave processes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below are the steps for installing a multi-node Mesos cluster on your private
    datacenter.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to install all the dependencies and libraries for Mesos to run on the
    CentOS machines. For this to happen we need to log in to all three machines and
    type in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the following are the instructions for stock CentOS 6.6\. If you are
    using a different OS, please install the packages accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Downloading Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps from the corresponding *Downloading Mesos* subsection under
    the *Setting up a multi-node Mesos cluster on Amazon Web Services (AWS)* section
    to download and extract Mesos on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: Building Mesos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can follow the steps as mentioned in the previous section to build Mesos
    on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can copy the build directory from `machine-a` to `machine-b` and `machine-c`
    from the master machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Starting mesos-master
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Issue the following command from the master machine to start `mesos-master`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Starting mesos-slaves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can issue the following command from the slave machines to start the
    slave services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We can now make sure the installation is complete by looking at the Mesos Web
    UI running on port `5050` on the master machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and head on to the following URL: `http://192.168.1.10:5050`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting mesos-slaves](img/B05186_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Automating the process when you have many machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can repeat the previous procedure to manually start `mesos-slave` on each
    of the slave nodes to set up the cluster, but this is labor-intensive and error-prone
    for large clusters. Mesos includes a set of scripts in the `deploy` folder that
    can be used to deploy Mesos on a cluster. These scripts rely on SSH to perform
    the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: We will set up a cluster with 10 slave nodes (`slave1`, `slave2`, `slave10`)
    and a master node (master).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s configure our cluster to make sure that they have connectivity between
    them after installing all the prerequisites on all the nodes. The following commands
    will generate an SSH key and will copy them to all the slaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to copy the Mesos build to all the nodes at the same location, as in
    the master:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a masters file in the `[install-prefix]/var/mesos/deploy/masters` directory
    with an editor of your choice to list the masters one per line, which in our case
    will be only the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the slaves file will list all the nodes that we want to be Mesos
    slaves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can start the cluster with the `mesos-start-cluster` script and use
    `mesos-stop-cluster` to stop it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This in turn calls `mesos-start-masters` and `mesos-start-slaves` that will
    start the appropriate processes on the master and slave nodes. The script looks
    for any environment configurations in `[install-prefix]/var/mesos/deploy/mesos-deploy-env.sh`.
    Also, for better configuration management, the master and slave configuration
    options can be specified in separate files in `[install-prefix]/var/mesos/deploy/mesos-master-env.sh`
    and `[install-prefix]/var/mesos/deploy/mesos-slave-env.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging and troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at how to troubleshoot and debug the common issues
    faced during setup.
  prefs: []
  type: TYPE_NORMAL
- en: Handling missing library dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, when you try to build Mesos on a brand new Linux VM, it may throw
    up errors in the configure step. An example is a missing `libz-dev` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Whenever you find an error such as the preceding one or something similar to
    a missing package, the next thing that you need to do is to install these missing
    packages and execute the `configure` command again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, to resolve the missing `libz` library, you will have to type in the following
    on the *Ubuntu* machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'For *CentOS* flavors, the command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Issues with directory permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If Mesos is trying to write to `/var/lib/mesos` and if you missed assigning
    the correct permissions over the directory, this will end up with the following
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To overcome such issues, you will have to assign proper permission to this
    directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Missing Mesos library (libmesos*.so not found)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you get **libmesos*.so file not found**, then the best thing you can
    do is to *copy* the `libmesos*.so` from your Mesos installation to the `/lib`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of such an error is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Debugging a failed framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, if your cluster is not configured properly or you have a buggy framework,
    then it will not succeed in its execution. In such a situation, you can open up
    the Mesos web interface and click on the failed **Framework** under the **Frameworks**
    tab, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging a failed framework](img/B05186_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see the tasks marked as **KILLED** for some reason, and your next
    step is to find out why.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Mesos directory structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On every slave machine, by default, the Mesos work directory lies under `/tmp/mesos`,
    and under `/tmp/mesos/slaves/` will have `slave id`, which will keep track of
    the frameworks running under it inside the `frameworks` directory. The framework
    will contain the number of attempts that it made to execute the given job, and
    each run attempt's information will be logged in the `runs` directory. You can
    find the errors and standard output from the `stderr` and `stdout` files located
    under the runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example directory structure with a single executor instance and
    multiple frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Mesos directory structure](img/B05186_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, to track down our issue, you need to go to the corresponding framework
    ID and look in the `stderr` file, which will log the exact issue that this framework
    was facing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know the issue is with the directory permission, you can fix this
    using the steps described in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Mesos slaves are not connecting with Mesos masters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Issues such as slaves failing to connect with the master can be resolved in
    two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the slave console logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can look at the console logs while the slave tries to connect to the master,
    and this will show connection failure messages, such as **Operation timed out**,
    **Connection refused**, **Network unreachable**, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Making sure that the master and slaves bind to the correct network interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that your master and slaves bind to the correct network interface;
    it is always safer to use `--ip` option to ensure this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Launching multiple slave instances on the same machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you try to launch multiple slave processes on the same machine, then you
    will end up with the following exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you need to launch more slave instances on a single machine, there is a way
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run one more slave but you have to specify a port and a different `workdir`
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can Mesos `master` and `slave` nodes be deployed on the same machines?
  prefs: []
  type: TYPE_NORMAL
- en: You can definitely run `master` and multiple `slave` processes on the same node.
    You can even run multiple `master` and `slave` processes on the same node, provided
    that you give them each unique ports, but this works best only for a test cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to manually set up and run a Mesos cluster on the
    public cloud (AWS, GCE, and Azure) as well as on a private datacenter (on the
    premises). We also discussed common errors that are faced during the setup process
    and how these can be debugged and resolved efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore important scheduling and management frameworks,
    such as Marathon and Chronos, that often go hand in hand with Mesos and are integral
    components of the Mesos ecosystem.
  prefs: []
  type: TYPE_NORMAL
