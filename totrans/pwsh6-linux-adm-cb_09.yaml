- en: Performing Calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing arithmetic operations
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing calculations on the output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with the administrative constants
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with calculated properties
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with binary numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing base conversions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are the technical requirements to work with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell installed on the computer. Refer *Installation, Reference and Help*
    for steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visual Studio Code (recommended). Refer the recipe, *Installing Visual Studio
    Code* in the chapter, *Preparing for Administration using PowerShell*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some throw-away files for the recipes. Use the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from
    within the `ch05` directory of the book's GitHub repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The scripts used in this chapter are available at: [https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09](https://github.com/PacktPublishing/PowerShell-6.0-Linux-Administration-Cookbook/tree/master/ch09).
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing calculations is an integral part of automation. Of course PowerShell
    allows for this; it also takes things up a level by providing administrators with
    what is called Administrative Constants, which help ease calculations. We will
    look into these concepts in the following recipes. We will first look at common
    arithmetic operations, and then, move towards using the concepts on outputs using
    Calculated Properties like we saw in *Passing Objects Through the Pipeline*.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at cases where we could ease automation using binary numbers
    to identify flags, perform base conversion, and finally, use some of .NET Accelerators/cast
    operators to simplify scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Performing arithmetic operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As administrators, we do not use much of arithmetic operations like the sin,
    cos, log and exp operations. However, it is possible to do all of them on PowerShell,
    since PowerShell can leverage .NET. In general, we may use these operations as
    administrators: `Abs` (as in absolute), `Ceiling`, `Floor`, `Round` and `Truncate`.
    In this recipe, we will use three of these methods, based on the scenario we have.
    Use of the other methods is very similar. Here is the scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: You have an application that creates logs throughout the day. These logs consume
    a lot of space. You would like to clean up logs that are between 30 and 31 days
    old. You are not allowed to use a dual condition for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Create a function that looks for files of 30 days of age. Your script should
    also say how much of the log space was cleared, rounded off to the nearest megabyte.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Run the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05`
    directory of the book's GitHub repository. This is just so we have some files
    to work on. Next, run the script, `Set-LastWriteTime.ps1` from within the `ch09`
    directory of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to specify a path other than `~/random` for the content, add
    `-Path '//your/custom/path'` to the last line of the script. Ensure you do this
    in both the scripts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to the directory that contains your lab files; here is where all the
    action happens. If you did not specify a custom -Path when running the scripts,
    it should be `~/random`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal and, using a code editor (`vi`, `nano` or VS Code), create
    a new file called `Clear-LogFiles.ps1`. Remember, CamelCase is just a convention.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following content. I suggest typing it by yourself rather than copy-pasting
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is no need to actually delete the files. If you would like to anyway,
    remove the `-WhatIf` switch from line 12.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to use Visual Studio Code to write this script since its IntelliSense
    auto-completion is very helpful. You could write this script at the terminal itself,
    in which case, use shorter versions of parameters and tab-completions as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `[math]::` accelerator allows us to use the methods of the `System.Math`
    class. The `Round()` method accepts one or two arguments; in case of a single
    argument, the rounding happens to the nearest integer. The optional second parameter
    specifies the number of digits after the decimal point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Pow()` method is almost self-explanatory: 1024² in our case. The `Floor()`
    method brought down numbers from 30.00 to less than 31, down to 30.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what we did:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed out the files to delete: we subtracted the `LastWriteTime` from today,
    and performed a Floor operation on it since we were not allowed to use the `-and`
    operator.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displayed the files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We performed a remove operation on each of the files, while also adding the
    size of each of the files to `$TotalFileSize`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the end, we divided `$TotalFileSize` by 1024² and rounded it off to the nearest
    MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[System.Math Methods](https://msdn.microsoft.com/en-us/library/system.math_methods(v=vs.110).aspx)
    (Microsoft documentation)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing calculations on the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last recipe, we performed some nifty calculations on the objects themselves,
    and listed out files that were 30 days old. In the process, we also output the
    total amount of space to be cleared. In this recipe, we will output this information
    as a PowerShell object, and also, perform a small calculation during output. Here
    is the scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: Modify the script you created in Performing Arithmetic Operations to output
    a structured PSCustomObject. The output should have the total number of files
    in the directory, files that are 30 days old, and the total amount of space cleared
    (without any calculations). Also, separately, show the amount of space cleared
    by the cleanup, in MB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will simply build on the previous recipe to save ourselves some time and
    effort. The changes from the script in the previous recipe have been emboldened.
  prefs: []
  type: TYPE_NORMAL
- en: Open your favourite code editor, enter the following in the file and save the
    file as a `ps1` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Call the PowerShell script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here is a glimpse of what that outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23e66bdf-6918-40c5-a598-2fcce9dc03f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, pick just the `SpaceCleared` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice the reference to the `SpaceCleared` property, and the output just before
    the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f40eaf52-ba68-4227-8ced-94c8e9a8dfdf.png)'
  prefs: []
  type: TYPE_IMG
- en: Divide the output by 1024² to get the value in MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the one above; the total space cleared in MB.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82f3680a-fbf5-46d3-9d2e-614f73356e49.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not only cmdlets and functions, but scripts also output objects. In the previous
    recipe, this was a string object; in this, it was a `PSCustomObject`. This way,
    even though the information gathered from both the recipes was the same, we were
    able to process the output further by running calculations on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perform a `Round()` operations on `SpaceCleared` to get the output in MB, with
    two digits after the decimal point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the number of files that were omitted from deletion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the output object of the script to a variable: `$FileCleanupInfo = (&
    //path/to/02-Clear-LogFiles.ps1)` in order to make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Administrative Constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The one thing that may have irked a few of us was how difficult it was to convert
    the `Length` property to MB. We had to go `[math]::Pow(1024, 2)`. Simplify the
    output of the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Also, imagine that you have these files loaded on a 250 GB SSD, and you would
    like to see what percent of space was cleared.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the same script as the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Assign the object returned by the previous recipe to a variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Call the `SpaceCleared` property and divide it by Administrative Constants.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the results are not just the numbers divided by powers of 1000.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d156b713-9b47-4582-b8d7-5a9526c42753.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To show how much of space got cleared from a 250 GB SSD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: An almost negligible number in our case, but here it is.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e03aa51-3d22-4c06-81fd-6b2eb4acd117.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell has been created with administrators in mind. Given that we rely
    on a myriad of file operations on a regular basis, PowerShell contains administrative
    constants. These constants represent powers of 1024 (1024¹, 1024², 1024³...).
  prefs: []
  type: TYPE_NORMAL
- en: Hard drive and flash drive manufacturers usually use powers of 1000 to represent
    drive sizes. In our recipe, we use the scientific notation to convert the size
    of the drive into bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Working with calculated properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you read through the recipe, *Selecting columns from the output* in *Passing
    Data through the Pipeline*, you may skip this recipe. This recipe has been created
    in the interest of context as well as those who have skipped the said chapter/recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculated properties is another form of performing calculations on the fly.
    Here is the scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a report of all the files present in a certain directory, with the
    names of the files, the last modified date, the full paths and the sizes in MB.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have the lab files or you deleted the files in the previous recipe, run
    the script, `Initialize-PacktPs6CoreLinuxLab.ps1` from within the `ch05` directory
    of the book's GitHub repository. Next, run the script, `Set-LastWriteTime.ps1` from
    within the `ch09` directory of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is going to be a one-liner.
  prefs: []
  type: TYPE_NORMAL
- en: At the terminal, type the following and press Enter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A calculated property takes in two things: the name of the property and the
    expression that would produce the desired result. Technically, this is a hashtable
    with `n` (or `Name`) and `e` (or `Expression`) being the two name-value pairs.
    The `Expression` in itself is a script block. When broken down into lines, the
    query looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since we separated the `Name` and the `Expression` by a line, we don't need
    the semicolon anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Calculated properties come in handy in situation where you don't really want
    to create a new script, but instead, want some information at the terminal itself,
    as though running a query. The value of Name is the name of the property, and
    the values in the column are determined by the expression.
  prefs: []
  type: TYPE_NORMAL
- en: Working with binary numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the interest of specificity, we are going to use the hexadecimal notification
    for this recipe. If you have worked with colours on your computer, chances are
    that you are aware of RGB. The levels of these primary colours are commonly represented
    as numbers ranging from 0 to 255 (24-bit colours). You may have also come across
    the hexadecimal representation of these colours, especially if you worked with
    HTML/CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario here is to write a simple script that converts any given hexadecimal
    code into decimal RGB.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will assume that the input is going to be with or without the `#` (as in,
    `55bc9a` or `#55bc9a`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new PowerShell file and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter any valid hexadecimal RGB value, with or without the preceding `#`. Press
    Enter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here is an example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94d666b2-56dd-468c-8133-e16db174148d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, how the script works to separate the R, G and B values. We first trim
    the hexadecimal string to exclude the `#` in case there is one. We need the last
    6 characters of the string. Therefore, we PowerShell to begin the substring at
    1 in case there is a `#` and 0 in case the string is 6 characters long. We then
    pick two characters at a time, starting at 0 (of the trimmed string), 2 and 4.
  prefs: []
  type: TYPE_NORMAL
- en: The conversion happens at the last line. First, we instruct PowerShell that
    we would like an integer output using the cast operator. Then, we tell PowerShell
    that the string is a hexadecimal string by adding `0x` to its beginning.
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple way of converting hexadecimal into integer. Next, we will look
    at a few other conversions.
  prefs: []
  type: TYPE_NORMAL
- en: Performing base conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last recipe was a simple conversion using a cast operator and string addition.
    Next, we will look at converting an integer into multiple bases such as octal,
    hexadecimal and binary strings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The input will be taken as a string. The output would also be string, but the
    octal, hexadecimal and binary representations. We will use a .NET accelerator
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new PowerShell file and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Run the script and enter an integer to get the octal, hexadecimal and binary
    representations of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not forget to try negative numbers as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc10c26b-d796-43b9-ac9b-15eba90fa9af.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe leverages the `[System.Convert]` .NET accelerator. The input and
    the output of the script are strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ToString()` method accepts input in the form of int64\. When only one
    argument is passed, the integer is output as it is, except the object type is
    no more `int`, but `string`. The optional second argument passed to the method
    is the base: `2` stands for decimal, `8` stands for octal and `16` stands for
    hexadecimal.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I was learning PowerShell, I came across this recipe by Lee Holmes, where
    he showed how file attribute flags worked in PowerShell. To see what attributes
    are available in PowerShell for files and directories, and see their decimal and
    binary representations, enter the following at the PowerShell prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is what the command gives you.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7dcf63f7-fa21-48b0-8d58-cb8e3480c39e.png)'
  prefs: []
  type: TYPE_IMG
- en: That brings us to the end of this chapter. Basic arithmetic calculations have
    been omitted since they are no different from any of the most common languages.
  prefs: []
  type: TYPE_NORMAL
