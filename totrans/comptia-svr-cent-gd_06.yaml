- en: Addressing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻址
- en: You'd have a difficult time locating a particular address in a large city using
    only a general description of the house in question. In the same way, a computer's
    **operating system** (**OS**) would have problems finding a data file for you
    if all you know is what's in it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仅依靠一般的房屋描述，你很难在大城市中找到一个特定的地址。同样，如果你只知道文件中的内容，计算机的 **操作系统**（**OS**）也会很难为你找到数据文件。
- en: Back in the day, when secondary storage was small, it was relatively easy to
    find files on a floppy disk or hard disk. Connecting to another PC over a peer-to-peer
    network was straightforward and didn't require much in the way of an address—just
    the internal address of a parallel port.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，当次级存储较小的时候，在软盘或硬盘上找到文件相对容易。通过点对点网络连接另一台 PC 也很简单，并不需要太多的地址——只需用到并行端口的内部地址。
- en: However, on today's network and storage technologies, with their immensity,
    addressing on all levels is an essential part of computing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在当今庞大的网络和存储技术中，各层次的寻址是计算中的一个基本部分。
- en: In this chapter, we look at the variety of addressing schemes used in computing
    and networking—their structures, representations, and purposes. We also look at
    the interface between a computer and a network, and the protocols and services
    that provide their connection, transmission, and security.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将探讨计算和网络中使用的各种寻址方案——它们的结构、表示方式以及目的。我们还将讨论计算机与网络之间的接口，以及提供连接、传输和安全的协议与服务。
- en: We take a outside-in approach to addressing, beginning with **Internet Protocol**
    (**IP**) addressing and ending with **Media Access Control** (**MAC**) and port
    addressing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们采用从外到内的方式来进行寻址，从 **互联网协议**（**IP**）寻址开始，最终到 **媒体访问控制**（**MAC**）和端口寻址。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: IP addressing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 寻址
- en: IP version 4
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 版本 4
- en: IP version 6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 版本 6
- en: MAC addressing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MAC 寻址
- en: Address resolution
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地址解析
- en: Ports and protocols
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口和协议
- en: IP addressing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP 寻址
- en: For the purposes of the Server+ exam, we really don't need to cover the entire
    history of network addressing, from the development of packet switching 50 or
    so years ago to IP version 6 addressing today.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Server+ 考试，我们其实不需要覆盖网络寻址的整个历史，从 50 多年前的分组交换技术发展到今天的 IPv6 寻址。
- en: When TCP replaced the earlier **Network Control Protocol** (**NCP**) in 1974,
    it performed both data transmission and message routing. These two functions were
    later split into what we know today as TCP and IP, as in the TCP/IP protocol suite.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当 TCP 于 1974 年取代了早期的 **网络控制协议**（**NCP**）时，它既执行数据传输，也负责消息路由。后来，这两项功能被拆分，形成了我们今天所知的
    TCP 和 IP，即 TCP/IP 协议套件。
- en: IP version 4
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP 版本 4
- en: The primary purpose of an IP is to provide a path through a network of computing
    and routing devices interconnected by communication links in an unstructured manner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IP 的主要目的是在通过通信链路互联的计算和路由设备网络中提供一条路径，这些设备以非结构化的方式连接。
- en: Early on, it became clear that one of the underlying design features of the
    internet was that it provided no single point of failure. This led to its purposefully
    haphazard construction, and the need for a flexible addressing scheme.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 早期，互联网的一个核心设计特点便是它没有单点故障。这促成了其故意散乱的结构，以及对灵活寻址方案的需求。
- en: The TCP/IP protocols developed over the years into the standard that is still
    largely in use today. Given that there was pressure on the developers from large
    communication corporations, government agencies, and small and medium-sized businesses,
    an address class system divided up the available address range to provide ample
    network addresses to all parties—at least at first.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TCP/IP 协议经过多年的发展，成为了今天仍然广泛使用的标准。由于开发者面临来自大型通信公司、政府机构以及中小型企业的压力，一个地址类系统被引入，将可用的地址范围划分开来，以便为所有方提供充足的网络地址——至少在最初是如此。
- en: The IPv4 address structure
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv4 地址结构
- en: What we have come to know as an IP address in general, the IPv4 address, consists
    of 32 bits divided into four eight-bit octets (groups of eight). For the sake
    of humans, a format called **dot-decimal** formats the binary address into four
    decimal numbers separated by dots, or periods.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常所称的 IP 地址，即 IPv4 地址，由 32 位二进制组成，分为四个八位的八位组（即每组八个比特）。为了方便人类使用，一种名为 **点分十进制**
    的格式将二进制地址转换成四个十进制数，每个数字之间用点（句点）分隔。
- en: 'For example, the following shows the binary number version of an IP address
    and its decimal number equivalent:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下显示了一个IP地址的二进制数字版本及其对应的十进制数字：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each set of four octets represents a single addressable network location.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每一组四个八位字节代表一个可寻址的网络位置。
- en: 'An octet may hold binary values in the range from 00000000 to 11111111, or
    0 to 255 in decimal, respectively. Therefore, the total range of IPv4 addresses
    starts at the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个八位字节可以存储从00000000到11111111的二进制值，或者在十进制中从0到255。因此，IPv4地址的总范围从以下地址开始：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The range goes up to the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 范围可达到以下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A significant number of the addresses in this range are set aside for special
    purposes. This means that not all of the addresses in the range are available
    for assignment to network nodes. We will talk more about this later in this section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该范围内有相当数量的地址被预留用于特殊用途。这意味着并不是所有该范围内的地址都可以分配给网络节点。我们稍后会在本节中详细讨论。
- en: Classful IP addressing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别化IP地址
- en: 'As shown in the following table, the IPv4 addressing scheme includes five address
    classes, although only three have been in use extensively. Address classes **D**
    and **E** were set aside for multicasting under IPv4 and research and experimentation,
    respectively:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如下表所示，IPv4地址方案包括五种地址类别，尽管只有三种类别已被广泛使用。**D**类和**E**类地址分别为IPv4下的多播和研究实验用途预留：
- en: '| **Address class** | **From** | **To** | **Network****addresses** | **Hosts
    per network** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **地址类别** | **起始地址** | **结束地址** | **网络**地址 | **每个网络的主机数量** |'
- en: '| A | `1.0.0.0` | `126.255.255.255` | 126 | 16,777,214 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| A | `1.0.0.0` | `126.255.255.255` | 126 | 16,777,214 |'
- en: '| B | `128.0.0.0` | `191.255.255.255` | 16,382 | 65,534 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| B | `128.0.0.0` | `191.255.255.255` | 16,382 | 65,534 |'
- en: '| C | `192.0.0.0` | `223.255.255.255` | 2,097,150 | 254 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| C | `192.0.0.0` | `223.255.255.255` | 2,097,150 | 254 |'
- en: '| D | `224.0.0.0` | `239.255.255.255` | Reserved for multicasting |  |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| D | `224.0.0.0` | `239.255.255.255` | 保留用于多播 |  |'
- en: '| E | `240.0.0.0` | `254.255.255.255` | Experimental and research |  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| E | `240.0.0.0` | `254.255.255.255` | 实验和研究 |  |'
- en: IPv4 address classes
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4地址类别
- en: The address classes shown in the table simplified the assignment of addresses
    to the various communication, manufacturing, services, government agencies, and
    companies wanting to be **internet service providers** (**ISPs**). If an organization
    could demonstrate a certain level of need, based on the size of its network or
    business model, it received a block of addresses from an appropriate address class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中显示的地址类别简化了地址分配给各种通信、制造、服务、政府机构和希望成为**互联网服务提供商**（**ISP**）的公司的过程。如果一个组织能够基于其网络或商业模式的规模证明其有一定的需求，它将从相应的地址类别中获得一个地址块。
- en: LAN addressing
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局域网地址
- en: However, like all good things, IPv4 addresses (all 4 billion of them) soon began
    running out. IPv6 was in development, but neither the technology nor the network
    managers were ready for the upgrade.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像所有美好的事物一样，IPv4地址（所有40亿个地址）很快就开始枯竭。IPv6正在开发中，但技术和网络管理员还没有准备好进行升级。
- en: So, to avoid a complete exhaustion of IPv4 addresses, a variety of techniques
    emerged to maximize the usage of an IP address, and to minimize the need for additional
    addresses. These developments included private IP addresses, subnetting, CIDR,
    NAT, PAT, and others.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了避免IPv4地址的完全耗尽，出现了多种技术来最大化IP地址的使用，并尽量减少对额外地址的需求。这些发展包括私有IP地址、子网划分、CIDR、NAT、PAT等。
- en: Private IP addresses
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有IP地址
- en: Somewhere along the line, it occurred to someone that, of the network-attached
    devices behind an organization's gateway router (edge router), those on a **local
    area network** (**LAN**) really don't need assigned public IP addresses. The majority
    of LAN traffic is between its nodes, and that occurs on the Data Link Layer (Layer
    2) and makes use of the **Media Access Control** (**MAC**) sublayer address (physical
    address).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，有人意识到，在组织的网关路由器（边缘路由器）背后的网络附加设备中，**局域网**（**LAN**）中的设备实际上不需要分配公共IP地址。大多数局域网流量是在其节点之间传输的，并发生在数据链路层（第二层），使用**媒体访问控制**（**MAC**）子层地址（物理地址）。
- en: But *what if an organization with several LANs doesn't have a sufficient number
    of public IP addresses to configure every network node with its own?* Finding
    enough IPv4 addresses is the least of its problems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，*如果一个拥有多个局域网的组织没有足够的公共IP地址来为每个网络节点配置独立的IP地址，该怎么办？* 找到足够的IPv4地址仅是其中一个问题。
- en: Although it reduced the number of IPv4 addresses in the assignable pool, three
    blocks of addresses, one from each of the classes A, B, and C, were set aside
    for use as private addresses. The **Internet Assigned Numbers Authority** (**IANA**)
    designated private IP addresses for use on any network behind a gateway router
    or **network address translation** (**NAT**) device (more on which later in this
    section). Private IP addresses are, by definition, non-routable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它减少了可分配IPv4地址池中的地址数量，但仍有三个地址块，分别来自A、B和C类，被保留用于作为私有地址使用。**互联网号码分配局**（**IANA**）为任何位于网关路由器或**网络地址转换**（**NAT**）设备后的网络指定了私有IP地址（稍后会详细介绍）。根据定义，私有IP地址是不可路由的。
- en: 'As shown in the following table, each of the assignable address classes (**A**,
    **B**, and **C**) have a range of private IP addresses:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如下表所示，每个可分配的地址类别（**A**、**B**、**C**）都有一系列私有IP地址：
- en: '| **IPv4 address class** | **Private address range** | **Private addresses
    available** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **IPv4地址类别** | **私有地址范围** | **可用的私有地址数量** |'
- en: '| A | `10.0.0.0`-`10.255.255.255` | 16,777,216 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| A | `10.0.0.0`-`10.255.255.255` | 16,777,216 |'
- en: '| B | `172.16.0.0`-`172.31.255.254` | 1,048,576 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| B | `172.16.0.0`-`172.31.255.254` | 1,048,576 |'
- en: '| C | `192.168.0.0`-`192.168.255.254` | 65,536 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| C | `192.168.0.0`-`192.168.255.254` | 65,536 |'
- en: IPv4 private addresses
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4私有地址
- en: As you can see, each block of addresses provides an adequate number of assignable
    private addresses for nearly all LANs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个地址块提供了足够数量的可分配私有地址，几乎适用于所有的局域网。
- en: An organization may also assign the same set of private addresses to two or
    more of its networks, as long as each network passes through a router or a NAT
    device to access outside the LAN.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织也可以将同一组私有地址分配给其两个或更多的网络，只要每个网络都通过路由器或NAT设备访问外部网络。
- en: Network and host IDs
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和主机ID
- en: IP addresses contain two significant pieces of information—a network identifier,
    and a host identifier. Each of the IPv4 address classes uses a different number
    of bits for each of the identifiers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址包含两部分重要信息——网络标识符和主机标识符。每个IPv4地址类别使用不同数量的位来表示每个标识符。
- en: 'The following table shows the number of bits used for the **network** (**n**)
    and **host** (**h**) in each class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了每个类别中**网络**（**n**）和**主机**（**h**）所使用的位数：
- en: '| **Address class** | **High-order bits in first octet** | **Address mask pattern**
    | **Network ID bits** | **Host ID bits** | **Default****address mask** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **地址类别** | **第一字节的高位** | **地址掩码模式** | **网络ID位** | **主机ID位** | **默认地址掩码**
    |'
- en: '| A | 0 | `n.h.h.h` | 7 | 24 | `255.0.0.0` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| A | 0 | `n.h.h.h` | 7 | 24 | `255.0.0.0` |'
- en: '| B | 10 | `n.n.h.h` | 14 | 16 | `255.255.0.0` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| B | 10 | `n.n.h.h` | 14 | 16 | `255.255.0.0` |'
- en: '| C | 110 | `n.n.n.h` | 21 | 8 | `255.255.255.0` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| C | 110 | `n.n.n.h` | 21 | 8 | `255.255.255.0` |'
- en: Address masks and class IDs extract the network ID from an IPv4 address
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 地址掩码和类别ID从IPv4地址中提取网络ID
- en: The high-order (leftmost) bit or bits in the first (leftmost) octet indicate
    the address class of an IPv4 address. *Why?* The short answer is that extracting
    the network ID from the IPv4 address requires the use of the appropriate address
    mask.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一（最左边）八位字节中的高位（最左侧）位或位组合表示IPv4地址的地址类。*为什么？* 简单的回答是，从IPv4地址中提取网络ID需要使用适当的地址掩码。
- en: 'The process of extracting the network ID from an IPv4 address applies a bit-wise
    AND operation to the address and the mask corresponding to the address class of
    the address. The following table shows the steps taken:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 提取IPv4地址的网络ID过程是对地址与对应于地址类别的掩码进行按位与（AND）操作。下表展示了执行的步骤：
- en: '| **IPv4 address (decimal)** | `10.25.115.88` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| **IPv4地址（十进制）** | `10.25.115.88` |'
- en: '| **Ipv4 address (binary)** | `00001010.00011001.01110011.01011000` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| **IPv4地址（二进制）** | `00001010.00011001.01110011.01011000` |'
- en: '| **Class A default mask** | `11111111.00000000.00000000.00000000` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **A类默认掩码** | `11111111.00000000.00000000.00000000` |'
- en: '| **Network ID (binary)** | `00001010.00000000.00000000.00000000` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **网络ID（二进制）** | `00001010.00000000.00000000.00000000` |'
- en: '| **Network ID (decimal)** | `10.0.0.0` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **网络ID（十进制）** | `10.0.0.0` |'
- en: The steps to extract the network ID from a Class A IPv4 address
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从A类IPv4地址中提取网络ID的步骤
- en: First, the `IPv4 dot.decimal` address converts to binary. Then the binary form
    of the default Class A (`0` in the first bit) address mask is ANDed to the binary
    IPv4 address.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`IPv4 dot.decimal`地址转换为二进制。然后，默认的A类地址（第一位为`0`）的二进制地址掩码与IPv4地址进行按位与（AND）运算。
- en: The bit-wise ANDing process compares two bits, and if both have the value of
    `1`, the result is set to a `1`. All other combinations of the two bits result
    in zero. For example, in the preceding table, the IPv4 address has the binary
    value of `00001010`, and the default Class A mask has the binary value of `11111111`.
    The AND operation compares the two values; only when the two bits (upper and lower,
    address and mask) both have a `1` is the result set to a `1`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按位与运算过程比较两个比特，如果两个比特的值都是 `1`，则结果为 `1`。所有其他比特组合的结果为零。例如，在上表中，IPv4 地址的二进制值为 `00001010`，默认的
    Class A 掩码的二进制值为 `11111111`。按位与运算比较这两个值；只有当两个比特（上位和下位，地址和掩码）都为 `1` 时，结果才会设置为 `1`。
- en: 'The operation looks something like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该操作类似于以下内容：
- en: '![](img/7c68bd20-bf9b-4cbb-af4b-4a37322f9746.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c68bd20-bf9b-4cbb-af4b-4a37322f9746.jpg)'
- en: The bitwise AND operation of an IPv4 address and address mask
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 地址和地址掩码的按位与运算
- en: Network Address Translation (NAT)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络地址转换（NAT）
- en: Because private IPv4 addresses aren't routable, LAN nodes with private addresses
    can't request content from the internet. Any content request made to a server
    on the internet must contain the IP address of the requester.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于私有 IPv4 地址不可路由，具有私有地址的局域网节点无法从互联网请求内容。对互联网服务器的任何内容请求都必须包含请求者的 IP 地址。
- en: If the source address is a private address, there is no way for the server or
    any intermediate devices between the server and the requester to know which `192.168.0.0`
    private network the requesting node is in.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果源地址是私有地址，服务器或服务器与请求者之间的任何中间设备都无法知道请求节点所在的 `192.168.0.0` 私有网络。
- en: To remedy this problem, the NAT protocol, configured on the gateway router,
    applies a public IP address as an alias for the requester's private address. NAT
    records the pairing of the assigned public address and the private address to
    which it's matched in a table. When the response arrives, NAT uses its source
    address (the sender) to look up the private address of the requester/destination,
    and forwards the information.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，配置在网关路由器上的 NAT 协议使用公共 IP 地址作为请求者私有地址的别名。NAT 将分配的公共地址和匹配的私有地址之间的配对记录在一个表中。当响应到达时，NAT
    使用其源地址（发送方）查找请求者/目标的私有地址，并转发信息。
- en: 'The following diagram illustrates the elements of this process:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了这一过程的各个元素：
- en: '![](img/e30efead-6ce4-474a-ab69-888a69b6db1d.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e30efead-6ce4-474a-ab69-888a69b6db1d.jpg)'
- en: The functional elements of the NAT protocol
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: NAT 协议的功能元素
- en: Although the diagram shows the NAT operation with multiple alias addresses,
    many NAT implementations use only a single public address (typically, the address
    of the router), and tracks requests in the same manner as shown.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然图示展示了具有多个别名地址的 NAT 操作，但许多 NAT 实现仅使用一个公共地址（通常是路由器的地址），并以图示相同的方式跟踪请求。
- en: The primary mechanism that enables the use of a single public address is **Port
    Address Translation** (**PAT**), otherwise known as NAT overloading. To differentiate
    between outbound requests, PAT applies a unique port number to the private address
    of the requesting LAN node.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 启用单一公共地址使用的主要机制是**端口地址转换**（**PAT**），也称为 NAT 过载。为了区分出站请求，PAT 将一个唯一的端口号应用于请求的局域网节点的私有地址。
- en: Collision domains
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞域
- en: Two common problems inherent to Ethernet LANs are collisions and broadcast messages.
    Collisions occur when two (or more) nodes attempt to transmit on the network medium
    simultaneously, effectively destroying both messages.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以太网局域网中常见的两个问题是碰撞和广播消息。碰撞发生在两个（或更多）节点尝试同时在网络介质上传输时，从而有效地破坏了这两个消息。
- en: Broadcast messages are a normal part of an Ethernet network's operations, but
    reducing the size of the network also reduces the impact these messages have on
    network performance.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 广播消息是以太网网络操作的正常部分，但减少网络的规模也可以减少这些消息对网络性能的影响。
- en: Ethernet networks use a procedure called **Collision Sense Multiple Access**/**Collision
    Detection** (**CSMA**/**CD**) to detect when a collision has occurred on the network
    medium. CSMA/CD uses a back-off timer to stagger the retransmissions from the
    colliding nodes. On a wireless network, the procedure **CSMA**/**Collision Avoidance**
    (**CSMA**/**CA**) attempts to avoid collisions before they happen.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以太网网络使用一种名为**碰撞感知多重访问**/**碰撞检测**（**CSMA**/**CD**）的程序来检测网络介质上是否发生了碰撞。CSMA/CD使用退避计时器来错开碰撞节点的重传。在无线网络上，**CSMA**/**碰撞避免**（**CSMA**/**CA**）程序尝试在碰撞发生之前避免碰撞。
- en: To regardless of whether the network medium is a cable or radio frequency waves,
    network nodes must share the common medium, often at the same time.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 无论网络介质是电缆还是无线电频率波，网络节点都必须共享公共介质，并且通常是同时进行。
- en: 'A grouping of network nodes connected through a hub or repeater is a collision
    domain. As shown in the following diagram, network segments behind a network hub
    are collision domains and, in this case, three collision domains exist behind
    a network switch:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过集线器或中继器连接的网络节点组是一个碰撞域。如下面的示意图所示，网络集线器后面的网络段是碰撞域，在这种情况下，网络交换机后面存在三个碰撞域：
- en: '![](img/f8b57eee-0eaa-4292-937c-4c92dcca03a3.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8b57eee-0eaa-4292-937c-4c92dcca03a3.jpg)'
- en: Collision and broadcast domains on a LAN
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 局域网中的碰撞域和广播域
- en: In fact, all the nodes behind the switch are in one large collision domain.
    This would be especially true if these workstations were on a wireless network.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，所有在交换机后面的节点都属于一个大的碰撞域。如果这些工作站位于无线网络上，这种情况尤其成立。
- en: Broadcast domains
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广播域
- en: On the other hand, a broadcast domain includes all the network nodes that are
    able to communicate with each other. In virtually all networks, a broadcast domain
    encompasses all of the collision domains, as illustrated in the preceding diagram.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，广播域包括所有能够相互通信的网络节点。在几乎所有网络中，广播域包含了所有碰撞域，如前面的示意图所示。
- en: On a computer network, broadcasting means essentially the same as it does in
    radio or television. A network node transmits a message, typically a request,
    to the entire network, meaning every active connected device.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机网络中，广播基本上与无线电或电视中的广播含义相同。网络节点将消息（通常是请求）广播到整个网络，意味着每个活跃的连接设备。
- en: In most cases, a broadcast message on a LAN results in each receiving node sending
    out its own broadcast messages. This is the reason why network administrators
    try to limit the overall size of broadcast domains.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，局域网上的广播消息会导致每个接收节点发送出自己的广播消息。这就是网络管理员试图限制广播域整体大小的原因。
- en: 'The two most common uses of broadcast messages are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 广播消息的两个最常见用途如下：
- en: '**Startup**: When you boot or restart a computer, its operating system sends
    a broadcast message on the network requesting its IP address configuration. It
    sends the broadcast message because, at that point, it doesn''t have the address
    of the **Dynamic Host Configuration Protocol** (**DHCP**) server. If all is well,
    the DHCP server responds only to the requesting node with its configuration data.
    Any computers on a network that have a very specialized function or setup may
    not or should not use a DHCP configuration. In these cases, the node should be
    configured with static configuration settings.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动**：当你启动或重启计算机时，其操作系统会在网络上发送广播消息，请求其IP地址配置。它发送广播消息是因为此时它还没有**动态主机配置协议**（**DHCP**）服务器的地址。如果一切正常，DHCP服务器只会向请求的节点返回其配置数据。任何具有非常专门功能或设置的计算机可能不使用或不应使用DHCP配置。在这些情况下，节点应使用静态配置设置进行配置。'
- en: '**Address resolution**: The **Address Resolution Protocol** (**ARP**) and its
    mirror-image, the **Reverse Address Resolution Protocol** (**RARP**), use broadcast
    messages to ask network nodes which of them has a certain MAC address (more on
    this later), and to send back its IP address. The request could also be in reverse,
    with RARP asking for the MAC address that corresponds to a certain IP address.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地址解析**：**地址解析协议**（**ARP**）及其镜像协议**反向地址解析协议**（**RARP**）使用广播消息请求网络节点告知它们是否具有某个特定的MAC地址（稍后会详细说明），并返回其IP地址。请求也可以是反向的，即RARP请求某个IP地址对应的MAC地址。'
- en: 'Broadcast messages carry a unique IP address, one reserved specifically for
    this purpose: `255.255.255.255`. When network devices see a message with this
    destination address, they know that it''s a broadcast message.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 广播消息携带一个独特的 IP 地址，该地址专门为此目的保留：`255.255.255.255`。当网络设备看到此目标地址的消息时，它们会知道这是广播消息。
- en: Classless Interdomain Routing (CIDR)
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无类域间路由（CIDR）
- en: Another way to express an IPv4 address that eliminates most of the need for
    an address mask is the CIDR address notation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种表示 IPv4 地址的方法是 CIDR 地址表示法，它消除了大多数对地址掩码的需求。
- en: CIDR (pronounced variably as *cedar*, *cider*, or *kidder*, and also known as **supernetting**)
    denotes the number of bits in an IPv4 address that designate the network ID, without
    any consideration as to which address class it is.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: CIDR（可发音为 *cedar*、*cider* 或 *kidder*，也称为 **超级网络**）表示 IPv4 地址中指定网络 ID 的位数，而不考虑它属于哪个地址类。
- en: 'For example, a standard Class A address has the following pattern:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，标准的 A 类地址具有以下模式：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, *n* denotes the network ID, and *h* denotes the host ID.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*n* 表示网络 ID，*h* 表示主机 ID。
- en: Therefore, in the address `101.15.105.10`, the network ID is `101.0.0.0`. Its
    address mask is `255.0.0.0`. This same address expressed in CIDR notation is `101.15.105.10/8`,
    which indicates that the leftmost eight bits are the network ID.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在地址 `101.15.105.10` 中，网络 ID 是 `101.0.0.0`。它的地址掩码是 `255.0.0.0`。该地址以 CIDR 表示法表达为
    `101.15.105.10/8`，这表示最左侧的八位是网络 ID。
- en: CIDR provides greater flexibility for extending networks without requiring additional
    IPv4 addresses.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: CIDR 提供了更大的灵活性，使得在不需要额外的 IPv4 地址的情况下扩展网络。
- en: Subnetting
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子网划分
- en: 'A **subnetwork** (**subnet**) is a logical segment of a larger network that
    provides a variety of benefits to the network, including the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**子网络**（**子网**）是一个较大网络的逻辑分段，能够为网络提供多种好处，包括以下内容：'
- en: '**Limiting broadcast messages**: Subnetting a network creates smaller broadcast
    and collision domains'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制广播消息**：子网划分将网络划分为更小的广播和冲突域'
- en: '**Expanding a network''s size**: Subnetting facilitates the expansion of a
    network without purchasing additional IP addresses'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展网络规模**：子网划分促进了网络的扩展，而无需购买额外的 IP 地址'
- en: '**Security**: Subnetting allows for the isolation of protected departments
    or functions, such as accounting or research'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：子网划分允许将受保护的部门或功能进行隔离，例如会计或研究'
- en: 'Subnetting is a logical addressing technique that creates smaller subnetworks
    using existing (in place) IPv4 addresses. The basic principle behind subnetting
    is the reassignment of one or more bits in the address mask, which in this case
    becomes a **subnet mask**, to provide for additional networks (subnetworks), as
    shown in the following diagram:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 子网划分是一种逻辑寻址技术，通过使用现有的 IPv4 地址创建更小的子网络。子网划分的基本原理是重新分配地址掩码中的一个或多个位，这些位在此情况下成为
    **子网掩码**，以提供额外的网络（子网络），如下图所示：
- en: '![](img/6a41365d-2155-4b77-8659-98fdea06c84d.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a41365d-2155-4b77-8659-98fdea06c84d.jpg)'
- en: One or more bits borrowed from the host ID create a subnet ID in an IPv4 address
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从主机 ID 中借用一个或多个位，在 IPv4 地址中创建子网 ID
- en: Subnets and hosts
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子网和主机
- en: First, we determine the number of subnets and the number of hosts available
    on each subnet. Typically, this part of the calculation can be a bit of trial
    and error.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确定子网的数量以及每个子网上可用的主机数量。通常，这部分计算可能需要一点试验和错误。
- en: 'The following table lists the departments of the **ServersRUs** company, and
    the number of workstations (hosts) required in each department:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了 **ServersRUs** 公司的各个部门，以及每个部门所需的工作站（主机）数量：
- en: '| **Department** | **Number of hosts** |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **部门** | **主机数量** |'
- en: '| Accounting | 7 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 会计 | 7 |'
- en: '| Customer support | 18 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 客户支持 | 18 |'
- en: '| IT | 8 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| IT | 8 |'
- en: '| Management | 6 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 管理 | 6 |'
- en: '| HR | 4 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 人力资源 | 4 |'
- en: ServersRUs' subnet and host requirements
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ServersRUs 的子网和主机需求
- en: If we wish to set up a subnet for each department, we need to be able to address
    five subnets. In a general approach to subnets, each will have the same number
    of hosts, which in this case must be at least 18 hosts.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望为每个部门设置一个子网，我们需要能够划分五个子网。在一般的子网划分方法中，每个子网将具有相同数量的主机，在此情况下，主机数量至少需要是 18
    台。
- en: Remember, when determining how many bits to take from the host ID and apply
    to the subnet ID, that 2 raised to the power of the number of borrowed bits is
    the number of subnets that it creates. For example, ServersRUs needs five subnets,
    and 5 isn't a power of 2\. At the low end of the powers of 2, we have the values
    of 1 (2⁰), 2 (2¹), 4 (2²), and 8 (2³).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在确定从主机 ID 中取多少位并应用到子网 ID 时，2 的借用位数次方即为它所创建的子网数。例如，ServersRUs 需要五个子网，而 5 不是
    2 的幂次。在 2 的幂次序列中，最小值为 1 (2⁰)、2 (2¹)、4 (2²) 和 8 (2³)。
- en: Of these, only 2^(3,) or 8, provides for the five subnets needed, with the remaining
    three subnets available if or when needed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些中，只有 2^(3) 或 8，提供了所需的五个子网，剩余的三个子网在需要时可以使用。
- en: We have determined that three bits are to move from the host ID and to be used
    for the subnet ID. This leaves five bits for the host ID within each subnet. *Are
    five bits enough to provide each subnet with the number of hosts required?* The
    customer support department requires 18 hosts, which must be our target number.
    So, if we raise 2 to the power of 5 (number of bits), we are able to address 32
    hosts on each subnet.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定要从主机 ID 中移走三个位，用于子网 ID。这使得每个子网内的主机 ID 留下了五个位。*五个位足够为每个子网提供所需的主机数吗？* 客户支持部门需要
    18 个主机，这应该是我们的目标数。所以，如果我们将 2 的 5 次方（位数）进行计算，我们可以在每个子网上提供 32 个主机。
- en: There is a formula in subnetting that works for calculating the number of subnets
    available and the number of hosts available on a subnet: *2n-2* = addressable
    subnets or hosts. In this formula, *n* represents the number of bits borrowed
    (subnets) or remaining (hosts). We'll discuss the *-2* in a minute.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 子网划分中有一个公式，用于计算可用子网数和每个子网可用的主机数：*2n-2* = 可寻址的子网或主机数。在此公式中，*n* 表示借用的位数（子网）或剩余的位数（主机）。稍后我们将讨论这个
    *-2*。
- en: 'The IPv4 Class C subnet addressing is shown in the following table:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了 IPv4 C 类子网地址：
- en: '| **Bits borrowed** | **Subnets** | **Hosts/****subnets** | **Subnet mask**
    | **CIDR** |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **借用的位** | **子网数** | **每个子网的主机数** | **子网掩码** | **CIDR** |'
- en: '| 0 | 1 | 254 | `255.255.255.0` | /24 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 254 | `255.255.255.0` | /24 |'
- en: '| 1 | 2 | 126 | `255.255.255.128` | /25 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 126 | `255.255.255.128` | /25 |'
- en: '| 2 | 4 | 62 | `255.255.255.192` | /26 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 4 | 62 | `255.255.255.192` | /26 |'
- en: '| 3 | 8 | 30 | `255.255.255.224` | /27 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 8 | 30 | `255.255.255.224` | /27 |'
- en: '| 4 | 16 | 14 | `255.255.255.240` | /28 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 16 | 14 | `255.255.255.240` | /28 |'
- en: '| 5 | 32 | 6 | `255.255.255.248` | /29 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 32 | 6 | `255.255.255.248` | /29 |'
- en: '| 6 | 64 | 2 | `255.255.255.252` | /30 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 64 | 2 | `255.255.255.252` | /30 |'
- en: IPv4 Class C subnet addressing
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4 C类子网地址
- en: Subnet masks
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子网掩码
- en: As shown in the preceding table, borrowing bits changes the values of the address
    mask/subnet mask. If we take zero bits, we have a standard Class C network with
    one network and 254 hosts. However, if we reassign four bits, we are able to address
    16 subnets with 14 usable hosts per subnet.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如前表所示，借用位改变了地址掩码/子网掩码的值。如果我们不借用任何位，我们就有一个标准的 C 类网络，包含一个网络和 254 个主机。然而，如果我们重新分配了四个位，我们就可以为每个子网提供
    14 个可用主机，总共可以使用 16 个子网。
- en: 'Because we added four bits to the 24 bits already in a Class C address mask,
    we now have 28 (/28) bits in the network ID of our network. The following table
    shows how this impacts the value of the subnet mask:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在已有的 C 类地址掩码 24 位基础上增加了四个位，现在我们网络的网络 ID 中有 28 位（/28）。以下表格展示了这如何影响子网掩码的值：
- en: '| Decimal value | `255.255.255.0` | Class C address mask |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 十进制值 | `255.255.255.0` | C 类地址掩码 |'
- en: '| Binary value | `11111111.11111111.11111111.00000000` | Class C address mask
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 二进制值 | `11111111.11111111.11111111.00000000` | C 类地址掩码 |'
- en: '| Borrowed bits | `.11100000` | 23 = 8 subnets |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 借用的位 | `.11100000` | 23 = 8 个子网 |'
- en: '| New binary value | `11111111.11111111.11111111.11100000` |  |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 新的二进制值 | `11111111.11111111.11111111.11100000` |  |'
- en: '| New decimal value | `255.255.255.224` | 128+61+32 (27+26+25) |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 新的十进制值 | `255.255.255.224` | 128+61+32 (27+26+25) |'
- en: Constructing a subnet mask
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 构建子网掩码
- en: Network and broadcast addresses
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和广播地址
- en: On any network, the address of the entire network is always the first address
    of its assigned address range. For example, the IPv4 address `10.0.14.210` is
    the Class A address of a network host, and its network address, typically assigned
    to the gateway router, is `10.0.0.0`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何网络中，整个网络的地址始终是分配的地址范围中的第一个地址。例如，IPv4 地址 `10.0.14.210` 是一个网络主机的 C 类地址，而它的网络地址，通常分配给网关路由器，是
    `10.0.0.0`。
- en: In the ServersRUs example, each of the subnets has an assigned address range.
    The first address in the range is its network address. The broadcast address of
    a network or subnet is the last address in its address range.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在ServersRUs示例中，每个子网都有一个分配的地址范围。该范围中的第一个地址是其网络地址。网络或子网的广播地址是其地址范围中的最后一个地址。
- en: In the `10.0.14.210` example, the broadcast address is `10.255.255.255`, absolutely
    the last address in the `10.0.0.0` address range of one subnet with 16,777,214
    hosts.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`10.0.14.210`示例中，广播地址是`10.255.255.255`，它是`10.0.0.0`地址范围内某个子网（具有16,777,214个主机）的最后一个地址。
- en: 'The following table shows the full range of addresses in the ServersRUs network:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了ServersRUs网络中的完整地址范围：
- en: '| **Subnet network ID** | **Subnet hosts addresses** | **Subnet broadcast ID**
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **子网网络ID** | **子网主机地址** | **子网广播ID** |'
- en: '| `192.168.32.0` | `192.168.32.1` to `192.168.32.30` | `192.168.32.31` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.0` | `192.168.32.1` 到 `192.168.32.30` | `192.168.32.31` |'
- en: '| `192.168.32.32` | `192.168.32.33` to `192.168.32.62` | `192.168.32.63` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.32` | `192.168.32.33` 到 `192.168.32.62` | `192.168.32.63` |'
- en: '| `192.168.32.64` | `192.168.32.65` to `192.168.32.94` | `192.168.32.95` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.64` | `192.168.32.65` 到 `192.168.32.94` | `192.168.32.95` |'
- en: '| `192.168.32.96` | `192.168.32.97` to `192.168.32.126` | `192.168.32.127`
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.96` | `192.168.32.97` 到 `192.168.32.126` | `192.168.32.127` |'
- en: '| `192.168.32.128` | `192.168.32.129` to `192.168.32.158` | `192.168.32.159`
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.128` | `192.168.32.129` 到 `192.168.32.158` | `192.168.32.159`
    |'
- en: '| `192.168.32.160` | `192.168.32.161` to `192.168.32.190` | `192.168.32.191`
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.160` | `192.168.32.161` 到 `192.168.32.190` | `192.168.32.191`
    |'
- en: '| `192.168.32.192` | `192.168.32.193` to `192.168.32.222` | `192.168.32.223`
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.192` | `192.168.32.193` 到 `192.168.32.222` | `192.168.32.223`
    |'
- en: '| `192.168.32.224` | `192.168.32.225` to `192.168.32.254` | `192.168.32.255`
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.32.224` | `192.168.32.225` 到 `192.168.32.254` | `192.168.32.255`
    |'
- en: Subnet addressing for the ServerRUs network
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器RUs网络的子网寻址
- en: Note that the first subnet's network ID is the first address of the whole range
    (`192.168.32.0` – `192.168.32.255`). The network ID for the other seven subnets
    is the first address in its range, and the broadcast address is the last address
    in its range.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个子网的网络ID是整个地址范围的第一个地址（`192.168.32.0` – `192.168.32.255`）。其他七个子网的网络ID是其范围中的第一个地址，广播地址是其范围中的最后一个地址。
- en: Each of the subnets shown in the preceding table has 30 addressable hosts, a
    network ID, and a broadcast address. The subnet mask (`255.255.255.224`) is the
    same for all subnets.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 每个前面表格中显示的子网都有30个可寻址主机，一个网络ID和一个广播地址。子网掩码（`255.255.255.224`）对于所有子网都是相同的。
- en: Internet Protocol version 6 (IPv6)
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网协议版本6（IPv6）
- en: IPv6, first introduced in 1998, has slowly replaced or supplemented IPv4 addressing,
    particularly gaining momentum over the past few years. The reason for the development
    of IPv6 was to forestall the rapid depletion of IPv4 addresses.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6首次引入于1998年，已慢慢取代或补充IPv4地址，特别是在过去几年中加速了普及。IPv6的发展原因是为了预防IPv4地址的快速枯竭。
- en: The IPv6 structure extended the number of available network and host addresses
    to what should be a sufficient number for the foreseeable future. The IPv6 address
    space provides for 2,128 addresses, which is around 340,282,366,920,938,463,463,374,607,431,768,211,456
    (340+ undecillion) individual addresses.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6结构扩展了可用的网络和主机地址数量，应该足够满足可预见的未来需求。IPv6地址空间提供了2,128个地址，即大约340,282,366,920,938,463,463,374,607,431,768,211,456（340+无穷大）个单独的地址。
- en: At the present time, only about 20 percent of these addresses are available.
    Don't worry, though, we won't be running out any time soon, because the current
    pool has enough addresses for everyone on the planet to be issued more than 3,000
    addresses each.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这些地址中大约只有20%是可用的。不过不用担心，我们不会很快用完这些地址，因为目前的地址池足够为地球上每个人分配超过3,000个地址。
- en: The IPv6 address structure
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6地址结构
- en: 'IPv6 increases the IP address length to 128 bits, divided into eight 16-bit
    blocks. Each 16-bit block represents four hexadecimal values, called **hextets**.
    The following table shows the hexadecimal values represented in four bits:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6将IP地址长度增加到128位，分为八个16位块。每个16位块表示四个十六进制值，称为**十六位块**。以下表格显示了四位二进制表示的十六进制值：
- en: '| **Hexadecimal value** | **Binary value** |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| **十六进制值** | **二进制值** |'
- en: '| 0 | 0000 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0000 |'
- en: '| 1 | 0001 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0001 |'
- en: '| 2 | 0010 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 0010 |'
- en: '| 3 | 0011 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 0011 |'
- en: '| 4 | 0100 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 0100 |'
- en: '| 5 | 0101 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 0101 |'
- en: '| 6 | 0110 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 0110 |'
- en: '| 7 | 0111 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 0111 |'
- en: '| 8 | 1000 |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 1000 |'
- en: '| 9 | 1001 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 1001 |'
- en: '| A | 1010 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| A | 1010 |'
- en: '| B | 1011 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| B | 1011 |'
- en: '| C | 1100 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| C | 1100 |'
- en: '| D | 1101 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| D | 1101 |'
- en: '| E | 1110 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| E | 1110 |'
- en: '| F | 1111 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| F | 1111 |'
- en: Hexadecimal and binary value equivalents
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制和二进制值的等效项
- en: The address `FE80:0000:0000:0000:0202:FFFA:C4DD:7435` is an example of the IPv6
    format.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 地址 `FE80:0000:0000:0000:0202:FFFA:C4DD:7435` 是 IPv6 格式的一个示例。
- en: Note that, whereas IPv4 uses dots/periods to separate its sections, IPv6 uses
    colons (`:`).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管 IPv4 使用点号/句点分隔其各个部分，IPv6 使用冒号 (`:`)。
- en: The first three bits of an IPv6 address are set to 0012, which results in all
    public IPv6 addresses having just four hexadecimal values in the first hextet
    and beginning with either a 2 or a 3\. For example, `1234:5678:98A4::ABCD` is
    not a valid public IPv6 address, because it begins with a `1`, and `234:5678:98A4::ABCD`
    is not a valid address, because its first hextet has only three digits.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 地址的前三个位设置为 0012，这导致所有公共 IPv6 地址的第一个十六进制组只有四个十六进制值，并且以 2 或 3 开头。例如，`1234:5678:98A4::ABCD`
    不是有效的公共 IPv6 地址，因为它以 `1` 开头，而 `234:5678:98A4::ABCD` 也不是有效地址，因为它的第一个十六进制组只有三个数字。
- en: IPv6 addresses range from `2000::` to `3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF`,
    reducing the size of the pool to `2125`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 地址范围从 `2000::` 到 `3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF`，将地址池的大小缩小到 `2125`。
- en: Reserved prefixes
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保留前缀
- en: 'The first hextet of an IPv6 address may contain certain values to indicate
    a designated type of transaction or message. The reserved prefixes commonly used
    in IPv6 are as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 地址的第一个十六进制组可能包含某些值，以表示某种指定类型的事务或消息。IPv6 中常用的保留前缀如下：
- en: '`2002::/16`—6to4 routing. Provides for routing an IPv6 message over IPv4 tunneling.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2002::/16`—6to4 路由。通过 IPv4 隧道提供 IPv6 消息的路由。'
- en: '`fe80::/10`—link-local address. Primarily for configuration and discovery within
    a local network; routers do not forward.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fe80::/10`—链路本地地址。主要用于本地网络内的配置和发现；路由器不转发此类地址。'
- en: '`ff00::/8`—multicast address. See the following table for some of the reserved
    multicast addresses:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ff00::/8`—多播地址。请参见下表，了解一些保留的多播地址：'
- en: '| **Address** | **Description** |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| **地址** | **描述** |'
- en: '| `ff02::1` | All nodes on the local network segment |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `ff02::1` | 本地网络段上的所有节点 |'
- en: '| `ff02::2` | All routers on the local network segment |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `ff02::2` | 本地网络段上的所有路由器 |'
- en: '| `ff02::5` | OSPFv3 All SPF routers |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `ff02::5` | OSPFv3 所有 SPF 路由器 |'
- en: '| `ff02::9` | RIP routers |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `ff02::9` | RIP 路由器 |'
- en: '| `ff05::1:3` | All DHCP servers on the local network site |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `ff05::1:3` | 本地网络站点上的所有 DHCP 服务器 |'
- en: '| `ff0x::fb` | Multicast DNS |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `ff0x::fb` | 多播 DNS |'
- en: '| `ff0x::114` | Used for experiments |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `ff0x::114` | 用于实验 |'
- en: A sample of the reserved prefixes for IPv6 multicast messages
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 多播消息的保留前缀示例
- en: IPv6 address compression
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6 地址压缩
- en: IPv6 allows for the compression of sections with only zeros, replacing two or
    more contiguous hextets with a double colon (`::`). For example, the preceding
    address becomes `FE80::0202:FFFA:C4DD:7435` in compressed form.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 允许压缩只有零的部分，将两个或更多连续的十六进制组替换为双冒号 (`::`)。例如，前面的地址压缩为 `FE80::0202:FFFA:C4DD:7435`。
- en: However, an IPv6 address may contain only one double colon. This means that,
    if an address has two or more hextet groups of all zeros, compression can only
    apply to one of them. For example, the address `FE80:0000:0000:0000:0202:0000:0000:7435`
    compresses to `FE80::0202:0000:0000:7435`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个 IPv6 地址只能包含一个双冒号。这意味着，如果一个地址有两个或更多全为零的十六进制组，则压缩只能应用于其中一个。例如，地址 `FE80:0000:0000:0000:0202:0000:0000:7435`
    压缩为 `FE80::0202:0000:0000:7435`。
- en: IPv6 leading zero compression
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6 前导零压缩
- en: A hextet with one or more zeros in its most significant positions (leftmost)
    is compressible, removing the zeros. For example, a hextet of 00A7 becomes just
    A7, or a hextet of 0000 compresses to 0\. The address `FE80::0202:0000:0000:7435`
    further compresses to `FE80::202:0:0:7435`, which shows the application of both
    compression methods.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一个十六进制组的最左侧（最重要的）位置如果有一个或多个零，则该组可以被压缩，去掉零。例如，十六进制组 00A7 会变成 A7，或者十六进制组 0000
    会压缩为 0。地址 `FE80::0202:0000:0000:7435` 进一步压缩为 `FE80::202:0:0:7435`，这显示了两种压缩方法的应用。
- en: IPv6 network ID
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPv6 网络 ID
- en: Because IPv6 doesn't define address classes, a fixed segment of the address
    represents the network identifier. By standard, the first 64 bits of an IPv6 address
    identify the network address of the source or destination of a message, but this
    can vary.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 IPv6 没有定义地址类别，所以地址的一个固定部分表示网络标识符。按照标准，IPv6 地址的前 64 位标识消息源或目的地的网络地址，但这可以有所变化。
- en: A network of a single host has a network ID of 128 bits. IPv6 uses the CIDR
    notation to indicate the network ID in an address. An address with a /64 has the
    first 64 bits as its network address.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 单主机的网络有一个128位的网络ID。IPv6使用CIDR表示法来表示地址中的网络ID。一个/64的地址其前64位为网络地址。
- en: 'IPv6 also reserves certain bit-lengths for special purposes. The following
    table lists just a few of these:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6还保留了某些特定的位长度用于特殊目的。下表列出了其中的一些：
- en: '| **Prefix** | **CIDR notation** | **Purpose** |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| **前缀** | **CIDR表示法** | **用途** |'
- en: '| `::` | /96 | An address compatible with IPv4 |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `::` | /96 | 兼容IPv4的地址 |'
- en: '| `::` | /128 | An unspecified address used for internal addressing by software
    |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `::` | /128 | 用于软件内部地址的未指定地址 |'
- en: '| `::1` | /128 | Loopback address, referring to the localhost equivalent to
    the IPv4 localhost `127.0.0.1` |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `::1` | /128 | 回环地址，指向本地主机，相当于IPv4的本地主机地址`127.0.0.1` |'
- en: '| `fc00::` | /7 | A **Unique Local Address** (**ULA**), routed only within
    coordinated sites |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `fc00::` | /7 | 一个**唯一本地地址**（**ULA**），仅在协调站点内部路由 |'
- en: '| `fe80::` | /10 | A link-local address, valid on a local physical link only
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `fe80::` | /10 | 链路本地地址，仅在本地物理链路上有效 |'
- en: Reserved IPv6 addresses and CIDR designations
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 保留的IPv6地址和CIDR表示法
- en: Address categories
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地址类别
- en: 'IPv6 addresses generally fall into one of three address categories:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址通常属于以下三种地址类别之一：
- en: '**Unicast**: An IPv6 unicast address identifies a single destination, and packets
    with that unicast address go to that address.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicast**：一个IPv6单播地址标识单一目的地，带有该单播地址的数据包将发送到该地址。'
- en: '**Multicast**: An IPv6 multicast address identifies a group of nodes perhaps
    scattered across several networks. Each of the nodes included in the multicast
    address receives the transmission.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Multicast**：一个IPv6多播地址标识一组可能分布在多个网络中的节点。每个包含在多播地址中的节点都会接收该传输。'
- en: '**Anycast**: An IPv6 packet with an anycast address goes to only one of an
    identified set of nodes. The receiving node is typically the closest, in terms
    of distance and availability.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Anycast**：一个带有Anycast地址的IPv6数据包只会发送到一组节点中的一个。接收节点通常是距离最短且最可用的节点。'
- en: 'The following diagram illustrates the three categories:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了三种地址类别：
- en: '![](img/e800f0c6-333f-41fe-9e9f-8ce9ba786121.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e800f0c6-333f-41fe-9e9f-8ce9ba786121.jpg)'
- en: IPv6 address categories
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址类别
- en: MAC addressing
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MAC地址
- en: IP addresses will work for the addressing within a LAN, but they are really
    not necessary for internal communications. Ethernet networks, for example, use
    an addressing scheme that operates on Layer 2 of the OSI model—the MAC address,
    otherwise known as the **Data Link Control** (**DLC**) address or physical address.
    While this number is more of an identification number, its universal uniqueness
    makes it ideal for addressing across a local network.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址适用于局域网内部的地址分配，但实际上并不是内部通信所必需的。例如，以太网网络使用一种在OSI模型第2层（数据链路层）上运行的地址方案——MAC地址，也叫**数据链路控制**（**DLC**）地址或物理地址。虽然这个号码更像是一个标识号码，但它的全球唯一性使其在局部网络中的地址分配中非常理想。
- en: Every manufacturer of network or communication devices, such as NICs, switches,
    modems, routers, and so on, permanently embeds a unique identifying number into
    each device they produce. The manufacturer embeds this number into a ROM or firmware,
    so that it's permanently a part of the device.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络或通信设备的制造商，如网卡、交换机、调制解调器、路由器等，都将一个唯一的标识号码永久嵌入到他们生产的每一台设备中。制造商将这个号码嵌入到ROM或固件中，使其成为设备的一部分，永久存在。
- en: A MAC/DLC address consists of 48 bits whose value in hexadecimal identifies
    both the manufacturer and the device. The first 24 bits of the MAC/DLC number
    identify the manufacturer with an **Organizationally Unique Identifier** (**OUI**)
    code, assigned to the producer by the **Institute for Electrical and Electronics
    Engineers** (**IEEE**).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一个MAC/DLC地址由48位组成，其十六进制值标识了制造商和设备。MAC/DLC号码的前24位标识了制造商的**组织唯一标识符**（**OUI**）代码，由**电气和电子工程师学会**（**IEEE**）分配给生产商。
- en: The remaining 24 bits contain what is in effect a serial number unique to the
    OUI. The combination of the OUI and the serial number creates an identifying number
    that is unique.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的24位包含一个实质上是序列号的部分，该序列号对OUI是唯一的。OUI和序列号的组合形成了一个唯一的标识号码。
- en: Here's an example—a network adapter in a notebook computer has the MAC/DLC address
    `5C-E0-C5-B6-B3-9A`. The first three sections of this number (`5C-E0-C5`) indicate
    that its manufacturer is the Intel Corporation (Malaysia). The conversion of the
    serial number from hexadecimal to decimal gives the value 11973530, whatever that
    may mean. Regardless, this unique combination provides an unduplicated value that
    Layer 2 technologies use as an address.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在笔记本电脑的网络适配器中有MAC/DLC地址`5C-E0-C5-B6-B3-9A`。这个数字的前三部分（`5C-E0-C5`）表示其制造商是英特尔公司（马来西亚）。将十六进制序列号转换为十进制得到值11973530，不管这意味着什么。但是，这个独特的组合提供了一个不重复的值，第二层技术用作地址。
- en: Address resolution
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地址解析
- en: When you have one type of address, but need another type, you use an address
    resolution protocol or service. An example might be when you have a person's name
    and address, but you need his or her telephone number. In this case, the address
    resolution method is to look up the name and address in a telephone directory
    to find the number you need.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当您拥有一种类型的地址，但需要另一种类型时，可以使用地址解析协议或服务。例如，当您拥有一个人的姓名和地址，但需要他或她的电话号码时。在这种情况下，地址解析方法是在电话目录中查找姓名和地址以找到您需要的号码。
- en: On a computer network, there are device or configuration addresses that are
    appropriate for some purposes, but not for others. On an Ethernet network, the
    MAC/DLC address of a network adapter is sufficient for communications within the
    network. However, a message intended for a destination beyond the local network
    requires another level of address.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机网络上，有些设备或配置地址适合某些用途，但对其他用途则不适用。在以太网网络上，网络适配器的MAC/DLC地址足以进行网络内的通信。但是，发送到本地网络之外目的地的消息需要另一种级别的地址。
- en: Using an address from one OSI layer to learn the corresponding address on another
    OSI layer is called address resolution. Commonly, this means resolving a MAC address
    to an IP address (or vice versa), or resolving a web domain name to an IP address.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个OSI层的地址来了解另一个OSI层上对应的地址称为地址解析。通常，这意味着将MAC地址解析为IP地址（或反之），或者将Web域名解析为IP地址。
- en: The primary protocol and network service performing address resolution are,
    on local networks, the **Address Resolution Protocol** (**ARP**), and, on public
    networks, the **Domain Name System** (**DNS**).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 执行地址解析的主要协议和网络服务，在本地网络上是**地址解析协议**（**ARP**），在公共网络上是**域名系统**（**DNS**）。
- en: ARP
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ARP
- en: ARP converts an IPv4 address (logical address) to its corresponding MAC/DLC
    address (physical address). This enables the forwarding of messages arriving from
    outside a local network to their destination. ARP is an OSI Layer 2 protocol which
    is typically part of the device driver for a network adapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: ARP将IPv4地址（逻辑地址）转换为其对应的MAC/DLC地址（物理地址）。这使得从本地网络外部到达的消息能够转发到其目的地。ARP是一个OSI第二层协议，通常是网络适配器的设备驱动程序的一部分。
- en: A message packet that requires routing cannot use a MAC address for its source
    address, and must use an IP address. ARP performs this lookup, and provides the
    corresponding IP address.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 需要路由的消息数据包不能使用MAC地址作为其源地址，必须使用IP地址。ARP执行此查找，并提供相应的IP地址。
- en: At one time, a reverse action, **Reverse ARP** (**RARP**), resolved IP to MAC
    addresses. However, this service is now part of **Dynamic Host Configuration Protocol**
    (**DHCP**).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一个反向操作，**逆地址解析**（**RARP**），将IP解析为MAC地址。然而，这项服务现在是**动态主机配置协议**（**DHCP**）的一部分。
- en: DNS
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS
- en: The internet would be a lot more complicated to use if all sites had only IP
    addresses. It would be difficult to remember all of the numerical IP addresses,
    especially IPv6 addresses. To resolve this potential problem, we use domain names
    and top-level domain designators in combination, such as `packt.com`, where `packt`
    is the domain name and `.com` is the **top-level domain** (**TLD**) designation.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有站点仅使用IP地址，互联网将变得更加复杂。记住所有数字IP地址，尤其是IPv6地址，将会很困难。为了解决这个潜在问题，我们使用域名和顶级域名设计符号的组合，例如`packt.com`，其中`packt`是域名，`.com`是**顶级域名**（**TLD**）标识。
- en: DNS search
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS搜索
- en: A domain name identifies a specific authority or autonomous realm on the web.
    Domain names are unique and issued to only a single entity, although some entities
    try to get close in spelling or sound to the domain names of others. Examples
    of familiar domain names are `google`, `amazon`, `euronews`, and `baidu`. The
    most popular TLDs include `.com`, `.net`, `.info`, `.gov`, and `.edu`.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 域名标识了网络上的特定权威或自治领域。域名是唯一的，并且只分配给单个实体，尽管有些实体试图在拼写或发音上接近其他人的域名。熟悉的域名示例包括`google`、`amazon`、`euronews`和`baidu`。最受欢迎的顶级域包括`.com`、`.net`、`.info`、`.gov`和`.edu`。
- en: Outside the United States, many domain names also include a country code as
    the TLD, such as `.uk`, `.ca`, `.cn`, or `.de`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国之外，许多域名还包括国家代码作为TLD，例如`.uk`、`.ca`、`.cn`或`.de`。
- en: 'DNS search generally works as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: DNS搜索通常工作如下：
- en: A user enters the **fully-qualified domain name** (**FQDN**) of a website into
    the location bar of a browser, for example, `www.packt.com`, in which `www` is
    the hostname assigned to the web server for `packt.com`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户在浏览器的位置栏中输入网站的完全合格域名（FQDN），例如`www.packt.com`，其中`www`是分配给`packt.com`的Web服务器的主机名。
- en: The browser detects that it must resolve the FQDN to an IP address, and sends
    a query to its designated DNS server.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器检测到必须将FQDN解析为IP地址，并向其指定的DNS服务器发送查询。
- en: The DNS server searches in its `.com` entries for `packt`, and returns the corresponding
    IP address (`52.216.233.42`) to the browser.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS服务器在其`.com`条目中搜索`packt`，并将相应的IP地址（`52.216.233.42`）返回给浏览器。
- en: The browser then issues an HTTP request to IP address `52.216.233.42` for the
    page requested.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，浏览器为所请求的页面向IP地址`52.216.233.42`发出HTTP请求。
- en: Domain suffix
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 域后缀
- en: A default domain suffix search list allows for a one or more unqualified single
    name or identifying words to initiate a DNS search. This list contains the domains
    that should be a part of a DNS search for an IP address.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的域后缀搜索列表允许一个或多个不合格的单一名称或标识词来启动DNS搜索。该列表包含应作为IP地址的DNS搜索一部分的域。
- en: For example, if `generic.mysite.info` is the FQDN for resolution, and the `mysite.info`
    search domain includes other hostnames such as normal, usual, or occasional, a
    domain search using a search domain suffix is easier for the user. By including
    `mysite.info` in a domain search list, the user only needs to enter the hostname.
    Likewise, just entering generic in the address bar causes the browser to append
    the search domain/domain suffix to the hostname before sending a request to a
    DNS server.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`generic.mysite.info`是要解析的FQDN，并且`mysite.info`搜索域包含其他主机名，如normal、usual或occasional，使用搜索域后缀进行域搜索对用户更为方便。通过将`mysite.info`包含在域搜索列表中，用户只需输入主机名。同样，只需在地址栏中输入`generic`，浏览器就会在向DNS服务器发送请求之前将搜索域/域后缀附加到主机名。
- en: The domain suffix search list may contain several search domains, each of which
    generates a separate request to a DNS server.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 域后缀搜索列表可能包含多个搜索域，每个域会生成一个向DNS服务器的单独请求。
- en: The Windows Internet Name Service (WINS)
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows Internet名称服务（WINS）
- en: On Windows systems, both DNS and WINS can resolve device and network names.
    However, these two services are quite different. WINS is a Microsoft utility that
    runs only on Windows systems, whereas DNS is system- and platform-independent.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows系统中，DNS和WINS都可以解析设备和网络名称。但是，这两个服务有很大的不同。WINS是一个仅在Windows系统上运行的Microsoft实用程序，而DNS是系统和平台无关的。
- en: 'In addition, there are several other differences, as listed in the following
    table:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在以下表中列出了几个其他区别：
- en: '| **Feature** | **DNS** | **WINS** |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **DNS** | **WINS** |'
- en: '| IP addressing | Static IP addresses | Dynamic IP addresses |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| IP地址分配 | 静态IP地址 | 动态IP地址 |'
- en: '| Name resolution | Host names to IP addresses | NetBIOS names to IP addresses
    |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 名称解析 | 主机名到IP地址 | NetBIOS名称到IP地址 |'
- en: '| Database modifications | Copies entire database | Incremental modification
    |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| 数据库修改 | 复制整个数据库 | 增量修改 |'
- en: '| TCP/IP application services | Support all services | No support for TCP/IP
    services |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| TCP/IP应用服务 | 支持所有服务 | 不支持TCP/IP服务 |'
- en: DNS versus WINS basic features
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: DNS与WINS基本特性
- en: In later releases of the Windows operating systems, improvements to WINS has
    led to WINS over TCP/IP, which makes it more compatible with DNS (and DNS with
    it). Legacy WINS is still in use, but is beginning to disappear.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows操作系统的后续版本中，对WINS的改进导致了基于TCP/IP的WINS，使其与DNS更兼容（以及DNS与WINS）。传统的WINS仍在使用中，但正在逐渐消失。
- en: Ports and protocols
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端口和协议
- en: 'Another type of network addressing uses transport layer ports to designate
    the endpoint to which a particular network packet is to be sent. The term *port*
    can refer to either of the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: A hardware connection point, such as an RJ-45 connection jack on a switch or
    router
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A software-defined construct that, along with an IP address, establishes a *socket*,
    or the total address of the software that is to process the incoming packet
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the second definition that we are using here.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Data is transmitted on a network in **protocol data units** (**PDUs**). On different
    levels of the OSI model, PDUs are given different names—for example, a PDU on
    the Network Layer is known as a **packet**, and on the Data Link Layer it's called
    a **frame**.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: On the Transport Layer, a PDU is known by two names—segments (TCP protocol)
    and datagrams (UDP protocol). The point of this is that ports are associated with
    TCP and UDP, and the segments and datagrams of each.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Well-known ports
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The port numbers available for assignment by the IANA range from 0 to 65535\.
    Of these, ports `0` to `1023` are well-known ports. A **well-known port** is a
    service or protocol that resides on a private network or the public internet,
    and is a common server-based application.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following table, each protocol/port combination has a numeric
    port associated with it:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protocol** | **TCP port number** | **UDP port number** |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
- en: '| **Domain Name System** (**DNS**) | `53` | `53` |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
- en: '| **Dynamic Host Configuration Protocol** (**DHCP**) |  | `67` and `68` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
- en: '| **File Transfer Protocol** (**FTP**) |  | `20` and `21` |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
- en: '| **FTP over TLS/SSL** (**FTPS**) | `989`/`990` | `989`/`990` |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
- en: '| **HTTP over TLS/SSL** (**HTTPS**) | `443` |  |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
- en: '| **Hypertext Transfer Protocol** (**HTTP**) | `80` |  |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '| **Internet Message Access Protocol v4** (**IMAP4**) | `143` | `143` |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
- en: '| **Lightweight Data Access Protocol** (**LDAP**) | `389` | `389` |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
- en: '| **Network Time Protocol** (**NTP**) |  | `123` |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
- en: '| **Post Office Protocol 3** (**POP3**) | `110` |  |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '| **Secure FTP** (**SFTP**) |  |  |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
- en: '| **Secure Shell** (**SSH**) / **Secure Copy** (**SCP**) / **Secure FTP** (**SFTP**)
    | `22` | `22` |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
- en: '| **Simple Mail Transport Protocol** (**SMTP**) | `25` | `25` |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
- en: '| **Simple Network Management Protocol** (**SNMP**) | `161` | `161` |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
- en: '| Telnet | `23` | `23` |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
- en: Well-known TCP/UDP ports
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: The port number added to the end of an address designates the processing software,
    protocol, or service. For example, addressing a segment to `10.0.0.20:80` indicates
    that it's an HTTP message. The combination of the IP address and the port number
    creates a socket.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Registered ports
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next set of port numbers, ranging from 1024 to 49151, are registered ports,
    which are port numbers that individuals and companies can register for association
    with a particular software package or application.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'You may encounter two registered ports on the Server+ exam, as follows:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protocol** | **TCP port number** | **UDP port number** |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
- en: '| LDAP—AD | `3268` | `3268` |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
- en: '| **Remote Desktop Protocol** (**RDP**) | `3389` | `3389` |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
- en: Registered TCP/UDP for Server+ Exam
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: The last group of port numbers, those from 49152 to 65535, are dynamic (or private)
    ports. The IANA doesn't register these port numbers; they are available for general
    use by the public, primarily for internal purposes.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the fact that an IPv4 address is 32 bits divided
    into four octets in a dot-decimal format. An octet may hold values from 0 to 255.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed how IPv4 addressing has address classes A, B, C, D, and E. Private
    addresses are for LANs. Each IPv4 address class has a standard subnet mask to
    identify its network ID: class A—eight bits; class B—16 bits, and class C—24 bits. NAT
    devices mask private addresses with public addresses, whereas PAT applies a port
    number to a private address.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Next, we covered how collisions occur when nodes attempt to transmit simultaneously.
    The impact of broadcast messages reduces on smaller networks. CSMA/CD detects
    collisions, and staggers the retransmissions of colliding nodes. Wireless networks
    use CSMA/CA to avoid collisions. Common broadcasts are startup and address resolution.
    CIDR denotes the number of bits in the network ID of an IPv4 address.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at subnets, which are logical segments of a larger network. Subnetting
    alters the subnet mask to provide additional subnet IDs. The first address in
    the range of addresses of a subnet is its network address. The broadcast address
    of a subnet is the last address in its address range.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Next, we discussed IPv6\. This increases the address length to 128 bits, divided
    into eight 16-bit blocks called hextets. The first 64 bits identify the network
    ID. IPv6 addresses can be unicast, multicast, or anycast. Ethernet networks use
    MAC/DLC addressing to identify the manufacturer and device. The first 24 bits
    is the OUI; the remaining 24 bits is a serial number.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: We went on to look at the protocol and network services that perform address
    resolution, namely ARP, WINS, and DNS. ARP converts IP addresses into a corresponding
    MAC address, WINS converts NetBIOS names to MAC addresses, and DNS converts FQDNs
    to IP addresses.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered ports—software-defined identifiers that combine with an
    IP address to identify a socket, which designates the software to process the
    incoming packet. Port numbers range from `0` to `65535`. Ports `0` to `1023` are
    well-known ports.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following best describes an IPv4 address?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classless
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Five classes of 32-bits in four octets
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 128-bits in eight sections of 16 bits
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The network identifier has a fixed size
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which IPv4 address class uses 16 bits to identify the network portion of an
    address?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Class A
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class B
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class C
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class D
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv4 is classless
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which network service provides an alias public address to internal network nodes
    with private LAN addresses?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DNS
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: WINS
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NAT
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the subnet shown in the following diagram, the red dotted line encompasses
    which of the following?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Broadcast domain
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv4
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Collision domain
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv6
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb8e4c37-bde4-4013-b972-221d0f635258.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
- en: Wire-based Ethernet networks use which technology to manage message collisions?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CSMA/CA
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP/IP
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSMA/CD
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NAT
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is likely to be the broadcast address for a subnet?
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10.0.0.0`'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`192.168.32.10`'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`201.255.255.255`'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`168.92.15.0`'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is an example of CIDR notation?
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2020::15AD:0:25FF`'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`201.110.25.16/24`'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10.0.0.0`'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`198.168.32.10:80`'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the significance of a double colon inserted in an IPv6 address?
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections not used for routing
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections containing all zeros
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections containing FFFF16
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It indicates a TCP/UDP port number
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not an IPv6 address category?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multicast
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unicast
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Anycast
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Broadcast
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the port number range for well-known TCP/UDP ports?
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0` to `65535`'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1024` to `49151`'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0` to `1023`'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`49152` to `65535`'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
