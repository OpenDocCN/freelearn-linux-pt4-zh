- en: Addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'd have a difficult time locating a particular address in a large city using
    only a general description of the house in question. In the same way, a computer's
    **operating system** (**OS**) would have problems finding a data file for you
    if all you know is what's in it.
  prefs: []
  type: TYPE_NORMAL
- en: Back in the day, when secondary storage was small, it was relatively easy to
    find files on a floppy disk or hard disk. Connecting to another PC over a peer-to-peer
    network was straightforward and didn't require much in the way of an address—just
    the internal address of a parallel port.
  prefs: []
  type: TYPE_NORMAL
- en: However, on today's network and storage technologies, with their immensity,
    addressing on all levels is an essential part of computing.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we look at the variety of addressing schemes used in computing
    and networking—their structures, representations, and purposes. We also look at
    the interface between a computer and a network, and the protocols and services
    that provide their connection, transmission, and security.
  prefs: []
  type: TYPE_NORMAL
- en: We take a outside-in approach to addressing, beginning with **Internet Protocol**
    (**IP**) addressing and ending with **Media Access Control** (**MAC**) and port
    addressing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: IP addressing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP version 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP version 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAC addressing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Address resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ports and protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the purposes of the Server+ exam, we really don't need to cover the entire
    history of network addressing, from the development of packet switching 50 or
    so years ago to IP version 6 addressing today.
  prefs: []
  type: TYPE_NORMAL
- en: When TCP replaced the earlier **Network Control Protocol** (**NCP**) in 1974,
    it performed both data transmission and message routing. These two functions were
    later split into what we know today as TCP and IP, as in the TCP/IP protocol suite.
  prefs: []
  type: TYPE_NORMAL
- en: IP version 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary purpose of an IP is to provide a path through a network of computing
    and routing devices interconnected by communication links in an unstructured manner.
  prefs: []
  type: TYPE_NORMAL
- en: Early on, it became clear that one of the underlying design features of the
    internet was that it provided no single point of failure. This led to its purposefully
    haphazard construction, and the need for a flexible addressing scheme.
  prefs: []
  type: TYPE_NORMAL
- en: The TCP/IP protocols developed over the years into the standard that is still
    largely in use today. Given that there was pressure on the developers from large
    communication corporations, government agencies, and small and medium-sized businesses,
    an address class system divided up the available address range to provide ample
    network addresses to all parties—at least at first.
  prefs: []
  type: TYPE_NORMAL
- en: The IPv4 address structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we have come to know as an IP address in general, the IPv4 address, consists
    of 32 bits divided into four eight-bit octets (groups of eight). For the sake
    of humans, a format called **dot-decimal** formats the binary address into four
    decimal numbers separated by dots, or periods.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following shows the binary number version of an IP address
    and its decimal number equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Each set of four octets represents a single addressable network location.
  prefs: []
  type: TYPE_NORMAL
- en: 'An octet may hold binary values in the range from 00000000 to 11111111, or
    0 to 255 in decimal, respectively. Therefore, the total range of IPv4 addresses
    starts at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The range goes up to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A significant number of the addresses in this range are set aside for special
    purposes. This means that not all of the addresses in the range are available
    for assignment to network nodes. We will talk more about this later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Classful IP addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As shown in the following table, the IPv4 addressing scheme includes five address
    classes, although only three have been in use extensively. Address classes **D**
    and **E** were set aside for multicasting under IPv4 and research and experimentation,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Address class** | **From** | **To** | **Network****addresses** | **Hosts
    per network** |'
  prefs: []
  type: TYPE_TB
- en: '| A | `1.0.0.0` | `126.255.255.255` | 126 | 16,777,214 |'
  prefs: []
  type: TYPE_TB
- en: '| B | `128.0.0.0` | `191.255.255.255` | 16,382 | 65,534 |'
  prefs: []
  type: TYPE_TB
- en: '| C | `192.0.0.0` | `223.255.255.255` | 2,097,150 | 254 |'
  prefs: []
  type: TYPE_TB
- en: '| D | `224.0.0.0` | `239.255.255.255` | Reserved for multicasting |  |'
  prefs: []
  type: TYPE_TB
- en: '| E | `240.0.0.0` | `254.255.255.255` | Experimental and research |  |'
  prefs: []
  type: TYPE_TB
- en: IPv4 address classes
  prefs: []
  type: TYPE_NORMAL
- en: The address classes shown in the table simplified the assignment of addresses
    to the various communication, manufacturing, services, government agencies, and
    companies wanting to be **internet service providers** (**ISPs**). If an organization
    could demonstrate a certain level of need, based on the size of its network or
    business model, it received a block of addresses from an appropriate address class.
  prefs: []
  type: TYPE_NORMAL
- en: LAN addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, like all good things, IPv4 addresses (all 4 billion of them) soon began
    running out. IPv6 was in development, but neither the technology nor the network
    managers were ready for the upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: So, to avoid a complete exhaustion of IPv4 addresses, a variety of techniques
    emerged to maximize the usage of an IP address, and to minimize the need for additional
    addresses. These developments included private IP addresses, subnetting, CIDR,
    NAT, PAT, and others.
  prefs: []
  type: TYPE_NORMAL
- en: Private IP addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Somewhere along the line, it occurred to someone that, of the network-attached
    devices behind an organization's gateway router (edge router), those on a **local
    area network** (**LAN**) really don't need assigned public IP addresses. The majority
    of LAN traffic is between its nodes, and that occurs on the Data Link Layer (Layer
    2) and makes use of the **Media Access Control** (**MAC**) sublayer address (physical
    address).
  prefs: []
  type: TYPE_NORMAL
- en: But *what if an organization with several LANs doesn't have a sufficient number
    of public IP addresses to configure every network node with its own?* Finding
    enough IPv4 addresses is the least of its problems.
  prefs: []
  type: TYPE_NORMAL
- en: Although it reduced the number of IPv4 addresses in the assignable pool, three
    blocks of addresses, one from each of the classes A, B, and C, were set aside
    for use as private addresses. The **Internet Assigned Numbers Authority** (**IANA**)
    designated private IP addresses for use on any network behind a gateway router
    or **network address translation** (**NAT**) device (more on which later in this
    section). Private IP addresses are, by definition, non-routable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following table, each of the assignable address classes (**A**,
    **B**, and **C**) have a range of private IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **IPv4 address class** | **Private address range** | **Private addresses
    available** |'
  prefs: []
  type: TYPE_TB
- en: '| A | `10.0.0.0`-`10.255.255.255` | 16,777,216 |'
  prefs: []
  type: TYPE_TB
- en: '| B | `172.16.0.0`-`172.31.255.254` | 1,048,576 |'
  prefs: []
  type: TYPE_TB
- en: '| C | `192.168.0.0`-`192.168.255.254` | 65,536 |'
  prefs: []
  type: TYPE_TB
- en: IPv4 private addresses
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, each block of addresses provides an adequate number of assignable
    private addresses for nearly all LANs.
  prefs: []
  type: TYPE_NORMAL
- en: An organization may also assign the same set of private addresses to two or
    more of its networks, as long as each network passes through a router or a NAT
    device to access outside the LAN.
  prefs: []
  type: TYPE_NORMAL
- en: Network and host IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IP addresses contain two significant pieces of information—a network identifier,
    and a host identifier. Each of the IPv4 address classes uses a different number
    of bits for each of the identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the number of bits used for the **network** (**n**)
    and **host** (**h**) in each class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Address class** | **High-order bits in first octet** | **Address mask pattern**
    | **Network ID bits** | **Host ID bits** | **Default****address mask** |'
  prefs: []
  type: TYPE_TB
- en: '| A | 0 | `n.h.h.h` | 7 | 24 | `255.0.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| B | 10 | `n.n.h.h` | 14 | 16 | `255.255.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| C | 110 | `n.n.n.h` | 21 | 8 | `255.255.255.0` |'
  prefs: []
  type: TYPE_TB
- en: Address masks and class IDs extract the network ID from an IPv4 address
  prefs: []
  type: TYPE_NORMAL
- en: The high-order (leftmost) bit or bits in the first (leftmost) octet indicate
    the address class of an IPv4 address. *Why?* The short answer is that extracting
    the network ID from the IPv4 address requires the use of the appropriate address
    mask.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of extracting the network ID from an IPv4 address applies a bit-wise
    AND operation to the address and the mask corresponding to the address class of
    the address. The following table shows the steps taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **IPv4 address (decimal)** | `10.25.115.88` |'
  prefs: []
  type: TYPE_TB
- en: '| **Ipv4 address (binary)** | `00001010.00011001.01110011.01011000` |'
  prefs: []
  type: TYPE_TB
- en: '| **Class A default mask** | `11111111.00000000.00000000.00000000` |'
  prefs: []
  type: TYPE_TB
- en: '| **Network ID (binary)** | `00001010.00000000.00000000.00000000` |'
  prefs: []
  type: TYPE_TB
- en: '| **Network ID (decimal)** | `10.0.0.0` |'
  prefs: []
  type: TYPE_TB
- en: The steps to extract the network ID from a Class A IPv4 address
  prefs: []
  type: TYPE_NORMAL
- en: First, the `IPv4 dot.decimal` address converts to binary. Then the binary form
    of the default Class A (`0` in the first bit) address mask is ANDed to the binary
    IPv4 address.
  prefs: []
  type: TYPE_NORMAL
- en: The bit-wise ANDing process compares two bits, and if both have the value of
    `1`, the result is set to a `1`. All other combinations of the two bits result
    in zero. For example, in the preceding table, the IPv4 address has the binary
    value of `00001010`, and the default Class A mask has the binary value of `11111111`.
    The AND operation compares the two values; only when the two bits (upper and lower,
    address and mask) both have a `1` is the result set to a `1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The operation looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c68bd20-bf9b-4cbb-af4b-4a37322f9746.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bitwise AND operation of an IPv4 address and address mask
  prefs: []
  type: TYPE_NORMAL
- en: Network Address Translation (NAT)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because private IPv4 addresses aren't routable, LAN nodes with private addresses
    can't request content from the internet. Any content request made to a server
    on the internet must contain the IP address of the requester.
  prefs: []
  type: TYPE_NORMAL
- en: If the source address is a private address, there is no way for the server or
    any intermediate devices between the server and the requester to know which `192.168.0.0`
    private network the requesting node is in.
  prefs: []
  type: TYPE_NORMAL
- en: To remedy this problem, the NAT protocol, configured on the gateway router,
    applies a public IP address as an alias for the requester's private address. NAT
    records the pairing of the assigned public address and the private address to
    which it's matched in a table. When the response arrives, NAT uses its source
    address (the sender) to look up the private address of the requester/destination,
    and forwards the information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the elements of this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e30efead-6ce4-474a-ab69-888a69b6db1d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The functional elements of the NAT protocol
  prefs: []
  type: TYPE_NORMAL
- en: Although the diagram shows the NAT operation with multiple alias addresses,
    many NAT implementations use only a single public address (typically, the address
    of the router), and tracks requests in the same manner as shown.
  prefs: []
  type: TYPE_NORMAL
- en: The primary mechanism that enables the use of a single public address is **Port
    Address Translation** (**PAT**), otherwise known as NAT overloading. To differentiate
    between outbound requests, PAT applies a unique port number to the private address
    of the requesting LAN node.
  prefs: []
  type: TYPE_NORMAL
- en: Collision domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two common problems inherent to Ethernet LANs are collisions and broadcast messages.
    Collisions occur when two (or more) nodes attempt to transmit on the network medium
    simultaneously, effectively destroying both messages.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast messages are a normal part of an Ethernet network's operations, but
    reducing the size of the network also reduces the impact these messages have on
    network performance.
  prefs: []
  type: TYPE_NORMAL
- en: Ethernet networks use a procedure called **Collision Sense Multiple Access**/**Collision
    Detection** (**CSMA**/**CD**) to detect when a collision has occurred on the network
    medium. CSMA/CD uses a back-off timer to stagger the retransmissions from the
    colliding nodes. On a wireless network, the procedure **CSMA**/**Collision Avoidance**
    (**CSMA**/**CA**) attempts to avoid collisions before they happen.
  prefs: []
  type: TYPE_NORMAL
- en: To regardless of whether the network medium is a cable or radio frequency waves,
    network nodes must share the common medium, often at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'A grouping of network nodes connected through a hub or repeater is a collision
    domain. As shown in the following diagram, network segments behind a network hub
    are collision domains and, in this case, three collision domains exist behind
    a network switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8b57eee-0eaa-4292-937c-4c92dcca03a3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Collision and broadcast domains on a LAN
  prefs: []
  type: TYPE_NORMAL
- en: In fact, all the nodes behind the switch are in one large collision domain.
    This would be especially true if these workstations were on a wireless network.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the other hand, a broadcast domain includes all the network nodes that are
    able to communicate with each other. In virtually all networks, a broadcast domain
    encompasses all of the collision domains, as illustrated in the preceding diagram.
  prefs: []
  type: TYPE_NORMAL
- en: On a computer network, broadcasting means essentially the same as it does in
    radio or television. A network node transmits a message, typically a request,
    to the entire network, meaning every active connected device.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, a broadcast message on a LAN results in each receiving node sending
    out its own broadcast messages. This is the reason why network administrators
    try to limit the overall size of broadcast domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two most common uses of broadcast messages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Startup**: When you boot or restart a computer, its operating system sends
    a broadcast message on the network requesting its IP address configuration. It
    sends the broadcast message because, at that point, it doesn''t have the address
    of the **Dynamic Host Configuration Protocol** (**DHCP**) server. If all is well,
    the DHCP server responds only to the requesting node with its configuration data.
    Any computers on a network that have a very specialized function or setup may
    not or should not use a DHCP configuration. In these cases, the node should be
    configured with static configuration settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address resolution**: The **Address Resolution Protocol** (**ARP**) and its
    mirror-image, the **Reverse Address Resolution Protocol** (**RARP**), use broadcast
    messages to ask network nodes which of them has a certain MAC address (more on
    this later), and to send back its IP address. The request could also be in reverse,
    with RARP asking for the MAC address that corresponds to a certain IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Broadcast messages carry a unique IP address, one reserved specifically for
    this purpose: `255.255.255.255`. When network devices see a message with this
    destination address, they know that it''s a broadcast message.'
  prefs: []
  type: TYPE_NORMAL
- en: Classless Interdomain Routing (CIDR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to express an IPv4 address that eliminates most of the need for
    an address mask is the CIDR address notation.
  prefs: []
  type: TYPE_NORMAL
- en: CIDR (pronounced variably as *cedar*, *cider*, or *kidder*, and also known as **supernetting**)
    denotes the number of bits in an IPv4 address that designate the network ID, without
    any consideration as to which address class it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a standard Class A address has the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, *n* denotes the network ID, and *h* denotes the host ID.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in the address `101.15.105.10`, the network ID is `101.0.0.0`. Its
    address mask is `255.0.0.0`. This same address expressed in CIDR notation is `101.15.105.10/8`,
    which indicates that the leftmost eight bits are the network ID.
  prefs: []
  type: TYPE_NORMAL
- en: CIDR provides greater flexibility for extending networks without requiring additional
    IPv4 addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Subnetting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **subnetwork** (**subnet**) is a logical segment of a larger network that
    provides a variety of benefits to the network, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Limiting broadcast messages**: Subnetting a network creates smaller broadcast
    and collision domains'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expanding a network''s size**: Subnetting facilitates the expansion of a
    network without purchasing additional IP addresses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Subnetting allows for the isolation of protected departments
    or functions, such as accounting or research'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subnetting is a logical addressing technique that creates smaller subnetworks
    using existing (in place) IPv4 addresses. The basic principle behind subnetting
    is the reassignment of one or more bits in the address mask, which in this case
    becomes a **subnet mask**, to provide for additional networks (subnetworks), as
    shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a41365d-2155-4b77-8659-98fdea06c84d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One or more bits borrowed from the host ID create a subnet ID in an IPv4 address
  prefs: []
  type: TYPE_NORMAL
- en: Subnets and hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we determine the number of subnets and the number of hosts available
    on each subnet. Typically, this part of the calculation can be a bit of trial
    and error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the departments of the **ServersRUs** company, and
    the number of workstations (hosts) required in each department:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Department** | **Number of hosts** |'
  prefs: []
  type: TYPE_TB
- en: '| Accounting | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Customer support | 18 |'
  prefs: []
  type: TYPE_TB
- en: '| IT | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Management | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| HR | 4 |'
  prefs: []
  type: TYPE_TB
- en: ServersRUs' subnet and host requirements
  prefs: []
  type: TYPE_NORMAL
- en: If we wish to set up a subnet for each department, we need to be able to address
    five subnets. In a general approach to subnets, each will have the same number
    of hosts, which in this case must be at least 18 hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, when determining how many bits to take from the host ID and apply
    to the subnet ID, that 2 raised to the power of the number of borrowed bits is
    the number of subnets that it creates. For example, ServersRUs needs five subnets,
    and 5 isn't a power of 2\. At the low end of the powers of 2, we have the values
    of 1 (2⁰), 2 (2¹), 4 (2²), and 8 (2³).
  prefs: []
  type: TYPE_NORMAL
- en: Of these, only 2^(3,) or 8, provides for the five subnets needed, with the remaining
    three subnets available if or when needed.
  prefs: []
  type: TYPE_NORMAL
- en: We have determined that three bits are to move from the host ID and to be used
    for the subnet ID. This leaves five bits for the host ID within each subnet. *Are
    five bits enough to provide each subnet with the number of hosts required?* The
    customer support department requires 18 hosts, which must be our target number.
    So, if we raise 2 to the power of 5 (number of bits), we are able to address 32
    hosts on each subnet.
  prefs: []
  type: TYPE_NORMAL
- en: There is a formula in subnetting that works for calculating the number of subnets
    available and the number of hosts available on a subnet: *2n-2* = addressable
    subnets or hosts. In this formula, *n* represents the number of bits borrowed
    (subnets) or remaining (hosts). We'll discuss the *-2* in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The IPv4 Class C subnet addressing is shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Bits borrowed** | **Subnets** | **Hosts/****subnets** | **Subnet mask**
    | **CIDR** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 | 254 | `255.255.255.0` | /24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2 | 126 | `255.255.255.128` | /25 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 4 | 62 | `255.255.255.192` | /26 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 8 | 30 | `255.255.255.224` | /27 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 16 | 14 | `255.255.255.240` | /28 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 32 | 6 | `255.255.255.248` | /29 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 64 | 2 | `255.255.255.252` | /30 |'
  prefs: []
  type: TYPE_TB
- en: IPv4 Class C subnet addressing
  prefs: []
  type: TYPE_NORMAL
- en: Subnet masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the preceding table, borrowing bits changes the values of the address
    mask/subnet mask. If we take zero bits, we have a standard Class C network with
    one network and 254 hosts. However, if we reassign four bits, we are able to address
    16 subnets with 14 usable hosts per subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we added four bits to the 24 bits already in a Class C address mask,
    we now have 28 (/28) bits in the network ID of our network. The following table
    shows how this impacts the value of the subnet mask:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Decimal value | `255.255.255.0` | Class C address mask |'
  prefs: []
  type: TYPE_TB
- en: '| Binary value | `11111111.11111111.11111111.00000000` | Class C address mask
    |'
  prefs: []
  type: TYPE_TB
- en: '| Borrowed bits | `.11100000` | 23 = 8 subnets |'
  prefs: []
  type: TYPE_TB
- en: '| New binary value | `11111111.11111111.11111111.11100000` |  |'
  prefs: []
  type: TYPE_TB
- en: '| New decimal value | `255.255.255.224` | 128+61+32 (27+26+25) |'
  prefs: []
  type: TYPE_TB
- en: Constructing a subnet mask
  prefs: []
  type: TYPE_NORMAL
- en: Network and broadcast addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On any network, the address of the entire network is always the first address
    of its assigned address range. For example, the IPv4 address `10.0.14.210` is
    the Class A address of a network host, and its network address, typically assigned
    to the gateway router, is `10.0.0.0`.
  prefs: []
  type: TYPE_NORMAL
- en: In the ServersRUs example, each of the subnets has an assigned address range.
    The first address in the range is its network address. The broadcast address of
    a network or subnet is the last address in its address range.
  prefs: []
  type: TYPE_NORMAL
- en: In the `10.0.14.210` example, the broadcast address is `10.255.255.255`, absolutely
    the last address in the `10.0.0.0` address range of one subnet with 16,777,214
    hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the full range of addresses in the ServersRUs network:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Subnet network ID** | **Subnet hosts addresses** | **Subnet broadcast ID**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.0` | `192.168.32.1` to `192.168.32.30` | `192.168.32.31` |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.32` | `192.168.32.33` to `192.168.32.62` | `192.168.32.63` |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.64` | `192.168.32.65` to `192.168.32.94` | `192.168.32.95` |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.96` | `192.168.32.97` to `192.168.32.126` | `192.168.32.127`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.128` | `192.168.32.129` to `192.168.32.158` | `192.168.32.159`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.160` | `192.168.32.161` to `192.168.32.190` | `192.168.32.191`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.192` | `192.168.32.193` to `192.168.32.222` | `192.168.32.223`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `192.168.32.224` | `192.168.32.225` to `192.168.32.254` | `192.168.32.255`
    |'
  prefs: []
  type: TYPE_TB
- en: Subnet addressing for the ServerRUs network
  prefs: []
  type: TYPE_NORMAL
- en: Note that the first subnet's network ID is the first address of the whole range
    (`192.168.32.0` – `192.168.32.255`). The network ID for the other seven subnets
    is the first address in its range, and the broadcast address is the last address
    in its range.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the subnets shown in the preceding table has 30 addressable hosts, a
    network ID, and a broadcast address. The subnet mask (`255.255.255.224`) is the
    same for all subnets.
  prefs: []
  type: TYPE_NORMAL
- en: Internet Protocol version 6 (IPv6)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv6, first introduced in 1998, has slowly replaced or supplemented IPv4 addressing,
    particularly gaining momentum over the past few years. The reason for the development
    of IPv6 was to forestall the rapid depletion of IPv4 addresses.
  prefs: []
  type: TYPE_NORMAL
- en: The IPv6 structure extended the number of available network and host addresses
    to what should be a sufficient number for the foreseeable future. The IPv6 address
    space provides for 2,128 addresses, which is around 340,282,366,920,938,463,463,374,607,431,768,211,456
    (340+ undecillion) individual addresses.
  prefs: []
  type: TYPE_NORMAL
- en: At the present time, only about 20 percent of these addresses are available.
    Don't worry, though, we won't be running out any time soon, because the current
    pool has enough addresses for everyone on the planet to be issued more than 3,000
    addresses each.
  prefs: []
  type: TYPE_NORMAL
- en: The IPv6 address structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPv6 increases the IP address length to 128 bits, divided into eight 16-bit
    blocks. Each 16-bit block represents four hexadecimal values, called **hextets**.
    The following table shows the hexadecimal values represented in four bits:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Hexadecimal value** | **Binary value** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0000 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0001 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0010 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 0011 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0100 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 0101 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 0110 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 0111 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 1001 |'
  prefs: []
  type: TYPE_TB
- en: '| A | 1010 |'
  prefs: []
  type: TYPE_TB
- en: '| B | 1011 |'
  prefs: []
  type: TYPE_TB
- en: '| C | 1100 |'
  prefs: []
  type: TYPE_TB
- en: '| D | 1101 |'
  prefs: []
  type: TYPE_TB
- en: '| E | 1110 |'
  prefs: []
  type: TYPE_TB
- en: '| F | 1111 |'
  prefs: []
  type: TYPE_TB
- en: Hexadecimal and binary value equivalents
  prefs: []
  type: TYPE_NORMAL
- en: The address `FE80:0000:0000:0000:0202:FFFA:C4DD:7435` is an example of the IPv6
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, whereas IPv4 uses dots/periods to separate its sections, IPv6 uses
    colons (`:`).
  prefs: []
  type: TYPE_NORMAL
- en: The first three bits of an IPv6 address are set to 0012, which results in all
    public IPv6 addresses having just four hexadecimal values in the first hextet
    and beginning with either a 2 or a 3\. For example, `1234:5678:98A4::ABCD` is
    not a valid public IPv6 address, because it begins with a `1`, and `234:5678:98A4::ABCD`
    is not a valid address, because its first hextet has only three digits.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 addresses range from `2000::` to `3FFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF`,
    reducing the size of the pool to `2125`.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first hextet of an IPv6 address may contain certain values to indicate
    a designated type of transaction or message. The reserved prefixes commonly used
    in IPv6 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2002::/16`—6to4 routing. Provides for routing an IPv6 message over IPv4 tunneling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fe80::/10`—link-local address. Primarily for configuration and discovery within
    a local network; routers do not forward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ff00::/8`—multicast address. See the following table for some of the reserved
    multicast addresses:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Address** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `ff02::1` | All nodes on the local network segment |'
  prefs: []
  type: TYPE_TB
- en: '| `ff02::2` | All routers on the local network segment |'
  prefs: []
  type: TYPE_TB
- en: '| `ff02::5` | OSPFv3 All SPF routers |'
  prefs: []
  type: TYPE_TB
- en: '| `ff02::9` | RIP routers |'
  prefs: []
  type: TYPE_TB
- en: '| `ff05::1:3` | All DHCP servers on the local network site |'
  prefs: []
  type: TYPE_TB
- en: '| `ff0x::fb` | Multicast DNS |'
  prefs: []
  type: TYPE_TB
- en: '| `ff0x::114` | Used for experiments |'
  prefs: []
  type: TYPE_TB
- en: A sample of the reserved prefixes for IPv6 multicast messages
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 address compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv6 allows for the compression of sections with only zeros, replacing two or
    more contiguous hextets with a double colon (`::`). For example, the preceding
    address becomes `FE80::0202:FFFA:C4DD:7435` in compressed form.
  prefs: []
  type: TYPE_NORMAL
- en: However, an IPv6 address may contain only one double colon. This means that,
    if an address has two or more hextet groups of all zeros, compression can only
    apply to one of them. For example, the address `FE80:0000:0000:0000:0202:0000:0000:7435`
    compresses to `FE80::0202:0000:0000:7435`.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 leading zero compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A hextet with one or more zeros in its most significant positions (leftmost)
    is compressible, removing the zeros. For example, a hextet of 00A7 becomes just
    A7, or a hextet of 0000 compresses to 0\. The address `FE80::0202:0000:0000:7435`
    further compresses to `FE80::202:0:0:7435`, which shows the application of both
    compression methods.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 network ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because IPv6 doesn't define address classes, a fixed segment of the address
    represents the network identifier. By standard, the first 64 bits of an IPv6 address
    identify the network address of the source or destination of a message, but this
    can vary.
  prefs: []
  type: TYPE_NORMAL
- en: A network of a single host has a network ID of 128 bits. IPv6 uses the CIDR
    notation to indicate the network ID in an address. An address with a /64 has the
    first 64 bits as its network address.
  prefs: []
  type: TYPE_NORMAL
- en: 'IPv6 also reserves certain bit-lengths for special purposes. The following
    table lists just a few of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Prefix** | **CIDR notation** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| `::` | /96 | An address compatible with IPv4 |'
  prefs: []
  type: TYPE_TB
- en: '| `::` | /128 | An unspecified address used for internal addressing by software
    |'
  prefs: []
  type: TYPE_TB
- en: '| `::1` | /128 | Loopback address, referring to the localhost equivalent to
    the IPv4 localhost `127.0.0.1` |'
  prefs: []
  type: TYPE_TB
- en: '| `fc00::` | /7 | A **Unique Local Address** (**ULA**), routed only within
    coordinated sites |'
  prefs: []
  type: TYPE_TB
- en: '| `fe80::` | /10 | A link-local address, valid on a local physical link only
    |'
  prefs: []
  type: TYPE_TB
- en: Reserved IPv6 addresses and CIDR designations
  prefs: []
  type: TYPE_NORMAL
- en: Address categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPv6 addresses generally fall into one of three address categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unicast**: An IPv6 unicast address identifies a single destination, and packets
    with that unicast address go to that address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multicast**: An IPv6 multicast address identifies a group of nodes perhaps
    scattered across several networks. Each of the nodes included in the multicast
    address receives the transmission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anycast**: An IPv6 packet with an anycast address goes to only one of an
    identified set of nodes. The receiving node is typically the closest, in terms
    of distance and availability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e800f0c6-333f-41fe-9e9f-8ce9ba786121.jpg)'
  prefs: []
  type: TYPE_IMG
- en: IPv6 address categories
  prefs: []
  type: TYPE_NORMAL
- en: MAC addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IP addresses will work for the addressing within a LAN, but they are really
    not necessary for internal communications. Ethernet networks, for example, use
    an addressing scheme that operates on Layer 2 of the OSI model—the MAC address,
    otherwise known as the **Data Link Control** (**DLC**) address or physical address.
    While this number is more of an identification number, its universal uniqueness
    makes it ideal for addressing across a local network.
  prefs: []
  type: TYPE_NORMAL
- en: Every manufacturer of network or communication devices, such as NICs, switches,
    modems, routers, and so on, permanently embeds a unique identifying number into
    each device they produce. The manufacturer embeds this number into a ROM or firmware,
    so that it's permanently a part of the device.
  prefs: []
  type: TYPE_NORMAL
- en: A MAC/DLC address consists of 48 bits whose value in hexadecimal identifies
    both the manufacturer and the device. The first 24 bits of the MAC/DLC number
    identify the manufacturer with an **Organizationally Unique Identifier** (**OUI**)
    code, assigned to the producer by the **Institute for Electrical and Electronics
    Engineers** (**IEEE**).
  prefs: []
  type: TYPE_NORMAL
- en: The remaining 24 bits contain what is in effect a serial number unique to the
    OUI. The combination of the OUI and the serial number creates an identifying number
    that is unique.
  prefs: []
  type: TYPE_NORMAL
- en: Here's an example—a network adapter in a notebook computer has the MAC/DLC address
    `5C-E0-C5-B6-B3-9A`. The first three sections of this number (`5C-E0-C5`) indicate
    that its manufacturer is the Intel Corporation (Malaysia). The conversion of the
    serial number from hexadecimal to decimal gives the value 11973530, whatever that
    may mean. Regardless, this unique combination provides an unduplicated value that
    Layer 2 technologies use as an address.
  prefs: []
  type: TYPE_NORMAL
- en: Address resolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have one type of address, but need another type, you use an address
    resolution protocol or service. An example might be when you have a person's name
    and address, but you need his or her telephone number. In this case, the address
    resolution method is to look up the name and address in a telephone directory
    to find the number you need.
  prefs: []
  type: TYPE_NORMAL
- en: On a computer network, there are device or configuration addresses that are
    appropriate for some purposes, but not for others. On an Ethernet network, the
    MAC/DLC address of a network adapter is sufficient for communications within the
    network. However, a message intended for a destination beyond the local network
    requires another level of address.
  prefs: []
  type: TYPE_NORMAL
- en: Using an address from one OSI layer to learn the corresponding address on another
    OSI layer is called address resolution. Commonly, this means resolving a MAC address
    to an IP address (or vice versa), or resolving a web domain name to an IP address.
  prefs: []
  type: TYPE_NORMAL
- en: The primary protocol and network service performing address resolution are,
    on local networks, the **Address Resolution Protocol** (**ARP**), and, on public
    networks, the **Domain Name System** (**DNS**).
  prefs: []
  type: TYPE_NORMAL
- en: ARP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARP converts an IPv4 address (logical address) to its corresponding MAC/DLC
    address (physical address). This enables the forwarding of messages arriving from
    outside a local network to their destination. ARP is an OSI Layer 2 protocol which
    is typically part of the device driver for a network adapter.
  prefs: []
  type: TYPE_NORMAL
- en: A message packet that requires routing cannot use a MAC address for its source
    address, and must use an IP address. ARP performs this lookup, and provides the
    corresponding IP address.
  prefs: []
  type: TYPE_NORMAL
- en: At one time, a reverse action, **Reverse ARP** (**RARP**), resolved IP to MAC
    addresses. However, this service is now part of **Dynamic Host Configuration Protocol**
    (**DHCP**).
  prefs: []
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet would be a lot more complicated to use if all sites had only IP
    addresses. It would be difficult to remember all of the numerical IP addresses,
    especially IPv6 addresses. To resolve this potential problem, we use domain names
    and top-level domain designators in combination, such as `packt.com`, where `packt`
    is the domain name and `.com` is the **top-level domain** (**TLD**) designation.
  prefs: []
  type: TYPE_NORMAL
- en: DNS search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A domain name identifies a specific authority or autonomous realm on the web.
    Domain names are unique and issued to only a single entity, although some entities
    try to get close in spelling or sound to the domain names of others. Examples
    of familiar domain names are `google`, `amazon`, `euronews`, and `baidu`. The
    most popular TLDs include `.com`, `.net`, `.info`, `.gov`, and `.edu`.
  prefs: []
  type: TYPE_NORMAL
- en: Outside the United States, many domain names also include a country code as
    the TLD, such as `.uk`, `.ca`, `.cn`, or `.de`.
  prefs: []
  type: TYPE_NORMAL
- en: 'DNS search generally works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A user enters the **fully-qualified domain name** (**FQDN**) of a website into
    the location bar of a browser, for example, `www.packt.com`, in which `www` is
    the hostname assigned to the web server for `packt.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser detects that it must resolve the FQDN to an IP address, and sends
    a query to its designated DNS server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DNS server searches in its `.com` entries for `packt`, and returns the corresponding
    IP address (`52.216.233.42`) to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser then issues an HTTP request to IP address `52.216.233.42` for the
    page requested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Domain suffix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A default domain suffix search list allows for a one or more unqualified single
    name or identifying words to initiate a DNS search. This list contains the domains
    that should be a part of a DNS search for an IP address.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if `generic.mysite.info` is the FQDN for resolution, and the `mysite.info`
    search domain includes other hostnames such as normal, usual, or occasional, a
    domain search using a search domain suffix is easier for the user. By including
    `mysite.info` in a domain search list, the user only needs to enter the hostname.
    Likewise, just entering generic in the address bar causes the browser to append
    the search domain/domain suffix to the hostname before sending a request to a
    DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: The domain suffix search list may contain several search domains, each of which
    generates a separate request to a DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: The Windows Internet Name Service (WINS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On Windows systems, both DNS and WINS can resolve device and network names.
    However, these two services are quite different. WINS is a Microsoft utility that
    runs only on Windows systems, whereas DNS is system- and platform-independent.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, there are several other differences, as listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **DNS** | **WINS** |'
  prefs: []
  type: TYPE_TB
- en: '| IP addressing | Static IP addresses | Dynamic IP addresses |'
  prefs: []
  type: TYPE_TB
- en: '| Name resolution | Host names to IP addresses | NetBIOS names to IP addresses
    |'
  prefs: []
  type: TYPE_TB
- en: '| Database modifications | Copies entire database | Incremental modification
    |'
  prefs: []
  type: TYPE_TB
- en: '| TCP/IP application services | Support all services | No support for TCP/IP
    services |'
  prefs: []
  type: TYPE_TB
- en: DNS versus WINS basic features
  prefs: []
  type: TYPE_NORMAL
- en: In later releases of the Windows operating systems, improvements to WINS has
    led to WINS over TCP/IP, which makes it more compatible with DNS (and DNS with
    it). Legacy WINS is still in use, but is beginning to disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Ports and protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another type of network addressing uses transport layer ports to designate
    the endpoint to which a particular network packet is to be sent. The term *port*
    can refer to either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A hardware connection point, such as an RJ-45 connection jack on a switch or
    router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A software-defined construct that, along with an IP address, establishes a *socket*,
    or the total address of the software that is to process the incoming packet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the second definition that we are using here.
  prefs: []
  type: TYPE_NORMAL
- en: Data is transmitted on a network in **protocol data units** (**PDUs**). On different
    levels of the OSI model, PDUs are given different names—for example, a PDU on
    the Network Layer is known as a **packet**, and on the Data Link Layer it's called
    a **frame**.
  prefs: []
  type: TYPE_NORMAL
- en: On the Transport Layer, a PDU is known by two names—segments (TCP protocol)
    and datagrams (UDP protocol). The point of this is that ports are associated with
    TCP and UDP, and the segments and datagrams of each.
  prefs: []
  type: TYPE_NORMAL
- en: Well-known ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The port numbers available for assignment by the IANA range from 0 to 65535\.
    Of these, ports `0` to `1023` are well-known ports. A **well-known port** is a
    service or protocol that resides on a private network or the public internet,
    and is a common server-based application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following table, each protocol/port combination has a numeric
    port associated with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protocol** | **TCP port number** | **UDP port number** |'
  prefs: []
  type: TYPE_TB
- en: '| **Domain Name System** (**DNS**) | `53` | `53` |'
  prefs: []
  type: TYPE_TB
- en: '| **Dynamic Host Configuration Protocol** (**DHCP**) |  | `67` and `68` |'
  prefs: []
  type: TYPE_TB
- en: '| **File Transfer Protocol** (**FTP**) |  | `20` and `21` |'
  prefs: []
  type: TYPE_TB
- en: '| **FTP over TLS/SSL** (**FTPS**) | `989`/`990` | `989`/`990` |'
  prefs: []
  type: TYPE_TB
- en: '| **HTTP over TLS/SSL** (**HTTPS**) | `443` |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Hypertext Transfer Protocol** (**HTTP**) | `80` |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Internet Message Access Protocol v4** (**IMAP4**) | `143` | `143` |'
  prefs: []
  type: TYPE_TB
- en: '| **Lightweight Data Access Protocol** (**LDAP**) | `389` | `389` |'
  prefs: []
  type: TYPE_TB
- en: '| **Network Time Protocol** (**NTP**) |  | `123` |'
  prefs: []
  type: TYPE_TB
- en: '| **Post Office Protocol 3** (**POP3**) | `110` |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Secure FTP** (**SFTP**) |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Secure Shell** (**SSH**) / **Secure Copy** (**SCP**) / **Secure FTP** (**SFTP**)
    | `22` | `22` |'
  prefs: []
  type: TYPE_TB
- en: '| **Simple Mail Transport Protocol** (**SMTP**) | `25` | `25` |'
  prefs: []
  type: TYPE_TB
- en: '| **Simple Network Management Protocol** (**SNMP**) | `161` | `161` |'
  prefs: []
  type: TYPE_TB
- en: '| Telnet | `23` | `23` |'
  prefs: []
  type: TYPE_TB
- en: Well-known TCP/UDP ports
  prefs: []
  type: TYPE_NORMAL
- en: The port number added to the end of an address designates the processing software,
    protocol, or service. For example, addressing a segment to `10.0.0.20:80` indicates
    that it's an HTTP message. The combination of the IP address and the port number
    creates a socket.
  prefs: []
  type: TYPE_NORMAL
- en: Registered ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next set of port numbers, ranging from 1024 to 49151, are registered ports,
    which are port numbers that individuals and companies can register for association
    with a particular software package or application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may encounter two registered ports on the Server+ exam, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protocol** | **TCP port number** | **UDP port number** |'
  prefs: []
  type: TYPE_TB
- en: '| LDAP—AD | `3268` | `3268` |'
  prefs: []
  type: TYPE_TB
- en: '| **Remote Desktop Protocol** (**RDP**) | `3389` | `3389` |'
  prefs: []
  type: TYPE_TB
- en: Registered TCP/UDP for Server+ Exam
  prefs: []
  type: TYPE_NORMAL
- en: The last group of port numbers, those from 49152 to 65535, are dynamic (or private)
    ports. The IANA doesn't register these port numbers; they are available for general
    use by the public, primarily for internal purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the fact that an IPv4 address is 32 bits divided
    into four octets in a dot-decimal format. An octet may hold values from 0 to 255.
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed how IPv4 addressing has address classes A, B, C, D, and E. Private
    addresses are for LANs. Each IPv4 address class has a standard subnet mask to
    identify its network ID: class A—eight bits; class B—16 bits, and class C—24 bits. NAT
    devices mask private addresses with public addresses, whereas PAT applies a port
    number to a private address.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we covered how collisions occur when nodes attempt to transmit simultaneously.
    The impact of broadcast messages reduces on smaller networks. CSMA/CD detects
    collisions, and staggers the retransmissions of colliding nodes. Wireless networks
    use CSMA/CA to avoid collisions. Common broadcasts are startup and address resolution.
    CIDR denotes the number of bits in the network ID of an IPv4 address.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at subnets, which are logical segments of a larger network. Subnetting
    alters the subnet mask to provide additional subnet IDs. The first address in
    the range of addresses of a subnet is its network address. The broadcast address
    of a subnet is the last address in its address range.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we discussed IPv6\. This increases the address length to 128 bits, divided
    into eight 16-bit blocks called hextets. The first 64 bits identify the network
    ID. IPv6 addresses can be unicast, multicast, or anycast. Ethernet networks use
    MAC/DLC addressing to identify the manufacturer and device. The first 24 bits
    is the OUI; the remaining 24 bits is a serial number.
  prefs: []
  type: TYPE_NORMAL
- en: We went on to look at the protocol and network services that perform address
    resolution, namely ARP, WINS, and DNS. ARP converts IP addresses into a corresponding
    MAC address, WINS converts NetBIOS names to MAC addresses, and DNS converts FQDNs
    to IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered ports—software-defined identifiers that combine with an
    IP address to identify a socket, which designates the software to process the
    incoming packet. Port numbers range from `0` to `65535`. Ports `0` to `1023` are
    well-known ports.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following best describes an IPv4 address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classless
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Five classes of 32-bits in four octets
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 128-bits in eight sections of 16 bits
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The network identifier has a fixed size
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which IPv4 address class uses 16 bits to identify the network portion of an
    address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Class A
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class B
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class C
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Class D
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv4 is classless
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which network service provides an alias public address to internal network nodes
    with private LAN addresses?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DNS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: WINS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NAT
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the subnet shown in the following diagram, the red dotted line encompasses
    which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Broadcast domain
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv4
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Collision domain
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPv6
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fb8e4c37-bde4-4013-b972-221d0f635258.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wire-based Ethernet networks use which technology to manage message collisions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CSMA/CA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP/IP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSMA/CD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NAT
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is likely to be the broadcast address for a subnet?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10.0.0.0`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`192.168.32.10`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`201.255.255.255`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`168.92.15.0`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is an example of CIDR notation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`2020::15AD:0:25FF`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`201.110.25.16/24`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`10.0.0.0`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`198.168.32.10:80`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the significance of a double colon inserted in an IPv6 address?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections not used for routing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections containing all zeros
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It masks one or more sections containing FFFF16
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It indicates a TCP/UDP port number
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not an IPv6 address category?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multicast
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unicast
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Anycast
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Broadcast
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the port number range for well-known TCP/UDP ports?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0` to `65535`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1024` to `49151`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`0` to `1023`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`49152` to `65535`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
