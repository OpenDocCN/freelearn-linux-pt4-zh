["```\nroot@beaglebone:~# echo BB-I2C1 > /sys/devices/bone_capemgr.9/slots\n\n```", "```\npart_number 'BB-I2C1', version 'N/A'\nslot #7: generic override\nbone: Using override eeprom data at slot 7\nslot #7: 'Override Board Name,00A0,Override Manuf,BB-I2C1'\nslot #7: Requesting part number/version based 'BB-I2C1-00A0.dtbo\nslot #7: Requesting firmware 'BB-I2C1-00A0.dtbo' for board-name 'Override Board Name', version '00A0'\nslot #7: dtbo 'BB-I2C1-00A0.dtbo' loaded; converting to live tree\nslot #7: #2 overlays\nomap_i2c 4802a000.i2c: bus 2 rev0.11 at 100 kHz\nomap_i2c 4802a000.i2c: unable to select pin group\nslot #7: Applied #2 overlays.\n\n```", "```\nroot@beaglebone:~# ls -l /dev/i2c-2\ncrw-rw---T 1 root i2c 89, 2 Apr 23 20:23 /dev/i2c-2\n\n```", "```\nroot@arm:~# i2cdetect -y -r 2\n 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: UU -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- -- \n\n```", "```\nroot@beaglebone:~# i2cget -y 2 0x40 0xe7 0x02\n\n```", "```\nroot@beaglebone:~# i2cget -y 2 0x40 0xe7\nError: Read failed\n\n```", "```\nroot@arm:~# i2cdetect -y -r 2\n 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- 77 \n\n```", "```\n$ git clone git://github.com/RobertCNelson/bb-kernel.git\n\n```", "```\n$ git checkout am33x-v3.13\n\n```", "```\n$ cp system.sh.sample system.sh\n\n```", "```\nCC=/usr/bin/arm-linux-gnueabihf-\nMMC=/dev/sdd\n```", "```\n$ git am --whitespace=nowarn  0001-Add-support-for-I2C1-bus-and-the-connected-devices.patch\n\n```", "```\n$ git log -1\ncommit 50949bd3a5c53d915dfdce8f790e3cfdd9ae702a\nAuthor:     Rodolfo Giometti <giometti@hce-engineering.com>\nAuthorDate: Wed Jun 24 21:58:50 2015 +0200\nCommit:     Rodolfo Giometti <giometti@hce-engineering.com>\nCommitDate: Wed Jun 24 22:06:06 2015 +0200\n\n Add support for I2C1 bus and the connected devices\n\n Signed-off-by: Rodolfo Giometti <giometti@hce-engineering.com>\n\n```", "```\n$ ls patches/bbb-habp/\n0001-iio-Add-t5403-barometric-pressure-sensor-driver.patch\n0100-arm-am335x-bone-common.dtsi-enable-bus-I2C1-on-pins-.patch\n\n```", "```\ndiff --git a/arch/arm/boot/dts/am335x-bone-common.dtsi b/arch/arm/boot/dts/am335x-bone-common.dtsi\nindex 5270d18..ba891ce 100644\n--- a/arch/arm/boot/dts/am335x-bone-common.dtsi\n+++ b/arch/arm/boot/dts/am335x-bone-common.dtsi\n@@ -84,6 +84,13 @@\n >;\n };\n\n+   i2c1_pins: pinmux_i2c1_pins {\n+      pinctrl-single,pins = <\n+         0x158 (PIN_INPUT_PULLUP | MUX_MODE2)    /* i2c1_sda.i2c1_sda */\n+         0x15c (PIN_INPUT_PULLUP | MUX_MODE2)    /* i2c1_scl.i2c1_scl */\n+      >;\n+   };\n+\n i2c2_pins: pinmux_i2c2_pins {\n pinctrl-single,pins = <\n 0x178 0x73 /* (SLEWCTRL_SLOW | PIN_INPUT_PULLUP | MUX_MODE3) uart1_ctsn.i2c2_sda */\n@@ -295,6 +302,24 @@\n };\n };\n\n+&i2c1 {\n+   pinctrl-names = \"default\";\n+   pinctrl-0 = <&i2c1_pins>;\n+\n+   status = \"okay\";\n+   clock-frequency = <400000>;\n+\n+   htu21: htu21@40 {\n+      compatible = \"htu21\";\n+      reg = <0x40>;\n+   };\n+\n+   t5403: t5403@77 {\n+      compatible = \"t5403\";\n+      reg = <0x77>;\n+   };\n+};\n\n```", "```\n$ git whatchanged -p -1 patch.sh \n...\ndiff --git a/patch.sh b/patch.sh\nindex 83787f7..ed3a886 100644\n--- a/patch.sh\n+++ b/patch.sh\n@@ -191,6 +191,12 @@ saucy () {\n ${git} \"${DIR}/patches/saucy/0003-saucy-disable-stack-protector.patch\"\n }\n\n+bbb_habp () {\n+       echo \"dir: bbb-habp\"\n+       ${git} \"${DIR}/patches/bbb-habp/0001-iio-Add-t5403-barometric-pressure-s\n+       ${git} \"${DIR}/patches/bbb-habp/0100-arm-am335x-bone-common.dtsi-enable-\n+}\n+\n ###\n #arm\n deassert_hard_reset\n@@ -211,4 +217,6 @@ boards\n\n saucy\n\n+bbb_habp\n+\n echo \"patch.sh ran successful\"\n\n```", "```\n$ git whatchanged -p -1 patches/defconfig\ncommit b9b954d37ed2722f7e85e9192d697bb79544ca78\nAuthor:     Rodolfo Giometti <giometti@linux.it>\nAuthorDate: Wed Jun 24 21:58:50 2015 +0200\nCommit:     Rodolfo Giometti <giometti@linux.it>\nCommitDate: Wed Jun 24 22:31:32 2015 +0200\n\n Add support for I2C1 bus and the connected devices\n\n Signed-off-by: Rodolfo Giometti <giometti@hce-engineering.com>\n\ndiff --git a/patches/defconfig b/patches/defconfig\nindex 7be0172..464301d 100644\n--- a/patches/defconfig\n+++ b/patches/defconfig\n@@ -4529,6 +4529,7 @@ CONFIG_IIO_SYSFS_TRIGGER=m\n CONFIG_IIO_ST_PRESS=m\n CONFIG_IIO_ST_PRESS_I2C=m\n CONFIG_IIO_ST_PRESS_SPI=m\n+CONFIG_T5403=m\n\n #\n # Temperature sensors\n\n```", "```\n$ ./build_kernel.sh\n\n```", "```\n-----------------------------\nScript Complete\neewiki.net: [user@localhost:~$ export kernel_version=3.13.10-bone12]\n-----------------------------\n\n```", "```\n$ ./build_kernel.sh\n+ Detected build host [Ubuntu 14.04.3 LTS]\n+ host: [x86_64]\n+ git HEAD commit: [b00737d02a5b3567169a6c87311fec76a694fea6]\nDebian/Ubuntu/Mint: missing dependencies, please install:\n-----------------------------\nsudo apt-get update\nsudo apt-get install device-tree-compiler lzma lzop u-boot-tools libncurses5:i386 libstdc++6:i386\n-----------------------------\n* Failed dependency check\n\n```", "```\n$ ./tools/install_kernel.sh\n\n```", "```\nI see...\nfdisk -l:\nDisk /dev/sda: 500.1 GB, 500107862016 bytes\n...\nsdd       8:48   1   3.7G  0 disk\n|-sdd1    8:49   1    12M  0 part  /media/giometti/BOOT\n`-sdd2    8:50   1   3.7G  0 part  /media/giometti/rootfs\n-----------------------------\nAre you 100% sure, on selecting [/dev/sdd] (y/n)?\n\n```", "```\nThis script has finished...\nFor verification, always test this media with your end device...\n\n```", "```\n# uname -a\nLinux arm 3.13.10-bone9 #1 SMP Fri Nov 7 23:25:59 CET 2014 armv7l GNU/ Linux\n\n```", "```\nroot@arm:~# lsmod | egrep '(t5403|htu21)'\nt5403                   3072  0\nhtu21                   2385  0\nindustrialio           46516  3 t5403,ti_am335x_adc,kfifo_buf\n\n```", "```\nroot@arm:~# cat /sys/bus/iio/devices/iio\\:device1/in_pressure_input\n101.926000\n\n```", "```\nroot@arm:~# cat /sys/class/hwmon/hwmon0/device/humidity1_input\n42988\nroot@arm:~# cat /sys/class/hwmon/hwmon0/device/temp1_input\n27882\n\n```", "```\nroot@arm:~# svn checkout http://wfrog.googlecode.com/svn/trunk/ wfrog-read-only\n\n```", "```\nroot@arm:~# aptitude install subversion\n\n```", "```\nroot@arm:~# cd wfrog-read-only/\nroot@arm:~/wfrog-read-only# ./debian/rules binary\n\n```", "```\nroot@arm:~# aptitude install debhelper\n\n```", "```\ndpkg-deb: building package `wfrog' in `../wfrog_0.8.2-1_all.deb'.\n\n```", "```\nroot@arm:~/wfrog-read-only# gdebi ../wfrog_0.8.2-1_all.deb\nReading package lists... Done\nBuilding dependency tree \nReading state information... Done\nBuilding data structures... Done\nBuilding data structures... Done\n\nRequires the installation of the following packages:\nlibxslt1.1  libyaml-0-2  python-cheetah  python-lxml  python-pygooglechart  python-serial  python-support  python-usb  python-yaml  python2.6  python2.6-minimal\nWeb-based customizable weather station software\n wfrog is a software for logging weather station data and statistics,\n viewing them graphically on the web and sending them to a remote FTP site.\n The layout and behaviour is fully customizable through an advanced configuration system.\n It is written in python with an extensible architecture allowing new station drivers to be written very easily.\n wfrog supports many weather stations and is compliant with the WESTEP protocol.\n Supported stations:\n * Ambient Weather WS1080\n * Davis VantagePro, VantagePro2\n * Elecsa AstroTouch 6975\n * Fine Offset Electronics WH1080, WH1081, WH1090, WH1091, WH2080, WH2081\n * Freetec PX1117\n * LaCrosse 2300 series\n * Oregon Scientific WMR100N, WMR200, WMRS200, WMR928X\n * PCE FWS20\n * Scientific Sales Pro Touch Screen Weather Station\n * Topcom National Geographic 265NE\n * Watson W8681\nDo you want to install the software package? [y/N]:\n...\nSelecting previously unselected package wfrog.\n(Reading database ... 40720 files and directories currently installed.)\nUnpacking wfrog (from ../wfrog_0.8.2-1_all.deb) ...\nSetting up wfrog (0.8.2-1) â€¦\n\n```", "```\nroot@arm:~# aptitude install gdebi\n\n```", "```\nroot@arm:~# wfrog -S\n\n```", "```\nTraceback (most recent call last):\n File \"/usr/bin/wfrog\", line 132, in <module>\n settings = wflogger.setup.SetupClient().setup_settings(SETTINGS_DEF, settings, settings_file)\n File \"/usr/lib/wfrog/wflogger/setup.py\", line 40, in setup_settings\n if source == None:\nUnboundLocalError: local variable 'source' referenced before assignment\n\n```", "```\nroot@arm:~/wfrog-read-only# svn diff\nIndex: wflogger/setup.py\n===================================================================\n--- wflogger/setup.py   (revision 973)\n+++ wflogger/setup.py   (working copy)\n@@ -35,6 +35,7 @@\n self.logger.debug('Current settings file: '+str(source_file))\n self.logger.debug('New settings file:'+target_file)\n defs = yaml.load( file(settings_def_file, 'r') )\n+        source = None\n if source_file is not None:\n source = yaml.load( file(source_file, 'r') )\n if source == None:\n\n```", "```\nPlease enter the driver for your station model:\n 1) random-simulator - Station Simulator\n 2) vantagepro2 - Davis VantagePro\n 3) wh1080 - Fine Offset WH1080 and compatibles\n 4) wh3080 - Fine Offset WH3080 and compatibles\n 5) wmr200 - Oregon Scientific WMR200\n 6) wmr928nx - Oregon Scientific WMR928NX\n 7) wmrs200 - Oregon Scientific WMRS200\n 8) ws2300 - LaCrosse WS2300\n 9) ws28xx - LaCrosse WS28xx\n> 1\n\n```", "```\nroot@beaglebone:~# /etc/init.d/wflogger start\nroot@beaglebone:~# /etc/init.d/wfrender start\n\n```", "```\nimport time\nimport logging\nfrom wfcommon import units\n\nclass BBBhabpStation(object):\n\n    '''\n    Station driver for BeagleBone Black Home Automation Blueprints.\n\n    [Properties]\n\n    period [numeric] (optional):\n        Polling interval in seconds. Defaults to 60\\.    \n    '''\n\n    period=60\n\n    logger = logging.getLogger('station.bbb_habp')\n\n    name = 'BeagleBone Home Automation Blueprints weather station'\n```", "```\n   def get_press(self):\n    f = open(\"/sys/bus/iio/devices/iio:device1/in_pressure_input\", \"r\")\n    v = f.read()\n    f.close()\n\n        return float(v) * 10.0\n\n   def get_temp(self):\n    f = open(\"/sys/class/hwmon/hwmon0/device/temp1_input\", \"r\")\n    v = f.read()\n    f.close()\n\n        return int(v) / 1000.0\n\n   def get_hum(self):\n    f = open(\"/sys/class/hwmon/hwmon0/device/humidity1_input\", \"r\")\n    v = f.read()\n    f.close()\n\n        return int(v) / 1000.0\n```", "```\n    def run(self, generate_event, send_event, context={}):\n        while True:\n            try:\n                e = generate_event('press')\n                e.value = self.get_press()\n                send_event(e)\n                self.logger.debug(\"press=%fhPa\" % e.value)\n\n            except Exception, e:\n                self.logger.error(e)\n\n            try:\n                e = generate_event('temp')\n                e.sensor = 0\n                e.value = self.get_temp()\n                send_event(e)\n                self.logger.debug(\"temp=%fC\" % e.value)\n\n            except Exception, e:\n                self.logger.error(e)\n\n            try:\n                e = generate_event('hum')\n                e.sensor = 0\n                e.value = self.get_hum()\n                send_event(e)\n                self.logger.debug(\"hum=%f%%RH\" % e.value)\n\n            except Exception, e:\n                self.logger.error(e)\n\n            try:\n                e = generate_event('temp')\n                e.sensor = 1\n                e.value = self.get_temp()\n                send_event(e)\n                self.logger.debug(\"temp=%fC\" % e.value)\n\n            except Exception, e:\n                self.logger.error(e)\n\n            try:\n                e = generate_event('hum')\n                e.sensor = 1\n                e.value = self.get_hum()\n                send_event(e)\n                self.logger.debug(\"hum=%f%%RH\" % e.value)\n\n            except Exception, e:\n                self.logger.error(e)\n```", "```\n            # pause until next update time\n            next_update = self.period - (time.time() % self.period)\n            time.sleep(next_update)                \n```", "```\nroot@arm:~/wfrog-read-only# svn diff wfdriver/station/__init__.py\nIndex: wfdriver/station/__init__.py\n===================================================================\n--- wfdriver/station/__init__.py   (revision 973)\n+++ wfdriver/station/__init__.py   (working copy)\n@@ -19,6 +19,7 @@\n import yaml\n\n import simulator\n+import bbb_habp\n import wmrs200\n import wmr928nx\n import wmr200\n@@ -66,6 +67,10 @@\n yaml_tag = u'!ws28xx'\n auto.stations.append(ws28xx)\n\n+class YamlWS28xxStation(bbb_habp.BBBhabpStation, yaml.YAMLObject):\n+    yaml_tag = u'!bbb_habp'\n+auto.stations.append(bbb_habp)\n+\n class YamlRandomSimulator(simulator.RandomSimulator, yaml.YAMLObject):\n yaml_tag = u'!random-simulator'\n auto.stations.append(simulator)\n\n```", "```\nroot@arm:~# wfrog -S\nThis is the setup of wfrog 0.8.2-svn user settings that will be written in /etc/wfrog/settings.yaml\n\nPlease enter the driver for your station model:\n 1) bbb_habp - BeagleBone Home Automation Blueprints weather station\n 2) random-simulator - Station Simulator\n 3) vantagepro2 - Davis VantagePro\n 4) wh1080 - Fine Offset WH1080 and compatibles\n 5) wh3080 - Fine Offset WH3080 and compatibles\n 6) wmr200 - Oregon Scientific WMR200\n 7) wmr928nx - Oregon Scientific WMR928NX\n 8) wmrs200 - Oregon Scientific WMRS200\n 9) ws2300 - LaCrosse WS2300\n[random-simulator] > 1\n\n```", "```\nroot@arm:~/wfrog-read-only# ./debian/rules binary\nroot@arm:~/wfrog-read-only# gdebi ../wfrog_0.8.2-1_all.deb\n\n```", "```\nroot@arm:~# /etc/init.d/wflogger stop\n[ ok ] Stopping wfrog logger - Weather Station Software : wfrog.\nroot@arm:~# /etc/init.d/wfrender stop\n[ ok ] Stopping wfrog renderer - Weather Station Software : wfrender.\n\n```", "```\nroot@arm:~# rm /var/lib/wfrog/wfrog-current.xml /var/lib/wfrog/wfrog.csv\n\n```", "```\n[....] Starting wfrog logger - Weather Station Software : wfrogStarting /usr/lib/wfrog/bin/wfrog...\nDetaching to start /usr/lib/wfrog/bin/wfrog...done.\n. ok\nroot@arm:~/chapter_04# /etc/init.d/wfrender start\n[ ok ] Starting wfrog renderer - Weather Station Software : wfrender.\n\n```", "```\nroot@arm:~# aptitude install python-pip python2.7-dev libffi-dev\nroot@arm:~# pip install --upgrade cffi cryptography PyOpenSSL oauth2client gspread\n\n```", "```\n    {\n        \"private_key_id\": \"2cd ... ba4\",\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nNrDyLw ...\n                           jINQh/9\\n-----END PRIVATE KEY-----\\n\",\n        \"client_email\": \"473 ... hd@developer.gserviceaccount.com\",\n        \"client_id\": \"473 ... hd.apps.googleusercontent.com\",\n        \"type\": \"service_account\"\n    }\n    ```", "```\nroot@arm:~# ./create_new.py\n\n```", "```\nImportError: No module named httplib2\n\n```", "```\nroot@arm:~# aptitude install python-httplib2\n\n```", "```\noauth2client.client.CryptoUnavailableError: No crypto library available\n\n```", "```\nroot@arm:~# aptitude install python-crypto\n\n```", "```\nimport gspread\nimport json\nfrom oauth2client.client import SignedJwtAssertionCredentials\n\n# Load the credentials\njson_key = json.load(open('Project-9a372e9e20e6.json'))\nscope = ['https://spreadsheets.google.com/feeds']\ncredentials = SignedJwtAssertionCredentials(json_key['client_email'], json_key['private_key'], scope)\n\n# Ask for authorization\ngc = gspread.authorize(credentials)\n\n# Open the \"bbb_weather\" spreadsheet\nsh = gc.open(\"bbb_weather\")\n\n# Add a new worksheet named \"BBB weather\" with size of 7x4 cells\nwks = sh.add_worksheet(title=\"BBB weather\", rows=\"7\", cols=\"4\")\n\n# Setup the \"current status\" part\nwks.update_acell('A1', 'Current status')\n\nwks.update_acell('A2', 'Time (D h)')\nwks.update_acell('B2', 'Pressure (hPa)')\nwks.update_acell('C2', 'Temperature (C)')\nwks.update_acell('D2', 'Humidity (%)')\n\n# Setup the \"old statuses\" part\nwks.update_acell('A5', 'Old statuses')\n\nwks.update_acell('A6', 'Time (D h)')\nwks.update_acell('B6', 'Pressure (hPa)')\nwks.update_acell('C6', 'Temperature (C)')\nwks.update_acell('D6', 'Humidity (%)')\n\nwks.update_acell('A7', 'LAST')\n```", "```\n# Open the \"bbb_weather\" spreadsheet\nsh = gc.open(\"bbb_weather\")\n\n# Select the worksheet named \"BBB weather\"\nwks = sh.worksheet(\"BBB weather\")\nThen we can parse the XML file and extract the current status data to be send over the network:\n#\n# Send data to Google Docs\n#\n\n# Parse the XML file holding the current weather status\nxmldoc = minidom.parse('/var/lib/wfrog/wfrog-current.xml')\n\n# Extract the data\ntime_obj = xmldoc.getElementsByTagName('time')\ntime = time_obj[0].firstChild.nodeValue\npress_obj = xmldoc.getElementsByTagName('pressure')\npress = float(press_obj[0].firstChild.nodeValue)\ntemp_obj = xmldoc.getElementsByTagName('temp')\ntemp = float(temp_obj[0].firstChild.nodeValue)\nhum_obj = xmldoc.getElementsByTagName('humidity')\nhum = float(hum_obj[0].firstChild.nodeValue)\nprint \"current: %s press=%f temp=%f hum=%f\" % (time, press, temp, hum)\n```", "```\n# Update the current status\nwks.update_acell('A3', time)\nwks.update_acell('B3', press)\nwks.update_acell('C3', temp)\nwks.update_acell('D3', hum)\n```", "```\n# Parse the CSV file holding the old weather statuses\ncsvfile = open('/var/lib/wfrog/wfrog.csv', 'rb')\nreader = csv.reader(csvfile, delimiter=',')\n\n# Skip the headers\nheaders = reader.next()\n```", "```\n# Find the \"LAST\" string where to insert data to\nlast = wks.find(\"LAST\").row - 7\nprint \"last saved row was %d\" % last\n\n# Skip already read row\nfor i in range(0, last):\n   dummy = reader.next()\n```", "```\n# Start saving not yet saved data\nfor row in reader:\n   time = row[1]\n   press = float(row[11])\n   temp = float(row[2])\n   hum = float(row[3])\n   print \"old: %s press=%f temp=%f hum=%f\" % (time, press, temp, hum)\n\n   # Add a new line with an old status\n   wks.insert_row([time, press, temp, hum], 7 + last)\n   last += 1\n```", "```\nroot@arm:~# ./send_data.py\ncurrent: 2015-06-27 13:56:00 press=1026.354367 temp=29.083000 hum=44.537000\nlast saved row was 0\nold: 2015-06-27 12:24:32 press=1026.700000 temp=29.200000 hum=49.600000\nold: 2015-06-27 12:35:00 press=1026.700000 temp=29.500000 hum=50.100000\nold: 2015-06-27 12:45:00 press=1026.600000 temp=29.500000 hum=48.800000\nold: 2015-06-27 12:55:00 press=1026.700000 temp=29.400000 hum=48.400000\nold: 2015-06-27 13:05:00 press=1026.700000 temp=29.300000 hum=47.500000\nold: 2015-06-27 13:15:00 press=1026.600000 temp=29.200000 hum=48.100000\nold: 2015-06-27 13:25:00 press=1026.500000 temp=29.100000 hum=45.900000\nold: 2015-06-27 13:35:00 press=1026.500000 temp=28.700000 hum=47.100000\n\n```", "```\njson_key = json.load(open('Project-9a372e9e20e6.json'))\n```", "```\nroot@arm:~# ./send_data.py\ncurrent: 2015-06-27 13:51:00 press=1026.334273 temp=29.276000 hum=46.871000\nlast saved row was 8\nold: 2015-06-27 13:46:00 press=1026.500000 temp=28.900000 hum=48.200000\n\n```"]