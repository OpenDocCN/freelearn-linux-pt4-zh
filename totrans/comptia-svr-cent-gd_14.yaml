- en: Security Systems and Protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of this book covers the physical and logical security concepts, procedures,
    and devices you may encounter on the Server+ certification exam. The security
    and safety that's necessary to protect a network server and its immediate and
    remote connections involves systems that are dedicated to security; security protocols,
    security devices, and practices to physically protect data and equipment; and,
    of course, the various data protection technologies, such as encryption, which
    are used to secure data in use, in storage, and in transit.
  prefs: []
  type: TYPE_NORMAL
- en: There is certainly no part or configuration of a server that's more important
    than its security. Any security settings, configuration, or procedures must protect
    against external and internal intrusion, data corruption, and damage that's caused
    by malware. The objective of any computing network's security program is the CIA
    triad, which consists of confidentiality, integrity, and availability.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll look at the devices, software, methods, and protocols
    that can be combined to create a security system to protect a network server,
    its data, and its major systems. The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Security zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gateway security devices, such as firewalls, define security zones to apply
    security policies to incoming and outgoing network traffic. To put this in a different
    way, a **security zone** is a logical structure that's created from one or more
    device ports/interfaces that apply the same security policies. A security zone
    can be just one interface, or it can include several interfaces if the interfaces
    apply the same policies. Each interface may also be a security zone, and a security
    zone may also include two or more interfaces. However, an interface can belong
    to only one security zone.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many firewalls (hardware or software) predefine a set of security zones to
    facilitate initial configuration. Most installations require additional security
    zones, but for some the presets, just one security zone may be enough. The most
    common predefined security zones include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Security zone** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| LAN | Highest level of trust; includes VLANs |'
  prefs: []
  type: TYPE_TB
- en: '| VPN/SSLVPN | Highest external level of trust; encrypted VPN traffic |'
  prefs: []
  type: TYPE_TB
- en: '| Multicast | IP multicasting |'
  prefs: []
  type: TYPE_TB
- en: '| DMZ/public | Publicly accessible servers |'
  prefs: []
  type: TYPE_TB
- en: '| WAN | Connections to WANs; effects incoming and outgoing traffic |'
  prefs: []
  type: TYPE_TB
- en: '| Untrusted | Lowest level of trust |'
  prefs: []
  type: TYPE_TB
- en: The security zones that are listed in the previous table can be either private
    or public security zones. The first two zones (LAN and VPN) are private security
    zones and the remaining zones are public zones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration of a security zone applies two primary policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security policies**: These are rules that control the permit or deny inbound
    and outbound traffic based on the source and destination addresses, protocols,
    port numbers, and content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access control policies**: These define who or what has permission to gain
    access to the resources behind a firewall'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demilitarized zone (DMZ)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A DMZ or perimeter network can be either a physical or logical network segment
    or subnet that's used as a default landing space for external WAN traffic that's
    seeking organizational information from the organization's website, which is open
    to the untrusted WAN security zone.
  prefs: []
  type: TYPE_NORMAL
- en: Browser zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On a local network, as well as on individual workstations, security policies
    can be set through a web browser. For example, the Microsoft **Internet Explorer**
    (**IE**) browser provides settings to restrict access to one or more predefined
    security zones, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/543ce63e-3d4c-48b5-8535-5ee7da17649e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The security zones defined in IE
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, IE defines four security zones—Internet,
    Local intranet, Trusted sites, and Restricted sites. Each zone may have a security
    level applied to control the level and type of content that's accessed and downloaded
    from sources or networks within each zone.
  prefs: []
  type: TYPE_NORMAL
- en: Security devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firewalls and other devices that perform intrusion detection and prevention
    are key security devices. In addition, each of these devices can be either a hardware
    appliance or a standalone or add-in software. In addition, a firewall can also
    be either **host-based** or **network-based**. Each has its advantages, but their
    applications are very different:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host-based**: This type of firewall or security device is most common, as
    either software or hardware, on a network-connected host. The host can be a network
    node or a server, including a proxy server, that permits or denies message traffic
    that is either inbound or outbound. Host-based devices are more customized to
    the needs of smaller networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network-based**: This is the type of firewall or intrusion security device
    most people envision: a security filtering device that permits or denies inbound
    traffic. A network firewall, an intrusion detection system, or an intrusion prevention
    system are examples of network-based security devices. Network-based devices,
    because they provide protection over a broader system, are, as the name implies,
    better suited to network-wide protection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewalls, regardless of their location in a network, are essentially just firewalls.
    However, intrusion detection and prevention systems commonly carry their placement
    in a network as part of their device names. A host-based intrusion detection system
    is an HIDS and a network-based system intrusion detection system is an NIDS.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first part of the AAA procedure is authentication (followed by authorization
    and accounting), and attempts to verify that the user who's attempting to gain
    access has provided verifiable credentials or biometric evidence that they are
    who they say they are. In other words, all is well, if the password and username
    provided is in the list of good identifying data.
  prefs: []
  type: TYPE_NORMAL
- en: This may not be the most sophisticated level of security for all situations,
    but it's the most commonly used method for authenticating a user. A variety of
    protocols that use similar methods perform authentication. In the following sections,
    we'll look at the most common authentication protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authentication uses input data or images that are provided by a user to verify
    that the data or image is a match to the data or images stored in advance for
    that specific user. The most common of these input values include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password**: This is the most common form of authentication input that''s
    combined with a username, word, phrase, token, card, or other identification to
    verify the person providing the data as an authenticated user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One-time password**: As its name states, you use a one-time password just
    once. A one-time password can be either a challenge-response password or a password
    from a predefined password list. A challenge-response password generates a value
    that the user calculates into a response value or looks up a response in a table.
    A password list contains values that are entered once for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public-key**: Two pass keys, one private and one public, encrypt, decrypt,
    and verify the data that''s been provided for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zero-knowledge**: Users receive a question or mathematical problem to answer
    or resolve that''s unique each time. The CAPTCHA authentication method is an example
    of this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As stated previously, an authentication protocol verifies that the identification
    data provided by a user is valid. More importantly, this procedure is the first
    line of security defense for an open and accessible network. Authentication protocols
    can be separated into two groups—**point-to-point protocol** (**PPP**) and AAA.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections describe the most commonly used authentication protocols,
    with no order implied.
  prefs: []
  type: TYPE_NORMAL
- en: Point-to-point authentication protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This category of authentication protocols is a common form of identifying a
    user requesting access to a system or network. The client is in direct communication
    with the authentication server and enters an identity phrase, word, or value and
    a password. If the server can verify this information, the user gains access.
    The authentication protocols that are included in this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password Authentication Protocol (PAP)**: This is a legacy protocol that
    performs the absolute most basic authentication steps—a user''s username and password
    go to an authentication server. If the server finds these values in its password
    tables, it sends an acceptance (permission to enter) message back. Because the
    transmissions between the client and server are in the clear, PAP isn''t a secure
    choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenge-Handshake Authentication Protocol (CHAP)**: After receiving a connection
    signal, the CHAP server (authenticator) transmits its hostname and a randomly
    generated data string (challenge) to the requesting client. The client then, using
    the challenge value, determines a corresponding secret value. The server then
    receives a bundle of data, including the secret value, the original challenge
    value—both encrypted with a one-way hash—and the client''s hostname. The server
    duplicates the process that''s performed by the client. If the result is the same
    as what was provided by the client, the client gains access. In addition, the
    CHAP handshake process may repeat periodically to reestablish its secure connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible Authentication Protocol (EAP)**: EAP is a general protocol that
    combines with different authentication methods, including Kerberos, one-time passwords,
    digital certifications, smart cards, PKI, and others. EAP versions support both
    wired and wireless LANs. The difference between EAP and the other APs is that
    EAP essentially acts as middleware between the client and an authentication server,
    such as RADIUS. The various versions of EAP include EAP-TLS, EAP-FAST, PEAP, and
    LEAP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AAA authentication protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *triple-A* (AAA) protocols provide the mechanisms to enforce, regulate,
    and monitor user access to a system or network. Authentication enforces who has
    access. Authorization regulates what a user may do, while accounting keeps track
    of what each authenticated and authorized user did. The most common of the AAA
    protocols include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kerberos**: Although not nearly as fierce as its namesake, Cerberus, the
    three-headed dog that guards the gates of Hades, Kerberos is a secure authentication
    protocol. Kerberos uses what it calls a *ticket*, which is an encrypted proof
    of identity to identify a user or a local network node. Kerberos authenticates
    a user to multiple systems rather than to a single system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lightweight Directory Access Protocol (LDAP)**: An open standard for directory
    services, LDAP is common in authentication processes for storing and verifying
    user accounts. LDAP maintains a database (directory tree) of user credentials.
    Users attempting to log into a system or network enter their credentials and LDAP
    searches its tree. If LDAP finds the credentials, the user gains access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote Authentication Dial-In User Service (RADIUS)**: This authentication
    protocol provides centralized network access control, although, in most cases,
    not through a dial-in service. When a user attempts to log into a system, his
    or her credentials go to the RADIUS server in an access-request message. The RADIUS
    server, depending on whether the user''s credentials are valid, responds with
    an **Access-Accept**, **Access-Reject**, or **Access-Challenge** message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminal Access Controller Access Control System (TACACS)**: This is another
    legacy AAA protocol that, like RADIUS, forwards user credentials to an authentication
    server for verification and permission to gain access to a system or network.
    A newer version, **Extended TACACS** (**XTACACS**), includes authorization and
    accounting. Neither version should be confused with TACACS+, which is a totally
    different protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TACACS+**: This is a version of TACACS that was developed by Cisco systems
    and encrypts its packets entirely before forwarding them to an authentication
    server. TACACS+ transmits on TCP, while TACACS/XTACACS use UDP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure Sockets Layer (SSL)/Transport Layer Security (TLS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SSL and the TLS, which is an updated version of the SSL, secures TCP communications,
    especially for HTTP messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the handshake process between a client and
    server using the SSL/TLS protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1c18992-570f-4f20-abc8-08c860180b9e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The steps in the SSL/TLS handshake
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through the steps of this handshake process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step A**: The client sends a *Hello* message to the target server. This message
    includes the version of SSL or TLS the client is using and the client''s preferences
    for encryption algorithms (cipher suite), a compression method, and a random string
    value for use in computations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step B**: If all goes well, the server responds with its *Hello* message,
    which contains the server''s choice for the cipher suite (from the client''s list),
    a session ID, and its own random string value. The server then provides a digital
    certificate to the client. The server may request a certificate from the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step C**: The client verifies the server''s certificate. If verified, it
    sends the random string value, encrypted with the server''s public key, to the
    server. This value will generate the encryption key for any subsequent messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step D**: After exchanging encrypted *finished* messages to signal the end
    of the handshake''s creation, the client and server transmit data and messages
    that have been encrypted with the shared key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Protocol Security (IPSec)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IPSec defines a series of standards for both the encryption and transmission
    integrity of OSI network layer packets that are transmitted with transport layer
    protocols. IPSec uses tunneling protocols to securely transmit data on a network
    and to prevent corruption of the data while in transit.
  prefs: []
  type: TYPE_NORMAL
- en: Security policies defining the security requirements of the network define IPSec
    functions. Each security policy defines a filter. These filters relate to the
    sources or destination IP addresses, transport layer port numbers, or the encapsulating
    protocol of a packet. When the data in a packet matches that of a filter, the
    filter's action applies.
  prefs: []
  type: TYPE_NORMAL
- en: IPSec policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An IPSec policy contains rules and filters, which define the what, when, and
    how of securing transmitted network traffic. Rules and filters relate to specific
    types of network traffic and the level of security is required.
  prefs: []
  type: TYPE_NORMAL
- en: The functions and actions of an IPSec system are set through the rules that
    it's been configured to follow. Windows operating systems contain a set of example
    security rules, but these rules are strictly examples. They really don't provide
    much in the way of actual security. IPSec rules specifically define the domain
    to which it applies and whether it's in transport or tunnel mode (more on that
    later).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the dialog box being used to define a new security
    rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98a1466b-faaa-4156-a446-aa2886377aac.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining a new IPSec policy rule on a Windows OS
  prefs: []
  type: TYPE_NORMAL
- en: 'IPSec policy rules may consist of one or more filters (so-called because they
    effectively perform packet filtering). Each filter may include the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filter list**: This is a list of the incoming or outgoing network messages
    on which the filter is to apply its filter actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filter action**: A filter has three basic functions it can apply to a message—**permit**,
    **block**, or **negotiate** security. The actions of permit and block should be
    self-explanatory. The negotiate security filter action applies IKE to determine
    the security mode (**Authentication Header** (**AH**) or **Encapsulating Security Pa****yload**
    (**ESP**)), the encryption method, and other session security data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filter authentication methods**: Kerberos, a CA certificate, or a pre-shared
    security key authenticate each endpoint in a security negotiation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tunnel endpoints**: If this value is present, it serves two purposes: an
    indication that tunneling protocols are in use and providing the IP address of
    one of the tunnel endpoints. Tunneling mode uses two filters, one for each end
    (and direction) of the tunnel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection type**: This is an indicator of the type of connection to which
    a filter applies, which can be a LAN, a remote connection (VPN), or both.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default response rule**: If one of the endpoints in an IPSec session doesn''t
    have a security rule defined, the default response rule provides the missing filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The filter action applies when the filter list, and possibly other rules, matches
    the corresponding data in a packet, such as its IP addresses, port number, and
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: IPSec modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPSec can operate in two primary modes—**transport** mode or **tunnel** mode.
    In transport mode, which is IPSec''s default mode, message security is end-to-end
    between a network client and a network server through two methods—**payload encryption**
    or **secure communications**. IPSec may operate in either of these configurations
    using one of the following modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AH transport mode**: As its name suggests, AH mode inserts a header into
    each packet, which contains a keyed hash total to ensure the packet''s integrity.
    AH mode doesn''t encrypt packets by default, but local administration may provide
    custom data checking and encryption rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESP transport mode**: ESP mode essentially includes the message actions of
    the AH mode with the addition of the encryption of the payload (data) portion
    of the message only:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/29aa3b91-0ec4-4084-99aa-80c9f6cf7bb0.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A comparison of the AH and ESP message formats
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram shows the packet formats of the IPSec transport modes.
    As we can see, the primary differences are that ESP encrypts the original message
    and appends additional information to the packet for authentication and integrity
    checking.
  prefs: []
  type: TYPE_NORMAL
- en: Each transport mode has an associated tunnel mode. In either format, IPSec applies
    encryption to the entire message after it's formatted into either an AH or ESP
    transport mode packet. After encapsulating the encrypted message, an IP header
    with the IP addresses the source and destination endpoints of the IPSec tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: 'As illustrated in the following diagram, AH tunnel mode places the AH header
    before the contents of the original packet. After encrypting this header and the
    packet''s contents, AH adds an IP header with the associated IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b70c2a56-7e55-47bf-9915-35f94baa321e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: AH protocol transport and tunnel mode message formats
  prefs: []
  type: TYPE_NORMAL
- en: Another operational mode of IPSec is the **Internet Key Exchange** (**IKE**),
    which can supervise the authentication, application of security policies and rules,
    and key exchange activities of each side of an IPSec interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Port security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many switches and routers have all of their interfaces enabled by default, right
    out of the box. As we've discussed, hardening—that is, closing unused ports—helps
    to secure a network by closing possible entry points. There are several approaches,
    standards, and methods used to secure internetworking devices, especially routers
    and switches, most of which are **port-based network access control** (**PNAC**) methods.
  prefs: []
  type: TYPE_NORMAL
- en: Port-based security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In general terms, port-based security secures the interfaces (ports) of a switch
    by limiting the number or specific devices that may forward packets or frames
    to one or more of its ports. Port security has two approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic locking**: This sets the maximum number of MAC addresses the device
    can *learn*. After reaching the limit, the device ignores any additional unknown
    MAC addresses and any messages from those devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static locking**: The device forwards only the MAC addresses included in
    a manually configured static address list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IEEE 802.1x
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Also known as *dot1x*, IEEE 802.1x defines a PNAC standard that performs an
    authentication process before allowing access to a device interface port. IEEE
    802.1X provides for authentication and encryption key management on IEEE 802 networks,
    both wired and wireless. 802.1x is based on the EAP and is applied through **EAP
    over LAN** (**EAPoL**) and the **EAP over Wireless** (**EAPoW**) protocols.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, in the 802.1x authentication process, the client
    software on the wireless workstations and the LAN workstations is the supplicant,
    the wireless AP and the LAN switch serve as authenticators, and the authentication
    server is, well, the authentication server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8c0c8e5-5855-403f-b509-bc97ef8b92ef.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The flow of the IEEE 802.1x authentication process
  prefs: []
  type: TYPE_NORMAL
- en: 'The IEEE 802.1x authentication process goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The client software (supplicant) on a LAN workstation (wireless or wired) sends
    an EAPoL start packet to an interface port on an **access point** (**AP**) or
    switch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The AP or switch (authenticator) replies with an EAPoL identity request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The supplicant sends back its identity, which is typically a username or an
    identity code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authenticator forwards the supplicant's information to the authentication
    server (commonly a RADIUS or DIAMETER server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authentication server, after verifying the identity of the supplicant, sends
    the authentication method it prefers to the authenticator, which forwards it to
    the supplicant. The authentication methods that are supported in this standard
    include **Tunneled Transport Layer Security** (**TTLS**), **Transport Layer Security**
    (**TLS**), **Message Digest version 5** (**MD5**), **Protected EAP** (**PEAP**),
    and others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The supplicant replies to the authentication server, through the authenticator,
    with its access credentials, such as a username and password or a digital certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authentication server verifies the information that's provided by the supplicants
    and either permits or denies access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access control list (ACL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ACL is a filter that's applied by internetworking devices, especially routers,
    firewalls, and switches, to identify and permit or deny access to an internal
    network to incoming message traffic. For the most part, ACLs are associated with
    an interface port on a device, and is under the assumption that the message traffic
    entering that interface is definable by source, destination, protocol, or port
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Router ACLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The objectives of the Server+ certification exam identifies router ACLs as
    something you will encounter on the exam. An ACL on a router performs the same
    basic function that we described in the previous section. However, router ACLs
    provide specific or targeted access to permit or deny filtering. A very common
    application for a router ACL is as part of an inbound DMZ, as illustrated in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d77bb3c6-0ecf-404f-ab5a-6a100f4c8164.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An ACL can be the controlling mechanism in a DMZ setup
  prefs: []
  type: TYPE_NORMAL
- en: A router with one or more strictly configured ACLs can, in many respects, serve
    as a firewall first and a router second. The firewall/router, based on the filters
    in its ACL, can direct any incoming messages with unknown or blocked data.
  prefs: []
  type: TYPE_NORMAL
- en: A network DMZ doesn't have to be a dead-end destination for denied messages.
    It's common for networks to route unknown source addresses and specific protocols
    to a DMZ. This may include a web server, remote access servers, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Access list content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, ACLs from different router providers can have features or controls
    that vary from model to model. However, nearly all routers support the following
    ACL features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACL identification**: In different routers, the identity of an ACL could
    be a name, a combination of alphanumeric characters, or a number, which could
    have significance in its value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access Control Entry (ACE)**: An ACL may have one or more ACEs, each of which
    identifies a specific set of conditions that determine whether the content of
    an incoming (or perhaps outgoing) message permits it to be passed, denied or redirected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source and destination addresses**: ACLs and ACEs determine Permit or Deny
    using a message''s source or destination IP address. The ACL compares the message''s
    addresses to those defined in an ACE, which may be a range of addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates how different parts of a network structure
    may place restrictions on different message types, originators, destinations,
    and protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94f7d910-45b6-4fd6-88e4-37900da599ab.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ACLs applied throughout a network infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: ACL types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with other features of the routers from various providers, the types or categories
    of ACLs may also vary. However, the most common ACL types are either standard
    or extended.
  prefs: []
  type: TYPE_NORMAL
- en: Standard ACLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A standard ACL filters messages using only its source (originating) addresses.
    Standard ACLs are perhaps the simplest to use and create, but their simplicity
    also limits their effectiveness. An ACE in a standard ACL contains only the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access control list number**: A standard ACL must have an ACL number of 1
    through 99 (inclusive) or 1,300 through 1,999 (inclusive). These number ranges
    identify it as a standard ACL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP address**: This is the specific IP address or address range compared
    to the source IP address of an incoming message. If there''s a match, the corresponding
    Permit or Deny action applies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wildcard mask**:  ACL entries may include a wildcard mask that''s used similarly
    to a subnet mask. More on this in the *Wildcard masks* section later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permit or deny**: This is the action that''s taken if the comparison of the
    source IP address against the address or address range is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended ACLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An extended ACL provides the ability to filter message traffic using either
    or both the source and destination addresses, as well as a TCP/UDP port number.
    In other words, it extends the capabilities of the standard ACL. An ACE in an
    extended ACL may contain any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access control list number**: Extended ACLs must have an ACL number of 100
    through 199 (inclusive) or 2,000 through 2,699 (inclusive). These number ranges
    identify it as an extended ACL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permit or Deny**: This action is taken if the comparison of the message content
    against the ACE content is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol**: These protocols are **Internet Protocol** (**IP**), **Transmission
    Control Protocol** (**TCP**), **User Datagram Protocol** (**UDP**), **Internet
    Control Message Protocol** (**ICMP**), **Generic Routing Encapsulation** (**GRE**),
    and **Internet Gateway Routing Protocol** (**IGRP**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP address**: This is the public IP address from which the message
    originated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source address mask**: This is the subnet mask associated with the source
    IP address'' network or subnet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator source port**: This indicates the condition of the comparison test
    involving the port number and contains both the conditional operator and the port
    number. The conditional operator may be **less than** (**lt**), **greater than**
    (**gt**), **equal** (**eq**), or **not equal** (**neg**) and contains the TCP/UDP
    port number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination IP address**: This is the public IP address of the receiver of
    the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination address mask**: This is the subnet mask associated with the network
    or subnet of the  destination IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operator destination port**: This is the same as for the operator source
    port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other ACL types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to standard and extended ACLs, some routers also implement two
    other ACL types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ethertype**: This permits or denies Layer 2 (Ethernet) frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webtype**: There are two different webtype ACLs—the URL-based ACL filters
    specific protocol and the URL combinations. The TCP-based ACL filters permit or
    deny specific IP addresses and TCP port numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reflexive**: This ACL type, that is, an IP session, creates a permitting
    inbound ACL for responses to outbound messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic**: This type of ACL, that is, lock-and-key, allows a user to access
    a specific source or destination IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, ACLs also fall into one of two general types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discretionary ACL (DACL)**: This type of ACL specifically identifies the
    IP addresses, user or group accounts, port numbers, and protocols with permission
    to access a resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System ACL (SACL)**: This type of ACL controls the router feature that generates
    log or audit entries and details attempts to access a resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example of a numbering system for ACLs, Cisco Systems uses the designations
    that are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Protocol** | **Range** |'
  prefs: []
  type: TYPE_TB
- en: '| Standard IP | 1–99 and 1,300–1,999 |'
  prefs: []
  type: TYPE_TB
- en: '| Extended IP | 100–199 and 2,000–2,699 |'
  prefs: []
  type: TYPE_TB
- en: '| Ethernet type code | 200–299 |'
  prefs: []
  type: TYPE_TB
- en: '| AppleTalk | 600–699 |'
  prefs: []
  type: TYPE_TB
- en: '| Ethernet address | 700–799 |'
  prefs: []
  type: TYPE_TB
- en: '| **Internetwork Packet Exchange** (**IPX**) | 800–899 |'
  prefs: []
  type: TYPE_TB
- en: ACE types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve already discussed, an ACL consists of one or more ACEs. Each ACE
    has one of three general purposes, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access-denied ACE**: An entry in a DACL that specifically denies access based
    on a requestor''s information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access-allowed ACE**: An entry in a DACL that specifically permits access
    based on a requestor''s information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System-audit ACE**: An entry in a SACL that generates a tracking entry when
    a requestor attempts to access to a resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The testing and its resulting action of each ACE occur one entry at a time.
    It's almost as if no other entries are in the ACL. Each ACE has no relationship
    to any other ACE before or after it, other than where it is in the sequence of
    the ACL.
  prefs: []
  type: TYPE_NORMAL
- en: The sequence of the ACEs in an ACL is extremely important. The test conditions
    and their results should be logical and not contradictory. For example, if an
    ACE denies access to all messages from a certain IP address and later in the ACL
    another ACE permits only ICMP messages from that address, the deny ACE makes the
    permit ACE moot. After denying everything, there's nothing to permit. I bring
    this up not only to make a sequencing point, but to lead into the purposes of
    implicit and explicit deny actions.
  prefs: []
  type: TYPE_NORMAL
- en: An implicit anything is a result that occurs by default. An explicit anything
    is specific. Implicit is an assumption and explicit is a stated fact. For example,
    if a tour guide has a list of participants that can board the tour bus, not being
    on the list implicitly denies anyone else boarding. However, a competing tour
    company has a list of people who are absolutely barred from boarding their bus.
    In this case, being on the list explicitly denies participation.
  prefs: []
  type: TYPE_NORMAL
- en: Nearly all routers, firewalls, active directory servers, and other access control
    devices automatically include an implicit deny at the end of an ACL. This implicit
    deny functions to block any access requests that aren't included in the ACL, meaning
    that requests that have fallen through all of the ACEs in the ACL. An implicit
    deny as the last entry in an ACL says it denies any request that got that far.
  prefs: []
  type: TYPE_NORMAL
- en: An explicit deny can be anywhere in an ACL, depending on how specific it is.
    An explicit deny for a specific IP address should precede any general permit entry.
    An explicit deny at the end of an ACL is typically a *deny any* entry that functions
    exactly like the catchall implicit deny.
  prefs: []
  type: TYPE_NORMAL
- en: Wildcard masks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Also known as inverted masks, ACL IP address entries may include and apply a
    wildcard mask, which work much differently compared to the wildcard characters
    of the Windows world. In fact, ACL wildcard masks work essentially in the opposite
    way to subnetting masks.
  prefs: []
  type: TYPE_NORMAL
- en: In a subnet mask, the masking process only extracts the binary value positions
    that contain one value from an IP address. However, in an ACL wildcard mask, a
    binary zero indicates the address positions that must match. In other words, a
    zero bit in the mask means the corresponding bit in the message address must match
    (to create a true condition) and a one bit indicates an ignored bit position in
    the address.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in a standard ACL entry, the source IP address and its wildcard
    mask appear (one after the other) as `162.29.5.12 0.0.0.0`. In this entry, `162.29.5.12`
    is the source IP address and `0.0.0.0` is the wildcard mask. The zeroes in the
    wildcard mask represent that each octet contains all zeroes. Otherwise, the wildcard
    mask would be `00000000.0000000.00000000.00000000`. Another way to represent the
    same setting is to use the `host2`  term before the IP address: `host 162.29.5.12`.'
  prefs: []
  type: TYPE_NORMAL
- en: The more common use of wildcard masks is in extended ACLs, where they identify
    entire or major subnets of a network. For example, if an ACL entry is to permit
    all addresses on a certain network, the one bits indicate the portion of the address
    that's permitted and the zeroes indicate the portion of the address that's ignored.
    If we wish to permit all of the nodes on the `210.20.158.0` network, the wildcard
    mask will be `0.0.0.255`. The `255` portion of the mask means that whatever host
    ID is in the fourth octet, permit it.
  prefs: []
  type: TYPE_NORMAL
- en: Public key infrastructure (PKI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Essentially, the PKI is sort of like one of your close friends introducing you
    to some of their close friends. Officially, PKI is a suite of rules, guidelines,
    and policies that define, issue, manage, apply, store, and revoke digital certificates
    and the use of public key encryption. In simpler terms, PKI is an encryption and
    security methodology that provides better security for the identity of the correspondents
    and the content of the data than simpler methods, such as a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practically, PKI is the coordinated interaction of its four parts, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Certificate authority (CA)**: A trusted organization that provides unique
    digital certificates to subscribers and manages public keys and identity credentials
    for the data encryption of stored data, websites, and email'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registration authority (RA)**: A network service that approves and forwards
    requests for identity verification (digital certificates) and the certificate
    authority that issues it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate request database**: Stores requests for digital certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate store**: Stores digital certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PKI features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PKI describes the following processes and procedures to provide a secure infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access control**: Using public and private key pairs, PKI assures that only
    identified parties have access to a document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: PKI provides identity verification through digital certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confidentiality**: PKI secures transmitted documents against unauthorized
    access through encryption'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity**: PKI assures transmitted data retains its integrity through message
    hashing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-repudiation**: A document''s digital certificate permanently identifies
    its ownership'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption and authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are security protocols that provide data encryption and authentication
    for messages that are transmitted over a network. Their differences aren't large,
    but they are not interoperable. However, since TLS is the replacement for SSL,
    you will often see them listed as SSL/TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Digital certificates aren't dependent on specific protocols. The protocols that
    are enabled on a system or network are the property of the system or network configuration
    and not the security certificates in use. For example, an SSL digital certificate
    doesn't require only the SSL protocol, and TLS digital certificates don't require
    only TLS. In fact, for the most part, certificate authorities refer to these certificates
    as SSL/TLS certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual private network (VPN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A VPN creates an encrypted end-to-end connection over an insecure network, primarily
    over the internet. VPNs are common in companies for their remotely authorized
    users, such as remote branch office workers, to access central office applications
    and other resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'A VPN connects two locations over a network using an encrypted tunneling protocol.
    In fact, a VPN encrypts the elements of both the private network and the public
    network that''s used to complete the connection. The three primary protocol types
    that are used with VPNs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP Security (IPSec)**: A set of security and encryption protocols for protecting
    IP packets that are transmitted over a network using either transport mode or
    tunneling mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point-to-Point Tunneling Protocol (PPTP)**: A protocol for creating VPNs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer 2 Tunneling Protocol (L2TP)**: A protocol that allows **Internet Service
    Providers** (**ISPs**) to provide VPNs to subscribers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual LAN (VLAN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where a VPN allows secured connections over a public network, a VLAN is a logical
    internal network configuration that can provide several benefits to users and
    administrators. A VLAN creates a group of network nodes into a logical network.
    This is a virtual network in that the included nodes may be on separate physical
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'A VLAN can be one of two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static VLAN**: Also known as a port-based VLAN, it consists of one or more
    network switch interface ports that have been configured to a VLAN. Any device
    that''s connected to a port that''s been configured to a static VLAN is automatically
    on that VLAN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic VLAN**: The identification of a node in a dynamic VLAN is done by
    its physical address (MAC address) or network usernames. A **VLAN Member Policy
    Server** (**VMPS**) provides the list of nodes belonging to the dynamic VLANs
    and provide the configuration data to the effected network switches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A security zone is a logical structure that's created from one or more interfaces
    that apply the same security policies. Many firewalls predefine security zones,
    with the most common being LAN, VPN, DMZ, and WAN. A security zone applies security
    policies and access control policies.
  prefs: []
  type: TYPE_NORMAL
- en: Security devices, such as firewalls and intrusion detection and prevention devices,
    are either hardware or software. Security devices can be host-based or network-based.
    A host-based intrusion detection system is a HIDS and a network-based system is
    a NIDS.
  prefs: []
  type: TYPE_NORMAL
- en: An authentication protocol verifies the credentials that have been provided
    by a user are valid and serves as the first line of security defense for an open
    network. Authentication protocols are either PPP or AAA. The most common of the
    AAA protocols include Kerberos and IPSec. An IPSec policy defines rules and filters
    for specific types of network traffic and security levels. IPSec operates in transport
    mode or tunnel mode and within each in AH or ESP modes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Port-based security has two approaches: dynamic locking and static locking.
    IEEE 802.1x PNAC performs authentication before allowing access to an interface.
    802.1x is based on EAP.'
  prefs: []
  type: TYPE_NORMAL
- en: An ACL permits or denies access to the network via incoming messages. ACLs are
    associated with interfaces and apply to messages using source and/or destination
    addresses, protocols, or port numbers. Router ACLs include ACL ID, ACE, and source
    and destination addresses. A standard ACL filters messages using source addresses.
    An extended ACL filters messages using source and destination addresses and TCP/UDP
    port numbers. The two general types are DACL and SACL.
  prefs: []
  type: TYPE_NORMAL
- en: Routers and other access control devices automatically include an implicit deny
    at the end of an ACL. An explicit deny can be anywhere in an ACL.
  prefs: []
  type: TYPE_NORMAL
- en: PKI is an encryption and security method that secures the source and receiver
    of a message or document. PKI has four parts—CA, RA, certificate request DB, and
    certificate store. PKI provides access control, authentication, confidentiality,
    integrity, and non-repudiation.
  prefs: []
  type: TYPE_NORMAL
- en: A VPN creates an encrypted end-to-end connection over the internet using a tunneling
    protocol. The protocols that are used with VPNs are IPSec, PPTP, and L2TP. A VLAN
    is a logical network configuration that is either static or dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a logical structure of one or more interfaces with the same security
    policies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: NIDS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Control zone
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Security zone
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two of the following are classifications for security devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Host-based
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Host-attached
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Network-based
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Network-attached
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A protocol that verifies user credentials performs which part of the AAA function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Accounting
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Association
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The two most common of the IPSec protocols are Kerberos and what?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: L2TP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: EAP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPSec
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PNAC
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following modes are associated with IPSec?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AH
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ESP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tunnel
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What protocol standard is IEEE 802.1x based on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IPSec
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: L2TP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: EAP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DACL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two approaches of port-based security?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic locking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Static locking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Certificate locking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Interface locking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the data that a standard ACL uses to filter messages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Port number
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ACL identification number
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Protocol
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What ACL entry is automatically added at the end of an ACL to deny any message
    that's not matched by its other entries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explicit deny
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Explicit permit
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implicit deny
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implicit permit
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following isn't one of the four parts of the PKI model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Certificate store
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PPTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
