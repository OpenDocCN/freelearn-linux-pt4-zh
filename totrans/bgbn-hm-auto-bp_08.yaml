- en: Chapter 8. Intrusion Detection System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays intrusion detection systems are quite common but really expensive.
    In this chapter, I'm going to show how we can implement a cheap intrusion detection
    system with a reasonable quality using our BeagleBone Black and two (or more)
    webcams.
  prefs: []
  type: TYPE_NORMAL
- en: The system will be able to alert the user by sending an e-mail with a photo
    of the intruder.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of functioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, we're going to use two webcams connected with our BeagleBone
    Black via a USB bus. Then, we'll install and run a special motion detection software
    that is able to detect a movement into a dynamic scene. When the program detects
    a movement, it will take one or more photos of the moving object and then send
    the pictures via e-mail to a user's account.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, the connections are very simple since they are just done using several
    USB cables.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we have seen how to set up a webcam (see [Chapter
    3](ch03.html "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*, for instance);
    but this time, we have a different configuration due to the fact that we're using
    two webcams at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: As the reader might know, the BeagleBone Black board has only one USB host port,
    so to connect two webcams, we need a USB hub. These devices (used to connect more
    than one device to a USB host port) are very common, and the reader can find them
    anywhere on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In theory, the more ports the hub has, the more webcams we can use in our system!
    But, of course, there is a maximum limit of usable webcams due to the fact that
    each webcam adds a CPU load to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'A little schematic of the system using a **USB HUB** with three ports is shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the hardware](img/B00255_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the webcams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For my prototype, I used two generic webcams supported by the **Video4Linux**
    driver class, as already explained in [Chapter 3](ch03.html "Chapter 3. Aquarium
    Monitor"), *Aquarium Monitor*, connected to the **USB HUB** as shown in the following
    image. However, you can use your preferred device since it's a very common device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the webcams](img/B00255_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The curious reader can get more information about the USB hub's drivers at [https://en.wikipedia.org/wiki/USB_hub](https://en.wikipedia.org/wiki/USB_hub).
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify if everything is well connected and supported, you have to connect
    the webcams as shown in the diagram in the previous section. Then, you should
    get something similar to the output of my system, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must use an external power supply for the HUB, or else your BeagleBone
    Black will be unable to supply enough current to manage both webcams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now we can verify if the webcams are correctly managed using the `fswebcam`
    program in the same manner as in the previous chapter. However, this time we must
    specify which webcam must be used to take a simple picture to the `fswebcam` program.
    The trick can be done using the `-d` option argument, as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As already stated in [Chapter 3](ch03.html "Chapter 3. Aquarium Monitor"),
    *Aquarium Monitor*, if you get a completely blank image with a message as follows,
    you can resolve the issue by adding the `-S` option argument to the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to take a picture from the other webcam, we can use the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The following two screenshots show the two pictures from the two webcams, which
    are set face to face, that is, the first webcam gets a picture of the second one
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the webcams](img/B00255_08_03.jpg)![Setting up the webcams](img/B00255_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following screenshot shows all the devices that I used to implement this
    project and to test the software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final picture](img/B00255_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nothing special to highlight here; all the connections are just very simple
    USB connections. However, let me highlight the fact that I used an external power
    supply for both the BeagleBone Black board and for the USB hub in order to avoid
    power loss due to the high power consumption from the webcams.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, we have to set up two programs: the mailer and the motion detection
    system. The former, used to send the alarm e-mail message, is very simple and
    easy to set up; while the latter, used to implement the intrusions detection system,
    is a bit more complicated due to the fact that it supports tons of different devices
    and features.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the mailer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As requested by this project, we should alert the user about possible intrusions
    by sending them an e-mail. There exists several ways to send an e-mail on a UNIX-like
    system, and the most commonly used is the `mail` command that is called with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For further information about the `mail` program, the reader can take a look
    at its man pages (using the `man mail` command) or start reading about it at [https://en.wikipedia.org/wiki/Mail_%28Unix%29](https://en.wikipedia.org/wiki/Mail_%28Unix%29).
  prefs: []
  type: TYPE_NORMAL
- en: 'The real problem is that this command relays on the system mailer, which is
    the real program that actually sends our letters over the Internet! By default,
    our BeagleBone Black has no valid mailer, so, if we try to send an e-mail message
    with the `mail` program, we get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-s` option argument used in the preceding output is to specify a subject
    for the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: To solve our problem, we have to install a valid `/usr/lib/sendmail` program,
    and, as already stated, there are several ways to do it. I decided to use the
    `ssmtp` tool with my Gmail account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `ssmtp` tool is a generic tool to be used with a mailhost, so
    it is not a Gmail-related product. For further information on the tool, you can
    take a look at [https://wiki.debian.org/sSMTP](https://wiki.debian.org/sSMTP).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, we can use the usual `aptitude` command with two other useful
    tools for e-mail processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation, we have to modify the `/etc/ssmtp/ssmtp.conf` configuration
    file according to the following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `FromLineOverride` setting has been enabled since we wish to specify our
    own `From:` address; then, the other fields are needed so we can send an e-mail
    message via our Gmail account.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For obvious reasons, I replaced my password with the `XXXXXXXXXX` string. Of
    course, you have to set up the `AuthUser` and `AuthPass` settings to suite your
    Gmail account.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything works well, we should now be able to send an e-mail using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that if your Gmail credentials are not correctly set up, you may get the
    following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Also, note also that the `-r` option argument is used to specify a sender name;
    so, in the preceding example, in the `From:` field is displayed the `BBB Guardian
    <myaccount@gmail.com>` string, otherwise, the Gmail address is displayed instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the message as received on my smartphone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the mailer](img/B00255_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using motion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | *Motion is a program that monitors the video signal from cameras. It
    is able to detect if a significant part of the picture has changed; in other words,
    it can detect motion.* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*[Motion WebHome]* |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visit the project homepage is at [http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome](http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome).
  prefs: []
  type: TYPE_NORMAL
- en: The software is a libre CCTV software application developed for GNU/Linux-based
    systems, and as stated on the program's home site, it can monitor the video signal
    from one or more cameras and is able to detect if a significant part of the picture
    has changed, saving video when it detects that motion is occurring.
  prefs: []
  type: TYPE_NORMAL
- en: The program is a command-line-driven tool written in **C** and made for the
    Video4Linux interface. It can run as a daemon with a rather small footprint and
    low CPU usage. It can call to user configurable *triggers* when certain events
    occur, and then it generates either pictures (`.jpeg`, `.netpbm`) or videos (`.mpeg`,
    `.avi`).
  prefs: []
  type: TYPE_NORMAL
- en: '`motion` is operated mainly via configuration files though the end video streams
    that can be viewed from a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Downloading and installing `motion` on the BeagleBone Black is quite simple,
    since we simply have to use the usual command to install a new package as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When all the code is installed, it''s time to configure the program! In fact,
    if we take a look at the system''s log messages, we see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The daemon is disabled by default due to the fact that it must be correctly
    configured before enabling it. So, let's see how we can do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the daemon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To configure the daemon in order to use two webcams, we have to modify three
    files: the main configuration file `/etc/motion/motion.conf`, the configuration
    files of each webcam `/etc/motion/thread1.conf`, and `/etc/motion/thread2.conf`.
    The daemon creates one thread per webcams used, and all special settings referring
    to a webcam must be set inside the corresponding file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by modifying the `/etc/motion/motion.conf` file. First of all,
    we must enable one thread per webcam, so we have to apply the following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can verify the setting by running the `motion` daemon in debugging
    mode with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we can see from the preceding output, we can get a lot of useful information
    about the daemon status. First of all, we notice that each line begins with a
    number in square brackets that address per thread output. The number `0` is for
    the `motion` main thread, the number `1` is for the first thread connected to
    the first webcam (device `/dev/video0`), and the number `2` is for the second
    thread connected to the second webcam (device `/dev/video1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we see that for the first webcam, the daemon says gives us the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That is the current palette setting (YU12) is not valid for the webcam and the
    system says that it is going to use YUYV.
  prefs: []
  type: TYPE_NORMAL
- en: 'And an error message is displayed for thread 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, it seems like a severe error, but let''s go step by step and fix
    the first camera. In the `/etc/motion/thread1.conf` file, we see the following
    settings (the following is just a snippet of the whole file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `videodevice` and `input` settings are correct, but the video palette setting
    is missing, so the default one is used. As seen in the preceding output, it''s
    wrong. To fix it, we must add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that I set the entry `v4l2_palette` to `6` in order to select the `YUYV`
    palette. Now, if we rerun the daemon, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, let''s fix the configuration file for the second webcam. In the
    `/etc/motion/thread2.conf` file, we see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the `videodevice` setting is correct, but the `input` setting is not!
    So, let''s fix it as shown in the following patch and then rerun the daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the daemon output for the second thread is changed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have to modify the `/etc/motion/thread2.conf` file again as shown in
    the following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we rerun the daemon for the second thread, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! The webcams are now correctly configured.
  prefs: []
  type: TYPE_NORMAL
- en: The web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now it's time to verify the video output by directly seeing a video stream.
    To do it, `motion` sets up several web servers to be used to monitor the main
    thread (thread numbered `0`) and the per camera threads (threads numbered from
    *1* to *N*).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the `webcam_port` settings in the `motion.conf`, `thread1.conf`
    and `thread2.conf` files, we see that each thread opens a different monitoring
    port, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The only settings that must be modified are `control_localhost` and `webcam_localhost`,
    which must be set to `off` in order to allow a remote control connection for the
    first thread and a remote webcam connection for the threads of each webcam. The
    patch is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that the daemon doesn't start if the `8080` port is occupied by another
    running process (such as Apache, for instance). Verify that this is not this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we rerun the daemon, we can verify that the three `motion` web servers
    are running at the `8080`, `8081`, and `8082` ports using the following command
    line in a different terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, we can use a normal browser to connect to the main thread (thread
    number 0), but for us to check the webcams'' output, we can get the per webcam
    video stream at `http://192.168.7.2:8081` and `http://192.168.7.2:8082`, as shown
    in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The web interface](img/B00255_08_07.jpg)![The web interface](img/B00255_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that in this last test, I executed the daemon without the `-s` option
    argument in order to disable the setup mode, that is, using the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This is because I noticed that in the setup mode, the webcams work with a very
    bad video output (I don't know if this is a bug or a feature).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, the control thread can be controlled via a web browser at
    `http://192.168.7.2:8080`. The following screenshot shows the main page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The web interface](img/B00255_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we navigate to the **All** | **Config** | **list** menu entries, we reach
    `http://192.168.7.2:8080/0/config/list`, where we can get a page with all the
    configuration settings of the main thread, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The web interface](img/B00255_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we are able to change each setting just by clicking on the relevant
    link and entering the new value. However, we're not going to use these interfaces
    to set up the system in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the main thread, we can get the configuration of each running thread
    by just clicking on the relative link and then navigating to the menu. As an example,
    for the thread 1, we can read its current configuration at `http://192.168.7.2:8080/1/config/list`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The web interface](img/B00255_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it''s time to see how we can perform some actions when an event occurs.
    The `motion` daemon defines several events, all reported in the main configuration
    file. In fact, in the `/etc/motion/motion.conf` file, we see the following settings
    (again a snippet of the file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: These are all the possible events reported by the daemon, and here we can define
    the command to execute when one event occurs. We just have to enter a command
    file with specific arguments, and the daemon will call it at the right time. The
    allowed arguments are shown in the comment at the top of the preceding list.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, and in order to better understand how the mechanism works, let''s
    consider the following simple **Bash** script named `args.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code is stored in the `chapter_08/bin/args.sh` script in the book's example
    code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute it from the command line, it simply prints its arguments (with
    a timestamp prefix) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the program prints a random number after its name. This is because
    we'll need a unique name to distinguish between thread 1 and thread 2 (see the
    following section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we copy this script in the `/usr/local/bin/` directory, we can call
    it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this program with `motion` in order to discover which arguments
    are passed to an external program when an event occurs. As an example, we can
    consider the `on_picture_save` event. We can enable it with the following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In this manner, we ask `motion` to execute the `args.sh` script when a new picture
    is saved, passing to it the event's timestamp, the number of the thread that generated
    the event, and the full path name of the picture file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the daemon again, we must make sure that, in the per thread
    configuration file, the same event has been disabled by commenting on the relative
    line, as shown, for example, for the first thread, in the following patch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you forget to disable the event in the webcams'' threads, you''ll get several
    errors, such as the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: So, remember to disable this setting for all running threads!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we execute the daemon again and do some movement in front of a camera,
    we get the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Everything is working correctly. Now, it''s very easy to finish the
    job. In fact, we have to simply replace the `args.sh` script with a script that
    sends an e-mail to us with a picture attached! A snippet of a possible implementation
    of such program is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete code is stored in the `chapter_08/bin/send_alert.sh` script in
    the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, we have to copy it in `/usr/local/bin/`, as we did before, for the
    `args.sh` program. Then, we must replace all the occurrences of `args.sh` in the
    `/etc/motion/motion.conf` configuration file with `send_alert.sh`. When this is
    done, just rerun the `motion` daemon, and when a motion is detected, we should
    get a logging message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that it''s quite common that a lot of pictures will be taken, so without
    some specific anti-flooding technique, we can risk to send tons of e-mails! The
    trick here is quite easy—using the `gap` and `on_event_end` options, we can generate
    an *e-mail send* event once motion decides that the current event is finished.
    In fact, we can see the following by taking a look at the configuration filed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We can imagine storing the filenames of the images in a list, and then, when
    the `on_event_end` event occurs, we can read back the names and send one e-mail
    with attachments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the `on_event_end` event, I used to following setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `send_alert.sh` script implements this solution. If we run it without
    arguments, it displays a short usage message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If executed with three arguments, it stores `filepath` in the file addressed
    by the `ALERT_LIST` variable, while when it is executed with two arguments, it
    rereads the file and sends an e-mail with a number of pictures (limited by the
    variable `ALERT_LIMIT`) as attachments.
  prefs: []
  type: TYPE_NORMAL
- en: To test if the program works correctly, we can try to execute it with just two
    arguments, and then verify that an e-mail message arrives to our account.
  prefs: []
  type: TYPE_NORMAL
- en: Final test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to test our prototype. To do it, I decided to point the webcams
    toward my library shelf, where my precious stamp collection is kept. Then, I run
    the `motion` utility and just wait.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this time, there is nothing special to do to configure the hardware.
  prefs: []
  type: TYPE_NORMAL
- en: 'After a while, I receive the following e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, looking at one picture, I discovered a very dangerous intruder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, there was very little hardware work to do, but on the other
    hand, we discovered how to use a really powerful tool named `motion`. This tool
    allows us to realize (quasi) professional, if minimal, anti-intrusion system.
    Also, you learned how to send simple e-mails with attached pictures to inform
    the user about an important event in the system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discover how to use different identification devices
    (such as RFID readers and smart card readers) to implement an access control system.
  prefs: []
  type: TYPE_NORMAL
