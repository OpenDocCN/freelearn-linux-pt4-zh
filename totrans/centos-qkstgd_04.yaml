- en: User and Group Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is a multiuser OS, so it is essential to have a basic understanding of
    user management. In this chapter, you will learn how to add, delete, modify, and
    suspend user accounts and grant them permissions to perform essential tasks. You
    will also learn how to apply password policies in a Linux environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding different types of users and groups in CentOS 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing commands as a superuser in CentOS 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, modifying, and deleting local user accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating, modifying, and deleting local group accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing user passwords and aging policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding users and groups in CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing different types of users and groups is one of the primary roles of
    system administration. Using different types of user and group account as a role-based
    access control is configured into the system. Depending upon the privileges of
    user, we can restrict user access to various system resources.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each process running on our system is started by a user, to whom it belongs.
    Access to different files and directories by running processes is determined by
    the user associated with that process. Similarly, every file in our system is
    owned by some user and access to different files and directories on the system
    is restricted by user privileges. By default, new files created are owned by the
    user creating the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are generally three types of user account in Linux systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Root user (administrator)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System users (used by various services)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular users (normal users who carry out daily operations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying the current user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Linux is a multiuser OS, we can have multiple users logged in at the
    same time. The following table lists the different commands that are used to find
    information about the logged-in user and other information associated with users:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$ who` | Display currently logged in users |'
  prefs: []
  type: TYPE_TB
- en: '| `$ w` | Display detailed information of currently logged in users |'
  prefs: []
  type: TYPE_TB
- en: '| `$ whoami` | Display current user |'
  prefs: []
  type: TYPE_TB
- en: '| `$ id` | Display information about current logged in user (such as User ID,
    primary group and secondary group, and SELinux context) |'
  prefs: []
  type: TYPE_TB
- en: '| `$ id <username>` | Display information about the username passed as the
    first argument to the `id` command |'
  prefs: []
  type: TYPE_TB
- en: 'Examples of the `id` command, `who` command and the `w` command usage are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7be6526-23f0-44a7-88f5-4100d55aa5ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To show the user associated with the file, use the long-listing (`ls -l`) command,
    which displays user associations in the third column as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the user associated with a process, use the `ps` command with the `u` option.
    Most of the time, the `a` option is also clubbed with the `ps` command to display
    all the processes associated with the Terminal as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All Linux users are assigned a unique integer number known as a **User ID**
    (**UID**). Specific UID numbers and ranges of numbers are used for particular
    purposes by Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table that lists the various UID ranges and their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **UID** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| UID 0 | Root user is always assigned UID as 0. |'
  prefs: []
  type: TYPE_TB
- en: '| UID 1-999 | UID 1-999 are assigned to system user accounts. Of this, UID
    1-200 are statically assigned to system processes and UID 201–999 are reserved
    for the system. UID 201-999 are dynamically allocated in the system to an application
    upon its installation in CentOS 7. |'
  prefs: []
  type: TYPE_TB
- en: '| UID 1000+ | Regular user accounts have UID 1000 onward by default. |'
  prefs: []
  type: TYPE_TB
- en: 'The mapping of user information, such as `username`, `UID`, `GID`, and the
    `home` directory of the user, is defined in a plain text file, `/etc/passwd`.
    The `/etc/passwd` file contains seven colon-separated fields, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table describes the various fields of the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `username` | It is the user login name associated with the UID for human
    readability (should be between 1 and 32 characters). |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | In this field, passwords were originally stored in encrypted
    format. Now, they are stored in the `/etc/shadow` file. |'
  prefs: []
  type: TYPE_TB
- en: '| `UID` | It is the UID that system uses to identify a user:UID 0: reserved
    for rootUID 1-200: reserved for predefined system accounts (static)UID 201-999:
    reserved for system accounts (dynamic)UID 1000+: reserved for regular user accounts
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GID` | It is the primary GID of the user, used by the system to associate
    the user to its primary group |'
  prefs: []
  type: TYPE_TB
- en: '| `Gecos` | This field is optional and contains user-related extra information,
    such as user''s full name, address, contact details, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `/home/dir` | This field contains the absolute path of the user''s home directory
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Default shell` | It is the absolute path of the user''s default shell (this
    program runs when the user logs in to the system), which provides the users command
    prompt |'
  prefs: []
  type: TYPE_TB
- en: 'The contents of last two lines in `/etc/passwd` file is shown in the following
    the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7088b765-c9f2-4bdc-bb35-dc9f1ad39be8.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding groups in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux uses groups to organize users in the system. Groups are collections of
    accounts with certain shared features and access controls. Like users, a group
    also have a name, which is associated to a number known as the **Group ID** (**GID**),
    and is generally the same as the UID. Local group information is stored in the `/etc/group`
    file. There are two types of group associated with user accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Primary groups**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every user has only one primary group.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the default group of a user to which he belongs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each local user's primary group is defined by the GID number of the group listed
    in the third field of the `/etc/passwd` file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the primary group owns the new files created by the user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, the primary group of a newly created user will have the same name
    as the user. Each user is the only member of this private primary group of the
    user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supplementary groups**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each can be associated with 0 or more supplementary groups.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each local user's secondary group entry is defined in the last field of the
    `/etc/group` file. This file contains a comma-separated list of users in the last
    field, which determines the group membership of users for a group.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Supplementary group membership helps in implementing access rights, privileges,
    and security considerations to files and other resources in the system. The various
    fields of the `/etc/group` file are as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the contents of the last two line of the `/etc/group`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13cdb025-f0e0-4a24-beaf-e5b0cb1b3038.png)'
  prefs: []
  type: TYPE_IMG
- en: Executing commands as superuser in CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every operating system has an account to administer the resources of that system.
    In the case of CentOS Linux, this user account is known as **root**, very often
    called the **superuser**. The root account is the most privileged account in a
    Linux/Unix system. This account is used to carry out system administration tasks,
    such as managing user accounts and their passwords, managing software packages,
    modifying system files, and restarting system services. Extra caution must be
    taken while working as the root user as it has no security restrictions imposed
    on it. If the root account is compromised, then another person will have full
    administrative control of the system. The root account on Linux is equivalent
    to the local administrator account on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: When you are logged in as the root user, the shell prompt displays the hash
    `#` symbol by convention to make the user aware that you are working as most the privileged
    user in the system.
  prefs: []
  type: TYPE_NORMAL
- en: In Linux, there are two commands, `su` and `sudo`, which are used to temporarily
    grant root access to a normal user. We will discuss these commands one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Switching users with the su command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **su** (short for **switch user** or **substitute user**) command is used
    to switch into other user accounts. If a username is not specified as an argument
    to the `su` command, it takes the root account into consideration. There are two
    ways of invoking this command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ su - <username>`: This method starts a new **login shell** as another username
    specified. It sets up the shell environment as if this was a proper login as that
    user in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ su <username>`: This method starts a **non-login shell** as the username
    specified. It just launches the new shell with the current user environment settings,
    without invoking other username shell variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the absence of any username, `su –` invokes the root shell and asks for
    root credentials to be given at the prompt as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/29528b59-42db-49da-8d35-fdd5ff30051e.png)'
  prefs: []
  type: TYPE_IMG
- en: Disadvantages of using the su command to grant root access to a normal user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the user has logged in as the root account using `su`, they can do anything
    for as long as they want, without being asked again for a root password. This
    command also has limited logging features.
  prefs: []
  type: TYPE_NORMAL
- en: Using sudo to run commands as the root user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous method, the standard user temporarily becomes the root using
    the `su` command; all the privileges of root are granted by specifying the `root`
    password. This method is not suitable for running some programs as root as it
    gives unlimited privileges to the normal user. Granting privileges using `sudo`
    is less dangerous and is the preferred method.
  prefs: []
  type: TYPE_NORMAL
- en: The `sudo` feature is used to assign more limited privileges to user accounts,
    based on the settings in the `/etc/sudoers` file. In this method, `sudo` requires
    the user to enter their own password for authentication and not the password of
    the account they are trying to access. This method allows them to delegate system
    administration tasks, without giving them access to the root password. We can
    also restrict the privileges of the user to a specific subset of commands; that
    is, he can execute only a limited number of specified commands as root. Any command
    executed using `sudo` is logged by default into the `/var/log/secure` log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute just one command with root privilege, type `sudo <command>`. After
    the execution of the command, you will return to being a normal unprivileged user.
    An example of using `sudo` to execute just the `iptables` command with root privileges
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9427e4c3-00ce-4abc-8971-d4ba5555f33a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The log of commands executed using `sudo` is stored in `/var/log/secure` as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd7ea3a7-ef85-4a88-bd3e-f0b15304cc27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example of granting a user rights to execute an admin command using `sudo`
    by making the required entry in the `/etc/sudoers` file is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d35457b7-a674-462b-911a-bbf1f4473d6a.png)'
  prefs: []
  type: TYPE_IMG
- en: In CentOS 7, all members of group wheel can use `sudo` to run any command as
    root by specifying their own password. This was not set as the default rule in
    the `/etc/sudoers` file in CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: Creating, modifying, or deleting local user accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple commands that can be used to manage local user accounts in
    CentOS 7\. This section covers only the most popular commands available in CentOS
    7 to manage local user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user with the useradd command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useradd` command, when run without options, creates a user account with
    default parameters. The default parameters are read from the `/etc/login.defs`
    file and include parameters such as valid UID, GID number, default password aging
    rules, and so on. Values from this file are used while creating a new user only.
    The syntax of `useradd` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`useradd --help` will display options that can be used with the `useradd` command
    to override the default parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using the `useradd` command to create a user account is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b06354fa-db8f-4513-a3e6-29851e2d70de.png)'
  prefs: []
  type: TYPE_IMG
- en: Apart from `useradd`, we can also use the `adduser` command to create a local
    user account in Linux. You can read more about `adduser` in the man page, using
    the man `adduser` command.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying a user with the usermod command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `usermod` command is used with various options to modify the existing user
    account parameters. The `usermod --help` command will display the various options
    that can be used. The syntax of `usermod` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists the common options used with `usermod` and their
    descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Options** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -c "Comments" <username>` | Add comments, such as the user''s full
    name, address, phone number, and so on, in the GECOS field. |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -g <gid> <username>` | Modify the user''s primary group. |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -G <groupname> <username>` | Modify the user''s secondary group.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -a -G <groupname> <user>` | Used with the `-G` option only. It appends
    the user to the secondary group mentioned, without removing the user from other
    groups. |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -s <shell> <username>` | Modify the login shell of the user account.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -L <username>` | Lock a user account. |'
  prefs: []
  type: TYPE_TB
- en: '| `usermod -U <username>` | Unlock a user account. |'
  prefs: []
  type: TYPE_TB
- en: 'An example of using the `usermod` command to modify the user''s login shell
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06bd9360-098c-4d4e-99e9-a94d1d95db2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command is used to view the associated `groups` of a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `usermod` command can be used to add a new secondary group in the existing
    secondary groups of a user. The following command will add a new secondary group
    wheel in the existing secondary groups of user `sam` as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c263fdd6-f217-422e-91de-c7d270159559.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a user account with the userdel command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `userdel` command is used to delete the existing user account. The `userdel`
    command can be used in two ways as mentioned follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`userdel <username>`: This removes the user entry from the `/etc/passwd` file,
    but leaves the user''s home directory and mail intact. This way of deleting a
    user account is not recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`userdel -r <username>`: This removes the user and the user''s home directory,
    along with the user''s mail box. This will remove the files owned by the user
    along with the user''s account from his home directory. An example of `userdel`
    command with option `-r` is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f280a2b2-622f-4fc6-8dc8-c50171a87542.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating, modifying, or deleting local group accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Groups are used for organizing users. A group is a collection of accounts with
    shared permissions. However, a group must exist before a user is added to that
    group. There are multiple commands that can be used to manage group accounts in
    CentOS 7\. This section covers only the most popular commands available in CentOS
    7 to manage local group accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Control of group membership is managed with the `/etc/group` file. It lists
    the group, along with its members.
  prefs: []
  type: TYPE_NORMAL
- en: Creating supplementary groups with groupadd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `groupadd` command can be used with multiple options to create a supplementary
    group for user accounts, or a system user group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table list the `groupadd` command with various options along
    with their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `groupadd <groupname>` | Creates a user private groups (GID 1000+) from the
    next available GID from the range given in the `/etc/login.defs` file |'
  prefs: []
  type: TYPE_TB
- en: '| `groupadd -g GID <groupname>` | Creates a user private group using the given
    GID |'
  prefs: []
  type: TYPE_TB
- en: '| `groupadd -r <groupname>` | Creates a system group using a GID from the default
    system group''s range (1-999), or as given in the `/etc/login.defs` file. |'
  prefs: []
  type: TYPE_TB
- en: 'An example of `groupadd` command usage is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2bc8e9e-f0a2-4ab4-823e-8cdc901b824c.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying existing groups with the groupmod command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `groupmod` command is used to modify group properties such as the group''s
    GID, group name, and so on. The example in following image shows how to use the `groupmod`
    command with the `-n` option to modify the `groupname` of a specified group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2569645-922b-428e-a324-fb4bbe251555.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `-g` option is used to assign a new GID to an existing `groupname` as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29449680-527a-458f-a590-ba3a64ec1d67.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting a group with the groupdel command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `groupdel` command is generally used to delete a group from the system
    if it is not the primary group of any existing user. The following command line
    shows how to delete a group named `appusers` from the system using the `groupdel`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Managing user passwords and aging policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers commands that are used to manage passwords and password
    aging parameters in the shadow password file available in CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a user password using the passwd command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `passwd` command is used to either set the user''s initial password or
    modify the user''s existing password. The syntax of the `passwd` command is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The root user can set the password for any user to any value without knowing
    his current password. For a regular user, the default policy is to use at least
    an eight-character password, and it should not be a dictionary word, or the username,
    or a previous password. An example updating a user''s password using the `passwd`
    command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c946d58e-3ec7-4fd8-b95c-02e87ec09ed4.png)'
  prefs: []
  type: TYPE_IMG
- en: Understanding the shadow password file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the early days of Linux''s evolution, encrypted passwords were stored in
    a human-readable file, `/etc/passwd`. This was considered a safe mechanism for
    keeping passwords until dictionary attacks on encrypted passwords became more
    prevalent. Now, to harden Linux security, the encrypted passwords (salted password
    hashes) are stored in the `/etc/shadow` file. This file also contains password
    aging policy parameters. Only those with root access can modify or read this file.
    We can view the last line of this file by executing the command line given as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of the preceding command, we get the following output, which displays
    the encrypted password along with the salt and various password aging parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding output, the second field of the `/etc/shadow` file is the
    password field and contains the following three pieces of information, separated
    by a `$` symbol, in the `/etc/shadow` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`6`: It represents the hashing algorithm used to encrypt the password. The
    number 1 indicates MD5 hashing, number 5 indicates SHA-256 hashing, and number
    6 indicates the SHA-512 hashing algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cKc/hj8V`: It represents the randomly chosen salt used to encrypt the hash.
    This salt and the unencrypted password are combined and encrypted to create the
    password hash. Use of the salt prevents two or more users with the same password
    from having identical entries in the `/etc/shadow` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JZPyiz6TMpz/YpPtSPdNARPd/gXxLqm3c0qHZinNmweXEpM/IMBYGiBYXZw7OuzLnr0YkFdZZifPvywkJYuqv0`:
    It is the encrypted hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the user enters his password at the login prompt, the system looks up the
    entry for the user in `/etc/shadow`, then combines the salt of the user with the unencrypted
    password and generates a hash value using the specified hashing algorithm. If
    the password matches, the user gets logged in; otherwise, the login attempt fails.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding password aging parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chage` command is used to list the existing password aging policy or to
    modify the policy. The `/etc/shadow` file contains nine colon-separated fields,
    which include both the encrypted password and the password aging policy. The following
    is the format of the information contained in the `/etc/shadow` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table lists the `/etc/shadow` file fields and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Login name | It is the user account login name on the local system. |'
  prefs: []
  type: TYPE_TB
- en: '| Password | It is an encrypted password. If this field contains the `!` symbol,
    then it means the password is locked. |'
  prefs: []
  type: TYPE_TB
- en: '| Lastchange | It is the date of the last password change, represented by the number
    of days since `01.01.1970`. |'
  prefs: []
  type: TYPE_TB
- en: '| Minimum age | It is the minimum number of days before which a password cannot be
    changed.`0` in this field means no minimum day requirement. |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum age | It is the maximum number of days after which the password must
    be changed. |'
  prefs: []
  type: TYPE_TB
- en: '| Warning Period | It is the number of days before password expiry, when the user
    starts getting a warning to change his password.`0` in this field means no warning
    would be given. |'
  prefs: []
  type: TYPE_TB
- en: '| Inactive | It is the number of days an account remains active after a password
    has expired. A user can still log in during this inactive period and change his
    password. After the specified number of days, the account will get locked and
    become inactive. |'
  prefs: []
  type: TYPE_TB
- en: '| Expiry date | It is the account expiration date, represented as the number
    of days since `01.01.1970`. |'
  prefs: []
  type: TYPE_TB
- en: '| Blank | A blank field reserved for future use. |'
  prefs: []
  type: TYPE_TB
- en: 'By default, passwords are set to not expire. Forcing passwords to expire is
    part of a strong security policy. We can modify the default expiration settings
    by making changes in the `/etc/login.defs` file. We can change the password aging
    policy using the `chage` command. The syntax of the `chage` command is given follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the `chage` command to list all existing password aging policy
    parameters for a user is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69117902-93a4-4e4a-abad-853b7e208f57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table lists the various options that are used with the `chage` command
    and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -l <username>` | Lists all the user''s current aging parameter settings
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -d 0 <username>` | Forces password change on next login |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -m 3 <username>` | Sets the minimum number of days a user can keep
    a password |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -M 30 <username>` | Sets the maximum number of days a user can keep
    a password (`-1` here means unlimited) |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -W 7 <username>` | Sets the number of days at which the user starts
    getting warnings before a password change |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -d YYY-MM-DD <username>` | Sets the last change date for a password
    (the `/etc/shadow` file stores the number of days starting from 1 Jan 1970) |'
  prefs: []
  type: TYPE_TB
- en: '| `Chage -E YYYY-MM-DD <username>` | Sets the password expiration date for
    the user (the `/etc/shadow` file stores the number of days starting from 1 Jan
    1970) |'
  prefs: []
  type: TYPE_TB
- en: 'An example of the `chage` command to modify various parameters is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb0f8bcc-f569-4aec-8b60-2eb27ca42cda.png)'
  prefs: []
  type: TYPE_IMG
- en: Restricting user access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the account expiration date set using the `chage` command is reached,
    the user cannot log in to the system interactively. Some parameters of the `chage`
    command can be set using `useradd` and `usermod`. The `usermod` command can be
    used to lock an account with the `-L` option as shown in follows command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also unlock the user account using the `-U` option as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Fake shell or nologin shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At times, we may need a user account with a password for authentication with
    a system, but do not require an interactive shell with that username. This helps
    in preventing the user account being used for logging in to the system with that
    password. In those scenarios, we can set the user''s shell to `/sbin/nologin`.
    If the user tries to log in to system, the `nologin` shell closes the connection
    of the user as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/421b31f1-fcdc-46a3-a0e1-9917879fecea.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of such a situation could be a mail server, where a user account
    is needed to store mail and passwords for the user to authenticate with the mail
    client and retrieve their mail; however, if the `/sbin/nologin` shell is assigned,
    then the user cannot log in to the system using that account.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began by learning about the different types of users and
    groups on CentOS 7\. This was followed by understanding the difference between
    `su` and `sudo` for temporarily granting root privileges to the user. Then, we
    learned about the management of local user accounts and local user groups. Finally,
    we looked at how passwords are set and stored in Linux and how password aging
    policies are implemented in CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about managing file permissions in CentOS
    7.
  prefs: []
  type: TYPE_NORMAL
