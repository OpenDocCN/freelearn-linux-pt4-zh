- en: Chapter 3. Extending Your Pi to Connect More Things
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：扩展你的树莓派以连接更多设备
- en: We're now going to look at ways to expand the number of things we can connect
    to our Raspberry Pi, overcoming the limitation of having just the 8 digital pins
    available. We're going to do this by building our own expansion board to give
    us what could in theory be an unlimited number of digital inputs and outputs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探讨如何扩展可以连接到树莓派的设备数量，克服仅有 8 个数字引脚的限制。我们将通过制作自己的扩展板来实现这一目标，这样理论上可以提供无限数量的数字输入和输出。
- en: We're also going to overcome the limitations of the +3.3V power available to
    us by building our own +3.3V power supply that taps off the Raspberry Pi's +5V
    supply.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将通过构建自己的 +3.3V 电源来克服 +3.3V 电源的限制，这个电源从树莓派的 +5V 电源中提取。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Looking at the I²C bus in detail
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细了解 I²C 总线
- en: Learning about serial-to-parallel and parallel-to-serial conversions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习串并转换与并串转换
- en: Building a +3.3V power supply
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个 +3.3V 电源
- en: Building an I2C-based port expander to give us more inputs and outputs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基于 I2C 的端口扩展器，提供更多的输入和输出
- en: Looking at alternative ready-made expansion boards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解替代的现成扩展板
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'Along with your Raspberry Pi, you''ll need the following parts for the projects
    in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中的项目中，除了树莓派，你还需要以下组件：
- en: A copper strip board (or Veroboard®)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块铜条板（或 Veroboard®）
- en: An LD1117V33 voltage regulator
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 LD1117V33 电压调节器
- en: A 2 x 100nF, 16V ceramic capacitor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 2 x 100nF，16V 的陶瓷电容
- en: A 10uF, 16V electrolytic capacitor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 10uF，16V 的电解电容
- en: A 1 x MCP23017 16-bit port expander IC
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 1 x MCP23017 16 位端口扩展器 IC
- en: A 4 x 10K-ohm resistor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一颗 4 x 10K 欧姆电阻
- en: A hook-up wire
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根连接线
- en: The I2C bus
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I2C 总线
- en: In the previous chapter, we briefly touched on the I2C bus (or Inter-Integrated
    Circuit bus), which is a way to connect multiple devices together using just two
    wires. I2C was invented in the early 1980s by Philips as a way to link computer
    peripherals together using a common protocol. You can think of I2C as a kind of
    early form of USB.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要介绍了 I2C 总线（或称为互联集成电路总线），这是一种通过仅用两根线将多个设备连接在一起的方法。I2C 是由飞利浦公司在1980年代初发明的，作为一种将计算机外设通过统一协议连接在一起的方式。你可以将
    I2C 看作一种早期形式的 USB。
- en: I2C typically operates at relatively low speeds of up to 100kbit/s, compared
    to much faster interfaces such as Ethernet, which typically operates at up to
    1Gbit/s, or USB, which can operate at up to 480Mbit/s. However, this is fast enough
    to connect basic sensors, display devices, or other peripherals such as real-time
    clocks—in fact; there are faster versions of the protocol that some devices will
    support.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与以太网（通常以高达 1Gbit/s 的速度运行）或 USB（最大可达 480Mbit/s）等接口相比，I2C 的速度通常较低，最高仅为 100kbit/s。然而，这对于连接基本传感器、显示设备或其他外设（如实时时钟）已经足够。事实上，I2C
    协议还有一些更快的版本，某些设备可能会支持。
- en: Just 2 wires
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅需 2 根线
- en: 'I2C is a bi-directional serial communication protocol that operates over two
    wires:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: I2C 是一种双向串行通信协议，通过两根线进行数据传输：
- en: The **Serial Data Line** (**SDA**) wire transmits the data to and from the master
    device. Referring back to the GPIO reference in Chapter 2, *Connecting Things
    to Your Pi with GPIO*, this is pin 3 of the GPIO connector.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行数据线** (**SDA**) 负责在主设备与从设备之间传输数据。参考第 2 章《使用 GPIO 连接设备到树莓派》中的 GPIO 引脚参考，这是
    GPIO 连接器的第 3 引脚。'
- en: The **Serial Clock Line** (**SCL**) wire handles all timing and flow control
    for the data on the bus. This is pin 5 of the GPIO connector.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**串行时钟线** (**SCL**) 负责控制总线上数据的时序和流量控制。这是 GPIO 连接器的第 5 引脚。'
- en: You'll remember that we spoke about pull-up resistors, in the previous chapter,
    which ensure that the GPIO digital inputs are pulled to a known state. Well, this
    is required for the two lines on the I2C bus, and by default the lines should
    be pulled high with resistors. However, on the Raspberry Pi, this has already
    been done for us, so we don't need to worry about it in our case.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该记得我们在上一章提到过的上拉电阻，它确保 GPIO 数字输入被拉到已知状态。对于 I2C 总线的两条线路，这也是必须的，默认情况下应该使用电阻将线路拉高。然而，在树莓派上，这已经为我们完成了，因此在我们的情况下不需要担心这个问题。
- en: What's your address?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的地址是什么？
- en: So, if we can use just two wires to communicate with multiple devices, how does
    our Raspberry Pi know which device to talk to? This is where the I2C protocol
    comes into its own. Each device connected to the bus has its own unique ID, or
    address, made up of 7-bits or 10-bits. Some devices will allow you to set the
    address to ensure that it's unique within your system, but other devices have
    their addresses hardcoded by the manufacturer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们只需要两根线就能与多个设备通信，树莓派如何知道与哪个设备通信呢？这就是I2C协议发挥作用的地方。每个连接到总线的设备都有自己独特的ID或地址，由7位或10位组成。有些设备允许您设置地址以确保它在系统中的唯一性，而其他设备则由制造商硬编码其地址。
- en: The two addressing methods (7- and 10-bit) are interoperable and you can have
    devices on the same bus that use either method, since the Raspberry Pi itself
    supports both methods. So, with a 10-bit addressing scheme, you can see that we
    can connect a lot of things to our Raspberry Pi using the I2C bus, as compared
    to the limited number of digital pins on the GPIO!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 两种寻址方法（7位和10位）是兼容的，您可以在同一总线上连接使用任一方法的设备，因为树莓派本身支持这两种方法。因此，使用10位寻址方案，您会发现我们可以通过I2C总线连接许多设备，而不仅仅是GPIO上的有限数字引脚！
- en: There is a parallel universe
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存在一个平行宇宙
- en: Data is normally transmitted in serial mode or parallel mode, depending on things
    such as the required data speed, cable distance, and functionality. Most data
    communication *between* systems is transmitted in serial mode over a couple of
    wires, such as the I2C bus mentioned earlier, but this also includes things such
    as the Ethernet, RS232/422, and USB.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据通常以串行模式或并行模式传输，具体取决于所需的数据传输速度、线路距离以及功能等因素。大多数系统之间的数据通信*是通过*串行模式在几根线路上传输的，例如之前提到的I2C总线，但这也包括以太网、RS232/422和USB等。
- en: Within a computer system, data is transmitted in parallel mode using *buses*
    whose width matches the word size of the digital system communicating between
    chips. In parallel mode, all bits of the data word are transmitted simultaneously
    over their respective data lines within the bus, rather than as sequential bits
    along a single line.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机系统中，数据是通过宽度与数字系统的字长相匹配的*总线*以并行模式传输的。在并行模式下，数据字的所有位同时通过各自的线路在总线上传输，而不是像串行模式那样按顺序在单一线路上传输。
- en: The digital I/O pins we've been talking about (including the ones on the Raspberry
    Pi's GPIO connector) are usually grouped together as a parallel bus. On our system,
    we'll be using parallel buses (groups of digital I/O pins) that are 8-bits wide.
    That is, the bus has 8 wires that can be set or read using 8-bit binary values
    (our word size).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论过的数字I/O引脚（包括树莓派GPIO连接器上的引脚）通常作为并行总线组合在一起。在我们的系统中，我们将使用宽度为8位的并行总线（即8位数字I/O引脚组）。也就是说，总线有8根线路，可以使用8位二进制值（我们的字长）进行设置或读取。
- en: '![There is a parallel universe](img/B04579_03_08.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![存在一个平行宇宙](img/B04579_03_08.jpg)'
- en: A representation of an 8-bit data bus
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 8位数据总线的表示
- en: 'So, in the preceding diagram we have the 8 digital I/O wires on our bus. If
    we wanted to make the bits (or wires) 0, 1, and 4 *high* or *on*, with the rest
    *low* or *off*, then we''d address the bus and set it to the following values:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在前面的图示中，我们有总线上的8根数字I/O线路。如果我们希望使线路0、1和4*为高电平*或*开启*，而其余线路*为低电平*或*关闭*，那么我们将对总线进行寻址并将其设置为以下值：
- en: In binary, this would be 00010011
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用二进制表示，这将是00010011
- en: In hex, this would be *0x13*
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用十六进制表示，这将是*0x13*
- en: In decimal, this would be 19 (represented by *16+2+1*)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用十进制表示，这将是19（由*16+2+1*表示）
- en: So, in other words, to switch on data lines 0, 1, and 4, we send the byte value,
    19, to the bus's address.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，要打开数据线0、1和4，我们将字节值19发送到总线的地址。
- en: Serial-to-parallel conversion
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 串行转并行转换
- en: So, now that we know what numbers to send to our bus to switch on or switch
    off certain digital outputs, or read certain digital inputs, how do we do this
    using our I2C bus, which is a serial interface?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在我们知道了如何通过我们的I2C总线，使用串行接口打开或关闭某些数字输出，或者读取某些数字输入，接下来该如何操作呢？
- en: Fortunately, there are many **integrated circuits** (**ICs**) available that
    allow us to do this simply and easily. These ICs are called **shift registers**
    and perform **serial-to-parallel conversions**, taking the data from the serial
    I2C bus and converting the incoming bits to a parallel representation by setting
    each of the parallel bus outputs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: When reading the parallel bus data lines as inputs, the reverse happens, converting
    the bits into a serial form on the I2C bus; this is known as **parallel-to-serial**
    conversion.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: This is quite a simplistic overview and there are many resources available that
    explain these operations; we'll see this in action later in the chapter, but first…
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Give me power
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll remember from the previous chapter that most things to do with the GPIO
    operate on a +3.3V level, rather than the +5V level that is often associated with
    digital circuits. This is the same with our I2C-based shift registers—they need
    to operate on +3.3V levels as well, in order to work with the Raspberry Pi.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: You'll also recall, however, that there's not much +3.3V juice available directly
    from the Raspberry Pi—in fact, just 50mA. This is really not enough for our interface.
    So, before we go any further, we're going to build our own +3.3V power supply,
    which is sufficient for our system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: For our power supply, we're going to use a basic 3.3V **voltage regulator**
    (type **LD1117V33**) that will take our slightly more plentiful +5V supply from
    the Raspberry Pi and regulate it to a nice smooth +3.3V supply. We should be able
    to draw a few hundred milliamps from this supply—enough for the I/O circuitry
    on our security system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The parts required for our power supply are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: A LD1117V33 voltage regulator
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 100nF, 16V ceramic capacitor
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 10uF, 16V electrolytic capacitor
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the circuit diagram for our +3.3V power supply:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Give me power](img/B04579_03_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: As with all our components, the LD1117V33 regulator is widely available from
    many electronic component suppliers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Our power supply can be easily built on a small piece of strip board like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Give me power](img/B04579_03_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The strip board is shown from the top in the preceding layout. That is, the
    copper tracks are on the underside of the board and the components are inserted
    from the plain top-side and soldered to the strips underneath. In this layout,
    it's not necessary to cut any of the tracks on the strip board.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Building an I2C expander
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right, now that we've worked out what we need to do to give us more digital
    I/O pins, and built our power supply for it, we can build our expansion port.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we''re going to use a chip designed exactly for the job: the **MCP23017**,
    manufactured by Microchip and widely available from electronic suppliers.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The MCP23017 is an integrated circuit that connects directly to the I2C bus
    (the SDA and SCL pins we talked about earlier) and gives us 16 bi-directional
    input and output pins. If required, we can connect up to 8 of these chips to the
    same bus, giving us up to 128 inputs and outputs (yes, I know that I said "virtually
    unlimited" previously, but I'll explain later).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an I2C expander](img/B04579_03_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: An MCP23017 integrated circuit pinout
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The full datasheet for the MCP23017 is available on Microchip's site, which
    can be found at [www.microchip.com/MCP23017](http://www.microchip.com/MCP23017).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The I2C port expander circuit
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic parts you will need to build your port expander are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: A 1 x MCP23017 16-bit port expander IC
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 4 x 10K-ohm resistor
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 1 x 100nF, 16V ceramic capacitor
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copper strip board (or Veroboard®)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hook-up wire
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the circuit diagram for our I2C port expander circuit. It looks complicated,
    but actually most of the lines are for connections to the outside world:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![The I2C port expander circuit](img/B04579_03_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Let's walk through the circuit
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the right-hand side, the connector, CN1, is our Raspberry Pi GPIO connector—note
    that we''re only using four of the pins:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The +5V Output (Pin 2)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The I2C SDA (Pin 3)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The I2C SCL (Pin 5)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 0V/GND (Pin 6)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll see my friend, the +3.3V regulator (U1, C1, and C2), discussed earlier.
    This takes the +5V output from the Raspberry Pi and gives us our +3.3V for use
    by the rest of the circuit.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The main component is U2—our **MCP23017** **port expander** chip. Pins 9 and
    10 on the chip are connected to the +3.3V supply and the GND, respectively, and
    C3 is used as a discoupling capacitor close to the chip to reduce any noise on
    the power supply.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'The MCP23017 can be used as a 16-bit expander, or as 2 x 8-bit expanders. In
    our circuit, we have split the device to give us 2 x 8-bit busses: I/O Bus A and
    I/O Bus B. Each pin on the busses can be programmed to work as an input or output.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Connecting things to the input/output pins**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The input and output pins on our busses can't usually be connected to things
    directly—they provide limited current and need to be interfaced correctly to things
    such as buzzers and lights; they must also be protected against damaging input
    signals. In the next chapter, we'll learn how to connect safely to our I/O ports.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The I2C SDA/SCL lines from the Raspberry Pi are connected to pins 12 and 13
    of the chip. You'll see that there are also additional I2C outputs (PL1 to PL3)
    to illustrate that we can connect other devices to the I2C bus, such as another
    MCP23017 chip to give us a further 16 digital I/Os.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Resistor R1 is used to hold the RESET pin (18) high. By bringing this pin low,
    you can reset the chip.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Resistors R2 to R4 are used to hold the address pins A0 to A2 (pins 15-17) low.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '**Highs and lows**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: When we use the terms *high* and *low* in respect to digital pins or inputs,
    we are simply describing whether the logic level of the pin is at a binary 1 or
    0, respectively. Digital pins don't like to be left *floating*—whereby they are
    neither high nor low—as this can cause unpredictable operations. Therefore, we
    always make sure they are held at a determined logic level. In general, connecting
    the pin to 0V (or ground) ensures that it's held at logic level 0, and connecting
    to the positive supply (e.g. 3.3V) ensures that it's held at logic level 1.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用术语*高*和*低*来描述数字引脚或输入时，我们只是简单地描述引脚的逻辑电平分别是二进制1或0。数字引脚不喜欢处于*浮空*状态——即既不高也不低——因为这会导致不可预测的操作。因此，我们始终确保它们保持在确定的逻辑电平。一般来说，将引脚连接到0V（或地）可以确保它保持在逻辑电平0，将其连接到正电源（如3.3V）则可以确保它保持在逻辑电平1。
- en: Remember I mentioned earlier that you can connect a large number of devices
    to the I2C bus in order to give us a virtually unlimited number of I/O pins? Well,
    actually in many cases, this is not strictly true. This is because of the addressing
    scheme for I2C devices, which makes all devices identifiable when they are all
    connected to the same two wires (their unique address). The address of each device
    is agreed upon in advance by manufacturers to make sure that everyone's devices
    will work together on the same bus without creating conflicts. As such, the address
    is pre-programmed into the device.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我之前提到过，你可以将大量设备连接到I2C总线上，从而为我们提供几乎无限的I/O引脚？实际上，在许多情况下，这并不完全正确。这是因为I2C设备的寻址方式，使得当所有设备都连接到同一根两线时（通过其唯一的地址），所有设备都可以被识别。每个设备的地址是由制造商事先约定好的，以确保大家的设备能够在同一总线上正常工作，不会产生冲突。因此，地址是预先编程到设备中的。
- en: The MCP23017 has been given its unique base address, but can be modified by
    changing the address pins A0-A2 high or low; thus, in effect, it can be configured
    to be one of 8 addresses. This is why you can only have a maximum of 8 of these
    chips on the same I2C bus, giving us a theoretical maximum of 128 I/O pins (that
    is, 16 I/Os x 8 chips).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: MCP23017已经赋予了一个唯一的基本地址，但可以通过将地址引脚A0-A2设置为高或低来修改；因此，实际上，它可以配置为8个地址中的一个。这就是为什么你只能在同一I2C总线上使用最多8个此类芯片，从而为我们提供理论上的最大128个I/O引脚（即16个I/O
    x 8个芯片）。
- en: Building your expansion board
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建你的扩展板
- en: This circuit can easily be built on a small piece of stripboard. The following
    image shows an example of the layout, which looks a bit simpler than the circuit
    diagram. In the next chapter, we'll learn how to connect up our board and program
    it so we can check that it works.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路可以轻松地在一小块条形板上构建。下面的图片显示了布局的示例，显得比电路图要简单一些。在下一章中，我们将学习如何连接我们的板并编程，以便检查它是否正常工作。
- en: '![Building your expansion board](img/B04579_03_05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![构建你的扩展板](img/B04579_03_05.jpg)'
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using stripboard, make sure that you cut the tracks between the two rows
    of pins on the MCP23017 so that they aren't shorted together. You can buy track
    cutters, which make this task easy, from many electronic suppliers. Again, on
    the preceding layout, the copper strips are underneath the board with the components
    on the plain side.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用条形板时，确保你切断MCP23017两排针脚之间的走线，以免它们短路。你可以从许多电子供应商处购买走线切割工具，这样可以轻松完成这项任务。再次提醒，前面提到的布局中，铜条位于板子下方，元件则位于平面侧。
- en: You might want to add the +3.3V power supply circuit to the same piece of stripboard
    too, to keep everything contained together.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想将+3.3V电源电路加到同一块条形板上，这样可以将所有部件集成在一起。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the next chapter, we will learn how to program the device so that we can
    use it in our home security system.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何编程设备，以便我们能将其用于我们的家庭安防系统。
- en: Using ready-made expansion boards
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用现成的扩展板
- en: While it's much more satisfying to build your own stuff, you might want to look
    at buying some readily available expansion boards for your home security system
    if you're not yet confident with your soldering iron, or if you just simply don't
    have the time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然自己动手制作设备更令人满足，但如果你还不自信使用焊接铁，或者只是简单地没有时间，你可能会想购买一些现成的扩展板用于你的家庭安防系统。
- en: Following are some ready-made expansion boards that you can obtain; they should
    work as part of our home security system with a bit of modification to our scripts
    to support the libraries that are required by the hardware.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些现成的扩展板，你可以获取；它们应该可以在我们稍作修改脚本、以支持硬件所需的库后，作为我们家庭安防系统的一部分使用。
- en: Hobbytronics MCP23017 expander port kit
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hobbytronics MCP23017扩展端口套件
- en: This kit is almost identical to our own circuit in the previous section of this
    chapter. The kit comes with an MCP23017, a PCB, and various connectors. The boards
    are designed to be daisy-chained together so that you can have multiple expanders
    to give you more input/output ports. Note that this kit is not pre-built and requires
    soldering, but I thought I'd include it because it's the board that I use to build
    such systems when prototyping. You can get it directly from Hobbytronics at [http://bit.ly/mcp23017](http://bit.ly/mcp23017).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个套件几乎与本章前面部分中我们自己的电路完全相同。该套件包括一个MCP23017芯片、一个PCB和各种连接器。板卡设计成可以串联在一起，因此你可以拥有多个扩展板，以便为你提供更多的输入/输出端口。请注意，这个套件不是预组装的，需要焊接，但我认为我应该把它包括在内，因为它是我在原型设计时用来构建这种系统的板卡。你可以直接从Hobbytronics购买，[http://bit.ly/mcp23017](http://bit.ly/mcp23017)。
- en: PiFace Digital I/O expansion board
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PiFace数字I/O扩展板
- en: The **PiFace Digital I/O expansion board** is a pre-built version of our board,
    but it uses the **MSP23S17** chip variant that operates over the **SPI bus** instead
    of the I2C bus. The board is designed with 8 inputs and 8 outputs, as well as
    several additional pieces of hardware including a couple of relays, some LEDs,
    and some switches. Note that the code in this book for our system will need to
    be modified to work with this board, since it uses a different interface and different
    libraries. It's available from Farnell element14 at [http://bit.ly/2434230](http://bit.ly/2434230).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**PiFace数字I/O扩展板**是我们板卡的预组装版本，但它使用的是**MSP23S17**芯片变体，该芯片通过**SPI总线**工作，而不是I2C总线。该板设计有8个输入和8个输出，以及若干其他硬件组件，包括几个继电器、一些LED和开关。请注意，本书中针对我们系统的代码需要修改，以便与此板兼容，因为它使用了不同的接口和不同的库。你可以从Farnell
    element14购买，[http://bit.ly/2434230](http://bit.ly/2434230)。'
- en: '![PiFace Digital I/O expansion board](img/B04579_03_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![PiFace数字I/O扩展板](img/B04579_03_06.jpg)'
- en: The PiFace Digital I/O Expansion Board
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: PiFace数字I/O扩展板
- en: Gertboard
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gertboard
- en: The **Gertboard** is a Raspberry Pi add-on board designed by Gert van Loo—one
    of the hardware engineers involved in the original design of the Raspberry Pi.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gertboard**是一个Raspberry Pi附加板，由Gert van Loo设计——他是参与原始Raspberry Pi设计的硬件工程师之一。'
- en: It's a very capable and reasonably-priced board that comes fully assembled and
    features 12 buffered input/output lines, open collector drivers for switching
    on devices that need a fair bit of current (such as sounders and lights), plus
    a digital-to-analog converter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一款功能强大且价格合理的板卡，已完全组装，具备12个缓冲的输入/输出线，适用于开启需要较大电流的设备（如蜂鸣器和灯光）的开集电极驱动器，还包括一个数字转模拟转换器。
- en: You can only connect one of these boards to your Raspberry Pi, so if you need
    more I/O lines you'll need to use something else as well. But it's a great board
    to experiment with. Interestingly, it features an **ATmega microcontroller**,
    which is the same as the one that the Arduino uses, and you can, in fact, use
    the **Arduino** development environment for the device.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能将一个这样的板卡连接到你的Raspberry Pi，因此如果需要更多的I/O线，你还需要使用其他设备。但它是一个非常适合实验的板卡。有趣的是，它配备了**ATmega微控制器**，这是Arduino使用的相同微控制器，而且你实际上可以为该设备使用**Arduino**开发环境。
- en: Once again, the code in this book for our system will need to be modified to
    work with this board.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，本书中针对我们系统的代码需要修改，以便与此板兼容。
- en: The Gertboard is available from Farnell element14 at [http://bit.ly/2250034](http://bit.ly/2250034).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Gertboard可通过Farnell element14购买，[http://bit.ly/2250034](http://bit.ly/2250034)。
- en: '![Gertboard](img/B04579_03_07.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Gertboard](img/B04579_03_07.jpg)'
- en: Assembled Gertboard
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 组装好的Gertboard
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've now looked at the I2C bus in detail, and learned how to build an expansion
    port using this interface so that we can connect many more things to our Raspberry
    Pi, rather than being restricted to just the 8 digital I/O pins offered by the
    Raspberry Pi's GPIO port. In addition to that, we explored other ready-made boards
    that can be used to connect lots of things to our Raspberry Pi. We have also built
    a power supply that will give us more +3.3V power than we can obtain from the
    Raspberry Pi directly.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经详细了解了I2C总线，并学习了如何使用这种接口构建扩展端口，以便可以连接更多设备到我们的Raspberry Pi，而不再仅限于Raspberry
    Pi的GPIO端口提供的8个数字I/O引脚。此外，我们还探索了其他现成的板卡，可以用于连接更多设备到Raspberry Pi。我们还构建了一个电源供应器，可以提供比Raspberry
    Pi直接提供的更多的+3.3V电力。
- en: In the next chapter, we'll start to actually connect things to our home security
    system, such as magnetic sensors and other types of contact devices, and learn
    how to program our I2C expansion port using Bash scripts so that we can read the
    state of our sensors and switch on warning LEDs. We'll also start developing the
    control scripts for our system, which will allow us to arm and disarm the system
    and add delay timers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将开始实际连接到我们的家庭安全系统，例如磁性传感器和其他类型的接触设备，并学习如何使用 Bash 脚本编程我们的 I2C 扩展端口，以便读取传感器的状态并开启警告
    LED。我们还将开始开发系统的控制脚本，这将使我们能够布防和撤防系统，并添加延迟定时器。
