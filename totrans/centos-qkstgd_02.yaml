- en: Command-Line and Filesystem Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, our objective is to identify the purpose of important directories
    in the CentOS 7 filesystem, and to learn various basic command-line skills. When
    we are working on the command line, it is essential that we have a clear picture
    of the filesystem hierarchy, layout, and organization in mind. We will go through
    the variety of documentation that exists on CentOS 7, including man pages, info
    pages, `help` command options, and so on. Thereafter, we will learn various filesystem
    navigation and management commands for changing directories, copying, moving,
    and renaming files, and so on. Finally, we'll learn about archiving and compressing
    files, which are very often required when creating backups.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the CentOS 7 filesystem hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using man pages and the `help` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing filenames with path expansion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing files using command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing archives and compressed files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CentOS 7 filesystem hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can compare a filesystem to a refrigerator, or any other storage with multiple
    shelves that is used for storing different items. These shelves or compartments
    help us to organize grocery items in our refrigerator by certain characteristics,
    such as shape, size, type, and so on. The same analogy is applicable to a filesystem,
    which is the epitome of storing and organizing collections of data and files in
    human-usable form.
  prefs: []
  type: TYPE_NORMAL
- en: 'A filesystem is organized in an inverted root tree design with `/`(a forward
    slash; pronounced root) as the root of the filesystem, and underneath `/`, we
    see therest of the directories and subdirectories, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab44a1b3-da36-40a5-90d1-04c7b146b191.png)'
  prefs: []
  type: TYPE_IMG
- en: Important filesystem directories in CentOS 7
  prefs: []
  type: TYPE_NORMAL
- en: This layout of the filesystem hierarchy is described in the Linux Filesystem
    Hierarchy Standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `/` represents two things:'
  prefs: []
  type: TYPE_NORMAL
- en: The root directory at the top of the filesystem hierarchy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also used as a directory separator to separate one directory from another.
    For example, the `home` directory is inside the **`/`** directory; hence, it is
    referred to as `/home/`. Similarly, if we have another directory, `alice`, above
    the `/home` directory, it is represented as `/home/alice/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each directory is used for the standard purpose of organizing files of a particular
    type and purpose. Any directory can contain four types of content, as shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Content type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Static | This type of content remains unmodified until explicitly edited
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic or variable | This type of content generally gets modified continuously
    |'
  prefs: []
  type: TYPE_TB
- en: '| Persistent | This type of content retains changes made even after reboot,
    for example, configuration files |'
  prefs: []
  type: TYPE_TB
- en: '| Runtime | This type of content mostly resides in memory and its contents
    are cleared on reboot, for example, files used by processes of the system |'
  prefs: []
  type: TYPE_TB
- en: 'The following table lists the location and purpose of important directories
    in CentOS 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Location** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| `/boot` | Contains files required to start the boot process of CentOS 7,
    including the GRUB configuration file, the kernel image (`vmlinuz`), the RAM disk
    file (`initramfs`), and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `/dev` | Contains special device files used by the system to access hardware
    and software devices such as `/dev/sda` (for the hard disk drive), or `/dev/pts1`
    (for representing a psuedo Terminal). |'
  prefs: []
  type: TYPE_TB
- en: '| `/etc` | Contains configuration files for applications (`resolv.conf`, `passwd`,
    and so on) installed on this particular system for system-wide changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `/root` | The home directory of the root user, also known as superuser. |'
  prefs: []
  type: TYPE_TB
- en: '| `/home` | Contains home directories of normal users for storing their personal
    files. |'
  prefs: []
  type: TYPE_TB
- en: '| `/run` | Contains runtime data, variables, process IDs, lock files, and so
    on for processes started since the last boot. The contents of this directory are
    regenerated upon restarting the system (in CentOS 6, its contents were stored
    in `/var/run` and `/var/lock`). One of the important subdirectories in this directory
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/run/media`: Used as a mount point for removable devices such as USB, CDs,
    DVDs, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/var` | Contains the variable data, specific to the system that persists
    across reboots. The content and size of these files change dynamically (for example
    log files, printer-spooled documents, website content, and FTP content) as the
    system is running.The `/var` directory can be put in its own filesystem so that
    the growth of files does not fatally affect the system. |'
  prefs: []
  type: TYPE_TB
- en: '| `/tmp` | Contains temporary files; has write permissions enabled for all
    users on the system. The files that have not been accessed, modified, or changed
    in last 10 days are deleted automatically from this directory. Another temporary
    storage directory in our system is `/var/tmp`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/usr` | Contains application files, shared libraries, and documentation.
    The files in this directory are static, read-only, and shareable. It also has
    three important sub-directories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/usr/bin`: Contains essential user commands (`ps`, `ls`, `cp`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/sbin`: Contains system administration commands (`fsck`, `shutdown`, and
    so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/local`: Contains data and program specific to the local machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`/usr/include`**: Contains header files used to compile applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `/bin` | A symbolic link to `/usr/bin`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/sbin` | A symbolic link to `/usr/sbin`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/lib` | A symbolic link to `/usr/lib`; contains shared libraries used by
    applications stored in `bin` and `/sbin`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/lib64` | A symbolic link to `/usr/lib64` and contains the 64-bit shared
    libraries used by applications stored in `/bin` and `/sbin`. |'
  prefs: []
  type: TYPE_TB
- en: '| `/mnt` | This directory is used as temporary mount point for partitions and
    devices in the filesystem tree, such as for the mounting of NFS filesystems. |'
  prefs: []
  type: TYPE_TB
- en: '| `/proc` | Contains the virtual filesystem (as in, it exists only in memory);
    also known as a psuedo-filesystem of the kernel. It contains dynamic runtime system
    information (for example, system memory, devices mounted, hardware configuration,
    and so on) and is considered the control and information center of the kernel.
    Some utilities directly call the files stored in this directory and display the
    information such as free memory using the `/proc/meminfo` file and arp table info
    using the `/proc/net/arp` file, and so on. |'
  prefs: []
  type: TYPE_TB
- en: For detailed info on the Linux Filesystem Hierarchy Standard, you can refer
    to the *Using the man command* section, and [https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/](https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/)
    for an online reference.
  prefs: []
  type: TYPE_NORMAL
- en: Using man pages and the help command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could spend a good amount of time learning CentOS 7; it is equivalent to
    serving you cooked food, but in place of this, we could actually learn how to
    cook, so that you'll be able to make your own different recipes. Linux has one
    of the best and largest bodies of documentation in the operating system for most
    of the commands and their options. Whether you are an experienced user or a beginner,
    you will never remember the exact use of all the Linux commands and utilities,
    each with its own multiple options. It is in this case that Linux documentation
    comes to our rescue.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of documentation available in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple sources of documentation available in Linux for learning
    how to use different commands and their options, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0804b16-4c6c-4369-a011-38cc65b8585b.png)'
  prefs: []
  type: TYPE_IMG
- en: Different types of documentation in Linux
  prefs: []
  type: TYPE_NORMAL
- en: Using the man command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Man** (short for **manual**) pages are the most used source of Linux documentation
    for various programs, utilities, system calls, library files, configuration files,
    and kernels that exist within the system. The whole man documentation is organized
    in nine sections, where each section caters for a particular type of documentation.
    By default, if there are multiple sections for one command, it displays the documentation
    from the first section it encounters. The syntax for `man` command usage is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Upon execution of the preceding command, the specified topic's contents will
    be displayed on one screen at a time. Use the arrow keys for scrolling line by
    line, or press the Space bar for the next screen. By default, man pages are opened
    in the less viewer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the man page navigation command keys and their description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Space bar/*Page Down* | Scroll down one screen |'
  prefs: []
  type: TYPE_TB
- en: '| *Page Up* | Scroll up one screen |'
  prefs: []
  type: TYPE_TB
- en: '| Down arrow (*↓*) | Scroll down a single line |'
  prefs: []
  type: TYPE_TB
- en: '| Up arrow (*↑*) | Scroll up a single line |'
  prefs: []
  type: TYPE_TB
- en: '| */string* | Search forward (down) for the given string in the man page |'
  prefs: []
  type: TYPE_TB
- en: '| *?string* | Search backward (up) for the given string in the man page |'
  prefs: []
  type: TYPE_TB
- en: '| *n* | Repeat the previous search forward in the man page |'
  prefs: []
  type: TYPE_TB
- en: '| *N* | Repeat the previous search backward in the man page |'
  prefs: []
  type: TYPE_TB
- en: '| *q* | Exit the man and return to the prompt |'
  prefs: []
  type: TYPE_TB
- en: '| *g*/*Home* | Go to the start of the man page |'
  prefs: []
  type: TYPE_TB
- en: '| *G*/*End* | Go to the end of the man page |'
  prefs: []
  type: TYPE_TB
- en: 'Some useful options that are used with the `man` command include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ man -f <topic name>`: Gives a brief description of that topic (the equivalent
    of the `whatis` command). See the following screenshot for usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e5b4b457-a591-451f-8a01-7b81bbb978de.png)'
  prefs: []
  type: TYPE_IMG
- en: '`$ man -k <topic name>`: Lists all the matching pages that discuss a specified
    topic in their man pages (the equivalent of `apropos`). See the following screenshot
    for usage:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a9193058-9904-4130-8973-e78146f660f1.png)'
  prefs: []
  type: TYPE_IMG
- en: '`$ man -a <topic name>`: Displays, in sequence, all the man pages with the
    given topic name from all sections. For example, `man -a passwd` will list all
    the man pages containing `passwd` in any section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ man <section number> <topic name>`: Forces the `man` command to display
    topic documentation from a given section. Otherwise, by default, it displays the
    most popular section when used without a section number, as shown in the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91fa39ac-beac-4e97-a53e-8d1c52c7419b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `man` command with a specified section lists the documentation from that
    particular section as shown in following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abffebb4-c9ea-4833-b167-6008322419bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the GNU info command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next source of documentation in Linux is GNU info pages, where the topics
    are connected using hyperlinks. The documentation contained in info pages can
    be read through the command line using `info` or `pinfo` commands, or with the
    help of a graphical utility. Some commands and utilities have both info and man
    documentation, but info documentation will usually be more in-depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topic viewed in the info page is known as a **node**. Each node can include
    menus and subtopics known as **items**. Item names are prefixed with an asterisk
    (`*`) symbol. You can browse through the topic list using the regular keys (the
    arrow keys, *Page Up* and *Page Down*). The following table lists the most commonly
    used keys for navigation inside info pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| *Page Down* or Space bar | Scroll forward one screen |'
  prefs: []
  type: TYPE_TB
- en: '| *Page Up* or b | Scroll up one screen |'
  prefs: []
  type: TYPE_TB
- en: '| *n* | Go to the next node |'
  prefs: []
  type: TYPE_TB
- en: '| *p* | Go to the previous node |'
  prefs: []
  type: TYPE_TB
- en: '| *u* | Move one node up in the index |'
  prefs: []
  type: TYPE_TB
- en: '| *Tab* | Move to next hyperlink (node) |'
  prefs: []
  type: TYPE_TB
- en: '| *Enter* | Select the node and display the content of the current cursor location
    |'
  prefs: []
  type: TYPE_TB
- en: '| *q* | Quit viewing the info page |'
  prefs: []
  type: TYPE_TB
- en: '| */string* | Search for a string in the open document |'
  prefs: []
  type: TYPE_TB
- en: '| /<*Enter* Key> | Repeat the previous search forward |'
  prefs: []
  type: TYPE_TB
- en: 'Typing the `info` command without any argument in Terminal displays an index
    of available topics as shown in following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90633946-74b6-4d0a-a883-226846ce3ae2.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the help command and the --help option
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `help` command is another important source of documentation that exists
    in Linux. Most Linux commands have a short description that can be viewed using
    the `--help` or the `-h` option, along with the command or application name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can learn more about the `mkdir` command by running it with
    the `--help` option, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edef2c34-6c09-47c0-9dac-cbea33fdda55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `--help` option is quite handy as a quick reference, as it displays limited
    information for using various options associated with the given command. Executing
    the `help` command on its own displays the list of built-in internal commands
    in Bash. You can also display the help info for these built-in commands by typing
    `help`, followed by the internal command name, as shown in following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f00980d-0738-4f7b-93cf-07b36c1de715.png)'
  prefs: []
  type: TYPE_IMG
- en: Other sources of documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to `man` and `pinfo`, page developers may also include documentation
    in the application's RPM package. This documentation is installed on package installation
    and is conventionally stored in the `/usr/share/doc/<packagename>` directory.
    It contains any other relevant information that the developers want to share but
    that is not available in the man page of that package. You may find PDF, HTML,
    or TXT file-based documentation, license agreements, sample configuration files,
    and so on inside these directories.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the preceding sources of documentation, if you have a GUI installed,
    then `gnome-help` or `Khelpcenter` are other sources of documentation available
    on the system. The online community of CentOS 7 also contains vast resources of
    documentation and help. Each Linux distribution has its own user-driven forums
    and Wiki sections.
  prefs: []
  type: TYPE_NORMAL
- en: The CentOS documentation is available at [https://www.centos.org/docs/](https://www.centos.org/docs/),
    but is being merged with the RHEL documentation at [http://access.redhat.com](http://access.redhat.com),
    as CentOS has limited resources by comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful commands that give descriptions of other commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Whatis`: This command displays a short description of binaries available in
    the Linux system. Its database is updated daily in CentOS 7 with the help of another
    command, `makewhatis`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Whereis`: This command locates the binary, source, and manual pages of the
    given command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Which`: This command takes one or more command names as argument, and returns
    the absolute path of the given command name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing filenames with path expansion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see the meta-characters and expansion technique that
    can improve file management efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: File globbing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bash shell can match a pathname based on some meta-characters. This feature
    is known as **file globbing**. The pathname matching capability was historically
    called globbing (also known as pattern-matching or wildcard matching) for managing
    a large number of files. It expands the meta-characters used in filenames and
    pathnames.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using file globbing for matching filenames or pathnames, the meta-characters
    are replaced by the list of matching pathnames prior to command execution. The
    following table lists the pattern and its corresponding result:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pattern** | **Result** |'
  prefs: []
  type: TYPE_TB
- en: '| `?` | Matches any single character |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Matches any string of characters (0 or more) |'
  prefs: []
  type: TYPE_TB
- en: '| `[set]` | Matches any character in the set; for example, `[akl]` will match
    any single occurrence of `a`, `k`, `l` |'
  prefs: []
  type: TYPE_TB
- en: '| `[!set]` or `[^set]` | Matches any character not specified in the set of
    characters |'
  prefs: []
  type: TYPE_TB
- en: '| `~` | Matches the current user''s home directory (known as tilde expansion)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `~username` | Matches username''s home directory |'
  prefs: []
  type: TYPE_TB
- en: Wildcard expansion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To search for a file using the `?` wildcard, replace each unknown character
    with `?`, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ls /etc/???.conf` will list the `conf` files with names that consist only
    of three characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To search for files using the `*` wildcard, replace the unknown string with
    `*`, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ls /etc/*.conf` will list all `conf` files inside the `/etc/` directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The result of the preceding command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bf1d86a-95c9-4cc5-9449-4b1801b4e5ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Tilde expansion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tilde character, `~`, if immediately followed by a forward slash, `/`,
    matches the current user''s home directory, as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19dbdc9b-f560-4c0d-bba6-9c396e276aec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tilde character, `~`, if immediately followed by a string and then a forward
    slash, `/`, matches the username as specified in the string, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/147777d2-80ac-4e68-b49b-28b6661b7756.png)'
  prefs: []
  type: TYPE_IMG
- en: Brace expansion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Brace expansion generates a set of strings of characters. Inside braces, we
    specify a comma-separated list of strings or a sequence expression, which is either
    preceded or followed by text to append in the string supplied between braces,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00dba4b0-0bf7-45ae-97d4-f3ae72424982.png)'
  prefs: []
  type: TYPE_IMG
- en: Command substitution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Command substitution allows the output of a command to be stored in a variable; the
    command can be replaced by itself. There are two methods for performing command
    substitution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enclosing the command within backticks, as in `` `command` ``. Use of backticks
    is an older method, and has two disadvantages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backticks are sometimes confused with single quotation marks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Backticks cannot be nested inside other backticks, so nested command substitution
    is not possible
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enclosing the command with an initial dollar sign and parentheses, as in `$(command)`.
    This overcomes the disadvantages of backticks when used in command substitution
    as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2584d48e-f022-42f2-adf9-46a834698987.png)'
  prefs: []
  type: TYPE_IMG
- en: Quoting and escaping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are certain characters in bash shell that have special meaning, they
    are also known as meta-characters. Bash meta-characters enhance the flexibility,
    power and usage of bash. Examples of meta-characters are asterisk (`*`), question
    mark (`?`), hyphen (`-`), exclamation (`!`), and so on. The usage of expansion
    meta-character exclamation (`!`) is explained in [Chapter 1](fa67ebb4-281e-44be-a28e-c3fb587bebc7.xhtml), *Getting
    Started with CentOS 7*, in the *The history command* section. Quoting and escaping
    are used inside the bash shell to protect meta-character expansion:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Escaping**: The backslash (`\`) is an escape character that protects the
    special interpretation of the character immediately followed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quoting**: To protect longer character strings, enclose them inside single
    (`''`) or double (`"`) quotes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Double quotes** (**"**): Using double quotes suppresses globbing and shell
    expansion; however, it allows command and variable substitution, as shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ce96a22f-097a-4f22-9ef0-94c461db4254.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Single quotes ('')**: Using single quotes suppresses all kinds of expansion,
    and everything within single quotes is treated as literal characters without any
    special meaning, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9a675c25-6e39-4ac5-b55c-232a1f6ce07c.png)'
  prefs: []
  type: TYPE_IMG
- en: File naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A file or folder name is a string used to identify a file. It can consist of
    255 characters, including alphabetical letters, numbers, and special characters,
    excluding (`/`), which is used as the directory separator. You can include special
    characters (meta-characters); however, use of certain characters in filenames
    is not advisable, including `'`, `"`, `$`, `#`, `!`, and so on, because of their
    special interpretation by the shell.
  prefs: []
  type: TYPE_NORMAL
- en: Linux is case-sensitive as well as space-sensitive, so filenames are also case-sensitive.
    This means if we create files with the name `data.txt` and `Data.txt` in the same
    directory, then it results in two unique files.
  prefs: []
  type: TYPE_NORMAL
- en: The space is an acceptable character in Linux filenames; however, a space is
    also used as a delimiter by the command shell for command-line syntax interpretation,
    so it is generally not advised to use spaces in filenames in case this leads to
    ambiguity when executing commands.
  prefs: []
  type: TYPE_NORMAL
- en: Managing files using command-line tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Commands are names of programs installed on the system. Before proceeding with
    the basic command operation, let''s have a look at the two types of path traversal
    in Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Absolute path**:This method specifies the full path of a file, regardless
    of your current location. This path always begins with a leading `/` (root directory)
    and specifies each subdirectory traversed in order to uniquely represent a single
    file in the filesystem. This removes any ambiguity whatsoever in the pathname.
    One directory is separated from another by a forward slash (`/`) in the pathname.
    While creating shell scripts, this type of naming convention should be used to
    refer to a file. Absolute pathnames are long to type in comparison to relative
    pathnames, which are used frequently when working on the command line to refer
    to a file or directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relative path**:This method specifies the file path relative to your current
    location. It may or may not begin with one or more dot (`.`) symbol. This path
    never begins with a `/`. In this method of traversal, two or more files can have
    the same relative pathname in the same Linux filesystem, with respect to two different
    working locations. While working with shell scripts, this type of naming convention
    should always be avoided, in order to make your script executable from different
    locations in your Linux filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if you are working in your home directory, `/home/student`, and
    you want to move to the `/home/student/backup` directory, you can traverse in
    the following two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Absolute pathname traversal: `$ cd /home/student/backup`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Relative pathname traversal: `$ cd backup`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2da2df89-c3b2-421a-be38-466cc8de7937.png)'
  prefs: []
  type: TYPE_IMG
- en: The relative path of the `backup` directory, when a user's current working directory
    is `/home/student`, is simply `backup`. Here, we specify the directory name only
    with the `cd` command, since we are already working inside the `/home/student`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a standard Linux filesystem, the pathname of a file, including all characters
    (even the `/` directory separator), cannot exceed 4,095 bytes. Most of the time,
    it is easy to use relative paths for navigation, as it requires less typing. It
    also takes advantage of the shortcuts provided by meta-characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.`: Dot represents the current directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`..`: Double dots represent the parent directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~`: Tilde represents the user''s home directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, imagine you are working in your home directory, `/home/student`,
    and you want to move to the `/usr/bin` directory; the following two methods can
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Absolute pathname traversal: `# cd /usr/bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Relative pathname traversal: `# cd ../../usr/bin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These commands fall into the category of navigation, as they are mostly used
    for navigating paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pwd`: The `pwd` command displays the full pathname of your current working
    directory. It helps in determining the current syntax to be used with other commands
    such as `cp`, `mv`, `rm` , `mkdir`, and so on, using relative pathnames, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f7463208-b12a-4d8d-8da1-56d66340b3ba.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ls`: The `ls` command is used to list the directory contents of the given
    directory. If no directory name is given, then it lists the contents of the current
    directory as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/feb7cdb2-25a7-4344-bab1-349f61e1a132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ls` command has got many options that are often used together to produce
    more structured and human-readable output. The most commonly used options with
    `ls` are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | Displays the filenames beginning with a (`.`), as any filename beginning
    with (`.`) is hidden by default |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` | Displays detailed information on contents, also known as the long-listing
    format |'
  prefs: []
  type: TYPE_TB
- en: '| `-t` | Sorts the listing contents by modification time, with last modified
    file first |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | Lists the contents in reverse order while sorting by filename |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | Prints the sizes of files in human-readable format (for example, 1
    K, 50 M, 3 G, and so on) |'
  prefs: []
  type: TYPE_TB
- en: '| `-S` | Sorts the contents by file size |'
  prefs: []
  type: TYPE_TB
- en: '| `-i` | Prints the inode number of each file in listing |'
  prefs: []
  type: TYPE_TB
- en: '| `-Z` | Displays the security context (SELinux parameter) for each file |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `ls` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/528a8ec3-558f-48fb-9021-205a2f5fa65d.png)'
  prefs: []
  type: TYPE_IMG
- en: '`cd`:The `cd` command is used to change your working directory. We generally
    use relative pathnames for brevity while changing directories on the command line.
    However, while creating scripts, it''s good practice to use absolute pathnames.
    The `cd` command has many options, some of which are described in the following
    table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cd -` | Changes directory to previous working directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cd` or `cd ~` | Changes directory to user''s home directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cd ~<username>` | Changes directory to the specified `<username>` user''s
    home directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cd . .` | Changes directory to up one level to the parent directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `cd` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b1d08cf-c743-4777-a732-40e77be4e4f4.png)'
  prefs: []
  type: TYPE_IMG
- en: The (`. .`) represents the parent directory of your current working directory,
    and (`.`) represents your current directory in relative pathname format.
  prefs: []
  type: TYPE_NORMAL
- en: File management commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File management is the process of creating, deleting, copying, and moving files
    or directories for organizing files logically. When doing file management tasks
    on the command line, awareness of your current working directory is very important.
    This will help you to give correct absolute or relative pathnames for the immediate
    task in hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**`cp`** is used to copy a file or directory from one location to another.
    The various useful options used with this command are listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cp file1 file2` | Copies `file1` with the name `file2` in the current directory
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cp file1 file2 /tmp/` | Copies `file1` and `file2` with the same name to the `/tmp/`
    directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cp file1 /tmp/myfile` | Copies `file1` with a new name, `myfile`, to the
    `/tmp/` directory |'
  prefs: []
  type: TYPE_TB
- en: '| `cp -r backup /tmp/` | Copies the backup directory recursively to the `/tmp/`
    directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `cp` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0de15b37-acaa-4bdf-a799-9f093fae6e20.png)'
  prefs: []
  type: TYPE_IMG
- en: '**`mv`** is used for two purposes. Firstly, it renames a file or directory
    if the source and destination path of the file are in the same directory. Secondly,
    it is used to perform cut and paste (move) operations when the source and destination
    directory are different.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most frequently used options with the `mv` command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `mv file1 file2` | Renames `file1` with the name `file2` in the current directory
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mv file1 file2 /tmp/` | Moves `file1` and `file2` with the same name in
    the `/tmp/` directory |'
  prefs: []
  type: TYPE_TB
- en: '| `mv file1 /tmp/myfile` | Moves `file1` with a new name, `myfile`, to the
    `/tmp/` directory |'
  prefs: []
  type: TYPE_TB
- en: '| `mv backup /tmp/` | Moves the directory with the name `backup` to the `/tmp/`
    directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `mv` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8aabaa14-26ae-4b78-a17d-c3654c963c9a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**`mkdir`** is used to create a directory. This command is also used with different
    options on the command line, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir backup` | Creates a sample directory backup in the current directory
    |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir /tmp/backup` | Creates a sample directory backup under the `/tmp`
    directory |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir -p backup/linux/centos` | Creates directories with full path `backup/linux/centos` (if
    parent directories are missing at destination, it will create full path) |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir linux windows mac` | Creates directories with the name `linux`, `windows`,
    and `mac` in the current directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `mkdir` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb9f79f1-f417-45c9-bc89-4ad9bcdc4302.png)'
  prefs: []
  type: TYPE_IMG
- en: '**`rmdir`** is used to delete empty directories only. If a directory contains
    subdirectories or files, then we have to use the `rm -rf` command as shown in
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The examples of `rmdir` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3026bd86-9909-4a8c-98c1-66fbe8941d7b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**`rm`** is used to delete/remove a file from the filesystem. This command
    also has multiple options, which are to be used with care as a file once deleted
    cannot be restored from the trash (the recycle bin of Linux) in command-line mode.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a table listing options frequently used with the `rm` command and their
    descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `rm` | Removes a file |'
  prefs: []
  type: TYPE_TB
- en: '| `rm -f` | Forcefully removes a file |'
  prefs: []
  type: TYPE_TB
- en: '| `rm -i` | Interactively removes a file by prompting before each removal (use
    this if you are uncertain of the filename) |'
  prefs: []
  type: TYPE_TB
- en: '| `rm -rf` | Forcefully remove a directory recursively (use this option very
    cautiously) |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `rm` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4dcef6b-ae9a-4b5d-9438-fd10b75d3992.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ln` command is used to create links. There are two types of links in Linux,
    hard links and soft links, which is also known as symbolic link/symlink. The soft
    links of files and directories can be considered equivalent to the Windows shortcut
    for files and folders respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hard link creation: `$ ln file1 file2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Soft link creation: `$ ln -s file1 file2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The examples of `ln` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30a8dc24-1335-4e6c-9651-d0dbb99562c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing archives and compressed files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Archiving is the process of fetching multiple files from the same or different
    locations and putting them into a single file bundle. It is generally done together with
    compression, or immediately followed by compression. This helps in streamlining
    the backup process, as discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'File data is generally compressed to save the disk space and reduce traffic,
    as well as the time to transmit files over a network. Linux has multiple utilities
    for compression; some of them are listed in the table that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `gzip` | Most popular Linux compression utility |'
  prefs: []
  type: TYPE_TB
- en: '| `gunzip` | Utility to decompress `gzip` compressed files |'
  prefs: []
  type: TYPE_TB
- en: '| `bzip2` | Another compression utility, with better compression than `gzip`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `bunzip2` | Utility to decompress `.bzip2` compressed files |'
  prefs: []
  type: TYPE_TB
- en: '| `xz` | The most space-efficient compression utility that exists in Linux
    |'
  prefs: []
  type: TYPE_TB
- en: '| `zip` | Popular utility to decompress archives from other operating systems
    |'
  prefs: []
  type: TYPE_TB
- en: These utilities have different algorithms for compression and thus different
    efficiency and resource consumption levels (generally, more efficient techniques
    take more time). Decompression time does not vary much across different methods.
  prefs: []
  type: TYPE_NORMAL
- en: gzip and gunzip compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `gzip` utility compresses files faster than any other utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the `gzip` compression command and its description
    with some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `gzip *` | Compresses all files in the current directory and each compressed
    file is renamed with the `.gz` extension |'
  prefs: []
  type: TYPE_TB
- en: '| `gzip -r backup/` | Compresses all files in the `backup/` directory and subdirectories
    |'
  prefs: []
  type: TYPE_TB
- en: '| `gunzip myfile.gz` or`gzip -d myfile.gz` | Decompresses `myfile.gz` to `myfile`
    |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of the `gzip` and `gunzip` commands are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c4d0cd9-82a4-43e1-aeb6-750a72afd66f.png)'
  prefs: []
  type: TYPE_IMG
- en: bzip2 and bunzip2 compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The syntax of the `bzip2` command is similar to `gzip`, but it uses a different
    compression algorithm and creates a smaller-sized compressed file, at the price
    of more time taken for compression.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the `bzip2` compression command and its description
    with some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `bzip2 *` | Compresses all files in the current directory and each compressed
    file is renamed with the `.bz2` extension |'
  prefs: []
  type: TYPE_TB
- en: '| `bunzip2 *.bz2` or`bzip2 -d *.bz2` | Decompresses all the files with the `.bz2`
    extension in the current directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of the `bzip2` and `bunzip2` commands are shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b932bc3-df87-44d2-b218-a83fe480af10.png)'
  prefs: []
  type: TYPE_IMG
- en: xz compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the most space-efficient compression utility used in Linux. The trade-off
    for compression is a slower speed of compression for a higher compression ratio.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the `xz` compression command and its description
    with some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `xz *` | Compresses all files in the current directory and each compressed
    file is renamed with the `.xz` extension |'
  prefs: []
  type: TYPE_TB
- en: '| `xz myfile` | Compresses the `myfile` file to `myfile.xz` with the default
    compression level (6); deletes the original `myfile` after compression |'
  prefs: []
  type: TYPE_TB
- en: '| `xz -dk` | Decompresses `myfile.xz` to `myfile` and preserves `myfile.xz`
    after decompression |'
  prefs: []
  type: TYPE_TB
- en: '| `xz -d *.xz`or `unxz` | Decompresses all files with the extension `.xz` in
    the current working directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of `xz` command usage are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2d32c63-21b1-4050-8074-f6a7de34f641.png)'
  prefs: []
  type: TYPE_IMG
- en: zip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This program is not generally used to compress files in Linux, but it is quite
    often required to decompress archives from a Windows OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the `zip` command and its description with some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `zip backup *` | Compresses all files in the present working directory and
    puts them inside `backup.zip` |'
  prefs: []
  type: TYPE_TB
- en: '| `zip -r backup.zip /home/student/abc` | Archives the files and directories
    stored in `/home/student/abc` in the `backup.zip` file |'
  prefs: []
  type: TYPE_TB
- en: '| `unzip backup.zip` | Extracts all the files from the `backup.zip` in the
    current directory |'
  prefs: []
  type: TYPE_TB
- en: 'The examples of the `zip` and `unzip` commands are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/011838f5-07f3-4a5b-8ac1-dc94459c6551.png)'
  prefs: []
  type: TYPE_IMG
- en: Archiving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to compression, the `tar` (tape archive) utility is very often used
    to group files into an archive known as a **tarball** and then compress the whole
    archive together. Creating a single file bundle by putting multiple files together
    is known as archiving.
  prefs: []
  type: TYPE_NORMAL
- en: 'The various options used with the `tar` command are given, with their descriptions,
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **tar** **command option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Creates an new archive |'
  prefs: []
  type: TYPE_TB
- en: '| `v` | Verbosity, used to see which files are being added and extracted |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | Filename of the archive to operate on |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | Extracts an archive |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | Lists the contents of an archive |'
  prefs: []
  type: TYPE_TB
- en: '| `z` | Uses `.gzip` compression (`.tar.gz`) |'
  prefs: []
  type: TYPE_TB
- en: '| `j` | Uses `.bzip2` compression (`.tar.bz2`), better than `.gzip` |'
  prefs: []
  type: TYPE_TB
- en: '| `J` | Uses `.xz` compression (`.tar.xz`), better than `.bzip2` |'
  prefs: []
  type: TYPE_TB
- en: The tarball archives can be compressed using `.gzip`, `.bzip2`, or `.xz` compression
    with `tar` command itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the usage of the `tar` command with compression utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar cvf abc.tar file1 file2 file3` | Archives the `file1`, `file2`, and
    `file2` files and puts them into one single file, `abc.tar` |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar xvf abc.tar` | Extracts all the files in the `abc.tar` archive in the
    current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar tvf abc.tar` | Lists all the files available inside the `abc.tar` archive
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar cvzf abc.tar.gz *` | Creates an `abc.tar.gz` archive of all the files
    in the current directory and compresses it with `.gzip` |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar cvjf abc.tar.bz2 *` | Creates an `abc.tar.bz2` archive of all the files
    in the current directory and compresses it with `.bzip2` |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar cvJf abc.tar.xz *` | Creates an `abc.tar.xz` archive of all the files
    in the current directory and compresses it with `.xz` |'
  prefs: []
  type: TYPE_TB
- en: '| `Tar xvf abc.tar.gz abc.tar.bz2 abc.tar.xz` | Extracts all the files in `abc.tar.gz`,
    `abc.tar.bz2`, and `abc.tar.xz` in the current directory |'
  prefs: []
  type: TYPE_TB
- en: Archiving with tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, we cover creating and extracting archives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/239992ed-41c2-40e3-98e7-a6db675121e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Archiving and compression (.gzip) using tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, we cover creating and extracting `gunzip` compressed
    archives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6841e248-c262-485a-9c46-88515a09b0a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Archiving, compression (.bzip2), and listing contents using tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, we cover creating and extracting `.bzip2` compressed
    archives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0de301e-3d4a-4017-bf26-a05f7c4c9943.png)'
  prefs: []
  type: TYPE_IMG
- en: Archiving and compression (.xz) using tar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example, we cover creating and extracting `.xz` compressed
    archives:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e63f1aa7-7478-4dde-a3e2-5b02cc43b4dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood the Linux Filesystem Hierarchy Standard and different
    types of built-in documentation. Thereafter, we covered basic command-line operations,
    which included filesystem navigation and filesystem management from the command
    line. Finally, we got our hands dirty with different types of compression techniques
    and archiving in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about different methods of managing text
    files.
  prefs: []
  type: TYPE_NORMAL
