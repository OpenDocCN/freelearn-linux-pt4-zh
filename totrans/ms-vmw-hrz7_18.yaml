- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you must be aware by now, a successful VDI, or end-user computing project,
    is made up of multiple components, and its success comes down to delivering a
    good user experience. It's not just about whether the infrastructure is working
    or not. As such, it is important to have a well-defined methodology, and the tools
    to be able to adequately diagnose and fix issues within your environment. In this
    chapter, we are going to cover some of the troubleshooting techniques, and other
    methods for monitoring the end user experience within Horizon View.
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, we are going to look at troubleshooting from two angles, reactive
    and proactive, covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: General troubleshooting tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting Horizon View issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRealize Operations for Horizon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liquidware Stratusphere UX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are also going to use Liquidware Stratusphere UX to highlight some of the
    key elements to look at when troubleshooting and monitoring your environment.
  prefs: []
  type: TYPE_NORMAL
- en: General troubleshooting tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first section of this chapter, we are going to briefly look at some general
    troubleshooting tips. We will start with looking at what the end users are reporting
    as issues. Is it down to a particular app or desktop configuration? If it is a
    performance-related issue, we need to be able to correlate that back to the supporting
    infrastructure components, such as which server their desktop or apps are running
    on, so that we can isolate host resource issues, such as a slow network or slow
    disk.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the bigger picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often, when there are issues, it is the VDI solution that automatically
    gets the blame. This is because it is a new deployment, and end user perception
    is that, because the desktop is running remotely, then it is to blame. You need
    to remember that the Horizon View technology is just one component in the overall
    infrastructure, along with the desktop that the user is utilizing. Just because
    the desktop is sitting within a VDI environment doesn't always mean it's a View
    issue. It could well be a desktop, network, or application issue, which would
    have occurred in a physical environment too.
  prefs: []
  type: TYPE_NORMAL
- en: When a user reports an issue, or you notice an issue within the infrastructure,
    you will need to think logically as to which component within the infrastructure
    is going to be the likely cause, and where you are going to start your troubleshooting
    journey. Maybe it is a storage issue, or even a Windows issue, and it has got
    nothing to do with VDI at all!
  prefs: []
  type: TYPE_NORMAL
- en: Is the issue affecting more than one user?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good place to start examining any issues within your environment is by finding
    the answers to the following questions: who is experiencing the issue? Has more
    than one user reported the same issue? If you try and recreate the issue, do you
    get the same results? Can another user, with the same permissions and the same
    resources, recreate the issue?'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you find that the issue is really only related to a single user, then consider
    what the issue is that they are experiencing. For example, you can ask the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What device are they connecting from?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What connection protocol are they connecting over, and have they tried a different
    protocol?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Could it be a bandwidth or connection reliability issue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Could a port be blocked?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do they have specific application or permission requirements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are they entitled the correct pools?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you believe that the issue has something to do with their desktop, then maybe
    consider refreshing it. This is the beauty of VDI; you could simply rebuild a
    new desktop, and not spend hours trying to troubleshoot and fix application or
    OS issues if a simple refresh could resolve it.
  prefs: []
  type: TYPE_NORMAL
- en: If the issue is affecting more than one user, check whether a fix could be applied
    to the base image, and then be rolled out to your desktop pools to simplify the
    process of resolving the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Performance issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is probably one of the widest subject areas to look at when troubleshooting
    your View environment. Performance issues could relate to so many areas, aspects,
    and also (in some cases) be based on a personal opinion.
  prefs: []
  type: TYPE_NORMAL
- en: When a user reports performance issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your users are reporting poor performance, then ask them to try and be more
    specific, rather than them just saying "it's slow". Is it taking a long time to
    log in, or is it an application that is taking longer than expected to load? Keep
    a log of the issue, along with the time and date that the issue occurred, or if
    it's an ongoing issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ask the users the following when the issue occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: How are they measuring the performance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What time of the day do they experience the problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are they doing something specific when they experience the problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are they connecting from somewhere specific, or from a specific device, when
    they have the issue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wherever possible, try to visit the end user and understand their issue first-hand.
    This will enable you to the get to the bottom of the issue with ease. Hopefully,
    as we discussed in [Chapter 3](20877fa6-9a03-4c97-ab85-4a4338e2c680.xhtml), *Design
    and Deployment Considerations*, you will have engaged the end users early, and
    they will be positive and on board with the overall solution and willing to help.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Liquidware Stratusphere, you could also look at the baseline for when
    this user was on-boarded, and then look at the trend information. This will help
    you identify any changes to the environment, and you would also know what else
    was happening at the time they experienced the issue. An example of this is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b767cfa-bfb7-47e7-81ea-ec41684c832b.png)'
  prefs: []
  type: TYPE_IMG
- en: Liquidware Stratusphere showing trend information
  prefs: []
  type: TYPE_NORMAL
- en: Non-VDI related issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Performance issues on a desktop can be caused by many factors, regardless of
    whether they are virtual or physical desktops. Common areas for consideration
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extended login times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long application load times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor application performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permission errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we just mentioned, many of these issues can, and will, occur whether the
    desktop is virtualized or not, but, in the virtualized environment, any type of
    issues that arise will be easier to resolve. For example, if you find you are
    getting OS or application crashes, consider patching these elements to the latest
    updates and recomposing the image for all users. This could take a lot longer,
    and be a lot more difficult, with a physical desktop estate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe login times or application load times are suffering due to a CPU performance
    issue. The following screenshot shows the output of the login monitoring feature
    of Liquidware Stratusphere:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f07e23ba-5c08-46e7-8cac-fe53f9f525c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring feature of Liquidware Stratusphere
  prefs: []
  type: TYPE_NORMAL
- en: With each individual virtual desktop machine, you can drill down into each process
    and service running on it, allowing you to see things such as how long the process
    took to load, as well as any other dependencies that process has. This is invaluable
    information when troubleshooting login issues, and particularity when migrating
    from physical desktops to virtual desktops and identifying services that should
    not be used in virtual environments, yet still exist and cause issues in virtual
    desktops.
  prefs: []
  type: TYPE_NORMAL
- en: With physical desktops, you would be stuck with the hardware unless you replace
    or upgrade the constrained components, but in a VDI environment you can consider
    tweaking the spec at a push of a button, as long as you have the underlying resources.
  prefs: []
  type: TYPE_NORMAL
- en: The important point to understand is that generic desktop issues will still
    exist regardless, and so, it is recommended to use the VDI platform to your advantage
    to help resolve these. We have worked with so many organizations that have deployed
    VDI and have it running in production, and once the solution is implemented they
    tend to forget about generic desktop support and spend far too much time digging
    deep into the VDI architecture infrastructure looking for faults, when the answer
    maybe a simple Windows OS or application issue.
  prefs: []
  type: TYPE_NORMAL
- en: Bandwidth, connectivity, and networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any networking-related issues can often be the most difficult to get to the
    bottom of. Wherever possible, ensure that you work closely with your networking
    team to ensure there is suitable end-to-end monitoring in place.
  prefs: []
  type: TYPE_NORMAL
- en: 'While your users are connecting on a LAN, you would hope there would be plentiful
    bandwidth, latency would be low enough, and therefore connectivity would be reliable.
    If you are struggling on a LAN, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Has anything on the network changed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the user connecting via a wired or wireless network?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you configured PCoIP for QoS on your switches?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the network currently reliable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you seeing any dropped packets between any of the following?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients to the core switching
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients to servers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients to VDI desktops
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the latency as expected?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even on the LAN in larger environments, bandwidth could be an issue—have you
    considered the sum of the bandwidth required from your client devices to VDI desktops?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you routing between networks? Do the routers work at a suitable level of
    performance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the load balancers sized correctly for your environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When your users are connecting over a WAN, it can sometimes be more difficult
    to troubleshoot or guarantee connection quality.
  prefs: []
  type: TYPE_NORMAL
- en: For remote or branch offices, ensure that the internet connection is suitably
    sized; wherever possible, ensure that you have configured QoS for the PCoIP protocol
    from end to end, and ensure that you have suitably configured the PCoIP policy
    to cope with the reduced bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: When troubleshooting issues, investigate the relevant logs on the client and
    on the View Connection Servers, as well as any intermediary components, such as
    the load balancers and routers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list contains some of the more common faults that a user will
    report:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Black screens**: This is commonly caused by ports blocking the PCoIP Protocol
    somewhere in the chain. Check that the PCoIP port are open; namely, port `4172`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disconnections**: High latency and dropped packets will cause the users to
    be disconnected from their desktops. Ensure that you allow enough time for users
    to reconnect before refreshing desktops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poor resolution images**: Due to the nature of the protocol if there is low
    bandwidth, users may complain about low-quality images. Consider limiting the
    image build options in the user policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of information for the PCoIP protocol
    recorded by Liquidware Stratusphere UX:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13dfa631-01a8-4b42-9092-486d20389594.png)'
  prefs: []
  type: TYPE_IMG
- en: PCoIP protocol
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to look at compute resources.
  prefs: []
  type: TYPE_NORMAL
- en: Compute resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CPU and memory issues on your host servers can adversely affect the end user
    experience. As with most technical solutions, we recommend that, while you are
    going through your initial testing and rolling out, you document your baseline
    for key performance characteristics, such as CPU and memory utilization, and deeper
    metrics such as CPU-ready times.
  prefs: []
  type: TYPE_NORMAL
- en: With this baseline information in your toolkit, it is easier to compare the
    performance before the issue occurred to what you are seeing now. This will help
    to try and pinpoint what could be causing the problem. Likewise, using technology
    such as vRealize Operations for Horizon will help you understand performance utilization
    over time. You could use a third-party product such as Liquidware Stratusphere.
    Stratusphere provides the baseline metrics (measured during the assessment phase),
    as well as the current user experience, allowing you to quickly identify what
    changed, and what is causing the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Within your VDI infrastructure, you don't want to be experiencing any memory
    overcommits. You need to consider how much memory is allocated to your virtual
    desktops, as well as the total memory within your hosts. Ideally, you want to
    ensure that your total allocated memory is less than the total in your host servers.
    Don't forget that should one of the host servers fail, you will still need to
    supply the required memory resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are experiencing performance issues related to memory or CPU, check
    whether memory is being swapped by any of the virtual desktop machines. Check
    whether there is any ballooning within the environment. Understand what your CPU-ready
    characteristics are. The acceptable CPU-ready figures within your VDI environment
    will vary based on the environment and users. Generally speaking, you are going
    to want to keep CPU-ready below 5% per allocated CPU, with 10% at peak. Anything
    over these numbers would indicate that the host server is being overloaded, and
    will impact the performance of the CPU and lead to slow performance of the virtual
    desktop machines. The following screenshot shows an example of CPU monitoring
    and, in particular, the CPU-ready time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6870d650-70ff-49a9-8386-6fbf8970b8ea.png)'
  prefs: []
  type: TYPE_IMG
- en: CPU monitoring and CPU-ready time
  prefs: []
  type: TYPE_NORMAL
- en: It can be very easy when growing your VDI solution from the initial design to
    forget to sanity-check these metrics and keep an eye on them as you grow, and,
    all of a sudden, you may find you have a compute performance issue.
  prefs: []
  type: TYPE_NORMAL
- en: Disk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have previously mentioned, the disk solution deployed is a key component
    for a successful VDI deployment. You need to be able to keep an eye on the disk
    performance, which is key to avoiding issues in the future.
  prefs: []
  type: TYPE_NORMAL
- en: How much latency is acceptable within your environment is going to very much
    depend on the users. Also consider what will happen as you scale up the solution.
    While we may say that disk latency of less than 25 ms is generally acceptable,
    it doesn't mean that a user who has been using a desktop with sub-25 ms latency
    would even notice if, all of a sudden, they were experiencing 25 ms latency or
    more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your storage vendor will likely have their own toolset to manage and monitor
    the performance; however, the following screenshot shows an overview of storage
    IOPS performance on a per-host basis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a3da35d-c91b-419b-a8c9-d25318241d25.png)'
  prefs: []
  type: TYPE_IMG
- en: Overview of storage IOPS performance
  prefs: []
  type: TYPE_NORMAL
- en: Having covered some of the general troubleshooting tips around the infrastructure
    components, in the next section, we are going to look at Horizon View-specific
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Horizon View issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of components that we have discussed throughout this book
    that make up your Horizon View infrastructure, and while they are generally very
    reliable, they can of course fail at some point, with serious knock-on effects.
    Wherever possible, you should be ensuring that your Horizon environment is highly
    available, and where this may not be possible, then ensure that the components
    are sufficiently monitored using components such as vRealize Operations for Horizon,
    or, as we have used in the example lab, a third-party monitoring solution such
    as Liquidware Stratusphere.
  prefs: []
  type: TYPE_NORMAL
- en: Horizon View general infrastructure issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first port of call when troubleshooting your Horizon View infrastructure
    should be the event log within the Horizon View Administrator console. You can
    quickly and easily access the event log by clicking alerts in the top left-hand
    corner of the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf714913-ecd0-4168-8d16-85d8b63e8f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Event log within the Horizon View Administrator console
  prefs: []
  type: TYPE_NORMAL
- en: You should also utilize the dashboard view in the View Administrator to get
    a quick overview to understand the health of your environment. This screen will
    show you the health of all the key components within your infrastructure, such
    as vCenter, Hosts, View Connection Servers, View Security Servers, Desktops, RDS
    Hosts and Datastores.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great resource to start troubleshooting infrastructure issues within
    your Horizon View environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also not forget the simplest of troubleshooting steps when experiencing
    issues with your Horizon View Infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: Are all the servers, desktops, hosts, and so on, contactable on the network?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are all the required services started?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there sufficient free space on all servers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the memory and CPU maxed out?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have you checked all the events logs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consideration also needs to be given to the backend database systems, and the
    effect that would be felt if they were to go offline. Ensure your SQL solution
    is reliant and the same as all other components. If you are having issues with
    maybe your vCenter or View Composer, ensure you check the SQL Server for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Are there sufficient resources?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the services started?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the correct ports open?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there enough free disk space for the database and logs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View infrastructure component issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, there may be issues that arise that are outside those that we have
    discussed so far. Horizon View has its own integrated system health monitoring
    and, as such, reports errors relating to Horizon View-specific issues, allowing
    administrators to quickly pinpoint issues easily. Unfortunately, sometimes the
    corrective actions can be quite cumbersome and manual to implement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Issues you may see that require specific corrective actions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual removal of a View Connection Server or Security Server after loss of
    a component or OS corruptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual removal of VDI desktops or whole pools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovery of Horizon View from a backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recovery of a persistent disk from a backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistent disks running out of space for users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We aren't going to cover all the specific corrective actions for all of these
    processes here, as we could write an entire book to do them justice, but there
    are some great **knowledge-base** (**KB**) articles already available on VMware's
    KB site at [http://kb.vmware.com](http://kb.vmware.com/).
  prefs: []
  type: TYPE_NORMAL
- en: One issue that we will cover briefly, and one that does come up fairly often,
    is with the View Composer database, and inconsistencies in the database that lead
    to provisioning errors. VMware has a tool to address database errors called the
    **ViewDBChk** tool, which we will cover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing View Composer issues with the ViewDBChk tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A provisioning error can occur when there are inconsistencies between the LDAP,
    vCenter Server, and View Composer databases, and are often caused by editing virtual
    desktop machines directly in the vCenter Server inventory, or restoring a virtual
    desktop machine from a backup.
  prefs: []
  type: TYPE_NORMAL
- en: The ViewDBChk tool allows View administrators to scan for machines that cannot
    be provisioned, and also allows you to remove invalid database entries. This then
    allows the Connection Server to be able to re-provision desktops without any errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find this in the `View` folder that gets created at install time.
    The folder can be found by navigating to the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The tool is command-line-driven, and has a number of parameters for each of
    the functions you can perform. These are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be8ced29-a3d2-4064-ba7a-ab576d709c42.png)'
  prefs: []
  type: TYPE_IMG
- en: Table showing parameters for each of the functions
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to run the command to remove a machine from a desktop pool, at
    the command prompt, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we are going to look at some of the additional tools available
    for monitoring and managing the environment.
  prefs: []
  type: TYPE_NORMAL
- en: vRealize Operations for Horizon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: vRealize Operations for Horizon is available as part of Horizon Enterprise or
    as a separate product. Where vRealize Operations differs from most monitoring
    tools is in its analytics engine. Most monitoring tools are based around setting
    thresholds for key values, such as CPU, or memory consumed. The issue with these
    kinds of alarms is that simply stumbling over a threshold value doesn't mean there
    is necessarily an issue. Sometimes, it is within the normal parameters of the
    applications in use, or potentially, the problem could be one of the resources
    not being consumed when it should be.
  prefs: []
  type: TYPE_NORMAL
- en: With the analytics engine included within vRealize Operations, it is able to
    learn and understand what the normal working parameters of your environment are.
    From this, it is then able to alert you when an error occurs that falls outside
    these parameters. It is also able to track growth and consumption over time to
    preempt an issue prior to it occurring.
  prefs: []
  type: TYPE_NORMAL
- en: vRealize Operations for Horizon should be installed, where possible, at the
    beginning of your project. vRealize Operations is deployed simply via a single
    virtual appliance, or vApp, and when deployed and configured, it starts listening
    and learning about your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three key metrics tracked with vRealize Operations, which are health,
    risk, and efficiency:'
  prefs: []
  type: TYPE_NORMAL
- en: Health reports on the current health status of your environment. Items that
    could affect health are high packet loss, component failure, and disk capacity
    at a critical level, among others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk indicates an issue within your environment that, if left unattended, could
    very well become an issue to the health of your environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficiency reports on considerations, such as overprovisioning, which, if rectified,
    could help you get more out of your environment to maximize the investment. An
    example of this is VMs with overprovisioned CPU or memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows an end user experience dashboard, highlighting
    CPU usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e9d16f2-37fb-4165-b374-7cdf9bd3d887.png)'
  prefs: []
  type: TYPE_IMG
- en: End user experience dashboard
  prefs: []
  type: TYPE_NORMAL
- en: vRealize Operations for Horizon also includes specific features to ensure you
    fully understand the health of your Horizon View environment, including the full
    visibility of the PCoIP protocol as well as integration for health monitoring
    with the View Connection Server, View Security, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The analytics engine of vRealize Operations will learn your environment and
    understand what is normal, raising alarms based on dynamic thresholds for your
    environment rather than meaningless static thresholds.
  prefs: []
  type: TYPE_NORMAL
- en: Within vRealize Operations, it also incorporates a smart alerts feature that
    allows you to quickly understand the root cause of an issue within your infrastructure,
    and the recommended remediation actions to resolve the issue.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of third-party tools and solutions that go beyond the
    monitoring of the environment. One of those tools is Liquidware's Stratusphere
    solution, which we will discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Liquidware Stratusphere UX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liquidware Stratusphere UX is more than just a monitoring tool. In fact, it
    is more of a user life cycle management tool, and has played a part throughout
    the deployment we have covered throughout this book. We first used the output
    from Stratusphere UX when we assessed our current environment to provide us with
    an overview of the resources being used, but also to give us a baseline to work
    from as we deployed Horizon.
  prefs: []
  type: TYPE_NORMAL
- en: We then used this baseline to assist in tuning the end user experience as we
    on-boarded users and built our gold images to ensure that the end users were running
    at their most optimal levels of performance.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Stratusphere can be used as a diagnostic tool to aid the IT support
    team to get to the root cause of an issue quickly. IT can quickly understand where
    the issue lies, providing a detailed analysis of a single user, single machine,
    or single application, allowing an end-to-end view of a user's virtual desktop
    session, where it's hosted, and what resources it's consuming, helping to identify
    issues quickly.
  prefs: []
  type: TYPE_NORMAL
- en: As you will have seen in the previous sections and the screenshots, Liquidware
    Stratusphere can easily help monitor and manage your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting further help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of resources available if you are struggling to get to the
    bottom of an issue with Horizon View. First and foremost, we recommend logging
    a call as early as possible with VMware Support to get the best assistance possible
    to resolve your issue. You could also try the various blogs and posts from the
    VMware EUC community.
  prefs: []
  type: TYPE_NORMAL
- en: There is also the VMware Community, which has a wealth of resources available
    at [https://communities.vmware.com.](https://communities.vmware.com)
  prefs: []
  type: TYPE_NORMAL
- en: Finally, and possibly the most useful resource, is the VMware Knowledge Base,
    as we mentioned previously in this chapter. At the time of writing this, there
    are 300 specific support topics related to Horizon View, including video how-to
    guides alongside step-by-step resolution guides.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered some of the methods and areas to consider when
    troubleshooting issues within your Horizon View environment. Consideration should
    be given to the bigger picture, ensuring you fully understand the issues the user
    is facing, and which area of the user's desktop experience could be causing these
    issues. Where possible, use monitoring tools such as vRealize Operations for Horizon
    to find the root cause of the problem. There are a number of areas within Horizon
    View you should check if you believe you have infrastructure problems. These include
    the dashboard and the event log within the Horizon View Administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered getting further help from the VMware Knowledge Base.
  prefs: []
  type: TYPE_NORMAL
- en: We have now reached the end of this book, and by reaching this point, you should
    now have a greater understanding of the architecture of the Horizon Suite and
    how to design your end user computing solution. You should also understand the
    stages and details involved with rolling out Horizon View for your users, including
    installing the various components, and configuring, designing, and building the
    desktop images and pools. You will have learned about the various methods to layer
    your applications to your desktops, using technology such as ThinApp, RDSH-published
    applications, and App Layers.
  prefs: []
  type: TYPE_NORMAL
- en: Designing and rolling out any end user computing solution to any organization
    is a task that must be undertaken with care and understanding for the users, and
    we hope the topics that we have covered within this book will better equip you
    for your tasks ahead.
  prefs: []
  type: TYPE_NORMAL
