- en: Chapter 2. Building the Biped
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you''ve got your Raspberry Pi 2 Model B all configured and ready to
    go, you''ll need to add some hardware to control and interface. In this chapter,
    you''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build a basic 10 **Degrees of Freedom** (**DOF**) biped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a servo motor controller connected to the USB port of the Raspberry
    Pi to control the servos to make your robot move
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building robots that can walk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several choices when considering how to create a mobile robot. One
    of the more interesting choices is a robot that can walk. This normally comes
    in three versions: a biped robot with two legs, a biped robot with four legs,
    and a hexapod robot with six legs. While each offers an interesting and different
    set of possibilities, in this chapter, you''ll build a basic, 10 DOF biped.'
  prefs: []
  type: TYPE_NORMAL
- en: You'll be using a total of 10 servos for your project, as each leg has 5 points
    that can move, or 5 degrees of freedom (DOF). As servos are the most critical
    component of this project, it is perhaps useful to go through a tutorial on servos
    and learn how to control them.
  prefs: []
  type: TYPE_NORMAL
- en: How servo motors work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servo motors are somewhat similar to DC motors. However, there is an important
    difference. While DC motors are generally designed to move in a continuous way—rotating
    360 degrees at a given speed—servos are generally designed to move to a limited
    set of angles. In other words, in the DC motor world, you generally want your
    motors to spin with a continuous rotation speed that you control. In the servo
    world, you want your motor to move to a specific position that you control.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by sending a **Pulse-Width-Modulated** (**PWM**) signal to the
    control connector of the servo. The length of this pulse will control the angle
    of the servo like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How servo motors work](img/B04591_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These pulses are sent out with a repetition rate of 60 Hz. You can position
    the servo to any angle by setting the correct control pulse.
  prefs: []
  type: TYPE_NORMAL
- en: Building the biped platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several approaches to building your biped platform. Perhaps the most
    simple is to purchase a set of basic parts; this is the example you'll see in
    this chapter. There are several kit possibilities out there, including one at
    [http://www.robotshop.com/en/lynxmotion-biped-robot-scout-bps-ns-servos.html](http://www.robotshop.com/en/lynxmotion-biped-robot-scout-bps-ns-servos.html),
    a kit like the one offered at [http://www.ebay.com/itm/10-DOF-Biped-Robot-Mechanical-Leg-Robot-Servo-Motor-Bracket-NO-Servo-Motor-good-/131162548695?pt=LH_DefaultDomain_0&hash=item1e89e5a9d7](http://www.ebay.com/itm/10-DOF-Biped-Robot-Mechanical-Leg-Robot-Servo-Motor-Bracket-NO-Servo-Motor-good-/131162548695?pt=LH_DefaultDomain_0&hash=item1e89e5a9d7),
    or the one at [http://www.amazon.com/gp/product/B00DR7GA4I/ref=oh_aui_detailpage_o04_s00?ie=UTF8&psc=1](http://www.amazon.com/gp/product/B00DR7GA4I/ref=oh_aui_detailpage_o04_s00?ie=UTF8&psc=1).
    This is the specific kit we'll use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, your biped will work more like the legs of a Tyrannosaurus Rex of
    a human, but this will make it easier to program, and it will power down more
    gracefully. It will also be a bit more stable.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need 10 standard size servos. There are several possible choices,
    but **Hitec** servos are relatively inexpensive servos and you can get them at
    most hobby shops and online electronics retailers. One of the important steps
    in this process is to select the model of the servo. Servos come in different
    model numbers, primarily based on the amount of torque they can generate.
  prefs: []
  type: TYPE_NORMAL
- en: Torque is the force that the servo can exert to move the part connected to it.
    In this case, your servos will need to lift and move the weight associated with
    your biped, so you'll need a servo with enough torque to do this. However, there
    are different torque needs for your biped robot. The angle joints will not lift
    the entire leg, so they can be servos with a lower servo rating, for example,
    the HS-422 servos. For the knee servo, you'll need a more powerful servo. In this
    case, I suggest that you use model HS-645MGHB servos. The hip joint that lifts
    the leg is where you will need the most torque to be able to lift the leg. Here,
    too, I suggest that you use the model HS-645MG servos. You can also just use 10
    HS-645MG servos for all the servos, but they are more expensive, so using different
    servos will save you some money.
  prefs: []
  type: TYPE_NORMAL
- en: 'One final piece that you''ll need is some metal servo horns. These servo horns
    are optional, but they will make your biped robot much more solid than the plastic
    servo horns that normally come with the servos. Here is a picture of one of these
    horns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the biped platform](img/B04591_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the steps to assemble the biped:'
  prefs: []
  type: TYPE_NORMAL
- en: Attach the first ankle servo to the foot. To do this, find the foot plate, as
    shown here:![Building the biped platform](img/B04591_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the bottom of the foot. Notice the beveled holes-you''ll be using bevel-headed
    bolts to connect a servo bracket to the foot plate, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Building the biped platform](img/B04591_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure that the bottom of the foot is flat. Before you mount the servo to
    this bracket, you'll first connect a U-shaped bracket to this servo bracket using
    one of the bearings in the kit, like this:![Building the biped platform](img/B04591_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, mount one of the servos in the bracket and connect the U-shaped bracket
    to the servo horn, as shown here:![Building the biped platform](img/B04591_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This first servo should allow your biped to move the foot, tipping it side to
    side. Now, add the second ankle servo to the foot. This will allow your biped
    to tip the ankle front to back. To do this, connect a servo bracket to the assembly
    you just created, and then add a U bracket to this assembly, like this:![Building
    the biped platform](img/B04591_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add the bracket to this assembly, like this:![Building the biped platform](img/B04591_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you can add the knee servo to your biped. However, you'll first want to
    connect the upper leg, the longest U bracket, to a servo bracket, like this:![Building
    the biped platform](img/B04591_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, connect this assembly, using another bearing, to the lower leg that you
    have already built, like this:![Building the biped platform](img/B04591_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you can mount the knee servo in this place. If you have different servos,
    use a more powerful servo in the knee joint. Here is a picture:![Building the
    biped platform](img/B04591_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to put the hip together. First, you'll put the servo that turns
    the leg, connecting it to a servo bracket, as shown here:![Building the biped
    platform](img/B04591_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, connect this servo bracket to the long U bracket, and mount the servo that
    lifts the entire leg. This is another place; if you are using different servos,
    you'll want to use a servo with a significant torque. The entire assembly should
    look like this:![Building the biped platform](img/B04591_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the other leg together. It will be a mirror image of the first leg.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you'll connect both legs to the hip by first connecting a servo bracket
    connector to the hip piece, in two places, like this:![Building the biped platform](img/B04591_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, mount the top of the leg servos into the brackets, like this:![Building
    the biped platform](img/B04591_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your biped is now ready to walk. Now that you have the basic hardware assembled,
    you can turn your attention to the electronics.
  prefs: []
  type: TYPE_NORMAL
- en: Using a servo controller to control the servos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make your biped walk, you first need to connect the servo motor controller
    to the servos. The servo controller you are going to use for this project is a
    simple servo motor controller utilizing the USB from Pololu—Pololu item number
    1354 is available at pololu.com—that can control 18 servo motors. Here is a picture
    of the unit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a servo controller to control the servos](img/B04591_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure that you order the assembled version. This piece of hardware will
    turn USB commands from Raspberry Pi into signals that control your servo motors.
    Pololu creates a number of different versions of this controller, and each one
    is able to control a certain number of servos. In this case, you may want to choose
    the 18 servo version, so that you can control all 12 servos with one controller,
    and you may also add an additional servo to control the direction of a camera
    or sensor. You could also choose the 12 servo version. One advantage of the 18
    servo controller is the ease of connecting power to the unit via screw-type connectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two connections you''ll need to make to the servo controller in order
    to get started: the first to the servo motors and the second to a battery.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, connect the servos to the controller. In order to be consistent, let''s
    connect your 12 servos to the connections marked 0 through 11 on the controller
    using this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Servo Connector | Servo |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Right ankle in/out |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Right ankle front/back |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Right knee |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Right hip up/down |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Right hip turn |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Left ankle in/out |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Left ankle front/back |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Left knee |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | Left up/down |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | Left hip turn |'
  prefs: []
  type: TYPE_TB
- en: 'Here is a picture of the back of the controller; this will tell us where to
    connect our servos:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a servo controller to control the servos](img/B04591_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you need to connect the servo motor controller to your battery. For this
    project, you can use a 2S RC LiPo battery; it will supply the 7.4 volts and the
    current required by your servos, which can be on the order of 2 amps. Here is
    a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a servo controller to control the servos](img/B04591_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This battery will come with two connectors, one with larger gauge wires for
    normal usage and a smaller connector to connect to the battery recharger. You
    can use the XT60 Connector Pairs, solder some wires to the mating connector of
    the battery, and then insert the bare end of the wires into the servo controller.
  prefs: []
  type: TYPE_NORMAL
- en: Your system is now functional. You can connect the motor controller to your
    personal computer to check whether you can communicate with it. To do this, connect
    a mini USB cable between the servo controller and your personal computer.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating with the servo controller with a PC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the hardware is connected, you can use some software provided by Polulu
    to control the servos. Let''s do this using your personal computer. First, download
    the Polulu SW from [www.pololu.com/docs/0J40/3.a](http://www.pololu.com/docs/0J40/3.a),
    and install it based on the instructions on the website. Once it is installed,
    run the software, and you should see this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Communicating with the servo controller with a PC](img/B04591_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, you will need to change the configuration in Serial Settings, so select
    the **Serial Settings** tabs, and you should see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Communicating with the servo controller with a PC](img/B04591_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure that USB Chained is selected; this will allow you to connect and
    control the motor controller over USB. Now, go back to the main screen by selecting
    the **Status** tab; now, you can actually turn on the 10 servos. The screen should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Communicating with the servo controller with a PC](img/B04591_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can use the sliders to actually control the servos. Turn on servo 0\.
    Make sure that servo 0 moves the lower-right ankle servo. You can also use this
    to center the servos. Set servo 1 so that the slider is in the middle. Now, unscrew
    the servo horn on the servo until the servos are centered at this location. At
    the zero location of all servos, your biped should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Communicating with the servo controller with a PC](img/B04591_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting the servo controller to the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've checked the servo motor controller and the servos. You can now connect
    the motor controller up to the Raspberry Pi and make sure that you can control
    the servos from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s talk to the motor controller. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect Raspberry Pi to the motor controller by connecting a mini USB to a mini
    USB cable. Connect the cable to the USB host connection on the Raspberry Pi, like
    this:![Connecting the servo controller to the Raspberry Pi](img/B04591_02_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Linux code from Pololu at [https://www.pololu.com/docs/0J40/3.b](https://www.pololu.com/docs/0J40/3.b).
    Perhaps the best way to do this is to log on to your Raspberry Pi and then type
    `wget http://www.pololu.com/file/download/maestro-linux-100507.tar.gz?file_id=0J315`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, move the file using `mv maestro-linux-100507.tar.gz\?file_id\=0J315 maestro-linux-100507.tar.gz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpack the file by typing `tar –xvf maestro_linux_011507.tar.gz`. This will
    create a directory called `maestro_linux`. Go to this directory by typing `cd
    maestro_linux`, and then type `ls`; you should see something like this:![Connecting
    the servo controller to the Raspberry Pi](img/B04591_02_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `README.txt` document will give you explicit instructions on how to install
    the software. Unfortunately, you can''t run **MaestroControlCenter** on your Raspberry
    Pi; the version of Windows it uses doesn''t support the graphics, but you can
    control your servos using the **UscCmd** command-line application. First, type`./UscCmd
    --list`, and you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the servo controller to the Raspberry Pi](img/B04591_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The unit sees your servo controller. If you just type `./UscCmd`, you can see
    all the commands you could send to your controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the servo controller to the Raspberry Pi](img/B04591_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that you can send a specific target angle to a servo, although the target
    is not in angle values, so it makes it a bit difficult to know where you are sending
    your servo. With a servo and battery connected to the servo controller, try to
    type `./UscCmd --servo 0, 10`. The servo will move to its full angle position.
    Type `./UscCmd – servo 0, 0`, and it will stop the servo from trying to move.
    In the next section, you'll write some Python code that will translate your angles
    to the commands that the servo controller will want to see in order to move it
    to specific angle locations. If you are struggling with the USB connection, refer
    to [http://www.linux-usb.org/FAQ.html](http://www.linux-usb.org/FAQ.html) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you didn't run the Windows version of Maestro Controller and set **Serial
    Settings** to **USB Chained**, your motor controller may not respond. Rerun the
    MaestroController code and set **Serial Settings** to **USB Chained**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a program to control your biped
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you know that you can talk to your servo motor controller and move your
    servos. In this section, you'll create a Python program that will let you talk
    to your servos to move them at specific angles. You can use Python as it is very
    simple and easy to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple program that will make your legged mobile robot''s
    servos go to 90 degrees (which should be somewhere close to the middle between
    the 0 to 180 degrees you can set). Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a program to control your biped](img/B04591_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is an explanation of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`#!/usr/bin/python`: This first line allows you to make this Python file execute
    from the command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`import serial`: This line imports the serial library. You need the serial
    library to talk to your unit via the USB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`def setAngle(ser, channel, angle):`: This function converts your desired setting
    of servo and angle into the serial command that the servo motor controller needs.
    To understand the specifics of the code used to control the servos, refer to [https://www.pololu.com/docs/0J40](https://www.pololu.com/docs/0J40).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ser = serial.Serial("/dev/ttyACM0", 9600)`: This opens the serial port connection
    to your servo controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for i in range(0, 9)`: For loop to access all nine servos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setAngle(ser, i, 90)`: Now, you can set each servo to the middle (home) position.
    The default would be to set each servo to 90 degrees. If your legs aren''t in
    their middle position, you can adjust them by adjusting the position of the servo
    horns on each servo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To access the serial port, you'll need to make sure that you have the Python
    serial library. If you don't, then type `apt-get install python-serial`. After
    you have installed the serial library, you can run your program by typing `python
    quad.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the basic home position set, you can ask your robot to do something.
    Let''s start by having your biped move its foot. Here is the Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a program to control your biped](img/B04591_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, you are using your `setAngle` command to set your servos to manipulate
    your robot's right ankle.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now have a robot than can move! In the next chapter, you'll learn how to
    make your robot do many amazing things. You'll learn how to make it walk forward
    and backward and how to make it dance and turn. With some basic knowledge, any
    number of movements is possible.
  prefs: []
  type: TYPE_NORMAL
