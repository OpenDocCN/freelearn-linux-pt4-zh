- en: Chapter 9. Managing E-mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Postfix to provide SMTP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding SASL to Postfix with Dovecot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Postfix to use TLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Dovecot for secure POP3 and IMAP access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting spam with SpamAssassin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing messages with Procmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll find recipes to help you set up and secure e-mail services
    for your domain. You'll learn how to set up Postfix to run as an SMTP server and
    then learn how to configure it to support SASL authentication and TLS encryption.
    Then we'll configure Dovecot which will provide users access to their e-mail over
    the POP3 and IMAP protocols. Finally, you'll learn how to set up SpamAssassin
    and Procmail to reduce the amount of spam that makes it way to your inbox.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Postfix to provide SMTP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to configure Postfix as a basic e-mail server for
    your domain. E-mail is one of the oldest Internet services and has become one
    its most pervasive services. Moreover, e-mail can be one of the most difficult
    services to manage.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Simple Mail Transport Protocol (SMTP), an e-mail message passes through
    many processes from its starting point on its way to your inbox. When someone
    writes you a message, they use an e-mail client to compose the message. The client
    sends the message to their mail server which looks up the `MX` records for your
    domain and relays the message to your mail server for delivery. Once the message
    is received by your mail server, it's delivered to your mail directory on the
    server. At least that's the basic idea. A message can be relayed by any number
    of intermediate servers between the sender's server and your mail server; servers
    can be configured to send mail, receive mail, or both. Different protocols are
    used to retrieve the messages from the server (POP3 and IMAP) than those used
    to send them, and trying to stay one step ahead of spammers can add a fair amount
    of complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because of the complexity of the e-mail ecosystem and being a mail server administrator
    is often more than a full-time job, I can only present to you the basics. Later
    recipes will teach you how to add authentication and encryption to your setup,
    there will still be much to explore and learn. I strongly recommend that you take
    advantage of the additional resources mentioned in the *See also* section after
    each recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`. You'll want to have a couple of user accounts available
    on the system for testing purposes as well.
  prefs: []
  type: TYPE_NORMAL
- en: Because `MX` records are used to resolve the mail server's address during the
    delivery process, it's assumed that you have either completed the previous chapter's
    recipes or have, otherwise, configured your own DNS records. The IP address `192.168.56.20`
    is used here in keeping with the example network outlined in the *Configuring
    BIND as an authoritative DNS server* recipe in [Chapter 8](ch08.html "Chapter 8. Managing
    Domains and DNS"), *Managing Domains and DNS*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use a text editor to open Postfix''s configuration file `/etc/postfix/main.cf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the example `myhostname` parameters. Delete the leading `#` character
    to uncomment one of the examples and update its value with your qualified hostname:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the example `mydomain` parameter and uncomment and edit it, setting
    your domain name as its value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `inet_interfaces` parameters. Place an `#` in front of the `localhost`
    entry to comment it out and then uncomment the `all` entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `mydestination` parameters and comment out the first entry. Uncomment
    the one that includes `$mydomain` in its list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the example `mynetworks` parameters. Uncomment one of the entries and
    edit it so that the value reflects your network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the example `home_mailbox` parameters and uncomment the entry with the
    `Maildir/` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the Postfix server and optionally enable it to start automatically whenever
    the system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `25` in the system''s firewall to allow outside connections to Postfix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CentOS systems have Postfix installed by default, using it as a local mail transfer
    agent. To reconfigure it to act as our domain's mail server, we updated several
    parameters in its configuration file, `/etc/postfix/main.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we updated the `myhostname` parameter to provide our system''s qualified
    domain name (the hostname and domain name):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Comments in the configuration file refer to a FQDN, but we know better because
    FQDNs require a trailing dot. If you do provide a true FQDN as the value, Postfix
    will fail to start stating that the parameter's value is bad.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mydomain` parameter specifies the domain that this system is a member
    of and that Postfix is handling e-mail for. Although Postfix will try to determine
    the domain name based on the system''s qualified hostname, it''s not a bad idea
    to explicitly define it with `mydomain` to be certain it''s correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `inet_interface` parameter identifies the network interfaces that Postfix
    will listen on for connections. The original configuration accepts connections
    only from the localhost; so we updated it to listen on all interfaces, although
    you may want to specify something more specific if your system is connected to
    multiple networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mydestination` parameter lists the zones for which Postfix will accept
    mail for final delivery. We changed the original configuration to include our
    domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If necessary, you should add other values to the list to identify all of the
    system''s hostnames, similar to what''s shown in the last example, `mydestination`,
    in the set. This is important to prevent Postfix from trying to relay messages
    to itself, thinking they''re destined for a different domain when they''re really
    not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mynetworks` parameter identifies the trusted networks Postfix can relay
    messages for. This is the first line of defense against spammers abusing your
    mail server because Postfix will refuse to accept messages for delivery if they''re
    not for our domain and if they''re received from a system outside one of the trusted
    networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we set the messages'' delivery destination using the `home_mailbox`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Messages are traditionally appended to the user's file in `/var/spool/mail`
    in what is known as the **mbox** format. The Maildir format stores messages individually
    in a subdirectory in the user's Maildir directory. Postfix delivers mail to the
    spool by default. We can convert messages between the two formats, but choosing
    Maildir now makes things a bit easier when we configure user access over IMAP
    in a later recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Postfix is restarted, we can send a test message to verify that the server''s
    configuration is correct. There are several ways to do this of course. The easiest
    is to use a command-line e-mail client such as `mailx` to send the message. `mailx`
    isn''t installed by default but is available via `yum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke `mailx` to send a message. The `-s` argument provides the message''s
    subject and `-r` provides the sender''s address (your own e-mail address). Then
    the recipient''s address follows after the arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`mailx` reads the message from `stdin`. A simple "hello world" or "this is
    a test" should be sufficient for testing purposes; when you''re done typing, type
    a period on its own line or press *Ctrl* + *D*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all goes well, `mailx` sends the mail to Postfix for delivery which in turn
    delivers it to the user''s mail directory in `/home/<username>/Maildir/new`. Check
    the directory and output the file''s contents to make sure the message was delivered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_09_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Received messages are delivered to the user's Maildir directory
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can connect directly to Postfix using a Telnet client. Typing
    raw commands to send an e-mail is slightly more involved than sending one using
    `mailx,` but is preferred because it offers you more flexibility and greater visibility
    into how Postfix responds. This can prove invaluable when trying to troubleshoot
    a problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'No Telnet client is installed by default, so first you''ll need to use `yum`
    to install `telnet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use `telnet` to connect to the server on port `25`, the port reserved
    for SMTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MAIL FROM` command is used to provide the sender''s e-mail address and
    `RCPT TO` to provide the recipient''s address. After each is entered, Postfix
    should respond with a `250 Ok` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`DATA` begins the message''s content. Postfix accepts everything we type as
    the message until we type a single period on its own line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to close the connection, type `QUIT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 7 System Administrator''s Guide: Mail Transport Agents ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-email-mta.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-email-mta.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC-5321: Simple Mail Transport Protocol ([https://tools.ietf.org/html/rfc5321](https://tools.ietf.org/html/rfc5321))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mbox vs Maildir: Mail Storage Formats ([http://www.linuxmail.info/mbox-maildir-mail-storage-formats/](http://www.linuxmail.info/mbox-maildir-mail-storage-formats/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup a Local Mail Server in CentOS 7 ([http://www.unixmen.com/setup-a-local-mail-server-in-centos-7](http://www.unixmen.com/setup-a-local-mail-server-in-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding SASL to Postfix with Dovecot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a mail server relays a message to another domain (that is, the recipient's
    address is not in our domain) and the message originates from outside our network,
    the server is known as an open relay. Spammers are constantly on the lookout for
    open relays because such permissive behavior is easy to take advantage of, and
    Postfix tries to protect us by default by only relaying messages that come from
    our network. Unfortunately, it's not practical to restrict legitimate users from
    sending e-mail through the server only when they're on our network. This recipe
    teaches you how to add Simple Authentication and Security Layer (SASL) authentication
    to Postfix's configuration using Dovecot. Postfix will then happily relay messages
    for our users authenticated users, regardless of their network location, while
    still refusing to do so for anyone else.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with Postfix configured as described in
    the previous recipe. Administrative privileges are also required, either by logging
    in with the root account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to secure Postfix to SASL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `dovecot` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `/etc/dovecot/conf.d/10-master.conf` file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `unix_listener` section for /`var/spool/postfix/private/auth`. Uncomment
    the section by removing the leading `#` characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `mode` to `0660` and add the parameters `user` and `group` to the section
    with the value `postfix`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/etc/dovecot/conf.d/10-auth.conf` file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `auth_mechanisms` option and add `login` to its value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the Dovecot server and optionally enable it to start automatically whenever
    the system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `/etc/postfix/main.cf` file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the configuration file, add the following options and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Postfix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dovecot is a primarily a mail retrieval server offering users access to their
    e-mail using the POP and IMAP protocols, and it also allows Postfix to hook into
    its SASL authentication mechanism. We'll need a retrieval server for users to
    fetch their e-mail from the system, and Dovecot and Postfix integrate nicely,
    so choosing Dovecot over other options makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: Dovecot's configuration is organized into various files, each file addressing
    a particular feature or bit of functionality. For this recipe, we needed to update
    the master configuration file `/etc/dovecot/conf.d/10-master.conf` and the authentication
    configuration file `/etc/dovecot/conf.d/10-auth.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `10-master.conf`, we located the `unix_listener` parameter that defines
    the SMTP authentication service that will be shared with Postfix. Uncommenting
    it will create the socket file `/var/spool/postfix/private/auth` over which Dovecot
    and Postfix will communicate. We then updated the `mode` parameter and added the
    `user` and `group` parameters to secure the socket''s ownership and access permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In `10-auth.conf`, we located the `auth_mechanism` parameter and added `login`
    to its value. This parameter sets the list of mechanisms Dovecot uses, and `login`
    is the mechanism used specifically for SMTP authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`plain` allows users to provide their username and password in plain text.
    `login` is also considered a plain text mechanism, but don''t worry; you''ll learn
    how to secure that in the next recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final bit of configuration involves adding the necessary SASL-related parameters
    to Postfix''s `main.cf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`smtpd_sasl_auth_enable` enables SASL authentication and `smtpd_sasl_type`
    informs Postfix that it will be using Dovecot''s authentication service. The `smtpd_sasl_path`
    parameter specifies the path to the socket file that is used to communicate with
    Dovecot relative to Postfix''s working directory. `smtpd_sasl_security_options`
    prohibits anonymous connections and requires everyone to be authenticated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix expects the username and password to be Base64 encoded so that we need
    to encode them before we can test our configuration with Telnet. `base64` can
    be used, but be careful not to introduce a trailing newline when you provide the
    original values. After invoking `base64`, you can enter your username or password
    on `stdin` and immediately press *Ctrl* + *D* twice, but do not press *Enter*.
    You may want to redirect base64''s output to a separate file you can dump later
    to more readily distinguish the encoded value from the original, since they''ll
    appear to run together in the terminal without the newline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Despite the hassle of "newline vigilance", this approach is better than piping
    the value as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**echo -n tboronczyk | base64**`'
  prefs: []
  type: TYPE_NORMAL
- en: The command's invocation will be retained in your shell's history. While this
    is fine for usernames, sensitive data such as passwords should never be provided
    on the command line as part of a command for this very reason.
  prefs: []
  type: TYPE_NORMAL
- en: 'After connecting to the server with `telnet` on port `25`, send the `AUTH LOGIN`
    command to initiate the authentication. Postfix should respond with `VXNlcm5hbWU6`
    which is the Base64 encoded value for `Username:`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide your encoded username and press *Enter*. Postfix then responds with
    `UGFzc3dvcmQ6`, which, as you probably have already guessed, is the encoded version
    of `Password:`. After you provide the encoded password, you''ll be informed if
    the authentication was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_09_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The authentication exchange expects credentials to be Base64 encoded
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on Postfix, Dovecot,
    and SASL:'
  prefs: []
  type: TYPE_NORMAL
- en: The Dovecot Homepage ([http://www.dovecot.org/](http://www.dovecot.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC 4422: Simple Authentication and Security Layer ([https://tools.ietf.org/html/rfc4422](https://tools.ietf.org/html/rfc4422))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postfix SASL How-To ([http://www.postfix.org/SASL_README.html](http://www.postfix.org/SASL_README.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25, 465, 587... What Port Should I Use? ([http://blog.mailgun.com/25-465-587-what-port-should-i-use/](http://blog.mailgun.com/25-465-587-what-port-should-i-use/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Postfix to use TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing authentication for mail relaying is an important step in securing
    your mail server. But as you learned in the previous recipe, the user's name and
    password are sent in clear text. Base64-encoding encodes binary data using only
    ASCII characters, which allows for non-ASCII characters in a user's password for
    example, but encoding isn't encryption. If traffic between the user's mail client
    and the server happens over an untrusted network, a malicious user can easily
    capture the credentials and masquerade as the user. This recipe further secures
    Postfix by configuring Transport Layer Security (TLS) encryption to protect the
    communication from eavesdropping.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with Postfix configured as described in
    previous recipes. Administrative privileges are also required, either by logging
    in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure Postfix to use TLS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a new key file and security certificate with `openssl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use your text editor to open the `/etc/postfix/main.cf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the file, add the following options and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Postfix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An encryption key and a security certificate that confirms the ownership of
    the key are needed for SSL/TLS communications. A self-signed certificate is sufficient
    for personal use or for use with services on a private network, so this recipe
    shows us how to generate this ourselves using `openssl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `req` option makes a new certificate request and `-newkey` asks `openssl`
    to generate a new private key and to use that key when it signs the certificate
    (this is what we mean when we say self-signed certificate). `rsa:2048` says the
    key will be a 2,048-bit RSA key. 2,048-bit keys are generally considered sufficiently
    resistant against attacks until around the year 2030 based on estimates of the
    rate at which computing power increases. 3,072-bit keys are considered suitable
    beyond that. `-nodes` prevents the key file from being encrypted with a passphrase.
    It's important not to encrypt the key file with a passphrase because Postfix needs
    to access the key. If it were encrypted, we'd need to provide the passphrase to
    decrypt the key every time we start Postfix.
  prefs: []
  type: TYPE_NORMAL
- en: '`-x509` specifies that the certificate will be an X.509 certificate (the type
    used by SSL and TLS connections) and `-days` sets the certificate''s expiration
    date to a number of days in the future, in this case 730 days (3 years). `-subj`
    is used to specify the value for the certificate''s `CN` (common name) field,
    which should be the hostname or the IP address of the system the certificate identifies.
    Alternatively, you can omit the argument and `openssl` will prompt you interactively
    for values for a number of other fields as well. Finally, the `-text` argument
    specifies that the certificate should be encoded as text as this is the format
    Postfix expects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_09_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: More identifying information can be embedded within a certificate
  prefs: []
  type: TYPE_NORMAL
- en: 'A self-signed certificate basically says, *here''s my encryption key. You know
    it''s mine because I said so.* If your system''s services are intended for public
    consumption, you''ll most likely need to invest in a certificate signed by a trusted
    Certificate Authority (CA). Trusted certificates say, *you can trust the key is
    mine because a mutual friend will vouch for me*. To obtain a trusted certificate,
    you need a certificate signing request (CSR):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Then, you send your money and the CSR to the CA. After a short wait, you'll
    receive your certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By depending on the CA and the specifics of the request, trusted certificates
    can become quite expensive. And trust isn't what it used to be either. A scandal
    erupted when it was uncovered that employees at a prominent CA were signing forged
    certificates, reportedly for internal testing purposes. One can only wonder at
    the lack of oversight given to the Web of trust. Hopefully, the worst is behind
    us. Browser vendors are starting to push for stricter guidelines and more auditing.
    There are also projects such as *Let's Encrypt* which enable secure trusted certificates
    to be automatically generated for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we added the necessary configuration parameters to Postfix''s `main.cf`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`smtp_tls_security_level` configures Postfix''s enforcing behavior in relation
    to the encrypted connection. `may` enables opportunistic TLS—the server advertises
    that encryption and clients can take advantage of it but its use is not required.
    You may also set the parameter to `encrypt` to make the use of encryption mandatory.'
  prefs: []
  type: TYPE_NORMAL
- en: '`smtpd_tls_cert_file` and `smtpd_tls_key_file` specify the paths to the self-signed
    certificate and the encryption key we generated earlier, respectively. If you''re
    using trusted certificates then you''ll also need to provide the `smtpd_tls_CAfile`
    parameter with a value that identifies the signing CA''s public certificate.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you find that negotiating the secure connection is slow, there are a few
    tuning parameters you can try. For example, we can explicitly specify the source
    of entropy that Postfix is using with `tls_random_source`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we can cache details of the encrypted session between the server and
    mail client. The `smtpd_tls_session_cache_database` parameter defines the file
    in which Postfix will store the cached details and `smtpd_tls_session_cache_timeout`
    specifies how long the session can be cached. This reduces the overhead of establishing
    a new session each time the client connects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the configuration, you can connect using telnet and issue the `STARTTLS`
    command. Postfix should respond that it''s ready to start negotiating the secure
    connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for working with Postfix and TLS:'
  prefs: []
  type: TYPE_NORMAL
- en: Postfix TLS Support ([http://www.postfix.org/TLS_README.html](http://www.postfix.org/TLS_README.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wikipedia: Public Key Infrastructure ([https://en.wikipedia.org/wiki/Public_key_infrastructure](https://en.wikipedia.org/wiki/Public_key_infrastructure))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenSSL Essentials: Working with SSL Certificates, Private Keys, and CSRs ([https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs](https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Dovecot for secure POP3 and IMAP access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you check your e-mail, the e-mail program connects to your mail server
    to see if there are any new messages in your mail directory. If its configured
    to used the Post Office Protocol (POP3), it downloads the messages locally and
    deletes them from the server. If it's configured to use Internet Message Access
    Protocol (IMAP), the mail remains on the server and you manage it remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Dovecot handles both protocols out of the box. Since we've already installed
    Dovecot for its SASL functionality, we could just open the standard ports for
    POP3 and IMAP traffic in the system's firewall and be done. However, the connections
    would be unencrypted and information would be transmitted across the network in
    plain text. This recipe teaches you how to secure these connections with SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with Postfix and Dovecot configured as
    described in previous recipes. Administrative privileges are also required, either
    by logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure access to Dovecot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `/etc/dovecot/dovecot.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `protocols` parameter. Remove the leading `#` character and set
    its value to `imaps pop3s`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `/etc/dovecot/conf.d/10-ssl.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `ssl` parameter and set its value to `yes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `ssl_cert` and `ssl_key` parameters. Update their values with the
    paths to your certificate and key files (note that both paths are preceded with
    `<`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Dovecot for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `993` for IMAP over SSL and port `995` for POP3 over SSL in the firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dovecot makes it easy to secure the traffic for POP3 and IMAP connections;
    in fact, configuring it only took a few seconds. We first edited the `protocols`
    parameter `/etc/dovecot/dovecot.conf` to let Dovecot know that we want these protocols
    to be secured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we updated `/etc/dovecot/conf.d/10-ssl.conf` to enable SSL to use the
    `ssl` parameter and to identify a certificate and encryption key using `ssl_cert`
    and `ssl_key`. Since Postfix and Dovecot are running on the same system and we
    already generated a key and certificate for Postfix, we can reference the same
    files in Dovecot''s configuration. Dovecot uses the leading `<` in front of the
    paths to specify that it should use the file''s content for the parameter''s value
    and not the literal string itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Dovecot will still allow non-SSL access to POP and IMAP (on ports `110` and
    `143`, respectively) from connections originating from the localhost, but once
    we restart it for the configuration changes to take effect, all other users will
    need to use SSL to access their messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `mailx` to test the configuration. First, we''ll check POP3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `-f` argument specifies the directory that `mailx` will read from to retrieve
    our messages. Given as a URI, the value instructs `mailx` to read the default
    directory for our user on the `mail.example.com` system using POP3 over SSL (`pop3s`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The command is the same to check IMAP apart from changing the URI''s protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we''re using a self-signed certificate, `mailx` will complain that
    the certificate has not been marked as trusted by the user and prompt us whether
    we want to continue. Respond with `y` to this and you''ll then be prompted for
    the user''s password. `mailx` then displays the user''s inbox. Exit the program
    by entering `quit` at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_09_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: mailx can be used to test our configuration of POP3 and IMAP over SSL
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If `mailx` complains that it''s missing the `nss-config-dir` variable, you
    can define it on the command line using `-S`. The value should be a path to the
    certificate databases that `mailx` can use to verify certificate trust:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: When we first configured Postfix, we adjusted its `home_mailbox` parameter to
    store messages in separate directories. I acknowledged this was optional at that
    time but it would make things easier and cleaner when we set up retrieval access.
    If you didn't set `home_mailbox` at that time, incoming messages are appended
    to the user's mail spool file under `/var/spool/mail` and some additional configuration
    is necessary for Dovecot to access them. These changes can be made in `/etc/dovecot/conf.d/10-mail.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can convert the spool file to separate messages in a `Maildir`
    directory at this time. First, install the `mb2md` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/postfix/main.cf` file and locate the `home_mailbox` parameter.
    Remove the leading `#` character from the entry with the value `Maildir/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your changes and then restart Postfix for the update to take effect. Then,
    for each account, invoke `mb2md` to convert the spool file. The utility needs
    to be run as the target user, so use `su` to temporarily switch to that user''s
    context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the following resources for more information on the different topics
    discussed in this recipe, including Dovecot, POP3, and IMAP.
  prefs: []
  type: TYPE_NORMAL
- en: The `mailx` manual page (`man 1 mailx`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Dovecot Homepage ([http://www.dovecot.org/](http://www.dovecot.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC 3501: Internet Message Access Protocol ([https://tools.ietf.org/html/rfc3501](https://tools.ietf.org/html/rfc3501))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC 1939: Post Office Protocol ([https://tools.ietf.org/html/rfc1939](https://tools.ietf.org/html/rfc1939))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting Mbox Mailboxes to Maildir format ([http://batleth.sapienti-sat.org/projects/mb2md/](http://batleth.sapienti-sat.org/projects/mb2md/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting spam with SpamAssassin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some estimates propose that over 90% of all e-mail is unsolicited advertisements
    (spam)! Regardless of whether these estimates are correct or not, there's no denying
    that spam is a huge problem. Unwanted messages cause extra load on mail servers,
    consume storage space, and can even be a security risk. Also, while there have
    been many attempts to legally manage spam, such attempts have largely failed.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe teaches you how to set up SpamAssassin to identify spam messages.
    SpamAssassin filters incoming messages by checking for various spam hallmarks,
    such as missing headers and invalid return addresses, and uses heuristics to analyze
    the message content. Each check contributes to the message's overall spam score,
    and if this score exceeds the defined threshold then the message is labeled spam.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with Postfix configured as described in
    the previous recipe. Administrative privileges are also required, either by logging
    in with the root account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to identify spam using SpamAssassin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `spamassassin` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start SpamAssassin and optionally enable it to start automatically whenever
    the system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create SpamAssassin''s Bayesian classifier database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an unprivileged system user account that Postfix can use to communicate
    with SpamAssassin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Postfix''s `master.cf` file for editing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the line that defines the `smtp` service and append the `-o` argument
    specifying `spamassassin` as a content filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the configuration file, add the definition for the `spamassassin`
    filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Postfix for the updates to the configuration to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The initial installation of SpamAssassin is pretty straightforward. We installed
    the `spamassassin` package and started and enabled the `spamassassin` service
    which runs the `spamd` daemon. The client program `spamc` is used to communicate
    with the daemon, and the rest of the recipe's steps focused on configuring Postfix
    to use `spamc` to score the e-mail message.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created a new user account named `spamd` for Postfix to use when it invokes
    `spamc`. The account is intended to be a noninteractive system account, so we
    provided the `-r` argument. This causes no `home` directory to be created and
    the account''s user ID to be assigned a value less than 100\. The `-s` argument
    gives `/sbin/nologin` as the account''s shell to prevent someone from logging
    in using the account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: For Postfix to pass messages to SpamAssassin, we need to define a new `spamassassin`
    service in its `master.cf` configuration file and ask Postfix to use the service
    as a content filter. The organization of `master.cf` is much different from the
    configuration files we've seen before—each line defines a process in the mail
    delivery pipeline and certain properties about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first active entry in the file is for the `smtp` service and looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The first column is the name of the service and the second column specifies
    how the service will communicate. For example, `inet` signifies that the process
    uses a TCP/IP socket while `unix` signifies that it uses a local unix-domain socket.
    The next three columns indicate whether the process is private (only accessible
    to Postfix), runs without administrative privileges, and is chrooted. Their values
    can be `y` for yes, `n` for no, or `-` for Postfix's default value. The remaining
    columns provide a wakeup timer for processes that run at time intervals, the limit
    for the number of instances that can be running at the same time, and the command
    that's invoked to provide the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set our `spamassassin` service as a filter, we updated the `smtp` service''s
    command with the `-o` option to set the `content_filter` parameter with the name
    of our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we defined the `spamassassin` service at the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `pipe` command is part of Postfix's delivery system with the purpose of
    piping messages to external processes. The `user` argument specifies the name
    of the user account the invoked process will run under and `argv` is the command
    and its arguments that will be run. Our definition references the `spamd` user
    we created earlier and pipes the message to the `spamc` client.
  prefs: []
  type: TYPE_NORMAL
- en: After the message is reviewed by `spamd`, `spamc` returns the message to stdout
    by default. To avoid losing the message, we pipe the output to another process
    to deliver the message. `-e` instructs `spamc` to pipe the output for handling,
    in this case to a program named `sendmail`.
  prefs: []
  type: TYPE_NORMAL
- en: Sendmail is another mail server that's quite older than Postfix. It dominated
    the e-mail landscape for decades, and as such many programs attempt to interface
    with it to send mail. This instance of `sendmail` is actually Postfix's Sendmail
    compatibility interface which allows other processes to think they're calling
    Sendmail when in fact they're really working with Postfix. The `-oi` argument
    for `sendmail` instructs the mail server to treat lines with a single dot as regular
    input and not interpret it as the end of the message. The `-f` argument sets the
    from address of the message to the value of `${sender}`, a special variable populated
    by Postfix with the sender's e-mail address, and the message is sent to `${recipient}`,
    the recipient's e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the configuration, we can send an e-mail message with the following
    subject—it''s a known value that SpamAssassin always marks as spam:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_09_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An e-mail is sent with a known signature in the subject line to test SpamAssassin
  prefs: []
  type: TYPE_NORMAL
- en: 'When you check the message in your inbox, you''ll notice that SpamAssassin
    will have prepended `[SPAM]` to the subject line, allowing you to easily identify
    unwanted messages. It also adds additional headers to the message that summarizes
    its findings that lead it to the conclusion that the message is spam:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: SpamAssassin updates a message's subject line and adds additional headers to
    explain why it thinks the message is spam
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that the world of spam is constantly in flux; programmers are
    working hard to build better spam filters, but spammers are working just as hard
    to find ways to circumvent them. For this reason, it''s important to keep SpamAssassin''s
    database up to date. A cron job is added when SpamAssassin is installed that will
    update its database daily, but you can also run an update manually any time you
    like by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If SpamAssassin is falsely identifying a large amount of legitimate messages
    as spam or vice versa, you can train it''s Bayesian classifier to better identify
    unwanted messages using `sa-learn`. We can provide a collection of messages we
    know are spam and identify them as such with the `--spam` argument, and good messages
    with `--ham` for the program to study:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '`sa-learn` keeps track of the messages it''s seen. If you have previously indicated
    that a message is spam and then later use it as ham, the program will remove it
    from its spam database, and vice versa if you indicate an e-mail is good but later
    decide it should be used as spam.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with SpamAssassin:'
  prefs: []
  type: TYPE_NORMAL
- en: The `sa-learn` manual page (`man 1 sa-learn`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SpamAssassin Home Page ([http://spamassassin.apache.org/](http://spamassassin.apache.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rum SpamAssassin with Postfix ([http://howto.gumph.org/content/run-spamassassin-with-postfix/](http://howto.gumph.org/content/run-spamassassin-with-postfix/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop Spam on your Postfix Server with SpamAssassin ([https://www.linux.com/learn/stop-spam-your-postfix-server-spamassassin](https://www.linux.com/learn/stop-spam-your-postfix-server-spamassassin))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bayes Theorem Explained Like You're Five ([https://www.youtube.com/watch?v=2Df1sDAyRvQ](https://www.youtube.com/watch?v=2Df1sDAyRvQ))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing messages with Procmail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on your preferences, tagging messages as spam may not be enough. Maybe
    you'll want to set up a rule in your e-mail client that moves any unwanted messages
    from your inbox to a dedicated spam directory. Or maybe you want such routing
    to happen automatically on the server. We can configure this using Procmail, a
    mail filtering and delivery agent.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll look at how to configure Procmail to route messages. We'll
    scan incoming mail, looking for a special header that SpamAssassin adds to messages
    if it thinks they're spam and then deliver them to a separate directory instead
    of the inbox.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with Postfix configured as described in
    the previous recipes. Administrative privileges are also required, either by logging
    in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Procmail to route messages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `/etc/procmailrc` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create each user''s spam directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you created the user''s spam directory as `root`, fix the directory and
    subscription file''s ownership and permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Postfix''s `main.cf` configuration file with your editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the example `mailbox_command` parameters. Uncomment the second example
    and correct its path to the `procmail` executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Postfix for the updated configuration to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like Postfix, Procmail is installed by default on CentOS systems. However, we
    need to create its configuration file for it to be useful to us. The main configuration
    file is `/etc/procmailrc` and we start it by defining the `MAILDIR`, `DEFAULT`,
    and `INCLUDERC` variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '`MAILDIR` provides the location of the user''s mail directory. `procmailrc`
    is a global configuration file and we use `$HOME` to denote the user''s home directory
    in which `Maildir` resides. `DEFAULT` provides the default location for incoming
    mail, which is the mail directory''s `new` directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '`INCLUDERC` gives the name of other files that should be included when Procmail
    processes the configuration file. In this case, SpamAssassin installs a configuration
    file to integrate with Procmail which we reference.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part of the configuration appears as a cryptic incantation—the definition
    of a matching rule. In Procmail parlance, they''re called recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: More than one rule can be given in the configuration file, in which case they
    are processed in the order in which they appear, top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: All rules begin with `:0` and contain conditions followed by an action. Here,
    the condition starts with `*` to specify a regular expression pattern that Procmail
    will search the message and its headers for. The action line then lists the directory
    that matching messages will be delivered to. If it's given as a relative path,
    the directory considered will be relative to `$MAILDIR`. Thus, the rule asks Procmail
    to route any messages flagged with the `X-Spam-Status` header by SpamAssassin
    to the user's `Maildir/.Spam` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original Maildir specification only allows the `new`, `cur`, and `tmp`
    directories, but others have augmented it to support additional directories. The
    user can either create their spam directory through their e-mail client over IMAP,
    in which case all of the details are worked out by Dovecot. Alternatively, we
    can create it for them in the filesystem. When we create a directory manually,
    the `subscriptions` file must list the additional directories, one entry per line,
    for them to be visible in the user''s mail client. The directories themselves
    are then named with a leading dot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Procmail also allows for per-user actions as well. For example, if only one
    user wants to have flagged messages moved to their spam folder, the matching rule
    can be moved from the global configuration under `/etc` to a file named `.procmailrc`
    in their `home` directory. It's still recommended that you keep the variable definitions
    in the global configuration so that they'll be available to all users, as Procmail
    executes the global file first and then the user's local `.procmailrc` if it's
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various flags can be given after `:0` that modify how Procmail behaves or how
    the rule is interpreted. For example, Procmail only search the message''s headers
    by default. To search the message''s body, we need to provide the `B` flag. The
    following rule is an example that searches the message''s body for the text "Hello
    World" and routes the matching messages to `/dev/null`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Some flags you may find useful are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`H`: Search the message''s headers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`B`: Search the message''s body'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D`: Match the regular expression in a case-sensitive manner'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`e`: Only execute the rule if the rule immediately preceding it was unsuccessful'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c`: Create a copy of the message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`h`: Only send the message''s header to a piped program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Only send the message''s body to a piped program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the action begins with `|` then the value is interpreted as a command and
    the message is piped to it. Here''s an example that sends a copy of any messages
    received from the human resources department to the printer by piping it through
    `lpr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'If the action begins with `!` then the value is seen as an e-mail and the message
    is forwarded. This example routes an e-mail from a known recipient to a personal
    e-mail account instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on Procmail:'
  prefs: []
  type: TYPE_NORMAL
- en: The `procmail` manual page (`man 1 procmail`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `procmailrc` file manual page (`man 5 procmailrc`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timo's Promail tips and recipes ([http://www.netikka.net/tsneti/info/proctips.php](http://www.netikka.net/tsneti/info/proctips.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
