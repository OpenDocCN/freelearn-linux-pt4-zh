- en: Chapter 6. NSX Security Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Traditionally, isolating and securing a network was done at the perimeter level
    of any data center, which was an error-prone and time-consuming activity. In the
    current Software Defined Data Center world, where most workloads are dynamic,
    we need better control over the security feature, and at the same time we expect
    configuration and management of these tasks to be automated without compromising
    any security features. If there is a virtual machine migration from one server
    to another server all my polices should move along with that irrespective of Layer
    2 and Layer 3 boundaries. But the real question would be, is that really possible? In
    this chapter, we will discuss how NSX has changed the view of modern-day data
    center security. We will be covering the following topics with some classic examples:'
  prefs: []
  type: TYPE_NORMAL
- en: NSX Distributed Firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Service Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Distributed Firewall monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX SpoofGuard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DFW takeaways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Distributed Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NSX **Distributed Firewall** (**DFW**) focuses on East-West traffic and NSX
    Edge firewall focuses on North-South traffic. Those of us who remember the vCloud
    network security days will feel like this is an enhancement of the vShield app.
    Okay! For now, I would certainly agree with that; it is certainly an enhanced
    feature-rich version of the vShield app firewall. But the app demands that you
    run a dedicated firewall VM for each host and the virtual machine remains protected
    irrespective of where they are moving. Apart from the fact that it demands a hypervisor-specific
    firewall (FW) virtual machine, it was a featureless firewall and installation
    and troubleshooting was also slightly tedious. NSX Distributed Firewall is a hypervisor
    kernel-embedded firewall and policies are totally virtualization-aware. What does
    that mean? We can apply policies on vCenter objects such as data centers and clusters
    and virtual machine names and tags, and network constructs such as IP/VLAN/VXLAN
    addresses. What if we have the same firewall rule added in NSX Edge and Distributed
    Firewall? Which policy would be enforced first? There are two answers to that
    question. If the traffic is going out from the virtual machine, certainly the
    distributed firewall rule will be checked first, primarily because it is a VNIC-level
    firewall policy. However, if traffic is coming into the virtual data center, NSX
    Edge, our perimeter device, will be the first point of firewall rule table checking
    and later there would be a VNIC-level filtering also. Time to ask a few questions
    and justify why it is a feature-rich firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: Can we have a dynamic FW rule creation based on the virtual name or operating
    system name?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have a domain user **A** and we need to **allow** and **block** a few rules
    based on user access **A**. Is that achievable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I have two tenants and we are using IPV4 and IPV6 respectively; can we leverage
    the Distributed Firewall feature irrespective of the IP stack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we monitor the network activity between two virtual machines based on the
    firewall rule? This will ensure our rules are working as expected or we can take
    proactive action if required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm migrating my virtual machine from cluster A to cluster B; will it retain
    the security/firewall policies? Do I need to add/delete any security/firewall
    settings in the physical network?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we implement a few network security policies without changing/impacting
    our existing physical network topology?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding questions are not a complete list. However, these are few key
    concerns for now, apart from being keen to know if we have a security feature
    X when we leverage an NSX distributed firewall, the fundamental problem is the
    question of whether I can switch my traditional physical-network-based security
    controls to the NSX world so that my features and policies are more virtualization-aware
    or, one more ask is, are they application aware policies with visibility over
    users, process, usage, and so on?  Don''t get me wrong, we are not taking/removing
    all the physical network security settings and replicating them in the NSX world.
    All we need is a better secured network virtualized platform. NSX Distributed
    Firewall provides a micro-segmentation feature which resolves a lot of network
    security challenges. Since the firewall modules are running inside the ESXi host,
    we will always get a better throughput and policy configuration, deletion and
    monitoring all can be done from one single management console—vSphere web client.
    Before discussing firewall rules and how they work, let''s understand what components
    are involved and how they communicate with each other. As we can see from the
    following diagram, we have vSphere web client, NSX Manager, and vSphere farm with
    all the VIBS loaded. By connecting to vCenter Server through web client, we can
    create security policies and NSX Manager will push the policies to vSphere Servers.
    **VMware Service Insertion Platform** (**VSIP**), which is a module within DFW,
    will apply the policy to underlying virtual machines. Any new generation or traditional
    port-based firewall  will have an intelligent rule table and NSX DFW is of no
    exception. There are two tables associated with DFW:'
  prefs: []
  type: TYPE_NORMAL
- en: Rule table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connection table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While the rule table maintains all the rules, the connection table will keep
    track of active connections based on the type of rules that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX Distributed Firewall](img/image_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a fundamental understanding of what Distributed Firewall is,
    it is equally important to know that DFW is fully virtualization-aware firewall
    and we can set firewall rules at the following vCenter Server objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Data center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vSwitch Port Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed Switch Port Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual app(vAPP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vNIC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP Sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Service Composer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NSX Service Composer is a built-in feature which allows you to configure security
    services, firewall rules, and security policies with the help of security groups
    and security policies. We can create security groups and security policies and
    can apply a combination of security groups and security policies using NSX Service
    Composer, which is certainly a great way of automating rule/policy creation tasks.
    In a nutshell, we are doing two tasks and the final result is the automation of
    network security in the NSX world:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy + Apply = Network Security Automation
  prefs: []
  type: TYPE_NORMAL
- en: But the question is, What are we going to deploy and where are we going to apply
    that? For that, we need to understand what security groups and security policies
    are.
  prefs: []
  type: TYPE_NORMAL
- en: Security groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A security group is where we define what type of assets we want to protect
    and we can define the group with the **dynamic way** of selecting an asset or
    we could simply create a **static membership** group. We will go back and read
    our questionnaire section in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Can we have dynamic rule creation based on the virtual name or operating system
    name?
  prefs: []
  type: TYPE_NORMAL
- en: That gives us clarity on why dynamic membership would be a key factor while
    creating security groups. In a nutshell, when we create a Dynamic Membership Group
    with selection criteria *Include All Operating System of windows flavor and apply
    the Security Group with a Security Policy that will one the easiest way in which
    we would have created and Secured our Virtual Machines with the intelligence of
    DFW firewall.*
  prefs: []
  type: TYPE_NORMAL
- en: Security policies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security policies are combinations of security services and firewall rules.
    Policies can be a combination of antivirus, data security, vulnerability, network
    introspection, and firewall rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay! But what if we need to create a dynamic group, while excluding virtual
    machines running on one specific logic switch and given that all these configurations
    should be part of a single security group? This is the real power of security
    groups: all these configurations can be part of a single security group and in
    that case our security group will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Inclusion + Static Inclusion (if required, we can still have a static
    inclusion list) - Static Exclusion = Security Group.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a basic understanding of security groups and security policies, we will
    go ahead and discuss one of the security requirements to show the power of this
    feature. Let''s have a look at one of the network requirements for securing the
    traffic with DFW features and we will discuss the lab exercise. As per the following
    topology, we have our three-tier application running on three logical switches
    and a transit network:'
  prefs: []
  type: TYPE_NORMAL
- en: App-Tier-01
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web-Tier-01
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DB-Tier-01
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transit network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following diagram, by leveraging NSX DFW we will disable the ICMP traffic
    in the Web-Tier logic switch and the final result will be that web servers running
    in logical switch Web-Tier-01 will block ICMP traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we start, let''s do a simple ping test to confirm whether ICMP is allowed.
    The following screenshot depicts successful ICMP traffic between `web-01a` and
    `web-02a` connected to same logical switch `Web Tier-01`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For configuring a Distributed Firewall rule, we have two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: By selecting **Firewall** | **Networking & Security** | **Firewall**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By selecting **Service Composer** | **Networking & Security** | **Service Composer**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, I''m leveraging Service Composer. Let''s create a security
    group with the name **Web Security-Group**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the dynamic membership list, we are not selecting any options. However,
    it is worth focusing on the **Criteria Details** option to get a clear picture
    of what options are available for defining a dynamic membership group as shown
    in the following screenshot. For example, if we select VM name in the following
    criteria list and mention Windows in white text box and create a Security Group.
    Any existing/future virtual machines which are getting deployed in vCenter Server
    will be applied with the DFW policy. Highly powerful feature as it ease lot of
    repeated task when same set of polices are required for a group of virtual machines
    also down the line adding and deletion of polices to same group is a one click
    task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the static inclusion list, we set **Object Type** to **Logical Switch**
    so that we can apply the policy on the **Web-Tier-01** logical switch as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What next? I have intentionally connected a **Linux VM** to our **Web-Tier**
    and the idea is to exclude only Linux from the security group policy that we are
    creating. Even though we are creating a security group at Logical Switch level,
    we can still filter our policy in such a way by mentioning a exclusion criteria.
    In a nutshell, polices are applied at logical switch level, however it is not
    applied to all the virtual machines connected to same logical switch. As we can
    see from following screenshot, we have set **Object Type** to **Virtual Machine**
    and excluded **Linux-01a**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With that step, we are done with security group creation and we will see the
    web security group created under **Service Composer** | **Networking & Security**
    | **Service Composer**. I have explicitly highlighted the virtual machine as I
    want everyone's attention on the virtual machine number, which is showing as **1**.
    Using the same step, we will create another security group called **Web2Security**
    and in the static inclusion we will include the **Web-02a** virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s revise the two security group rules with our example:'
  prefs: []
  type: TYPE_NORMAL
- en: Security Group (Web Security-Group) = Dynamic Inclusion (Not Selected Anything)
    + Static Inclusion (Selected Web-Tier Logical Switch) - Static Exclusion (Excluded
    Linux VM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Group (Web2Security) = Dynamic Inclusion (Not Selected Anything) +
    Static Inclusion (Web-02a) - Static Exclusion (Not Selected anything)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts two security groups that we created and we
    can see the VM count also showing there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service group](img/image_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a security policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have discussed earlier, policies are groups of security services, such
    as antivirus, IPS/IDS solution, and DFW rules.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating policies, we need to prioritize the policy with a weight attribute
    if required. The whole purpose of this feature is that, at times, objects (in
    our example, let's take a virtual machine as an object) will be part of multiple
    policies. Based on which policy has a higher weight attribute, that policy will
    take precedence over lower-weight attributes. In addition to that, if the policy
    that we are creating receives services from another security policy, we need to
    select the parent policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts a security policy being created; we name it
    **Web Security-Group**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a security policy](img/image_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we are not leveraging guest introspection and network introspection services
    in this example, I''m skipping that configuration and moving directly to the firewall
    rule. Both configurations will be extremely useful for the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Endpoint services are required for data security or third-party solution provider
    services such as antivirus or vulnerability management services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To detect sensitive data such as **Payment Card Industry** (**PCI**), **Protected
    Health Information** (**PHI**), and **Personally Identifiable Information** (**PII**)
    information in our environment, we can create data security policies. When we
    run a scan, data security identifies data that violates the regulations in your
    policy will be **blocked** with brilliance of firewall policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network introspection services that monitor your network, such as IPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s have a closer look at the firewall source and destination rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source**: Policy Security Group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination**: Web2Security Group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service**: We are blocking all ICMP traffic (total 4 ICMP traffic selected
    which we will see very shortly)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the preceding rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a security policy](img/image_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that our security policies and security groups have been created, we can
    simply apply our policy to the **security group** which we created earlier by
    clicking on the **Apply Policy** option, which is portrayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a security policy](img/image_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While applying the security policy, NSX will show us all **Security Groups**
    that have been created and we need to ensure we are applying it against the correct
    security group. Selecting the wrong security group will have a major impact on
    network traffic. Also, we can see a **Synchronize Firewall Config** option just
    below **Apply Policy**. Any time we modify a policy, it is recommended to synchronize
    the firewall configuration. A good sign with the latest release of NSX 6.2.3 is
    there is an out-of-sync security policy alarm which will be generated if a security
    policy is out of sync. But watch out for previous versions of NSX Manager as we
    will never know if the policy is out of sync unless a problem is reported and
    we isolate the same after troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Testing firewall rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What next? Well, if we have been alert so far, we will see these rules getting
    populated in **Firewall** | **Networking & Security** | **Firewall**. The following
    screenshot depicts the WebSecurity rule that we created for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source**: **WebSecurity-Group** (**Web-01a**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination**: **Web2Security** (**Web-02a**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: **4 ICMP protocols** and **Action** is **Block**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Testing firewall rules](img/image_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Time to test what we have configured so far and I will show you the detailed
    firewall summary on the ESXi host. As we can see from the following screenshot,
    we have an SSH session to the `web-02a` machine and we are able to ping 172.16.10.11
    (web-01a):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing firewall rules](img/image_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we do a ping test from `web-01a` to `web-02a,` as shown in the following
    screenshot, the result would be a failure, primarily because of the **ICMP DROP**
    rules that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing firewall rules](img/image_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I strongly believe our DFW basics are crystal-clear. Even though we have a
    troubleshooting chapter coming up, I''m very excited to show you an informative
    output that we can check and view from the underlying host. All we need to do
    is to take an SSH session to the ESXi host wherein our web servers are running
    and issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Distributed Virtual Filter is the module that monitors the outgoing and incoming
    traffic that is protected by NSX DFW. So this command would display the same output.
    The following command output is for the Web-02a virtual machine and let''s make
    a note of the name of the vNic slot 2 associated with the `VM - nic-60841-eth0-vmware-sfw.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing firewall rules](img/image_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see that the preceding command and output don''t give any information
    on all the DFW rules associated with that virtual machine, let''s display the
    rules associated with the name `nic-60841-eth0-vmware-sfw.2`. Issue the following
    command in the same host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot clearly depicts all the rules. I have marked the **DROP**
    rule and we have a total of four rules, which are just the ICMP rules we created
    a few minutes ago:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing firewall rules](img/image_06_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As I said earlier, the complete centralized management of Distributed Firewall
    is done from vSphere web client and, as far as rules are concerned, we will provide
    a name, source and destination entities, type of service, action required, and
    where the rules are enforced. In addition to normal rule creation, DFW also supports
    an identity-based firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding identity-based firewall rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let me reiterate our second query that we had when we discussed DFW:'
  prefs: []
  type: TYPE_NORMAL
- en: I have a domain user A and we need to allow and block a few rules based on user
    access A. Is that achievable?
  prefs: []
  type: TYPE_NORMAL
- en: With an identity-based firewall, we can define firewall rules based on **Active
    Directory** (**AD**) groups. Obviously, there are few prerequisites and limitations
    when we use an identity-based firewall, which we will discuss in a short while.
    First and foremost, we need to register AD with NSX Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Procedure for AD registration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We will follow these steps to register the AD on NSX Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we will log in to vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Managers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click an NSX Manager in the **Name** column and then click the **Manage** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Domain** tab and then click on the add domain icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add Domain** dialog box, enter the fully qualified domain name and
    netBIOS name for the domain. The following figure depicts the preceding steps:![Procedure
    for AD registration](img/image_06_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **LDAP Options** page, specify the domain controller that the domain
    is to be synchronized with and select the protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the port number if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the user credentials for the domain account. This user must be able to
    access the directory tree structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows the LDAP configuration that needs to be filled in
    during the configuration time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Procedure for AD registration](img/image_06_018.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the **Security Event Log Access** page, select the connection method to access
    security event logs on the specified LDAP server. Change the port number if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use Domain Credentials** to use the LDAP server user credentials. To
    specify an alternate domain account for log access, un-select **Use Domain Credentials**
    and specify the user name and password. The specified account must be able to
    read the security event logs on the domain controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Ready to complete** page, review the settings you entered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once after configuring required AD details as shown in the above steps, NSX
    manager to AD synchronization will start. Only when it is synchronized  properly
    we should start leveraging **Identity firewall** (**IDFW**). This is a one time
    task and further synchronization is automatic. What next? We can simply create
    security groups (AD groups) and security policies (Firewal policy) and allow/deny
    the services based on business requirement. The following diagram shows AD integration
    with NSX Manager and AD groups MG as source and destination is group of windows
    machines with http and icmp services allowed between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Procedure for AD registration](img/need-to-change1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: NSX flow monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network monitoring tools are always difficult to set up, configure, and analyze.
    To date, most of us will have configured a third-party monitoring tool for analyzing
    network traffic and taken action accordingly. Maybe we could capture packets at
    a few points and have them analyzed using Wireshark. Do we really like switching
    from one management console to another management console for such scenarios?
    Are we happy with third-party monitoring software and expect all types of integration
    brilliance to showcase all the traffic? I know most people are not happy with
    such tools, which are vendor-dependent. We need a tool which will help us analyze
    things quickly and take proactive action. **NSX flow monitoring** is an built-in
    feature which gives that visibility and control over any traffic. In a nutshell,
    it configures Distributed Firewall to capture traffic and we can analyze traffic
    flow. Flow monitoring data includes the number of sessions and packets transmitted
    per session. Session details include sources, destinations, applications, and
    ports being used, and later we can create firewall allow or block rules based
    on session details. By default, the last 24 hours of data are displayed, the minimum
    time span is 1 hour and the maximum is 2 weeks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable flow monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Networking & Security** from the left navigation pane and then select
    **Flow Monitoring**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Configuration** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **Global Flow Collection Status** is **Enabled** and we are not
    making any changes with the **Detail Collection Policy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts **Global Flow Connection Status** set to **Enabled**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX flow monitoring](img/image_06_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: OK! So we have enabled flow monitoring and we should be able to see a few flow
    stats. In our example, we will quickly check a live flow from a Windows 2008 machine
    (192.168.2.2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Capturing a live flow:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Networking & Security** from the left navigation pane and then select
    **Flow Monitoring**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Live Flow** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Browse** and select **windows-2008(IPSEC) NIC**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Start** to begin viewing live flow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows live flow stats and I have highlighted a block rule
    which applies when source windows-2008 192.168.2.2 tries to communicate with destination
    IP 192.168.4.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX flow monitoring](img/image_06_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, this is an excellent feature and we can easily work out not only
    what type of traffic is allowed and what is blocked but also the incoming and
    outgoing bytes, which is very important for situations wherein we would like to
    know which source is sending more bytes or where we are getting more incoming
    bytes from. In our case, the **TCP-SYNC** packet is sent, but there is no reply
    since I have created a DFW rule that is blocking the traffic between 192.168.2.2
    and 192.168.4.2.
  prefs: []
  type: TYPE_NORMAL
- en: NSX SpoofGuard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another powerful feature of NSX is SpoofGuard. The SpoofGuard feature will monitor
    and manage the IP address of a virtual machine. OK! Why do we need such a feature?
    If a virtual machine is compromised by chance, what are the outcomes? A hacker
    can certainly change the IP and bypass all firewall policies and the rest will
    be history. SpoofGuard gives us that granular control to ensure all IP changes
    are approved, until when traffic would be blocked. NSX Manager will collect the
    IP address of the virtual machines as long we have a VMware tool installed and
    running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are supported in SpoofGuard:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatically trust IP assignments on their first use**: This mode allows
    all traffic from your virtual machines to pass; additionally, it builds a table
    of vNIC-to-IP address assignments. That way, we can review this table and make
    IP address changes. Both IPv4 and IPv6 are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manually inspect and approve all IP assignments before use**: This mode blocks
    all traffic until you approve each vNIC-to-IP address assignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That brings us to another question. How about virtual machines which are leveraging
    DHCP IP? Will they get IP assigned? Do we need to approve them for DHCP IP assignment?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is very simple if we have understood supported SpoofGuard methods.
    Only in **Manual Inspect**, DHCP traffic won''t be allowed until we approve the
    request; the rule applies the same for DHCP as well. By DHCP will be blocked if
    we are manually inspecting IP assignment. That being said, let''s do a lab test
    based on the following scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Virtual machines running on the web server logical switch should inspect all
    IP assignments*.'
  prefs: []
  type: TYPE_NORMAL
- en: Procedure for SpoofGuard configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to perform the following steps for SpoofGuard configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, log in to vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **SpoofGuard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the add icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a name for the SpoofGuard policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can immediately enable or disable based on business requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Operation Mode**, we select **Manually inspect and approve all IP assignments
    before use.** The following screenshot depicts the initial configuration of SpoofGuard:![Procedure
    for SpoofGuard configuration](img/image_06_022.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To specify where we need to apply the SpoofGuard policy, click **Add** and select
    the networks, distributed port groups, or logical switches that this policy should
    apply to. In our example, we are configuring the **Web-Tier** logical switch as
    shown in the following screenshot:![Procedure for SpoofGuard configuration](img/image_06_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we have set SpoofGuard to require manual approval of all IP address, let's
    check that assignment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following screenshot, we are viewing the **Virtual NIC IP Required Approval**
    screen, IP address changes that require approval before traffic can flow to or
    from these virtual machines. Other options available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active Virtual NICs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Virtual NICs Since Last Published**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual NICs with Duplicate IP**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inactive Virtual NICs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unpublished virtual NICs IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Procedure for SpoofGuard configuration](img/image_06_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To approve an IP address, we need to click **Approve** next to the IP address
    option. That sums up our detailed discussion on NSX security and monitoring. A
    few more integrations are certainly possible with NSX, vRealize operations management
    (previously VROPS) with NSX, vCloud Director integration with NSX; vRealize Automation
    with NSX , NSX with third-party software such as Palo Alto networks, check point,
    and so on. Considering the positive momentum NSX has created in the market, more
    and more integrations will be coming down the line, which makes life easier for
    all architects. It's definitely worth knowing all these integrations; please read
    the links I will be providing in [Chapter 8](ch08.html "Chapter 8.  NSX Troubleshooting"),
    *NSX Troubleshooting*. Finally, let's have a quick look at a few key points that
    need to be taken care of.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed Firewall takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Distributed Firewall is a feature-rich firewall. But we have to be extremely
    careful while installing and creating rules. Gone are the days when gigantic physical
    firewalls were used for traffic filtering and other security measures. Applications
    demanded firewalls to be a little closer to them rather than running at **Top
    of Rack** (**TOR**). All we needed was a stateful firewall that is more application-aware.
    When we are inspecting the traffic at near line rate processing that too for East-West
    traffic which will give us better visibility over the traffic and reduces any
    attacking loopholes in virtualized data centers, we can call NSX DFW firewall
    the foundation pillar of **Micro Segmentation**. Worried about bottlenecks? No
    problem! DFW is the new kid in town. Let's have a quick look at a few key takeaways
    from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: DFW doesn't demand any physical network topology changes.
  prefs: []
  type: TYPE_NORMAL
- en: Make a note of all management virtual machines (VMware appliances, third-party
    appliances, AD, DNS and exchange, and so on) that are installed in the vSphere
    environment and make a decision about which should be part of DFW protection.
  prefs: []
  type: TYPE_NORMAL
- en: VSphere switch is not supported for policy enforcement; only logical switches
    and distributed switch port groups are supported. DFW is fully supported with
    IPv4 and IPv6.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from NSX 6.2, DFW rules leveraging vCenter Server objects even without
    VMware tools are supported. NSX 6.1 and above has a new option called **reject**
    in firewall actions. This action is available in NSX Edge as well.
  prefs: []
  type: TYPE_NORMAL
- en: NSX 6.2.3 supports **Trivial File Transfer Protocol** (**TFTP**)-ALG Distributed
    Firewall rules.
  prefs: []
  type: TYPE_NORMAL
- en: An identity-based firewall is supported only for **Windows Clients**, ideal
    for East-West data center traffic. However, we can configure it with NSX Edge
    firewall and a physical firewall, which will bring end-to-end security in the
    overall data center.
  prefs: []
  type: TYPE_NORMAL
- en: Removing and adding vSphere virtual machines from vCenter won't delete any DFW
    rules. Make use of the **exclusion list** feature if you want to exclude a VM
    completely from DFW protection. I will be discussing exclusion lists in more detail
    in [Chapter 8](ch08.html "Chapter 8.  NSX Troubleshooting"), *NSX Troubleshooting*.
  prefs: []
  type: TYPE_NORMAL
- en: If we are leveraging Identity firewall feature and for some reason there is
    a synchronization issue between NSX Manager and Active Directory, it will have
    a direct impact on DFW rules. So this is one scenario wherein Management plane
    (NSX Manager) outage causing a dataplane traffic issue because firewall is impacted.
  prefs: []
  type: TYPE_NORMAL
- en: If we need to identity applications and allow/block the traffic irrespective
    of the port and protocols information, best firewall for such use case will be
    to integrate New generation firewalls like palo alto along with DFW.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not mandatory to install the DFW feature in the vSphere management cluster;
    if we want to install DFW, watch out for the VCenter Server machine. Ensure that
    the machine is excluded from the list. If there is an other third-party management
    software running in the same cluster, DFW doesn''t have the intelligence to exclude
    it from protection. I have seen this mistake back in the VCNS days: all of a sudden,
    VC loses access to all management components. A simple click on the **Install**
    button will cause a major production outage.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter with an introduction to NSX security and later we covered
    DFW architecture, use cases, and features. We also had a discussion about monitoring
    options available in NSX and, finally, we wrapped up the chapter by discussing
    key points to be noted before installing NSX security features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss cross-VC NSX for a multi-site solution
    with logical switch, Distributed Logical Router, and DFW installation and configuration
    across multiple vCenter domains.
  prefs: []
  type: TYPE_NORMAL
