["```\n$ declare -F  \n```", "```\n$ type quote  \n```", "```\nfunction-name() { \n<code to execute> \n} \n```", "```\nfunction <function-name> { \n<code to execute> \n} \n```", "```\n$ show_system() {\necho \"The uptime is:\"\nuptime\necho\necho \"CPU Detail\"\nlscpu\necho\necho \"User list\"\nwho\n}  \n```", "```\n$ sed -i.bak '/^\\s*#/d;/^$/d' <filename>  \n```", "```\n$ function clean_file {\n  sed -i.bak '/^\\s*#/d;/^$/d' \"$1\"\n}  \n```", "```\n#!/bin/bash \n# Script will prompt for filename \n# then remove commented and blank lines \n\nis_file() { \n    if [ ! -f \"$1\" ] ; then \n        echo \"$1 does not seem to be a file\" \n        exit 2 \n    fi \n} \n\nclean_file() { \n    is_file \"$1\" \n    BEFORE=$(wc -l \"$1\") \n    echo \"The file $1 starts with $BEFORE\" \n    sed -i.bak '/^\\s*#/d;/^$/d' \"$1\" \n    AFTER=$(wc -l \"$1\") \n    echo \"The file $1 is now $AFTER\" \n} \n\nread -p \"Enter a file to clean: \" \nclean_file \"$REPLY\" \nexit 1 \n```", "```\n$ cd $HOME\n$ rm $HOME/ntp.conf\n$ mv ntp.conf.bak ntp.conf  \n```", "```\n#!/bin/bash \nmyfunc() { \n   arr=$@ \n   echo \"The array from inside the function: ${arr[*]}\" \n} \n\ntest_arr=(1 2 3) \necho \"The original array is: ${test_arr[*]}\" \nmyfunc ${test_arr[*]} \n```", "```\n#!/bin/bash \nmyfunc() { \n   arr=$1 \n   echo \"The array from inside the function: ${arr[*]}\" \n} \n\nmy_arr=(5 10 15) \necho \"The original array: ${my_arr[*]}\" \nmyfunc ${my_arr[*]} \n```", "```\n#!/bin/bash \nmyvar=10 \nmyfunc() { \n   myvar=50 \n} \nmyfunc \necho $myvar \n\n```", "```\nmyfunc() { \n   local myvar=10 \n} \n```", "```\n#!/bin/bash \nmyvar=30 \nmyfunc() { \n   local myvar=10 \n} \nmyfunc \necho $myvar \n```", "```\nto_lower () \n{ \n    input=\"$1\" \n    output=$( echo $input | tr [A-Z] [a-z]) \nreturn $output \n} \n```", "```\nto_lower () \n{ \n    input=\"$1\" \n    output=$( echo $input | tr [A-Z] [a-z]) \nreturn $output \n} \n\nwhile true \ndo \n  read -p \"Enter c to continue or q to exit: \" \n  $REPLY=$(to_lower \"$REPLY\") \n  if [ $REPLY = \"q\" ] ; then \n    break \n  fi \n\ndone \necho \"Finished\" \n```", "```\n4! = 4*3*2*1\n```", "```\n#!/bin/bash \ncalc_factorial() { \nif [ $1 -eq 1 ] \nthen \necho 1 \nelse \nlocal var=$(( $1 - 1 )) \nlocal res=$(calc_factorial $var) \necho $(( $res * $1 )) \nfi \n} \n\nread -p \"Enter a number: \" val \nfactorial=$(calc_factorial $val) \necho \"The factorial of $val is: $factorial\" \n```", "```\n#!/bin/bash \n# Author: @likegeeks \n# Web: likegeeks.com \n# Sample menu with functions \n# Last Edited: April 2018 \n\nto_lower() { \n    input=\"$1\" \n    output=$( echo $input | tr [A-Z] [a-z]) \nreturn $output \n} \n\ndo_backup() { \n    tar -czvf $HOME/backup.tgz ${HOME}/bin \n} \n\nshow_cal() { \n    if [ -x /usr/bin/ncal ] ; then \n      command=\"/usr/bin/ncal -w\" \n    else \n      command=\"/usr/bin/cal\" \n    fi \n    $command \n} \n\nwhile true \ndo \n  clear \n  echo \"Choose an item: a, b or c\" \n  echo \"a: Backup\" \n  echo \"b: Display Calendar\" \n  echo \"c: Exit\" \n  read -sn1 \n  REPLY=$(to_lower \"$REPLY\") \n  case \"$REPLY\" in \n    a) do_backup;; \n    b) show_cal;; \n    c) exit 0;; \n  esac \n  read -n1 -p \"Press any key to continue\" \ndone \n```", "```\n#!/bin/bash \nmyfunc() { \narr=$1 \necho \"The array: ${arr[*]}\" \n} \n\nmy_arr=(1 2 3) \nmyfunc ${my_arr[*]} \n```", "```\n#!/bin/bash \nmyvar=50 \nmyfunc() { \nmyvar=100 \n} \necho $myvar \nmyfunc \n```", "```\nclean_file { \n    is_file \"$1\" \n    BEFORE=$(wc -l \"$1\") \n    echo \"The file $1 starts with $BEFORE\" \n    sed -i.bak '/^\\s*#/d;/^$/d' \"$1\" \n    AFTER=$(wc -l \"$1\") \n    echo \"The file $1 is now $AFTER\" \n} \n```", "```\n#!/bin/bash \nmyfunc() { \narr=$@ \necho \"The array from inside the function: ${arr[*]}\" \n} \n\ntest_arr=(1 2 3) \necho \"The origianl array is: ${test_arr[*]}\" \nmyfunc (${test_arr[*]}) \n```"]