- en: Managing Networking in CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A standalone system is often not of much use. Networking enables us to exchange
    information and share resources with other network devices and connected computers.
    In this chapter, you will learn essential skills required for managing network
    connections from the command line. Then you will learn how to access the remote
    system using **SSH** (short for **Secure Shell**) and the secure transfer of files
    with **SCP** (short for **Secure Copy**) and `rsync` utilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux networking concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Linux networking commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing networks with nmcli
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing network configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring hostname and **DNS** (short for **Domain Name System**) resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing remote logins with SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring files in Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux networking concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A network is a group of two or more computers or computing devices connected
    using any communication media, such as cables or wireless media. These devices
    may be located in the same geographical location or spread across the world. A
    network environment provides these three services:'
  prefs: []
  type: TYPE_NORMAL
- en: Enables connected devices to communicate with each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables multiple users to share devices such as printers, copiers, scanners,
    and so on over the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables the sharing of files and managing of information across computers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most organizations use two types of network: one for communication with internal
    staff and another for the outside world. **Intranet** is the term used to define
    communication within the internal network of an organization and **internet**
    is used for external communication. The internet is also the largest network in
    the world and is popularly known as a network of networks.'
  prefs: []
  type: TYPE_NORMAL
- en: Common terms used in Linux networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the various terms that are used to define computing devices
    and networking terminologies used in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each device connected to a network must have at least one unique address that
    is used to identify that device on the network. This address is known as the IP
    address and it is essential for routing the packet from the source to the destination
    through the network. Information or data over the network is transferred in the
    form of packets. Each packet has a header attached to it containing the information
    required to route the packet from the source to the destination. There are two
    different types of IP address schemes available, called IPv4 and IPv6.
  prefs: []
  type: TYPE_NORMAL
- en: IPv4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPv4 is a 32-bit logical address used by computing devices to communicate with
    each other using the TCP/IP protocol stack. It is generally expressed in the decimal
    notation of four octets, with each octet containing 8 bits separated by a dot.
    The value of each octet can vary from 0 to 255\. This address can further be broken
    down into two parts; for example, a network part and host part:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host part**: The host part is used to identify a host on a subnet. No two
    hosts on the same subnet can have the same host part.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network part**: The network part is used to identify a subnet. Hosts on the
    same subnet can communicate to each other without needing a router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using 32 bits for addresses, we can have a maximum of 4.3 billion unique
    addresses, many of which are reserved and cannot be used. Hence, to meet future
    requirements, IPv6 with an 128-bit address was created.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv6 uses 128 bits for addressing. It is expressed in eight octets, containing
    16 bits each, separated by colon. The use of 128 bits provides the 3.4 × 10^(38)
    unique addresses. The shifting of networked equipment and addresses from IPv4
    to IPv6 requires a lot of understanding and effort. IPv6 does not have a broadcast
    address.
  prefs: []
  type: TYPE_NORMAL
- en: We will be restricting our discussion in this chapter to IPv4, as it is still
    more widely used and you will encounter it the most while performing networking.
  prefs: []
  type: TYPE_NORMAL
- en: Different classes of IP addressing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPv4 addresses are divided into **five public** classes named A, B, C, D, and
    E, and **three private** IP address classes.
  prefs: []
  type: TYPE_NORMAL
- en: Public classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five different public IP address classes from A to E. Here, classes
    A, B, and C are divided into two parts: **network address** (short for **Net ID**)
    and **host address** (short for **Host ID**). Net ID identifies the network and
    Host ID identifies the host on the network as shown in table here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Public class** | **Octet 1** | **Octet 2** | **Octet 3** | **Octet 4**
    | **Range** |'
  prefs: []
  type: TYPE_TB
- en: '| Class A | Net ID | Host ID | Host ID | Host ID | `1.0.0.0` to `127.255.255.255`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class B | Net ID | Net ID | Host ID | Host ID | `128.0.0.0` to `191.255.255.255`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class C | Net ID | Net ID | Net ID | Host ID | `192.0.0.0` to `223.255.255.255`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class D | Multicast address | `224.0.0.0` to `239.255.255.255` |'
  prefs: []
  type: TYPE_TB
- en: '| Class E | Reserved for the future | `240.0.0.0` to `255.255.255.254` |'
  prefs: []
  type: TYPE_TB
- en: Private classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following three IP address ranges are reserved for private use within the
    internal network of an organization. These IPv4 addresses can be used within a
    network, campus, and so on, and are not routable on the internet. Hence, if any
    packet contains any of these private IP addresses, it is dropped by the routers.
    Generally, the NAT mechanism is used for communicating with the public IPv4 address
    space when machines are working on private IPv4\. The following table lists the
    private IPv4 address classes along with their address ranges and some special
    IPv4 addresses, such as link-local address and loopback address:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Private class** | **Address range** | **Subnet mask** | **Address block**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Class A | `10.0.0.0` to `10.255.255.255` | `255.0.0.0` | `10.0.0.0 /8` |'
  prefs: []
  type: TYPE_TB
- en: '| Class B | `172.16.0.0` to `172.31.255.255` | `255.240.0.0` | `172.16.0.0
    /12` |'
  prefs: []
  type: TYPE_TB
- en: '| Class C | `192.168.0.0` to `192.168.0.255` | `255.255.0.0` | `192.168.0.0
    /16` |'
  prefs: []
  type: TYPE_TB
- en: '| Loopback address | `127.0.0.0` to `127.255.255.255` | `255.0.0.0` | `127.0.0.0
    /8` |'
  prefs: []
  type: TYPE_TB
- en: '| Link-local address (APIPA) | `169.254.0.0` to `169.254.255.255` | `255.255.0.0`
    | `169.254.0.0 /16` |'
  prefs: []
  type: TYPE_TB
- en: Loopback address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`127.0.0.1` is a special address that always points to local system (localhost)
    and is used for the testing of various services. The network `127.0.0.0/8` is
    a loopback network of the local system. It enables server-client communication
    on a single system.'
  prefs: []
  type: TYPE_NORMAL
- en: Link-local address or APIPA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The link-local address or **Automatic Private IP Addressing** (**APIPA**) is
    used if a machine connected in a DHCP environment is unable to acquire an IP address
    from the DHCP sever. This also helps in establishing communication between machines
    on the same network by allocating them IP addresses in the range of `169.254.0.0/16`,
    if the DHCP server is not connected or down.
  prefs: []
  type: TYPE_NORMAL
- en: Netmask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Netmask is used to identify a subnet. Binary AND operations of the 32-bit Host
    IP address with 32-bit netmask yields the network part of the address. The lowest
    possible address on a subnet is all zeros in the host part; it represents the
    network address**.** The highest possible address on a subnet is all ones in the
    host part; it represents the broadcast address for all hosts on a subnet. It is
    expressed in two forms. The conventional syntax uses a decimal representation
    of the network part while the new syntax uses CIDR notation to represent the network
    prefix (number of ones in the network address). For example, we can represent
    a 24-bit netmask in both these forms as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conventional form**: `255.255.255.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CIDR notation**: `/24`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us assume that we are having following IP address and netmask information
    with us:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10.1.1.212 / 8`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.1.100 / 24`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, using the above limited information we can find other related network
    information such as network address and broadcast address as given in the next
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: Network information for system having these details : `10.1.1.212 / 8 `
  prefs: []
  type: TYPE_NORMAL
- en: '| **Information description** | **Values** |'
  prefs: []
  type: TYPE_TB
- en: '| IP address (host address) | `10.1.1.212` |'
  prefs: []
  type: TYPE_TB
- en: '| Netmask (network prefix) | `255.0.0.0/8 ` |'
  prefs: []
  type: TYPE_TB
- en: '| Network address | `10.0.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '| Broadcast address | `10.0.0.255` |'
  prefs: []
  type: TYPE_TB
- en: Network Information for system having these details : `192.168.1.100 / 24 `
  prefs: []
  type: TYPE_NORMAL
- en: '| **Information description** | **Values** |'
  prefs: []
  type: TYPE_TB
- en: '| IP address (host address) | `192.168.1.100` |'
  prefs: []
  type: TYPE_TB
- en: '| Netmask (network prefix) | `255.255.255.0/24 ` |'
  prefs: []
  type: TYPE_TB
- en: '| Network address | `192.168.1.0` |'
  prefs: []
  type: TYPE_TB
- en: '| Broadcast address | `192.168.1.255` |'
  prefs: []
  type: TYPE_TB
- en: Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A gateway is generally a router device or computer that is used to connect two
    or more dissimilar networks. In the case of Linux, it is the entry in the kernel
    routing table that is used when none of the route entries are matched.
  prefs: []
  type: TYPE_NORMAL
- en: Hostname
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hostname is a human-readable name associated with a machine IP address. A DNS
    server is used to map the hostname to the IP address and vice versa. We can view
    the hostname of any machine by typing `hostname` command without any argument
    as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Every machine has got a special hostname that is, localhost associated with
    the loopback IP address `127.0.0.1.` This address is used for testing various
    services on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Nameserver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nameserver is also known as the **DNS server**. The purpose of the DNS server
    is to convert the hostname to an IP address and vice versa. There is a default
    fixed order of files, which are looked up when doing DNS lookup in CentOS 7\.
    This order is managed by the rules written in the `nsswitch.conf` file and can
    be altered by an administrator. The following two files are looked up when resolving
    a DNS query in system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`/etc/hosts`**: The entries made in this file are first looked up before
    forwarding the query to the DNS server. It is a kind of local database of hostnames
    and IP address mappings. It is also quite useful for small isolated networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`/etc/resolv.conf`**: If the answer of DNS query is not found in the `/etc/hosts`
    file, then the query is passed to the DNS server mentioned in `/etc/resolv.conf`.
    This file can be updated using dhclient or manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following command is used to display the current settings of nameserver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After configuring the nameserver, verify the DNS connectivity using host command
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: NetworkManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NetworkManager is a GUI application used for the management of network settings.
    It comes with a daemon and Gnome applet to provide the network status and quick
    access for modification. The changes made using NetworkManager are stored in the `/etc/sysconfig/network-scripts`
    directory and thus it overrides any manual changes made there. If you want to
    configure the network connections manually by modifying the network scripts file,
    then NetworkManager should be disabled. NetworkManager provides a user-friendly
    method for manager network connections and is ideal for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: Network interface naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conventionally, network interfaces in Linux are enumerated sequentially as `eth0`,
    `eth1`, `eth2`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table list the traditional names of interfaces with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Interface name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `eth0`, `eth1`, and so on | Ethernet interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| `wlan0`, `wlan1`, and so on | Wireless interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| `eth0:1`, `eth0:2`, and so on | Alias interfaces |'
  prefs: []
  type: TYPE_TB
- en: '| `ppp0`, `ppp1`, and so on | Dial-up interface |'
  prefs: []
  type: TYPE_TB
- en: '| `bond0` | First-bonded network device |'
  prefs: []
  type: TYPE_TB
- en: '| `virbr0` | Internal bridge for virtual hosts |'
  prefs: []
  type: TYPE_TB
- en: '| `lo` | Loopback interface |'
  prefs: []
  type: TYPE_TB
- en: Now, CentOS 7 has new default naming conventions. The interface name is based
    on hardware, topology, and device type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table illustrates the network interface naming convention in
    CentOS 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Character in naming convention** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| First two characters represent type of interface |'
  prefs: []
  type: TYPE_TB
- en: '`en`: Ethernet interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wl`: Wlan interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ww`: WWAN interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Next characters represent type of adapter |'
  prefs: []
  type: TYPE_TB
- en: '`o`: Onboard adapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Hotplug slot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: PCI card'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: MAC address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Last character is a number `N`, to represent an index, ID, or port |'
  prefs: []
  type: TYPE_TB
- en: '`N`: 0, 1, 2, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a fixed name could not be determined using new interface naming scheme then
    the old conventional naming scheme such as `eth0` or `eth1` is used. The example
    of new interface naming scheme is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`eno1`: First embedded network interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enp1s0`: The first PCI card network interface with hotplug slot index 0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the biosdevname feature is enabled in the server, then this naming scheme
    is overridden with a different naming scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Using Linux networking commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section discuss the various networking commands and basic utilities that
    are used to display or modify the existing network configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing IP address details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CentOS 7, we have three major utilities to display the device and address
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Newer IP command (`/sbin/ip`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost obsolete `ifconfig` command from net-tools package (`/sbin/ifconfig`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versatile `netstat` command (`/usr/bin/netstat`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the IP command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ip` is a very powerful utility that is used to perform many tasks. Multiple
    older utilities such as `ifconfig` and `route` command were earlier used to perform
    these functions. The absolute path of the `ip` command is `/sbin/ip`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of ip command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `ip` command is used to display the IP address:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip` command can also be used to display statistics of the network performance
    (received and transmitted packets, errors, dropped counters, and so on) as shown
    in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip` command can also be used to display the routing information as shown
    in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/sbin/ip` command can also be used to assign multiple IP addresses to
    a single device using aliases. Binding multiple IP addresses to a single NIC with
    a different label is useful in many cases (for example, in virtual hosting). Aliases
    are treated as separate interfaces and are generally configured when NetworkManager
    is turned off. The command to create an alias is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ip addr add 10.1.1.250/24 dev enp0s8 label enp0s8:0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using ifconfig command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is an older command used to display or modify the current configuration
    of network interfaces. The usage of `ifconfig` command is now obsolete and it
    is replaced with the newer `ip` utility. Now, the `ip addr` and `ip link` commands
    are preferred to display network interface information in place of `ifconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the popular options of `ifconfig` with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `$ ifconfig` | Display the current configuration of active interfaces only
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$ ifconfig -a` | Display all interfaces information which are available
    in system, whether they are active or inactive |'
  prefs: []
  type: TYPE_TB
- en: '| `$ ifconfig eth0` | Display the configuration of the specified interface
    `eth0` |'
  prefs: []
  type: TYPE_TB
- en: '| `$ ifconfig eth0 up` | Activate the network adapter `eth0`, if it is down.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `$ ifconfig eth0 down` | Deactivate the network adapter `eth0`, if it is
    up. |'
  prefs: []
  type: TYPE_TB
- en: 'The `ifconfig` command can be used to assign an IP address and netmask to a
    network adapter. These are runtime changes and are lost after reboot. Following
    command line shows how to use ifconfig for making runtime assignment of IP address
    and netmask to an interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Some naive users still find, the older `ifconfig` command easier to use, in
    comparison to the new and more versatile `ip` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `ifconfig` utility is a part of the net-tools package. If this package is
    not installed on the system, then you may not get access to this utility on CentOS
    7.
  prefs: []
  type: TYPE_NORMAL
- en: Netstat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `netstat` command can also be used to print interface details. To display
    kernel interface information for all the interfaces, the `-i` option is used with
    the `-e` option to display the extended information for the interfaces as shown
    in command line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the routing information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Irrespective of the underlying IP addressing scheme, while communicating, the
    information needs to travel from a host on one network to a host on another network.
    Each host can have multiple routing tables, which decide how to route the traffic
    to a particular network from the host. The routing table makes sure the correct network
    interface is used for sending the packets to a destination network. We can also
    define the IP address of any intermediate router that is required to reach the
    destination network in routing table.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ip route command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ip route` command is one of the many features of the newer `ip` utility.
    This command can be used to display or modify the existing IP routing table. We
    can add, delete, or modify specific static routes to specific hosts or networks
    using `ip route` command.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of ip route command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `ip route` command to display the current routing table as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip route` command can be used to add static routes in routing table. In
    the following example we **add** **network routing** information for `25.25.25.0/24`
    network, to route it through `eth0` interface, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip route` command can also be used to **add host** **routing** information.
    In the following example we add information to route IPv4 address `15.15.15.15`
    through `eth1` interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip route` command can also be used to delete the static route from the
    routing table. In the following example we **delete** **network routing** information
    for `25.25.25.0/24` network as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ip route` command can also be used to **delete**** host** **routing** information.
    In the following example we delete information to route IPv4 address `15.15.15.15`
    through `eth1` interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using route command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `route` command is also used to modify the routing table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of route command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `route` command as shown here to display the current routing table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `route` command can also be used to add a static route in the routing table.
    The following route command syntax is used to add a network routing information
    in the routing table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following route command syntax is used to add a host routing information
    in the routing table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `route` command can also be used to delete a static route in the routing
    table. The following `route` command syntax is used to delete a network routing
    information in the routing table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `route` command syntax is used to delete a host routing information
    in the routing table:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using netstat command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `netstat` command, which is known as network statistics, is a versatile
    command with lots of features. This command is used to print network connections
    details, kernel routing table information, interface statistics, open ports, and
    so on. In this section, we restrict ourselves to the usage of the `netstat` command
    to fetch the routing table information only.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of netstat command.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `netstat` command to display the kernel routing table information with
    the `-r` option as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `netstat` command to display the kernel routing table information without
    resolving the hostname or port names as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`netstat` is one of the few commands that is available by default on Unix-like
    operating systems and Windows operating systems as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can add or delete the default gateway at run-time using the `route` command.
    The default gateway tells us where to send the packet if none of the network or
    host entry in routing table matches with the destination IP address of packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command line is used to delete the default gateway from the routing
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command line is used to add the default gateway in the routing
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To add same permanent gateway for all the interfaces, we can modify the `/etc/sysconfig/network`
    file and add the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To assign different gateway entries for each interface, we modify the `/etc/sysconfig/network-scripts/ifcfg-<interfacename>` configuration
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Viewing nameserver details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The nameserver or DNS server information is stored in the `/etc/resolv.conf`
    file. This file can be updated using dhclient or NetworkManager or by an administrator,
    manually. In this file, we can specify a maximum of three nameserver directives
    in their order of precedence from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of nameserver configuration file can be viewed as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc5a9b9e-67f0-4b6b-b362-16285f82cfca.png)'
  prefs: []
  type: TYPE_IMG
- en: Network troubleshooting utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about some networking tools/troubleshooting utilities.
    Networking tools are quite useful for monitoring and debugging network issues
    such as network connectivity and network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Using ethtool command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ethtool` is a utility for displaying and configuring Ethernet card driver
    and hardware settings. Changes made using `ethtool` are runtime changes and not
    persistence changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of ethtool command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the Ethernet interface''s current settings using `ethtool` command
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the Ethernet interface driver settings using `ethtool` command as shown
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Modifying the Ethernet interface settings using `ethtool` command as shown
    h:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Blink the Ethernet interface port light for 10 seconds for identification using
    `ethtool` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using ping command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ping` command is used to verify the network connectivity of a remote host.
    It can tell you whether the machine connected to the network is online and responding.
    It also provides stats for network packet loss and latency measurement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of ping command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ping command can be used to identify the status of a remote host (if it''s
    alive or not) as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The ping command can be used send the `ping` request through a specific interface
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ping` command can be used to troubleshoot DNS issues by sending ping request
    to a specified URL. If we are able to `ping` a URL using its IP address, but we
    are not getting reply of ping by specifying name of same URL, it means our DNS
    server is not set up properly or not working properly. An example of `ping` command
    with URL is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ping` command can also be used to send the fixed number of packets using
    the `-c` option as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the case of Windows, by default, the `ping` command sends only four packets,
    whereas in the case of Linux, the `ping` command will continue to send the packets
    by default unless its execution is aborted by pressing *Ctrl *+ *C*. ICMP ping
    cannot be considered a durable diagnostic tool, just one of many. The network
    diagnostic depends on many factors in a network. At the same time, ICMP ping is
    the most basic and default utility, which every system user should know how to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Using tracepath command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tracepath` command is used to trace the path from the origin to the destination.
    Each line in the `tracepath` output represents a router (hop) that the packet
    passes through.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example of `tracepath` command is shown in image here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/905491d9-a532-4079-a6e9-4c39e01ef9f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using traceroute command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This command is used to display or inspect the network path taken to reach the
    destination by a packet. It is quite useful in troubleshooting network delays
    and errors.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `traceroute` and `tracepath` commands use UDP packets for probing
    the path to a destination. The `traceroute` command has options to inspect the
    path using ICMP (`-I`) or TCP (`-T`) packets, if IDS or IPS blocks the UDP traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following is an example to illustrate the usage of traceroute command**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `traceroute` command can be used to display the route taken by the packet
    to reach the network host as shown in image here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6d7edf18-f667-4d56-8b26-b05a88bd2655.png)'
  prefs: []
  type: TYPE_IMG
- en: Using mtr command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command combines the functionalities of `ping` and `traceroute`. It constantly
    polls a remote server and fetches the latency and performance changes over time.
    The example for usage of mtr command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Output on execution of preceding command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f03e5a02-f2c4-4748-b0f8-0f0f4522e4d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying DNS connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple tools that are available in CentOS 7 to verify DNS connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Using nslookup command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a network administration tool for querying the DNS to obtain the domain
    name or IP address mapping or any other specific DNS record. It can be used in
    non-interactive mode as well as in interactive mode in CLI by a user.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of nslookup command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage of `nslookup` command to find the IP address of domain name is shown
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The usage of `nslookup` command to find the authoritative nameserver of a domain
    is shown here: [](http://www.centos.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `nslookup` command can be used to make a non-authoritative query of an
    MX record from a DNS server specified in `/etc/resolv.conf` file is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The `nslookup` command can be used to make an authoritative query of an MX
    record from the DNS server. We can specify the authoritative nameserver for the
    zone as an argument as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Using host command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Host is one of the simplest DNS lookup utilities. If the `host` command is used
    without any option, it prints the short summary for its argument DNS lookup.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example of `host` command are shown in command line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Using dig command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DIG** (short for **Domain Information Groper**) is the most flexible and
    versatile DNS lookup utility for DNS troubleshooting.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of** dig **command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage of `dig` command to find the IP address of a domain name is shown
    in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dig` command can be use to return only an IP address by making a short
    DNS lookup as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dig` command can be used with an option to turn off extra information
    and display only the required answer as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dig` command can be used to perform the reverse lookup (find out the hostname
    of the specified IP address) by using the `-x` option as shown in command line
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: DIG is a flexible and versatile tool. It is recommended to refer the manual
    of the `dig` utility (`$ man dig`).
  prefs: []
  type: TYPE_NORMAL
- en: Finding local ports and services information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple services running on standard logical ports in the Linux system.
    Well-known ports and their related service entries are available in the `/etc/services`
    file. It's vital to identify the status of running services in the system. There
    are multiple commands such as `netstat`, `ss`, and so on that are used to find
    out the status of running services in localhost.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ss command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ss` command is another utility used to view socket statistics, similar
    to the `netstat` command. The advantage of using `ss` is that it can display more
    TCP and connection state information than other tools that exist by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `ss` command usage is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1363275e-00a9-4e81-ab2d-c39d5d1e85f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the netstat command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed earlier, the `netstat` command is used to display all the active
    connections and routing tables information. This command is useful for monitoring
    performance and troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `netstat` command usage is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ea05706-ca1d-4ba8-99a1-d08aa51610fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a table listing the popular options used with the `ss` and `netstat`
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | Display all listening and non-listening sockets |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | Display numbers instead of services name |'
  prefs: []
  type: TYPE_TB
- en: '| `-t` | Display TCP sockets |'
  prefs: []
  type: TYPE_TB
- en: '| `-u` | Display UDP sockets |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` | Display only listening sockets |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | Display the process ID information of sockets |'
  prefs: []
  type: TYPE_TB
- en: Web utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section discusses the various command-line-based web utilities such as
    command-line downloaders, command-line web browsers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Graphical and non-graphical web browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web browsers are application software used to retrieve, transmit, or process
    information using the **World Wide Web** (**WWW**) protocol. In simple words,
    they send requests to web servers and display the response received from the web
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, we use graphical web browsers such as Firefox, Google Chrome,
    Opera, and so on, however, sometimes we do not have graphical environment and
    we still need to access websites. In those situations, we can use non-graphical
    browsers such as Lynx, elinks, W3M, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line file downloader (wget)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `wget` command is one of the most popular non-interactive command-line file
    downloaders in Linux. It can download multiple files/directories and can work
    in the background as well. The downloaded web page can be opened with any graphical
    or non-graphical browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of its popular features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Support of HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP
    proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resume partial downloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large file downloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recursive downloads for mirroring a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password-required downloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The syntax of `wget` command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of `wget` command usage is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4a864a8-e34a-4e2a-8d42-4513cd5ecef5.png)'
  prefs: []
  type: TYPE_IMG
- en: Command-line download and upload using curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Curl** (short for **Client URL Library**) is a non-interactive command-line
    tool to automate HTTP jobs done using web browsers and many more functions. Using
    curl, one can download multiple files or upload files to a URL using URL-based
    syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `curl` command usage is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0300423-0edf-4639-8f75-ddd52a9d8efd.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing a network with nmcli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several tools available in Linux for the management of a network,
    however in CentOS 7, the additional `nmcli` utility has simplified and speeded
    up the setup of networking. `nmcli` is an acronym for the NetworkManager command
    line and is used to control the network-manager utility from the command line.
    The `nmtui` utility used to be a favorite of system administrators, however `nmcli`
    saves a lot of time and its capability to be used in script has make it one of
    the best networking tools in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Defining basic terms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following are the few basic terms which are used with `nmcli` and hence an overview
    of these will help us in understanding it better.
  prefs: []
  type: TYPE_NORMAL
- en: Device or interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A device is a network interface such as `eno1`, `eno2`, `enp0s1`, `eth0`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A connection in the context of `nmcli` is a collection of settings or configurations
    used to store a state of device. A single device can have multiple connections,
    however only one connection may be active at one time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a DHCP configuration of the network interface can be stored in
    one connection and a static configuration of the network interface can be stored
    in another state. This helps in switching connections rapidly, without changing
    the configuration manually every time. Connection is also popularly known as **connection
    profile.**
  prefs: []
  type: TYPE_NORMAL
- en: Displaying network information using nmcli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can display the list of active connections or all saved connections using
    the `nmcli` command.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of** nmcli **command for
    displaying network information:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the list of all connections using `nmcli` command as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Display only the active connections using `nmcli` command as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the details of a connection by specifying the connection ID (`NAME`)
    using `nmcli` command as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of `nmcli` command usage to display connection state is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3841a153-c139-4ce8-bdea-0b0c93cf7893.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the device (interface) status as connected or disconnected using `nmcli`
    command as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the device details using `nmcli` command as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of `nmcli` command to display the device details is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd80c2b6-e80d-441b-92b1-13ab31be010e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating network connections using nmcli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create new connections or a connection profile using the `nmcli` command.
    While creating a connection profile, the order of arguments plays an important
    role. We can specify IP address, gateway, and so on. The connection argument must
    include the connection type, interface name, and connection name argument to create
    a connection profile. The additional details such as DNS server are set after
    the creation of a connection profile by modifying it (connection profile) later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of** **nmcli** **command
    for creating a new connection profile:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new connection profile named `dhcp` which will autoconnect as an Ethernet
    connection on the `enp0s8` device using DHCP connectivity as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f7def3bf-f5b2-46a0-a136-98c97a551796.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create another new connection profile named `static` and specify an IP address
    and gateway `nmcli` command. Also set the auto connect off on booting as shown
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/30a3ca67-7b07-408d-8e15-f06f34b4a6da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the connection profiles that exist in the system using `nmcli` command
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0ee48fc3-e835-4b09-a3da-b990e31fae5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the connection profile of the existing device `enp0s8` to static using
    `nmcli` command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/932029c3-9a87-4f7d-a99b-a70a81b42a5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch the connection profile of the device `enp0s8` again to `dhcp` using
    `nmcli` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ef5ddcfd-428e-45ff-9111-fd0f5a212034.png)'
  prefs: []
  type: TYPE_IMG
- en: The option we have to give as an argument while creating the nmcli connection
    profile depends on the type used. To view all the options available, we can type
    `nmcli con add help` in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying network interfaces using nmcli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An existing connection profile can be modified using the `nmcli con mod` command.
    Additional settings such as DNS servers can be specified here. Some properties,
    such as IP addresses and gateways, have different names to the name which was
    used while creating the connection profile.
  prefs: []
  type: TYPE_NORMAL
- en: The command `nmcli con mod` is followed by arguments which are a set of key/value
    pairs. The `nmcli con show <connection_profile_name>` command is used to list
    the current key values for a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'When modifying a DHCP connection profile to static, the profile `ipv4.method`
    property key should be set as `manual`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property name while creating** | **Property name while modifying** |'
  prefs: []
  type: TYPE_TB
- en: '| `ip4` | `ipv4` |'
  prefs: []
  type: TYPE_TB
- en: '| `gw4` | `gwv4` |'
  prefs: []
  type: TYPE_TB
- en: '**Following are the examples to illustrate the usage of nmcli con mod command
    to modify network interface settings:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Turn off auto connect for a connection profile as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a DNS server using `nmcli con mod` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We can further add more values to a key by using the `+` or `-` symbol in front
    of the argument. We can also add another DNS server using `nmcli con mod` command
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change the static IP address and gateway for a connection profile as
    shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We can assign a secondary IP address to the same interface without a gateway
    in an existing profile as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To activate the changes, the connection profile needs to be activated using
    up with `nmcli con` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete a connection profile using `nmcli del` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable all managed interfaces using `nmcli` command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Bring down an interface by temporarily disconnecting the device as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Bring up an interface by connecting the device as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Editing network configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we looked at how `nmcli` is used to configure static
    and dynamic IP addressing. Apart from the NetworkManager command-line interface
    and GUI interface, we can configure networking manually using network interface
    configuration files. At any one time, we can either configure networking using
    network interface files manually or using NetworkManager, but not both simultaneously.
    The location of the network interface files (scripts) varies from one Linux distribution
    to another. In the case of CentOS 7, the network interface configuration files
    are stored in the `/etc/sysconfig/network-scripts/` folder and their naming conventions
    begin with `ifcfg-<device_name>`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring networking options in static and dynamic modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can configure networking manually in static IP addressing or DHCP IP addressing
    modes by modifying network interface config files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate how networking is configured manually
    in CentOS 7:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamic (`dhcp`) configuration of the `ifcfg` file is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4e6df568-99a1-4ee2-9375-ddd6d108caf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Static configuration of the `ifcfg` file is explained as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If more than one value of an IP address, prefix, or gateway is to be assigned
    in static configuration, then it is suffixed with a number at the end. If multiple
    DNS server are to be assigned, then they are numbered in their order of lookup,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6903575c-d8a8-4576-9803-f76243f700cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After making the desired changes to the configuration files, the networking
    service is to be restarted, or you can run the `nmcli con reload` command. This
    will make NetworkManager re-read the configuration files and apply changes. When
    reloading the `nmcli` configuration, the interface needs to be brought up and
    down once, for changes to come into effect as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Configuring hostnames and name resolutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hostname and DNS servers play an important role in networking as a machine is
    reachable in a network either by the IP address or hostname. The DNS server is
    responsible for the IP address to domain name and domain name to IP address conversion.
    This process of conversion is also known as **name resolution** or **DNS resolution**.
  prefs: []
  type: TYPE_NORMAL
- en: Since CentOS 7, the static host name has been stored in a new file, `/etc/hostname`.
    In earlier versions, it was stored in the `/etc/sysconfig/network` file. Now,
    a new command has been introduced with the name `hostnamectl`, to view and modify
    the hostname of machine.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying and modifying the hostname
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `hostname` command is used to view the hostname or to temporarily modify
    the hostname at runtime. And the `hostnamectl` command is used to permanently
    modify the hostname from command line.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following are the examples to illustrate the usage of hostname command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'View the fully qualified host name of CentOS 7 using the `hostname` command
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/19da4ce4-39b8-4877-84b8-c32a418a112a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Modify the fully qualified hostname temporarily at runtime, using the `hostname`
    command as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/072c3998-9838-4cfc-9935-660c350e4f18.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Following are the examples to illustrate the usage of hostnamectl command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'View the hostname changes made using the `hostnamectl` command as shown in
    the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e4bc03c0-924f-4503-b75e-e3e428b0d287.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the `hostnamectl` command to make permanent changes to the hostname as
    shown in following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0d183878-a7b4-4b06-b8d5-d9369665e364.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying nameservers (DNS sever)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The order of IP address to domain name and vice-versa lookup is already discussed
    earlier in this chapter. The information for the DNS server (nameserver) is stored
    in the `/etc/resolv.conf` file. The nameserver directive is followed by the IP
    address of a nameserver to query the IP lookup. A maximum of three nameserver
    directives can be specified in this file to provide backup if one is down.
  prefs: []
  type: TYPE_NORMAL
- en: DNS server entries in `/etc/resolv.conf` are managed by NetworkManager. We should
    add or modify the DNS server using `nmcli` or GUI NetworkManager if NetworkManager
    is running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following examples are used to explain, how we can view or modify the nameserver
    of a system:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the nameserver details as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/595658a9-30f8-46aa-a72a-fc942b99c5c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can modify the nameserver entry by adding the DNS server for a specific
    connection profile using `nmcli` as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If NetworkManager is running, then manual modifications made in the `/etc/resolv.conf`
    file are overwritten by NetworkManager. Hence, for manually modifying and preserving
    the entries of `/etc/resolv.conf` file, we should first turn off NetworkManager
    and then modify them as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Accessing remote logins with SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is an OpenSSH client program used for securely logging in to a remote machine
    for remote administration. It provides an authenticated encrypted communication
    channel between two hosts over an untrusted network.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding OpenSSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SSH component can be categorized into two parts. The first is OpenSSH server
    (sshd service) which is installed and run on a remote server to accept connections
    from OpenSSH Client. By default, it runs on port `22` using TCP protocol, which
    should be allowed by firewalls to accept OpenSSH client connections.
  prefs: []
  type: TYPE_NORMAL
- en: The second component is SSH Client, which should be installed on any client
    system (Linux, Windows, or macOS) from which you want to connect to the system
    running OpenSSH server for remote administration.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the SSH protocol facilitates secure communications between two systems
    using client-server architecture. SSH encrypts the user login session completely
    and thereby makes it difficult for intruders to sniff any unencrypted password
    and eliminates **man-in-the-middle-attack** (**MITM**) probability over the network.
    SSH authenticates using the private-public key scheme, which further eliminates
    the impersonation attack on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Executing commands over SSH remotely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following are the examples to illustrate the basic usage of `ssh` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ssh` command can be used to log in to a remote system using the current
    logged-in username of client requesting connection to ssh sever, as shown in command
    line and next screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/78d4b782-0d51-4cb3-9614-652d07ae847b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ssh` command can be executed as another user by specifying the username
    and hostname/IP address as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of execution of ssh command as different user is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f12a48e0-e13f-4122-b5a9-fb253773ee33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can execute a command on the remote system via `ssh` as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of executing a command on remote system via `ssh` is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a53b1d2c-cbf4-48e1-99a4-18a07e9221d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Key-based SSH authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH communication is secured using public key cryptography. When a user connects
    to the SSH-server using SSH-client for the first time, the SSH program stores
    the SSH-server public key in the user''s home directory inside a file, `known_hosts`,
    in a hidden folder named `~/.ssh/`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8c51c92-30d9-46c6-8771-813f1e46073c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows an example of a public key fingerprint of the
    remote host being stored in the client''s known host file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/675ce68b-b7cd-42b7-b81e-2cf95062df54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, subsequently whenever ssh-client connects to the server, it compares the
    public key sent by the server to the public key of the server stored in the `~/.ssh/known_hosts` file.
    If the public key does not match, the client assumes that the network traffic
    is being hijacked or the server to which the connection is being made is not the
    same, and hence SSH-client breaks the connection, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f61e3004-6c77-46c9-91ee-38a2f9908204.png)'
  prefs: []
  type: TYPE_IMG
- en: It is also a possibility that the server was reformatted or the server key replaced
    for any legitimate reason. In such circumstances, the user needs to update their
    `~/.ssh/known_hosts` files by deleting the old keys to enable logging in to the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ssh-keygen for password-less authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH server has multiple ways of authenticating a client connecting to it. The
    most popular method is password-based authentication as it is the easiest one,
    however it is not so secure. Passwords are exchanged with secure mechanisms, however,
    due to ease of use they are generally not complex or long. This enable the attacker
    to break the password using brute-force or dictionary attacks. In such scenarios,
    the SSH keys can provide a secure and reliable means of authentication for clients.
  prefs: []
  type: TYPE_NORMAL
- en: SSH server uses a public key cryptography scheme to authenticate users. In this
    scheme, a pair of keys are generated, a public key and private key, for authentication.
    As the name suggests, a private key is kept secret by the client as its compromise
    can lead to someone logging in to the server without any additional authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding public key for the secret private key of the client is not
    kept as secret and is copied to systems the user logs in to. The private key is
    used to decrypt the message encrypted using the associated public key of the client.
    Using the key pair, we can also enable the password-less authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The trusted public key of the client is stored in a special file named `authorized_keys`
    in the `home` directory of user account, used to log in as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/478b8c64-d28b-4c10-8a3a-581a359d73fc.png)'
  prefs: []
  type: TYPE_IMG
- en: When a client attempts to authenticate the SSH server using keys, a challenge
    is issued using the public key of the client stored in the server. On successfully
    decrypting the challenge using the client's private key, the user gets access
    to the shell of the server.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to password-based and key-based authentication, SSH also supports
    Kerberos and gssapi and so on for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SSH key pair
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this step, the client uses a special utility, `ssh-keygen`, to generate
    an SSH key pair for authentication with the server. This utility is bundled with
    OpenSSH and by default it creates a 2048-bit RSA key pair. It supports RSA and
    DSA, both with different lengths of keys. A key length of 4096 bits is recommended
    for establishing a secure connection between two machines. The following diagram
    shows how to create a RSA key pair of 2048-bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a39b0197-206a-4e0a-a74d-16884c739e88.png)'
  prefs: []
  type: TYPE_IMG
- en: It will prompt you to select a location for the keys that will be generated.
    By default, the keys are stored in the user's home directory, the `~/.ssh` directory,
    with the private key named as `id_rsa` and the public key as `id_rsa.pub`. The
    permission on the private key is 600 and it is 644 on public key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it prompts you to enter an optional passphrase for the key, which is
    used to decrypt the key on the local machine (client side). Hence, brute-force
    or dictionary attacks are not possible for this passphrase. The passphrase also
    provides additional security in case of the system being compromised. For example,
    it can prevent the attacker from logging in to other servers when SSH keys have
    already been exchanged in the compromised system. Following image shows the RSA
    key pair public key used for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ba4c789-aa5e-4435-8399-6cc185eb134e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, to enable key-based authentication, the public key of client is to be copied
    to the destination system running SSH server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Following example illustrate the copying of public key to remote machine
    using ssh-copy-id command:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one utility, `ssh-copy-id`, which is also bundled with OpenSSH and
    can be used to copy the key to the remote system. It automatically copies the
    `~/.ssh/id_rsa.pub` file by default into the remote system as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7deccecc-5690-461e-8c1f-83a6c2519c80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The general syntax of `ssh-copy-id` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram shows how to do ssh on remote host without giving password:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3526c378-0869-4fb2-9ddd-2a77b290fd80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another method of copying the public key into the remote host''s `authorized_keys`
    files using `ssh` command is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Now SSH into the remote host by entering the passphrase when prompted (required
    only if you give the passphrase while creating the keys).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and securing SSH logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additional security measures can be enabled by modifying the OpenSSH server
    configuration file `/etc/ssh/sshd_config`, on the remote host. Following are the
    some steps that can be taken to secure the SSH logins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, since we have configured the SSH key-based authentication in the previous
    section, we can disable the password authentication to secure SSH logins in the
    SSH server configuration file. Edit the SSH daemon config file on the remote host
    running the SSH server and set the `PasswordAuthentication` directive value to
    `no` as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Prohibit direct login as the root user through SSH, as the root user has unrestricted
    privileges and exists by default on every Linux system. To secure the root user
    account through SSH, we can do following changes in configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Comment the line with the directive `PermitRootLogin` as shown here:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the directive `PermitRootLogin` value as `no` as shown here:'
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Allow only key-based ssh login in the root account by setting the directive
    `PermitRootLogin` value as `without-password` as shown here:'
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'After making changes in the SSH server configuration file `/etc/ssh/sshd_config`,
    restart the `sshd` service to bring the applied changes into effect, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Transferring files in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to secure our communication between the client and remote host
    server using SSH. In this section, we will securely transfer files between two
    connected machines. CentOS 7 has two popular utilities, `scp` and `rsync`, to
    secure data transfer between connected machines.
  prefs: []
  type: TYPE_NORMAL
- en: Secure file transfer using SCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `scp` command is used to securely transfer files from a local system to
    a remote host or from a remote host to a local system. It uses SSH server for
    secure (encrypted) data transfer and for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The `ssh`, `scp`, and `sftp` are bundled into `ssh` package and gets installed
    automatically on installation of `ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: Local to remote filesystem file transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of transferring a file from local system to remote filesystem is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of the preceding command, you will be prompted for the remote
    user password. After entering the correct password, file transfer will begin as
    shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ed9a0c8-19a1-48ae-ab4d-500d2718cab2.png)'
  prefs: []
  type: TYPE_IMG
- en: Remote to local filesystem file transfer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of transferring a file from remote system to local filesystem transfer
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of preceding command you will be prompted for remote user password.
    After entering the correct password, file transfer will begin as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb8d6f1f-21ef-4cd8-b977-19bb99892dd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronizing files using rsync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rsync is another utility that is used to copy files securely and quickly from
    one system to another. It uses an SSH connection for transfer of data and differs
    from SCP as it copies only the differences in existing files. Rsync is faster
    than SCP as it copies only differences when copying files from one directory on
    a local system to a directory on a remote system, whereas SCP would copy everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the important options along with their description,
    that are used with `rsync` command for synchronizing files and folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Option** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | Archive mode (it includes recursion, synchronizing symlinks, preserving
    permissions, preserving group ownership, times stamps, ownership of files, and
    synchronizing of device files).It is equivalent of the following options: `-rlptgoD`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | It adds verbosity in the output when synchronization takes place.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | Synchronize whole directory tree recursively. |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | Perform dry-run without making changes. |'
  prefs: []
  type: TYPE_TB
- en: '| `--remove-source-files` | Synchronized files are removed from the sender
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| `-z` | Compress file data during transmission from source to destination.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-X` | Synchronize SELinux contexts from source to destination. |'
  prefs: []
  type: TYPE_TB
- en: '| `-A` | Synchronize ACLs on file. |'
  prefs: []
  type: TYPE_TB
- en: Synchronizing data locally from one folder to another for backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for local synchronization for backup from one folder to another
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of `rsync` command usage to synchronize local files is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81654edb-dcde-4b3b-ad56-7b372e1fe957.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronizing data from a local to remote host filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for local to remote host filesystem synchronization is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of the preceding command, you will be prompted for a remote user
    password. After entering the correct password, file synchronization will begin
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50b696ff-c47d-43fe-8301-517132bc6fac.png)'
  prefs: []
  type: TYPE_IMG
- en: Synchronizing data from remote host to local filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for remote host to local filesystem synchronization is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution of preceding command you will be prompted for remote user password.
    After entering the correct password, file synchronization will begin as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e56eb1b0-2aae-4e39-99ed-3734499a09e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning basic networking concepts such as IP
    address, DNS, gateway, and so on. This was followed by essential networking commands
    used in CentOS 7\. Then we looked at the management of network interfaces using
    nmcli (NetworkManager command-line interface), the editing of network configuration
    files for manual configuration, and modifying hostname, DNS server parameters,
    and so on. Thereafter, we learnt how to securely connect to remote hosts using
    the SSH Client and password as well as with public keys for authentication. Finally,
    we looked up how to securely transfer and synchronize files for backup from one
    host to another using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how to keep CentOS 7 and its installed
    applications up to date. We will also learn how to install or remove undesired
    applications using the command line.
  prefs: []
  type: TYPE_NORMAL
