["```\nlocation / {\n    rewrite ^/css/default\\.css$ /css/styles.css break;\n    root /var/www/example.com;\n}\n```", "```\nlocation / {\n    rewrite ^/styles/(.+)\\.css$ /css/$1.css break;\n    root /var/www/example.com;\n}\n```", "```\nlocation / {\n    rewrite ^/styles/(.+)\\.css$ /css/$1.css;\n    rewrite ^/css/default\\.css$ /css/styles.css;\n    root /var/www/example.com;\n}\n```", "```\nlocation / {\n    rewrite ^/styles/(.+)\\.css$ /css/$1.css permanent;\n    root /var/www/example.com;\n}\n```", "```\nlocation / {\n    rewrite ^/download/(.+)$ /media/$1 permanent;\n    root /var/www/example.com;\n}\n```", "```\nserver {\n    listen 80;\n    server_name example.com;\n    rewrite ^/(.*)$ http://www.example.com/$1 permanent;\n}\n```", "```\nserver {\n    [...]\n    rewrite ^/products/$ /products.php last;\n    rewrite ^/products/(.+)$ /products.php?name=$1 last;\n    rewrite ^/products/(.+)/(.+)/$ /products.php?name=$1&page=$2 last;\n    [...]\n}\n```", "```\nrewrite <pattern> <substitution> [<flag>];\n```", "```\nserver {\n  <rewrite rules here are processed in the first pass>;\n\n  location /a {\n      <rewrite rules here are processed in subsequent passes>;\n  }\n  location /b {\n     <rewrite rules here are processed in subsequent passes>;\n  }\n}\n```", "```\n^/users/(.+)/(.+)/$\n```", "```\n/users/id/23850/\n```", "```\nset $fruit \"apple\";\n```", "```\nset $path \"static/$arg_filename\";\n```", "```\nif ( $request_method = POST ) {\n    rewrite ^/media/$ /upload last;\n}\n```", "```\nset $c1 \"\";\nset $c2 \"\";\n\nif ( $request_method = POST ) {\n    set $c1 \"yes\";\n}\n\nif ( $scheme = \"https\" ) {\n    set $c2 \"yes\";\n}\n\nset $and \"${c1}_${c2}\";\n\nif ( $and = \"yes_yes\" ) {\n    rewrite [...];\n}\n```", "```\nif ( $request_method = POST ) {\n    set $c1 \"yes\";\n    proxy_pass http://localhost:8080;\n}\n\nif ( $scheme = \"https\" ) {\n    set $c2 \"yes\";\n    gzip on\n}\n```", "```\nlocation / {\n    return 301 \"https://www.example.com$uri\";\n}\n```", "```\nlocation / {\n    return \"https://www.example.com$uri\";\n}\n```", "```\nlocation /disabled {\n    default_type text/plain;\n    return 200 \"OK\";\n}\n```", "```\nallow <IP address> | <IP address>/<prefix size> | all;\ndeny <IP address> | <IP address>/<prefix size> | all;\n```", "```\nserver {\n    deny 192.168.1.0/24;\n    allow all;\n    [...]\n}\n```", "```\nserver {\n    […]\n    location /admin {\n        allow 10.132.3.0/24;\n        deny all;\n    }\n}\n```", "```\nserver {\n  […]\n  location /admin {\n      allow 10.129.1.0/24;\n      allow 10.144.25.0/24;\n      deny 10.132.3.55;\n      allow 10.132.3.0/24;\n      deny all;\n  }\n}\n```", "```\ngeo [$<source variable>] $<target variable> { <address mapping> }\n```", "```\ngeo $admin_access {\n    default                 deny;\n    10.129.1.0/24      allow;\n    10.144.25.0/24    allow;\n    10.132.3.0/24      allow;\n}\n```", "```\ngeo $example {\n    default                 deny;\n    proxy 10.200.0.1;\n    10.129.1.0/24      allow;\n    10.144.25.0/24    allow;\n    10.132.3.0/24      allow;\n}\n```", "```\ngeo $example {\n    default                 deny;\n    proxy 10.200.0.1;\n    proxy 10.200.1.1;\n    proxy 10.200.2.1;\n    proxy_recursive;\n    10.129.1.0/24      allow;\n    10.144.25.0/24    allow;\n    10.132.3.0/24      allow;\n}\n```", "```\ngeo $example {\n    default                                 deny;\n    ranges;\n    10.129.1.0-10.129.1.255      allow;\n    10.144.25.0-10.144.25.255  allow;\n    10.132.3.0/24                       allow;\n}\n```", "```\ngeo $admin_access {\n    default                 deny;\n    10.129.1.0/24      allow;\n    10.144.25.0/24    allow;\n    10.132.3.0/24      allow;\n    delete 10.132.3.55;\n}\n```", "```\nserver {\n  […]\n  geo $admin_access {\n      default                 deny;\n      10.129.1.0/24      allow;\n      10.144.25.0/24    allow;\n      10.132.3.0/24      allow;\n      delete 10.132.3.55;\n  }\n\n  location /admin {\n      if($admin_access != allow) {\n          return 403;\n      }\n      [...]\n  }\n}\n```", "```\nauth_basic <realm name> | off;\n```", "```\nauth_basic_user_file <path to a file>;\n```", "```\nusername1:encrypted_password1\nusername2:encrypted_password2\nusername3:encrypted_password3\nusername4:encrypted_password4\nusername5:encrypted_password5\n```", "```\n$ sudo apt-get install slapd\n$ slappasswd -s test\n{SSHA}ZVG7uXWXQVpITwohT0F8yMDGWs0AbYd3\n\n```", "```\njohn:{SSHA}ZVG7uXWXQVpITwohT0F8yMDGWs0AbYd3\n```", "```\necho \"john:\"$(slappasswd -s test) > /etc/nginx/auth.d/auth.pwd\n```", "```\nlocation /admin {\n    auth_basic \"Administrative area\";\n    auth_basic_user_file /etc/nginx/auth.d/auth.pwd;\n    [...]\n}\n```", "```\n$ ./configure –with-http_auth_request_module\n$ make\n$ make install\n\n```", "```\nlocation /example {\n    auth_request /auth;\n    [...]\n}\n\nlocation = /auth {\n    internal;\n    proxy_pass http://backend;\n    proxy_set_header Content-Length \"\";\n    proxy_pass_request_body off;\n}\n```", "```\nvar http         = require('http');\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/auth', function(req, res) {\n  if(req.cookies.uid) {\n    res.sendStatus(200);\n  }\n  else {\n    res.sendStatus(403);\n  }\n})\n\napp.listen(3000)\n```", "```\n$ npm install express cookie-parser\n\n```", "```\n$ node auth.js\n\n```", "```\nlocation /example {\n    auth_request /auth;\n}\n\nlocation = /auth {\n    internal;\n    proxy_pass http://localhost:3000;\n    proxy_set_header Content-Length \"\";\n    proxy_pass_request_body off;\n}\n```", "```\nproxy_set_header X-Auth-URI $request_uri;\n```", "```\nsatisfy all | any;\n```", "```\nserver {\n    […]\n    location /admin {\n        auth_basic \"Administrative area\";\n        auth_basic_user_file /etc/nginx/auth.d/admin.users;\n        allow 10.132.3.0/24;\n        deny all;\n        satisfy any;\n    }\n}\n```"]