- en: Deploying KVM Instances with OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the host for the OpenStack deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Keystone identity service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Glance image service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Nova compute service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Neutron networking service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and inspecting KVM instances with OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping KVM instances with OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminating KVM instances with OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack is a cloud operating system that simplifies the deployment and management
    of virtual machines or containers in a scalable and highly available way. It operates
    on pools of compute resources (physical or virtual servers) and provides an intelligent
    scheduling mechanism to select appropriate hosts, and to build or migrate VMs.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack allows an easier management of virtual images and provides a centralized
    way of creating and managing software-defined networks. It integrates well with
    a variety of external and internal projects in order to deliver user and service
    authentication. OpenStack modular design allows adding and removing services as
    needed where a minimal production deployment may consist of as few as two projects
    an image and compute service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the ever-growing list of OpenStack projects and
    the interaction between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The OpenStack components and how they interact with each other
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to create a simple OpenStack deployment on two
    compute nodes using the Keystone, Glance, Nova, and Neutron projects from the
    Newton release of OpenStack, on an Ubuntu Xenial 16.04 server.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the OpenStack project, please visit [https://www.openstack.org/software/](https://www.openstack.org/software/).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the host for the OpenStack deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to install the infrastructure components that OpenStack
    depends on, such as the database server, the message queue, and the caching service.
    The projects that we are going to use throughout this chapter depend on these services
    for communication and persistent storage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu server with great virtualization capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the internet for package installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to keep the deployment simple and focus on the provisioning aspect
    of OpenStack, we are going to use a single physical server to host all services.
    In production environments, it is a common approach to separate each service onto
    their own set of servers, for scalability and high availability. By following
    the steps outlined in this chapter, you should be able to deploy all services
    on multiple hosts, by replacing the IP addresses and hostnames in the configuration
    files, as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the host and install the package repository for the Newton release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the MariaDB database server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Replace the IP address of the network interface the database server binds to,
    as per your host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the service and secure the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For simplicity, we are going to use `lxcpassword` as a password for all services
    throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the RabbitMQ messaging service, create a new user, password, and set
    permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Install and configure the `memcached` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack uses a SQL database, such as Mysql/MariaDB/Percona, to store information
    about its services. In the following recipes, we are going to create databases
    for the Keystone, Glance, Nova, and Neutron projects. We install and configure
    MariaDB in steps 1 through 3.
  prefs: []
  type: TYPE_NORMAL
- en: The messaging queue we install and configure in step 4 provides a centralized
    way for the services to communicate with each other by producing and consuming
    messages. OpenStack supports a few different message bus implementations, such
    as RabbitMQ, Qpid, and ZeroMQ.
  prefs: []
  type: TYPE_NORMAL
- en: The identity service Keystone caches authentication tokens using the `memcached`
    daemon. We install and configure it in step 5.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Keystone identity service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The identity service provided by the Keystone project is a centralized point
    in order to manage authentication and authorization, used by other OpenStack components,
    such as Nova compute and the image service Glance. Keystone also keeps a catalog
    of services and the endpoints they provide that the user can locate by sending
    queries to it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to install and configure Keystone, create two projects
    (a unit of ownership) for our services and assign users and roles to those projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu Server with Great virtualization capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the Internet for package installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install, configure, create new projects, user roles, and credentials, perform
    the following steps in the order presented here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the keystone database and grant permissions to the keystone user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the identity service Keystone from the repository we configured earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following minimal Keystone configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Populate the Keystone database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the Fernet key repositories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Bootstrap the Keystone service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following stanza in Apache and restart the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the default SQLite database that Keystone is packaged with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an administrative account by defining the following environment variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a project in Keystone for the services to use and list it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an unprivileged project and a user that will be used by regular clients instead
    of the OpenStack services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a user role and associate it with the KVM project and user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the **Web Service Gateway Interface** (**WSGI**) middleware pipeline
    for Keystone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Request a token for the admin and KVM users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the files that will contain the admin and user credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Source the admin credentials file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Request an authentication token for the admin user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by creating the Keystone database in MariaDB with the necessary user
    permissions in step 1\. In step 2, we install the Keystone package.
  prefs: []
  type: TYPE_NORMAL
- en: In step 3, we create the configuration file for the service. As you can see
    from the output, most of the options have been omitted, and default ones are assumed.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, we run a script that populates the Keystone database by creating
    the database schema.
  prefs: []
  type: TYPE_NORMAL
- en: Keystone uses tokens to authenticate and authorize users and services. There
    are different token formats available for use, such as UUID, PKI, and Fernet tokens.
    For this deployment, we are going to use the Fernet tokens. The Fernet tokens
    do not need to be persisted in a backend store. In step 5, we initialize the Fernet
    key repository.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the available identity tokens, refer to [http://docs.openstack.org/admin-guide/identity-tokens.html](http://docs.openstack.org/admin-guide/identity-tokens.html).
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, we bootstrap Keystone and update the Apache configuration in step
    7 and perform some cleanup in step 8.
  prefs: []
  type: TYPE_NORMAL
- en: In step 9, we export a list of environment variables containing the Keystone
    user, password, and endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In step 10, we create our first project in Keystone that will be used by the
    rest of the services. Projects represent a unit of ownership, where all resources
    are owned by a project. In steps 11 and 12, we create an unprivileged project
    and associated user.
  prefs: []
  type: TYPE_NORMAL
- en: In step 13, we configure the WSGI middleware pipeline for Keystone.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we request and obtain tokens for the admin and KVM users, and in
    step 15, we create two environment variable files that we can source when we need
    to switch between users.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 16 and 17, we source the admin credentials and project endpoint and
    obtain an authorization token.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Glance image service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Glance image service provides an API that we can use to discover, register,
    and obtain images for virtual machines. When we later use Nova compute to build
    a new KVM instance, the Nova service will send a request to Glance to obtain the
    requested image type.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to install Glance and register a new Ubuntu image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu server with great virtualization capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the internet for package installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install, configure, and register an image with Glance, follow the steps
    outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Glance database and user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Glance user and add it to the admin role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Glance service definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Glance API endpoints in Keystone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Glance service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Populate the Glance database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Glance service daemons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Download a QCOW2 image for the Ubuntu distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the image to the Glance service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'List the available images and their location on the filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by creating the Glance database in MariaDB in step 1.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 2 and 3, we create the user, role, and service for the Glance project.
    In step 4, we define the Glance API service endpoints in Keystone. The Nova service
    and the OpenStack tool can use these endpoints to query Glance for available images.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, we install the Glance package and create a minimal configuration
    file in step 6.
  prefs: []
  type: TYPE_NORMAL
- en: We then create the database schemas in step 7, by executing the `glance-manage` Python script
    and restart the Glance service in step 8.
  prefs: []
  type: TYPE_NORMAL
- en: In step 9, we download a QCOW2 Ubuntu image and add it to the glance registry
    in step 10.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 11, we list the newly added image and examine it on the host
    filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Nova compute service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack Compute service, code named Nova, manages a pool of compute resources
     and the virtual machines running on them. Nova is a suite of services to create
    and manage the lifecycle of virtual machines. We will use Nova to create, examine,
    stop, delete, and migrate KVM instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the various Nova services, refer to: [http://docs.openstack.org/developer/nova/](http://docs.openstack.org/developer/nova/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to install and configure the following Nova components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nova-api`: This is the service that accepts and responds to user requests
    through a RESTful API. We will use it when creating, running, stopping, and migrating
    KVM instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nova-scheduler`: This is the service that makes decisions on where to provision
    instance, based on filters, such as available memory, disk, and CPU resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nova-compute`: This is the service that runs on the compute hosts and is responsible
    for managing the lifecycle of the KVM instance, from provisioning to deletion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nova-conductor`: This is the service that sits between the Nova database we
    created earlier and the `nova-compute` service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nova-consoleauth`: This is the service that authorizes tokens for users that
    want to use various consoles to connect to the virtual machines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nova-novncproxy`: This is the service that grants access to instances running
    VNC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu server with great virtualization capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the internet for package installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Glance service we deployed in the *Installing and configuring the OpenStack
    Glance image service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install and configure the Nova services outlined earlier, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Nova database and user in MariaDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Nova user and add it to the admin role in the Identity service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Nova service and endpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Nova packages that will provide the API, the conductor, the console,
    and the scheduler services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Nova configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the database tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Nova services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `nova-compute` service, which will provision KVM instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the Nova configuration file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify the virtualization driver to be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the `nova-compute` service and list the available services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 and 2, we create the Nova database and user in MariaDB. In step 3,
    we create the service and endpoints that we can use to send API calls to.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 4 and 5, we install the packages for the Nova services and proceed
    to create a simple configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: We create the database table schemas in step 6 and start the Nova services in
    step 7.
  prefs: []
  type: TYPE_NORMAL
- en: For this example deployment, we are using a single node to run all of the OpenStack
    services we are interested in. However, you can use a second node just for the
    `nova-compute` service that will provision the KVM virtual machines. We install
    the `nova-compute` service in step 8, update the configuration file, and examine
    the `nova-compute` service external configuration in steps 9 and 10.
  prefs: []
  type: TYPE_NORMAL
- en: We finish the recipe by making sure that all Nova services have been configured
    and running in step 11.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring the OpenStack Neutron networking service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenStack Neutron project provides networking as a service to manage the
    networking between virtual instances. It is responsible for setting up virtual
    interfaces, configuring a software bridge, creating routes, and managing IP addressing.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the various Neutron services, refer to [https://docs.openstack.org/security-guide/networking/architecture.html](https://docs.openstack.org/security-guide/networking/architecture.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to install and configure the following Neutron
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`neutron-server`: This is the service that provides API to dynamically request
    and configure virtual networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`neutron-plugin-ml2`: This is the framework that enables the use of various
    network technologies, such as the Linux Bridge, Open vSwitch, GRE, and VXLAN,
    that we saw in earlier chapters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`neutron-linuxbridge-agent`: This is the service that provides the Linux bridge
    plugin agent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`neutron-l3-agent`: This is the daemon that performs forwarding and NAT functionality
    between software-defined networks, by creating virtual routers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`neutron-dhcp-agent`: This is the service that controls the DHCP daemon, which
    assigns IP addresses to the instances running on the compute nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`neutron-metadata-agent`: This is the service that passes instance metadata
    to Neutron'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In earlier recipes, we configured and used the Linux bridge and Open vSwitch
    manually and later delegated the management of the networking to libvirt. OpenStack
    Neutron integrates with libvirt and automates this process even further by exposing
    API calls that other services like Nova can utilize.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu server with great virtualization capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the internet for package installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nova services we configured in the *Installing and configuring the OpenStack
    Nova compute service* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install, configure, and create a network managed by Neutron, execute the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Neutron database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Neutron user and add it to the admin role in Keystone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Neutron service and endpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Neutron packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the Neutron configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the network type and extensions that we are going to use with Neutron:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the interface that will be added to the software bridge and the IP the
    bridge will be bound to, replacing the IP address and interface name (`eth1` in
    this example) as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Layer 3 agent as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the DHCP agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a configuration for the metadata agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the configuration file for the Nova services to include Neutron. A completely
    minimal working example follows to look as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Populate the Neutron databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart all Neutron services and Nova:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the Neutron services have been registered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the DNS server, the default gateway, and the subnet range that will
    be assigned to the guests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the subnet information in Neutron:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new software router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'As the admin user, add the subnet we created earlier to the router as an interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'List the network namespaces that Neutron created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'List the ports on the software router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'List the Neutron networks and ensure that the one we created earlier is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start this recipe by creating a new database for Neutron in step 1\. We then
    proceed to create the user for the Neutron service  and add it to the admin role
    for the service. In steps 2 and 3, we define the service endpoints that will be
    exposed for Nova to use. In steps 4 and 5, we install the Neutron packages and
    create a basic configuration file. In step 6, we select the VXLAN type of networking
    for this example deployment. In steps 7, 8, 9, and 10, we configure the bridge
    agent, the layer 3 agent, the DHCP agent, and the metadata agent.
  prefs: []
  type: TYPE_NORMAL
- en: In step 11, we update the Nova configuration file to contain a section about
    the Neutron service. In step 12, we create the database schema and restart all
    Neutron services in step 13, including `nova-api` and `nova-compute`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we verify that the Neutron services have been registered and proceed
    to create a new network in step 15.
  prefs: []
  type: TYPE_NORMAL
- en: In step 18, we define a new software router. We add the subnet we created earlier
    to it in step 19, then verify the new route configuration in step 21.
  prefs: []
  type: TYPE_NORMAL
- en: The last step 22 ensures that the network we defined earlier is active.
  prefs: []
  type: TYPE_NORMAL
- en: Building and inspecting KVM instances with OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to build our first KVM instance using the OpenStack
    infrastructure we put in place in the previous recipes. Building a new KVM instance
    consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We send an API call to the `nova-api` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `nova-api` service requests a target compute host from the nova-scheduler
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nova-scheduler` picks an available compute host, based on the configured filters,
    such as available memory, disk, and CPU utilization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the `nova-scheduler` selects an appropriate host, the `nova-compute` service
    on the selected host, requests the image from the Glance repository, if not already
    cached locally. Once the image is on the new server, `nova-compute` builds the
    new KVM instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Glance service with an available image. For more information on how to deploy
    Glance and add a new image, refer to the *Installing and configuring the OpenStack
    Glance image service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nova services we configured in the *Installing and configuring the OpenStack
    Nova compute service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Neutron service that was deployed in the *Installing and configuring the
    OpenStack Neutron networking service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build a new KVM instance using the OpenStack **command-line interface**
    (**CLI**), perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that we have an available Glance image to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new instance flavor type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new SSH key-pair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the security group rules that allow SSH and ICMP access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'List the available networks, we defined earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Build a new KVM instance and list its status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the container was started successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Inspect the KVM instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start the recipe by ensuring that we have an available Glance image to choose
    from. We list all available images in Glance in step 1. In step 2, we create a
    new instance flavor; we specify the allocated CPU, memory, and disk resources for
    the new instance type. In step 3, although it is not mandatory, we create a new
    SSH key pair that can later be used to SSH to the new instance. In step 4, we
    create two new security group rules that allow SSH and ICMP traffic. This is handy
    if we would like to ping and SSH to the new instance. Before we build the instance,
    we need to list the available networks in Neutron, which the guest will be part
    of; we do this in step 5.
  prefs: []
  type: TYPE_NORMAL
- en: With all of the earlier prerequisites in place, we build a new KVM instance
    in step 6, by specifying the instance flavor, the Glance image, the network, the
    security group, and the SSH key. We then proceed to list the status of the instance.
    Notice how the task state shows as scheduling, meaning that the `nova-scheduler`
    is selecting a host to provision the instance on and the status is BUILD. Since
    we are only using a single host for this example deployment, the instance is going
    to be provisioned on the same compute server. From the output of the build command,
    we can also see the IP address that was assigned to the new instance.
  prefs: []
  type: TYPE_NORMAL
- en: In step 7, we can see that the new instance was successfully provisioned, its
    status now shows as ACTIVE and a new QEMU process has been started.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 8, we examine the running instance; note that the power state
    field now shows Running and the status field displays active.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping KVM instances with OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short recipe, we are going to stop a running KVM instance, we provisioned
    in the last recipe, using the familiar `openstack` command syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Glance service with an available image. For more information on how to deploy
    Glance and add a new image, refer to the *Installing and configuring the OpenStack
    Glance image service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nova services we configured in the *Installing and configuring the OpenStack
    Nova compute service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Neutron service that was deployed in the *Installing and configuring the
    OpenStack Neutron networking service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A running KVM instance, provisioned with OpenStack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To stop a running KVM guest using OpenStack, perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the provisioned OpenStack instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'List the KVM guests using libvirt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the QEMU process for the instance has terminated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the KVM guest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start by listing the available KVM instances, provisioned with OpenStack
    in step 1\. In step 2, we stop the instance by specifying its name. Please note
    that we can also use the instance ID to stop it. Since OpenStack uses the libvirt
    to manage the lifecycle of the KVM instances, in step 3, we see that the instance
    has been indeed destroyed. In step 4, we ensure that the QEMU process for the
    guest has also been terminated. In the last step, we can see that the instance
    state is now SHUTOFF instead of ACTIVE. Instances in this state can be started
    again by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Terminating KVM instances with OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to terminate a KVM instance provisioned with OpenStack.
    Terminating the instance will undefine it through libvirt, release the allocated
    CPU memory and disk resources back to the pool of available resource, for the
    compute host, and mark its IP address as available in the Neutron database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we are going to need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A database server, a message queue, and `memcached` installed and configured,
    as described in the *Preparing the host for the OpenStack deployment* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Glance service with an available image. For more information on how to deploy
    Glance and add a new image, refer to the *Installing and configuring the OpenStack
    Glance image service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Keystone service we deployed in the *Installing and configuring the OpenStack
    Keystone identity service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nova services we configured in the *Installing and configuring the OpenStack
    Nova compute service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Neutron service that was deployed in the *Installing and configuring the
    OpenStack Neutron networking service* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A running KVM instance, provisioned with OpenStack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To terminate a running instance, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Obtain the name or ID of the instance to be terminated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the instance by providing the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that the instance was undefined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Examine the `nova-api`, `neutron-server`, and `nova-compute` logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We begin by listing all instances that Nova knows about in step 1, noting the
    name of the instance we would like to delete.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, we delete the instance by specifying its name. Note that we can also
    use its ID instead. In step 3, we confirm that the instance has been undefined
    by libvirt and is no longer available in OpenStack.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, we can see the API calls that were sent to the `nova-api`, `neutron-server`,
    and `nova-compute` services and the action that those services took.
  prefs: []
  type: TYPE_NORMAL
