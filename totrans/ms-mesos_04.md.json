["```\n$ wget http://downloads.mesosphere.com/marathon/v0.13.0/marathon-0.13.0.tgz\n\n```", "```\n$ tar xf marathon-0.13.0.tgz\n\n```", "```\n    $ wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.7/zookeeper-3.4.7.tar.gz\n\n    ```", "```\n    $ tar xf zookeeper-3.4.7.tar.gz\n\n    ```", "```\n    tickTime=2000\n    dataDir=/var/zookeeper\n    clientPort=2181\n    ```", "```\n    $ bin/zkServer.sh start\n\n    ```", "```\n$ ./bin/start --master local --zk zk://localhost:2181/marathon\n\n```", "```\n# Update the repositories\n# Setup\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF\n$ DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')\n$ CODENAME=$(lsb_release -cs)\n\n# Add the repository\n$ echo \"deb http://repos.mesosphere.com/${DISTRO} ${CODENAME} main\" | \\\n sudo tee /etc/apt/sources.list.d/mesosphere.list\n$ sudo apt-get \nupdate\n# Install Marathon\n$ sudo apt-get -y install marathon\n\n```", "```\n$ sudo yum -y install marathon\n\n```", "```\n while [ true ] ; do echo 'Hello Marathon' ; sleep 5 ; done\n\n```", "```\n# Install chronos\n$ sudo apt-get -y install chronos\n# Start the chronos server\n$ sudo service chronos start\n\n```", "```\n# Install chronos\n$ sudo yum -y install chronos\n# Start the chronos server\n$ sudo service chronos start\n\n```", "```\n$ curl -L -X GET localhost:8080/scheduler/jobs\n\n```", "```\n$ curl -L -X PUT localhost:8080/scheduler/job/job_a?arguments=-debug\n\n```", "```\n$ curl -L -H 'Content-Type: application/json' -X POST -d '{ \"schedule\": \"<some_value>\", \"name\": \"jab_a\", \"epsilon\": \"….\", \"command\": \"echo 'FOO' >> /tmp/job_a_OUT\", \"owner\": \"akhil@sigmoid.com\", \"async\": false }' localhost:8080/scheduler/iso8601\n\n```", "```\n$ curl -L -X DELETE localhost:8080/scheduler/job/job_a\n\n```", "```\n$ curl -L -X DELETE localhost:8080/scheduler/task/kill/job_a\n\n```", "```\n$ curl -L -X GET \"localhost:8080/v2/apps?cmd=sleep 60\"\n\n```", "```\n{\n  \"apps\": [\n    {\n      \"id\": \"/product/us-east/service/myapp\", \n      \"cmd\": \"env && sleep 60\", \n      \"constraints\": [\n        [\n          \"hostname\", \n          \"UNIQUE\", \n      \"\"\n        ]\n      ], \n      \"container\": null, \n      \"cpus\": 0.1, \n      \"env\": {\n        \"LD_LIBRARY_PATH\": \"/usr/local/lib/myLib\"\n      }, \n      \"executor\": \"\", \n      \"instances\": 3, \n      \"mem\": 5.0, \n      \"ports\": [\n        15092, \n        14566\n      ], \n      \"tasksRunning\": 1, \n      \"tasksStaged\": 0, \n      \"uris\": [\n        \"https://raw.github.com/Mesosphere/Marathon/master/README.md\"\n      ], \n      \"version\": \"2014-03-01T23:42:20.938Z\"\n    }\n  ]\n}\n```", "```\n$ curl -L -H 'Content-Type: application/json' -X POST –d\n '{\n  \"args\": null,\n  \"backoffFactor\": 1.15,\n  \"backoffSeconds\": 1,\n  \"maxLaunchDelaySeconds\": 3600,\n  \"cmd\": \"env && python3 -m http.server $PORT0\",\n  \"constraints\": [\n    [\n      \"hostname\",\n      \"UNIQUE\"\n    ]\n  ],\n  \"container\": {\n    \"Docker\": {\n      \"image\": \"python:3\"\n    },\n    \"type\": \"DOCKER\",\n    \"volumes\": []\n  },\n  \"cpus\": 0.25,\n  \"dependencies\": [],\n  \"deployments\": [\n    {\n      \"id\": \"f44fd4fc-4330-4600-a68b-99c7bd33014a\"\n    }\n  ],\n  \"disk\": 0.0,\n  \"env\": {},\n  \"executor\": \"\",\n  \"healthChecks\": [\n    {\n      \"command\": null,\n      \"gracePeriodSeconds\": 3,\n      \"intervalSeconds\": 10,\n      \"maxConsecutiveFailures\": 3,\n      \"path\": \"/\",\n      \"portIndex\": 0,\n      \"protocol\": \"HTTP\",\n      \"timeoutSeconds\": 5\n    }\n  ],\n  \"id\": \"/my-app\",\n  \"instances\": 2,\n  \"mem\": 50.0,\n  \"ports\": [\n    0\n  ],\n  \"requirePorts\": false,\n  \"storeUrls\": [],\n  \"upgradeStrategy\": {\n    \"minimumHealthCapacity\": 0.5,\n    \"maximumOverCapacity\": 0.5\n  },\n  \"uris\": [],\n  \"user\": null,\n  \"version\": \"2014-08-18T22:36:41.451Z\"\n}\n' localhost:8080/v2/apps\n```", "```\n$ curl -L -X PUT localhost:8080/v2/apps/my_app -d '{\n  \"cmd\": \"sleep 55\",\n  \"constraints\": [\n    [\n      \"hostname\",\n      \"UNIQUE\",\n      \"\"\n    ]\n  ],\n  \"cpus\": \"0.3\",\n  \"instances\": \"2\",\n  \"mem\": \"9\",\n  \"ports\": [\n    9000\n  ]\n   }\n   ' \n```", "```\n{\n  \"deploymentId\": \"6b2135a6-3326-4e44-9333-554eda6c3838\",\n  \"version\": \"2015-12-16T12:37:50.462Z\"\n}\n```", "```\n$ curl -X DELETE localhost:8080/v2/apps/my_app\n\n```", "```\n$ sudo apt-get install vagrant\n\n```", "```\n$ git clone git://git.apache.org/aurora.git\n\n```", "```\n$ cd aurora\n\n```", "```\n$ vagrant up\n\n```", "```\n$ sudo apt-get install virtualbox\n\n```", "```\n$ git clone https://github.com/HubSpot/Singularity\n\n```", "```\n$ cd Singularity\n\n```", "```\n# Compile the source code\n$ mvn clean package\n\n```", "```\nserver:\n  type: simple\n  applicationContextPath: /singularity\n  connector:\n    type: http\n    port: 7099\n  requestLog:\n    appenders:\n      type: file\n      currentLogFilename: /var/log/singularity-access.log\n      archivedLogFilenamePattern: /var/log/singularity-access-%d.log.gz\n\n#Mesos configuration, put the content from /etc/Mesos/zk as Mesos master\nmesos:\nmaster: zk://100.76.90.36:2181,100.76.126.34:2181,100.72.150.2:2181/Mesos\ndefaultCpus: 1 # number of core that will be used by the job\ndefaultMemory: 128 # default memory of the job, being 128MB\nframeworkName: Singularity\nframeworkId: Singularity\nframeworkFailoverTimeout: 1000000\n\nZookeeper: # quorum should be a host:port separated by comma\n  quorum: 100.76.90.36:2181,100.76.126.34:2181,100.72.150.2:2181\n  zkNamespace: singularity\n  sessionTimeoutMillis: 60000\n  connectTimeoutMillis: 5000\n  retryBaseSleepTimeMilliseconds: 1000\n  retryMaxTries: 3\n\nlogging:\n  loggers:\n    \"com.hubspot.singularity\" : TRACE\n\nenableCorsFilter: true\nsandboxDefaultsToTaskId: false  # enable if using SingularityExecutor\n\nui:\n  title: Singularity (local)\n  baseUrl: http://localhost:7099/singularity\n```", "```\njava -jar SingularityService/target/SingularityService-*-shaded.jar server singularity_config.yaml\n\n```", "```\ncurl -X POST -d@Mesos-consul.json -H \"Content-Type: application/json\" http://Marathon.service.consul:8080/v2/apps'\n\n```", "```\n{\n  \"args\": [\n    \"--zk=zk://Zookeeper.service.consul:2181/Mesos\"\n  ],  \n  \"container\": {\n    \"type\": \"DOCKER\",\n    \"Docker\": {\n      \"network\": \"BRIDGE\",\n      \"image\": \"{{ Mesos_consul_image }}:{{ Mesos_consul_image_tag }}\"\n    }   \n  },  \n  \"id\": \"Mesos-consul\",\n  \"instances\": 1,\n  \"cpus\": 0.1,\n  \"mem\": 256\n}\n```", "```\n$ ./bin/haproxy-Marathon-bridge localhost:8080 > /etc/haproxy/haproxy.cfg\n\n```", "```\n$ haproxy -f haproxy.cfg -p haproxy.pid -sf $(cat haproxy.pid)\n\n```", "```\n$ ./bin/haproxy-Marathon-bridge install_haproxy_system localhost:8080\n\n```", "```\n# Clone the github repository\n$ git clone https://github.com/QubitProducts/bamboo\n# Change the working directory\n$ cd bamboo\n# Install, (make sure you have installed go first)\n$ go build bamboo.go; ./builder/build.sh\n\n```", "```\n{\n  // This is where you configure the Marathon instance\n  \"Marathon\": {\n    // Since we are running web applications, give the host:port to the applications\n    \"Endpoint\":\"http://Marathon1:8080,http://Marathon2:8080,http://Marathon3:8080\",\n    // Use the Marathon HTTP event streaming feature\n    \"UseEventStream\": true\n  },\n\n  \"Bamboo\": {\n    // Bamboo's HTTP address can be accessed by Marathon\n    // Used for Marathon HTTP callback and each Bamboo instance\n    // must provide a unique Endpoint that is directly addressable by Marathon\n    // (e.g., every server's IP address)\n    \"Endpoint\": \"http://localhost:8000\",\n\n    // Proxy setting information is stored in Zookeeper// This path is created by Bamboo, if it does not already exist\n\n    \"Zookeeper\": {\n      // Make sure that the same setting is used while running on the same ZK cluster\n      \"Host\": \"zk01.example.com:2812,zk02.example.com:2812\",\n      \"Path\": \"/Marathon-haproxy/state\",\n      \"ReportingDelay\": 5\n    }\n  }\n\n  // Make sure you are using absolute path on production\n  \"HAProxy\": {\n    \"TemplatePath\": \"/var/bamboo/haproxy_template.cfg\",\n    \"OutputPath\": \"/etc/haproxy/haproxy.cfg\",\n    \"ReloadCommand\": \"haproxy -f /etc/haproxy/haproxy.cfg-p /var/run/haproxy.pid -D -sf $(cat /var/run/haproxy.pid)\",\n    // A command that will validate the config before you run reload command.// '{{.}}' will be expanded to a temporary path that contains the config contents\n    \"ReloadValidationCommand\": \"haproxy -c -f {{.}}\",\n    // A command that will always be run after ReloadCommand, even if reload fails\n    \"ReloadCleanupCommand\": \"exit 0\"\n  },\n\n  // Enable or disable StatsD event tracking\n  \"StatsD\": {\n    \"Enabled\": false,\n    // StatsD or Graphite server host\n    \"Host\": \"localhost:8125\",\n    // StatsD namespace prefix -\n    // Label each node if you have multiple Bamboo instances\n    // by bamboo-server.production.n1.\n    \"Prefix\": \"bamboo-server.production.\"\n  }\n}\n```"]