- en: Chapter 12. Virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding storage to a virtual machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting USB peripherals to a guest system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a guest's network interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter focus on running a second operating system as a
    guest using virtualization on your CentOS system. You'll learn how to setup the
    virtual machine to install a guest operating system, properly create a copy of
    the machine through cloning, and add additional storage resources. You'll also
    learn how to share access to USB peripherals attached to the host system and configure
    the guest's virtual network interface to access the network.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to install the KVM virtualization software and create
    a new virtual machine. Virtualization allows us to take advantage of the hardware
    resources available to us by running multiple operating systems on the same physical
    system. The primary operating system is installed "bare-metal" and is known as
    the host OS. Then, special software is installed that allows the host to provide
    emulation or direct access to hardware resources. The resources are partitioned
    as virtual machines and several guest operating systems can then be installed
    and run on top of the host, each in their own virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and a
    graphical user interface installed (refer to the *Installing the GNOME desktop*
    and *Installing the KDE Plasma desktop* recipes in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with CentOS"), *Getting Started with CentOS*). Administrative privileges
    are also required, either by logging in with the `root` account or through the
    use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install a guest operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the necessary virtualization packages using package groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch the Virtual Machine Manager application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new virtual machine by selecting **New Virtual Machine** from the **File**
    menu. This opens the **New VM** wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the desired installation method and click on **Forward**. For this recipe,
    we'll choose the **Local install media** option:![How to do it...](img/image_12_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The New VM wizard collects the necessary details to create a new machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the media source. If the media is a CD or DVD, select the **Use CDROM
    or DVD** option. If the media is an ISO file, select the **Use ISO image** option
    and specify the path to the image file. Then, click on **Forward**:![How to do
    it...](img/image_12_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new machine will use an ISO file as its installation media
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set the amount of RAM and the number of CPUs that you want to allocate to the
    virtual machine and then click on **Forward**:![How to do it...](img/image_12_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1 GB of RAM and 1 CPU are allocated to the virtual machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify the storage capacity that will be allocated to the machine and then
    click on **Forward**:![How to do it...](img/image_12_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The machine is set up with 8 GB of storage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide a name to identify the virtual machine and click on **Finish**:![How
    to do it...](img/image_12_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wizard is ready to create the virtual machine and boot the installation
    media
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The virtual machine will automatically start and boot from the specified installation
    media. You can now proceed with installing your guest operating system in the
    machine as if it were a physical system:![How to do it...](img/image_12_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An operating system can be installed on the virtual machine the same way as
    a physical system
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The necessary software is installed by installing three package groups; the
    `Virtualization Platform` group installs the base virtualization libraries, the
    `Virtualization Client` package installs client programs for creating and managing
    virtual machines, and the `Virtualization Tools` package installs utilities for
    maintaining the machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the software, we used the Virtual Machine Manager to create
    a machine. The machine defines a virtual system, specifying what resources are
    available to the guest and how the guest may access them. Under the GNOME desktop
    environment, the manager is launched from the **System Tools** category of the
    **Applications** menu. In KDE, it''s found via the Kickoff Application Launcher
    under **Applications** | **System Tools**. The manager can also be launched from
    the command line with `virt-manager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new virtual machine can be created on the command line as well, using `virt-install`
    and specifying the resource allocations as arguments. This is especially useful
    if you want to script the process of spinning up new guests.
  prefs: []
  type: TYPE_NORMAL
- en: The manager's new VM makes it easy to create a new virtual machine definition
    by prompting us for the necessary resource allocations. For instance, we're asked
    to provide the amount of RAM, the number of CPUs, and the amount of storage space
    to make available to the guest. After we provide the values, it creates the machine
    and starts it, booting from the specified installation media to install the guest
    operating system. From there, installing the operating system is the same as if
    you were installing it on a physical system.
  prefs: []
  type: TYPE_NORMAL
- en: To boot a virtual machine, select the desired machine from the available list
    so that it's highlighted and then click on the play arrow icon in the manager's
    tool bar. Alternatively, right-click on the list entry and select **Run** from
    the context menu. This powers on the machine and its status changes to *Running*.
    When you're finished, you can power the machine off by clicking on the power switch
    icon in the tool bar or on one of the **Shut Down** options from the context menu.
    The machine's status changes to *Shut off*. To interact with the guest while it's
    running, double-click on the entry or highlight it and then click on the Open
    icon in the manager's tool bar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scrollbars will appear on the side and bottom of the window if the guest's display
    is too large to show in its entirety. Scaling it to fit within the window can
    improve your experience. To adjust the display's presentation, select **Display**
    from **View**.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with virtual
    machines:'
  prefs: []
  type: TYPE_NORMAL
- en: The `virt-install` manual page (`man 1 virt-install`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The KVM website ([http://www.linux-kvm.org/page/Main_Page](http://www.linux-kvm.org/page/Main_Page))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RHEL 7 Virtualization Deployment and Administration Guide ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for KVM ([http://www.ibm.com/support/knowledgecenter/linuxonibm/liaat/liaatbpkickoff.htm](http://www.ibm.com/support/knowledgecenter/linuxonibm/liaat/liaatbpkickoff.htm))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since a virtual machine is ultimately nothing more than data files, these can
    easily be copied and shared. This is useful because you can set up a gold server
    exactly how you want it and then make copies that are used for different purposes.
    However, using the `cp` command isn't the way to go about it. This recipe shows
    you the correct way to duplicate a machine with a process called cloning.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine set up as described in the previous recipe.
    While the cloning process doesn't require administrative privileges per se, privileges
    may be needed to access the machine's files depending on where they are located.
    By default, the files are stored at `/var/lib/libvirt/images`, which requires
    administrative access.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to clone a virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the machine you want to clone is not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Virtual Machine Manager, right-click on the desired machine in the list of
    available machines and select **Clone** from the context menu. This opens the
    **Clone Virtual Machine** dialog:![How to do it...](img/image_12_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Clone Virtual Machine dialog makes it easy to clone a machine image
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify a unique name for the new image and click on the **Clone** button. This
    will create a standalone copy of the virtual machine and selected storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe used Virtual Machine Manager to create a copy of a machine known
    as a clone. The machine should be cloned in this manner instead of simply copying
    the underlying files, because the cloning process also updates various identifiers
    that should be unique between machines, such as the MAC address of the network
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `virt-clone` command can be used to clone a guest on the command-line. For
    more information, refer to the program's man page using `man 1 virt-clone`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to update various aspects of the cloned machine before booting
    it, you can use tools such as `virt-sysprep` and `virt-configure`. These programs
    mount the machine''s disk image in a chrooted environment, perform the requested
    modifications, and then unmount the image. `virt-sysprep` is installed via `libguestfs-tools-c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To view a list of the available maintenance actions `virt-sysprep` can perform,
    invoke the program using `--list-operations`. Each option will be displayed along
    with a brief description of what it does. To perform an operation, use the `--operation`
    argument followed by one or more of the operation labels, separated by commas.
    For example, the following command clears the bash history for any accounts on
    the system and deletes any files that may be in `/tmp`. The `-a` argument provides
    the path to the machine''s disk image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on what the original machine image was used for, you may find the
    following cleanup operations useful as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ca-certificates`: This deletes any CA certificates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logfiles`: This deletes log files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh-hostkeys`: This deletes the SSH host keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ssh-userdir`: This deletes the users'' `.ssh` directories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user-account`: This deletes all user accounts except for root'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is some overlap in the functionality of `virt-sysprep` and `virt-customize`;
    however, `virt-customize` performs more general customization operations, while
    virt-sysprep's actions focus more on cleaning up an image. `virt-customize` can
    do things like move and set the system's hostname, reset passwords, and install
    and uninstall packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reset the system''s hostname, use the `--hostname` argument and provide
    the desired name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `--install` and `--uninstall` arguments add and remove packages and specify
    one or more package names separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Some arguments you may find useful for `virt-customize` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--chmod`: This changes file permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--copy`: This creates a copy of a file or directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--delete`: This removes a file or directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--mkdir`: This creates a new directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--move`: This moves a file or directory to a new destination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--password`: This updates a user''s password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--run-command`: This runs a command on the image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on cloning and customizing
    virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: The `virt-clone` manual page (`man 1 virt-clone`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `virt-configure` manual page (`man 1 virt-configure`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `virt-sysprep` manual page (`man 1 virt-sysprep`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to clone a KVM virtual machine and reset the VM ([http://www.unixarena.com/2015/12/how-to-clone-a-kvm-virtual-machines-and-reset-the-vm.html](http://www.unixarena.com/2015/12/how-to-clone-a-kvm-virtual-machines-and-reset-the-vm.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding storage to a virtual machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if you're not a data hoarder, the time will probably come when you need
    to add additional storage to a guest system. No worries! This is easy to do! This
    recipe teaches you how to add and modify the virtual hardware attached to a machine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine set up as described in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add storage to a virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the virtual machine you want to modify is not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the virtual machine by double-clicking on the desired entry in the list
    of available machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either click on the lightbulb icon in the menu bar or select **Details** from
    **View** to show the virtual machine's hardware details:![How to do it...](img/image_12_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The machine's virtual hardware is displayed and resources can be added, modified,
    and removed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Add Hardware** button in the bottom-left corner of the window
    to open the **Add New Virtual Hardware** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Storage** from the list of possible resources. Specify the desired
    storage space to allocate for the new disk and click on **Finish**:![How to do
    it...](img/image_12_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A virtual 8 GB storage drive is added to the machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the hardware view by either clicking on the computer icon in the menu
    bar or selecting **Console** from **View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you where to configure the virtual hardware definitions associated
    with a machine. To increase the storage available to a guest operating system,
    we navigated to this view and added a new virtual drive. The storage device can
    be created through the interface, as shown in the recipe, or an existing drive
    file can be selected and attached to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are creating a new disk, you will want to partition, format, and mount
    the storage so it can be used. You may find the recipes discussed in [Chapter
    5](ch05.html "Chapter 5. Managing Filesystems and Storage"), *Managing Filesystems and
    Storage *helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Other hardware can be managed via the hardware view as well. Most notably, you
    can add and configure new network interfaces and allocate additional RAM and CPU
    resources. Increasing the RAM/CPU might be done to run resource-intensive processes
    on the system—it's better to allocate a smaller amount first and then increase
    the resources when the need arises.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful configuration is to change the display server. By default, the
    display is configured to use SPICE, a more robust protocol than VNC. A SPICE server
    is built into the virtualization platform so that you can connect to the virtual
    machine using a SPICE client to access its display, even if the guest is only
    running a console display (refer to [https://www.spice-space.org/](https://www.spice-space.org/)
    to find a SPICE client). If you want to connect using VNC instead, select the
    **Display Spice** entry in the hardware list and set its **Type** to **VNC server**.
    Change the **Address** value to **All interfaces** to accept connections from
    outside the localhost, specify a connection password, and then click on the **Apply**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The display''s label in the hardware list will change to **Display VNC**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_12_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Users can connect to a virtual system's display using a SPICE or VNC client
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with virtual
    hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 7 Virtualization Deployment and Administration Guide: Storage Pools  
    ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/chap-Storage_pools.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/chap-Storage_pools.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage management ([http://libvirt.org/storage.html](http://libvirt.org/storage.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting USB peripherals to a guest system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to share the USB devices that are connected to the
    host system with a virtual machine. This means you can use your USB printers,
    webcams, and storage devices from your guest operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a virtual machine set up as described in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to connect USB peripherals to a guest system:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the virtual machine you want to modify is not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach the USB device to the physical system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the virtual machine by double-clicking on the desired entry in the list
    of available machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the virtual machine's hardware details by clicking on the lightbulb icon
    in the menu bar or selecting **Details** from **View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Hardware** button to open the **Add New Virtual Hardware**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **USB HOST Device** from the list of resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the desired USB device and then click on the **Finish** button:![How
    to do it...](img/image_12_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: USB devices attached to the host system can be assigned to the virtual machines
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the hardware view by either clicking on the computer icon in the menu
    bar or selecting **Console** from **View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the virtual machine and verify that the USB device is available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: USB devices attached to the host system can be allocated to a virtual machine
    through the hardware details. We selected the **USB Host Device** category, which
    displayed all of the devices currently registered with the host from which we
    can make our selection. There are a couple of items to be aware of when using
    USB devices in your guest system. First, only the USB 1.1 protocol is supported.
    This isn't an issue for most peripherals, such as webcams, printers, and USB microphones,
    where transfer speed isn't much of a concern. It may be a concern if you intend
    to attach a USB storage device and transfer large amounts of data. Second, the
    device must be plugged in and accessible by the host before starting the virtual
    machine. This is because the virtualization platform running on the host is responsible
    for provisioning access to the guest.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe showed you how to assign a USB device connected to the host system
    to a guest. If you're accessing your virtual machine remotely with a SPICE client,
    you can plug in USB devices to your local machine and redirect them to the remote
    guest using USB redirection. More information can be found in the RHEL 7 Virtualization
    Deployment and Administration Guide.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on sharing USB devices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 7 Virtualization Deployment and Administration Guide: USB Devices    
    ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/sect-Guest_virtual_machine_device_configuration-USB_devices.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/sect-Guest_virtual_machine_device_configuration-USB_devices.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB pass-through with libvirt and KVM ([https://david.wragg.org/blog/2009/03/usb-pass-through-with-libvirt-and-kvm.html](https://david.wragg.org/blog/2009/03/usb-pass-through-with-libvirt-and-kvm.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a guest's network interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to configure the virtual network interface's behavior.
    By changing the interface's behavior, you can provide the guest direct access
    or filtered access to the network, and even set up a local network visible only
    to the host system and other guests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It also
    requires a virtual machine set up as described in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure a guest''s network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the virtual machine you want to modify is not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the virtual machine by double-clicking on the desired entry in the list
    of available machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the virtual machine's hardware details by clicking on the lightbulb icon
    in the menu bar or selecting **Details** from **View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the desired **Network source** (NAT or Host device).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If selecting a host device, specify the desired mode (Bridged, VEPA, Private,
    or Passthrough):![How to do it...](img/image_12_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The virtual network interface can be configured to handle the guest's traffic
    in different ways
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Apply** button to save your configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the hardware view by either clicking on the computer icon in the menu
    bar or selecting **Console** from **View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the virtual machine and proceed to configuring the guest's networking
    as necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Managing a guest's network connectivity is a matter of specifying the behavior
    of the virtual machine's network adaptor. To do this correctly, we need to first
    understand what the behaviors are from the options that are available to us.
  prefs: []
  type: TYPE_NORMAL
- en: The first option is **Network Address Translation** (**NAT**) and that is the
    default for new virtual machines. The virtualization platform provides a virtual
    network interface to the guest and handles all of its traffic. The platform marshals
    the traffic through the host's physical interface, acting very much like a router
    between the guest and host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second option is to tie the virtual interface directly to the host''s physical
    interface. There are four sharing modes, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bridged**: The virtualization platform connects the guest and host interfaces,
    giving the guest direct access to the Internet. The guest needs to obtain its
    own IP address and has full access to the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VEPA**: This is for use with VEPA-capable network devices (special hardware
    requirements must be met).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private**: The platform creates private network, routing packets so that
    virtual machines on the same host can communicate with one another and the external
    network, but connections coming in from the network can''t reach the virtual machines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passthrough**: The host''s interface is shared directly (additional technical
    requirements must be met).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The documentation and terminology are quite technical, given the nature of the
    subject. Moreover, many people who are not networking experts often have trouble
    deciding the correct configuration. In my experience, there're two common scenarios
    in which non-networkers use virtualization-local virtualization to provide an
    alternate environment and virtualization to provision multiple server systems.
    If you're using your virtual machine as a typical desktop system where users need
    Internet access to read e-mail and surf the Web, use NAT networking and configure
    the guest to use DHCP. If you're running the machines as servers, share the host's
    adaptor in the Bridged mode and configure the guest with a static IP address.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on configuring the virtual
    network interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'libvirt Virtualization API: Networking ([http://wiki.libvirt.org/page/Networking](http://wiki.libvirt.org/page/Networking))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Virtualization Deployment and Administration Guide: Network Configuration
    ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/chap-Network_configuration.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Virtualization_Deployment_and_Administration_Guide/chap-Network_configuration.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
