- en: Chapter 4. Google Docs Weather Station
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we're going to take a look at a simple weather station that
    can also be used as an IoT device. This time, our BeagleBone Black will collect
    environment data and send them to a remote database in order to be reworked and
    presented into a shared environment.
  prefs: []
  type: TYPE_NORMAL
- en: Both local and remote data will be available in our preferred browser since,
    as it's a local system, we're going to use the `wfrog` tool, and as remote system,
    we're going to use a Google Docs spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of functioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, our BeagleBone Black will collect the weather data through
    two sensors. But this time, instead of writing a dedicated software, we are going
    to use ready-made weather station software on our BeagleBone Black board to do
    the job. While on the remote side, we're going to use the well known Google Docs
    cloud system to store the data and then present them to the user.
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, we can achieve a (*quasi*) professional result with minor effort!
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, our job is to connect the sensors, adapt the weather station
    software to our hardware in order to read the data from the sensors, and then
    add the proper code to send our data to a Google Docs spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, the hardware setting is not very tricky since we just need two I²C
    chips to get the basic environment data for our weather station, while all the
    complexity is in the software settings, since we need at least a 3.13 kernel to
    manage the sensors and a complete software toolchain to talk with the Google Docs
    system!
  prefs: []
  type: TYPE_NORMAL
- en: Maybe this is not the case with you, but my BeagleBone Black runs a kernel version
    3.8 where some drivers are missing. That's why I decided to install a new distribution
    based on kernel release 3.13 on an external microSD so that I do not have to modify
    the default on-board eMMC settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, just to set up the hardware, I can use the current running kernel
    where I can enable the I²C bus named `I2C1` with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works well, you should see the following kernel activities on
    your board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And a new device, `/dev/i2c-2` should now be available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Okay, now we can start adding the hardware to our BeagleBone Black and testing
    the connections with the current kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reader can also take a look at the book *BeagleBone Essentials*, *Packt
    Publishing*, written by the author of this book, in order to have more information
    regarding how to manage BeagleBone Black's I²C buses needed to communicate with
    the sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the temperature/humidity sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a temperature and humidity sensor, I decided to use the device shown in
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the temperature/humidity sensor](img/B00255_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/humidity-sensor](http://www.cosino.io/product/humidity-sensor).'
  prefs: []
  type: TYPE_NORMAL
- en: The datasheet of this device is available at [http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf](http://dlnmh9ip6v2uc.cloudfront.net/datasheets/BreakoutBoards/HTU21D.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'This device is very simple. The I²C connections are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pin | Temperature/humidity sensor pin |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| P9.4 - Vcc | + |'
  prefs: []
  type: TYPE_TB
- en: '| P8.17 - CLK | CL |'
  prefs: []
  type: TYPE_TB
- en: '| P8.18 - SDA | DA |'
  prefs: []
  type: TYPE_TB
- en: '| P9.2 - GND | - |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For further reading on the working of I²C bus, the reader can start with the
    Wikipedia article at [http://en.wikipedia.org/wiki/I%C2%B2C](http://en.wikipedia.org/wiki/I%C2%B2C).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to verify the connections, we can use the `i2cdetect` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that even if the I²C bus is named `I2C1` on the system, it must be addressed
    with the `2` ID number!
  prefs: []
  type: TYPE_NORMAL
- en: 'The string `UU` (or `40`) at the `0x40` address means that the device is connected!
    However, it may happen that you get no `UU` strings at all due to some hardware
    issues regarding this device. In this case, we can use the `i2cget` command as
    follows in order to force an I²C activity on the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, the device is connected. But if you get the following output, you must
    recheck the connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you may need to disable the on-board pull-up resistors by clearing
    the soldered jumper on your sensor. In fact, the BeagleBone Black's I²C controller
    has the internal pull-up required by the I²C bus specifications, and under some
    circumstances, the pull-up on the sensor board may interfere with it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the barometric sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As barometric sensor, I decided to use the device shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the barometric sensor](img/B00255_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/barometric_sensor](http://www.cosino.io/product/barometric_sensor).'
  prefs: []
  type: TYPE_NORMAL
- en: The datasheet of this device is available at [http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf),
    and a useful application note is at [http://www.epcos.com/inf/57/ds/T5400.pdf](http://www.epcos.com/inf/57/ds/T5400.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'This device has two interfaces: I²C and SPI. However, since the previous device
    was an I²C one, I decided to use the same interface. So, the connections must
    be done as reported in the following table, leaving the other pins unconnected:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pin | Barometric sensor pin |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| P9.4 - Vcc | VCC |'
  prefs: []
  type: TYPE_TB
- en: '| P8.17 - CLK | SCL/SCLK |'
  prefs: []
  type: TYPE_TB
- en: '| P8.18 - SDA | SDA/MOSI |'
  prefs: []
  type: TYPE_TB
- en: '| P9.2 - GND | GND |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we're going to connect both devices to the same I²C bus. For the moment,
    you can disconnect the previous sensor and then connect this one. But keep in
    mind that in the final configuration, all sensor devices are connected together
    with the same bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to verify the connections, we can use the `i2cdetect` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As the preceding command shows, the string `77` (or `UU`) at the `0x77` address
    means that the device is connected! This time, the device should be detected without
    any issue. So, if you do not get the preceding output, please consider rechecking
    your hardware connections.
  prefs: []
  type: TYPE_NORMAL
- en: The final picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows the prototype I realized to implement this project
    and to test the software. As you can see, the connections this time are very tricky.
  prefs: []
  type: TYPE_NORMAL
- en: '![The final picture](img/B00255_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to play hard! We have to install a new kernel with specific patches
    in order to add the needed drivers. Then, we must set up our Google account in
    order enable the Google Docs API to manage a spreadsheet on the cloud. And, in
    the end, we must install and properly configure the weather station software we
    chose to collect the weather data.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a new kernel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install a new kernel, we must use a host PC where we use the following command
    to download the sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When finished, we must enter the `bb-kernel` directory and then check out the
    kernel, version 3.13:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we should configure the compilation suite by generating a proper configuration
    file named `system.sh`, starting from the sample file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On my system, I modified the newly created `system.sh` file with the following
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `MMC` variable is used by the installer tool (named `install_kernel.sh`),
    and it points to the device corresponding to the microSD where the BeagleBone
    system is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning! You must pay attention and be sure about the `MMC` define settings
    or the host machine may get damaged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we must apply the patch into `chapter_04/0001-Add-support-for-I2C1-bus-and-the-connected-devices.patch`
    file in the book''s example code repository in order to enable the I²C bus named
    `I2C1` and the drivers for the preceding sensors and to add the missing driver
    for the barometric sensor. The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `--whitespace=nowarn` command line option is needed just in case
    your `git` system is configured to automatically fix up the whitespace errors,
    which is wrong in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything works well, the following command should display the following
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Before starting the kernel compilation, let me spend a few words regarding
    this patch. It simply adds the following two patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The first patch is to add the driver for the barometric sensor and the second
    one is to enable the I²C bus labeled `I2C1` and to define the connected devices.
    In particular, the second patch completes the steps shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: First, the preceding code defines the `i2c1_pins` group by selecting the proper
    `pinmux` settings, and then it enables the `I2C1` bus, sets the correct bus frequency,
    and defines the proper drivers for the attached sensor devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the patch adds the code needed to enable their application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, as the last step, it enables the newly added driver into the default
    kernel''s configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, all modifications have been explained, and we can now start to compile
    the kernel with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This step and the subsequent ones are time consuming and require patience, so
    you should take a cup of your preferred tea or coffee and just wait.
  prefs: []
  type: TYPE_NORMAL
- en: After some time, the procedure will present the standard kernel configuration
    panel, and now we should verify that the needed drivers are enabled. You should
    navigate to the menu in **Device Drivers** | **Hardware Monitoring support** where
    the **Measurement Specialties HTU21D humidity/temperature sensors** entry should
    be selected as module (**<M>**), and in **Device Drivers** | **Industrial I/O
    support** | **Pressure sensors** where the **EPCOS T5403 digital barometric pressure
    sensor driver** entry should be selected as module too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, exit from the menu and the kernel compilation will start. When it ends,
    the new kernel image is ready, and the following message should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that when executing the `build_kernel.sh` file, you may get the following
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you may resolve the problem by simply giving the preceding two
    suggested `apt-get` (or `aptitude`) commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can install it on the microSD using the installation tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Before updating the kernel, the tool asks whether the user is really sure about
    the device where the kernel must be placed. For example, on my system, I get the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: My `MMC` variable is set to `/dev/sdd`; so, if I carefully take a look at the
    corresponding lines, I can verify that these are the right names of the BeagleBone
    Black's filesystem. So, I can safely answer yes by entering the `y` character.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the microSD should be a *class 10* and at least of 4 GB in size.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the command execution, we should get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, just remove the microSD from the host machine and put it in your BeagleBone
    Black. Turn it on by keeping the user button pressed in order to force the boot
    from the microSD and, if everything works well, we can verify after the usual
    login that the new kernel is really running by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reader can also take a look at the book *BeagleBone Essentials*, *Packt
    Publishing*, written by the author of this book, in order to have more information
    regarding how to install a newer kernel on an external microSD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, the new kernel is ready! Now we can verify that the needed drivers are
    also correctly loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The new devices can now be accessed through the *sysfs* interface. To get the
    current barometric pressure, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The data is given in **kilopascal** (**kPa**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The temperature/humidity sensor can be accessed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The humidity is given as a relative humidity percentage (m%RH), and the temperature
    is given in thousandths of Celsius degrees (m°C), so we have to divide both measurements
    by 1000 in order to have the relative humidity percentage (%RH) and the Celsius
    degrees (°C).
  prefs: []
  type: TYPE_NORMAL
- en: Running the weather station software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now it's time to set up our weather station. To do so, as already stated, we
    decided to use an already made project instead of writing a new one. This is because
    there are tons of well-done weather station software existing that we can use
    to locally display the collected data in a better manner.
  prefs: []
  type: TYPE_NORMAL
- en: The software is the `wfrog` project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The home site of the project is at [https://code.google.com/p/wfrog/](https://code.google.com/p/wfrog/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, we can get the sources from the online repository with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `svn` command is located in the `subversion` package that can be installed
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that a compressed archive of the program can be found in the `chapter_04/wfrog/wfrog-read-only.tgz`
    file in the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the download, we should go into the newly created directory `wfrog-read-only`
    and generate the `debian` package with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that your system may miss some needed packages in order to be able to
    generate new `debian` packages. By using the following command, you should install
    whatever you need in order to do the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes well, the `rules` command should display the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to install the new packages, we can use the `gdebi` command, which will
    download all package''s dependencies for us, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `gdebi` command can be installed by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, now the software is installed, but we still need to complete some steps
    before going further. The first one is to configure the system with a special
    simulator in order to verify that the web interface and the data collecting system
    are working correctly. To do so, we should execute the `wfrog` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that, in case you get an error like the one shown as follows during the
    very first execution of the software, you may need the following patch to fix
    up the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The patch is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Then, you simply need to rebuild the package.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding patch can be found in the `chapter_04/wfrog/0001-fix-setup.diff`
    file in the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should answer all the questions carefully selecting the `1) random-simulator`
    option when the systems asks you to enter the driver for your station model, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once configured, you can start the weather station system by issuing the following
    two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the web interface can be accessed at `7680` port of the BeagleBone Black''s
    IP address (usually `192.168.7.2`), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the weather station software](img/B00255_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Okay, it works; but the system is now using a simulator, and we want it to use
    the data from the weather sensors we just installed! So, we have to add a new
    driver to our new weather station. To do so, we have to modify the sources just
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `wfrog-read-only/wfdriver/station/` directory, we have to add a new
    file called `bbb_habp.py`. The following shows a first snippet of its code with
    the lines that define a new class related to our new station:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the code defines the functions to read the environment data: the `get_press()`
    function reads the pressure, `get_temp()` reads the temperature, and `get_hum()`
    reads the humidity, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, the code defines the core function that has the task to generate
    all weather events by calling the `generate_event()` function with a proper argument.
    The events just generated are stored into the `e` variable, and we have to only
    fill its fields and send the data to the weather station with the `send_event()`
    function, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The last lines are used to schedule the next period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding code is reported in the `chapter_04/wfrog/bbb_habp.py` file in
    the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to finish the job, we have to patch the `wfrog-read-only/wfdriver/station/__init__.py`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In this manner, we are saying to the `wfrog` system that a new station has been
    added.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The patch is held in the `chapter_04/wfrog/0002-add-bbb_habp-station.diff` file
    in the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all the preceding modifications, we have to regenerate the package as
    just shown and reconfigure it by rerunning the configuration program and selecting
    the new driver as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let me remind you that in order to regenerate the package, you have to execute
    the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note that this time, a new entry named `bbb_habp` is added, so just select it
    and reconfigure the system as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When all modifications are in place, we have to stop the running `wfrog` tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can safely clear the files where `wfrog` holds the weather data with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, we can restart `wfrog` tasks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you take the files in the `/var/lib/wfrog` directory under control,
    you should see that they will be repopulated with the new data from the sensors.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Google Docs API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our weather station is now fully functional, but as stated at the beginning
    of this chapter, we want more—we want a weather station able to save its data
    over the network on a cloud system. And to do so, we have decided to use a Google
    Docs spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to obtain a worksheet with the current weather data and the historical
    ones saved in it where all the data are updated periodically. So, let's see how
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API to be used for this task is implemented by the `gspread` tool, which
    can be installed into our BeagleBone Black by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The home site of the project is at [https://github.com/burnash/gspread](https://github.com/burnash/gspread).
  prefs: []
  type: TYPE_NORMAL
- en: After the installation of all the preceding packages, we need to prepare a Google
    account. In this project, I used my own account, so I simply get access to my
    Google Docs page. Then, I create a new spreadsheet named `bbb_weather`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please refer to the Google Docs documentation at [https://support.google.com/docs](https://support.google.com/docs)
    for further information about the Google Doc usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once created, we have to publish the spreadsheet in such a way that we can
    get access to it from a remote computer. To do so, we must follow the instructions
    at [http://gspread.readthedocs.org/en/latest/oauth2.html](http://gspread.readthedocs.org/en/latest/oauth2.html),
    where the OAuth2 authorization system is explained. The following is a little
    list of the needed steps directly from that page:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Google Developers Console ([https://console.developers.google.com/project](https://console.developers.google.com/project))
    and create a new project (or select the one you have).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **API & auth** in the API, enable **Drive API**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Credentials** and click on **Create new Client ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Service account**. Clicking on **Create Client ID** will generate
    a new public-private key pair. You will automatically download a JSON file with
    the following data inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to Google Sheets and share your spreadsheet with an e-mail you have in your
    `json_key['client_email']`. Otherwise, you'll get a `SpreadsheetNotFound` exception
    when trying to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the next code examples, my Google credentials are stored in the `Project-9a372e9e20e6.json`
    file which, for security reasons, is not reported in the book's example code repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, to test if everything has been correctly set up, you can use the following
    command to create a void sheet in the newly-created spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the preceding file in the `chapter_04/wfrog/create_new.py` file
    in the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get no errors, you should find a new sheet named `BBB weather`, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Google Docs API](img/B00255_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that when executing the preceding command, you may get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, you may resolve installing the missing `python-httplib2` package
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you may get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the solution is to install the missing `python-crypto` package
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The code in the `create_new.py` file is quite simple, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: First of all, you should note that you must provide your own credentials to
    the `json.load()` function (that is, your `Project-xxxxxxxxxxxx.json` file obtained
    just now). Then, note that after opening the `bbb_weather` spreadsheet, we simply
    add a new worksheet called `sh.add_worksheet()` by using the `gc.open()` function.
    Then, we set up the cells content with the `wks.update_acell()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the reader may be curious regarding why the cell A7 holds the `LAST` string.
    Be patient, this will be explained soon!
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now we need a way to send the collected data to our new worksheet. As
    seen before, the `wfrog` program stores its data into two files: `wfrog-current.xml`,
    which holds the current values, and `wfrog.csv`, which holds the historical data.
    To do the job, we can use the code stored in the `chapter_04/send_data.py` file
    in the book''s example code repository. The following are some relevant snippets.
    The first part of this file is the same as the `create_new.py` command, so we
    can skip the beginning till the opening of the `bbb_weather` spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Once extracted, this data can be sent on the relative cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to save the historical data. This is where the `LAST` string
    comes to help us! First of all, we have to parse the `.csv` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we ask for the row number holding the `LAST` string inside our worksheet
    by using the `wks.find("LAST").row` method. Since the `LAST` string is in the
    row number 7 at the very beginning, we can find how many rows to skip in the `wfrog.csv`
    file in order to find the new data to be stored, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can extract the data and save them in the worksheet by using the `wks.insert_row(data,
    n)` function that stores them in the *nth* row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the code, we can execute the `send_data.py` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in the preceding file, you have to modify the following line according
    to your JSON filename!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The program correctly detects that no historical data was saved before, and
    it starts to save new data from the very beginning. My worksheet now looks like
    what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Google Docs API](img/B00255_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the `LAST` string points to the row 15, so if we wait for new data and
    rerun the command, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see in the following screenshot, our program has just saved the new
    data at the right position:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Google Docs API](img/B00255_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To automate these steps, we can use the `cron` daemon, scheduling the execution
    of the `send_data.py` program at the desired delays.
  prefs: []
  type: TYPE_NORMAL
- en: Final test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, the final test needs more time than other projects since we must
    collect several data to get suitable graphics. So, we execute the `wfrog` tasks
    as shown in the preceding screenshot. Then, we leave them running for two days
    or more. For my test, the results are shown in the following two screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_04_08.jpg)![Final test](img/B00255_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can verify that the preceding weather data has also been stored in
    the Google Docs spreadsheet by taking a look at our Google account. The following
    screenshot shows my test results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discovered how to install a ready-to-use weather station
    software into our BeagleBone Black by adapting it to our hardware sensors and
    by installing a new kernel release with proper drivers. Then, we took a look at
    how to store data in a Google Docs spreadsheet for future processing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll continue to interact with a remote system in order
    to manage a laundry monitoring system. We're going to use the WhatsApp system
    to know when our washing machine has finished its duty.
  prefs: []
  type: TYPE_NORMAL
