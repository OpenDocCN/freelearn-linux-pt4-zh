["```\nroot@kvm:~# ldd /usr/bin/virsh | grep libvirt\nlibvirt-lxc.so.0 => /usr/lib/x86_64-linux-gnu/libvirt-lxc.so.0 (0x00007fd050d88000)\nlibvirt-qemu.so.0 => /usr/lib/x86_64-linux-gnu/libvirt-qemu.so.0 (0x00007fd050b84000)\nlibvirt.so.0 => /usr/lib/x86_64-linux-gnu/libvirt.so.0 (0x00007fd050394000)\nroot@kvm:~#\n\n```", "```\nroot@kvm:~# apt-get install python-pip python-dev pkg-config build-essential autoconf libvirt-dev\nroot@kvm:~# pip install virtualenv\nDownloading/unpacking virtualenv\n Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB): 1.8MB downloaded\nInstalling collected packages: virtualenv\nSuccessfully installed virtualenv\nCleaning up...\nroot@kvm:~#\n\n```", "```\nroot@kvm:~# mkdir kvm_python\nroot@kvm:~# virtualenv kvm_python/\nNew python executable in /root/kvm_python/bin/python\nInstalling setuptools, pip, wheel...done.\nroot@kvm:~# source kvm_python/bin/activate\n(kvm_python) root@kvm:~# cd kvm_python/\n(kvm_python) root@kvm:~/kvm_python# ls -la\ntotal 28\ndrwxr-xr-x 6 root root 4096 May 9 17:28 .\ndrwx------ 8 root root 4096 May 9 17:28 ..\ndrwxr-xr-x 2 root root 4096 May 9 17:28 bin\ndrwxr-xr-x 2 root root 4096 May 9 17:28 include\ndrwxr-xr-x 3 root root 4096 May 9 17:28 lib\ndrwxr-xr-x 2 root root 4096 May 9 17:28 local\n-rw-r--r-- 1 root root 60 May 9 17:28 pip-selfcheck.json\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# pip install libvirt-python\nCollecting libvirt-python\n Using cached libvirt-python-3.3.0.tar.gz\nBuilding wheels for collected packages: libvirt-python\n Running setup.py bdist_wheel for libvirt-python ... done\n Stored in directory: /root/.cache/pip/wheels/67/f0/5c/c939bf8fcce5387a36efca53eab34ba8e94a28f244fd1757c1\nSuccessfully built libvirt-python\nInstalling collected packages: libvirt-python\nSuccessfully installed libvirt-python-3.3.0\n(kvm_python) root@kvm:~/kvm_python# pip freeze\nappdirs==1.4.3\nlibvirt-python==3.3.0\npackaging==16.8\npyparsing==2.2.0\nsix==1.10.0\n(kvm_python) root@kvm:~/kvm_python# python --version\nPython 2.7.6\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# apt-get install ipython\n...\n(kvm_python) root@kvm:~/kvm_python# ipython\nPython 2.7.6 (default, Oct 26 2016, 20:30:19)\nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 1.2.1 -- An enhanced Interactive Python.\n? -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp -> Python's own help system.\nobject? -> Details about 'object', use 'object??' for extra details.\n\nIn [1]:\n\n```", "```\nIn [1]: import libvirt\n\nIn [2]:\n\n```", "```\nIn [2]: xmlconfig = \"\"\"\n<domain type='kvm' id='1'>\n <name>kvm_python</name>\n <memory unit='KiB'>1048576</memory>\n <currentMemory unit='KiB'>1048576</currentMemory>\n <vcpu placement='static'>1</vcpu>\n <resource>\n   <partition>/machine</partition>\n </resource>\n <os>\n   <type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type>\n   <boot dev='hd'/>\n </os>\n <features>\n   <acpi/>\n   <apic/>\n   <pae/>\n </features>\n <clock offset='utc'/>\n <on_poweroff>destroy</on_poweroff>\n <on_reboot>restart</on_reboot>\n <on_crash>restart</on_crash>\n <devices>\n   <emulator>/usr/bin/qemu-system-x86_64</emulator>\n   <disk type='file' device='disk'>\n     <driver name='qemu' type='raw'/>\n     <source file='/tmp/debian.img'/>\n     <backingStore/>\n     <target dev='hda' bus='ide'/>\n     <alias name='ide0-0-0'/>\n     <address type='drive' controller='0' bus='0' target='0' unit='0'/>\n   </disk>\n   <controller type='usb' index='0'>\n     <alias name='usb'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>\n   </controller>\n   <controller type='pci' index='0' model='pci-root'>\n     <alias name='pci.0'/>\n   </controller>\n   <controller type='ide' index='0'>\n     <alias name='ide'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>\n   </controller>\n   <interface type='network'>\n     <mac address='52:54:00:da:02:01'/>\n     <source network='default' bridge='virbr0'/>\n     <target dev='vnet0'/>\n     <model type='rtl8139'/>\n     <alias name='net0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>\n   </interface>\n   <serial type='pty'>\n     <source path='/dev/pts/5'/>\n     <target port='0'/>\n     <alias name='serial0'/>\n   </serial>\n   <console type='pty' tty='/dev/pts/5'>\n     <source path='/dev/pts/5'/>\n     <target type='serial' port='0'/>\n     <alias name='serial0'/>\n   </console>\n   <input type='mouse' bus='ps2'/>\n   <input type='keyboard' bus='ps2'/>\n   <graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'>\n     <listen type='address' address='0.0.0.0'/>\n   </graphics>\n   <video>\n     <model type='cirrus' vram='16384' heads='1'/>\n     <alias name='video0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>\n   </video>\n   <memballoon model='virtio'>\n     <alias name='balloon0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>\n   </memballoon>\n </devices>\n</domain>\n\"\"\"\n\nIn [3]:\n\n```", "```\nIn [3]: conn = libvirt.open('qemu:///system')\n\nIn [4]:\n\n```", "```\nIn [4]: instance = conn.defineXML(xmlconfig)\n\nIn [5]:\n\n```", "```\nIn [5]: instances = conn.listDefinedDomains()\n\nIn [6]: print 'Defined instances: {}'.format(instances)\nDefined instances: ['kvm_python']\n\nIn [7]:\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id  Name        State\n----------------------------------------------------\n -   kvm_python  shut off\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\nIn [7]: type(instance)\nOut[7]: libvirt.virDomain\n\nIn [8]:\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# cat kvm.py\nimport libvirt\n\nxmlconfig = \"\"\"\n<domain type='kvm' id='1'>\n <name>kvm_python</name>\n <memory unit='KiB'>1048576</memory>\n <currentMemory unit='KiB'>1048576</currentMemory>\n <vcpu placement='static'>1</vcpu>\n <resource>\n   <partition>/machine</partition>\n </resource>\n <os>\n   <type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type>\n   <boot dev='hd'/>\n </os>\n <features>\n   <acpi/>\n   <apic/>\n   <pae/>\n </features>\n <clock offset='utc'/>\n <on_poweroff>destroy</on_poweroff>\n <on_reboot>restart</on_reboot>\n <on_crash>restart</on_crash>\n <devices>\n   <emulator>/usr/bin/qemu-system-x86_64</emulator>\n   <disk type='file' device='disk'>\n     <driver name='qemu' type='raw'/>\n     <source file='/tmp/debian.img'/>\n     <backingStore/>\n     <target dev='hda' bus='ide'/>\n     <alias name='ide0-0-0'/>\n     <address type='drive' controller='0' bus='0' target='0' unit='0'/>\n   </disk>\n   <controller type='usb' index='0'>\n     <alias name='usb'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>\n   </controller>\n   <controller type='pci' index='0' model='pci-root'>\n     <alias name='pci.0'/>\n   </controller>\n   <controller type='ide' index='0'>\n     <alias name='ide'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>\n   </controller>\n   <interface type='network'>\n     <mac address='52:54:00:da:02:01'/>\n     <source network='default' bridge='virbr0'/>\n     <target dev='vnet0'/>\n     <model type='rtl8139'/>\n     <alias name='net0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>\n   </interface>\n   <serial type='pty'>\n     <source path='/dev/pts/5'/>\n     <target port='0'/>\n     <alias name='serial0'/>\n   </serial>\n   <console type='pty' tty='/dev/pts/5'>\n     <source path='/dev/pts/5'/>\n     <target type='serial' port='0'/>\n     <alias name='serial0'/>\n   </console>\n   <input type='mouse' bus='ps2'/>\n   <input type='keyboard' bus='ps2'/>\n   <graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'>\n     <listen type='address' address='0.0.0.0'/>\n   </graphics>\n   <video>\n     <model type='cirrus' vram='16384' heads='1'/>\n     <alias name='video0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>\n   </video>\n   <memballoon model='virtio'>\n     <alias name='balloon0'/>\n     <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>\n   </memballoon>\n </devices>\n</domain>\n\"\"\"\n\nconn = libvirt.open('qemu:///system')\nif conn == None:\n  print 'Failed to connecto to the hypervizor'\n  exit(1)\n\ninstance = conn.defineXML(xmlconfig)\nif instance == None:\n  print 'Failed to define the instance'\n  exit(1)\n\ninstances = conn.listDefinedDomains()\nprint 'Defined instances: {}'.format(instances)\n\nconn.close()\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# python kvm.py\nDefined instances: ['kvm_python']\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\nIn [1]: instance.create?\nType: instancemethod\nString Form:<bound method virDomain.create of <libvirt.virDomain object at 0x7fc5d9b97d90>>\nFile: /root/kvm_python/lib/python2.7/site-packages/libvirt.py\nDefinition: instance.create(self)\nDocstring:\nLaunch a defined domain. If the call succeeds the domain moves from the\ndefined to the running domains pools. The domain will be paused only\nif restoring from managed state created from a paused domain. For more\ncontrol, see virDomainCreateWithFlags().\n\nIn [2]:\n\n```", "```\nIn [1]: instance.create()\nOut[1]: 0\n\nIn [2]:\n\n```", "```\nIn [2]: instance.isActive()\nOut[2]: 1\n\nIn [3]:\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id   Name        State\n----------------------------------------------------\n 5    kvm_python  running\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\nIn [3]: instance.destroy()\nOut[3]: 0\n\nIn [4]:\n\n```", "```\nIn [4]: instance.isActive()\nOut[4]: 0\n\nIn [5]:\n\n```", "```\nIn [5]: instance.undefine()\nOut[5]: 0\n\nIn [6]: conn.listDefinedDomains()\nOut[6]: []\n\nIn [7]:\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# cat kvm.py\nimport libvirt\nimport time\n\nxmlconfig = \"\"\"\n<domain type='kvm' id='1'>\n <name>kvm_python</name>\n <memory unit='KiB'>1048576</memory>\n <currentMemory unit='KiB'>1048576</currentMemory>\n <vcpu placement='static'>1</vcpu>\n <resource>\n <partition>/machine</partition>\n </resource>\n <os>\n <type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type>\n <boot dev='hd'/>\n </os>\n <features>\n <acpi/>\n <apic/>\n <pae/>\n </features>\n <clock offset='utc'/>\n <on_poweroff>destroy</on_poweroff>\n <on_reboot>restart</on_reboot>\n <on_crash>restart</on_crash>\n <devices>\n <emulator>/usr/bin/qemu-system-x86_64</emulator>\n <disk type='file' device='disk'>\n <driver name='qemu' type='raw'/>\n <source file='/tmp/debian.img'/>\n<backingStore/>\n <target dev='hda' bus='ide'/>\n <alias name='ide0-0-0'/>\n <address type='drive' controller='0' bus='0' target='0' unit='0'/>\n </disk>\n <controller type='usb' index='0'>\n <alias name='usb'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>\n </controller>\n <controller type='pci' index='0' model='pci-root'>\n <alias name='pci.0'/>\n </controller>\n <controller type='ide' index='0'>\n <alias name='ide'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>\n </controller>\n <interface type='network'>\n <mac address='52:54:00:da:02:01'/>\n <source network='default' bridge='virbr0'/>\n <target dev='vnet0'/>\n <model type='rtl8139'/>\n <alias name='net0'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>\n </interface>\n <serial type='pty'>\n <source path='/dev/pts/5'/>\n <target port='0'/>\n <alias name='serial0'/>\n </serial>\n <console type='pty' tty='/dev/pts/5'>\n <source path='/dev/pts/5'/>\n <target type='serial' port='0'/>\n <alias name='serial0'/>\n </console>\n <input type='mouse' bus='ps2'/>\n <input type='keyboard' bus='ps2'/>\n <graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'>\n <listen type='address' address='0.0.0.0'/>\n </graphics>\n <video>\n <model type='cirrus' vram='16384' heads='1'/>\n <alias name='video0'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>\n </video>\n <memballoon model='virtio'>\n <alias name='balloon0'/>\n<address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>\n </memballoon>\n </devices>\n</domain>\n\"\"\"\n\nconn = libvirt.open('qemu:///system')\nif conn == None:\n print 'Failed to connecto to the hypervizor'\n exit(1)\n\ninstance = conn.defineXML(xmlconfig)\nif instance == None:\n print 'Failed to define the instance'\n exit(1)\n\ninstances = conn.listDefinedDomains()\nprint 'Defined instances: {}'.format(instances)\n\ntime.sleep(5)\n\nif instance.create() < 0:\n print 'Failed to start the {} instance'.format(instance.name())\nexit(1)\n\nif instance.isActive():\n print 'The instance {} is running'.format(instance.name())\nelse:\n print 'The instance {} is not running'.format(instance.name())\n\ntime.sleep(5)\n\nif instance.destroy() < 0:\n print 'Failed to stop the {} instance'.format(instance.name())\n exit(1)\nelse:\n print 'The instance {} has been destroyed'.format(instance.name())\n\nif instance.undefine() < 0:\n print 'Failed to remove the {} instance'.format(instance.name())\n exit(1)\nelse:\n print 'The instance {} has been undefined'.format(instance.name())\n\nconn.close() \n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# python kvm.py\nDefined instances: ['kvm1', 'kvm_python']\nThe instance kvm_python is running\nThe instance kvm_python has been destroyed\nThe instance kvm_python has been undefined\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\nIn [1]: instance.name()\nOut[1]: 'kvm_python'\n\nIn [2]:\n\n```", "```\nIn [2]: instance.isActive()\nOut[2]: 1\n\nIn [3]:\n\n```", "```\nIn [3]: instance.info()\nOut[3]: [1, 1048576L, 1048576L, 1, 10910000000L]\n\nIn [4]:\n\n```", "```\nIn [4]: instance.maxMemory()\nOut[4]: 1048576L\n\nIn [5]:\n\n```", "```\nIn [5]: instance.getCPUStats(1)\nOut[5]:\n[{'cpu_time': 10911545901L,\n 'system_time': 1760000000L,\n 'user_time': 1560000000L}]\n\nIn [6]:\n\n```", "```\nIn [6]: instance.OSType()\nOut[6]: 'hvm'\n\nIn [7]:\n\n```", "```\nIn [82]: state, reason = instance.state()\n\nIn [83]: if state == libvirt.VIR_DOMAIN_NOSTATE:\n ....:           print('The state is nostate')\n ....: elif state == libvirt.VIR_DOMAIN_RUNNING:\n ....:           print('The state is running')\n ....: elif state == libvirt.VIR_DOMAIN_BLOCKED:\n ....:           print('The state is blocked')\n ....: elif state == libvirt.VIR_DOMAIN_PAUSED:\n ....:           print('The state is paused')\n ....: elif state == libvirt.VIR_DOMAIN_SHUTDOWN:\n ....:           print('The state is shutdown')\n ....: elif state == libvirt.VIR_DOMAIN_SHUTOFF:\n ....:           print('The state is shutoff')\n ....: elif state == libvirt.VIR_DOMAIN_CRASHED:\n ....:           print('The state is crashed')\n ....: elif state == libvirt.VIR_DOMAIN_PMSUSPENDED:\n ....:           print('The state is suspended')\n ....: else:\n ....:           print('The state is unknown')\n ....:\nThe state is running\n\nIn [84]:\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# cat kvm.py\nimport libvirt\nimport time\n\ndef main():\n\n xmlconfig = \"\"\"\n <domain type='kvm' id='1'>\n <name>kvm_python</name>\n <memory unit='KiB'>1048576</memory>\n <currentMemory unit='KiB'>1048576</currentMemory>\n <vcpu placement='static'>1</vcpu>\n <resource>\n <partition>/machine</partition>\n </resource>\n <os>\n <type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type>\n <boot dev='hd'/>\n </os>\n <features>\n<acpi/>\n <apic/>\n <pae/>\n </features>\n <clock offset='utc'/>\n <on_poweroff>destroy</on_poweroff>\n <on_reboot>restart</on_reboot>\n <on_crash>restart</on_crash>\n <devices>\n <emulator>/usr/bin/qemu-system-x86_64</emulator>\n <disk type='file' device='disk'>\n <driver name='qemu' type='raw'/>\n <source file='/tmp/debian.img'/>\n <backingStore/>\n <target dev='hda' bus='ide'/>\n <alias name='ide0-0-0'/>\n <address type='drive' controller='0' bus='0' target='0' unit='0'/>\n </disk>\n <controller type='usb' index='0'>\n <alias name='usb'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>\n </controller>\n <controller type='pci' index='0' model='pci-root'>\n <alias name='pci.0'/>\n </controller>\n <controller type='ide' index='0'>\n <alias name='ide'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>\n </controller>\n <interface type='network'>\n <mac address='52:54:00:da:02:01'/>\n <source network='default' bridge='virbr0'/>\n <target dev='vnet0'/>\n <model type='rtl8139'/>\n <alias name='net0'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>\n </interface>\n <serial type='pty'>\n <source path='/dev/pts/5'/>\n <target port='0'/>\n <alias name='serial0'/>\n </serial>\n <console type='pty' tty='/dev/pts/5'>\n <source path='/dev/pts/5'/>\n <target type='serial' port='0'/>\n <alias name='serial0'/>\n </console>\n <input type='mouse' bus='ps2'/>\n <input type='keyboard' bus='ps2'/>\n <graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'>\n <listen type='address' address='0.0.0.0'/>\n </graphics>\n <video>\n <model type='cirrus' vram='16384' heads='1'/>\n <alias name='video0'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>\n </video>\n <memballoon model='virtio'>\n <alias name='balloon0'/>\n <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>\n </memballoon>\n </devices>\n </domain>\n \"\"\"\n\n conn = libvirt.open('qemu:///system')\n if conn == None:\n print 'Failed to connecto to the hypervizor'\nexit(1)\n\n instance = conn.defineXML(xmlconfig)\n if instance == None:\n print 'Failed to define the instance'\n exit(1)\n\n instances = conn.listDefinedDomains()\n print 'Defined instances: {}'.format(instances)\n\n time.sleep(5)\n\n if instance.create() < 0:\n print 'Failed to start the {} instance'.format(instance.name())\n exit(1)\n\n if instance.isActive():\n print 'The instance {} is running'.format(instance.name())\n else:\n print 'The instance {} is not running'.format(instance.name())\n\n print 'The instance state, max memory, current memory, CPUs and time is {}'.format(instance.info())\n\n print 'The CPU, system and user times are {}'.format(instance.getCPUStats(1))\n\nprint 'The OS type for the {} instance is {}'.format(instance.name(), instance.OSType())\n\n time.sleep(5)\n\n if instance.destroy() < 0:\n print 'Failed to stop the {} instance'.format(instance.name())\n exit(1)\n else:\n print 'The instance {} has been destroyed'.format(instance.name())\n\n if instance.undefine() < 0:\n print 'Failed to remove the {} instance'.format(instance.name())\n exit(1)\n else:\n print 'The instance {} has been undefined'.format(instance.name())\n\n conn.close()\n\nif __name__ == \"__main__\":\n main()\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# python kvm.py\nDefined instances: ['kvm_python']\nThe instance kvm_python is running\nThe instance state, max memory, current memory, CPUs and time is [1, 1048576L, 1048576L, 1, 40000000L]\nThe CPU, system and user times are [{'cpu_time': 42349077L, 'system_time': 0L, 'user_time': 30000000L}]\nThe OS type for the kvm_python instance is hvm\nThe instance kvm_python has been destroyed\nThe instance kvm_python has been undefined\n(kvm_python) root@kvm:~/kvm_python# \n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# pip install bottle\nCollecting bottle\n...\n Downloading bottle-0.12.13.tar.gz (70kB)\n 100% |████████████████████████████████| 71kB 4.5MB/s\n...\nSuccessfully installed bottle-0.12.13\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# vim kvm_api.py\nimport libvirt\nfrom bottle import run, request, get, post, HTTPResponse\n\ndef libvirtConnect():\n try:\n conn = libvirt.open('qemu:///system')\n except libvirt.libvirtError:\n conn = None\n\n return conn\n\n```", "```\ndef defineKVMInstance(template):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error defining instance\\n')\n  else:\n    try:\n      conn.defineXML(template)\n      return HTTPResponse(status=200, body='Instance defined\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error defining instance\\n')\n\n@post('/define')\ndef build():\n  template = str(request.headers.get('X-KVM-Definition'))\n  status = defineKVMInstance(template)\n\n  return status\n\n```", "```\ndef undefineKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error undefining instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.undefine()\n      return HTTPResponse(status=200, body='Instance undefined\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error undefining instance\\n')\n\n@post('/undefine')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = undefineKVMInstance(name)\n\n  return status\n\n```", "```\ndef startKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error starting instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.create()\n      return HTTPResponse(status=200, body='Instance started\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error starting instance\\n')\n\n@post('/start')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = startKVMInstance(name)\n\n  return status\n\n```", "```\ndef stopKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error stopping instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.destroy()\n      return HTTPResponse(status=200, body='Instance stopped\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error stopping instance\\n')\n\n@post('/stop')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = stopKVMInstance(name)\n\n  return status\n\n```", "```\ndef getLibvirtInstances():\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error listing instances\\n')\n  else:\n    try:\n      instances = conn.listDefinedDomains()\n      return instances\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error listing instances\\n')\n\n@get('/list')\ndef list():\n  kvm_list = getLibvirtInstances()\n\n  return \"List of KVM instances: {}\\n\".format(kvm_list)\n\n```", "```\nrun(host='localhost', port=8080, debug=True)\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# python kvm_api.py\nBottle v0.12.13 server starting up (using WSGIRefServer())...\nListening on http://localhost:8080/\nHit Ctrl-C to quit.\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# curl -s -i -XPOST localhost:8080/define --header \"X-KVM-Definition: <domain type='kvm'><name>kvm_api</name><memory unit='KiB'>1048576</memory><vcpu >1</vcpu><os><type arch='x86_64' machine='pc-i440fx-trusty'>hvm</type></os><devices><emulator>/usr/bin/qemu-system-x86_64</emulator><disk type='file' device='disk'><driver name='qemu' type='raw'/><source file='/tmp/debian.img'/><target dev='hda' bus='ide'/></disk><interface type='network'><mac address='52:54:00:da:02:01'/><source network='default' bridge='virbr0'/><target dev='vnet0'/></interface><graphics type='vnc' port='5900' autoport='yes' listen='0.0.0.0'><listen type='address' address='0.0.0.0'/></graphics></devices></domain>\"\nHTTP/1.0 200 OK\nDate: Fri, 12 May 2017 20:29:14 GMT\nServer: WSGIServer/0.1 Python/2.7.6\nContent-Length: 17\nContent-Type: text/html; charset=UTF-8\n\nInstance defined\n(kvm_python) root@kvm:~/kvm_python# \n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# curl localhost:8080/list\nList of KVM instances: ['kvm_api']\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id   Name     State\n----------------------------------------------------\n -   kvm_api   shut off\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# curl -s -i -XPOST localhost:8080/start --header \"X-KVM-Name: kvm_api\"\nHTTP/1.0 200 OK\nDate: Fri, 12 May 2017 20:29:38 GMT\nServer: WSGIServer/0.1 Python/2.7.6\nContent-Length: 17\nContent-Type: text/html; charset=UTF-8\n\nInstance started\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id   Name      State\n----------------------------------------------------\n 1    kvm_api   running\n\n(kvm_python) root@kvm:~/kvm_python# \n\n```", "```\n(kvm_python) root@kvm:~/kvm_python# curl -s -i -XPOST localhost:8080/stop --header \"X-KVM-Name: kvm_api\"\nHTTP/1.0 200 OK\nDate: Fri, 12 May 2017 20:29:52 GMT\nServer: WSGIServer/0.1 Python/2.7.6\nContent-Length: 17\nContent-Type: text/html; charset=UTF-8\n\nInstance stopped\n(kvm_python) root@kvm:~/kvm_python#\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id   Name      State\n----------------------------------------------------\n -    kvm_api   shut off\n\n(kvm_python) root@kvm:~/kvm_python#\n(kvm_python) root@kvm:~/kvm_python# curl -s -i -XPOST localhost:8080/undefine --header \"X-KVM-Name: kvm_api\"\nHTTP/1.0 200 OK\nDate: Fri, 12 May 2017 20:30:09 GMT\nServer: WSGIServer/0.1 Python/2.7.6\nContent-Length: 19\nContent-Type: text/html; charset=UTF-8\n\nInstance undefined\n(kvm_python) root@kvm:~/kvm_python#\n(kvm_python) root@kvm:~/kvm_python# virsh list --all\n Id Name State\n----------------------------------------------------\n\n(kvm_python) root@kvm:~/kvm_python#\n\n```", "```\nimport libvirt\nfrom bottle import run, request, get, post, HTTPResponse\n\ndef libvirtConnect():\n  try:\n    conn = libvirt.open('qemu:///system')\n  except libvirt.libvirtError:\n    conn = None\n\n  return conn\n\ndef getLibvirtInstances():\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error listing instances\\n')\n  else:\n    try:\n      instances = conn.listDefinedDomains()\n      return instances\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error listing instances\\n')\n\ndef defineKVMInstance(template):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error defining instance\\n')\n  else:\n    try:\n      conn.defineXML(template)\n      return HTTPResponse(status=200, body='Instance defined\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error defining instance\\n')\n\ndef undefineKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error undefining instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.undefine()\n      return HTTPResponse(status=200, body='Instance undefined\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error undefining instance\\n')\n\ndef startKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error starting instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.create()\n      return HTTPResponse(status=200, body='Instance started\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error starting instance\\n')\n\ndef stopKVMInstance(name):\n  conn = libvirtConnect()\n\n  if conn == None:\n    return HTTPResponse(status=500, body='Error stopping instance\\n')\n  else:\n    try:\n      instance = conn.lookupByName(name)\n      instance.destroy()\n      return HTTPResponse(status=200, body='Instance stopped\\n')\n    except libvirt.libvirtError:\n      return HTTPResponse(status=500, body='Error stopping instance\\n')\n\n@post('/define')\ndef build():\n  template = str(request.headers.get('X-KVM-Definition'))\n  status = defineKVMInstance(template)\n\n  return status\n\n@post('/undefine')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = undefineKVMInstance(name)\n\n  return status\n\n@get('/list')\ndef list():\n  kvm_list = getLibvirtInstances()\n\n  return \"List of KVM instances: {}\\n\".format(kvm_list)\n\n@post('/start')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = startKVMInstance(name)\n\n  return status\n\n@post('/stop')\ndef build():\n  name = str(request.headers.get('X-KVM-Name'))\n  status = stopKVMInstance(name)\n\n  return status\n\nrun(host='localhost', port=8080, debug=True)\n\n```"]