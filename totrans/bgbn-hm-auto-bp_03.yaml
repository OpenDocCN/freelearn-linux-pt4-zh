- en: Chapter 3. Aquarium Monitor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 水族箱监控器
- en: In this chapter, we'll see how to realize an aquarium monitor where we'll be
    able to record all the environment data and then control the life of our loved
    fish from a web panel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何实现一个水族箱监控器，通过这个监控器，我们能够记录所有的环境数据，然后通过网页面板控制我们亲爱的鱼的生活。
- en: By using specific sensors, you'll learn how to monitor your aquarium with the
    possibility to set alarms, log the aquarium data (water temperature), and to perform
    actions such as cooling the water and feeding the fish.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用特定的传感器，你将学会如何监控你的水族箱，设置警报，记录水族箱数据（如水温），并执行一些操作，如冷却水和喂鱼。
- en: Simply speaking, we're going to implement a simple aquarium web monitor with
    a real-time live video, some alarms in case of malfunctioning, and a simple temperature
    data logging that allows us to monitor the system from a standard PC as well as
    from a smartphone or tablet, without using any specifying mobile app, but just
    using the on-board standard browser only.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们将实现一个简单的水族箱网页监控器，包含实时视频直播、故障时的警报，并简单的温度数据记录，使我们能够从标准PC以及智能手机或平板电脑上监控系统，无需使用专门的移动应用程序，只需使用板载的标准浏览器。
- en: The basics of functioning
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能基础
- en: This aquarium monitor is a good (even if very simple) example about how a web
    monitoring system should be implemented, giving to the reader some basic ideas
    about how a mid-complex system works and how we can interact with it in order
    to modify some system settings, displaying some alarms in case of malfunctioning,
    and plotting a data logging on a PC, smartphone, or tablet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个水族箱监控器是一个很好的（尽管非常简单）示例，展示了一个网页监控系统应如何实现，给读者一些关于一个中等复杂系统如何工作的基本想法，以及我们如何与它互动，以修改一些系统设置，显示故障时的警报，并在PC、智能手机或平板上绘制数据记录。
- en: 'Despite these aspects, the basic functioning of this project is similar to
    what we''ve already done in previous chapters: we have a periodic task that collects
    the data and then decides what to do. However, this time, we have a user interface
    (the web panel) to manage, and a video streaming to be redirected into a web page.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些方面的问题，这个项目的基本功能和我们之前章节中做的类似：我们有一个定时任务来收集数据并决定要做什么。然而，这次我们有一个用户界面（网页面板）来管理，还有一个视频流需要重定向到网页中。
- en: Note also that in this project, we need an additional power supply in order
    to power and manage 12V devices (such as a water pump, a lamp, and a cooler) with
    the BeagleBone Black, which is powered at 5V instead.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，在这个项目中，我们需要一个额外的电源来为12V设备（如水泵、灯和冷却器）供电并管理它们，而BeagleBone Black本身是5V供电的。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that I'm not going to test this prototype on a real aquarium (since I don't
    have one), but by using a normal tea cup filled with water! So you should consider
    this project for educational purpose only, even if, with some enhancements, it
    could be used on a real aquarium too!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我不会在一个真实的水族箱上测试这个原型（因为我没有水族箱），而是使用一个普通的茶杯来装水！所以，你应该仅将这个项目视为教育用途，尽管经过一些改进后，它也可以用于真实的水族箱！
- en: Setting up the hardware
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置硬件
- en: 'About the hardware, there are at least two major issues to be pointed out:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于硬件，至少有两个主要问题需要指出：
- en: '**Power supply**: We have two different voltages to use due to the fact the
    water pump, the lamp, and the cooler are 12V powered, while the other devices
    are 5V/3.3V powered. So, we have to use a dual output power source (or two different
    power sources) to power up our prototype.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电源**：由于水泵、灯和冷却器是12V供电，而其他设备是5V/3.3V供电，所以我们需要使用两种不同的电压。因此，我们必须使用一个双输出电源（或两个不同的电源）来为我们的原型供电。'
- en: '**Interface**: The second issue is about using a proper interface circuitry
    between the 12V world and the 5V one in such a way that it doesn''t damage the
    BeagleBone Black or other devices. Let me point out that a single GPIO of the
    BeagleBone Black can manage a voltage of 3.3V, so we need a proper circuitry to
    manage a 12V device.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**：第二个问题是关于在12V世界和5V世界之间使用适当的接口电路，以确保不会损坏BeagleBone Black或其他设备。我要指出的是，BeagleBone
    Black的每个GPIO引脚只能管理3.3V电压，因此我们需要一个合适的电路来管理12V设备。'
- en: Setting up the 12V devices
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置12V设备
- en: As just stated, these devices need special attention and a dedicated 12V power
    line which, of course, cannot be the one we wish to use to supply the BeagleBone
    Black. On my prototype, I used a 12V power supplier that can supply a current
    till 1A. These characteristics should be enough to manage a single water pump,
    a lamp, and a cooler.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这些设备需要特别的关注，并且需要一条专用的 12V 电源线，这条线当然不能是我们用来为 BeagleBone Black 供电的那条线。在我的原型中，我使用了一款最大输出
    1A 的 12V 电源。这些特性足以驱动单个水泵、灯泡和风扇。
- en: 'After you get a proper power supplier, we can pass to show the circuitry to
    use to manage the 12V devices. Since all of them are simple on/off devices, we
    can use a relay to control them. I used the device shown in the following image
    where we have 8 relays:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 获取适当的电源后，我们可以展示如何使用电路来控制 12V 设备。由于这些设备都是简单的开/关设备，我们可以使用继电器来控制它们。我使用了以下图片中的设备，其中包含
    8 个继电器：
- en: '![Setting up the 12V devices](img/B00255_03_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![设置 12V 设备](img/B00255_03_01.jpg)'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The devices can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/5v-relays-array](http://www.cosino.io/product/5v-relays-array)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备可以在以下链接处购买（或通过浏览互联网找到）：[http://www.cosino.io/product/5v-relays-array](http://www.cosino.io/product/5v-relays-array)
- en: 'Then, the schematic to connect a single 12V device is shown in the following
    diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，连接单个 12V 设备的电路图如下所示：
- en: '![Setting up the 12V devices](img/B00255_03_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![设置 12V 设备](img/B00255_03_02.jpg)'
- en: Simply speaking, for each device, we can turn the power supply on and off simply
    by moving a specific GPIO of our BeagleBone Black. Note that each relays of the
    array board can be managed in direct or inverse logic by simply choosing the right
    connections accordingly as reported on the board itself, that is, we can decide
    that, by putting the GPIO into a logic `0` state, we can activate the relay, and
    then, turning on the attached device, while putting the GPIO into a logic `1`
    state, we can deactivate the relay, and then turn off the attached device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，对于每个设备，我们可以通过移动 BeagleBone Black 的特定 GPIO 来简单地打开和关闭电源。注意，每个继电器阵列板的继电器可以通过选择合适的连接来实现正逻辑或反逻辑控制，具体情况可以参考板上的标识。也就是说，我们可以决定，将
    GPIO 设置为逻辑 `0` 状态时，激活继电器，从而打开连接的设备；而将 GPIO 设置为逻辑 `1` 状态时，关闭继电器，从而关闭连接的设备。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By using the following logic, when the LED of a relay is turned on, the corresponding
    device is powered on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下逻辑时，当继电器的 LED 灯亮起时，对应的设备将被通电。
- en: 'The BeagleBone Black''s GPIOs and the pins of the relays array I used with
    12V devices are reported in the following table:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone Black 的 GPIO 和我与 12V 设备一起使用的继电器阵列的引脚如下表所示：
- en: '| Pin | Relays Array pin | 12V Device |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 继电器阵列引脚 | 12V 设备 |'
- en: '| --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| P8.10 - GPIO66 | 3 | Lamp |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| P8.10 - GPIO66 | 3 | 灯泡 |'
- en: '| P8.9 - GPIO69 | 2 | Cooler |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| P8.9 - GPIO69 | 2 | 风扇 |'
- en: '| P8.12 - GPIO68 | 1 | Pump |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| P8.12 - GPIO68 | 1 | 水泵 |'
- en: '| P9.1 - GND | GND |   |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| P9.1 - GND | GND |   |'
- en: '| P9.5 - 5V | Vcc |   |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| P9.5 - 5V | Vcc |   |'
- en: 'To test the functionality of each GPIO line, we can use the following command
    to set up the GPIO as an output line at high state:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试每个 GPIO 引脚的功能，我们可以使用以下命令将 GPIO 设置为高电平输出引脚：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the *off* state of the relay is `1`, while the *on* state is `0`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，继电器的 *关* 状态是 `1`，而 *开* 状态是 `0`。
- en: 'Then, we can turn the relay on and off by just writing `0` and `1` into `/sys/class/gpio/gpio68/value`
    file, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需向 `/sys/class/gpio/gpio68/value` 文件写入 `0` 和 `1` 来控制继电器的开关，如下所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Setting up the webcam
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置网络摄像头
- en: The webcam I'm using in my prototype is a normal UVC-based webcam, but you can
    safely use another one that is supported by the **mjpg-streamer** tool.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我在原型中使用的网络摄像头是普通的基于 UVC 的摄像头，但你可以安全地使用其他受 **mjpg-streamer** 工具支持的摄像头。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See the mjpg-streamer project's home site for further information at [http://sourceforge.net/projects/mjpg-streamer/](http://sourceforge.net/projects/mjpg-streamer/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 mjpg-streamer 项目的主页以获取更多信息：[http://sourceforge.net/projects/mjpg-streamer/](http://sourceforge.net/projects/mjpg-streamer/)。
- en: 'Once connected to the BeagleBone Black USB host port, I get the following kernel
    activities:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接到 BeagleBone Black USB 主机端口，我得到了以下内核活动：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, a new driver called `uvcvideo` is loaded into the kernel:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个名为 `uvcvideo` 的新驱动已加载到内核中：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Okay, now, to have a streaming server, we need to download the mjpg-streamer
    source code and compile it. We can do everything within the BeagleBone Black itself
    with the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在，为了建立一个流媒体服务器，我们需要下载 mjpg-streamer 源代码并编译它。我们可以在 BeagleBone Black 上直接执行以下命令来完成：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `svn` command is part of the `subversion` package and can be installed
    by using the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`svn`命令是`subversion`包的一部分，可以通过以下命令安装：'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the download is finished, we can compile and install the code by using
    the following command line:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，我们可以通过以下命令行编译并安装代码：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find a compressed archive copy of this program in the `chapter_03/mjpg-streamer-code.tgz`
    file in the book's example code repository.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在书籍示例代码仓库中的`chapter_03/mjpg-streamer-code.tgz`文件里找到该程序的压缩档案副本。
- en: 'If no errors are reported, you should now be able to execute the new command
    as follows, where we ask for the help message:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误报告，你现在应该能够按照如下执行新的命令，在这里我们请求帮助信息：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you get an error like the following it means that your system misses the
    `convert` tool:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到以下错误，这意味着你的系统缺少`convert`工具：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can install it by using the usual `aptitude` command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用常见的`aptitude`命令来安装它：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Okay, now we are ready to test the webcam. Just run the following command line
    and then point a web browser to the address `http://192.168.32.46:8080/?action=stream`
    (where you should replace my IP address `192.168.32.46` with your BeagleBone Black''s
    one) in order to get the live video from your webcam:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们准备测试网络摄像头。只需运行以下命令行，然后在网页浏览器中输入地址`http://192.168.32.46:8080/?action=stream`（在这里你需要将我的IP地址`192.168.32.46`替换为你BeagleBone
    Black的IP地址），即可获取来自摄像头的实时视频：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that you can use the USB Ethernet address `192.168.7.2` too if you're not
    using the BeagleBone Black's Ethernet port.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你没有使用BeagleBone Black的以太网端口，你也可以使用USB以太网地址`192.168.7.2`。
- en: 'If everything works well, you should get something similar to what is shown
    in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，你应该看到类似以下截图的内容：
- en: '![Setting up the webcam](img/B00255_03_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![设置网络摄像头](img/B00255_03_03.jpg)'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you get an error, as follows it means that some other process is holding
    the `8080` port, and most probably it''s occupied by the `Bone101` service:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到以下错误，这意味着另一个进程占用了`8080`端口，很可能是被`Bone101`服务占用：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To disable it, you can use the following commands:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用它，可以使用以下命令：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or, you can simply use another port, maybe port `8090`, with the following
    command line:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以简单地使用另一个端口，也许是`8090`端口，使用以下命令行：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Connecting the temperature sensor
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接温度传感器
- en: 'The temperature sensor used in my prototype is the one shown in the following
    image:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我在原型中使用的温度传感器如下图所示：
- en: '![Connecting the temperature sensor](img/B00255_03_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![连接温度传感器](img/B00255_03_04.jpg)'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The devices can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/waterproof-temperature-sensor](http://www.cosino.io/product/waterproof-temperature-sensor).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备可以通过以下链接（或通过上网搜索）购买：[http://www.cosino.io/product/waterproof-temperature-sensor](http://www.cosino.io/product/waterproof-temperature-sensor)。
- en: The datasheet of this device is available at [http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf](http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备的数据表可以在[http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf](http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf)找到。
- en: As you can see, it's a waterproof device, so we can safely put it into the water
    to get its temperature.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它是一个防水设备，因此我们可以安全地将其放入水中以获取温度。
- en: 'This device is a **1-Wire** device and we can get access to it by using the
    `w1-gpio` driver, which emulates a 1-Wire controller by using a standard BeagleBone
    Black GPIO pin. The electrical connection must be done according to the following
    table, keeping in mind that the sensor has three colored connection cables:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备是一个**1-Wire**设备，我们可以通过使用`w1-gpio`驱动程序来访问它，该驱动程序通过使用标准的BeagleBone Black GPIO引脚模拟1-Wire控制器。电气连接必须按照以下表格进行，记住传感器有三根颜色不同的连接电缆：
- en: '| Pin | Cable color |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 电缆颜色 |'
- en: '| --- | --- |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| P9.4 - Vcc | Red |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| P9.4 - Vcc | 红色 |'
- en: '| P8.11 - GPIO1_13 | White |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| P8.11 - GPIO1_13 | 白色 |'
- en: '| P9.2 - GND | Black |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| P9.2 - GND | 黑色 |'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Interested readers can follow this URL for more information about how 1-Wire
    works: [http://en.wikipedia.org/wiki/1-Wire](http://en.wikipedia.org/wiki/1-Wire)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的读者可以访问以下URL，了解更多关于1-Wire工作原理的信息：[http://en.wikipedia.org/wiki/1-Wire](http://en.wikipedia.org/wiki/1-Wire)
- en: Keep in mind that, since our 1-Wire controller is implemented in software, we
    have to add a pull-up resistor of 4.7KΩ between the red and white cable in order
    to make it work!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，由于我们的1-Wire控制器是通过软件实现的，我们必须在红色和白色电缆之间添加一个4.7KΩ的上拉电阻，以确保其正常工作！
- en: 'Once all connections are in place, we can use the `chapter_03/BB-W1-GPIO-00A0.dts`
    file in the book''s example code repository to enable the 1-Wire controller on
    the *P8.11* pin of the BeagleBone Black''s expansion connector. The following
    snippet shows the relevant code where we enable the `w1-gpio` driver and assign
    to it the proper GPIO:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有连接就位，我们可以使用书中示例代码库中的`chapter_03/BB-W1-GPIO-00A0.dts`文件，在BeagleBone Black的扩展连接器的*P8.11*引脚上启用1-Wire控制器。以下代码片段显示了我们启用`w1-gpio`驱动程序并为其分配适当GPIO的相关代码：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To enable it, we must use the `dtc` program to compile it as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用它，我们必须使用`dtc`程序按如下方式进行编译：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, we have to load it into the kernel with the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要使用以下命令将其加载到内核中：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If everything works well, we should see a new 1-Wire device under the `/sys/bus/w1/devices/`
    directory, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们应该能在`/sys/bus/w1/devices/`目录下看到一个新的1-Wire设备，如下所示：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The new temperature sensor is represented by the directory named `28-000004b541e9`.
    To read the current temperature, we can use the `cat` command on the `w1_slave`
    file as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 新的温度传感器由名为`28-000004b541e9`的目录表示。要读取当前温度，我们可以使用`cat`命令读取`w1_slave`文件，如下所示：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that your sensors have a different ID, so in your system you'll get a different
    path name in the `/sys/bus/w1/devices/28-NNNNNNNNNNNN/w1_slave` form.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的传感器可能有不同的ID，因此在您的系统中，您将在`/sys/bus/w1/devices/28-NNNNNNNNNNNN/w1_slave`路径下看到不同的路径名称。
- en: In the preceding example, the current temperature is `t=29500`, which is expressed
    in **millicelsius degree** (**m°C**), so it's equivalent to 29.5°C.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，当前温度为`t=29500`，单位是**毫摄氏度**（**m°C**），所以它相当于29.5°C。
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The reader can take a look at the book *BeagleBone Essentials*, *Packt Publishing*,
    written by the author of this book, in order to have more information regarding
    the management of the 1-Wire devices on the BeagleBone Black.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 读者可以查看本书作者撰写的《BeagleBone Essentials》，*Packt Publishing*，以获取有关在BeagleBone Black上管理1-Wire设备的更多信息。
- en: Connecting the feeder
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接喂食器
- en: 'The fish feeder is a device that can release some feed by moving a motor. Its
    functioning is represented in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 鱼饲料器是一种可以通过移动电机释放一些饲料的设备。其工作原理在下图中表示：
- en: '![Connecting the feeder](img/B00255_03_05.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![连接喂食器](img/B00255_03_05.jpg)'
- en: 'In the closed position, the motor is at horizontal position, so the feed cannot
    fall down, while in the **Open** position, the motor is at vertical position,
    so that the feed can fall down. I have no real fish feeder, but looking at the
    preceding functioning, we can simulate it by using the servo motor shown in the
    following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭位置时，电机处于水平位置，因此饲料无法掉落，而在**开启**位置时，电机处于垂直位置，饲料才能掉落。我没有真正的鱼饲料器，但从前面的工作原理来看，我们可以通过使用下图所示的伺服电机来模拟它：
- en: '![Connecting the feeder](img/B00255_03_06.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![连接喂食器](img/B00255_03_06.jpg)'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/nano-servo-motor](http://www.cosino.io/product/nano-servo-motor).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以通过以下链接购买（或通过网络浏览）：[http://www.cosino.io/product/nano-servo-motor](http://www.cosino.io/product/nano-servo-motor)。
- en: The datasheet of this device is available at [http://hitecrcd.com/files/Servomanual.pdf.](http://hitecrcd.com/files/Servomanual.pdf.)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备的数据手册可以在[http://hitecrcd.com/files/Servomanual.pdf](http://hitecrcd.com/files/Servomanual.pdf.)上找到。
- en: This device can be controlled in position, and it can rotate by 90 degrees with
    a proper **PWM** signal in input. In fact, reading into the datasheet, we discover
    that the servo can be managed by using a periodic square waveform with a **period**
    (**T**) of 20ms and with a **high state time** (**t[high]**) between 0.9ms and
    2.1ms with 1.5ms as (more or less) center. So, we can consider the motor in the
    **Open** position when *t[high] =1ms* and in the **Close** position when *t[high]=2ms*
    (of course, these values should be carefully calibrated once the feeder is really
    built up!).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以进行位置控制，且通过适当的**PWM**信号输入，它可以旋转90度。事实上，查看数据表后，我们发现该伺服电机可以通过使用周期性方波来管理，其**周期**（**T**）为20ms，**高电平时间**（**t[high]**）介于0.9ms和2.1ms之间，1.5ms为中心值（大致）。因此，我们可以认为电机在**开启**位置时*
    t[high] =1ms*，在**关闭**位置时* t[high] =2ms*（当然，这些值在喂食器真正搭建完成后应进行仔细校准！）。
- en: 'Let''s connect the servo as described by the following table:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据下表连接伺服电机：
- en: '| Pin | Cable color |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 电缆颜色 |'
- en: '| --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| P9.3 - Vcc | Red |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| P9.3 - Vcc | 红色 |'
- en: '| P9.22 - PWM | Yellow |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| P9.22 - PWM | 黄色 |'
- en: '| P9.1 - GND | Black |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| P9.1 - GND | 黑色 |'
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Interested readers can find more details about the PWM at [https://en.wikipedia.org/wiki/Pulse-width_modulation](https://en.wikipedia.org/wiki/Pulse-width_modulation).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的读者可以在[https://en.wikipedia.org/wiki/Pulse-width_modulation](https://en.wikipedia.org/wiki/Pulse-width_modulation)了解更多关于PWM的信息。
- en: 'To test the connections, we have to enable one PWM generator of the BeagleBone
    Black. So, to respect the preceding connections, we need the one which has its
    output line on pin `P9.22` of the expansion connectors. To do it, we can use the
    following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试连接，我们需要启用BeagleBone Black的一个PWM生成器。为了保持前面的连接，我们需要启用一个输出线路位于扩展连接器`P9.22`引脚的PWM生成器。为此，我们可以使用以下命令：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, in the `/sys/devices/ocp.3` directory, we should find a new entry related
    to the new enabled PWM device, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`/sys/devices/ocp.3`目录下，我们应该能找到与新启用的PWM设备相关的新条目，如下所示：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Looking at the `/sys/devices/ocp.3/pwm_test_P9_22.12` directory, we see the
    files we can use to manage our new PWM device:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`/sys/devices/ocp.3/pwm_test_P9_22.12`目录，我们可以看到可以用来管理新PWM设备的文件：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we can deduce from the preceding file names, we have to properly set up
    the values into the files named as `polarity`, `period`, and `duty`. So, for instance,
    the center position of the servo can be achieved by using the following commands:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们从之前的文件名中可以推断，我们需要正确地在名为`polarity`、`period`和`duty`的文件中设置值。例如，可以通过以下命令实现伺服电机的中心位置：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The polarity is set to `0` to invert it, while the values written in the other
    files are time values expressed in nanoseconds, set at a period of 20ms and a
    duty cycle of 1.5ms, as requested by the datasheet (time values are all in nanoseconds.)
    Now, to move the gear totally clockwise, we can use the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 极性设置为`0`以进行反转，而其他文件中写入的值是以纳秒表示的时间值，设置为20ms的周期和1.5ms的占空比，如数据表要求（时间值均为纳秒）。现在，要将齿轮完全顺时针转动，我们可以使用以下命令：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On the other hand, the following command is to move it totally anticlockwise:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，以下命令是将其完全逆时针转动：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So, by using the following command sequence, we can open and then close (with
    a delay of `1` second) the gate of the feeder:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用以下命令序列，我们可以打开并随后关闭（延迟`1`秒）饲料器的闸门：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that by simply modifying the delay, we can control how much feed should
    fall down when the feeder is activated.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过简单地修改延迟，我们可以控制每次启动饲料器时掉落的饲料量。
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The script that implements the feeder controlling mechanism can be found in
    the `chapter_03/feeder.sh` file in the book's example code repository.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 实现饲料控制机制的脚本可以在书籍示例代码仓库中的`chapter_03/feeder.sh`文件中找到。
- en: The water sensor
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 水传感器
- en: 'The water sensor I used is shown in the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的水传感器如以下截图所示：
- en: '![The water sensor](img/B00255_03_07.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![水传感器](img/B00255_03_07.jpg)'
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The device can be purchased at the following link (or by surfing the Internet):
    [http://www.cosino.io/product/water_sensor](http://www.cosino.io/product/water_sensor).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以通过以下链接（或通过上网搜索）购买：[http://www.cosino.io/product/water_sensor](http://www.cosino.io/product/water_sensor)。
- en: 'This is a really simple device that implements what is shown in the following
    screenshot, where the **resistor** (**R**) has been added to limit the current
    when the water closes the circuit:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的设备，实现在以下截图中所示，其中添加了**电阻**（**R**）来限制水分闭合电路时的电流：
- en: '![The water sensor](img/B00255_03_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![水传感器](img/B00255_03_08.jpg)'
- en: When a single drop of water *touches* two or more teeth of the comb in the schematic,
    the circuit is closed and the **output voltage** (**Vout**) drops from **Vcc**
    to 0V.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当一滴水*接触*原理图中梳子的两个或更多的齿时，电路闭合，**输出电压**（**Vout**）从**Vcc**降至0V。
- en: So, if we wish to check the water level in our aquarium, that is, if we wish
    to check for a water leakage, we can imagine to put the aquarium into some sort
    of saucer, and then this device into it, so, if a water leakage occurs, the water
    is collected by the saucer, and the output voltage from the sensor should move
    from **Vcc** to GND.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想检查水族箱中的水位，换句话说，如果我们想检查是否有水泄漏，我们可以将水族箱放入某种托盘中，然后将此设备放入其中。如果发生水泄漏，水会被托盘收集，传感器的输出电压应从**Vcc**降至GND。
- en: 'The GPIO used for this device are shown in the following table:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此设备使用的GPIO如以下表格所示：
- en: '| Pin | Cable color |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 | 电缆颜色 |'
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| P9.3 - 3.3V | Red |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| P9.3 - 3.3V | 红色 |'
- en: '| P8.16 - GPIO67 | Yellow |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| P8.16 - GPIO67 | 黄色 |'
- en: '| P9.1 - GND | Black |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| P9.1 - GND | 黑色 |'
- en: 'To test the connections, we have to define GPIO 67 as an input line with the
    following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试连接，我们必须使用以下命令将GPIO 67定义为输入行：
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we can try to read the GPIO status while the sensor is in the water and
    when it is not, by using the following two commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用以下两条命令来尝试读取GPIO状态，看看传感器在水中和不在水中的状态：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The final picture
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终图片
- en: 'The following screenshot shows the prototype I realized to implement this project
    and to test the software. As you can see, the aquarium has been replaced by a
    cup of water:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我为实现该项目并测试软件而实现的原型。正如你所看到的，水族箱已被一杯水替代：
- en: '![The final picture](img/B00255_03_09.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![最终图片](img/B00255_03_09.jpg)'
- en: 'Note that we have two external power suppliers: the usual one at 5V for the
    BeagleBone Black, and the other one with an output voltage of 12V for the other
    devices (you can see its connector in the upper-right corner on the right of the
    webcam.)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有两个外部电源：一个是常规的5V电源供电给BeagleBone Black，另一个是输出电压为12V的电源供电给其他设备（你可以在右上角看到其连接器，位于网络摄像头右侧）。
- en: Setting up the software
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置软件
- en: Regarding the software, this time the major part is covered by the web interface,
    which is the real core of the project, and the acquisition and controlling process
    to get the aquarium data and managing the actuators. Then, a dedicated monitor
    script will be used to implement the communication between the web interface and
    the internal database.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 关于软件，这次的主要部分由Web界面覆盖，它是项目的核心，负责获取水族箱数据并管理执行器的控制过程。接下来，一个专门的监控脚本将用于实现Web界面与内部数据库之间的通信。
- en: Managing the system status and configuration
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理系统状态和配置
- en: 'To manage the status of all devices and to do the data logging, we can use
    a database again to store all the relevant data, as we did in [Chapter 1](ch01.html
    "Chapter 1. Dangerous Gas Sensors"), *Dangerous Gas Sensors*. So, we can use the
    `chapter_03/my_init.sh` file in the book''s example code repository to set up
    the database. The following snippet shows the relevant code where we define the
    tables used in the project:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理所有设备的状态并进行数据记录，我们可以再次使用数据库来存储所有相关数据，就像我们在[第1章](ch01.html "第1章. 危险气体传感器")中所做的那样，*危险气体传感器*。因此，我们可以使用书中示例代码仓库中的`chapter_03/my_init.sh`文件来设置数据库。以下片段显示了定义项目中使用的表格的相关代码：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `status` table holds the system status variables with the following meanings:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`status`表格包含系统状态变量，含义如下：'
- en: '| Variable name | Description |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 变量名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `alarm_sys` | Generic system alarm (I/O and communication errors, and so
    on). |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `alarm_sys` | 一般系统报警（I/O和通信错误等）。 |'
- en: '| `alarm_level` | A water leakage has been detected. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `alarm_level` | 检测到水泄漏。 |'
- en: '| `alarm_temp` | Water temperature is over the `water_temp_max_alarm` value
    or under the `water_temp_min_alarm` value (in °C). |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `alarm_temp` | 水温超过`water_temp_max_alarm`值或低于`water_temp_min_alarm`值（单位：℃）。
    |'
- en: '| `Water` | Current water temperature (in °C). |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `Water` | 当前水温（单位：℃）。 |'
- en: '| `Cooler` | Current cooler status (0 = off, 1 = on). |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `Cooler` | 当前冷却器状态（0 = 关闭，1 = 开启）。 |'
- en: '| `Pump` | Current pump status (0 = off, 1 = on). |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `Pump` | 当前水泵状态（0 = 关闭，1 = 开启）。 |'
- en: '| `Lamp` | Current lamp status (0 = off, 1 = on). |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `Lamp` | 当前灯光状态（0 = 关闭，1 = 开启）。 |'
- en: '| `force_cooler` | The user asks to turn on the cooler. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `force_cooler` | 用户请求开启冷却器。 |'
- en: '| `force_pump` | The user asks to turn on the pump. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `force_pump` | 用户请求开启水泵。 |'
- en: '| `force_lamp` | The user asks to turn on the lamp. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `force_lamp` | 用户请求开启灯光。 |'
- en: '| `force_feeder` | The user asks to enable the feeder. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `force_feeder` | 用户请求启用喂料器。 |'
- en: Note that the feeder has no current status variable due to the fact that it
    cannot stay opened or closed, but just has an *impulse-on* functioning; that is,
    when enabled, it opens and then closes it's internal gate.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，喂料器没有当前状态变量，因为它不能保持开启或关闭状态，而是具有*脉冲开启*的功能；也就是说，当启用时，它会打开然后关闭内部门。
- en: 'On the other hand, in the `config` table, there are system configuration variables
    with the following meanings:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在`config`表格中，有系统配置变量，含义如下：
- en: '| Variable name | Description |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 变量名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pump_t_on` | Time in seconds when the pump must be on. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `pump_t_on` | 水泵必须开启的时间（单位：秒）。 |'
- en: '| `pump_t_off` | Time in seconds when the pump must be off. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `pump_t_off` | 水泵必须关闭的时间（单位：秒）。 |'
- en: '| `feeder_interval` | Time in seconds between two consecutive "lunch time".
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `feeder_interval` | 两次连续“午餐时间”之间的时间间隔（单位：秒）。 |'
- en: '| `water_temp_max` | Turn the cooler on if the water temperature is over this
    value (in °C). |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `water_temp_max` | 如果水温超过此值（单位：°C），则启动冷却器。 |'
- en: '| `water_temp_min_alarm` | Turn the water alarm on if the water temperature
    is under this value (in °C). |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `water_temp_min_alarm` | 如果水温低于此值（单位：°C），则启用水温报警。 |'
- en: '| `water_temp_max_alarm` | Turn the water alarm on if the water temperature
    is over this value (in °C). |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `water_temp_max_alarm` | 如果水温超过此值（单位：°C），则启用水温报警。 |'
- en: Tip
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that my project misses the `water_temp_min` configuration variable due
    to the fact that I have no heater available to increase the water temperature
    in case it is too cold. However, the reader should have all needed information
    to fill this gap by reading this chapter!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我的项目没有加热器来在水温过低时提高水温，因此缺少 `water_temp_min` 配置变量。然而，读者应该能够通过阅读本章获得填补此空白所需的所有信息！
- en: In the end, the `temp_log` table is used to store all water temperature measurements
    useful to show a little graph into the user's control panel (see the following
    section).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，`temp_log` 表用于存储所有水温测量数据，这些数据对于在用户控制面板中展示小图表非常有用（请参阅下一个章节）。 '
- en: Building up the web control panel
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Web 控制面板
- en: The web control panel is written in **PHP** and **JavaScript**. PHP is used
    to implement the acquisition and controlling processes plus the main page, while
    the JavaScript is used to implement the graphical widgets. In particular, this
    last part has been realized by using an interesting toolkit named **Drinks** ([http://www.goincompany.com/drinks.php](http://www.goincompany.com/drinks.php)).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Web 控制面板是用 **PHP** 和 **JavaScript** 编写的。PHP 用于实现数据采集和控制过程以及主页面，而 JavaScript
    用于实现图形小部件。特别是，最后一部分是通过使用一个名为 **Drinks** 的有趣工具包实现的 ([http://www.goincompany.com/drinks.php](http://www.goincompany.com/drinks.php))。
- en: 'Using the widgets implemented by this toolkit is trivial. In order to install
    it, we just need to download the zip archive from the project''s home site, unzip
    it, and then move the files with the `.js` extension into the web server''s root
    directory. On my BeagleBone Black, I''m running the Apache web server, which has
    its root directory in the `/var/www` directory. So, to install the `Drinks` toolkit,
    I moved the files as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该工具包实现的小部件非常简单。为了安装它，我们只需从项目主页下载 zip 压缩包，解压缩它，然后将扩展名为 `.js` 的文件移动到 Web 服务器的根目录。在我的
    BeagleBone Black 上，我使用的是 Apache Web 服务器，其根目录在 `/var/www` 目录下。因此，为了安装 `Drinks`
    工具包，我将文件移动如下：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, we have to add the code to build up our web control panel and manage it
    in this directory. The main script can be found in the `chapter_03/aquarium.php`
    file in the book's example code repository. I'm going to report all its relevant
    code into several snippets now.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加代码以构建我们的 Web 控制面板并在该目录中进行管理。主脚本可以在书中的示例代码库中的 `chapter_03/aquarium.php`
    文件中找到。接下来我将把它的所有相关代码分成几个代码片段进行展示。
- en: 'In the following first snippet, there is the PHP code to get the initial statuses
    of the input widgets, that is, those widgets that the user directly manages to
    send commands to the system. During the first loading of this page, the user will
    get the current status of this widgets as they are stored into the internal database:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的第一个代码片段中，是获取输入小部件初始状态的 PHP 代码。也就是说，这些小部件是用户直接管理的，用来向系统发送命令。在此页面首次加载时，用户将看到当前这些小部件的状态，它们存储在内部数据库中：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then follows the header of the **HTML** page as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 **HTML** 页面的头部内容，如下所示：
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: By using this code, we instruct the Drinks toolkit to generate two managers—one
    to manage the input widgets (`man_in`), and the other to manage all other output
    widgets (`man_out`). The output widgets, as opposed to the input ones, are all
    the widgets that are not under the direct control of the user and then are updated
    by the system to show the system status to the user.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这段代码，我们指示 Drinks 工具包生成两个管理器——一个管理输入小部件（`man_in`），另一个管理所有其他输出小部件（`man_out`）。与输入小部件不同，输出小部件是所有不受用户直接控制的小部件，它们由系统更新以向用户显示系统状态。
- en: Both managers will refresh their internal status each second (`refresh=1`),
    and both will use the external handler named `handler.php` to do it. The code
    of this handler (which will be presented in the next section) are executed periodically,
    and it's used to get the input widget's statuses and to set the output widgets
    statuses into the control panel.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 两个管理器每秒刷新一次其内部状态（`refresh=1`），并且都将使用名为`handler.php`的外部处理程序来完成这一操作。这个处理程序的代码（将在下一节中呈现）是定期执行的，用于获取输入小部件的状态，并将输出小部件的状态设置到控制面板中。
- en: 'Then, the control panel is divided into three main subsections. The first one
    is where the live video and the alarms are placed. This can be achieved with the
    following code snippet:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，控制面板分为三个主要小节。第一个小节用于放置实时视频和报警。可以通过以下代码片段实现：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Here, the following line is used to enable the live video from the webcam:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，以下行用于启用来自摄像头的实时视频：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the end, the following three lines are used to define the alarm LEDs related
    to the corresponding alarm variables:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下三行用于定义与相应报警变量相关的报警LED：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The second subsection holds the control widgets, that is, the water thermometer
    and the lamp, cooler, pump, and feeder LEDs and switches. Since all the input
    widgets are here, the code uses a big HTML form where these items are placed:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个小节包含控制小部件，即水温计、灯、冷却器、泵和进料器的LED和开关。由于所有输入小部件都在这里，代码使用一个大的HTML表单，将这些项目放置其中：
- en: '[PRE35]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following line is used to display a thermometer that reports the water
    temperature:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行用于显示报告水温的温度计：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following two lines are used to display the lamp, cooler, and pump switches
    with the relative LED that indicates the device status:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两行用于显示灯、冷却器和泵的开关及相应的LED指示设备状态：
- en: '[PRE37]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When an LED is turned on, the corresponding device is turned on, while when
    it is turned off, the device is turned off. On the other hand, by moving one of
    the preceding switches, the user can force the system to turn on the corresponding
    device during the *next cycle*. (I'm going to explain what the *next cycle* term
    means in the next section.)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当LED打开时，相应的设备会被打开，而当LED关闭时，设备会被关闭。另一方面，用户通过切换前面的开关之一，可以强制系统在*下一个周期*内打开相应的设备。（我将在下一节中解释*下一个周期*的含义。）
- en: A special notice must be applied for the feeder. As already stated, it can be
    enabled with an impulse, and not simply turned on or off. To highlight this fact,
    this time I used a different kind of switch widget. So, the LED is used to notify
    the user that the feeder will be enabled in the next cycle, while the LED will
    remain on and it will be turned off once the feeder has been really enabled.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 进料器必须申请特殊的通知。如前所述，它可以通过脉冲启用，而不仅仅是开或关。为了突出这一点，这次我使用了不同类型的开关小部件。因此，LED用于通知用户进料器将在下一个周期启用，而LED将保持点亮，直到进料器真正启用后才会关闭。
- en: 'The code to display the feeder controls is shown in the following code snippet:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 显示进料器控制的代码如下所示：
- en: '[PRE38]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, the type of the switch is `toggle` instead of `circle`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，开关的类型是`toggle`，而不是`circle`。
- en: 'The last subsection is the temperature log graphic, which can be used to show
    to the user how the water temperature has been changed during the last 20 cycles.
    The code to implement this part is as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一小节是温度日志图形，用于向用户显示过去20个周期内水温的变化情况。实现这一部分的代码如下：
- en: '[PRE39]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note that in this case, we need a special handler to generate the graphical
    points representing the water temperature. This handler is called `log_temp.php`
    and it's specified in the `href` parameter of the `channel` entry, while the other
    parameters define the refresh time in seconds (`refresh="60"`) and the scaling
    of the graph (`sweep` and `frequency`). See the `Drinks` documentation pages for
    further information about these parameters.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这种情况下，我们需要一个特殊的处理程序来生成表示水温的图形点。这个处理程序被称为`log_temp.php`，它在`channel`条目的`href`参数中指定，而其他参数定义了刷新时间（以秒为单位，`refresh="60"`）和图形的缩放（`sweep`和`frequency`）。有关这些参数的更多信息，请参阅`Drinks`文档页面。
- en: 'At each refreshing time, the `log_temp.php` script is called, and it will return
    the points sequence to be displayed to the display widget. To discover how it
    happens, we have to move to the next section. But before doing it, let me show
    you how the web control panel we just presented is displayed on my PC:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次刷新时，`log_temp.php`脚本会被调用，它将返回一个点序列，以便显示小部件显示。为了了解它是如何发生的，我们需要移步到下一部分。但在此之前，让我向你展示一下我们刚才展示的
    Web 控制面板在我的 PC 上是如何显示的：
- en: '![Building up the web control panel](img/B00255_03_10.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![构建 Web 控制面板](img/B00255_03_10.jpg)'
- en: Handling the control panel
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制面板的处理
- en: In the previous section, we discovered that the web control panel needs some
    handlers to send/receive data from the underlying system. In particular, we said
    that the input/output managers talk with the `handler.php` script, while the temperature
    log needs the `log_temp.php` script to get graph data. Let's see how these scripts
    are written.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分中，我们发现网络控制面板需要一些处理程序来与底层系统发送/接收数据。特别是，我们提到输入/输出管理器与`handler.php`脚本进行通信，而温度日志则需要`log_temp.php`脚本来获取图形数据。接下来让我们看看这些脚本是如何编写的。
- en: 'The code in the `handler.php` script is as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`handler.php`脚本中的代码如下：'
- en: '[PRE40]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The script can be found in the `chapter_03/handler.php` file in the book's example
    code repository.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本可以在书籍示例代码库中的`chapter_03/handler.php`文件中找到。
- en: This script has an input section to manage the input widgets and an output section
    to manage the output ones. In the input section, we simply get the status of each
    input widget and then store it in the `status` table. The only exception is for
    the `force_feeder` variable, which is recorded only if its status is `1` due to
    the the fact that it will be cleared when the feeder is actually enabled in the
    next cycle (again, the meaning of *next cycle* will be explained soon).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本有一个输入部分来管理输入小部件，还有一个输出部分来管理输出小部件。在输入部分，我们只需获取每个输入小部件的状态，然后将其存储到`status`表中。唯一的例外是`force_feeder`变量，它只在状态为`1`时被记录，因为当馈料器在下一个周期启用时，它的状态会被清除（再次提到，*下一个周期*的含义将在稍后解释）。
- en: In the output section, we simply get the status of each status variable from
    the database and then store it into an array that will be returned to the `Drinks`
    toolkit by using the `json_encode()`function. The only note to be highlighted
    here is the fact that once the `force_feeder` switch is moved to the high state,
    its status is recorded, and then is cleared again, just to simulate the fact that
    this is not a normal on/off switch but just an *impulse-on* switch.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出部分，我们只是从数据库中获取每个状态变量的状态，然后将其存储到一个数组中，该数组将通过`json_encode()`函数返回给`Drinks`工具包。这里需要特别注意的是，一旦`force_feeder`开关被移动到高电平状态，它的状态会被记录，然后会被清除，只是为了模拟它不是一个普通的开/关开关，而是一个*脉冲开*开关。
- en: 'On the other hand, as said just now, the `log_temp.php` script just has to
    return a list of points. The following is the code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，正如刚才所说，`log_temp.php`脚本只需返回一个点的列表。以下是代码：
- en: '[PRE41]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The script can be found in the `chapter_03/log_temp.php` file in the book's
    example code repository.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本可以在书籍示例代码库中的`chapter_03/log_temp.php`文件中找到。
- en: The script simply selects the last 20 recorded points from the `temp_log` table
    and then stores them into the `data[]` array, adding some zeros at the beginning
    just in case there exists less then 20 stored temperature values. The `array_unshift()`
    function is used to put each new extracted value at the beginning of the array
    due to the fact that the `SELECT` statement returns the data in a reversed order.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本简单地从`temp_log`表中选择最后20个记录点，然后将它们存储到`data[]`数组中，并在开头添加一些零，以防存在少于20个存储的温度值。`array_unshift()`函数用于将每个新提取的值放到数组的开头，因为`SELECT`语句返回的数据是反向顺序的。
- en: 'Now, the last step is to put all these scripts together into the web browser
    root directory. The `/var/www` directory on my BeagleBone Black looks like:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后一步是将所有这些脚本放到 Web 浏览器的根目录中。我的 BeagleBone Black 上的`/var/www`目录如下：
- en: '[PRE42]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Tip
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The CSS can be found in the `chapter_03/aquarium.css` file in the book's example
    code repository. The code is not presented here since it's very trivial and not
    strictly needed for the understanding of the project.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 文件可以在书籍示例代码库中的`chapter_03/aquarium.css`文件中找到。由于它非常简单，并且对于理解项目并非严格必要，因此这里没有展示代码。
- en: Knowing the internal state-machine
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解内部状态机
- en: Now that the control panel has been correctly set up, we have to take a look
    at the internal *state-machine*, that is, the procedure that at each cycle collects
    all the environment data and then decides what to do according to its internal
    state and the new environment status.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在控制面板已经正确设置，我们需要查看内部的*状态机*，也就是在每个周期中收集所有环境数据，然后根据其内部状态和新的环境状态决定做什么的过程。
- en: Our machine is implemented in the `chapter_03/aquarium_mon.php` file in the
    book's example code repository. The following are several code snippets of its
    `daemon_body()` function (the real core of the program.)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器实现位于书籍示例代码库中的`chapter_03/aquarium_mon.php`文件中。以下是其`daemon_body()`函数的几个代码片段（这是程序的真正核心）。
- en: 'At its beginning, the function looks like:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，该函数如下所示：
- en: '[PRE43]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: At its beginning, the function initializes some variables and then starts its
    main loop where the first step is to get the water temperature, since, according
    to this value, many jobs need to be carried out!
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，该函数初始化一些变量，然后启动主循环，第一步是获取水温，因为根据这个值需要执行许多任务！
- en: Note also that the `while()` statement executes each time the `sleep($loop_time)`
    function, that is, each `loop_time` seconds starts a new *machine cycle*, and
    all the variables are modified according to the environment data read and the
    user inputs.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`while()`语句每次执行`sleep($loop_time)`函数，即每`loop_time`秒开始一个新的*机器周期*，并且所有变量根据读取的环境数据和用户输入进行修改。
- en: 'Then, the code continues reading the temperature as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代码继续按如下方式读取温度：
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `temp_get()` function reads the water temperature by reading the corresponding
    `w1_slave` file. It stores this value in the `temp` variable, and then some alarms
    are checked against this new value. Note also that in this case, the `alarm_sys`
    variable can be set to `1` to signal whether an I/O error has occurred or not.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`temp_get()`函数通过读取相应的`w1_slave`文件来读取水温。它将此值存储在`temp`变量中，然后根据此新值检查一些警报。还要注意，在这种情况下，`alarm_sys`变量可以设置为`1`，以指示是否发生了I/O错误。'
- en: 'The `get_water_level()` function is used to read the GPIO connected with the
    water sensor, and its body looks as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_water_level()`函数用于读取与水温传感器连接的GPIO，其主体如下：'
- en: '[PRE45]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Tip
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that, as the preceding code shows, the water sensor has an inversed logic.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如前面的代码所示，水温传感器具有反向逻辑。
- en: 'Now, it''s the lamp''s turn:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在轮到灯光的部分：
- en: '[PRE46]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding snippet, we see that the lamp is turned on and off according
    to the user input, without any automatic mechanism from the system.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们看到灯光根据用户输入开关，而没有任何系统的自动机制。
- en: 'This is not true for the cooler. Its management code looks as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于冷却器来说并不成立。它的管理代码如下所示：
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The cooler status is set according to the `temp` value and the `water_temp_max`
    setting and, as last case, it can be forced on by the user if the `force_cooler`
    variable is set to `1`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 冷却器的状态根据`temp`值和`water_temp_max`设置来确定，最后如果`force_cooler`变量被设置为`1`，用户也可以强制开启。
- en: 'A similar functioning applies for the pump:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对泵也适用类似的功能：
- en: '[PRE48]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This time, the state on or off is set by a timeout and, again, the device can
    be forced on by the user input, that is, if the `force_pump` variable is set to
    `1`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，开关状态是通过超时来设置的，同样，设备可以通过用户输入强制开启，即如果`force_pump`变量被设置为`1`。
- en: 'All the preceding three snippets call a proper function to set on or off the
    relative GPIO; for instance, the last one calls the `set_pump()` function to set
    the pump status. The function''s body is as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前三段代码都调用了适当的函数来打开或关闭相应的GPIO；例如，最后一段调用了`set_pump()`函数来设置泵的状态。该函数的主体如下：
- en: '[PRE49]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The other two functions are similar.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个函数也类似。
- en: 'The last notice is for the feeder. This time the code is as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的提示是关于喂食器的。这次代码如下：
- en: '[PRE50]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The feeder can be activated according to a timeout or by a user input; but,
    instead of the preceding example, the code calls the `do_feeder()` function to
    call the `feeder.sh` script presented, as shown in the preceding code, and then
    it must clear the `force_feeder` status variable to signal to the user that the
    feeder has been activated. The body of the `do_feeder()` function is as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 喂食器可以根据超时或用户输入来激活；但是与前面的示例不同，代码调用了`do_feeder()`函数来调用前面展示的`feeder.sh`脚本，然后它必须清除`force_feeder`状态变量，告知用户喂食器已被激活。`do_feeder()`函数的主体如下：
- en: '[PRE51]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The character `&` in the `system()` function is needed in order to create a
    dedicated process to execute the `feeder.sh` script.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`system()`函数中的字符`&`是为了创建一个专门的进程来执行`feeder.sh`脚本。'
- en: 'Now, it''s time to execute the script. On my system, I used the following command
    line to execute it in debugging mode:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候执行脚本了。在我的系统上，我使用了以下命令行以调试模式执行它：
- en: '[PRE52]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Tip
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that on your system, the **PHP** support may not be installed. In this
    case, you can solve it by using the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在你的系统上，可能没有安装**PHP**支持。在这种情况下，你可以通过使用以下命令来解决：
- en: '[PRE53]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Every 15 seconds, the script wakes up and executes all the preceding steps in
    a new *cycle* of the *state-machine*. Note that to work you must set up all the
    hardware as presented in this section.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 每15秒，脚本会唤醒并执行前面所有步骤，进入新的*循环*，属于*状态机*的一部分。请注意，要使其工作，你必须按本节中介绍的方式设置所有硬件。
- en: Final test
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终测试
- en: 'To test the prototype, I turned on the board, and after the login, I set up
    the system by using the commands discussed before, or by using the `chapter_03/SYSINIT.sh`
    script in the book''s example code repository, as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试原型，我开启了开发板，并在登录后，通过使用之前讨论过的命令，或者使用书中示例代码库中的`chapter_03/SYSINIT.sh`脚本来设置系统，方法如下：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, I executed the `aquarium_mon.php` command as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我按照如下方式执行了`aquarium_mon.php`命令：
- en: '[PRE55]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Also, I executed the video streamer with the following command:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我用以下命令执行了视频流传输器：
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Then, I pointed my browser to the `aquarium.php` file on the BeagleBone Black's
    IP address (that is, the URL `http://192.168.7.2/aquarium.php`) and the game is
    done!
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将浏览器指向BeagleBone Black的IP地址上的`aquarium.php`文件（即URL `http://192.168.7.2/aquarium.php`），游戏就完成了！
- en: 'Note that at this point, we can try to force some settings or try to change
    some configuration variables by using the `chapter_03/my_dump.sh` and `chapter_03/my_set.sh`
    scripts in the book''s example code repository, as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此时，我们可以尝试强制设置一些参数，或者尝试通过使用书中示例代码库中的`chapter_03/my_dump.sh`和`chapter_03/my_set.sh`脚本来更改一些配置变量，方法如下：
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In the preceding setting, I changed the `water_temp_max_alarm` limit value just
    as an example, and you can do all the changes that you wish on your system.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述设置中，我仅作为示例更改了`water_temp_max_alarm`的限制值，你可以根据需要在你的系统上进行所有更改。
- en: 'Before ending this chapter, let me show you how this control panel looks on
    my smartphone:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束之前，让我展示一下这个控制面板在我的智能手机上的样子：
- en: '![Final test](img/B00255_03_11.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![最终测试](img/B00255_03_11.jpg)'
- en: Tip
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The reader should notice that on the temperature log, there are three spikes
    due to the fact that during the temperature reading, the sensor returned an error.
    This issue can be fixed by repeating the reading two or three times before returning
    an error.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该注意到，在温度日志中有三个尖峰，这是因为在温度读取过程中，传感器返回了一个错误。这个问题可以通过在返回错误之前重复读取两到三次来解决。
- en: Summary
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered how to interface our BeagleBone Black to several
    devices with a different power supply voltage, and how to manage a 1-Wire device
    and a PWM one. Also, we presented the `Drinks` toolkit to realize a web control
    panel that can be used equally from a PC, smartphone, or tablet.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何将我们的BeagleBone Black与多个电压不同的设备接口连接，并且如何管理1-Wire设备和PWM设备。同时，我们介绍了`Drinks`工具包来实现一个可以在PC、智能手机或平板上使用的网页控制面板。
- en: In the next chapter, we'll see how to realize a weather station that can store
    its collected data locally, which can not only show them in a nice manner on a
    web browser, but also can send its data to a Google Docs document!
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何实现一个气象站，该气象站可以将收集到的数据本地存储，不仅可以在网页浏览器上以漂亮的方式显示数据，还可以将数据发送到Google
    Docs文档！
- en: Simply speaking, we're going to realize a simple **Internet-of-Things** (**IoT**)
    machine.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们要实现一个简单的**物联网**（**IoT**）机器。
