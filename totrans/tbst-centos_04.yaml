- en: Chapter 4. Troubleshooting Package Management and System Upgrades
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Yellowdog Updater, Modified (Yum) has been with us for a while. It is easy
    to use and it serves to reduce the complexity of dependency management when installing
    or upgrading CentOS packages. More commonly referred to as Yum, this chapter will
    be assuming that you are already proficient in its fundamental usage (including
    installing packages, updating packages, removing packages, and searching for packages)
    as our intention is to continue the overall premise of this book by approaching
    the subject of package management and system upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to gather software information with RPM and YUM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use Yum plugins to make the process of troubleshooting an easier
    task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshoot issues relating to package installation and updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover how to extend the system and install additional Yum repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to download an RPM package with Yum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to restore an RPM database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the complexities of managing minor system upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gathering software information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to tackle YUM, we will deviate a little by turning our attention
    towards the process of gathering the necessary software information in order to
    discover more about the system in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will begin by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, I will not explain every command shown in the above example,
    but you will notice that the output is verbose, and it does a good job of detailing
    the CentOS release information. The information displayed includes details regarding
    the overall architecture of the server; the domain, time, and date information,
    and finally, the extent, status, and permissions of the repository list used by
    Yum.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far so good, but what if I need to know about the RPM-based packages that
    are installed on the server? Rather than wading through an entire series of configuration
    files (or even making an educated guess), why not simply use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, depending on what is installed on your server, the above command
    will output an extensive (or on the other hand, a relatively small) list of RPM-based
    packages. If this is too detailed, and you merely want a quick idea as to what
    the installation history could be, you can simply display the total number of
    RPM-based packages by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we have used the `wc` command, the output will be restricted to a numeric
    value representing the information requested. It may be too simplistic or vague
    for your exact needs, but it will give you a firm grounding with regard to the
    current usage of the server in question (especially if this task is repeated over
    specific time periods).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, why stop there? If you feel rather more inquisitive, then you can also
    request information regarding which Yum packages are installed by typing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this stage, you may be asking, what is the difference between `yum list installed`
    and the previously mentioned `rpm –qa` command? In simple terms, the former Yum-based
    command will also list the package dependencies, so you should expect to see far
    more detail in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, this listing can either be extensive or not depending on the purpose
    of the server in question, but for those of you who enjoy the benefits of good
    housekeeping, this function can be improved by printing the output to a file of
    your choice like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Again, nothing too complicated at this stage, but before we round off these
    initial steps, it is important to realize that we have just exposed some of the
    secrets of a previously unknown CentOS server. Our familiarity with the system
    is now growing, and as a consequence of our activity, you will now feel far more
    comfortable and at ease with your new surroundings. After all, when a server goes
    down and everyone else is panicking, the confidence gained here will count towards
    your eventual success.
  prefs: []
  type: TYPE_NORMAL
- en: Using Yum plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yum is one of the most widely used package management tools, but many administrators
    are unaware that it comes complete with a plugin system that can be used to extend
    its capabilities. It would be true to say that many of these plugins are installed
    by default, but as it is assumed you know nothing about the current system (which
    may often be the case for any troubleshooter), we will begin by installing the
    `yum-skip-broken` set of packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let'' s start by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Having done this (and confirmed that this set of packages is now available to
    the system), we can now use the `--skip-broken` plugin to approach any situation
    in which you want to update or upgrade a certain package, which is refused due
    to a report of broken dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, a combination of the following commands can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you can simplify the above command to suit your own purpose (by breaking
    it over two separate lines), but it should be noted that the reason an error occurs
    in these circumstances is often related to the mistake of mixing (incompatible)
    third-party repositories. In this respect, and in order to achieve a long-term
    solution, you will need to reduce the number of third-party repositories used.
    However, before attempting this, you should review the past transactions of Yum
    in order to ascertain how this will affect the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The above command will now generate a list of all the past operations undertaken
    by Yum, thereby affording a level of detail that can prove to be quite useful
    when attempting to debug a broken service, correct a package dependency, or assist
    in the process of reducing the number (or reliance) on third-party repositories.
    Moreover, from the list this command generates, you will also notice that each
    transaction carries a unique identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The unique identifier can be used to obtain even more information about a particular
    event by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, in situations where this level of detail is not required, you
    can always obtain a summary of all recent events by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That being said, and while we are on the subject of Yum plugins, you should
    also be aware that `changelog` information is not directly available from the
    Yum package manager. Again, this type of information can be useful, but in order
    to follow this line of enquiry, you will need to install the `changelog` plugin
    by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, you will then be able to query the Yum `changelog` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As this output can be quite overwhelming, it is helpful to know that you do
    have the ability to restrict the information displayed by simply replacing the
    term `all` with a numeric value that indicates the number of records to show.
    So, in the case of wanting to read the `5` most recent updates to Postfix, you
    would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, with this plugin installed, you can review the relevant `changelog`
    information prior to any package installation by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a small but interesting feature that can be extended to show all recent
    `changelog` information by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can view all obsolete packages by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, and before we close our discussion on using Yum plugins, there may
    be a situation that calls on the need to utilize `yum-utils`, and if it is not
    currently available to the system in question, you can install it by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This addition makes package management a breeze when you consider the whole
    host of issues that can include the removal of orphaned or duplicate packages
    and the resolution of package cleanup operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to remove orphaned packages, you can type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove duplicates, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To facilitate the removal of old kernels, you can type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With reference to the above example, if your system maintains a number of old
    kernels you can query them by running the command, `rpm -q kernel`. As you will
    see, this simple operation can provide the information you need in order to decide
    to whether the option to free disk space is available or not. If old kernels can
    be seen, you can remove them in the usual way. However, rather than suggesting
    that you need to do this, in uncovering this feature, my intention was to prove
    that `yum-utils` has many interesting features that should be explored, as it
    is an underrated aspect of Yum that can play an essential role when troubleshooting
    package management.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing Yum operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is important to realize that in many instances, the general cause of
    an error with Yum can begin with the network environment, an issue related to
    disk space, mixed repositories, or even the DNS settings on the system. However,
    there are occasions when a few common procedural errors will need rectifying by
    flushing Yum itself with one or more of the following range of commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'To purge old package information, you should use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To clean all cached packages, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To clean all cached XML-based data, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you would like to flush the Yum cache in its entirety (including
    all headers, metadata, download packages, and more), you can always use the following
    command to complete the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Installing additional Yum repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing additional repositories is not necessarily considered to be a troubleshooter's
    task, but it does serve to alleviate many issues regarding package dependencies
    and attempts to keep your system relevant within a Dev/Ops environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the following text, I have included instructions for some of the most popular
    repositories. However, you should realize that the locations of these repositories
    will be different for alternative versions of CentOS, and that these links will
    be updated over time. Additional information can be found at the end of this chapter
    for future reference.
  prefs: []
  type: TYPE_NORMAL
- en: EPEL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Extra Packages for Enterprise Linux** (**EPEL**) repository provides useful
    software packages that are not included in the official CentOS Linux repositories,
    some of which will be covered in the following chapters of this book. It is also
    a requirement for many other third-party repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS 7, you should follow this procedure to install the EPEL repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Having completed the relevant steps, simply confirm that you would like to
    continue with the installation and then type the following command to ensure it
    is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: EPEL is generally considered to be a base repository that is often required
    by many other repositories, and given the desire to keep our system current, I
    have included the procedures to install both the Remi and IUS repositories. However,
    with a heavy note of caution, I would suggest using only one of them to avoid
    any possible conflicts that may arise from employing them both on the same system.
  prefs: []
  type: TYPE_NORMAL
- en: Remi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Remi repository depends on the EPEL repository and provides newer versions
    of the software to the core CentOS Linux repositories; so having installed this
    repository, you may expect to see several updates to the CentOS system the next
    time you run `yum update`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS 7, you should follow this procedure to install the Remi repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: By default, the Remi repository is disabled; to enable it, we will need to update
    the configuration file and mark it as active.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the following file in your favorite text editor like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, if you want to use the PHP 5.5 libraries, simply uncomment the `[remi-php55]`
    reference in the same file `remi.repo`. When done, save and close the file before
    typing the following command to ensure it is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The IUS repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an alternative to Remi, the IUS repository also provides newer versions of
    software to the core CentOS Linux repositories, but the developers stress that
    IUS tends to use different package names in order to avoid conflicts that can
    arise from software version updates. This simple approach to package names has
    gained a lot of traction within the CentOS community as a whole as this level
    of control can be very useful within a mission critical environment. The IUS repository
    depends on the EPEL repository, but again, I would advise against mixing this
    repository with other sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'For CentOS 7, you should follow this procedure to install the IUS repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Moreover, given that the IUS repository works in a unique way, you should be
    aware that there is a package called `yum-plugin-replace` that is used to assist
    in the process of upgrading from stock packages to IUS `packageXY` style packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, I have provided a link to additional materials at the end of this chapter
    on how this tool can be used (and it is expected that these instructions may change
    over time), but at this present time, you can begin by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Overall, regardless of whether you use Remi or IUS, remember, the golden rule
    is not to mix them, but regardless of which of these repository you choose, it
    is expected that either of them will serve you well.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading an RPM package with Yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If there is ever an occasion where you need to download a package but not install
    it, then this can be achieved with Yum. However, to begin this process, you need
    to ensure that your system maintains the following utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In most cases, it may already be installed (as it forms part of the `yum-utils`
    package mentioned previously), but having completed this task (or confirmed that
    it is already present), you can simply download the required package to a directory
    of your choice by customizing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, and to make sense of the the preceding command, you can download
    Samba and all of its dependencies to a user-based directory by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also invoke the following variation, although this version
    of the command will assume that the download will be stored in your current location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Having done this, the next step will be to extract the contents of the package
    downloaded using `yumdownloader` in order to access the relevant RPM using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `cpio` command is typically used for backups, and its function is to facilitate
    the transport of files in and out of a `cpio` archive. It works in a way similar
    to `tar`, but unlike `tar`, `cpio` can work in conjunction with the `find` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to make a back up, you can begin by accessing the relevant directory
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'List the directory contents to ensure that everything is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the command for backing up the directory in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: So, in a few short steps, we have discovered how to download a package through
    Yum and to extract the relevant package data using the `cpio` command, a process
    that may prove to be most useful when troubleshooting a particular service or
    application that requires a dependency. This may or may not be the first time
    you have seen the `cpio` command, and yes, you won't be surprised to know that
    we have only scratched the surface of how it can be used. So, with that in mind,
    I would encourage you to learn more about it, as you will find that it will prove
    to be very useful at some point in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional information about the `cpio` command can be found at the end of
    this chapter, but for reference, you can begin your journey by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Diagnosing a corrupt RPM database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RPM is a package management tool that stores information about software packages
    in its own database located at `/var/lib/rpm`, but on some occasions, it has been
    observed that this database can fail. If such an event does take place, then this
    can render the use of the `rpm` command useless, and in this situation, it is
    not uncommon to find that the system will begin exhibiting signs of trouble related
    to any Yum- or RPM-based processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, during a typical Yum update procedure, you could witness the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, I cannot help but stress the importance of a good backup strategy,
    but as a troubleshooter, this may be out of your control. Therefore, in such circumstances,
    the rudimentary process of restoring the RPM database can be diagnosed by completing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Having completed the above steps, you should be able to run various sanity
    checks in order to confirm that there are no segmentation errors by using one
    or more of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, having run the command `db_verify Packages`, you should see the
    following type of output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Hopefully, this procedure will fix the issue. However, it is important to realize
    that this process is not definitive and it can fail. Look at it this way, in order
    to avoid this situation, a regular backup of `/var/lib/rpm` should be considered
    to be common practice on all CentOS/RHEL-based systems, and if verification of
    packages process fails, you will need to consider a full restore from a recent
    backup.
  prefs: []
  type: TYPE_NORMAL
- en: Minor release upgrades
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For CentOS 7 users, the ease of completing a minor release upgrade is simply
    a matter of using Yum but, as always, you should perform a full backup before
    proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: The precise nature of the types of files you should back up will differ from
    system to system, but it will include configuration files, important system files,
    user data, databases, web versioning, and application files. Moreover, if you
    are using proprietary software, you should confirm the feasibility of any upgrades
    with the original developers prior to completing an update.
  prefs: []
  type: TYPE_NORMAL
- en: So, having taken all these measures into account, when possible, I would recommend
    the process of backing up the entire system, and in this respect, you can be rest
    assured that you will have a copy of everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin the process of a minor upgrade, you can view the current CentOS release
    information by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then view the Linux information with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, before you invoke Yum to obtain a list of updated packages, it is always
    a good idea to begin by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, follow the instruction to purge Yum, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You will now be presented with a list of updates for the system in question.
    These pending updates will be displayed in a familiar format, and they will detail
    the package name and versioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to update the system, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The time required by any update can vary, so you may need to be patient. However,
    having successfully completed this step, you may want to consider rebooting the
    system. The practice of rebooting a system is particularly advantageous if the
    updates need to effect any changes to the kernel during the boot phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, after the reboot is complete, you can verify your system updates using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run one or more of the following commands to ensure that all services
    and applications are running correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a whirlwind tour through the intricacies of troubleshooting
    package management. There is always much more ground to cover, but for the purpose
    of system administration, you have not only discovered a series of tools that
    can be used to overcome a wealth of common issues related to Yum, but we have
    also discussed the ability to extend Yum through a variety of plugins, install
    third-party repositories, enable Yum to download RPM packages, and restore an
    RPM database.
  prefs: []
  type: TYPE_NORMAL
- en: So, as you can see, and before we move on to a discussion regarding users, directories,
    and files, with some lateral thinking and a little practice, you should now be
    well on your way to being able to troubleshoot an entire host of problems and
    make almost any package management issue a thing of the past.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CentOS upgrade tool: [http://wiki.centos.org/TipsAndTricks/CentOSUpgradeTool](http://wiki.centos.org/TipsAndTricks/CentOSUpgradeTool)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How do I upgrade from Enterprise Linux 6 to Red Hat Enterprise Linux 7?: [https://access.redhat.com/solutions/637583](https://access.redhat.com/solutions/637583)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cpio Wikipedia page: [http://en.wikipedia.org/wiki/Cpio](http://en.wikipedia.org/wiki/Cpio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `cpio` command: [http://www.gnu.org/software/cpio/manual/cpio.html](http://www.gnu.org/software/cpio/manual/cpio.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EPEL/epel7beta-faq: [https://fedoraproject.org/wiki/EPEL/epel7beta-faq](https://fedoraproject.org/wiki/EPEL/epel7beta-faq)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EPEL/epel7: [https://fedoraproject.org/wiki/EPEL/epel7](https://fedoraproject.org/wiki/EPEL/epel7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Index of /pub/epel/7/x86_64/e: [http://dl.fedoraproject.org/pub/epel/7/x86_64/e/](http://dl.fedoraproject.org/pub/epel/7/x86_64/e/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Les RPM de Remi - Blog: [http://blog.famillecollet.com/pages/Config-en](http://blog.famillecollet.com/pages/Config-en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Index of Remi: [http://rpms.famillecollet.com/enterprise/](http://rpms.famillecollet.com/enterprise/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IUS Community Project: [https://iuscommunity.org/pages/IUSClientUsageGuide.html](https://iuscommunity.org/pages/IUSClientUsageGuide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Index of /pub/ius/stable/CentOS: [http://dl.iuscommunity.org/pub/ius/stable/CentOS/](http://dl.iuscommunity.org/pub/ius/stable/CentOS/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The IUS package replacement guide: [https://iuscommunity.org/pages/IUSClientUsageGuide.html](https://iuscommunity.org/pages/IUSClientUsageGuide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The ATrpms repository: [http://atrpms.net/about/](http://atrpms.net/about/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Nux repository: [http://li.nux.ro/repos.html](http://li.nux.ro/repos.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The RPM home page: [http://rpm.org](http://rpm.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The RPM recovery diagnostics: [http://www.rpm.org/wiki/Docs/RpmRecovery](http://www.rpm.org/wiki/Docs/RpmRecovery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
