- en: Scripts for Power Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Syslog entries and generating an alarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and erasing media, disks, and partitions with DD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating graphics and presentations on the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for file integrity and tampering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mounting network file systems and retrieving files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing the web from the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing network traffic headlessly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding binary dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching time from different locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting/decrypting files from a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help power users to get an idea on how to perform certain
    tasks with shell scripts. These tasks include creating syslog entries using the
    `logger` command, taking backups, creating graphics and presentations on the CLI,
    checking file integrity and tampering, mounting network file systems and retrieving
    files, browsing the web, capturing network traffic, finding binary dependencies,
    and encrypting and decrypting a files. In this chapter, users will learn how to
    use scripts to do these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Syslog entries and generating an alarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss the syslog protocol. We'll also learn
    about the `logger` command, which is a shell command and acts as an interface
    for the syslog module. The `logger` command makes entries in the system log. In
    this section, we are also going to create an alarm using a script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, we need to make sure you have a file to make
    an entry.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the `logger` command to enter `file_name` into the `syslog`
    file. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to write a script to create an alarm. Create a `create_alarm.sh` script
    and write the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will see a description of the `logger` command and the `create_alarm`
    script we just wrote:'
  prefs: []
  type: TYPE_NORMAL
- en: The `logger` command made an entry about your file in the `syslog` file, which
    was in the `/var/log` directory of your system. You can check that file. Navigate
    to the `/var/log` directory and run `nano syslog` and you will find the entry
    in that file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a script to create an alarm. We used the `date` command for the date
    and time. We also used the `sleep` command to block the alarm for that particular
    time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backing up and erasing media, disks, and partitions with DD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to discuss the `dd` command. The `dd` command
    stands for *data duplicator*. It is mainly used for converting and copying files.
    In this section, we are going to learn about backing up and erasing a media file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, we need to make sure you have the necessary
    files present in the current directory to take backups, to make copies, and similar
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dd` command is mainly used for converting and copying files. The `if` parameter
    stands for input-file and is a source. `of` stands for output-file and is a source
    where we want to paste data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to copy the contents of one file to another:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to take a backup of the partition or the hard disk:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dd` command is also used to erase all of the contents of the disk. Run
    the following command to delete the contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will see how the preceding commands work:'
  prefs: []
  type: TYPE_NORMAL
- en: We used the `dd` command to copy the contents of the `01.txt` file into the `02.txt`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run this command, we must have super user privileges. Using the `dd` command,
    we took a backup and stored it in the `hdbackup.img` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `dd` command, we erased the contents of the `1.sh` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating graphics and presentations on the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to make presentations and how to
    create graphics on the CLI. For this, we are going to use a tool named **dialog****.**
    `dialog` is a Linux command-line tool used for taking input from users and to
    create message boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, make sure you have the dialog utility installed
    on your system. Install it by using the `apt` command. APT stands for Advanced
    Package Tool. Using the `apt` command, you can manage software from the command
    line for debian-based Linux. The `apt` command easily interacts with the `dpkg`
    packaging system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to write a script for a `Yes`/`No` box. In that script, we are
    going to use the `if` condition. Create the `yes_no.sh` script and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll use dialog''s calendar. Create a `calendar_dialog.sh` script. In that,
    we''ll select a specific date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to use the checklist option of `dialog`. Create a `checklist_dialog.sh `script.
    In that, we''ll select multiple options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to write a script to raise the border of an image. Create
    a `raise_border.sh` script. We''ll use the `convert` command with the `raise`
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will see a description of the options and commands written in the preceding
    scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: We wrote code for a `Yes`/`No` box using the dialog tool in Linux. We used the `if`
    condition to take an answer of either `Yes` or `No`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the `--calendar` option of the dialog tool. It asks for a date to be
    selected. We selected a date from the year 2018.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We used the `checklist` option of the dialog tool. We made a checklist, which
    had three options: Home directory, Signature file, and Simple Password.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We raised the border of an image using the `convert` command and the `–raise`
    option, and then the new image was saved as `mountain-raised.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for file integrity and tampering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how to check the integrity of a file
    and how to check for tampering by writing a simple shell script. Why do we need
    to check integrity? The answer is simple: administrators check integrity when
    there are passwords and libraries present on a server, as well as when files contain
    highly sensitive data.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, you need to make sure the necessary files and
    directories are present.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to write a script to check whether a file in a directory has been
    tampered with. Create an `integrity_check.sh` script and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we run this script, it will create a database file named `filerec.md5`,
    which will have data about all the files present in that directory. We'll use
    those files for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting network file systems and retrieving files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about the `mount` command. To mount a
    file system onto the file system tree, use the `mount` command. This command will
    instruct the kernel to mount the file system found on a particular device. There
    is a mount point in the tree for each partition that is mounted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, make sure you have necessary files and directories
    present to mount
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the `mount` command to mount the file system. Then, we
    are going to use the `ro` and `noexec` options to mount:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can mount the device with default options too. Run the following command
    to mount a device using the default options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scp` command is used to securely transfer files between two hosts. We
    can transfer files from our localhost to a remote host, and also between two remote
    hosts. Run the following command to transfer files from a remote host to our local
    host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used the `ext4` file system. In the `mount` command, we first specified which
    directory we wanted to mount, followed by the directory in which we will mount
    it with the `ro` and `noexec` options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We mounted the directories using the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We used the `scp` command to copy files from a remote host to the local host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browsing the web from the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going learn about browsing the web from the command-line
    interface. We are going to browse the web from the command line using the w3m
    and ELinks browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '**w3m** is a text-based web browser. Using w3m, we can browse web pages through
    our terminal window.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ELinks** is also a text-based web browser. It supports menu-driven configuration,
    frames, tables, browsing, and background downloading. ELinks can handle remote
    URLS as well as local files.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides having a terminal open, we need to remember a couple of things:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have w3m installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you have ELinks installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use see how to use `w3m` to browse the web from the command
    line. After successful installation, just go to the terminal window and type `w3m`
    followed by the website name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to see how to use `elinks` to browse the web from the command
    line. After successful installation, just go to the terminal window and type `elinks`
    followed by the website name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To navigate through the website, use the following keyboard combinations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Shift* + *U*: This combination will open a new web page'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Shift* + *B*: This combination will navigate you to the previous web page'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Shift* + *T*: This combination will open a new tab'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are keyboard shortcuts to navigate through the website using
    ELinks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to URL - g
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new tab - t
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go forward - u
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back - Left
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit - q
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Previous tab - <
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Next tab - >
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Close tab - c
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing network traffic headlessly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to capture traffic. We are going
    to capture network traffic with a packet sniffer tool called **tcpdump**. This
    tool is used to filter or capture TCP/IP packets that are transferred or received
    over a network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides having a terminal open, we need to remember a few concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the tcpdump tool is installed on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are going to use some `tcpdump` commands to capture packets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture packets from an interface, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To print the captured packets in ASCII values, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To capture a specific number of packets, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To print the captured packets in HEX and ASCII, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To capture and save the packets in a specific file, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To capture IP address packets, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To read the captured packets, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now we are going to look at an explanation of `tcpdump` and the commands we
    are using.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used the tcpdump Linux tool, which is used to capture or filter data packets. tcpdump
    is used to capture a packet on a specific interface. We used the `-i` option for
    this. We can save captured packets in a file. Just give the filename and specify
    the `-w` option in the `tcpdump` command. We can read the file by giving the `-r`
    option to read the file in the `tcpdump` command.
  prefs: []
  type: TYPE_NORMAL
- en: Finding binary dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to check the executable. We will find out which
    string is present in it by using the string command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, make sure you have a binary present in your
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will check the executable. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will write a command to find strings within the binary. Run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can hexdump a file by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can list the symbols in the binary by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check which shared library it has been linked with by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will look at an explanation of the previous commands:'
  prefs: []
  type: TYPE_NORMAL
- en: We used the `file` command to get the information about the binary. We also
    got the architecture information by running the `file` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `string` command will return the string within that binary file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running the `od` command, you will get the hexdump of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are symbols present in the binary. You can list those symbols by running
    the `nm` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running the `ldd` command, you can check which shared library your binary
    is linked with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching time from different locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to use the `date` command to fetch
    time from different time zones.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, you need to have a basic knowledge of `date`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to write a shell script to ascertain the time in different time
    zones. To do this, we are going to use the `date` command. Create a `timezones.sh` shell
    script and write the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding script, we used the `date` command to fetch the time. We fetched
    the time from four different continents—Antarctica, Atlantic, Asia, and Europe.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all of the time zones in the `/usr/share/zoneinfo` folder on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting/decrypting files from a script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about OpenSSL. In this section, we are
    going encrypt and decrypt messages and files using OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a terminal open, you need to have a basic knowledge of encoding
    and decoding schemes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to encrypt and decrypt simple messages. We will use the -base64
    encoding scheme. First, we will encrypt a message. Run the following command in
    the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To decrypt the message, run following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to encrypt and decrypt files. First, we will encrypt a file.
    Run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to decrypt a file. Run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OpenSSL** is a tool used for encrypting and decrypting messages, files, and
    directories. In the preceding example, we used the -base64 scheme. The `-d` option
    is used for decryption.'
  prefs: []
  type: TYPE_NORMAL
- en: To encrypt a file, we used the `-in` option, followed by the file that we want
    to encrypt, and the `-out` option instructed OpenSSL to store the file. It then
    stores the encrypted file by the specified name.
  prefs: []
  type: TYPE_NORMAL
