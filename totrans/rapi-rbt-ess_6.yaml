- en: Chapter 6. Adding Vision to Your Biped
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：为你的双足机器人添加视觉功能
- en: Now that your biped is up and mobile, is able to find barriers, and knows how
    to plan its path, you can now start to have it move around autonomously. However,
    you may want your robot to follow a color or motion.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的双足机器人已经可以启动并移动，能够找到障碍物，并且知道如何规划路径，你现在可以让它开始自主移动了。不过，你可能希望让你的机器人跟随某种颜色或运动。
- en: 'In this chapter, you will be learning:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to add a webcam to your biped robot
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将摄像头添加到你的双足机器人
- en: How to add RaspiCam to your biped robot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 RaspiCam 添加到你的双足机器人
- en: How to install and use OpenCV, an open source vision package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装和使用 OpenCV，一个开源的视觉软件包
- en: How to follow motion with your biped robot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何让你的双足机器人跟随运动
- en: Installing a camera on your biped robot
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的双足机器人上安装摄像头
- en: Having vision capability is a real advantage for your biped robot; you'll use
    this functionality in lots of different applications. Fortunately, adding hardware
    and software for vision is both easy and inexpensive. There are two choices as
    far as vision hardware is concerned. You can add a USB webcam to your system,
    or you can add RaspiCam, a camera designed specifically for Raspberry Pi.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有视觉能力对于你的双足机器人来说是一个真正的优势；你将在许多不同的应用中使用这个功能。幸运的是，添加视觉硬件和软件既简单又便宜。关于视觉硬件，有两种选择。你可以向系统中添加一个
    USB 摄像头，或者添加一个专为 Raspberry Pi 设计的摄像头 RaspiCam。
- en: Installing a USB camera on Raspberry Pi
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上安装 USB 摄像头
- en: 'Connecting a USB camera is very easy. Just plug it into the USB slot. To make
    sure that your device is connected, type `lsusb`. You should see the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 连接 USB 摄像头非常简单。只需将其插入 USB 插槽。为了确保设备已连接，输入 `lsusb`。你应该能看到如下内容：
- en: '![Installing a USB camera on Raspberry Pi](img/B04591_06_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![在 Raspberry Pi 上安装 USB 摄像头](img/B04591_06_01.jpg)'
- en: 'This shows a Creative Webcam located at Bus 001 Device 004: ID 041e:4095\.
    To make sure that the system sees this as a video device, type `ls /dev/v*` command
    and you should see something like the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '这显示了一个 Creative 摄像头，位于总线 001 设备 004: ID 041e:4095。为了确保系统将其识别为视频设备，输入 `ls /dev/v*`
    命令，你应该看到类似下面的内容：'
- en: '![Installing a USB camera on Raspberry Pi](img/B04591_06_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![在 Raspberry Pi 上安装 USB 摄像头](img/B04591_06_02.jpg)'
- en: The `/dev/video0` is the webcam device. Now that your device is connected, let's
    actually see if you can capture images and video. There are several tools that
    can allow you to access the webcam, but a simple program with video controls is
    called luvcview. To install this, type `sudo apt-get install luvcview`. Once the
    application is installed, you'll want to run it. To do this, you'll either need
    to be connected directly to a display or able to access Raspberry Pi via a remote
    VNC connection, such as vncserver, as displaying images will require a graphical
    interface.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`/dev/video0` 是摄像头设备。现在设备已经连接，让我们实际看看你是否可以捕捉图像和视频。有几种工具可以让你访问摄像头，但一个带有视频控制的简单程序叫做
    luvcview。要安装这个程序，输入 `sudo apt-get install luvcview`。安装完成后，你需要运行它。为此，你要么需要直接连接显示器，要么能通过远程
    VNC 连接访问 Raspberry Pi，例如使用 vncserver，因为显示图像需要图形界面。'
- en: 'Once you are connected in this manner, open a terminal window on Raspberry
    Pi and run `luvcview`. You should see something like the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦以这种方式连接，打开 Raspberry Pi 上的终端窗口并运行 `luvcview`。你应该看到类似以下内容：
- en: '![Installing a USB camera on Raspberry Pi](img/B04591_06_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![在 Raspberry Pi 上安装 USB 摄像头](img/B04591_06_03.jpg)'
- en: Don't worry about the quality of the image, you'll be capturing and processing
    your images inside of OpenCV, a vision framework.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不必担心图像质量，你将会在 OpenCV 内部捕捉和处理图像，OpenCV 是一个视觉框架。
- en: Installing RaspiCam on Raspberry Pi
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上安装 RaspiCam
- en: 'The other choice for seeing the outside world on Raspberry Pi is to use the
    RaspiCam. Installing this camera is a bit more involved; you are going to connect
    it to a special connector on the Raspberry Pi. The following is a picture of the
    camera with its special connector:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在 Raspberry Pi 上查看外部世界的选择是使用 RaspiCam。安装这个摄像头稍微复杂一些；你将需要将其连接到 Raspberry Pi
    上的特殊接口。下面是带有特殊连接器的摄像头图片：
- en: '![Installing RaspiCam on Raspberry Pi](img/B04591_06_04.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![在 Raspberry Pi 上安装 RaspiCam](img/B04591_06_04.jpg)'
- en: 'You may also want to add the protective cover for the camera; assembling it
    looks like the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可能需要为摄像头添加保护罩；其组装方式如下图所示：
- en: '![Installing RaspiCam on Raspberry Pi](img/B04591_06_05.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![在 Raspberry Pi 上安装 RaspiCam](img/B04591_06_05.jpg)'
- en: Now you are ready to connect the camera to Raspberry Pi. The camera connects
    to the Raspberry Pi by installing it into the connector marked Camera on the Raspberry
    Pi. To see how this is done, see the video at [http://www.raspberrypi.org/help/camera-module-setup/](http://www.raspberrypi.org/help/camera-module-setup/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好将相机连接到树莓派。相机通过将其安装到树莓派上标有“Camera”的连接器上来连接树莓派。要查看具体操作，请参见[http://www.raspberrypi.org/help/camera-module-setup/](http://www.raspberrypi.org/help/camera-module-setup/)上的视频。
- en: 'Now that the camera is connected, you''ll want to enable the camera using the
    `raspi-config` utility. Type `sudo raspi-config`, then select the **Enable Camera**,
    as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 相机连接后，你需要使用`raspi-config`工具启用相机。输入`sudo raspi-config`，然后选择**启用相机**，如以下截图所示：
- en: '![Installing RaspiCam on Raspberry Pi](img/B04591_06_06.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![在树莓派上安装RaspiCam](img/B04591_06_06.jpg)'
- en: 'Now reboot Raspberry Pi. If you are developing from a remote computer and want
    to see your images, you will want to open a vncserver connection between your
    computer and the Raspberry Pi. For details, see [Chapter 1](ch01.html "Chapter 1. Configuring
    and Programming Raspberry Pi"), *Configuring and Programming Raspberry Pi*. To
    take a picture with the camera, simply type `raspistill -o image.jpg`. This will
    take a picture with the camera, and then store the image in the `image.jpg` file.
    Once you have the picture, you can view it by opening the Raspberry Pi image viewer
    by selecting the lower left icon for **Menu**, then **Accessories**, and then
    **Image Viewer**, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在重启树莓派。如果你是从远程计算机进行开发并希望查看你的图像，你需要在计算机与树莓派之间建立一个vncserver连接。详情请参见[第1章](ch01.html
    "第1章 配置和编程树莓派")，*配置和编程树莓派*。要使用相机拍照，只需输入`raspistill -o image.jpg`。这将用相机拍照，并将图像存储在`image.jpg`文件中。一旦获得照片，你可以通过打开树莓派的图像查看器来查看它，方法是点击左下角的**菜单**图标，然后选择**附件**，接着选择**图像查看器**，如以下截图所示：
- en: '![Installing RaspiCam on Raspberry Pi](img/B04591_06_07.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![在树莓派上安装RaspiCam](img/B04591_06_07.jpg)'
- en: 'Open the **image.jpg** file, and you should see the results of your picture:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**image.jpg**文件，你应该能看到你拍摄的照片：
- en: '![Installing RaspiCam on Raspberry Pi](img/B04591_06_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![在树莓派上安装RaspiCam](img/B04591_06_08.jpg)'
- en: Before you can access OpenCV with the Raspberry Pi camera, you'll need to do
    two things. First, you'll need to add a Python library; it is called `picamera`.
    To get this, and the required libraries, type `sudo apt-get install python-picamera
    python3-picamera python-rpi.gpio`. Second, you'll need to type `sudo modprobe
    bcm2835-v4l2`. The Raspberry Pi camera can now be used in the OpenCV examples
    in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能使用树莓派相机访问OpenCV之前，你需要做两件事。首先，你需要添加一个Python库，叫做`picamera`。要获取此库和所需的其他库，输入`sudo
    apt-get install python-picamera python3-picamera python-rpi.gpio`。其次，你需要输入`sudo
    modprobe bcm2835-v4l2`。现在，树莓派相机可以在下一节的OpenCV示例中使用。
- en: Downloading and installing OpenCV – a fully featured vision library
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装OpenCV——一个功能齐全的视觉库
- en: 'Now that you have your camera connected, you can begin to access some amazing
    capabilities that have been provided by the open source community. Open a terminal
    window and type the following commands:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在相机已经连接好，你可以开始使用开源社区提供的一些令人惊叹的功能。打开终端窗口并输入以下命令：
- en: '`sudo apt-get update`: You''re going to download a number of new software packages,
    so it is good to make sure that everything is up to date.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get update`：你将要下载一些新的软件包，所以最好确保所有内容都是最新的。'
- en: '`sudo apt-get install build-essential`: Although you may have done this earlier,
    this library is essential to build OpenCV.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install build-essential`：虽然你可能之前已经执行过此步骤，但这个库对于构建OpenCV是必不可少的。'
- en: '`sudo apt-get install libavformat-dev`: This library provides a way to code
    and decode audio and video streams.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install libavformat-dev`：此库提供编码和解码音频及视频流的功能。'
- en: '`sudo apt-get install ffmpeg`: This library provides a way to transcode audio
    and video streams.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install ffmpeg`：此库提供转码音频和视频流的功能。'
- en: '`sudo apt-get install libcv2.4 libcvaux2.4 libhighgui2.4`: This command shows
    the basic OpenCV libraries. Note the number in the command. This will almost certainly
    change as new versions of OpenCV become available. If 2.4 does not work, either
    try 3.0 or search on Google for the latest version of OpenCV.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install libcv2.4 libcvaux2.4 libhighgui2.4`：此命令展示了基本的OpenCV库。注意命令中的数字。随着OpenCV新版本的发布，这个数字几乎肯定会发生变化。如果2.4版本不起作用，可以尝试3.0版本或在Google上搜索OpenCV的最新版本。'
- en: '`sudo apt-get install python-opencv`: This is the Python development kit needed
    for OpenCV, as you are going to use Python.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install python-opencv`：这是OpenCV所需的Python开发工具包，因为你将使用Python。'
- en: '`sudo apt-get install opencv-doc`: This command will show the documentation
    for OpenCV just in case you need it.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install opencv-doc`：这个命令会展示OpenCV的文档，以防你需要它。'
- en: '`sudo apt-get install libcv-dev`: This command shows the header file and static
    libraries to compile OpenCV.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install libcv-dev`：这个命令展示了编译OpenCV所需的头文件和静态库。'
- en: '`sudo apt-get install libcvaux-dev`: This command shows more development tools
    for compiling OpenCV.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install libcvaux-dev`：这个命令展示了更多用于编译OpenCV的开发工具。'
- en: '`sudo apt-get install libhighgui-dev`: This is another package that provides
    header files and static libraries to compile OpenCV.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sudo apt-get install libhighgui-dev`：这是另一个提供头文件和静态库以编译OpenCV的软件包。'
- en: Now type `cp -r /usr/share/doc/opencv-doc/examples /home/pi/`. This will copy
    all the examples to your home directory.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入`cp -r /usr/share/doc/opencv-doc/examples /home/pi/`。这将把所有示例复制到你的主目录。
- en: 'Now that OpenCV is installed, you can try one of the examples. Go to the `/home/pi/examples/python`
    directory. If you do an `ls`, you''ll see a file named `camera.py`. This file
    has the most basic code for capturing and displaying a stream of picture images.
    Before you run the code, make a copy of it using `cp camera.py myCamera.py`. Then,
    edit the file to look like the following:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在OpenCV已安装，你可以尝试其中一个示例。进入`/home/pi/examples/python`目录。如果你输入`ls`，你会看到一个名为`camera.py`的文件。这个文件包含了最基本的代码，用于捕捉并显示一系列图像。在运行代码之前，使用`cp
    camera.py myCamera.py`命令复制一份文件。然后，编辑文件使其如下所示：
- en: '![Downloading and installing OpenCV – a fully featured vision library](img/B04591_06_09.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![下载并安装OpenCV——一个功能完备的视觉库](img/B04591_06_09.jpg)'
- en: 'The two lines that you''ll add are the two with the `cv.SetCaptureProperty`;
    they will set the resolution of the image to 360 by 240\. To run this program,
    you''ll need to either have a display and keyboard connected to Raspberry Pi or
    use vncviewer. When you run the code, you should see the window displayed, as
    shown in the following image:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将添加的两行代码是带有`cv.SetCaptureProperty`的两行；它们将把图像的分辨率设置为360 x 240。要运行这个程序，你需要连接显示器和键盘到树莓派，或者使用vncviewer。当你运行代码时，你应该能看到显示的窗口，如下图所示：
- en: '![Downloading and installing OpenCV – a fully featured vision library](img/B04591_06_10.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![下载并安装OpenCV——一个功能完备的视觉库](img/B04591_06_10.jpg)'
- en: If you are using RaspiCam and don't see an image, you will need to run the `sudo
    modprobe bcm2835-v4l2` command. Now you can see the outside world!
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用的是RaspiCam但没有看到图像，你需要运行`sudo modprobe bcm2835-v4l2`命令。现在你可以看到外部世界了！
- en: You may want to play with the resolution to find the optimum settings for your
    application. Bigger images are great—they give you a more detailed view on the
    world—but they also take up significantly more processing power. You'll play with
    this more as you actually ask your system to do some real image processing. Be
    careful if you are going to use vncserver to understand your system performance,
    as this will significantly slow down the update rate. An image that is twice the
    size (width/height) will involve four times more processing. You can now use this
    capability to do a number of impressive tasks.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能想调整分辨率，以找到最适合你应用的设置。更大的图像很棒——它们能让你更详细地看到世界——但也会消耗更多的处理能力。当你实际要求系统进行一些真实的图像处理时，你会更多地调整这一点。如果你打算使用
    vncserver 来了解系统性能，要小心，因为这会显著减慢更新率。一个宽高是原来两倍的图像（宽度/高度）将涉及四倍的处理量。现在，你可以利用这个功能来完成一些令人印象深刻的任务。
- en: Edge Detection and OpenCv
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘检测与OpenCv
- en: 'Fortunately, one of the examples in the OpenCV Python set is a program named
    `edge.py`. The following is that file (with blank lines removed):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，OpenCV Python示例集中有一个名为`edge.py`的程序。以下是该文件的内容（去掉了空行）：
- en: '![Edge Detection and OpenCv](img/B04591_06_11.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![边缘检测与OpenCv](img/B04591_06_11.jpg)'
- en: 'This program uses the Canny image detection algorithm implemented by OpenCV
    to find the edges in any image. For more on the Canny edge algorithm, refer to
    [http://dasl.mem.drexel.edu/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html](http://dasl.mem.drexel.edu/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html)
    or [http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html](http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html).
    You captured an image earlier; you can use this program to look at the edges and
    to also see how setting a different threshold can show more/less edges. Run the
    program with the image captured earlier and you will see the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用OpenCV实现的Canny图像检测算法来查找图像中的边缘。更多关于Canny边缘算法的内容，请参考[http://dasl.mem.drexel.edu/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html](http://dasl.mem.drexel.edu/alumni/bGreen/www.pages.drexel.edu/_weg22/can_tut.html)
    或 [http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html](http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html)。你之前已经捕获了一张图片；你可以使用这个程序查看边缘，并且还可以看到设置不同的阈值如何展示更多或更少的边缘。使用之前捕获的图像运行程序，你将看到以下内容：
- en: '![Edge Detection and OpenCv](img/B04591_06_12.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![边缘检测与OpenCv](img/B04591_06_12.jpg)'
- en: 'You will notice that there is a threshold slide bar setting at the top. If
    you adjust this threshold up, it will find fewer edges—the edges that have a larger
    threshold. The picture for a setting of 30 is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到顶部有一个阈值滑块设置。如果你将这个阈值调高，它会找到更少的边缘——那些具有较大阈值的边缘。设置为30时的图片如下所示：
- en: '![Edge Detection and OpenCv](img/B04591_06_13.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![边缘检测与OpenCv](img/B04591_06_13.jpg)'
- en: 'Now you can see how this process could be translated to an image of a blank
    floor and a barrier. The following is such an image with a possible barrier:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到这个过程如何转换为一张空白地板和障碍物的图像。以下是带有可能障碍物的图像：
- en: '![Edge Detection and OpenCv](img/B04591_06_14.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![边缘检测与OpenCv](img/B04591_06_14.jpg)'
- en: You can calibrate the distance to the object based on the pixels and the position
    of the camera.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据像素和相机的位置校准物体的距离。
- en: Color and motion finding
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色与运动检测
- en: 'OpenCV and your webcam can also track colored objects. This will be useful
    if you want your biped to follow a colored object. OpenCV makes this amazingly
    simple by providing some high-level libraries that can help us with this task.
    To accomplish this, you''ll edit a file to look something like what is shown in
    the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV和你的网络摄像头还可以跟踪彩色物体。如果你希望你的双足机器人跟踪一个彩色物体，这将非常有用。OpenCV通过提供一些高级库，使得这个任务变得非常简单。为了实现这一点，你需要编辑一个文件，它的内容看起来应该类似于以下屏幕截图所示：
- en: '![Color and motion finding](img/B04591_06_15.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![颜色与运动检测](img/B04591_06_15.jpg)'
- en: 'Let''s look specifically at the code that makes it possible to isolate the
    colored ball:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们具体看一下使得能够隔离彩色球的代码：
- en: '`hue_img = cv.CvtColor(frame, cv.CV_BGR2HSV):` This line creates a new image
    that stores the image as per the values of **hue** (color), **saturation**, and
    **value** (**HSV**), instead of the **red**, **green**, and **blue** (**RGB**)
    pixel values of the original image. Converting to HSV focuses our processing more
    on the color, as opposed to the amount of light hitting it.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hue_img = cv.CvtColor(frame, cv.CV_BGR2HSV):` 这一行创建了一张新的图像，将图像按**色相**（颜色）、**饱和度**和**亮度**（**HSV**）的值存储，而不是原始图像的**红色**、**绿色**和**蓝色**（**RGB**）像素值。转换为HSV让我们的处理更加关注颜色，而不是照射到它上的光线量。'
- en: '`threshold_img = cv.InRangeS(hue_img, low_range, high_range`): The `low_range,
    high_range` parameters determine the color range. In this case, it is an orange
    ball, so you want to detect the color orange. For a good tutorial on using hue
    to specify color, refer to [http://www.tomjewett.com/colors/hsb.html](http://www.tomjewett.com/colors/hsb.html).
    Also, [http://www.shervinemami.info/colorConversion.html](http://www.shervinemami.info/colorConversion.html)
    includes a program that you can use to determine your values by selecting a specific
    color.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold_img = cv.InRangeS(hue_img, low_range, high_range`): `low_range,
    high_range` 参数决定了颜色范围。在这种情况下，它是一个橙色的球，因此你想检测橙色。关于使用色相来指定颜色的好教程，请参考[http://www.tomjewett.com/colors/hsb.html](http://www.tomjewett.com/colors/hsb.html)。此外，[http://www.shervinemami.info/colorConversion.html](http://www.shervinemami.info/colorConversion.html)
    包含一个程序，你可以使用它来通过选择特定的颜色来确定你的值。'
- en: 'Run the program. If you see a single black image, move this window, and you
    will expose the original image window as well. Now, take your target (in this
    case, an orange ping-pong ball) and move it into the frame. You should see something
    like what is shown in the following screenshot:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行程序。如果你看到一张单独的黑色图像，移动这个窗口，你将看到原始图像窗口被露出。现在，拿起你的目标物体（在本例中是一个橙色的乒乓球），并把它移动到画面中。你应该会看到类似于以下截图的内容：
- en: '![Color and motion finding](img/B04591_06_16.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![颜色和运动检测](img/B04591_06_16.jpg)'
- en: 'Notice the white pixels in our threshold image showing where the ball is located.
    You can add more OpenCV code that gives the actual location of the ball. In our
    original image file of the ball''s location, you can actually draw a rectangle
    around the ball as an indicator. Edit the file to look as follows:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们在阈值图像中显示的白色像素，标示出球的位置。你可以添加更多OpenCV代码来显示球的实际位置。在我们原始图像中的球的位置，你实际上可以在球周围画一个矩形作为指示。编辑文件，使其如下所示：
- en: '![Color and motion finding](img/B04591_06_17.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![颜色和运动检测](img/B04591_06_17.jpg)'
- en: 'The added lines look like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的线条看起来像这样：
- en: '`hue_image = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV):` This line creates a hue
    image out of the RGB image that was captured. Hue is easier to deal with when
    trying to capture real world images; for details, refer to [http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_Changing_ColorSpaces_RGB_HSV_HLS.php](http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_Changing_ColorSpaces_RGB_HSV_HLS.php).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hue_image = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV):` 这行代码将捕获的RGB图像转换为色相图像。在捕获真实世界图像时，色相处理起来更加方便；有关详细信息，请参阅[http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_Changing_ColorSpaces_RGB_HSV_HLS.php](http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_Changing_ColorSpaces_RGB_HSV_HLS.php)。'
- en: '`threshold_img = cv2.inRange(hue_image, low_range, high_range):` This creates
    a new image that contains only those pixels that occur between the `low_range`
    and `high_range` n-tuples.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold_img = cv2.inRange(hue_image, low_range, high_range):` 这会创建一张新图像，只包含那些位于`low_range`和`high_range`元组之间的像素。'
- en: '`contour, hierarchy = cv2.findContours(threshold_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE):`
    This finds the contours, or groups of like pixels, in the `threshold_img` image.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contour, hierarchy = cv2.findContours(threshold_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE):`
    这段代码查找`threshold_img`图像中的轮廓，即一组相似的像素。'
- en: '`center = contour[0]:` This identifies the first contour.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center = contour[0]:` 这识别了第一个轮廓。'
- en: '`moment = cv2.moments(center):` This finds the moment of this group of pixels.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moment = cv2.moments(center):` 这段代码计算这一组像素的矩。'
- en: '`(x,y),radius = cv2.minEnclosingCircle(center):` This gives the *x* and *y*
    locations and the radius of the minimum circle that will enclose this group of
    pixels.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(x,y),radius = cv2.minEnclosingCircle(center):` 这会给出包围这组像素的最小圆的*x*和*y*位置以及半径。'
- en: '`center = (int(x),int(y)):` Find the center of the *x* and *y* locations.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center = (int(x),int(y)):` 找到*x*和*y*位置的中心。'
- en: '`radius = int(radius):` The integer radius of the circle.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius = int(radius):` 圆的整数半径。'
- en: '`img = cv2.circle(frame,center,radius,(0,255,0),2):` Draw a circle on the image.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`img = cv2.circle(frame,center,radius,(0,255,0),2):` 在图像上画一个圆。'
- en: 'Now that the code is ready, you can run it. You should see something that looks
    like the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经准备好，你可以运行它。你应该会看到类似于以下截图的内容：
- en: '![Color and motion finding](img/B04591_06_18.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![颜色和运动检测](img/B04591_06_18.jpg)'
- en: You can now track your object. You can modify the color by changing the low_range
    and high_range n-tuples. You also have the location of your object, so you can
    use the location to do path planning for your robot.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以跟踪你的物体了。你可以通过更改`low_range`和`high_range`元组来修改颜色。你还知道了物体的位置，可以利用这个位置为机器人进行路径规划。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Your biped robot can walk, use sensors to avoid barriers, plans its path, and
    even see barriers or target. In the final chapter, you'll learn to connect your
    biped robot remotely so that you can control it and monitor it, without the wires.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你的双足机器人可以行走，使用传感器避开障碍物，规划路径，甚至能够看到障碍物或目标。在最后一章中，你将学会如何远程连接你的双足机器人，从而控制和监视它，而无需任何电线。
