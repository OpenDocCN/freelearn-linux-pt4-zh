- en: Chapter 8. Managing Domains and DNS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up BIND as a resolving DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring BIND as an authoritative DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a reverse lookup zone file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a slave DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `rndc` to control BIND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll find recipes that cover working with BIND in various
    capacities to manage your domain infrastructure better. You'll learn how to configure
    BIND as a resolving DNS server capable of caching lookup results which can help
    reduce latency, and also how to configure BIND as an authoritative DNS server
    to provide authoritative responses publicly for your domain or for resources on
    your private intranet. Also discussed are handling reverse lookup requests and
    ensuring your resources remain accessible by configuring redundant, secondary
    authoritative DNS servers that perform master/slave-style transfers of zone records.
    Finally, you'll learn how to set up and use `rndc`, a very useful administration
    client for BIND servers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up BIND as a resolving DNS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to set up a resolving DNS server using BIND. Domain
    Name Service (DNS) is the unsung workhorse of the Internet, which translates memorable
    names such as `facebook.com` and `google.com` to IP addresses such as `172.217.18.238`
    and `31.13.76.68`.
  prefs: []
  type: TYPE_NORMAL
- en: Communication across the Internet uses IP addresses to identify systems, but
    numbers are hard for people to remember. For example, it's easier for us to remember
    `google.com` than `172.217.18.238` (or the IPv6 address `2607:f8b0:4006:80e::200e`).
    So, when you type `google.com` in your browser's address bar, your system queries
    a DNS server to resolve the name to its IP address and then requests the page
    from the web server at that address. When you write an e-mail, a DNS server retrieves
    the IP address of the recipient's mail server before the message is sent.
  prefs: []
  type: TYPE_NORMAL
- en: A resolving DNS server maintained by your service provider is probably the first
    server to receive such lookup requests and it will respond immediately if it already
    happens to know the address. If not, it contacts the DNS servers in the requested
    domain's parent zone and receives either a referral to the authoritative DNS server
    of the requested domain or to servers in the next zone in the DNS hierarchy. If
    the request reaches the top of the hierarchy without being referred to an authoritative
    server, then the domain doesn't exist. Otherwise, the authoritative server sends
    the address back to your resolving server. The resolver then caches the response
    so that future lookups will complete faster.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your network and how many servers are involved in resolving an
    address, DNS lookups can become a significant source of latency. Address records
    should be found within the first one or two hops, and the resolving server should
    be physically close to the user for best performance. Because of this, setting
    up a local DNS server to cache lookup results can greatly improve how users experience
    the speed of your network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.10`. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install BIND as a resolving DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `bind` and `bind-util` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open BIND''s configuration file at `/etc/named.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `listen-on` option inside the braces of `options`. Update its list
    to reflect the system''s IP addresses BIND will use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of `listen-on-v6` similarly if you want to service IPv6 requests.
    Otherwise, update the value to `none`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `allow-query` option with the list of IP addresses that BIND is
    allowed to accept requests from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes to the configuration file and close it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start BIND with `systemctl`, optionally enable it to start automatically when
    the system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable FirewallD''s `dns` service to open port `53` to TCP and UDP traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request a lookup using `dig` to test the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'BIND is configured as a resolving DNS server by default but we still want to
    update a few options to define how it accepts lookup requests. The first change
    is to the `listen-on*` options found in the `options` section which specify the
    port and network interface BIND listens on for requests. `listen-on` applies to
    IPv4 networks and `listen-on-v6` applies to IPv6\. In both cases, the standard
    port for DNS traffic is port `53`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we updated the `allow-query` option, providing a whitelist of systems
    that BIND may accept requests from. Addresses can be provided individually or
    written in CIDR notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using the predefined values such as `any`, `localhost`, `localnets`, and `none`
    is also acceptable. Intuitively, `any` represents all addresses, allowing BIND
    to listen on all of the system's configured addresses or accept requests from
    any source, whereas `none` disallows everything. `localhost` represents all of
    the system's addresses and `localnets` represents all addresses on all of the
    networks the system is a member of.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful that the `local` in `localhost` and `localnets` doesn't give you
    a false sense of security. If your system is connected to multiple networks, for
    example, a public network (such as the Internet) and a private internal network,
    both of them are considered local. Allowing access from untrusted networks is
    a serious risk without the necessary security measures in place because an open
    DNS server can be abused by malicious users intent on carrying out several types
    of denial of service attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'After BIND''s configuration is updated and it''s up and running, we can test
    everything by sending a lookup request with `dig` and inspect the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Requests can be sent to a specific DNS server with `dig` by providing the targeted
    server's address prefixed by `@`. If a DNS server isn't given in the invocation,
    `dig` will send the request to the servers listed in your system's `/etc/resolve.conf`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: After the address of the DNS server, we gave the resource name we're interested
    in followed by the desired record type. In the preceding example, the Address
    (`A`) record for `google.com` is sought. Other types can be queried too, such
    as the Name Server (`NS`) and Mail Exchange (`MX`) records.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: dig queries the DNS servers and displays their response
  prefs: []
  type: TYPE_NORMAL
- en: The response from `dig` is organized into several sections. The **ANSWER SECTION** shows
    the `A` record we requested. The **AUTHORITY SECTION** lists the authoritative
    DNS servers configured for the requested domain, and the **ADDITIONAL SECTION** shows
    the IP addresses of the authoritative servers. Various metadata is included throughout,
    such as which flags were set in the request, which DNS server was queried, and
    how long the lookup took to complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re satisfied with the testing results, you can configure the systems
    on your network to use the new DNS server. This is typically done by adding a
    `nameserver` entry in each system''s `/etc/resolv.conf` file that provides the
    DNS server''s address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`resolv.conf` may be dynamically generated depending on how the system''s interfaces
    are configured. If this is the case, any changes you make in the file will be
    overwritten. You''ll need to inspect the interfaces'' configuration files (for
    example, `/etc/sysconf/network-scripts/ifcfg-enp0s3`), and if `PEERDNS` is set
    to `yes` then `resolv.conf` is maintained by the network manager. Add the `DNS`
    entry in the interface''s configuration and the DNS server''s address will make
    its way into `resolve.conf` the next time the interface is brought up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Bounce the interface after updating the configuration for the change to take
    effect and verify the contents of `resolve.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Resolving DNS servers are sometimes called recursive servers because they send
    lookup requests to each level in the zone hierarchy until they find an answer.
    Forwarding DNS servers function similarly to resolving/recursive servers, in that
    both types accept lookup requests and cache the results for expediency; however,
    forwarding servers send their requests to another DNS server and wait for the
    response, delegating the resolution process instead of tracking down the answer
    itself. This can offload a lot of the network chatter produced by a resolving
    DNS server trying to service a request.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure BIND to run as a forwarding DNS server, open `/etc/named.conf`
    again and add the `forwarders` and `forward` options to the `options` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `forwarders` option provides a list of DNS servers responsible for resolving
    lookup requests. The example identifies Google's public DNS servers but your service
    provider should also maintain public DNS servers that you can use if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '`forward only` forces BIND to forward requests to the responsible servers listed
    in `forwarders`. Only when the responsible server fails to return an address or
    a referral, will BIND contact the root servers for the domain''s authoritative
    DNS servers and service the request itself. Recursion isn''t completely turned
    off on a forwarding server but it is greatly reduced.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following resources will provide you with more information on how DNS works
    and how to configure BIND:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dig` manual page (`man 1 dig`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Introduction to DNS Terminology ([http://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts](http://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS for Rocket Scientists ([http://www.zytrax.com/books/dns/](http://www.zytrax.com/books/dns/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How DNS Works ([http://howdns.works/](http://howdns.works/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BIND 9 Administrator Reference Manual ([http://www.isc.org/downloads/bind/doc/](http://www.isc.org/downloads/bind/doc/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Networking Guide: BIND ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-BIND.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-BIND.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS & BIND by Cricket Liu and Paul Albitz ([http://shop.oreilly.com/product/9780596100575.do](http://shop.oreilly.com/product/9780596100575.do))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring BIND as an authoritative DNS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A benefit to hierarchical structures is that the responsibility for subordinate
    nodes can be delegated. Although the Internet Corporation for Assigned Names and
    Numbers (ICANN) has authority over the DNS directory, it delegates the responsibility
    to accredited registrars for top-level domains, such as `com`, `net`, and `org`,
    and delegates to the appropriate governmental agencies for country top-level domains,
    such as `ca`, `de`, and `es`. Registrars delegate responsibility to you when you
    register a domain and you may further delegate the responsibility for your subdomains
    however you please. Each boundary formed by delegating responsibility creates
    what is known as a DNS zone.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe teaches you how to configure BIND to operate as an authoritative
    DNS server for your zone. If you recall the previous recipe's discussion on how
    a DNS request propagates, you'll remember that authoritative servers have the
    final say for a resolution. This is because its information comes from outside
    the DNS system, from an administrator who manually configures the zone's information.
    You'll also learn how to write a zone file with information such as mapping hostnames
    to IP addresses, which, I promise, isn't as scary as it might look at first glance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with BIND configured as a resolving DNS
    server, as described in the previous recipe (BIND's configuration will be updated
    to operate as an authoritative server). Administrative privileges are also required,
    either by logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the advice of RFC-2606 (Reserved Top Level DNS Names), I''ll use
    the `example.com` domain for illustration. If you have your own domain name then
    feel free to substitute. Also for the sake of illustration, the recipe will reflect
    a network of various servers that handle the different services one commonly finds
    in a domain, such as e-mail servers and web servers. The systems are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ns1`: Hosts the domain''s primary authoritative DNS server with the IP address
    `192.168.56.10` (this is the system we''ll be working on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ns2`: Hosts a secondary authoritative DNS server with the address `192.168.56.20`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail`: Hosts the primary e-mail server with the address `192.168.56.12`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mail2`: Hosts a secondary e-mail server with the address `192.168.56.22`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`www`: Hosts a web and FTP server with the address `192.168.56.100`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure BIND as an authoritative DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `/etc/named.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the `listen-on*` and `allow-query` options are configured as described
    in the previous recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of the `recursion` option to `no` to disable BIND''s recursive
    lookup behavior completely:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the file, add the following zone configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `/var/named/zones` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the zone file `/var/named/zones/example.com.fwd` with the following
    content (our discussion in *How it works...* will help you understand the meaning
    of each record):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the directory and zone file have the correct ownership and access
    permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart BIND for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request a lookup using dig to test the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The only records an authoritative DNS server should serve are those with authoritative
    information about its zones, so we began by disabling `recursion` in BIND''s configuration
    file. When disabled, BIND won''t forward requests or try to resolve a lookup request
    for non-authoritative records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we added a short section at the end of the configuration file that specifies
    how the BIND server should function for the `example.com.` zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The section starts with the keyword `zone` to denote a zone configuration and
    is followed by the zone's name given as a fully qualified domain name (FQDN).
    FQDNs always end with a dot because they include all of the delegated paths, including
    the root. Since the root of the DNS system doesn't have a name, its separator
    appears as a trailing dot. Thus, `example.com.` is fully qualified but `example.com`
    is not. (Some people misuse the term FQDN when they're really talking about partially
    qualified domain names. This is one of my irrational pet peeves so consider yourself
    warned.)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thinking about how you navigate the filesystem can help you understanding the
    difference between the fully qualified and partially qualified names. Navigation,
    when the absolute (fully qualified) path `/var/named` is given, begins at the
    root of the filesystem, descends into the `var` directory, and then into `named`.
    The root directory has no name other than its separator. However, the relative
    (partially qualified) path `var/named` doesn't start with the separator. Its navigation
    begins where the current directory happens to be at the moment. Domain names are
    similar, but they list traverse the hierarchy backwards toward the root, and the
    dot is used as a separator instead of a slash.
  prefs: []
  type: TYPE_NORMAL
- en: The `type master` option specifies this server as the zone's primary authoritative
    DNS server. A common deployment strategy sets up several authoritative servers
    in a master/slave configuration. An administrator updates the zone information
    on the primary, which is identified as the master; the information is then transferred
    to one or more slaves acting as secondary authoritative DNS servers. You'll learn
    how to set this up in the *Setting up a slave DNS server* recipe, but for now
    we'll only focus on the primary server.
  prefs: []
  type: TYPE_NORMAL
- en: The `allow-transfers` option lists the slave systems this server is allowed
    to respond to when a request is received for zone information transfers, but since
    we don't (yet) have a secondary authoritative DNS server configured, we've used
    `none` to disable transfers. This helps to protect us from a specific type of
    denial of service attack. Resource records are small enough to fit in a UDP packet
    or two during normal lookup activity, but zone transfers transmit all of the records
    in bulk over TCP. Malicious users repeatedly sending transfer requests in quick
    succession can saturate your network.
  prefs: []
  type: TYPE_NORMAL
- en: The zone's information is stored in a text file known as a **zone file** whose
    location is given with the `file` option. The convention followed in this chapter
    places the files in a `zone` directory under `/var/named` and uses `fwd` and `rev`
    as file extensions to indicate whether the file is a forward lookup or a reverse
    lookup zone file. Thus, our file is saved as `/var/named/zones/example.com.fwd`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe's file is a forward zone file because it maps names to their IP
    addresses. A reverse lookup zone maps the inverse relationship, which is addresses
    to names. They are discussed in the *Writing a reverse lookup zone file* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I've seen a handful of different conventions followed when it comes to naming
    zone files. Some administrators use `zon` or `zone` as the file's extension. Some
    will separate the zone files in the directories named `fwd-zone` and `rev-zone`.
    Honestly, it really doesn't matter what you do as long as you stay consistent
    `systemctl restart named.servicent` and your files are well organized.
  prefs: []
  type: TYPE_NORMAL
- en: '`$TTL` is the first directive given in the zone file and gives the default
    length of time a resolving DNS server may cache records it receives from the authoritative
    server. Specific records may provide their own TTL, which overrides this default
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$ORIGIN` directive provides the FQDN identifying the zone. Any `@` appearing
    in the file will be replaced by the value of `$ORIGIN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The remaining entries are collectively called resource records and are made
    up of a series of fields in the order `name ttl class type values`. The `name`
    field gives the name of the resource that owns the record. If blank, its value
    defaults to the name used in the previous record. `ttl` is also optional, defaulting
    to the value of `$TTL`. And for our purposes, `class` will always be `IN` because
    we're writing the Internet resource records. The other classes are `CH` for Chaos
    and `HS` for Hesiod but they aren't in widespread use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first record in the file must be the start of authority (`SOA`) record
    which identifies that this server is the authoritative DNS server for the zone.
    The values for a `SOA` record are the name of the primary authoritative server
    for the zone (we supplied `ns1`), an e-mail address for the person responsible
    for the zone (`hostmaster.example.com.`), a serial number (`2016041501`), refresh
    duration (`12h`), retry duration (`5m`), expiration duration (`2w`), and the length
    of time negative responses (sent when the requested record doesn''t exist) from
    the server can be cached (`3h`). Records are usually written as single-line entries,
    but parentheses permit us to split the record over several lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `@` variable that would normally appear in the e-mail addresses is changed
    to a dot in `hostmaster.example.com.` because `@` has special meaning in zone
    files. Also notice which names are fully qualified. Names that aren't fully qualified
    will have the FQDN appended automatically, so `ns1` is understood as `ns1.example.com.`.
    If the e-mail address's domain part wasn't fully qualified then `hostmaster.example.com`
    would be treated as `hostmaster.example.com.example.com.`, which certainly isn't
    what we want.
  prefs: []
  type: TYPE_NORMAL
- en: Values beyond that in the `SOA` record are primarily of interest to the slave
    DNS servers. The refresh value informs the slave how often it should try to refresh
    its copy of the zone file. The retry duration tells the slave how long it should
    wait between connection attempts if the master is unreachable, and the expiry
    value specifies how long the slave can satisfy lookup requests as an authoritative
    server with its copy of the zone file if contact with the master is completely
    lost. The negative TTL is the length of time a resolver should cache negative
    responses from a DNS server, for example, `NXDOMAIN` and `NODATA` responses.
  prefs: []
  type: TYPE_NORMAL
- en: The serial number is an arbitrary that 10-digit value slaves can use to differentiate
    this version of the zone file from previous versions. Anytime you update the file,
    you must also update the serial number. A popular convention is to use the current
    date followed by a sequence counter. For example, April 15, 2016 is written as
    `20160415` and then two additional digits are added to identify multiple updates
    during the same day (`2016041501`, `2016041502`, `2016041503`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we gave the `NS` records that identify the zone''s authoritative DNS
    servers. The `SOA` and `NS` records are mandatory in every zone file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `NS` records identify the names of the authoritative servers. In the preceding
    example, we defined `n1` and `n2` as the zone's authoritative DNS servers which
    are understood as `ns1.example.com.` and `ns2.example.com.` since they are not
    fully qualified. The `A` records map a name to its address (`AAAA` is used for
    IPv6 addresses). The records we wrote in the example say `ns1.example.com.` can
    be reached at `192.168.56.10` and `ns2.example.com.` can be reached at `192.168.56.20`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NS` records belong to the zone but I left the first field of the `NS`
    records blank since the field defaults to the name used in the last record. In
    this case, the name happens to be `@` from the `SOA` record (which is `$ORIGIN`).
    Any of the following alternatives mean the same and are equally acceptable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: However, be careful because the `MX` records also belong to the zone. As we
    begin the next set of records, the last name is `ns2` from that server's `A` record.
    This means the first `MX` record must provide either `@`, `$ORIGIN`, or `example.com.`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MX` records define the names of the servers responsible for handling e-mail
    for the zone. The mailers are assigned a relative preference and a client will
    try to communicate with the mail server with the lowest preference first. If the
    server is unreachable, the client attempts to connect to the next lowest until
    it exhausts the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Our configuration defines the principal mail server `mail.example.com.` with
    the IP address `192.168.56.12` and a relative preference of 10\. The second server,
    perhaps a backup in the event of an outage, is `mail2.example.com.` at `192.168.56.22`
    with a preference of 20.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, we defined records that identify our zone''s web server and other aliases
    for the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The ubiquity of `www` appearing at the beginning of URLs has waned since the
    good old days of the dot-com era. Still, many zones resolve the addresses both
    with and without `www` to the same IP. Our configuration does the same, returning
    `192.168.56.100` for lookups of both `example.com` or `www.example.com`. This
    is accomplished by creating the `A` record that maps the domain to the web server's
    address and then a Canonical Name (`CNAME`) record that aliases `www` to the domain's
    `A` record. Our configuration also aliases `ftp` to the `A` record so that users
    can upload their site's files to the web server using the address `ftp.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on running a DNS server
    and managing your domain:'
  prefs: []
  type: TYPE_NORMAL
- en: BIND 9 Administrator Reference Manual ([http://www.isc.org/downloads/bind/doc](http://www.isc.org/downloads/bind/doc))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five Basic Mistakes Not to Make in DNS ([http://archive.oreilly.com/pub/a/sysadmin/2007/04/26/5-basic-mistakes-not-to-make-in-dns.html](http://archive.oreilly.com/pub/a/sysadmin/2007/04/26/5-basic-mistakes-not-to-make-in-dns.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BIND for the Small LAN ([http://www.madboa.com/geek/soho-bind](http://www.madboa.com/geek/soho-bind))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC-1034: Domain Concepts and Facilities ([https://tools.ietf.org/html/rfc1034](https://tools.ietf.org/html/rfc1034))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC-1035: Domain Names-Implementation and Specification ([https://tools.ietf.org/html/rfc1035](https://tools.ietf.org/html/rfc1035))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC-1912: Common DNS Operational and Configuration Errors ([https://tools.ietf.org/html/rfc1912](https://tools.ietf.org/html/rfc1912))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a reverse lookup zone file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now we've treated DNS requests as forward facing lookups, translating
    resource names like `www.example.com` to an IP address. However, services can
    also ask a DNS server to resolve information in the opposite direction by providing
    an IP address and want to know what name it's associated with. Reverse lookups
    such as these are especially useful for logging or authentication and security
    purposes. For example, a system can query a DNS server to verify that a client
    really is connecting from the system they claim. To accommodate such requests,
    this recipe shows you how to write a reverse lookup zone file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with BIND installed and configured as described
    in the previous recipes. Administrative privileges are also required, either by
    logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a reverse lookup zone:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open BIND''s configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following zone entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `/etc/named/zones/example.com.rev` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that the zone file has the correct ownership and access permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart BIND for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform a reverse DNS lookup using `dig` to test the zone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reverse lookup zones are just like any other zones defined by a zone file. So,
    hopefully nothing in this recipe came as a big surprise to you. Nevertheless,
    there are still a few points worth reviewing.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the zone''s name is constructed by combining the network''s address
    with the special domain `in-addr.arpa`, which is used to define reverse-mapped
    IP addresses (`ip6.arpa` is used for IPv6). The order of the address''s octets
    is reversed to maintain consistency with domain names that read from the most
    specific to the most broad. Thus, `56.168.192.in-addr.arpa.` is the FQDN for reverse
    lookups on addresses in the `192.168.56/24` address space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe names the zone file as `example.com.rev` so that it will sort alongside
    the forward zone file `example.com.fwd` in directory listings. Other conventions
    might name the file as `56.168.192.in-addr.arpa.zone`. Again, regardless of whatever
    convention you choose, the key thing is to be consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind the expansion and substitution rules we''ve discussed when writing
    a reverse zone file, most importantly that partially qualified names are interpreted
    in the context of `$ORIGIN`. We can get away writing just the primary authoritative
    DNS server''s hostname in a forward lookup zone''s `SOA` record, but we need to
    make sure that the names are fully qualified in a reverse file to prevent them
    from being treated as `ns1.56.168.192.in-addr.arpa.`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'A pointer record (`PTR`) relates an IP address back to a resource name. Apart
    from the `SOA` and `NS` records (as they are mandatory records in any zone file),
    the only other type of record that can appear in a reverse file is `PTR`. A consequence
    of this is that multiple records are needed to correctly inverse any aliases created
    with the `CNAME` records in the forward file. Since we used `www` and `ftp` as
    aliases for `example.com.`, which resolve to `192.168.56.100`, three records for
    the address appears in the reverse zone file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test the zone configuration with `dig` using the `-x` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '`-x` lets `dig` know that we''re performing a reverse lookup. We provide the
    IP address as we would normally write it and `dig` will reverse its octets and
    append the `in-addr.arpa` domain for us when it sends the request.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with reverse
    zones and lookups:'
  prefs: []
  type: TYPE_NORMAL
- en: BIND 9 Administrator Reference Manual ([http://www.isc.org/downloads/bind/doc/](http://www.isc.org/downloads/bind/doc/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS Reverse Mapping ([http://www.zytrax.com/books/dns/ch3/](http://www.zytrax.com/books/dns/ch3/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classless `in-addr.arpa.` delegation ([http://www.indelible.org/ink/classless](http://www.indelible.org/ink/classless))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a slave DNS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redundancy is important to ensure key services remain available in the event
    of an issue. As DNS is one of the most critical components of a network, whether
    it's a private intranet or the public Internet, having only one authoritative
    DNS server is unwise. In fact, IANA's *Technical Requirements for Authoritative
    Name Servers* document states that there must be a minimum of two different authoritative
    name servers for the zone. This recipe shows you how to configure a second BIND
    installation to act as a secondary authoritative server that receives its zone
    information from the primary in a master/slave configuration. A lookup request
    can then be satisfied by either server and be considered an authoritative response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires two CentOS systems with BIND installed and configured as
    described in earlier recipes. Use the network described by the *Configuring BIND
    as an authoritative DNS server* recipe. This recipe assumes that the system to
    serve as the master is configured as `192.168.56.10` and the slave is `192.168.56.20`.
    Administrative privileges are also required, either by logging in with the `root`
    account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure BIND as a secondary authoritative DNS server
    that receives its zone information from the primary:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the system running the slave instance of BIND, open `named.conf` and configure
    the `example.com.` zone as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure its reverse zone as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the slave for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the system running the master instance of BIND, open `named.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `example.com.` zone''s `allow-transfer` entry with the addresses
    of the slave. The zone''s configuration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the same change to the reverse zone configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the master for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the slave, test the configuration using `dig` to request a zone transfer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Slave servers request a zone transfer when notified by the primary authoritative
    DNS server that the zone''s records have changed and when the copy of the zone
    file maintained by the slave expires according to the `SOA` record. In this recipe,
    we began with two systems running BIND and edited their configurations to allow
    the transfer. We began on the system targeted as the slave, configuring both the
    forward and reverse lookup zones we''ve worked with earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The `type slave` option instructs this server to act as a secondary server for
    the zone. Since designating the master and slave is done on a per-zone basis,
    it's possible for the same instance of BIND to be the master for one zone and
    a slave for another. The `masters` option provides the address of the primary
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The `file` option provides the location where BIND will write the transferred
    zone information. Not only is it good for the organization to keep the transferred
    zones separate from any primary zone files on the system, but it's also good for
    security. BIND needs write permissions to the directory to save the transferred
    files, but the primary zone files should be read-only to anyone except the administrator
    (that is, `root`) as a safeguard from any tampering. Our configuration saves them
    to `/var/named/slaves`, which was created when we installed the `bind` package
    and already has the appropriate permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The `allow-transfers` option lists the systems this server is allowed to respond
    to for zone transfer requests. To protect ourselves from possible abuse, we set
    the value to none, which disallows transfers from the secondary server. All transfers
    will be serviced by the primary authoritative DNS server, and even then it will
    only send them to the slave.
  prefs: []
  type: TYPE_NORMAL
- en: BIND sends a notification to the secondary authoritative servers listed in a
    zone's `NS` records each time the zone is reloaded. There's no reason for the
    slave to send a notification to other secondaries (if you configure more than
    one slave) because they are already notified by the primary, so we turned off
    this behavior with `notify no`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you want you can send notifications to other servers along with
    those listed in the zone file with the `also-notify` option. This is useful if
    you have additional secondary servers which you don''t want to make public with
    `NS` records or if you want to notify some other automated process. Simply provide
    the addresses of the servers you want to notify with `also-notify`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To notify only those servers listed in `also-notify` and not the secondary
    authoritative servers, set `notify` to `explicit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we updated the master''s configuration, giving the slave''s address with
    `allow-transfers` to permit the master to respond to zone transfer requests from
    the slave:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After restarting BIND for our changes take effect, we can test the configuration
    by using `dig` to request a zone transfer from the master while on the slave system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to increment the serial number in the `SOA` record whenever you update
    a zone configuration. The slave checks the serial before updating its zone information
    and won't update it if the value hasn't changed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on configuring and working
    with zone transfers:'
  prefs: []
  type: TYPE_NORMAL
- en: BIND 9 Administrator Reference Manual ([http://www.isc.org/downloads/bind/doc/](http://www.isc.org/downloads/bind/doc/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS for Rocket Scientists ([http://www.zytrax.com/books/dns/](http://www.zytrax.com/books/dns/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements for authoritative name servers ([http://www.iana.org/help/nameserver-requirements](http://www.iana.org/help/nameserver-requirements))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the AXFR protocol works ([http://cr.yp.to/djbdns/axfr-notes.html](http://cr.yp.to/djbdns/axfr-notes.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Pattern for DNS Architecture ([http://www.allgoodbits.org/articles/view/5](http://www.allgoodbits.org/articles/view/5))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing an Internet Name Server ([http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=52493](http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=52493))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring rndc to control BIND
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`rndc` is the client utility for managing BIND servers. However, before you
    can use it, both `rndc` and BIND need to be configured. This recipe shows you
    how to configure them and then shows you a few commands for managing the server''s
    cache.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with BIND installed and configured as described
    in the previous recipes. Administrative privileges are also required, either by
    logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these steps to configure `rndc:`
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `rndc-confgen` utility to generate the necessary key file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/etc/rndc.conf` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure the correct ownership and access permissions for `rndc.key` and `rndc.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/named.conf` and add the following configuration settings after the
    closing brace of the `options` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart BIND for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the configuration by using `rndc` to request BIND''s status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Communication between `rndc` and BIND requires a shared key for authorization.
    So, first we used `rndc-confgen` to create one. In a normal operation without
    arguments, the program generates the key and necessary configuration fragments
    and dumps everything to the screen. You can cut and paste sections of the output
    into the appropriate files, but if you only have access with a terminal and keyboard
    then this could prove difficult. Instead, we ran the program with `-a` for it
    to generate the key''s definition and dump it to its own configuration file and
    we''ll type the other configuration pieces manually. The `-c` argument simply
    specifies our desired name for the key definition''s file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some people report that `rndc-confgen` appears to crash on their system. If
    you experience this, the most likely reason is that it''s waiting for sufficient
    data to generate the secret, but the entropy pool for `/dev/random` is starved
    which causes `rndc-confgen` to wait. Terminate the process and try again using
    `-r` to specify `/dev/urandom` as an alternate source:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**rndc-confgen -a -c /etc/rndc.key -r /dev/urandom**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick peek inside `/etc/rndc.key` reveals the key''s definition as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '`rndc` uses a configuration file of its own. So, next we created `/etc/rndc.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: We include the key definition from `rndc.key` and specify it as the default
    key for `rndc` to use. We also specified the local loopback address as the default
    server and 953 as the default port. With these configuration options, `rndc` attempts
    to connect to the locally running BIND server without the need for us to provide
    extra arguments at the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last, we BIND to allow and authenticate rndc''s connection requests. So, we
    again include the key definition and add a `controls` block in `named.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The `inet` statement specifies which addresses are allowed to connect and the
    keys they need to authenticate. The first address lists which address BIND will
    listen on for connection requests. The configuration is intentionally restrictive
    for the sake of security and only allows us to use `rndc` locally—BIND listens
    on the local address and services commands sent from the local address.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use `rndc` for remote administration, I recommend you against
    opening access and instead use SSH to log into the remote system and it''s copy
    of `rndc`. BIND''s control channel remains closed to anyone up to no good, you
    don''t need to distribute copies of the key file, and communication between the
    two systems is encrypted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can save typing by creating an `alias`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**alias rndc-ns1="ssh 192.168.56.10 rndc"** **rndc-ns1 status**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When invoked without a subcommand, `rndc` displays a usage message enumerating
    the actions we can perform. The `status` command outputs BIND''s current status
    including how many zones are configured, if any zone transfers are in progress,
    and in the case of a resolving DNS server, how many queries it''s currently trying
    to resolve through recursion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_08_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: rndc is used to manage BIND DNS servers
  prefs: []
  type: TYPE_NORMAL
- en: 'You may find the `flush` command useful if you''re running a resolving DNS
    server. It removes all of the cached lookup information from BIND''s cache. If
    you want to clear only the records related to a particular domain, you can use
    `flushname`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The `reload` and `refresh` commands are useful with authoritative servers.
    The `reload` command causes BIND to reparse zone files after they''ve been updated
    without restarting the server. Unless a specific zone is given, all zones will
    be reloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of slave DNS servers, we can force BIND to update its copy of a
    zone file if it''s stale using the `refresh` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on using `rndc`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `rndc` manual page (`man 8 rndc`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Networking Guide: BIND ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-BIND.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/sec-BIND.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
