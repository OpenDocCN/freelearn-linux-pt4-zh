["```\nssh -i  mesos-cluster.pem ec2-54-221-197-122.compute-1.amazonaws.com (master)\nssh -i  mesos-cluster.pem ec2-54-221-196-123.compute-1.amazonaws.com (slave1)\nssh -i  mesos-cluster.pem ec2-54-221-198-125.compute-1.amazonaws.com (slave2)\nssh -i  mesos-cluster.pem ec2-54-221-198-130.compute-1.amazonaws.com (slave3)\n\n```", "```\n# Following command is used to update the packages.\n$ sudo apt-get update\n\n# We will require JDK for deploying java projects over mesos, use the following command to install java. Here we are using Java version 7.\n$ sudo apt-get install -y openjdk-7-jdk\n\n# This step is necessary only if you are building from the git repository. It will install the autotools.\n$ sudo apt-get install -y autoconf libtool\n\n# Now we can install the dependencies for the mesos project.\n$ sudo apt-get -y install build-essential python-dev python-boto libcurl4-nss-dev libsasl2-dev maven libapr1-dev libsvn-dev\n\n```", "```\n    ubuntu@ip-10-155-18-106:~$ wget http://www.apache.org/dist/mesos/0.25.0/mesos-0.25.0.tar.gz\n    ubuntu@ip-10-155-18-106:~$ tar -zxf mesos-0.25.0.tar.gz\n    ubuntu@ip-10-155-18-106:~$ mv mesos-0.25.0 mesos\n\n    ```", "```\n    ubuntu@ip-10-155-18-106:~$ git clone https://git-wip-us.apache.o\n    rg/repos/asf/mesos.git\n\n    ```", "```\n# Change working directory.\nubuntu@ip-10-155-18-106:~$ cd mesos\n\n# This step is only required if you are building from the gitrepository, or else you can skip this step.\nubuntu@ip-10-155-18-106:~$ ./bootstrap\n\n# Create a build directory. This will contain the compiled Mesosbinaries. It is a good practice to create the build directory.\nubuntu@ip-10-155-18-106:~$ mkdir build\nubuntu@ip-10-155-18-106:~$ cd build\n\n# Now we can trigger the \"configure build\" command and \"make\" commandfollowed by it. This step is time consuming and can take some time to get executed\nubuntu@ip-10-155-18-106:~$ ../configure\nubuntu@ip-10-155-18-106:~$ make\nIn order to speed up the building and reduce verbosity of the logs, you can append-j <number of cores> V=0 to make:\n# Once the make command is executed, you can test the make by issuing the following command.\nubuntu@ip-10-155-18-106:~$ make check\n# The following step is optional, you can use it if you are installing it system wide. \nubuntu@ip-10-155-18-106:~$ make install\n\n```", "```\nubuntu@ip-10-155-18-106:~$ rsync -za mesos ip-10-155-18-107:\nubuntu@ip-10-155-18-106:~$ rsync -za mesos ip-10-155-18-109:\nubuntu@ip-10-155-18-106:~$ rsync -za mesos ip-10-155-18-110:\n\n```", "```\nubuntu@ip-10-155-18-106:~/mesos/build$ ./bin/mesos-master.sh --work_dir=/var/lib/mesos\n\n```", "```\nubuntu@ip-10-155-18-107:~/mesos/build$ ./bin/mesos-slave.sh --master=mesos-master:5050\nubuntu@ip-10-155-18-109:~/mesos/build$ ./bin/mesos-slave.sh --master=mesos-master:5050\nubuntu@ip-10-155-18-110:~/mesos/build$ ./bin/mesos-slave.sh --master=mesos-master:5050\n\n```", "```\nubuntu@local:~ $ export AWS_ACCESS_KEY_ID=<your-access-key>\nubuntu@local:~ $ export AWS_SECRET_ACCESS_KEY=<your-secret-key>\n\n```", "```\nubuntu@local:~/mesos/ec2 $ ./mesos-ec2 -k <your-key-pair> -i <your-identity-file> -s 10 launch mesos-cluster\n\n```", "```\nubuntu@local:~/mesos/ec2 $ ./mesos-ec2 -k <your-key-pair> -i <your-identity-file> login mesos-cluster\n\n```", "```\nubuntu@local:~/mesos/ec2 $ ./mesos-ec2 destroy ec2-test\n\n```", "```\nmesos-master: ssh 146.148.62.84\nmesos-slave1:  ssh 104.197.92.182\nmesos-slave2:  ssh 104.197.92.145\n```", "```\n# Update the packages.\n$ sudo apt-get update\n# Install the latest OpenJDK.\n$ sudo apt-get install -y openjdk-7-jdk\n# Install autotools (Only necessary if building from git repository).\n$ sudo apt-get install -y autoconf libtool\n# Install other Mesos dependencies.\n$ sudo apt-get -y install build-essential python-dev python-boto libcurl4-nss-dev libsasl2-dev maven libapr1-dev libsvn-dev\n\n```", "```\nthe-name-you-give.cloudapp.net (e.g: mesos-cluster.cloudapp.net)\n```", "```\n    ssh mesos-cluster.cloudapp.net -p 22\n\n    ```", "```\n    ssh mesos-cluster.cloudapp.net -p 44\n\n    ```", "```\nmesos-master: ssh mesos-cluster.cloudapp.net\nmesos-slave1:  ssh mesos-cluster.cloudapp.net -p 23\nmesos-slave2:  ssh mesos-cluster.cloudapp.net -p 24\n```", "```\n# Update the packages.\n$ sudo apt-get update\n\n# Install the latest OpenJDK.\n$ sudo apt-get install -y openjdk-7-jdk\n\n# Install autotools (Only necessary if building from git repository).\n$ sudo apt-get install -y autoconf libtool\n\n# Install other Mesos dependencies.\n$ sudo apt-get -y install build-essential python-dev python-botolibcurl4-nss-dev libsasl2-dev maven libapr1-dev libsvn-dev\n\n```", "```\nmesos-master:~$ rsync -za mesos mesos-slave1:\nmesos-master:~$ rsync -za mesos mesos-slave2:\n\n```", "```\nmesos-master:~/mesos/build$ ./bin/mesos-master.sh --work_dir=/var/lib/mesos\n\n```", "```\nI1108 08:26:52.525831 13306 main.cpp:229] Build: 2015-11-08 07:26:59 by akhld\nI1108 08:26:52.526072 13306 main.cpp:231] Version: 0.25.0\nI1108 08:26:52.526406 13306 main.cpp:252] Using 'HierarchicalDRF' allocator\nI1108 08:26:52.623775 13306 leveldb.cpp:176] Opened db in 97.107324ms\nI1108 08:26:52.712013 13306 leveldb.cpp:183] Compacted db in 88.081084ms\nI1108 08:26:52.712218 13306 leveldb.cpp:198] Created db iterator in 72800ns\nI1108 08:26:52.712327 13306 leveldb.cpp:204] Seeked to beginning of db in 25401ns\nI1108 08:26:52.712745 13306 leveldb.cpp:273] Iterated through 3 keys in the db in 342201ns\nI1108 08:26:52.713101 13306 replica.cpp:744] Replica recovered with log positions 5 -> 6 with 0 holes and 0 unlearned\nI1108 08:26:52.716048 13321 recover.cpp:449] Starting replica recovery\nI1108 08:26:52.716660 13306 main.cpp:465] Starting Mesos master\n……….\nI1108 08:26:52.776047 13306 master.cpp:376] Master 090c9618-090f-49bd-aa95-265ec5f423d5 (100.73.76.103) started on 100.73.76.103:5050\n\n```", "```\nmesos-slave1:~/mesos/build$ ./bin/mesos-slave.sh --master=mesos-master:5050\nmesos-slave1:~/mesos/build$ ./bin/mesos-slave.sh --master=mesos-master:5050\n\nI1108 08:31:18.733666 26975 main.cpp:185] Build: 2015-11-08 07:26:59 by akhld\nI1108 08:31:18.734257 26975 main.cpp:187] Version: 0.25.0\nI1108 08:31:18.734724 26975 containerizer.cpp:143] Using isolation: posix/cpu,posix/mem,filesystem/posix\nI1108 08:31:18.747735 26975 main.cpp:272] Starting Mesos slave\nI1108 08:31:18.748929 26975 slave.cpp:190] Slave started on 1)@100.73.76.129:5051\n\n```", "```\n# Run C++ framework (Exits after successfully running some tasks.).\nmesos-master:~/mesos/build$ ./src/examples/test-framework --master=mesos-master:5050\n\n```", "```\nI1108 09:26:45.512217 23136 sched.cpp:164] Version: 0.25.0\nI1108 09:26:45.524862 23156 sched.cpp:262] New master detected at master@100.73.76.103:5050\nI1108 09:26:45.527117 23156 sched.cpp:272] No credentials provided. Attempting to register without authentication\n I1108 09:26:45.531708 23157 sched.cpp:641] Framework registered with 5f18729d-c83a-4264-a50b-bd972b2d10f3-0006\nRegistered!\nReceived offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O11 withcpus(*):4; mem(*):13000; disk(*):23976; ports(*):[31000-32000]\nLaunching task 0 using offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O11\nLaunching task 1 using offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O11\nLaunching task 2 using offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O11\nLaunching task 3 using offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O11\nReceived offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O12 withcpus(*):4; mem(*):13000; disk(*):23976; ports(*):[31000-32000]\nLaunching task 4 using offer 5f18729d-c83a-4264-a50b-bd972b2d10f3-O12\nTask 4 is in state TASK_RUNNING\nTask 0 is in state TASK_RUNNING\nTask 1 is in state TASK_RUNNING\nTask 4 is in state TASK_FINISHED\nTask 2 is in state TASK_RUNNING\nTask 3 is in state TASK_RUNNING\nTask 0 is in state TASK_FINISHED\nTask 1 is in state TASK_FINISHED\nTask 2 is in state TASK_FINISHED\nTask 3 is in state TASK_FINISHED\nI1108 09:26:45.719132 23154 sched.cpp:1771] Asked to stop the driver\nI1108 09:26:45.719321 23154 sched.cpp:1040] Stopping framework '5f18729d-c83a-4264-a50b-bd972b2d10f3-0006'\nI1108 09:26:45.720949 23136 sched.cpp:1771] Asked to stop the driver \n\n```", "```\n# Run Java framework (Exits after successfully running some tasks)mesos-master:~/mesos/build$ ./src/examples/java/test-framework mesos-master:5050\n# Run Python framework (Exits after successfully running some tasks)\nmesos-master:~/mesos/build$ ./src/examples/python/test-framework mesos-master:5050\n```", "```\nmake check\n```", "```\nmachine-a : 192.168.1.10\nmachine-b : 192.168.1.11\nmachine-c : 192.168.1.12\n```", "```\n# Issue the following command to install the wget command for your centos machine\n$ sudo yum install -y tar wget\n# We will need c++11 support which is available in the devtoolset-2\\. For that you will have to add it to the repo and then issue theinstallation command as follows:\n$ sudo wget -O /etc/yum.repos.d/slc6-devtoolset.repohttp://linuxsoft.cern.ch/cern/devtoolset/slc6-devtoolset.repo# Import the CERN GPG key.\n$ sudo rpm --importhttp://linuxsoft.cern.ch/cern/centos/7/os/x86_64/RPM-GPG-KEY-cern\n# Fetch the Apache Maven repo file.\n$ sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo\n# 'Mesos > 0.21.0' requires 'subversion > 1.8' devel package, \n# which is not available in the default repositories.\n# Add the WANdisco SVN repo file: '/etc/yum.repos.d/wandisco-svn.repo' with content:\n[WANdiscoSVN]\nname=WANdisco SVN Repo 1.8\nenabled=1\nbaseurl=http://opensource.wandisco.com/centos/6/svn-1.8/RPMS/$basearch/\ngpgcheck=1\ngpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco\n\n# Now we can install the development tools which will contain the utilities like make for your our installation\n$ sudo yum groupinstall -y \"Development Tools\"\n# Install 'devtoolset-2-toolchain' which includes GCC 4.8.2 and related packages.\n$ sudo yum install -y devtoolset-2-toolchain\n# Now we can install the mesos related dependency for centos.\n$ sudo yum install -y apache-maven python-devel java-1.7.0-openjdk-devel zlib-devel libcurl-devel openssl-develcyrus-sasl-devel cyrus-sasl-md5 apr-devel subversion-devel apr-util-devel\n# Now we can enable the devtoolset for the shell.\n$ scl enable devtoolset-2 bash\n$ g++ --version\n# At this point make sure we get the gcc+ version > 4.8.\n\n```", "```\nmachine-a:~$ rsync -za mesos machine-b:\nmachine-a:~$ rsync -za mesos machine-c:\n```", "```\nmachine-a:~/mesos/build$ ./bin/mesos-master.sh --work_dir=/var/lib/mesos --ip=192.168.1.10\n\n```", "```\nmachine-b:~/mesos/build$ ./bin/mesos-slave.sh --  master=192.168.1.10:5050\nmachine-c:~/mesos/build$ ./bin/mesos-slave.sh --  master=192.168.1.10:5050\n\n```", "```\nmaster:~ $ ssh-keygen -f ~/.ssh/id_rsa -P \"\"\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave1\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave2\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave3\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave4\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave5\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave6\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave7\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave8\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave9\n\nmaster:~ $ ssh-copy-id -i ~/.ssh/id_rsa.pub slave10\n\n```", "```\nmaster:~ $ scp –R build slave1:[install-prefix]\nmaster:~ $ scp –R build slave2:[install-prefix]\nmaster:~ $ scp –R build slave3:[install-prefix]\nmaster:~ $ scp –R build slave4:[install-prefix]\nmaster:~ $ scp –R build slave5:[install-prefix]\nmaster:~ $ scp –R build slave6:[install-prefix]\nmaster:~ $ scp –R build slave7:[install-prefix]\nmaster:~ $ scp –R build slave8:[install-prefix]\nmaster:~ $ scp –R build slave9:[install-prefix]\nmaster:~ $ scp –R build slave10:[install-prefix]\n\n```", "```\nmaster:~ $ cat [install-prefix]/var/mesos/deploy/masters\nmaster\n\n```", "```\nmaster:~ $ cat [install-prefix]/var/mesos/deploy/slaves\nslave1\nslave2\nslave3\nslave4\nslave5\nslave6\nslave7\nslave8\nslave9\nslave10\n\n```", "```\nmaster:~ $ mesos-start-cluster.sh\n\n```", "```\nconfigure: error: cannot find libz\n-------------------------------------------------------------------\nlibz is required for Mesos to build.\n-------------------------------------------------------------------\n\n```", "```\n$ sudo apt-get install libz-dev\n\n```", "```\n$ yum install zlib-devel\n\n```", "```\nmkdir: cannot create directory '/var/lib/mesos': Permission denied\n\n```", "```\n$ sudo chown `whoami` /var/lib/mesos\n\n```", "```\n/home/akhld/mesos/build/src/.libs/test-executor: error while loading shared libraries: libmesos-0.25.0.so: cannot open shared object file: No such file or directory\n\n```", "```\n$ cat /tmp/mesos/slaves/63088700-3d5d-4490-a3df-a3f85fe62a01-S1/frameworks/ed4b8897-6c4b-4b14-8575-4a828731785d-0001/executors/default/runs/latest/stderr \n /var/lib/mesos/: Permission denied\n\n```", "```\nFailed to initialize, bind: Address already in use [98]\n\n```", "```\n./mesos-slave.sh --master=<ipaddr>:<port> --ip=<ip of slave> --work_dir=<work_dir other than that of a running slave> --port=<another_port>\n\n```"]