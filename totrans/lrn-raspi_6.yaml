- en: Chapter 6. The Console
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 控制台
- en: Behind the pretty graphical interfaces of a Linux-based operating system such
    as Raspbian, is the console.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Linux 的操作系统（如 Raspbian）的漂亮图形界面背后，是控制台。
- en: The console is the most basic way of communicating with the innards of the Raspbian
    operating system. The console's history started at the very beginning of computing
    where the interface to a computer was a keyboard and a teletype machine. At that
    time, operators would type a command and the result would be printed in front
    of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是与 Raspbian 操作系统内部进行通信的最基本方式。控制台的历史可以追溯到计算机的起源，那时与计算机的接口是键盘和打字机。那时，操作员会输入一个命令，结果会显示在他们面前。
- en: '![The Console](img/2192OS_06_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![控制台](img/2192OS_06_01.jpg)'
- en: A teletype machine
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 打字机
- en: Fortunately, with the development of computer monitors, we no longer need a
    typewriter to communicate with our computer and there are many different ways
    in which this can be done. You already learned how to use the Raspberry Pi's graphical
    user interface Xfce, and this chapter will run you through how you can use the
    built-in console terminal application called bash.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，随着计算机显示器的发展，我们不再需要打字机与计算机进行通信，且现在有许多不同的方式可以做到这一点。你已经学会了如何使用 Raspberry Pi
    的图形用户界面 Xfce，本章将向你介绍如何使用内置的控制台终端应用程序 bash。
- en: Bash
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bash
- en: The **Bourne again shell** (**bash**) is a console shell developed by the GNU
    project that was released in 1989\. Originally written by Brian Fox, it has become
    the de facto standard and is used by default in almost all Linux operating systems,
    OS X, Novell NetWare, Android, as well as on Windows. The bash was inspired by
    the `sh` shell, which was extremely popular around the time bash was created.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bourne again shell**（**bash**）是一个由 GNU 项目开发的控制台 shell，于 1989 年发布。最初由 Brian
    Fox 编写，它已经成为事实上的标准，并在几乎所有 Linux 操作系统、OS X、Novell NetWare、Android 以及 Windows 中默认使用。bash
    的灵感来源于 `sh` shell，在 bash 创建时，`sh` shell 非常流行。'
- en: The bash shell was written as an open source replacement to the Bourne shell
    that was the default command-line interpreter for Unix. The bash supports many
    features, including the autocompletion of commands and filename wildcards.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: bash shell 是作为 Bourne shell 的开源替代品编写的，而 Bourne shell 是 Unix 的默认命令行解释器。bash 支持许多功能，包括命令和文件名通配符的自动补全。
- en: Launching the bash command interpreter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 bash 命令解释器
- en: The bash command interpreter is made available to us in the Xfce environment
    through the LXTerminal application. Other terminal clients such as Yakuake can
    be installed using `apt-get`. If you have configured Raspbian to not start the
    Xfce desktop environment, bash will be automatically started after you log in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: bash 命令解释器在 Xfce 环境中通过 LXTerminal 应用程序提供给我们。其他终端客户端如 Yakuake 可以通过 `apt-get`
    安装。如果你已将 Raspbian 配置为不启动 Xfce 桌面环境，bash 会在你登录后自动启动。
- en: You can launch LXTerminal by double-clicking on its icon on the desktop.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过双击桌面上的图标来启动 LXTerminal。
- en: '![Launching the bash command interpreter](img/2192OS_06_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![启动 bash 命令解释器](img/2192OS_06_02.jpg)'
- en: LXTerminal
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: LXTerminal
- en: You can launch and run as many instances of LXTerminal as you like, but don't
    forget that your Raspberry Pi doesn't have unlimited resources.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要启动并运行任意数量的 LXTerminal 实例，但别忘了你的 Raspberry Pi 并没有无限的资源。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are not using the Xfce desktop environment, bash will be launched when
    you log in.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 Xfce 桌面环境，当你登录时会启动 bash。
- en: The first thing that you will notice is that you have Command Prompt. By default,
    this Command Prompt will show you the current directory that you are working in,
    your Raspberry Pi's hostname (by default `raspberrypi`), and your username (by
    default this is `pi`).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先会注意到你有一个命令提示符。默认情况下，这个命令提示符会显示你正在工作的当前目录、你的 Raspberry Pi 主机名（默认为 `raspberrypi`）和你的用户名（默认为
    `pi`）。
- en: As you move around the filesystem, you will see the name of the directory that
    you are in.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在文件系统中移动时，你会看到你所在目录的名称。
- en: To run a command using the bash command interpreter, simply type the command
    and press the *Enter* key. The command will run and the results will be displayed.
    While a command is running, you won't be able to run other commands until it is
    finished.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 bash 命令解释器运行命令，只需输入命令并按下 *Enter* 键。命令会运行并显示结果。在命令运行时，直到它完成，你无法运行其他命令。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you wish to let a command run in the background, all you need to do is add
    an `&` operator to the end of the command. This will let the command run in the
    background.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望让某个命令在后台运行，只需在命令的末尾添加`&`运算符。这将使命令在后台运行。
- en: Linux is a full multiprocessing system and you can run as many instances of
    LXTerminal as you want. To see which processing commands are running in the background
    on your Raspberry Pi, simply run `ps –a`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个完整的多处理系统，你可以运行任意数量的LXTerminal实例。要查看树莓派后台正在运行的处理命令，只需运行`ps –a`。
- en: Basic bash commands
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的bash命令
- en: The best way to start learning bash is to start using it. Remember that if you
    really make a mess of things, all you need to do is reimage your SD card and away
    you go!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 学习bash的最佳方法就是开始使用它。记住，如果你真的弄砸了事情，所需做的只是重新镜像你的SD卡，然后就能继续使用了！
- en: It is easy to get more information about any of the commands that are referred
    to in this chapter. You can do this using the `man` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 获取本章中提到的任何命令的更多信息是很容易的。你可以通过使用`man`命令来做到这一点。
- en: The `man` command launches the built-in documentation system for Linux. Almost
    every command available has documentation in the man system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`man`命令启动Linux内置的文档系统。几乎每个可用的命令都有相应的文档在man系统中。'
- en: 'For example, to find out more information about the `ls` command, simply run
    the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要获取关于`ls`命令的更多信息，只需运行以下命令：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will launch the `man` program and display every bit of information that
    you need to know about the `ls` program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动`man`程序并显示你需要了解的关于`ls`程序的所有信息。
- en: '![Basic bash commands](img/2192OS_06_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![基本bash命令](img/2192OS_06_03.jpg)'
- en: The man ls command
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: man ls命令
- en: To move around the `man` program, you can use the arrow keys on your keyboard.
    If you wish to skip the whole page, you can press the spacebar key. When you have
    finished reading the information, you can exit by pressing the *q* key.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`man`程序中浏览，你可以使用键盘上的箭头键。如果你希望跳过整页内容，可以按空格键。当你读完信息后，可以按*q*键退出。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget that Linux is a case-sensitive operating system and it is extremely
    important that you use the correct case when you are running the command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，Linux是区分大小写的操作系统，在运行命令时使用正确的大小写非常重要。
- en: The autocompletion of commands
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令的自动补全
- en: One of the most useful features of bash is its ability to autocomplete the name
    of the command that you are typing. This is as easy as pressing the *Tab* key.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: bash的一个最有用的功能是它能够自动完成你正在输入的命令名称。这就像按下*Tab*键一样简单。
- en: 'For example, if you want to run the command `nano` in order to launch the nano
    text editor, simply type the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想运行命令`nano`以启动nano文本编辑器，只需键入以下命令：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now press the *Tab* key. The bash will automatically autocomplete the command
    and display this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按下*Tab*键。bash将自动完成命令并显示如下内容：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This can be a real timesaver. If there is more than one possible combination
    of autocompletion, you will need to press the *Tab* key twice. This will cause
    bash to list all the different possibilities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以节省大量时间。如果有多个自动补全的组合，你需要按下*Tab*键两次。这将导致bash列出所有不同的可能性。
- en: '![The autocompletion of commands](img/2192OS_06_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![命令自动补全](img/2192OS_06_04.jpg)'
- en: The bash's autocomplete system
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: bash的自动补全系统
- en: Running commands as root
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以root身份运行命令
- en: Linux is an inherently secure operating system. Every part of the operating
    system has been configured to be secure by default. Every file is owned by a particular
    user, and that user is able to allocate permissions to that file in order to restrict
    other users and groups from accessing the file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Linux本身是一个安全的操作系统。操作系统的每一部分都默认配置为安全。每个文件都由特定用户拥有，该用户可以为该文件分配权限，以限制其他用户和组访问该文件。
- en: By default, all commands that are run in bash are run as the current user. The
    current user is normally the Pi user. This user is a standard user, and this means
    that you will not be able to run any commands that can affect other users, such
    as installing software or changing the network configuration of your Raspberry
    Pi.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在bash中运行的所有命令都是作为当前用户运行的。当前用户通常是Pi用户。此用户是标准用户，这意味着你无法运行可能影响其他用户的命令，例如安装软件或更改你的树莓派的网络配置。
- en: Fortunately, it is easy to run commands as the root or superuser. This user
    has unlimited access to every part of the operating system and must be used with
    caution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，作为root或超级用户运行命令很容易。这个用户可以无限访问操作系统的所有部分，但必须小心使用。
- en: To run a command as the superuser, you can use use the `sudo` utility. The `sudo`
    utility lets you run a command as a different user from what you are logged in
    as.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要以超级用户身份运行命令，你可以使用`sudo`工具。`sudo`工具让你可以以不同于当前登录用户的身份运行命令。
- en: In order to use the `sudo` utility to run a command as root, all you need to
    do is prepend the command that you want to run with `sudo`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`sudo`工具以root身份运行命令，你只需要在想要运行的命令前加上`sudo`。
- en: 'Take an example of the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个命令的例子：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It will run the `apt-get` application as root. This particular command will
    invoke `apt-get Easter egg`, proving that computer programmers sometimes do have
    a sense of humor!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以root身份运行`apt-get`应用程序。这个特定的命令会触发`apt-get复活节彩蛋`，证明计算机程序员有时也有幽默感！
- en: '![Running commands as root](img/2192OS_06_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![以root身份运行命令](img/2192OS_06_05.jpg)'
- en: Running a command as root that can make your Raspberry Pi moo!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为root用户运行命令，甚至能让你的树莓派发出“哞”声！
- en: Moving around the filesystem using bash
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用bash在文件系统中移动
- en: 'The most basic part of using a command interpreter, such as bash, is to be
    able to move around the Linux filesystem. It is important to understand how bash
    lets you represent directories. This is done in two different ways: using **absolute
    paths** and **relative paths**.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令解释器（如bash）的最基本部分是能够在Linux文件系统中移动。理解bash如何表示目录是很重要的。bash有两种不同的方式来表示目录：使用**绝对路径**和**相对路径**。
- en: Absolute paths
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对路径
- en: An absolute path is a path that describes the location of a file or folder starting
    from `/` (root). This is easy to spot as it will always start with `/`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对路径是从`/`（根目录）开始描述文件或文件夹位置的路径。它容易识别，因为它总是以`/`开头。
- en: An example of an absolute path is `/home/pi/Desktop`. This path is the folder
    that contains all the items on your desktop.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对路径的一个例子是`/home/pi/Desktop`。这个路径是包含你桌面上所有项目的文件夹。
- en: Relative paths
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对路径
- en: A relative path is a path to the file or folder that is described based on where
    you are in the filesystem.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 相对路径是基于你在文件系统中的位置描述文件或文件夹的路径。
- en: An example of a relative path is `../Desktop`. This means that a folder called
    `Desktop` is stored in a folder that is one level above the one you are in.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 相对路径的一个例子是`../Desktop`。这意味着一个名为`Desktop`的文件夹存储在上一级目录中。
- en: 'There are several special paths that you should know of in bash, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在bash中有几个你应该了解的特殊路径，如下所示：
- en: '| Path | Description |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 路径 | 描述 |'
- en: '| --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/` | This is the root of the Linux filesystem and the highest path that
    you can have. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 这是Linux文件系统的根目录，是你能拥有的最高路径。 |'
- en: '| `./` | This represents the directory that you are currently in. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `./` | 代表你当前所在的目录。 |'
- en: '| `../` | This is the directory one level below the one you are in. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `../` | 这是你所在目录的上一级目录。 |'
- en: '| `~` | This represents your home directory. When you are logged in as the
    Pi user, this will be `/home/pi`. If you are running a command as the root, this
    will be `/root`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `~` | 代表你的主目录。当你以Pi用户身份登录时，这将是`/home/pi`。如果你以root身份运行命令，这将是`/root`。 |'
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you don't have a keyboard with the *~* key, you can press *F12* instead.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有带有*~*键的键盘，你可以按*F12*键代替。
- en: Manipulating files
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作文件
- en: Now that you have an understanding of how paths are represented in bash, it
    is time to learn how to manipulate them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了路径在bash中的表示方式，是时候学习如何操作它们了。
- en: 'There are many commands that you can use to manipulate files in bash, which
    include the commands in the following table:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多命令可以用来操作bash中的文件，包括以下表格中的命令：
- en: '| `ls` | `cd` | `pwd` | `cat` | `head and tail` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `ls` | `cd` | `pwd` | `cat` | `head 和 tail` |'
- en: '| `cp` | `mv` | `rm` | `mkdir` | `touch` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `cp` | `mv` | `rm` | `mkdir` | `touch` |'
- en: '| `adduser` | `addgroup` | `passwd` | `chmod` | `chown` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `adduser` | `addgroup` | `passwd` | `chmod` | `chown` |'
- en: ls
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ls
- en: '`ls` is perhaps the most common basic function, and is used regularly to see
    which files are present in the directory that you are in. This is done using the
    list (`ls`) command. By default, this is the current folder that you are in. If
    you want to see the contents of another folder, simply append the path to the
    end of the `ls` command.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls` 可能是最常用的基础功能，经常用来查看当前目录下存在哪些文件。你可以使用列表命令（`ls`）来完成此操作。默认情况下，显示的是你当前所在的文件夹。如果你想查看其他文件夹的内容，只需在`ls`命令后加上路径。'
- en: '![ls](img/2192OS_06_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![ls](img/2192OS_06_06.jpg)'
- en: The contents of the home directory
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 主目录的内容
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`ls` doesn''t display any files or folders that begin with (`.`). The reason
    for this is that any file or directories beginning with (`.`) are hidden.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls` 不会显示以（`.`）开头的文件或文件夹。这是因为任何以（`.`）开头的文件或文件夹都是隐藏的。'
- en: 'The `ls` command has many different options that change the output on your
    screen. Some common `ls` parameters are as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls`命令有很多不同的选项，这些选项会改变屏幕上的输出。一些常用的`ls`参数如下：'
- en: '| Option | Description |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-a` | This shows hidden files and folders |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `-a` | 显示隐藏的文件和文件夹 |'
- en: '| `-l` | This uses the long list format. This will show file sizes, file permissions,
    and the owners of the files |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `-l` | 使用长列表格式。这将显示文件大小、文件权限和文件的所有者 |'
- en: '| `-h` | This shows all the files sized in a human-readable format |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `-h` | 以人类可读的格式显示所有文件的大小 |'
- en: cd
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cd
- en: The Linux filesystem is made up of many different files and folders. When using
    bash, it is really important to be able to move around the filesystem. This is
    done using the `cd` (change directory) command.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Linux文件系统由许多不同的文件和文件夹组成。在使用bash时，能够在文件系统中移动非常重要。这是通过使用`cd`（更改目录）命令来完成的。
- en: '`cd` is easy to use. All you need to do in order to change the current directory
    is to run `cd` followed by the path of the folder you want to move into. This
    can either be an absolute directory or a relative directory.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd`命令使用起来很简单。只需要运行`cd`命令并加上你想要切换到的文件夹路径，无论是绝对路径还是相对路径，都能改变当前目录。'
- en: '![cd](img/2192OS_06_07.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![cd](img/2192OS_06_07.jpg)'
- en: Changing between directories
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录之间切换
- en: The directory that you are in after you run `cd` is called the current working
    directory. Unless you specify, a directory bash will look for any commands that
    you run and any files that you are using in the current working directory. If
    the command is not in the current folder, bash will look in several other predefined
    folders for the command. These folders are specified in the `PATH` environment
    variable in bash.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`cd`后，你所在的目录称为当前工作目录。除非你特别指定，否则bash会在当前工作目录中查找你运行的任何命令和使用的任何文件。如果命令不在当前文件夹中，bash将会在其他几个预定义的文件夹中查找命令。这些文件夹在bash的`PATH`环境变量中指定。
- en: pwd
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pwd
- en: Sometimes, when navigating the Linux filesystem, you might need to find out
    which directory you are in. You can do this using the `pwd` (print working directory)
    command.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，在浏览Linux文件系统时，你可能需要知道自己当前所在的目录。你可以使用`pwd`（打印工作目录）命令来查看。
- en: '![pwd](img/2192OS_06_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![pwd](img/2192OS_06_08.jpg)'
- en: The pwd command
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: pwd命令
- en: cat
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cat
- en: When you are working with files, sometimes it's very handy to quickly view the
    contents of a file. The `cat` command does exactly this. When you run the `cat`
    command followed by a filename, it will display the contents of that file on the
    screen.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要快速查看文件内容时，`cat`命令非常方便。运行`cat`命令并加上文件名后，它会在屏幕上显示该文件的内容。
- en: '![cat](img/2192OS_06_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![cat](img/2192OS_06_09.jpg)'
- en: The cat command
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: cat命令
- en: '`cat` has several options that you can use to customize the format of the file
    on the screen. Some of the `cat` command''s parameters are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`命令有几个选项，可以用来定制文件在屏幕上的显示格式。以下是一些`cat`命令的参数：'
- en: '| Option | Description |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-n` | This shows line numbers in the file |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | 显示文件中的行号 |'
- en: '| `-E` | This adds **$** at the end of every line so that you can see where
    it is |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `-E` | 在每行的末尾添加**$**，这样你可以看到行的结束位置 |'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that everything in Linux is a file. Using the `cat` command, you can
    read in data from the device on your Raspberry Pi, including its serial port and
    camera. By running `cat /dev/video0 > video.record`, you can record the video
    coming in from your camera.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Linux中的一切都是文件。你可以使用`cat`命令读取来自树莓派设备的数据，包括它的串口和摄像头。通过运行`cat /dev/video0 >
    video.record`，你可以录制摄像头输入的视频。
- en: head and tail
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: head 和 tail
- en: Another handy set of commands that you can use to see the contents of a file
    are `head` and `tail`. The `head` and `tail` commands go together and show the
    start of the end of a file. The `head` command is extremely useful if you want
    to see whether a big file is the file that you are looking for and it is too big
    to be shown using `cat`. The `tail` command is extremely handy if you want to
    look at the last few entries in a log file.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![head and tail](img/2192OS_06_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: The head and tail commands
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: The `head` and `tail` commands have many different options that you can use
    in order to customize the output format of the file on the screen. The most important
    is the `–n` option. The `–n` option followed by a number will display *n* lines
    of the file. You can find the other options by running `man head` or `man tail`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: cp
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`cp` is another important command in bash. `cp` copies a file or folder from
    one folder to another. By default, `cp` will overwrite a file in the destination
    folder if it already exists, so beware!'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: To use `cp`, you first need to specify the file or folder that you want to copy
    followed by the destination folder. If you select a directory, it will copy just
    this directory. If you want to make an exact copy of the directory, you need to
    use the `–r` command. The `–r` command recursively copies the folder.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Basically, what this command does is it makes an exact copy of the folder you
    are copying, so you will most likely want to use this option whenever you are
    copying a directory.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![cp](img/2192OS_06_11.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Copying a file and a folder
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cp` command has many different options that change how it copies a file
    or directory, as shown in the following table:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This recursively copies a file or directory |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| `-f` | If an existing file in the destination directory can''t be opened,
    this removes it and copies it again |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| `-p` | This preserves the owner and timestamp of the files that you are copying
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This indicates verbose mode, it shows the names of the files that
    are being copied |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
- en: mv
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you don''t want to copy a file or directory, but instead you want
    to move it around. The `mv` command does exactly that. Its syntax is exactly the
    same as the syntax of `cp`. To move a file or folder, it is simply a matter of
    doing as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '![mv](img/2192OS_06_12.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Moving a file
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike `cp`, `mv` automatically moves the whole file or folder and it doesn''t
    have an `–r` option. There are several other options available in `mv`, shown
    as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| `-f` | This overwrites any files and folders that are in the destination
    location |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| `-u` | This only moves the file if it is newer that the file in the destination
    folder |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: rm
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, a file or directory is no longer required and needs to be deleted.
    To do this, the `rm` command is used.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: To delete a file or folder, simply run the `rm` command followed by the file
    or directory that you want to delete. Raspbian and most other Linux distributions
    don't contain any sort of recycle bin functionality. This means that when you
    delete something, it is permanently deleted.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![rm](img/2192OS_06_13.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: Removing a file
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are very few things that you can do to destroy a Linux distribution. The
    `sudo rm –rf /` command is one of them. This command will start at the root directory
    and delete every file on your device, including any files on any removable and
    network drives attached to your Raspberry Pi. Needless to say, be very careful
    when using the `–r` and`–f` flags.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when removing a directory, `rm` will stop if there are any files
    in the directory. To delete the directory, you will need to use the `–f` flag
    in order to force the deletion of the folder. Some of the `rm` command''s parameters
    are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `-f` | This never prompts when deleting any files |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `-i` | This prompts before deleting each and every file |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This recursively deletes the files and folders |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: mkdir
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will often need to create a new folder in order to keep your files organized.
    The purpose of using `mkdir` (make directory) is exactly that. To use `mkdir`,
    all you need to do is run `mkdir` followed by the name of the directory that you
    want to create.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![mkdir](img/2192OS_06_14.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: Using mkdir
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the directory, it is immediately ready for use. You can
    use it to keep your files organized. Some of the `mkdir` parameters of are as
    follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| `-p` | This creates any parent directories, if necessary—for example, `mkdir
    new/directory/with/parents –p` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every directory that is created |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: touch
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`touch` is a simple command that creates an empty file if a file doesn''t exist.
    If the file exists, it updates the access time to when the command is run.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '`touch` is often used when a file needs to exist. Some examples of this include
    creating empty log files. In order to use `touch`, run `touch` followed by the
    filename that you want to create or update the access time of.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![touch](img/2192OS_06_15.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Using touch
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: adduser
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every file in Linux is owned by a user. This helps to keep everything secure.
    By default, everything in the `/home/pi` directory is owned by the Pi user. All
    users also belong to a group. You can allocate permissions depending on the owner
    and group of the user who owns the file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: You can add users to your Raspbian installation using the `adduser` command.
    To do this, run `adduser` followed by the username of the user that you want to
    create. Because `adduser` is a system command, you will need to add `sudo` before
    it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![adduser](img/2192OS_06_16.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Creating a user
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked a couple of questions by `adduser`, including the username
    and password. If you don't want to provide your name or phone number, simply press
    the *Enter* key. The `adduser` command will also create a new group with the same
    name as your new user.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`adduser` 命令会问你几个问题，包括用户名和密码。如果你不想提供姓名或电话号码，直接按 *Enter* 键即可。`adduser` 命令还会创建一个与新用户同名的组。'
- en: 'You can easily see which users you have in your Raspbian system by running
    the following command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令轻松查看 Raspbian 系统中的用户：
- en: '[PRE4]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `/etc/passwd` file contains all the users that are in Raspbian.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/passwd` 文件包含了 Raspbian 中所有的用户。'
- en: addgroup
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: addgroup
- en: Sometimes, you need to create a new group in order to organize your file permissions
    as required. To do this, use the `addgroup` command.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要创建一个新组来按要求组织文件权限。为此，可以使用 `addgroup` 命令。
- en: '![addgroup](img/2192OS_06_17.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![addgroup](img/2192OS_06_17.jpg)'
- en: Creating a new group
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新组
- en: The `addgroup` command is simple to use. All you need to do is to add the name
    of the group after the `addgroup` command.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`addgroup` 命令使用起来很简单。你只需要在 `addgroup` 命令后添加组的名称。'
- en: 'The new group will be created along with a new ID. To see the groups that are
    there in Raspbian, run the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 新的组将被创建，并带有一个新的 ID。要查看 Raspbian 中已有的组，可以运行以下命令：
- en: '[PRE5]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: passwd
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: passwd
- en: As the system administrator of your very own Linux system, you have a lot of
    power. You can use this power to change users' passwords using the `passwd` command.
    There are a couple of different ways in which you can use `passwd`. One of them
    is to change your own password. Another way in which you can use `passwd` is to
    change the password of another user on your system.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 作为你自己 Linux 系统的系统管理员，你拥有很大的权限。你可以使用这个权限通过 `passwd` 命令更改用户的密码。你可以使用 `passwd`
    的几种不同方式。一个是更改你自己的密码。另一种方法是更改系统中另一个用户的密码。
- en: Changing your password
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改你的密码
- en: 'To change your own password, run the passwd command as shown in the following
    screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改自己的密码，请运行如下截图所示的 `passwd` 命令：
- en: '![Changing your password](img/2192OS_06_18.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![更改密码](img/2192OS_06_18.jpg)'
- en: Changing your password
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 更改你的密码
- en: This will ask you to enter your current password. After you enter this, you
    will need to enter the new password twice.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 系统会要求你输入当前密码。输入后，你需要输入新密码两次。
- en: Changing another user's password
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改其他用户的密码
- en: Changing another user's password is just as easy as changing your password.
    To do this, add the username of the user after the `passwd` command. This command
    needs to be run as root, so add `sudo` before it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 更改其他用户的密码和更改自己密码一样简单。为此，只需在 `passwd` 命令后添加用户名。此命令需要以 root 用户身份运行，因此需要在前面加上 `sudo`。
- en: '![Changing another user''s password](img/2192OS_06_19.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![更改其他用户密码](img/2192OS_06_19.jpg)'
- en: Changing another user's password
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 更改其他用户的密码
- en: This is really useful if you need to change someone else's password. By default,
    there is no root password set in Raspbian. To set it, run `sudo passwd`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更改其他人的密码，这非常有用。默认情况下，Raspbian 中没有设置 root 密码。要设置它，可以运行 `sudo passwd`。
- en: chown
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: chown
- en: As mentioned previously, Linux is a multiuser system and all the files have
    an owner. Sometimes, the owner needs to be changed. To do this, use the `chown`
    command. `chown` can change the user of a file or directory.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Linux 是一个多用户系统，所有文件都有所有者。有时，需要更改所有者。要做到这一点，可以使用 `chown` 命令。`chown` 可以更改文件或目录的用户。
- en: A good example of permissions in use is the Apache web server. All the configuration
    files in the `/etc/apache2` directory are owned by the Apache2 user, along with
    the files located in the `/var/www` directory where the website that Apache2 is
    serving.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用权限的一个好例子是 Apache 网页服务器。`/etc/apache2` 目录中的所有配置文件由 Apache2 用户拥有，此外，位于 `/var/www`
    目录中的文件也由 Apache2 用户拥有，该目录是 Apache2 服务的网站所在位置。
- en: Sometimes, when you add a file to this directory, you need to change the owner
    to be the Apache2 web server. If you don't do this, Apache2 won't be able to serve
    the file to anyone who wants to take a look at it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当你向该目录中添加一个文件时，需要将文件的所有者更改为 Apache2 网页服务器。如果你不这样做，Apache2 将无法将文件提供给任何想要查看它的人。
- en: '`chown` needs several parameters. They are the new owner and the group of the
    file or directory that you want to change the owner of.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 需要多个参数。它们是你要更改所有者的文件或目录的新所有者和组。'
- en: '![chown](img/2192OS_06_20.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![chown](img/2192OS_06_20.jpg)'
- en: Changing the owner of all the files in Apache2's web root
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 更改 Apache2 网站根目录中所有文件的所有者
- en: The owner and group need to be separated by a (`:`). In the preceding example,
    the user and group are both Apache2.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different options that you can add to the `chown` command,
    as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: '| `-R` | This changes the owner of all the files and folders in the folder
    recursively |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every file that is processed |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
- en: Some of the chown command's parameters
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: chmod
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The other part of a file''s properties in Linux are its permissions. These
    permissions describe who can do what to files and directories. The following permissions
    are available:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '| **Owner (o)** | Read | Write | Execute |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
- en: '| **Group (g)** | Read | Write | Execute |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
- en: '| **All users (a)** | Read | Write | Execute |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
- en: Linux file permissions
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these permissions is represented by a letter, as shown in the following
    table:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '| **Read** | `r` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| **Write** | `w` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| **Execute** | `x` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: 'If you run the `ls –ll` command, you will be able to see what the permissions
    are for the file and directory that you are in:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![chmod](img/2192OS_06_21.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: The default permissions of the /home/pi directory
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Permissions are grouped together in groups of three. The first three describe
    the users' permission for the file, the next three describe the group's permissions,
    and the last three describe permissions of all users.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rw-r—r—` permissions of the `ocr_pi.png` file are as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| **All users** | Read |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: Permissions for ocr_pi.png
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Octal representation of permissions
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Permissions can also be described using an octal representation. This is a little
    more complicated but very flexible.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '| Octal notation | Permissions |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| 0 | No permissions |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '| 1 | Execute |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
- en: '| 2 | Write |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
- en: '| 3 | Write and execute |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: '| 4 | Read |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
- en: '| 5 | Read and execute |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
- en: '| 6 | Read and write |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
- en: '| 7 | Read, write, and execute |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
- en: 'To describe the permissions of a file, simply work out what permissions you
    want to give. In the following example, we want the `demo.txt` file to have the
    following permissions:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read only |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | No permissions |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
- en: A demo of the permissions
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'To work out the permissions, we start with the owner and find the read and
    write permissions. We then do the same for the group and all users'' permissions.
    These permissions work out as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | 6 |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
- en: '| **Group** | 4 |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | 0 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: Octal permissions for the file
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: These permissions are put together to be `640`. The `chmod` command uses this
    representation to set the permissions of the file or folder.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![Octal representation of permissions](img/2192OS_06_22.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: Changing the permissions of the demo.txt file
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to individually add and remove permissions from a file or
    folder. To do this, the user can use the notations described in the previous two
    tables.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the `demo.txt` file with the permissions as shown in the screenshot
    (*The default permissions of the /home/pi directory*) given earlier in this chapter.
    The permissions are as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | No permissions |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: 'If we want to add the write permission to members of the same group, we do
    as shown in the following screenshot:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '![Octal representation of permissions](img/2192OS_06_23.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
- en: Changing the permissions of the demo.txt file
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: The `+` symbol adds permissions and the `–` symbol removes permissions from
    files.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the file now has group permissions to read and write. The disadvantage
    of using this method is that you need to separately set the permissions of the
    file for the owner, group, and all users.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several other command-line parameters for `chmod`, as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| `-R` | This changes all the permissions for all the directories and files
    |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every file that is processed |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| `-c` | This only displays files that have their permissions changed |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: Command-line parameters for chmod
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Redirection in bash
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the more advanced features of bash are the redirection operators. These
    operators allow you to divert the input or output of a command to another command
    or file. While this sounds simple, it is an extremely powerful feature. There
    are several redirection operators built into bash, as shown here:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | This is a general-purpose command that chains similar to > |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| `>` | This redirects the output of a command to a file |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: '| `<` | This reads a file and passes it to the command |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
- en: '| `>>` | This appends the output of the command to a file |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
- en: Redirection operators
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: The `|` operator is a general-purpose command-changing tool. A simple example
    of this is to use it with `cat` and the program `more`. The `more` program is
    a simple program that lets you move backward and forward throughout a file on
    the screen in order to read it. The `more` command gets the data that you want
    to read from the `cat` command. The `|` operator connects two programs together.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '![Redirection in bash](img/2192OS_06_24.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
- en: The more and cat commands connected using the | operator
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: and >>
  id: totrans-288
  prefs:
  - PREF_H2
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `>` and `>>` operators are really powerful operators that take the data
    that is output by a program and write it to a file. The `>` operator replaces
    the file and the `>>` operator appends it to a file.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Remember that everything in Linux is a file, so you can use the `>` and `>>`
    operators to direct the output to a serial port or a printer.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '![> and >>](img/2192OS_06_25.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
- en: The > operator writes the result of an ls command to a file
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: <
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<` operator is similar to the `>` operator, except that it reads the contents
    of a file and feeds it to a program. This can be used in a lot of ways and is
    in some ways similar to using `<`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '![<](img/2192OS_06_26.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
- en: Using the < operator to send the contents of dir.txt to the more application
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another powerful feature of bash is the use of environmental variables. Environmental
    variables are values that are stored in memory and can be used to temporarily
    store information and settings. One example of this is the `PATH` variable. The
    `PATH` variable tells bash where to look for any programs if they aren't in the
    current directory.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: All the current environmental variables set can be displayed using the `printenv`
    command. They are loaded into memory automatically when your Raspberry Pi boots
    up.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_27.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
- en: Some of the environmental variables set up by default in Raspbian
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: You can define your own environmental variables easily in bash. By convention,
    in bash, all environmental variables are defined using capital letters.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'To define an environmental variable, you can do as shown in the following screenshot:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_28.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: Defining the MY_VARIABLE environmental value
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables can be used just as easily. To use an environmental
    variable, simply add `$` before it.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_29.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: Using the MY_VARIABLE environmental value
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables are often used in shell scripts to store information
    and results.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do you know that a bug called Shellshock was discovered in 2014 in bash's handling
    of environmental variables? This bug allowed the execution of arbitrary commands
    and presented a huge risk to many of the web servers running on the Internet.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'It is easy to add an environmental variable. To do this, you use the `export`
    command as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An environmental variable's name can't contain a space and must contain capital
    letters.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Basic scripting
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the commands that you have seen so far are just single commands. The bash
    has the ability to execute multiple commands together in one go. Commands can
    be stored in a file called a shell script.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: A shell script has its execute attribute set. It can then be run by simply changing
    into the directory that the script is in and typing its name.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: These shell scripts can be run as normal program a on your Raspberry Pi.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Rebooting and shutting down your Raspberry Pi
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can reboot and shut down your Raspberry Pi using the built-in commands.
    To reboot your Raspberry Pi, all you need to do is run the `reboot` command.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '![Rebooting and shutting down your Raspberry Pi](img/2192OS_06_30.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
- en: Rebooting your Raspberry Pi
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you will want to shut down your Raspberry Pi completely. To do this,
    you can use the `shutdown` command.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'The `shutdown` command takes two different parameters: the first parameter
    is the type of shutdown that you want to do, and the second parameter is the time
    at which you want to do the shutdown.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This reboots your Raspberry Pi. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
- en: '| `-h` | This powers off the system after the shutdown is complete. You will
    still need to disconnect the power to your Raspberry Pi when the shutdown is complete.
    |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
- en: '| `-k` | This doesn''t really shut down the system, it just sends a warning
    message. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
- en: The second parameter is normally the word `now`, which tells your Raspberry
    Pi that we want to shut down immediately.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![Rebooting and shutting down your Raspberry Pi](img/2192OS_06_31.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: Shutting down your Raspberry Pi!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: 'The `halt` command can also be used if you want to shut down your Raspberry
    Pi. Simply run the following command:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Your Raspberry Pi will immediately shut down.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Text editors
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you might need to edit a file on your Raspberry Pi: perhaps to edit
    the `/etc/network/interfaces` file in order to reconfigure your Raspberry Pi network
    interfaces, or you might need a text editor to write a document.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there are several text editors installed with Raspbian. The most
    commonly used text editors are:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: nano
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vim
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nano
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Originally created in 1999 by Chris Allegretta, nano is the easiest text editor
    to use included on the Raspberry Pi.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '![nano](img/2192OS_06_32.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
- en: The nano text editor
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: To edit a file in nano, you simply need to start typing. Once you have made
    changes, you need to save them and exit. The commands that you see at the bottom
    of the screen can be accessed by pressing the *Ctrl* key on your keyboard followed
    by the letter.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: For instance, to exit after you have made changes, press *Ctrl* + *x*.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be asked whether you want to save these changes. To do so, press
    *y*.![nano](img/2192OS_06_33.jpg)
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving changes in nano
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You now need to enter the filename that you want in order to save the file.
    Once you have done this, simply press *Enter* and your file will be saved.![nano](img/2192OS_06_34.jpg)
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirming the filename of the file you are saving
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To load the file you have just saved, just run the `nano` command as shown in
    the following screenshot:![nano](img/2192OS_06_35.jpg)
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the filename that you want to save the file as
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vim
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The other text editor installed on your Raspberry Pi is the vi text editor.
    The vi editor was originally created for Unix-based operating systems by Bill
    Joy in 1976.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: The name vi is derived from the shortened abbreviation of the word visual. The
    vi editor is one of the most widely used text editors in Linux.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_36.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: The vi text editor
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: The vim (improved vi) editor is a bit more complicated to use than nano. The
    vi editor is designed to stay out of your way, and as such, you won't see any
    menus or unnecessary information on the screen.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: The vim editor has several different modes that you use to operate it. One of
    the modes is insert mode. When you are in insert mode, you can use vi like you
    would use the nano text editor, but here you simply type the text and use the
    arrow keys to navigate the file. To get into insert mode, press the *Insert* key
    or type a capital *I*.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_37.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
- en: The vi text editor in insert mode
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: In order to save the file, we need to enter in the command mode. To do this,
    press the *Esc* key followed by the *:* key. This will bring up a command prompt
    at the bottom of the vim window.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_38.jpg)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
- en: The vi text editor in command mode
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different commands available in vim, as follows:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
- en: '| `w` | This writes the file to disk |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
- en: '| `q` | This is used to quit vim |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| `dd` | This deletes the current line of text |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '| `x` | This deletes the character where the cursor is |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
- en: These commands can be entered in Command Prompt, or when you are navigating
    the text and are not in insert mode.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: An example of these commands is the `wq` command. This command saves and quits
    vim when you press *Enter*. You won't be asked whether you want to save your changes,
    as vim knows what you want, based on the command you give!
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to save your changes, simply enter the `q!` command.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: There are many other text editors that can be installed onto your Raspberry
    Pi, such as geany.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the bash shell, file permissions, and many
    of bash's built-in commands. Remember that if you need to find out any more information,
    all that you need to do is add the `man` command in front of the command for which
    you want to find out more information. You will be able to find out as much information
    as you could ever need!
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Remember, don't be scared to experiment with the different commands that are
    built into Raspbian. The worst thing that could happen is that you might need
    to image your SD card again.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
