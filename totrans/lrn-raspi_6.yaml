- en: Chapter 6. The Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Behind the pretty graphical interfaces of a Linux-based operating system such
    as Raspbian, is the console.
  prefs: []
  type: TYPE_NORMAL
- en: The console is the most basic way of communicating with the innards of the Raspbian
    operating system. The console's history started at the very beginning of computing
    where the interface to a computer was a keyboard and a teletype machine. At that
    time, operators would type a command and the result would be printed in front
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Console](img/2192OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A teletype machine
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, with the development of computer monitors, we no longer need a
    typewriter to communicate with our computer and there are many different ways
    in which this can be done. You already learned how to use the Raspberry Pi's graphical
    user interface Xfce, and this chapter will run you through how you can use the
    built-in console terminal application called bash.
  prefs: []
  type: TYPE_NORMAL
- en: Bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Bourne again shell** (**bash**) is a console shell developed by the GNU
    project that was released in 1989\. Originally written by Brian Fox, it has become
    the de facto standard and is used by default in almost all Linux operating systems,
    OS X, Novell NetWare, Android, as well as on Windows. The bash was inspired by
    the `sh` shell, which was extremely popular around the time bash was created.
  prefs: []
  type: TYPE_NORMAL
- en: The bash shell was written as an open source replacement to the Bourne shell
    that was the default command-line interpreter for Unix. The bash supports many
    features, including the autocompletion of commands and filename wildcards.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the bash command interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bash command interpreter is made available to us in the Xfce environment
    through the LXTerminal application. Other terminal clients such as Yakuake can
    be installed using `apt-get`. If you have configured Raspbian to not start the
    Xfce desktop environment, bash will be automatically started after you log in.
  prefs: []
  type: TYPE_NORMAL
- en: You can launch LXTerminal by double-clicking on its icon on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the bash command interpreter](img/2192OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: LXTerminal
  prefs: []
  type: TYPE_NORMAL
- en: You can launch and run as many instances of LXTerminal as you like, but don't
    forget that your Raspberry Pi doesn't have unlimited resources.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not using the Xfce desktop environment, bash will be launched when
    you log in.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that you will notice is that you have Command Prompt. By default,
    this Command Prompt will show you the current directory that you are working in,
    your Raspberry Pi's hostname (by default `raspberrypi`), and your username (by
    default this is `pi`).
  prefs: []
  type: TYPE_NORMAL
- en: As you move around the filesystem, you will see the name of the directory that
    you are in.
  prefs: []
  type: TYPE_NORMAL
- en: To run a command using the bash command interpreter, simply type the command
    and press the *Enter* key. The command will run and the results will be displayed.
    While a command is running, you won't be able to run other commands until it is
    finished.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to let a command run in the background, all you need to do is add
    an `&` operator to the end of the command. This will let the command run in the
    background.
  prefs: []
  type: TYPE_NORMAL
- en: Linux is a full multiprocessing system and you can run as many instances of
    LXTerminal as you want. To see which processing commands are running in the background
    on your Raspberry Pi, simply run `ps –a`.
  prefs: []
  type: TYPE_NORMAL
- en: Basic bash commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to start learning bash is to start using it. Remember that if you
    really make a mess of things, all you need to do is reimage your SD card and away
    you go!
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to get more information about any of the commands that are referred
    to in this chapter. You can do this using the `man` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `man` command launches the built-in documentation system for Linux. Almost
    every command available has documentation in the man system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to find out more information about the `ls` command, simply run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will launch the `man` program and display every bit of information that
    you need to know about the `ls` program.
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic bash commands](img/2192OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The man ls command
  prefs: []
  type: TYPE_NORMAL
- en: To move around the `man` program, you can use the arrow keys on your keyboard.
    If you wish to skip the whole page, you can press the spacebar key. When you have
    finished reading the information, you can exit by pressing the *q* key.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget that Linux is a case-sensitive operating system and it is extremely
    important that you use the correct case when you are running the command.
  prefs: []
  type: TYPE_NORMAL
- en: The autocompletion of commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most useful features of bash is its ability to autocomplete the name
    of the command that you are typing. This is as easy as pressing the *Tab* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to run the command `nano` in order to launch the nano
    text editor, simply type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now press the *Tab* key. The bash will automatically autocomplete the command
    and display this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This can be a real timesaver. If there is more than one possible combination
    of autocompletion, you will need to press the *Tab* key twice. This will cause
    bash to list all the different possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: '![The autocompletion of commands](img/2192OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bash's autocomplete system
  prefs: []
  type: TYPE_NORMAL
- en: Running commands as root
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is an inherently secure operating system. Every part of the operating
    system has been configured to be secure by default. Every file is owned by a particular
    user, and that user is able to allocate permissions to that file in order to restrict
    other users and groups from accessing the file.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all commands that are run in bash are run as the current user. The
    current user is normally the Pi user. This user is a standard user, and this means
    that you will not be able to run any commands that can affect other users, such
    as installing software or changing the network configuration of your Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, it is easy to run commands as the root or superuser. This user
    has unlimited access to every part of the operating system and must be used with
    caution.
  prefs: []
  type: TYPE_NORMAL
- en: To run a command as the superuser, you can use use the `sudo` utility. The `sudo`
    utility lets you run a command as a different user from what you are logged in
    as.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use the `sudo` utility to run a command as root, all you need to
    do is prepend the command that you want to run with `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take an example of the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It will run the `apt-get` application as root. This particular command will
    invoke `apt-get Easter egg`, proving that computer programmers sometimes do have
    a sense of humor!
  prefs: []
  type: TYPE_NORMAL
- en: '![Running commands as root](img/2192OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running a command as root that can make your Raspberry Pi moo!
  prefs: []
  type: TYPE_NORMAL
- en: Moving around the filesystem using bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most basic part of using a command interpreter, such as bash, is to be
    able to move around the Linux filesystem. It is important to understand how bash
    lets you represent directories. This is done in two different ways: using **absolute
    paths** and **relative paths**.'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An absolute path is a path that describes the location of a file or folder starting
    from `/` (root). This is easy to spot as it will always start with `/`.
  prefs: []
  type: TYPE_NORMAL
- en: An example of an absolute path is `/home/pi/Desktop`. This path is the folder
    that contains all the items on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Relative paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A relative path is a path to the file or folder that is described based on where
    you are in the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a relative path is `../Desktop`. This means that a folder called
    `Desktop` is stored in a folder that is one level above the one you are in.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several special paths that you should know of in bash, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Path | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | This is the root of the Linux filesystem and the highest path that
    you can have. |'
  prefs: []
  type: TYPE_TB
- en: '| `./` | This represents the directory that you are currently in. |'
  prefs: []
  type: TYPE_TB
- en: '| `../` | This is the directory one level below the one you are in. |'
  prefs: []
  type: TYPE_TB
- en: '| `~` | This represents your home directory. When you are logged in as the
    Pi user, this will be `/home/pi`. If you are running a command as the root, this
    will be `/root`. |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't have a keyboard with the *~* key, you can press *F12* instead.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have an understanding of how paths are represented in bash, it
    is time to learn how to manipulate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many commands that you can use to manipulate files in bash, which
    include the commands in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `ls` | `cd` | `pwd` | `cat` | `head and tail` |'
  prefs: []
  type: TYPE_TB
- en: '| `cp` | `mv` | `rm` | `mkdir` | `touch` |'
  prefs: []
  type: TYPE_TB
- en: '| `adduser` | `addgroup` | `passwd` | `chmod` | `chown` |'
  prefs: []
  type: TYPE_TB
- en: ls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ls` is perhaps the most common basic function, and is used regularly to see
    which files are present in the directory that you are in. This is done using the
    list (`ls`) command. By default, this is the current folder that you are in. If
    you want to see the contents of another folder, simply append the path to the
    end of the `ls` command.'
  prefs: []
  type: TYPE_NORMAL
- en: '![ls](img/2192OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The contents of the home directory
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ls` doesn''t display any files or folders that begin with (`.`). The reason
    for this is that any file or directories beginning with (`.`) are hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ls` command has many different options that change the output on your
    screen. Some common `ls` parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-a` | This shows hidden files and folders |'
  prefs: []
  type: TYPE_TB
- en: '| `-l` | This uses the long list format. This will show file sizes, file permissions,
    and the owners of the files |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | This shows all the files sized in a human-readable format |'
  prefs: []
  type: TYPE_TB
- en: cd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Linux filesystem is made up of many different files and folders. When using
    bash, it is really important to be able to move around the filesystem. This is
    done using the `cd` (change directory) command.
  prefs: []
  type: TYPE_NORMAL
- en: '`cd` is easy to use. All you need to do in order to change the current directory
    is to run `cd` followed by the path of the folder you want to move into. This
    can either be an absolute directory or a relative directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '![cd](img/2192OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing between directories
  prefs: []
  type: TYPE_NORMAL
- en: The directory that you are in after you run `cd` is called the current working
    directory. Unless you specify, a directory bash will look for any commands that
    you run and any files that you are using in the current working directory. If
    the command is not in the current folder, bash will look in several other predefined
    folders for the command. These folders are specified in the `PATH` environment
    variable in bash.
  prefs: []
  type: TYPE_NORMAL
- en: pwd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, when navigating the Linux filesystem, you might need to find out
    which directory you are in. You can do this using the `pwd` (print working directory)
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '![pwd](img/2192OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The pwd command
  prefs: []
  type: TYPE_NORMAL
- en: cat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are working with files, sometimes it's very handy to quickly view the
    contents of a file. The `cat` command does exactly this. When you run the `cat`
    command followed by a filename, it will display the contents of that file on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![cat](img/2192OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cat command
  prefs: []
  type: TYPE_NORMAL
- en: '`cat` has several options that you can use to customize the format of the file
    on the screen. Some of the `cat` command''s parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-n` | This shows line numbers in the file |'
  prefs: []
  type: TYPE_TB
- en: '| `-E` | This adds **$** at the end of every line so that you can see where
    it is |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that everything in Linux is a file. Using the `cat` command, you can
    read in data from the device on your Raspberry Pi, including its serial port and
    camera. By running `cat /dev/video0 > video.record`, you can record the video
    coming in from your camera.
  prefs: []
  type: TYPE_NORMAL
- en: head and tail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another handy set of commands that you can use to see the contents of a file
    are `head` and `tail`. The `head` and `tail` commands go together and show the
    start of the end of a file. The `head` command is extremely useful if you want
    to see whether a big file is the file that you are looking for and it is too big
    to be shown using `cat`. The `tail` command is extremely handy if you want to
    look at the last few entries in a log file.
  prefs: []
  type: TYPE_NORMAL
- en: '![head and tail](img/2192OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The head and tail commands
  prefs: []
  type: TYPE_NORMAL
- en: The `head` and `tail` commands have many different options that you can use
    in order to customize the output format of the file on the screen. The most important
    is the `–n` option. The `–n` option followed by a number will display *n* lines
    of the file. You can find the other options by running `man head` or `man tail`.
  prefs: []
  type: TYPE_NORMAL
- en: cp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`cp` is another important command in bash. `cp` copies a file or folder from
    one folder to another. By default, `cp` will overwrite a file in the destination
    folder if it already exists, so beware!'
  prefs: []
  type: TYPE_NORMAL
- en: To use `cp`, you first need to specify the file or folder that you want to copy
    followed by the destination folder. If you select a directory, it will copy just
    this directory. If you want to make an exact copy of the directory, you need to
    use the `–r` command. The `–r` command recursively copies the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, what this command does is it makes an exact copy of the folder you
    are copying, so you will most likely want to use this option whenever you are
    copying a directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![cp](img/2192OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Copying a file and a folder
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cp` command has many different options that change how it copies a file
    or directory, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This recursively copies a file or directory |'
  prefs: []
  type: TYPE_TB
- en: '| `-f` | If an existing file in the destination directory can''t be opened,
    this removes it and copies it again |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | This preserves the owner and timestamp of the files that you are copying
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This indicates verbose mode, it shows the names of the files that
    are being copied |'
  prefs: []
  type: TYPE_TB
- en: mv
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you don''t want to copy a file or directory, but instead you want
    to move it around. The `mv` command does exactly that. Its syntax is exactly the
    same as the syntax of `cp`. To move a file or folder, it is simply a matter of
    doing as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![mv](img/2192OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moving a file
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike `cp`, `mv` automatically moves the whole file or folder and it doesn''t
    have an `–r` option. There are several other options available in `mv`, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-f` | This overwrites any files and folders that are in the destination
    location |'
  prefs: []
  type: TYPE_TB
- en: '| `-u` | This only moves the file if it is newer that the file in the destination
    folder |'
  prefs: []
  type: TYPE_TB
- en: rm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, a file or directory is no longer required and needs to be deleted.
    To do this, the `rm` command is used.
  prefs: []
  type: TYPE_NORMAL
- en: To delete a file or folder, simply run the `rm` command followed by the file
    or directory that you want to delete. Raspbian and most other Linux distributions
    don't contain any sort of recycle bin functionality. This means that when you
    delete something, it is permanently deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '![rm](img/2192OS_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Removing a file
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are very few things that you can do to destroy a Linux distribution. The
    `sudo rm –rf /` command is one of them. This command will start at the root directory
    and delete every file on your device, including any files on any removable and
    network drives attached to your Raspberry Pi. Needless to say, be very careful
    when using the `–r` and`–f` flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, when removing a directory, `rm` will stop if there are any files
    in the directory. To delete the directory, you will need to use the `–f` flag
    in order to force the deletion of the folder. Some of the `rm` command''s parameters
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-f` | This never prompts when deleting any files |'
  prefs: []
  type: TYPE_TB
- en: '| `-i` | This prompts before deleting each and every file |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This recursively deletes the files and folders |'
  prefs: []
  type: TYPE_TB
- en: mkdir
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will often need to create a new folder in order to keep your files organized.
    The purpose of using `mkdir` (make directory) is exactly that. To use `mkdir`,
    all you need to do is run `mkdir` followed by the name of the directory that you
    want to create.
  prefs: []
  type: TYPE_NORMAL
- en: '![mkdir](img/2192OS_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using mkdir
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the directory, it is immediately ready for use. You can
    use it to keep your files organized. Some of the `mkdir` parameters of are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | This creates any parent directories, if necessary—for example, `mkdir
    new/directory/with/parents –p` |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every directory that is created |'
  prefs: []
  type: TYPE_TB
- en: touch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`touch` is a simple command that creates an empty file if a file doesn''t exist.
    If the file exists, it updates the access time to when the command is run.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch` is often used when a file needs to exist. Some examples of this include
    creating empty log files. In order to use `touch`, run `touch` followed by the
    filename that you want to create or update the access time of.'
  prefs: []
  type: TYPE_NORMAL
- en: '![touch](img/2192OS_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using touch
  prefs: []
  type: TYPE_NORMAL
- en: adduser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every file in Linux is owned by a user. This helps to keep everything secure.
    By default, everything in the `/home/pi` directory is owned by the Pi user. All
    users also belong to a group. You can allocate permissions depending on the owner
    and group of the user who owns the file.
  prefs: []
  type: TYPE_NORMAL
- en: You can add users to your Raspbian installation using the `adduser` command.
    To do this, run `adduser` followed by the username of the user that you want to
    create. Because `adduser` is a system command, you will need to add `sudo` before
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '![adduser](img/2192OS_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a user
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked a couple of questions by `adduser`, including the username
    and password. If you don't want to provide your name or phone number, simply press
    the *Enter* key. The `adduser` command will also create a new group with the same
    name as your new user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily see which users you have in your Raspbian system by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `/etc/passwd` file contains all the users that are in Raspbian.
  prefs: []
  type: TYPE_NORMAL
- en: addgroup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you need to create a new group in order to organize your file permissions
    as required. To do this, use the `addgroup` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![addgroup](img/2192OS_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new group
  prefs: []
  type: TYPE_NORMAL
- en: The `addgroup` command is simple to use. All you need to do is to add the name
    of the group after the `addgroup` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new group will be created along with a new ID. To see the groups that are
    there in Raspbian, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: passwd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the system administrator of your very own Linux system, you have a lot of
    power. You can use this power to change users' passwords using the `passwd` command.
    There are a couple of different ways in which you can use `passwd`. One of them
    is to change your own password. Another way in which you can use `passwd` is to
    change the password of another user on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Changing your password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change your own password, run the passwd command as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing your password](img/2192OS_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing your password
  prefs: []
  type: TYPE_NORMAL
- en: This will ask you to enter your current password. After you enter this, you
    will need to enter the new password twice.
  prefs: []
  type: TYPE_NORMAL
- en: Changing another user's password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Changing another user's password is just as easy as changing your password.
    To do this, add the username of the user after the `passwd` command. This command
    needs to be run as root, so add `sudo` before it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing another user''s password](img/2192OS_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing another user's password
  prefs: []
  type: TYPE_NORMAL
- en: This is really useful if you need to change someone else's password. By default,
    there is no root password set in Raspbian. To set it, run `sudo passwd`.
  prefs: []
  type: TYPE_NORMAL
- en: chown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, Linux is a multiuser system and all the files have
    an owner. Sometimes, the owner needs to be changed. To do this, use the `chown`
    command. `chown` can change the user of a file or directory.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of permissions in use is the Apache web server. All the configuration
    files in the `/etc/apache2` directory are owned by the Apache2 user, along with
    the files located in the `/var/www` directory where the website that Apache2 is
    serving.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, when you add a file to this directory, you need to change the owner
    to be the Apache2 web server. If you don't do this, Apache2 won't be able to serve
    the file to anyone who wants to take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: '`chown` needs several parameters. They are the new owner and the group of the
    file or directory that you want to change the owner of.'
  prefs: []
  type: TYPE_NORMAL
- en: '![chown](img/2192OS_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the owner of all the files in Apache2's web root
  prefs: []
  type: TYPE_NORMAL
- en: The owner and group need to be separated by a (`:`). In the preceding example,
    the user and group are both Apache2.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different options that you can add to the `chown` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-R` | This changes the owner of all the files and folders in the folder
    recursively |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every file that is processed |'
  prefs: []
  type: TYPE_TB
- en: Some of the chown command's parameters
  prefs: []
  type: TYPE_NORMAL
- en: chmod
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The other part of a file''s properties in Linux are its permissions. These
    permissions describe who can do what to files and directories. The following permissions
    are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Owner (o)** | Read | Write | Execute |'
  prefs: []
  type: TYPE_TB
- en: '| **Group (g)** | Read | Write | Execute |'
  prefs: []
  type: TYPE_TB
- en: '| **All users (a)** | Read | Write | Execute |'
  prefs: []
  type: TYPE_TB
- en: Linux file permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these permissions is represented by a letter, as shown in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Read** | `r` |'
  prefs: []
  type: TYPE_TB
- en: '| **Write** | `w` |'
  prefs: []
  type: TYPE_TB
- en: '| **Execute** | `x` |'
  prefs: []
  type: TYPE_TB
- en: 'If you run the `ls –ll` command, you will be able to see what the permissions
    are for the file and directory that you are in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![chmod](img/2192OS_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default permissions of the /home/pi directory
  prefs: []
  type: TYPE_NORMAL
- en: Permissions are grouped together in groups of three. The first three describe
    the users' permission for the file, the next three describe the group's permissions,
    and the last three describe permissions of all users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `rw-r—r—` permissions of the `ocr_pi.png` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read |'
  prefs: []
  type: TYPE_TB
- en: '| **All users** | Read |'
  prefs: []
  type: TYPE_TB
- en: Permissions for ocr_pi.png
  prefs: []
  type: TYPE_NORMAL
- en: Octal representation of permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Permissions can also be described using an octal representation. This is a little
    more complicated but very flexible.
  prefs: []
  type: TYPE_NORMAL
- en: '| Octal notation | Permissions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | No permissions |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Execute |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Write |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Write and execute |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Read |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Read and execute |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Read and write |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Read, write, and execute |'
  prefs: []
  type: TYPE_TB
- en: 'To describe the permissions of a file, simply work out what permissions you
    want to give. In the following example, we want the `demo.txt` file to have the
    following permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read only |'
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | No permissions |'
  prefs: []
  type: TYPE_TB
- en: A demo of the permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'To work out the permissions, we start with the owner and find the read and
    write permissions. We then do the same for the group and all users'' permissions.
    These permissions work out as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| **Group** | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | 0 |'
  prefs: []
  type: TYPE_TB
- en: Octal permissions for the file
  prefs: []
  type: TYPE_NORMAL
- en: These permissions are put together to be `640`. The `chmod` command uses this
    representation to set the permissions of the file or folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Octal representation of permissions](img/2192OS_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the permissions of the demo.txt file
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to individually add and remove permissions from a file or
    folder. To do this, the user can use the notations described in the previous two
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the `demo.txt` file with the permissions as shown in the screenshot
    (*The default permissions of the /home/pi directory*) given earlier in this chapter.
    The permissions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Permissions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Owner** | Read and write |'
  prefs: []
  type: TYPE_TB
- en: '| **Group** | Read |'
  prefs: []
  type: TYPE_TB
- en: '| **All Users** | No permissions |'
  prefs: []
  type: TYPE_TB
- en: 'If we want to add the write permission to members of the same group, we do
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Octal representation of permissions](img/2192OS_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the permissions of the demo.txt file
  prefs: []
  type: TYPE_NORMAL
- en: The `+` symbol adds permissions and the `–` symbol removes permissions from
    files.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the file now has group permissions to read and write. The disadvantage
    of using this method is that you need to separately set the permissions of the
    file for the owner, group, and all users.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several other command-line parameters for `chmod`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-R` | This changes all the permissions for all the directories and files
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-v` | This displays a message for every file that is processed |'
  prefs: []
  type: TYPE_TB
- en: '| `-c` | This only displays files that have their permissions changed |'
  prefs: []
  type: TYPE_TB
- en: Command-line parameters for chmod
  prefs: []
  type: TYPE_NORMAL
- en: Redirection in bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the more advanced features of bash are the redirection operators. These
    operators allow you to divert the input or output of a command to another command
    or file. While this sounds simple, it is an extremely powerful feature. There
    are several redirection operators built into bash, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | This is a general-purpose command that chains similar to > |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | This redirects the output of a command to a file |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | This reads a file and passes it to the command |'
  prefs: []
  type: TYPE_TB
- en: '| `>>` | This appends the output of the command to a file |'
  prefs: []
  type: TYPE_TB
- en: Redirection operators
  prefs: []
  type: TYPE_NORMAL
- en: The `|` operator is a general-purpose command-changing tool. A simple example
    of this is to use it with `cat` and the program `more`. The `more` program is
    a simple program that lets you move backward and forward throughout a file on
    the screen in order to read it. The `more` command gets the data that you want
    to read from the `cat` command. The `|` operator connects two programs together.
  prefs: []
  type: TYPE_NORMAL
- en: '![Redirection in bash](img/2192OS_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The more and cat commands connected using the | operator
  prefs: []
  type: TYPE_NORMAL
- en: and >>
  prefs:
  - PREF_H2
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `>` and `>>` operators are really powerful operators that take the data
    that is output by a program and write it to a file. The `>` operator replaces
    the file and the `>>` operator appends it to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that everything in Linux is a file, so you can use the `>` and `>>`
    operators to direct the output to a serial port or a printer.
  prefs: []
  type: TYPE_NORMAL
- en: '![> and >>](img/2192OS_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The > operator writes the result of an ls command to a file
  prefs: []
  type: TYPE_NORMAL
- en: <
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<` operator is similar to the `>` operator, except that it reads the contents
    of a file and feeds it to a program. This can be used in a lot of ways and is
    in some ways similar to using `<`.
  prefs: []
  type: TYPE_NORMAL
- en: '![<](img/2192OS_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the < operator to send the contents of dir.txt to the more application
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another powerful feature of bash is the use of environmental variables. Environmental
    variables are values that are stored in memory and can be used to temporarily
    store information and settings. One example of this is the `PATH` variable. The
    `PATH` variable tells bash where to look for any programs if they aren't in the
    current directory.
  prefs: []
  type: TYPE_NORMAL
- en: All the current environmental variables set can be displayed using the `printenv`
    command. They are loaded into memory automatically when your Raspberry Pi boots
    up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some of the environmental variables set up by default in Raspbian
  prefs: []
  type: TYPE_NORMAL
- en: You can define your own environmental variables easily in bash. By convention,
    in bash, all environmental variables are defined using capital letters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define an environmental variable, you can do as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Defining the MY_VARIABLE environmental value
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables can be used just as easily. To use an environmental
    variable, simply add `$` before it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Environmental variables](img/2192OS_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the MY_VARIABLE environmental value
  prefs: []
  type: TYPE_NORMAL
- en: Environmental variables are often used in shell scripts to store information
    and results.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do you know that a bug called Shellshock was discovered in 2014 in bash's handling
    of environmental variables? This bug allowed the execution of arbitrary commands
    and presented a huge risk to many of the web servers running on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is easy to add an environmental variable. To do this, you use the `export`
    command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: An environmental variable's name can't contain a space and must contain capital
    letters.
  prefs: []
  type: TYPE_NORMAL
- en: Basic scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the commands that you have seen so far are just single commands. The bash
    has the ability to execute multiple commands together in one go. Commands can
    be stored in a file called a shell script.
  prefs: []
  type: TYPE_NORMAL
- en: A shell script has its execute attribute set. It can then be run by simply changing
    into the directory that the script is in and typing its name.
  prefs: []
  type: TYPE_NORMAL
- en: These shell scripts can be run as normal program a on your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Rebooting and shutting down your Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can reboot and shut down your Raspberry Pi using the built-in commands.
    To reboot your Raspberry Pi, all you need to do is run the `reboot` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rebooting and shutting down your Raspberry Pi](img/2192OS_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rebooting your Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you will want to shut down your Raspberry Pi completely. To do this,
    you can use the `shutdown` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `shutdown` command takes two different parameters: the first parameter
    is the type of shutdown that you want to do, and the second parameter is the time
    at which you want to do the shutdown.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameter | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `-r` | This reboots your Raspberry Pi. |'
  prefs: []
  type: TYPE_TB
- en: '| `-h` | This powers off the system after the shutdown is complete. You will
    still need to disconnect the power to your Raspberry Pi when the shutdown is complete.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-k` | This doesn''t really shut down the system, it just sends a warning
    message. |'
  prefs: []
  type: TYPE_TB
- en: The second parameter is normally the word `now`, which tells your Raspberry
    Pi that we want to shut down immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rebooting and shutting down your Raspberry Pi](img/2192OS_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shutting down your Raspberry Pi!
  prefs: []
  type: TYPE_NORMAL
- en: 'The `halt` command can also be used if you want to shut down your Raspberry
    Pi. Simply run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Your Raspberry Pi will immediately shut down.
  prefs: []
  type: TYPE_NORMAL
- en: Text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you might need to edit a file on your Raspberry Pi: perhaps to edit
    the `/etc/network/interfaces` file in order to reconfigure your Raspberry Pi network
    interfaces, or you might need a text editor to write a document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there are several text editors installed with Raspbian. The most
    commonly used text editors are:'
  prefs: []
  type: TYPE_NORMAL
- en: nano
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nano
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Originally created in 1999 by Chris Allegretta, nano is the easiest text editor
    to use included on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: '![nano](img/2192OS_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The nano text editor
  prefs: []
  type: TYPE_NORMAL
- en: To edit a file in nano, you simply need to start typing. Once you have made
    changes, you need to save them and exit. The commands that you see at the bottom
    of the screen can be accessed by pressing the *Ctrl* key on your keyboard followed
    by the letter.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, to exit after you have made changes, press *Ctrl* + *x*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be asked whether you want to save these changes. To do so, press
    *y*.![nano](img/2192OS_06_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving changes in nano
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You now need to enter the filename that you want in order to save the file.
    Once you have done this, simply press *Enter* and your file will be saved.![nano](img/2192OS_06_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirming the filename of the file you are saving
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To load the file you have just saved, just run the `nano` command as shown in
    the following screenshot:![nano](img/2192OS_06_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the filename that you want to save the file as
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vim
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The other text editor installed on your Raspberry Pi is the vi text editor.
    The vi editor was originally created for Unix-based operating systems by Bill
    Joy in 1976.
  prefs: []
  type: TYPE_NORMAL
- en: The name vi is derived from the shortened abbreviation of the word visual. The
    vi editor is one of the most widely used text editors in Linux.
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vi text editor
  prefs: []
  type: TYPE_NORMAL
- en: The vim (improved vi) editor is a bit more complicated to use than nano. The
    vi editor is designed to stay out of your way, and as such, you won't see any
    menus or unnecessary information on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The vim editor has several different modes that you use to operate it. One of
    the modes is insert mode. When you are in insert mode, you can use vi like you
    would use the nano text editor, but here you simply type the text and use the
    arrow keys to navigate the file. To get into insert mode, press the *Insert* key
    or type a capital *I*.
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vi text editor in insert mode
  prefs: []
  type: TYPE_NORMAL
- en: In order to save the file, we need to enter in the command mode. To do this,
    press the *Esc* key followed by the *:* key. This will bring up a command prompt
    at the bottom of the vim window.
  prefs: []
  type: TYPE_NORMAL
- en: '![vim](img/2192OS_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The vi text editor in command mode
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different commands available in vim, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | This writes the file to disk |'
  prefs: []
  type: TYPE_TB
- en: '| `q` | This is used to quit vim |'
  prefs: []
  type: TYPE_TB
- en: '| `dd` | This deletes the current line of text |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | This deletes the character where the cursor is |'
  prefs: []
  type: TYPE_TB
- en: These commands can be entered in Command Prompt, or when you are navigating
    the text and are not in insert mode.
  prefs: []
  type: TYPE_NORMAL
- en: An example of these commands is the `wq` command. This command saves and quits
    vim when you press *Enter*. You won't be asked whether you want to save your changes,
    as vim knows what you want, based on the command you give!
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to save your changes, simply enter the `q!` command.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other text editors that can be installed onto your Raspberry
    Pi, such as geany.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the bash shell, file permissions, and many
    of bash's built-in commands. Remember that if you need to find out any more information,
    all that you need to do is add the `man` command in front of the command for which
    you want to find out more information. You will be able to find out as much information
    as you could ever need!
  prefs: []
  type: TYPE_NORMAL
- en: Remember, don't be scared to experiment with the different commands that are
    built into Raspbian. The worst thing that could happen is that you might need
    to image your SD card again.
  prefs: []
  type: TYPE_NORMAL
