["```\nroot@beaglebone:~# lsusb\nBus 001 Device 002: ID 0658:0200 Sigma Designs, Inc.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n\n```", "```\nhub 1-0:1.0: hub_resume\nhub 1-0:1.0: port 1: status 0101 change 0001\nhub 1-0:1.0: state 7 ports 1 chg 0002 evt 0000\nhub 1-0:1.0: port 1, status 0101, change 0000, 12 Mb/s\nusb 1-1: new full-speed USB device number 2 using musb-hdrc\nusb 1-1: ep0 maxpacket = 8\nusb 1-1: skipped 4 descriptors after interface\nusb 1-1: udev 2, busnum 1, minor = 1\nusb 1-1: New USB device found, idVendor=0658, idProduct=0200\nusb 1-1: New USB device strings: Mfr=0, Product=0, SerialNumber=0\nusb 1-1: usb_probe_device\nusb 1-1: configuration #1 chosen from 1 choice\nusb 1-1: adding 1-1:1.0 (config #1, interface 0)\ncdc_acm 1-1:1.0: usb_probe_interface\ncdc_acm 1-1:1.0: usb_probe_interface - got id\ncdc_acm 1-1:1.0: This device cannot do calls on its own. It is not a modem.\ncdc_acm 1-1:1.0: ttyACM0: USB ACM device\nusb 1-1: adding 1-1:1.1 (config #1, interface 1)\nhub 1-0:1.0: state 7 ports 1 chg 0000 evt 0002\nhub 1-0:1.0: port 1 enable change, status 00000103\n\n```", "```\nroot@beaglebone:~# git clone https://github.com/OpenZWave/open-zwave openzwave\n\n```", "```\nroot@beaglebone:~# aptitude install build-essential make git libudev-dev libjson0 libjson0-dev libcurl4-gnutls-dev\n\n```", "```\nroot@beaglebone:~# cd openzwave\nroot@beaglebone:~/openzwave# make\n\n```", "```\nroot@beaglebone:~/openzwave# git clone https://github.com/OpenZWave/open-zwave-control-panel openzwave-control-panel\n\n```", "```\nroot@beaglebone:~/openzwave# aptitude install libmicrohttpd-dev\n\n```", "```\nroot@beaglebone:~/openzwave# cd openzwave-control-panel/\nroot@beaglebone:~/openzwave/openzwave-control-panel# make\n\n```", "```\nroot@beaglebone:~/openzwave/openzwave-control-panel# ln -s ../config\nroot@beaglebone:~/openzwave/openzwave-control-panel# ./ozwcp -d -p 8080\n2014-04-23 21:12:52.943 Always, OpenZwave Version 1.3.526 Starting Up\nwebserver starting port 8080\n\n```", "```\nFailed to bind to port 8080: Address already in use\n\n```", "```\nroot@beaglebone:~# wget http://bibi21000.no-ip.biz/python-openzwave/python-openzwave-0.3.0b5.tgz\n\n```", "```\nroot@beaglebone:~# tar xvfz python-openzwave-0.3.0b5.tgz\n\n```", "```\nroot@beaglebone:~# pip install \n<package>\n\n```", "```\nroot@beaglebone:~# pip install --upgrade urwid\n\n```", "```\nroot@beaglebone:~# pip install Flask-WTF==0.9.5\n\n```", "```\n--- ./setup-web.py.orig   2014-04-24 03:50:41.398440723 +0000\n+++ ./setup-web.py\t2014-04-24 03:39:52.212893771 +0000\n@@ -49,7 +49,7 @@\n   install_requires = [\n                      'openzwave == %s' % pyozw_version,\n                      'Flask == 0.10.1',\n-                     'Flask-WTF == 0.9.5',\n+                     'Flask-WTF >= 0.9.5',\n                      'Babel >= 1.0',\n                      'Flask-Babel == 0.9',\n                      #'Flask-Fanstatic == 0.2.0',\n```", "```\nroot@beaglebone:~/python-openzwave-0.3.0b5# make deps build\n\n```", "```\nroot@beaglebone:~/python-openzwave-0.3.0b5# make install\n\n```", "```\nroot@beaglebone:~/python-openzwave-0.3.0b5# cd examples/\nroot@beaglebone:~/python-openzwave-0.3.0b5/examples# ./test_lib.py --device=/dev/ttyACM0\n\n```", "```\n./test_lib.py:28: UserWarning: Module libopenzwave was already imported from None, but /usr/local/lib/python2.7/dist-packages/libopenzwave-0.3.0b5-py2.7-linux-armv7l.egg is being added to sys.path\n\n```", "```\nAlways, OpenZwave Version 1.3.482 Starting Up\nAdd watcher\nAdd device\nInfo, Setting Up Provided Network Key for Secure Communications\nWarning, Failed - Network Key Not Set\nInfo, mgr,     Added driver for controller /dev/ttyACM0\nSniff network during 60.0 seconds\nInfo,   Opening controller /dev/ttyACM0\nInfo, Trying to open serial port /dev/ttyACM0 (attempt 1)\nInfo, Serial port /dev/ttyACM0 opened (attempt 1)\n\n```", "```\nDetail, contrlr, Queuing (Command) FUNC_ID_ZW_GET_VERSION: 0x01, 0x03, 0x00, 0x15, 0xe9\nDetail, contrlr, Queuing (Command) FUNC_ID_ZW_MEMORY_GET_ID: 0x01, 0x03, 0x00, 0x20, 0xdc\nDetail, contrlr, Queuing (Command) FUNC_ID_ZW_GET_CONTROLLER_CAPABILITIES: 0x01, 0x03, 0x00, 0x05, 0xf9\nDetail, contrlr, Queuing (Command) FUNC_ID_SERIAL_API_GET_CAPABILITIES: 0x01, 0x03, 0x00, 0x07, 0xfb\nDetail, contrlr, Queuing (Command) FUNC_ID_ZW_GET_SUC_NODE_ID: 0x01, 0x03, 0x00, 0x56, 0xaa\nDetail, contrlr, Sending (Command) FUNC_ID_ZW_GET_VERSION: 0x01, 0x03, 0x00, 0x15, 0xe9\nDetail, contrlr, Received: 0x01, 0x10, 0x01, 0x15, 0x5a, 0x2d, 0x57, 0x61, 0x76, 0x65, 0x20, 0x33, 0x2e, 0x37, 0x39, 0x00, 0x01, 0x9b\n\n```", "```\nInfo, contrlr,   Received reply to FUNC_ID_ZW_GET_VERSION:\nInfo, contrlr,   Static Controller library, version Z-Wave 3.79\n\n```", "```\nInfo, contrlr,     Node 001 - New\nDetail, Node001, AdvanceQueries queryPending=0 queryRetries=0 queryStage=None live=1\nDetail, Node001, QueryStage_ProtocolInfo\nDetail, Node001, Queuing (Query) Get Node Protocol Info (Node=1): 0x01, 0x04, 0x00, 0x41, 0x01, 0xbb\nDetail, Node001, Queuing (Query) Query Stage Complete (ProtocolInfo)\nInfo, Node001, Initilizing Node. New Node: false (false)\nInfo, contrlr,     Node 009 - New\nDetail, Node009, AdvanceQueries queryPending=0 queryRetries=0 queryStage=None live=1\nDetail, Node009, QueryStage_ProtocolInfo\nDetail, Node009, Queuing (Query) Get Node Protocol Info (Node=9): 0x01, 0x04, 0x00, 0x41, 0x09, 0xb3\nDetail, Node009, Queuing (Query) Query Stage Complete (ProtocolInfo)\nInfo, Node009, Initilizing Node. New Node: false (false)\nInfo, contrlr,     Node 010 - New\nDetail, Node010, AdvanceQueries queryPending=0 queryRetries=0 queryStage=None live=1\nDetail, Node010, QueryStage_ProtocolInfo\nDetail, Node010, Queuing (Query) Get Node Protocol Info (Node=10): 0x01, 0x04, 0x00, 0x41, 0x0a, 0xb0\nDetail, Node010, Queuing (Query) Query Stage Complete (ProtocolInfo)\n\n```", "```\n--------------------\n[DriverReady]:\n\nhomeId: 0xe4056d54\nnodeId: 1\n--------------------\n\n2014-04-24 13:56:31.961 Detail, Node001, Notification: NodeNew\n\n--------------------\n[NodeNew]:\n\nhomeId: 0xe4056d54\nnodeId: 1\n--------------------\n\n2014-04-24 13:56:31.963 Detail, Node001, Notification: NodeAdded\n\n--------------------\n[NodeAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 1\n---------------\n-----\n\n```", "```\n2014-04-24 13:56:31.966 Detail, Node009, Notification: NodeNew\n\n--------------------\n[NodeNew]:\n\nhomeId: 0xe4056d54\nnodeId: 9\n--------------------\n\n2014-04-24 13:56:31.967 Detail, Node009, Notification: NodeAdded\n\n--------------------\n[NodeAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 9\n--------------------\n\n```", "```\n2014-04-24 13:56:31.969 Detail, Node010, Notification: NodeNew\n\n--------------------â€©[NodeNew]:\n\nhomeId: 0xe4056d54\nnodeId: 10\n--------------------\n\n2014-04-24 13:56:31.972 Detail, Node010, Notification: NodeAdded\n\n--------------------\n[NodeAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 10\n--------------------\n\n```", "```\n --------------------\n[NodeProtocolInfo]:\n\nhomeId: 0xe4056d54\nnodeId: 1\n--------------------\n\n2014-04-24 13:56:32.015 Detail, Node001, Notification: ValueAdded\n\n--------------------\n[ValueAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 1\nvalueID: 72057594055229441\nValue: None\nLabel: None\nUnits: None\nReadOnly: False\n--------------------\n\n--------------------\n[NodeProtocolInfo]:\n\nhomeId: 0xe4056d54\nnodeId: 9\n--------------------\n\n2014-04-24 13:56:32.094 Detail, Node009, Notification: ValueAdded\n\n--------------------\n[ValueAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 9\nvalueID: 72057594193723392\nValue: False\nLabel: Switch\nUnits:\nReadOnly: False\n--------------------\n...\n--------------------\n[NodeProtocolInfo]:\n\nhomeId: 0xe4056d54\nnodeId: 10\n--------------------\n\n2014-04-24 13:56:32.150 Detail, Node010, Notification: ValueAdded\n\n--------------------\n[ValueAdded]:\n\nhomeId: 0xe4056d54\nnodeId: 10\nvalueID: 72057594210680832\nValue: False\nLabel: Sensor\nUnits:\nReadOnly: True\n--------------------\n\n```", "```\nroot@beaglebone:~/python-openzwave-0.3.0b5/examples# ./api_demo.py --log=Info --device=/dev/ttyACM0\n\n```", "```\nTry to autodetect nodes on the network\n------------------------------------------------------------\nNodes in network : 3\n------------------------------------------------------------\nRetrieve switches on the network\n------------------------------------------------------------\nnode/name/index/instance : 9//0/1\n label/help : Switch/\n id on the network : e4056d54.9.25.1.0\n state: False\n------------------------------------------------------------\nRetrieve dimmers on the network\n------------------------------------------------------------\n------------------------------------------------------------\nRetrieve sensors on the network\n------------------------------------------------------------\nnode/name/index/instance : 10//0/1\n label/help : Sensor/\n id on the network : e4056d54.10.30.1.0\n value: True\nnode/name/index/instance : 10//1/1\n label/help : Temperature/\n id on the network : e4056d54.10.31.1.1\n value: 0.0 F\nnode/name/index/instance : 10//3/1\n label/help : Luminance/\n id on the network : e4056d54.10.31.1.3\n value: 675.0 lux\nnode/name/index/instance : 10//5/1\n label/help : Relative Humidity/\n id on the network : e4056d54.10.31.1.5\n value: 48.0 %\nnode/name/index/instance : 9//32/1\n label/help : Exporting/\n id on the network : e4056d54.9.32.1.32\n value: False\nnode/name/index/instance : 9//4/1\n label/help : Power/\n id on the network : e4056d54.9.31.1.4\n value: 0.0 W\nnode/name/index/instance : 9//0/1\n label/help : Energy/\n id on the network : e4056d54.9.32.1.0\n value: 0.0 kWh\nnode/name/index/instance : 9//8/1\n label/help : Power/\n id on the network : e4056d54.9.32.1.8\n value: 0.0 W\n------------------------------------------------------------\nRetrieve switches all compatibles devices on the network \n------------------------------------------------------------\nnode/name/index/instance : 9//0/1\n label/help : Switch All/\n id on the network : e4056d54.9.27.1.0\n value / items: Disabled / set([u'Disabled', u'On and Off Enabled', u'On Enabled', u'Off Enabled'])\n state: False\n------------------------------------------------------------\nRetrieve protection compatibles devices on the network \n------------------------------------------------------------\nRetrieve battery compatibles devices on the network \n------------------------------------------------------------\nnode/name/index/instance : 10//0/1\n label/help : Battery Level/\n id on the network : e4056d54.10.80.1.0\n value : 100\n------------------------------------------------------------\nRetrieve power level compatibles devices on the network \n\n```", "```\nfrom __future__ import print_function\nimport os\nimport sys\nimport getopt\nimport string\nimport syslog\nimport resource\nimport time\n\nfrom openzwave.node import ZWaveNode\nfrom openzwave.value import ZWaveValue\nfrom openzwave.scene import ZWaveScene\nfrom openzwave.controller import ZWaveController\nfrom openzwave.network import ZWaveNetwork\nfrom openzwave.option import ZWaveOption\nfrom louie import dispatcher, All\n\nfrom BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer\nimport json\nimport cgi\n```", "```\nNAME = os.path.basename(sys.argv[0])\ndebug = False\nlogstderr = False\nlog = \"Info\"\ntimeout_s = 20\nport = 8080\n\n# Default system status\nvalues = {\n   \"switch\" :  \"off\",\n   \"power\"  :    0.0,\n   \"temp\"   :      0,\n   \"hum\"    :      0,\n   \"lum\"    :      0,\n   \"bat_lvl\":      0,\n   \"sensor\" :   \"no\",\n}\n```", "```\ndef louie_value(network, node, value):\n   # Record all new status changing\n   if (value.label == \"Switch\"):\n      values[\"switch\"] = \"on\" if value.data else \"off\"\n   elif (value.label == \"Power\"):\n      values[\"power\"] = value.data\n   elif (value.label == \"Temperature\"):\n      values[\"temp\"] = value.data\n   elif (value.label == \"Relative Humidity\"):\n      values[\"hum\"] = value.data\n   elif (value.label == \"Luminance\"):\n      values[\"lum\"] = value.data\n   elif (value.label == \"Battery Level\"):\n      values[\"bat_lvl\"] = value.data\n   elif (value.label == \"Sensor\"):\n      values[\"sensor\"] = \"yes\" if value.data else \"no\"\n   dbg(\"dev=%s(%d) name=%s data=%d\" % \\\n      (node.product_name, node.node_id, value.label, value.data))\n\ndef louie_network_started(network):\n   dbg(\"network is started: homeid %0.8x\" % network.home_id)\n\ndef louie_network_resetted(network):\n   dbg(\"network is resetted\")\n\ndef louie_network_ready(network):\n   dbg(\"network is now ready\")\n   dispatcher.connect(louie_value, ZWaveNetwork.SIGNAL_VALUE)\n```", "```\nclass myHandler(BaseHTTPRequestHandler):\n   # Disable standard logging messages\n   def log_message(self, format, *args):\n      return\n\n   # Handler for the GET requests\n   def do_GET(self):\n      if self.path == \"/\":\n         self.path = \"/house.html\"\n      elif self.path == \"/get\":\n         #dbg(\"serving %s...\" % self.path)\n\n         # Return the current status in JSON format\n         self.send_response(200)\n         self.send_header('Content-type', 'application/json')\n         self.end_headers()\n         self.request.sendall(json.dumps(values))\n\n         return\n\n      # Otherwise try serving a file\n      try:\n         # Open the file and send it\n         f = open(os.curdir + os.sep + self.path)\n         self.send_response(200)\n         self.send_header('Content-type', 'text/html')\n         self.end_headers()\n         self.wfile.write(f.read())\n         f.close()\n         dbg(\"file %s served\" % self.path)\n\n      except IOError:\n         self.send_error(404, 'File Not Found: %s' % self.path)\n         dbg(\"file %s not found!\" % self.path)\n\n      return\n\n   # Handler for the POST requests\n   def do_POST(self):\n      if self.path == \"/set\":\n         # Parse the data posted\n         dbg(\"managing %s...\" % self.path)\n         data = cgi.FieldStorage(fp = self.rfile, headers = self.headers, environ = {'REQUEST_METHOD':'POST', 'CONTENT_TYPE':self.headers['Content-Type'],})\n\n         self.send_response(200)\n         self.end_headers()\n         dbg(\"got label=%s\" % data[\"do\"].value)\n\n         # Set the device according to user input\n         if data[\"do\"].value == \"switch\":\n         network.nodes[sw_node].set_switch(sw_val, False if values[\"switch\"] == \"on\" else True)\n\n         return\n\n      # Otherwise return error\n      self.send_error(404, 'File Not Found: %s' % self.path)\n      dbg(\"file %s not found!\" % self.path)\n\n      return\n```", "```\n# Define some manager options and create a network object\noptions = ZWaveOption(device, config_path = \"./openzwave/config\", user_path = \".\", cmd_line = \"\")\noptions.set_log_file(NAME + \".log\")\noptions.set_append_log_file(False)\n#options.set_console_output(True)\noptions.set_console_output(False)\noptions.set_save_log_level(log)\noptions.set_logging(True)\noptions.lock()\nnetwork = ZWaveNetwork(options, log = None)\n\n# Add the basic callbacks\ndispatcher.connect(louie_network_started, ZWaveNetwork.SIGNAL_NETWORK_STARTED)\ndispatcher.connect(louie_network_resetted, ZWaveNetwork.SIGNAL_NETWORK_RESETTED)\ndispatcher.connect(louie_network_ready, ZWaveNetwork.SIGNAL_NETWORK_READY)\ndbg(\"callbacks installed\")\n\ninfo(\"Starting...\")\n\n# Waiting for driver to start\nfor i in range(0, timeout_s):\n   if network.state >= network.STATE_STARTED:\n      break\n   else:\n      sys.stdout.flush()\n      time.sleep(1.0)\nif network.state < network.STATE_STARTED:\n   err(\"Can't initialize driver! Look at the logs file\")\n   sys.exit(1)\n\ninfo(\"use openzwave library   = %s\" % network.controller.ozw_library_version)\ninfo(\"use python library      = %s\" % network.controller.python_library_version)\ninfo(\"use ZWave library       = %s\" % network.controller.library_description)\ninfo(\"network home id         = %s\" % network.home_id_str)\ninfo(\"controller node id      = %s\" % network.controller.node.node_id)\ninfo(\"controller node version = %s\" % (network.controller.node.version))\n```", "```\n# Waiting for network is ready\ntime_started = 0\nfor i in range(0, timeout_s):\n   if network.state >= network.STATE_READY:\n      break\n   else:\n      time_started += 1\n      sys.stdout.flush()\n      time.sleep(1.0)\n\ndbg(\"detecting the switch node...\")\nfor node in network.nodes:\n   for val in network.nodes[node].get_switches():\n      data = network.nodes[node].values[val].data\n      values[\"switch\"] = \"on\" if data else \"off\"\n      sw_node = node\n      sw_val = val\n      dbg(\" - device %s(%s) is %s\" % \\\n         (network.nodes[node].values[val].label, node, values[\"switch\"]))\n\n      # We can manage just one switch!\n      break\n\ninfo(\"Press CTRL+C to stop\")\n```", "```\n# Create a web server and define the handler to manage the incoming requests\ntry:\n   server = HTTPServer(('', port), myHandler)\n   info(\"Started HTTP server on port %d\" % port)\n\n   # Wait forever for incoming HTTP requests\n   server.serve_forever()\n\nexcept KeyboardInterrupt:\n   info(\"CTRL+C received, shutting down...\")\n   server.socket.close()\n   network.stop()\n\ninfo(\"Done.\")\n```", "```\n   <head>\n      <link href=\"house.css\" rel=\"stylesheet\" type=\"text/css\">\n\n      <script src=\"img/jquery-1.9.1.js\"></script>\n\n      <script>\n         var polldata = function() {\n            $.getJSON('/get', function(data) {\n               $.each(data, function(key, val) {\n                  var e = document.getElementById(key);\n\n                  if (e != null) {\n                     if (e.type == \"text\")\n                        e.value = val;\n                  else\n                     e.textContent = val;\n                 }\n               });\n            });\n         };\n\n         setInterval(polldata, 1000);\n      </script>\n\n      <script>\n         $(function() {\n            $('button[class=\"do-button\"]').click(function() {\n               var id = $(this).attr(\"id\");\n\n               $.ajax({\n                  url: \"/set\",\n                  type: \"POST\",\n                  data: \"do=\" + id,\n                  success: function() {\n                     console.log('do POST success');\n                  },\n                  error: function() {\n                     console.log('do POST error');\n                  }\n               });\n            });\n         });\n      </script>\n   </head>\n```", "```\n <body>\n  <h1>Home monitor status</h1>\n\n  <h2>Internal variables</h2>\n\n  <table class=\"status\">\n   <tr class=\"d0\">\n     <td>Switch</td>\n     <td><b id=\"switch\">off</b></td>\n     <td><button id=\"switch\" class=\"do-button\">switch</button</td>\n   </tr>\n   <tr class=\"d0\">\n     <td>Power[KW]</td>\n     <td><b id=\"power\">0</b></td>\n     <td></td>\n   </tr>\n   <tr class=\"d1\">\n     <td>Temperature[C]</td>\n     <td><b id=\"temp\">0</b></td>\n     <td></td>\n   </tr>\n   <tr class=\"d1\">\n     <td>Relative Humidity[%]</td>\n     <td><b id=\"hum\">0</b></td>\n     <td></td>\n   </tr>\n   <tr class=\"d1\">\n     <td>Luminance[lux]</td>\n     <td><b id=\"lum\">0</b></td>\n     <td></td>\n   </tr>\n   <tr class=\"d1\">\n     <td>Battery Level[%]</td>\n     <td><b id=\"bat_lvl\">0</b></td>\n     <td></td>\n   </tr>\n   <tr class=\"d1\">\n     <td>Motion</td>\n     <td><b id=\"sensor\">no</b></td>\n     <td></td>\n   </tr>\n  </table>\n </body>\n```", "```\nroot@beaglebone:~# ./zwmanager.py -d -l /dev/ttyACM0\nzwmanager.py[2732]: callbacks installed\nzwmanager.py[2732]: Starting...\nzwmanager.py[2732]: network is started: homeid e4056d54\nzwmanager.py[2732]: use openzwave library   = 1.3.482\nzwmanager.py[2732]: use python library      = 0.3.0b5\nzwmanager.py[2732]: use ZWave library       = Static Controller version Z-Wave 3.79\nzwmanager.py[2732]: network home id         = 0xe4056d54\nzwmanager.py[2732]: controller node id      = 1\nzwmanager.py[2732]: controller node version = 4\nzwmanager.py[2732]: network is now ready\nzwmanager.py[2732]: detecting the switch node...\nzwmanager.py[2732]:  - device Switch(9) is off\nzwmanager.py[2732]: Press CTRL+C to stop\nzwmanager.py[2732]: Started HTTP server on port 8080\n\n```", "```\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Battery Level data=100\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Battery Level data=100\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Luminance data=51\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Luminance data=51\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Relative Humidity data=48\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Relative Humidity data=48\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Temperature data=20\nzwmanager.py[4915]: dev=Multi Sensor(10) name=Temperature data=20\n\n```", "```\nzwmanager.py[4937]: file /house.html served\nzwmanager.py[4937]: file /house.css served\nzwmanager.py[4937]: file /jquery-1.9.1.js served\n\n```", "```\nzwmanager.py[5002]: managing /set...\nzwmanager.py[5002]: got label=switch\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Switch data=1\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Power data=0\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Power data=21\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Power data=30\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Power data=36\nzwmanager.py[5002]: dev=FGWPE Wall Plug(9) name=Power data=13\n\n```"]