- en: Chapter 5.  NSX Edge Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NSX Edge is a feature rich gateway Virtual Machines which offers L3-L7 services.
    Edge Gateway is the glue that connects all logical networks provide DHCP, NAT,
    Routing, VPN, Firewalling, Load Balancing and HA functionality. Ideally these
    devices will be configured at the perimeter level of vSphere Datacenter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Edge services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Edge service form factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing OSPF, BGP, and ISIS protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing between DLR and NSX Edge router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Edge service use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Edge services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NSX Edge gateway is a virtual machine that provides services such as Network
    Address Translation, Dynamic Host Configuration Protocol, DNS relay, Virtual Private
    Network, load balancing, and routing functionality. Firstly, there is no rule
    of thumb that says we should leverage all these features using one single Edge.
    For true multi-tenancy, we can deploy multiple Edges for different features' use
    cases. Let's have a look at Edge gateway form factor before we start with routing
    and other topics.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Edge form factor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There have been countless times when we would have deployed a virtual machine,
    assuming some specific value is enough for compute and storage. Later, when we
    start facing performance issues, we are forced to go back and recheck the application
    requirements. As far as the impact is concerned, it would be specific to one VM,
    so going back and forth and making changes is just about feasible. Well, this
    doesn''t work with NSX Edge, primarily because it would be a perimeter device
    and the impact would be much higher. For the same reason, selecting the right
    form factor is critical in order to get the best performance. The following screenshot
    depicts the default compute capacity, which each Edge form factor offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing Edge form factor](img/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The positive aspect to note is that we can always go back and change these form
    factors. For example, during initial deployment time, we have deployed NSX Edge
    in **large form factor**. Later, we can go ahead and change the form factor from
    **large to any higher version**. However, the negative side is that there will
    be an NSX Edge service outage during that time. Hence, the recommended deployment
    option would be selecting the right form factor Edge. For services such as, load
    balancers, wherein we have a lot of SSL termination and offload tasks, which would
    consume a lot of vCPU cycles, the preferred form factor would be Edge **X-Large**.
    With that said, we will start with one of the most exciting topics in the NSX
    world. Routing simplicity and feature-rich integration makes NSX an ideal platform
    for all vSphere architects.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing OSP, BGP, and ISIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, distributed routing capability in the VMware NSX provides an optimized
    and scalable way of handling East-West traffic in a data center. The NSX Edge
    services router provides the traditional centralized routing. What more could
    we need in an enterprise environment? Both these components, **Distributed Logical
    Router** (**DLR**) and Edge, give a cutting-edge solution in an enterprise's routing
    architecture. Before we start with how routing works between these solutions,
    let me give some quick background on routing protocols that are supported in an
    NSX environment, and together, we will explore an OSPF routing protocol configuration
    between DLR and NSX Edge. Sounds interesting? Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Open Shortest Path First
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From my experience, while teaching and doing labs, people often find it really
    difficult to understand the **Open Shortest Path First** (**OSPF**) protocol.
    So, let''s split this abbreviation into its component parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: Yes, this is an open standard protocol developed by a wide range
    of network vendors. This means that it is publicly available on any dynamic routing
    protocol-supported routers. Again, we are not limited to running OSPF on CISCO
    or Juniper, or any other vendor routers in an OSPF routing environment. This is
    certainly configurable in multivendor deployment scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shortest Path First**: **Shortest Path First** (**SPF**) uses a Dijkstra
    algorithm to find the single shortest path to reach a destination network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, in a nutshell, we have an open standard routing protocol that calculates
    the shortest path to reach a destination. For now, we will pause for some time
    and understand routing classes, and we will come back to the topic of OSPF. There
    are three classes of routing protocols, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distance vector**: A distance vector protocol finds the best path to a remote
    network by judging distance. RIP is a distance vector routing protocol. In RIP
    routing, to reach the destination network, the router will choose the path that
    has the least number of hops. The term vector means the direction to the destination
    network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link state**: Link state protocols are also called Shortest Path First protocols.
    In a link state protocol environment, routers create three separate tables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directly-attached neighbors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Topology of the entire network
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing table
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Behind the scenes, link state protocols send updates containing the state of
    their own links to all other directly connected routers on the network.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid**: A hybrid protocol is a mix of distance vector and link state protocols,
    and **Enhanced Interior Gateway Routing Protocol** (**EIGRP**) is a great example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding basic OSPF terminology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To understand the fundamentals of OSPF, let''s clarify some basic OSPF terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Link**: A link is a network, or OSPF router interface, assigned to any given
    network. Yes, it is important to understand if we have multiple interfaces in
    an up-and-running state; OSPF wont treat them as link. Only when an interface
    is added to the OSPF process is it considered to be a link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Router ID**: The **router ID** (**RID**) is an IP address used to identify
    the OSPF router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Neighbor**: Neighbors are two or more OSPF routers that have an interface
    on a common network:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Area ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stub area flag
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello and dead intervals
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All the preceding parameters should be matching to form a neighbor ship.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Adjacency**: Adjacency is a relationship between two OSPF routers that permits
    the direct exchange of route updates. This totally depends upon both the type
    of network and the configuration of the routers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designated Router**: A **Designated Router** (**DR**) is elected whenever
    OSPF routers are connected to the same broadcast network to minimize the number
    of adjacencies formed. Selection can be either manual or automated, based on priority
    value as the first pararmeter. All routers on the same network will establish
    adjacencies with the DR and the BDR, which ensures that all router''s topology
    tables are synchronized.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup Designated Router**: A **Backup Designated Router** (**BDR**) is a
    backup for the DR router.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hello protocol**: The OSPF Hello protocol provides dynamic neighbor discovery
    and maintains neighbor relationships. Hello packets are addressed to multicast
    address `224.0.0.5`. Hello packets and **Link State Advertisements** (**LSAs**)
    build the topological database.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Neighborship database**: A neighborship database is a list of all OSPF routers
    for which Hello packets are visible. Lets discuss about how OSPF database is getting
    updated.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating a topology database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are aware that the OSPF router teaches **directly attached neighbors**,
    **topology of the entire internetwork**, and finally, a **routing table**. Let''s
    discuss how a topology database is updated in an OSPF router:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Link state advertisement**: I would simply call it an OSPF language; the
    way OSPF routers communicate. LSA is an OSPF data packet containing link state
    and routing information that''s shared among OSPF routers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Areas**: An OSPF area is a grouping of contiguous networks and routers. All
    routers in the same area share a common area ID. The following figure depicts
    a simple OSPF topology:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Updating a topology database](img/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a total of eight important LSA types in OSPF:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LSA Type 1: Router LSA**: Each router within the area will flood a type 1
    router LSA within the area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSA Type 2: Network LSA**: The network LSA or type 2 is created for each
    multi-access network. Network LSAs are generated by the designated router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSA Type 3: Summary LSA**: **Area Border Router** (**ABR**) will create a
    LSA 3 summary and will pass the LSA information to other areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSA Type 4: Summary ASBR LSA**: Routers need to know where to find the ASBR.
    In such cases, ABR will generate a summary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSA Type 5: Autonomous system external LSA**: A type 5 LSA will be sent by
    a border router to let other routers know how to reach the border router through
    the internal network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSA Type 7: Not-so-stubby area LSA**: This doesn''t allow external LSAs (type
    5). All it will do is generate type 7 LSAs instead'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How about type 6 and type 8? Well, type 6 is no longer supported in OSPF v2
    and, type 8 LSA is a link-local only LSA for OSPF v3\. A type 8 LSA is used to
    give information about link-local addresses and a list of IPv6 addresses on the
    link. In this module, we have a practical use case discussion on OSPF in the NSX
    world by establishing a dynamic routing between NSX Edge and DLR.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's move on and discuss ISIS protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Intermediate System to Intermediate System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An Intermediate System routing protocol is a link state protocol similar to
    OSPF. It is also called an ISP scale protocol, primarily because of its ability
    to support more areas than OSPF. An intermediate system is a **router**, and **Intermediate
    System to Intermediate System** (**IS-IS**) is the routing protocol that routes
    packets between intermediate systems. IS-IS routers are of three types: Level
    1 (intra area), Level 2 (inter area), or Level 1-2 (both). Routing information
    is exchanged between Level 1 routers and other Level 1 routers of the same area,
    and Level 2 routers can only form relationships and exchange information with
    other Level 2 routers. Level 1-2 routers exchange information with both levels
    and are used to connect the inter area routers with the intra area routers, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring Intermediate System to Intermediate System](img/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After having a brief glimpse at the ISIS protocol, let us now understand the
    **Border Gateway Protocol** (**BGP**).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Border Gateway Protocol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First and foremost, this is an exterior gateway protocol. BGP is primarily
    used by **Internet Service Providers** (**ISP**) and large enterprise companies
    when they have connections with multiple ISPs. All it does is bind smaller, autonomous
    (internetworks) to ensure efficient routing is possible regardless of the location.
    BGP is basically a group of autonomous systems. This raises another question:
    what are autonomous systems? **Autonomous Systems** (**AS**) are groups of networks
    under a common administration. Just like private and public IP concepts, AS also
    have private and public numbers. Public AS numbers range from 1 to 64511, and
    private AS numbers range from 64512 to 65535\. When we do a routing within an
    AS it is called iBGP routing, and eGBP is routing between two different autonomous
    systems. The process for forming a BGP peering is very simple. A TCP session needs
    to established, with the BGP source port being an emphemeral port, and the destination
    being TCP port 179\. The following figure depicts a iBGP and eBGP topology:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring Border Gateway Protocol](img/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I have limited the explanation of BGP, ISIS, and OSPF, primarily because it
    would demand writing a different book to cover all aspects of routing protocol.
    Enough said-let's finish of our network topology by configuring OSPF routing.
    Before we start with routing between the Distributed Logical Router and the NSX
    Edge gateway, let's go back to the lab topology that we used in [Chapter 4](ch04.html
    "Chapter 4. NSX Virtual Networks and Logical Router"),  *NSX Virtual Network and
    Logical Router*, and understand where we are and what the next requirement is.
    From the following figure, it is clear that we have established a routing between
    web, app, and DB networks. It's time to ask a few questions. We need all these
    networks to communicate with another network (192.168.100.0/24) through a transit
    network. How do we do that? Can we connect the transit network to NSX Edge and
    leverage dynamic routing capability so that an app, web, and DB can communicate
    with external networks?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure depicts a three-tier application leveraging DLR functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring Border Gateway Protocol](img/image_05_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Deploying an NSX Edge gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An NSX Edge gateway is a perimeter device and for the same reason, all ingress
    and egress traffic from a network virtualized data center has to go through Edge
    devices and finally hit the upstream router. In our case three tier application
    is in need of communicating with an external network-192.168.100.0/24 which demands
    an Edge gateway to deployed. Let's deploy an NSX Edge gateway and connect with
    Distributed Logical Router. In a nutshell, all we are doing is connecting two
    routers together and creating a dynamic routing environment for them to exchange
    the networks, so that eventually, our three-tier application can communicate with
    network 192.168.100.0/24.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On the vSphere web client home tab, click **Inventories** | **Networking & Security**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand navigation pane, select **NSX Edges**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the middle pane, click the green plus sign to open the **New NSX Edge** dialog
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Name and description** page, leave **Edge Services Gateway** selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Perimeter Gateway` in the **Name** text box and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows NSX Edge:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Deploying an NSX Edge gateway](img/image_05_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: On the CLI credentials page, enter the password in the **Password** text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the password correctly because a verification box is not provided:![Deploying
    an NSX Edge gateway](img/image_05_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Configure deployment** page, verify that the **Datacenter** selection
    is our Edge Cluster that we created during the initial vSphere Cluster design
    phase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Appliance Size** selection is **Compact**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Enable auto rule generation** checkbox is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: NSX Edge adds firewall, NAT, and routing routes, to enable control traffic to
    flow for these services. If this option is disabled, we need to manually create
    firewall rules, which is tedious work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under **NSX Edge Appliances**, click the green plus sign, as highlighted in
    the following screenshot, to open the **Add NSX Edge Appliance** dialog box, and
    perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Management and Edge Cluster** from the **Cluster/Resource Pool** drop-down
    menu.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **shared datastore** from the **Datastore** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Next,** as shown in the following sreenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Deploying an NSX Edge gateway](img/image_05_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'On the **Configure interfaces** page, click the green plus sign to open the
    **Add NSX Edge Interface** dialog box and perform the following actions to configure
    the first of two interfaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Uplink-Interface` in the **Name** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Type**, leave **UpLink** selected.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Connected To** | **Select** link.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Distributed Portgroup**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Mgmt-Edge-VDS-HQ Uplink** button and click **OK**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the green plus sign under **Configure Subnets**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add Subnet** dialog box, click the green plus sign to add an IP address
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `192.168.100.3` in the **IP Address** text box and click **OK** to confirm
    the entry.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **24** in the **Subnet prefix length** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **Add Subnet** dialog box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other settings at default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the green plus sign to open the **Add NSX Edge Interface** dialog box,
    and perform the following actions to configure the second interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Transit-Interface` in the **Name** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Type**, click **Internal**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Connected To** | **Select** link.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Transit-Network** button and click **OK**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the NSX Edge Interface selection:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Deploying an NSX Edge gateway](img/image_05_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Default gateway settings** page, select the **Configure Default Gateway**
    check box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **vNIC** selection is **Uplink-Interface**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `192.168.100.2` in the **Gateway IP** text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This value is the IP address of a router that is available on the HQ uplink
    port group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all the other settings at the default value and click **Next**, as shown
    in the following screenshot:![Deploying an NSX Edge gateway](img/image_05_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Firewall and HA** page, select the **Configure Firewall default policy**
    check box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Default Traffic Policy**, click **Accept**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a very important step, as you can see that, by default, all traffic
    is blocked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Configure HA parameters**. High Availability (HA) ensures that an NSX Edge
    appliance is always available by installing an active pair of Edges on your virtualized
    infrastructure, which will be discussed further during Edge HA modules. Hence,
    for the time being, we are leaving the rest of the settings as they are. The following
    screenshot depicts Edge firewall and HA settings:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Deploying an NSX Edge gateway](img/image_05_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: On the **Ready to complete page**, review the configuration report and click
    **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, we have deployed **Distributed Logical Router** and, later, the **NSX Edge
    gateway**. Once again, the prime aim here is to have our web, app, and DB servers
    communicating with network 192.168.100.0/24, and we know for sure these networks
    are not a directly-connected network. Before moving forward with routing, let's
    have a quick look at the following figure to see our current topology.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure depicts a three-tier application connected to DLR, and
    a DLR to Edge connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying an NSX Edge gateway](img/image_05_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have completed the NSX Edge deployment, we will go ahead with configuring
    OSPF on NSX Edge.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring OSPF on NSX Edge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuring OSPF routing on NSX Edge (Perimeter Edge) allows logical networks
    to be learned by the logical router and distributed through a transit network.
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the routing categories list, select **Global Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Dynamic Routing Configuration** panel, click **Edit** to open **Edit
    Dynamic Routing**, as shown in the following screenshot:![Configuring OSPF on
    NSX Edge](img/image_05_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Dynamic Routing Configuration** dialog box, perform the following
    actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Uplink - **192.168.100.3**** from the **Router ID** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the **Enable OSPF** checkbox.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave all other fields at the default value and click **Save**, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At the top of the **Global Configuration** page, click **Publish Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the routing category panel, select **OSPF**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the area definitions list, verify that an area with the following properties
    appears in the list, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Area ID**: **0**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: **Normal**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: **None**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Area 0 is the default area in OSPF and all other areas will be connected to
    Area 0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Above the area definitions list, click the green plus sign to open the **New
    Area Definition** dialog box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **10** in the **Area ID** text box.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under **Area Interface Mapping**, at the bottom of the **OSPF** page, click
    the green plus sign to open the **New Area to Interface Mapping** dialog box,
    and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **vNIC** selection is **Uplink-Interface**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **0** from the **Area** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under **Area Interface Mapping**, at the bottom of the **OSPF** page, click
    the green plus sign to open the **New Area to Interface Mapping** dialog box,
    and perform the following actions, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Transit**-Interface from the drop-down menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **10** from the **Area** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave all other fields at the default value and click **OK**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At the top of the OSPF page, click **Publish Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We can configure the type of subnets that are advertised by Perimeter Gateway
    through OSPF.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Routing** category panel, select **Route Redistribution Status**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Route Redistribution table**, at the bottom of the page, click the
    green plus sign to open the N**ew Redistribution criteria** dialog box, and perform
    the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Allow learning from**, select the **Connected** checkbox.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnets connected to Perimeter Gateway can now be learned.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave all other settings at the default value and click **OK**, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_017.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the **Route Redistribution Status** panel, at the top of the page, determine
    if a green check mark appears next to OSPF. For now, it is not, as shown in the
    following screenshot:![Configuring OSPF on NSX Edge](img/image_05_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If a green check mark does not appear, perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side of the **Route Redistribution Status** panel, click **Change**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Change redistribution settings** dialog box, select the **OSPF** checkbox,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Route Redistribution Status** panel, at the top of the page, verify
    that a green check mark appears next to **OSPF**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_019.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At the top of the page, click **Publish Changes**:![Configuring OSPF on NSX
    Edge](img/image_05_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the preceding steps, we have successfully configured OSPF on Perimeter
    Edge. All we have done so far is select a **Router-ID** for Perimeter Gateway
    and enable OSPF. Later, we created Area-10 and performed an Area-to-interface
    mapping, and finished by enabling **Route Redistribution**. It''s time to recollect
    the firewall policy that we selected during NSX Edge deployment; we have allowed
    the traffic and also selected the **Enable auto rule generation** checkbox. In
    this example, we have configured OSPF on NSX Edge and we would expect OSPF auto
    rules to be configured in the firewall table. Let''s verify that by switching
    to the **Perimeter Gateway** | **Manage** | **Firewall** tab, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring OSPF on NSX Edge](img/image_05_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, there are three firewall rules auto-configured: two **Internal**
    rules and one **Default** rule. Now that we have an OSPF process running on the
    NSX Edge and firewall rules are auto-configured, let''s move forward and configure
    OSPF on Distributed Logical Router.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring OSPF routing on Distributed Logical Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let me re-emphasize the Distributed Logical Router use case. The whole purpose
    of DLR is to do an intelligent East-West routing, which allows virtual machine
    to virtual machine communication without going through traditional data center
    hop-by-hop routing. Let''s go ahead and configure OSPF on DLR:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Routing** category panel, select **Global Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side of the **Dynamic Routing Configuration** panel, click
    **Edit.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Edit Dynamic Routing Configuration** dialog box, select Interface as
    **Transit and 192.168.10.2** from the **Router ID** drop-down menu, as shown in
    the following screenshot:![Configuring OSPF routing on Distributed Logical Router](img/image_05_022.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This setting must be specified before OSPF can be configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the **Global Configuration** page, click **Publish Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Routing** category panel, select **OSPF**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the right-hand side of the **OSPF Configuration** panel, click **Edit**
    to open the **OSPF Configuration** dialog box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Enable OSPF** checkbox.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `192.168.10.3` in the **Protocol Address** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `192.168.10.2` in the **Forwarding Address** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Protocol Address**: Establishing routing protocol sessions with other routers.
    In our example, this address would be used for establishing a routing protocol
    session with the NSX Edge Perimeter Gateway. **Forwarding Address**: IP address
    that is to be used by the router data path module in the hosts to forward data
    path packets.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **OK**:![Configuring OSPF routing on Distributed Logical Router](img/image_05_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Area Definitions** panel, click the green plus sign to open the **New
    Area Definition** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **10** in the **Area ID** text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Area to Interface Mapping** panel, click the green plus sign to open
    the **New Area to Interface Mapping** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Interface** selection is **Transit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **10** from the **Area** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the **OSPF configuration** page, click **Publish Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the changes have been published, verify that the **OSPF Configuration
    Status** is **Enabled**, as shown in the following screenshot:![Configuring OSPF
    routing on Distributed Logical Router](img/image_05_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can configure the type of subnets that are advertised by the distributed
    router, through OSPF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Routing** category panel, select **Route Redistribution**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Route Redistribution table**, select the single entry that appears,
    click the pencil icon to open the **Edit Redistribution criteria** dialog box,
    and verify the following settings:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prefix Name**: Any'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learner Protocol**: **OSPF**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow Learning From**: **Connected**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: **Permit**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Cancel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the default route redistribution entry does not appear in the list or is
    not configured as specified, create a new route redistribution by clicking the
    green plus sign and configuring the criteria as specified in Step 13\. The following
    screenshot shows an OSPF route redistribution table:![Configuring OSPF routing
    on Distributed Logical Router](img/image_05_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s verify the distributed router firewall policy to confirm if we have
    required rules for OSPF learning. We certainly have OSPF auto rule populated;
    however, the only difference is that the default rule is **Deny,** as shown in
    the following screenshot**.** We will certainly check if that rule is blocking
    any traffic in our example. For now, we are not changing that rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Even though the NSX GUI is nice and cool, there is no way we can view the routing
    table; we are limited to running CLI commands to check, and we have two methods
    to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct console to NSX Edge and logical router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH session to NSX Edge and logical router.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s SSH to NSX Edge. We are connecting to NSX edge with the IP address `192.168.100.3`.
    There are a few interesting things to note from this output, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The name is mentioned as **vShield Edge**. Let''s not get embarrassed with
    that output. As explained in [Chapter 1](ch01.html "Chapter 1. Introduction to
    Network Virtualization"),  *Introduction to Network Virtualization*, NSX is a
    product that is created from VMware **vCloud Networking Security** (**vCNS**).
    Irrespective we are doing a greenfield deployment of NSX, or a brownfield deployment
    where older VCNS was upgraded to NSX, edges would still show as vShield Edge.
    However, the version would certainly be different based on the VCNS/NSX management
    version. Let''s list a few display commands and make a note of a few configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Show IP OSPF interface`: This command would display the interfaces where the
    OSPF process is running. For example, if a router has 10 interfaces and out of
    that only two interfaces are connected to OSPF AREA, only those interfaces would
    be listed:![Configuring OSPF routing on Distributed Logical Router](img/image_05_028.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have two interfaces in our OSPF configuration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 192.168.10.1 (Transit Interface)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 192.168.100.3 (Uplink)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Show IP OSPF neighbor`: This command shows the IP address of our OSPF neighbor,
    as shown in the following screenshot of the output:![Configuring OSPF routing
    on Distributed Logical Router](img/image_05_029.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The neighbor ID is `192.168.10.2`. The transit interface (`192.168.10.1`) of
    NSX Edge is connected to a neighbor DLR, whose IP address is `192.168.10.2`, and
    their OSPF state is `Full` (in this state, both NSX Edge and DLR are fully adjacent
    with each other). When OSPF adjacency is formed, a router goes through several
    state changes before it becomes fully adjacent with its neighbor. The states are
    `Down`, `Attempt`, `Init`, `2-Way`, `Exstart`, `Exchange`, `Loading`, and `Full`.
    It took me lot of practice sessions to understand the basics of OSPF. I have done
    numerous sessions using GNS3, and did a lot of Wireshark capture, which gives
    a precise picture of how communication is happening and in-depth information on
    LSA packets. To those of you who are finding it difficult to follow my steps,
    my request would be to make a note of all these steps and keep drawing the topology.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Show IP route`: Show IP route will display the full routing table for that
    router:![Configuring OSPF routing on Distributed Logical Router](img/image_05_030.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we see that:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A total of eight routes are populated and out of that, we have three OSPF routes
    for networks 172.16.10.0, 172.16.20.0, and 172.16.30.0/24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Have a look at the yellow highlighted column to know through which IP address
    NSX Edge perimeter gateway is learning it- 192.168.10.2(DLR Transit Interface)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Show IP OSPF database`: This command shows the IPv4 OSPF database. The worst
    way to troubleshoot an OSPF would be by not looking at the database. The fundamental
    problem I have seen is that we find the output very lengthy and we are unsure
    where to start and what to look at. Have a look at the following OSPF database
    output, which we have captured from NSX Edge. Even in a simple network, the topology
    table looks very lengthy and confusing, just assume an enterprise network OSPF
    database? The following screenshot depicts an OSPF database:![Configuring OSPF
    routing on Distributed Logical Router](img/image_05_031.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For now, we will make a note of a few configuration details:'
  prefs: []
  type: TYPE_NORMAL
- en: OSPF is a link state routing protocol. Based on the types of Network and Area,
    it will have a unique Link State table. Hence, we are seeing the same in the output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our example, we have two Areas:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link ID - This is the OSPF router ID for L1 and type L2\. However, for L3, an
    L5 type LSA, link ID is a network address.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Types of link state for Area-10:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Router link state
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network link state
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary link state
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Opaque area link state
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Area 0 (backbone area)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Area 10 (normal area we created)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s another brain twisting question: Why do we have Network Link State
    LSA for Area 10? All we have done is connect a DLR OSPF router to NSX Edge through
    a transit network, which is a point-to-point connection. Well, this is where I
    need more focus from everyone. Transit-Network is a logical switch, which is nothing
    but a vSphere PortGroup (L2 segment). This is the prime reason we have a network
    LSA in Area 10\. Routers are not connected as point-to-point; rather, they are
    connected to one logical switch and **Designated Router** (**DR**) will send the
    type 2 LSA. In summary LSA will help the router reach the prefix from one area
    to another area. Opaque LSA is used in practical applications on a routing platform
    (MPLS traffic engineering).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enough talk-the whole purpose of explaining this picture is that ideally, when
    the OSPF routing tables are populated, we end up by doing a simple ping test and
    we never think about how they actually work. There is lot more we can discuss
    about OSPF; however, it is really out of the scope of this book. Let''s take a
    look at the following diagram, which showcases the entire topology with the OSPF
    routing table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With dynamic routing capability between DLR and NSX Edge, our three-tier applications
    should be able to reach the `192.168.110.10` machine and vice versa. Let's log
    in to the application server and confirm if we can reach `192.168.110.10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows successful connectivity from the application
    server (172.16.20.11) to external network 192.168.110.0/24, which was not possible
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'That concludes our routing module. I know it is hard to recollect all we did
    so far to establish a virtualized routing environment. I would summarize it in
    six steps to make it easy to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: Created three logical switches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployed a distributed logical router from the NSX Manager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NSX Controller pushed the DLR configuration to underlying ESXi host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployed an NSX Edge device and configuring OSPF on Edge and DLR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All learned routes get pushed to NSX Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NSX Controller updates the ESXi host DLR routing table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now move on to the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: NSX routing design decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assume that we have already decided what routing protocol is required for a
    particular use case. Design factors are key in ensuring that they work flawlessly:'
  prefs: []
  type: TYPE_NORMAL
- en: If we are a service provider, and multi tenancy is required for DLR control
    VM and **Edge Services Gateway** (**ESG**), we should deploy a separate instance,
    which would ease the management. We can also achieve true isolation between the
    tenants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Area Border Router** (**ABR**) should be a physical router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we are not leveraging the **High Availability** (**HA**) feature for ESG
    and DLR, ensure that tenant ESG and DLR VM are not residing on the same ESXi host.
    However, recommended practice would be to leverage HA for DLR control VM and ESG
    with vSphere HA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a shortage of interfaces in ESG, we should leverage the trunk interface
    so that multiple DLR can be connected to the same ESG.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DLR to DLR peering is not possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPsec** with dynamic routing is not supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use route summarization wherever we can.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DLR control VM doesn't support ABR configuration; however, it supports normal
    and NSSA areas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the type of physical network and vendors that we choose, there are
    a lot of other design parameters, which we need to follow explicitly to ensure
    we are getting the best of both worlds. I would highly recommend reading vendor
    design guides before implementing NSX. I don't expect everyone to do a Google
    search. In the [Chapter 8](ch08.html "Chapter 8.  NSX Troubleshooting"), *NSX
    Troubleshooting*, I will provide all external guide links, to which we should
    refer before deploying an NSX setup.
  prefs: []
  type: TYPE_NORMAL
- en: NSX Edge NAT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How do we merge two intranets with duplicate addresses and ensure that the
    host assigned with a private IP can communicate with other hosts through the Internet?
    There is only one solution for it: **Network Address Translation** (**NAT**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'NSX Edge NAT supports two types of NAT services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source NAT (SNAT)**: Translates the internal private IP address to a public
    address for outbound access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination NAT (DNAT)**: Translates the public IP address to an internal
    private address for inbound access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Okay, let''s have a look at how this whole feature works. In the following
    figure, one of our application servers is in need of communicating with the public
    network. We can see the application server **172.16.20.1** sending an outbound
    packet to NSX Edge. Based on the NAT entries, which the NSX administrator would
    have configured earlier, Edge will perform a NAT table lookup. Since we have a
    **Source NAT**, which is configured for **172.16.20.1**, it will translate the
    IP to **170.168.2.1**, which is the public IP. This is a very simple example of
    1:1 NAT configuration for outbound access. But remember, Edge also has a firewall
    feature, and by default, it will block all traffic. So, doing a NAT alone won''t
    do the trick; we need to allow respective source and destination IP in the firewall
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX Edge NAT](img/image_05_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go ahead and check how a NAT table configuration looks in NSX Edge:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into VMware vSphere web client and switch to the **Networking & Security**
    solution page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **NSX Edge management** page, double-click the NSX Edge instance that
    handles the NAT. The following screenshot shows the NSX Edge NAT configuration:![NSX
    Edge NAT](img/image_05_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we don''t have any rule created, as of now, nothing is populated there.
    Let''s explore DNAT and SNAT options further:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the add icon, select **Add DNAT Rule**, and configure the following settings
    based on the business use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Applied On**: The interface on which to apply the destination NAT rule, for
    example, external link. The drop-down menu will display the names of all 10 interfaces
    of this NSX Edge instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orginal IP**: The original (public) IP address in one of the following formats:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address 172.168.2.1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address range172.168.2.1-172.168.2.3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address/Subnet 172.168.2.1/24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol**: The protocols that are used by the application (we could simply
    update as **Any)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Original Port/Range**: The original port, a range of ports, or ****Any****
     port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translated IP/Range**: Since this is a DNAT rule, the translated IP would
    be the internal/private IP range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translated Port/Range**: The translated port or range of ports in the internal/private
    network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If all the preceding parameters are configured properly, with firewall rules
    enabled for the same configuration, our internal machines would be accessible
    from the public network.In our example we have a done a 1:1 DNAT configuration.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX Edge NAT](img/39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The NAT is an integral part of NSX load balancer functionality, and we need
    that basic understanding of how NAT works to understand the feature. Last but
    not least, we are living in a world where nothing is perfect; when something goes
    wrong, we need to start troubleshooting it. One of the common problems I have
    seen is not an issue of wrong NAT configuration, it is the intermediate culprit,
    firewall, which blocks all the traffic, and one would simply wonder, *What the
    heck am I missing in this setup?* Okay, enough talk. Let's move on and discuss
    NSX Edge logical load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: NSX Edge logical load balancer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about load balancers, traditional load balancers are typically
    placed in the aggregation layer. Load balancing can be implemented with hardware,
    software, or a combination of both. One of the first methods of load balancing
    was round-robin DNS. In the current cloud era, we have applications running in
    multitenant environments and the number of load balancer requirements also gets
    increased. In a nutshell, if every application tier needs a load balancer, it
    is extremely difficult to get an optimal performance. This is where virtual load
    balancers are really making a difference, compared with physical load balancers.
  prefs: []
  type: TYPE_NORMAL
- en: The NSX Edge load balancer enables network traffic to follow multiple paths
    to a specific destination. A load balancer distributes incoming service requests
    evenly among multiple servers (virtual machines). Load balancing thus helps to
    achieve optimal resource use, maximizing throughput, minimizing response time,
    and avoiding overload. NSX Edge provides load balancing up to Layer 7\. Let's
    get familiarized with some load balancer terms and terminology that is very common
    in all load balancers.
  prefs: []
  type: TYPE_NORMAL
- en: Server pools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Groups of machines that are running similar applications get added to this pool.
    This is one of the key design decisions to plan while deploying a load balancer.
    Firstly, identify the set of virtual machines that are required to be in the server
    pool.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the address from which server pool machines will receive sessions from
    the load balancer. Each virtual server will have a unique **Virtual IP** (**vIP**).
    The vIP is an IP address and also contains the service port number.
  prefs: []
  type: TYPE_NORMAL
- en: Application profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application profile is where we would configure what type of access protocol
    (TCP, HTTP, and HTTPS) is used and what type of load balancing algorithm we should
    use. NSX load balancer supports a wide range of load balancing algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'NSX load balancer operates in two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Proxy mode**: The one-arm load balancer mode is also called proxy mode. The
    NSX Edge gateway uses one interface to advertise the vIP address and to connect
    to the web servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline mode**: Inline load balancer mode is also called transparent mode.
    The NSX Edge gateway uses the following interfaces:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to advertise the vIP address
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to connect to the web servers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web servers must point to the NSX Edge gateway as the default gateway
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Design considerations while load balancing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several best practices should be followed when setting up an NSX load balancer.
    Let''s read the following points carefully before doing a lab exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on the number of server pools, load balancer numbers will also get increased.
    However, that way, since each tenant has its own load balancer, management and
    configuration changes will have no impact on other tenants' load balancers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy load balancers in HA mode for High Availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you don't deploy a load balancer on the same machine where the underlying
    load-balanced machines are running. Follow the best practice of deploying on a
    different ESXi host or in a separate management edge cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the right load balancing protocol based on application characteristics.
    For example, round robin, least connected, hashing, and least loaded are some
    of the common algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One common question is, *do we need an end-to-end SSL connection, or do we need
    to terminate or offload SSL traffic?*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch out for bandwidth and number of **connections per second** (**CPS**) that
    the load balancer is capable of.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule of thumb is to test the load balancer functionality before hitting production,
    especially if this is the first time we are load balancing an application request
    in an NSX world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we need to decide whether we are perfectly okay with having too many
    eggs in one basket. How does that relate to an NSX load balancer? Well, remember
    that nothing is stopping us configuring routing/NAT/VPN/DHCP and other Edge/DLR
    services features on the same Edge/DLR. So, carefully plan what type of services
    are required to run on Edge/DLR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's time to recollect all that we have discussed so far in relation to NSX
    load balancers, and now we have an objective to perform an SSL load balancing
    against our web servers. However, in this lab, I'm not leveraging SSL certificates
    for web servers; hence, we will stick with client to load balancer SSL configuration.
    So let's get started. First and foremost, we don't have any SSL certificate generated
    so far. In this example, we will use a self-signed certificate and will leverage
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will generate a certificate request and instruct the VMware NSX Edge instance
    to create a self-signed certificate from that request:'
  prefs: []
  type: TYPE_NORMAL
- en: In the left-hand navigation pane, select **NSX Edges**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the edge list, double-click the **Perimeter Gateway** entry to manage that
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Manage** tab and click **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the settings category panel, select **Certificates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Generate CSR** from the **Actions** drop-down menu to open the **Generate
    CSR** dialog box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Webload** in the **Common Name** text box.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter **Loadbalancer** in the **Organization Name** text box.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that **RSA** is the selected **Message Algorithm**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that **2048** is the selected **Key Size**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the certificate list, select the newly generated signing request and select
    **Self Sign Certificate** from the **Actions** drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted, enter **365** in the **Number of days** text box, and click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the **Generate CSR** screen where we need
    to update all the steps that we have discussed so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a certificate](img/image_05_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a certificate created, we will go ahead and self sign the
    certificate and use it in our load balancer configuration. The following screenshot
    depicts the self signed certificate step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a certificate](img/image_05_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a load balancer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will perform the following steps in the same order to set up and test a load
    balancer.
  prefs: []
  type: TYPE_NORMAL
- en: Set global option for the load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an application profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a service monitor to define health check performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a server pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting global options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure for setting global options for the load balancer is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Manage** and then click the **Load Balancer** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the check boxes next to the options you want to enable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable Load balancer**: Allows the NSX Edge load balancer to distribute traffic
    to internal servers for load balancing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Service Insertion**: Allows the load balancer to work with third-party
    vendor appliances.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acceleration Enabled**: When enabled, the NSX Edge load balancer uses the
    faster L4 LB engine rather than the L7 LB engine.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: The NSX Edge load balancer collects traffic logs. You can also
    choose the log level.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an application profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we have enabled the load balancer service, in this step, we will configure
    for HTTPS traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Manage** tab, click **Load Balancer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Global Configuration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit**, on the right-hand side of the global configuration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Edit load balancer global configuration** page, select the **Enable
    Load Balancer** checkbox and click **OK**. Select the certificate that we created
    earlier and leave all other fields at the default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Insert X-Forwarded-For HTTP header** helps you identify the IP address
    of a client when you use an HTTP load balancer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Application Profiles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Profile**
    dialog box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Web-Server** in the **Name** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **HTTPS**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Application Profile Configuration** for
    the load balancer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an application profile](img/image_05_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a service monitor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a service monitor to define health check parameters for a particular
    type of network traffic. When you associate a service monitor with a pool, the
    pool members are monitored according to the service monitor parameters. The following
    screenshot shows the default service monitoring pools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service monitor](img/image_05_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a server pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we will create a round-robin server pool that contains the two
    web server virtual machines as members:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Pool** dialog
    box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Pools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter ****Web-Pool**** in the **Name** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Algorithm** selection is ****ROUND-ROBIN**** .
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the monitoring selection, we can either select ****NONE**** , one of the
    default monitoring pools, or something that we manually created.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Below **Members**, click the green plus sign to open the **New Member** dialog
    box, and add the first server.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Member** dialog box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Members**, click the green plus sign to open the **New Member** dialog
    box, and add a second server.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Member** dialog box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Pool** dialog box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Name field enter **Web -01a**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the IP Address field enter **172.16.10.11**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Port** field enter **443** in the text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the same steps and add our second web server, `172.16.20.11`. The following
    screenshot shows the pool settings that we configured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating a server pool](img/image_05_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a virtual server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The virtual server is positioned on the external network attached to the uplink
    interface of the perimeter:'
  prefs: []
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Virtual Servers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Virtual Server**
    dialog box, and perform the following actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Enabled** check box is selected.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **VIP** in the **Name** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **192.168.100.9** in the **IP Address** text box.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **HTTPS** from the **Protocol** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Port** setting has changed to 443.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Web-Pool** from the **Default Pool** drop-down menu.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Application Profile** selection is **Web-Server**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value and click **OK**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the virtual server configuration for the web-pool
    that we are trying to load balance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are not leveraging an **application** rule in the load balancing setup. With
    application rules, we have the flexibility to specify HTTP/HTTPS redirection;
    regardless of the URL, the traffic will always redirect based on the rules. All
    we need to do now for testing is just go ahead and enter the VIP `192.168.100.9`
    in the browser, and we should see the traffic getting redirected to one of the
    web servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the load balancing done against web-sv-02a:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_043.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I personally hate learning things from looking at a GUI. CLI is my best friend,
    and I have captured a debug output of our load balancing scenario with the lab
    topology to ensure that the concepts are crystal clear for everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_044.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the topic of load balancing, and we all know that we certainly
    need a working NSX Edge instance to load balance any traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NSX Edge supports several types of VPN service, such as SSL-VPN, L2-VPN, and
    IPsec VPN. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SSL VPN-plus**: The prime reason someone would go for an SSL VPN connection
    would be for users (roaming profiles) who need to access private networks that
    are behind a perimeter device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPsec VPN**: NSX supports site to site VPN between the NSX Edge gateway and
    most of the third-party IPsec VPN devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L2 VPN**: In the current cloud era, we have a lot of use cases where an on-premises
    network needs an extension all the way to another site, which can be a private
    cloud or any other public cloud service, such as vCloud Air, AWS, and Azure. Please
    don''t confuse this with a direct connect solution. Virtual machines in L2 VPN
    will be on the same subnet, irrespective of being moved between the sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss these topics a bit more in depth to learn about their features
    and where NSX would fit, and finally, we will focus on a few design decisions.
  prefs: []
  type: TYPE_NORMAL
- en: SSL VPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The NSX SSL VPN feature provides remote users a secure connection to a private
    network, which is residing behind an NSX Edge gateway. We can either have a web-based
    connection, or we need to install an SSL client and access the private network.
    Behind the scenes, traffic will be tunneled and securely directed to private networks.
    The following steps would be done in the same order to configure an SSL VPN connection:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure SSL VPN server settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an IP pool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a private network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an installation package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify all the configurations and enable SSL VPN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure depicts three sites (A, B, C), which are in need of connecting
    to other sites through SSL-VPN, IPSEC, and L2 VPN setups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SSL VPN](img/52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will start with SITE-A's SSL VPN configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configure SSL VPN server settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned previously, we need to follow Steps 1 to 7 to configure SSL-VPN
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **SSL VPN-Plus** tab, select **Server Settings** from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Change**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **IPv4 Address** or **IPv6 Address**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the port number if required. This port number is required to configure
    the installation package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the encryption method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Server certificate** table, select the server certificate that you
    want to add. This is an optional step; adding to that, let's not get embarrassed
    that we are seeing a web-load SSL certificate. This is the same certificate that
    we created earlier during the SSL-load balancer topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the SSL VPN server settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configure SSL VPN server settings](img/image_05_046.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding ID pool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The whole purpose of adding this pool is to assign a **Virtual IP** (**VIP**)
    from the pool of IP addresses to the remote user. The following screenshot depicts
    an IP pool page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ID pool](img/image_05_047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In our example, we are taking the range as `192.168.170.2` to `192.168.170.254`
    and the gateway as `192.168.170.1`. DNS/WINS settings are optional; hence, we
    are skipping that configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Private network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The private network is the network that we want our remote users to connect
    to and access. The following screenshot depicts the private network configuration.
    We are taking 192.168.1.0/24 as our network for SSL VPN access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Private network](img/image_05_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please take a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add authentication**: External authentication servers like AD, LDAP, Radius,
    or RSA are supported, or we can simply create a local user and use the same local
    user name and password to connect to the private network.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add an installation package**: We can create an installation package of the
    SSL-VPN client for remote users based on the type of operating system from which
    we need to access the private network. There are several logon settings we can
    select during the package selection.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add a user**: Since we have already added the authentication method, we can
    go ahead and add those users for accessing the private network.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable SSL VPN service**: After verifying the entire configuration, we need
    to enable the SSL VPN service by switching to the **SSL VPN-Plus** tab. Select
    **Dashboard** from the left-hand panel. The following screenshot shows a **Service
    enabled successfully** message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Private network](img/image_05_049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have successfully enabled an SSL-service, remote user (192.168.7.1)
    can initiate an SSL-VPN connection to the private network (192.168.1.0/24) after
    authentication, based on the type of authentication we selected earlier. There
    are several ways in which we can check the SSL session. The best and easiest way
    would be from the client machine itself (192.168.7.1), by doing a **route lookup** on
    the local operating system; we would see a new route added all the way to the
    private network. With that, we are moving on to IPsec VPN for **Site-B**.
  prefs: []
  type: TYPE_NORMAL
- en: IPsec VPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NSX Edge Gateway supports Site-Site VPN between NSX Edge and remote sites.
    In a nutshell, the original packet will be authenticated and encrypted, and it
    will be encapsulated with an **Encapsulation Security Payload** (**ESP**) header,
    trailer, and authentication data. The following screenshot depicts initial IPsec
    VPN configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPsec VPN](img/image_05_050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we already have a topology shared earlier, the requirement is to establish
    an IPsec tunnel between Site-B and the remote site (192.168.5.0/24). Let's get
    started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the procedure for configuring IPsec:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Monitor** tab and then click the **VPN** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **IPSec VPN**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the add icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a name for the IPsec VPN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the NSX Edge instance in **Local Id**. This will be the
    **Peer Id** on the remote site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the local endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are adding an IP-to-IP tunnel using a pre-shared key, the local ID and
    local endpoint IP can be the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the subnets to share between the sites in CIDR format. Use a comma separator
    to type multiple subnets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the **Peer Id** to uniquely identify the peer site. For peers using certificate
    authentication, this ID must be the common name in the peer's certificate. For
    PSK peers, this ID can be any string. VMware recommends that you use the public
    IP address of the VPN or a FQDN for the VPN service as the peer ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the peer site in **Peer Endpoint**. If you leave this
    blank, NSX Edge waits for the peer device to request a connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the internal IP address of the peer subnet in CIDR format. Use a comma
    separator to type multiple subnets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Encryption Algorithm**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pre-Shared Key (PSK)**: This indicates that the secret key shared between
    NSX Edge and the peer site is to be used for authentication. The secret key can
    be a string with a maximum length of 128 bytes. NSX IPsec VPN supports symmetric
    keys. **Certificate**: This indicates that the certificate defined at the global
    level is to be used for authentication.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type in the shared key if anonymous sites are to connect to the VPN service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Display Shared Key** to display the key on the peer site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Diffie-Hellman (DH) Group**, select the cryptography scheme that will allow
    the peer site and the NSX Edge to establish a shared secret over an insecure communications
    channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the default MTU if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select whether to enable or disable the **Perfect Forward Secrecy** (**PFS**)
    threshold. In IPsec negotiations, PFS ensures that each new cryptographic key
    is unrelated to any previous key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable VPN.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As per our topology, we have updated our IPsec configuration in the Edge. Once
    we configure the partner device, the IPsec tunnel will get established:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![IPsec VPN](img/image_05_051.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The IKE phase 1 parameters used by the NSX Edge include:'
  prefs: []
  type: TYPE_NORMAL
- en: Main mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AES / AES 256 preferred / TripleDES /
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MODP (DH) group 2 (MODP1024 bits)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-shared secret [Configurable]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA lifetime of 28800 seconds (eight hours) with no kilobytes rekeying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISAKMP aggressive mode disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The IKE phase 2 parameters supported by NSX Edge include:'
  prefs: []
  type: TYPE_NORMAL
- en: AES / AES 256 Preferred / TripleDES / [Will match the Phase 1 setting]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESP tunnel mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MODP (DH) group 2 (MODP1024 bits)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perfect forwarding secrecy for rekeying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA lifetime of 3600 seconds (one hour) with no kilobytes rekeying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectors for all IP protocols and all ports between the two networks using
    IPv4 subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L2 VPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: L2 VPN allows us to configure a tunnel between two sites. As I said earlier,
    virtual machines will be on the same subnet irrespective of where they are moving.
    As per our topology, we need to establish a L2-VPN between Site-C and remote site
    192.168.5.0/24\. In our example, we are taking Site-C as the L2 VPN server, and
    the remote site is the L2 VPN client. The L2 VPN server is the source NSX Edge
    server to which destination L2 VPN Client is getting connected.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The internal IP address assigned to the L2 VPN server and client must be different.
    They can be on the same subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the procedure for L2 VPN server:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Manage** tab and then click the **VPN** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **L2 VPN**, select **Server**, and click **Change**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **Server Details**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Listener IP**, type the primary or secondary IP address of an external
    interface of the NSX Edge. In our example, the IP would be `192.168.9.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default port for the L2 VPN service is **443**. Edit this if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the encryption method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the internal interface of the NSX Edge that is being stretched .This
    interface must be connected to a DV port group or logical switch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **User Details** and type the username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In server certificates, do one of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use System Generated Certificate** to use a self signed certificate
    for authentication.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the signed certificate to be used for authentication.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **OK**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Prerequisites](img/B03244_05_52-1024x492.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Listener IP**: **192.168.9.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Listener Port**: **443**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Encryption Algorithm**: **AES256-SHA**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal Interface**: **Internal Interface-A**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Id**: **vpn-user**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server Certificate**: **TEST.LOCAL**'
  prefs: []
  type: TYPE_NORMAL
- en: To configure the L2-VPN client, all we need to update is the server address
    to which the client is supposed to be connected, and the internal interface that
    needs to be stretched. Apart from these details, the rest of the configuration
    is the same, and the L2 tunnel will be up and running after that
  prefs: []
  type: TYPE_NORMAL
- en: '**L2VPN Service Status**: **Enabled**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Address**: **192.168.9.1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Port**: **443**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Interface**: **Internal Interface-B**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Id**: **vpn-user**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design decisions while configuring VPN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a few key points we should be aware of while configuring
    the VPN:'
  prefs: []
  type: TYPE_NORMAL
- en: Route-based VPN is not supported, NSX Edge supports only policy-based VPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can have a maximum of 64 tunnels across a maximum of 10 sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NAT-traversal is supported in VPN configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overlapping of subnets is not allowed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route summarization is supported for both peer and local subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic routing through IPsec tunnels is not supported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Edge supports pre-shared key and certificate-based authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few exceptions with special characters in a pre-shared key that
    I have seen with a few third-party vendors. Hence, watch out for special characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes VPN key design decisions, and it is always advisable not to deviate
    and start configuring VPN from what the product doesn't support.
  prefs: []
  type: TYPE_NORMAL
- en: DHCP relay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dynamic Host Configuration Protocol automatically assigns an IP address. This
    is something we all know. But there is certainly a drawback with that model: the
    DHCP server and client should be on the same broadcast domain. In a nutshell,
    the DHCP relay agent relays DHCP messages between client and server on different
    networks. This is a new feature, which was added in **NSX 6.1** and can be applied
    on **DLR or NSX Edge**. In earlier versions of NSX and VCNS, we were limited to
    configuring traditional DHCP servers. It is important to know that we cannot have
    overlapping subnets. But what if we need the same IP every time a virtual machine
    boots? NSX DHCP static binding would do the trick in that case. We can simply
    bind the IP with the MAC of a virtual machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter with an introduction to NSX Edge, and later, we covered
    routing protocols and NSX Edge services, use cases, and a few design considerations.
    This was certainly a lengthy topic, and the whole purpose of explaining the topics
    with a few labs and topologies was to make it as informative as possible. I strongly
    believe that in the near future, we will see lot of new features getting added
    to NSX Edge services. For example, NSX Edge being a Perimeter Device, we would
    be more than happy to see WAN acceleration features or Policy Based Routing.
  prefs: []
  type: TYPE_NORMAL
- en: With the skills that we have gained so far, we are good to start with our next
    chapter, on NSX security features and design decisions. We will have a close look
    at NSX security policies, groups, and a few use cases.
  prefs: []
  type: TYPE_NORMAL
