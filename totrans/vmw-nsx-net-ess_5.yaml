- en: Chapter 5.  NSX Edge Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：NSX Edge服务
- en: NSX Edge is a feature rich gateway Virtual Machines which offers L3-L7 services.
    Edge Gateway is the glue that connects all logical networks provide DHCP, NAT,
    Routing, VPN, Firewalling, Load Balancing and HA functionality. Ideally these
    devices will be configured at the perimeter level of vSphere Datacenter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: NSX Edge是一款功能丰富的网关虚拟机，提供L3到L7的服务。Edge网关是连接所有逻辑网络的粘合剂，提供DHCP、NAT、路由、VPN、防火墙、负载均衡和高可用性功能。理想情况下，这些设备会在vSphere数据中心的边缘层进行配置。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Introducing Edge services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Edge服务
- en: Introducing Edge service form factors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Edge服务外形规格
- en: Introducing OSPF, BGP, and ISIS protocols
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍OSPF、BGP和ISIS协议
- en: Routing between DLR and NSX Edge router
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DLR与NSX Edge路由器之间的路由
- en: NSX Edge service use cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSX Edge服务使用案例
- en: Introducing Edge services
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Edge服务
- en: NSX Edge gateway is a virtual machine that provides services such as Network
    Address Translation, Dynamic Host Configuration Protocol, DNS relay, Virtual Private
    Network, load balancing, and routing functionality. Firstly, there is no rule
    of thumb that says we should leverage all these features using one single Edge.
    For true multi-tenancy, we can deploy multiple Edges for different features' use
    cases. Let's have a look at Edge gateway form factor before we start with routing
    and other topics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: NSX Edge网关是一种虚拟机，提供如网络地址转换、动态主机配置协议、DNS转发、虚拟专用网络、负载均衡和路由功能等服务。首先，并没有一条固定的规则说我们必须通过一个Edge来利用所有这些功能。为了实现真正的多租户，我们可以部署多个Edge来满足不同功能的需求。在我们开始路由和其他话题之前，让我们先来看看Edge网关的外形规格。
- en: Introducing Edge form factor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Edge外形规格
- en: 'There have been countless times when we would have deployed a virtual machine,
    assuming some specific value is enough for compute and storage. Later, when we
    start facing performance issues, we are forced to go back and recheck the application
    requirements. As far as the impact is concerned, it would be specific to one VM,
    so going back and forth and making changes is just about feasible. Well, this
    doesn''t work with NSX Edge, primarily because it would be a perimeter device
    and the impact would be much higher. For the same reason, selecting the right
    form factor is critical in order to get the best performance. The following screenshot
    depicts the default compute capacity, which each Edge form factor offers:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们曾无数次地部署虚拟机，假设某些特定的值足以满足计算和存储需求。然而，当我们开始面临性能问题时，我们不得不回过头来重新检查应用程序需求。就影响而言，这通常仅限于一个虚拟机，因此来回调整和修改是可行的。然而，这种方法不适用于NSX
    Edge，主要因为它是一个边缘设备，影响要大得多。出于同样的原因，选择正确的外形规格至关重要，以确保获得最佳性能。以下截图展示了每个Edge外形规格所提供的默认计算能力：
- en: '![Introducing Edge form factor](img/image_05_001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Edge外形规格](img/image_05_001.jpg)'
- en: The positive aspect to note is that we can always go back and change these form
    factors. For example, during initial deployment time, we have deployed NSX Edge
    in **large form factor**. Later, we can go ahead and change the form factor from
    **large to any higher version**. However, the negative side is that there will
    be an NSX Edge service outage during that time. Hence, the recommended deployment
    option would be selecting the right form factor Edge. For services such as, load
    balancers, wherein we have a lot of SSL termination and offload tasks, which would
    consume a lot of vCPU cycles, the preferred form factor would be Edge **X-Large**.
    With that said, we will start with one of the most exciting topics in the NSX
    world. Routing simplicity and feature-rich integration makes NSX an ideal platform
    for all vSphere architects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的积极方面是，我们始终可以回过头来更改这些外形规格。例如，在初始部署时，我们选择部署了**大规格**的NSX Edge。稍后，我们可以将外形规格从**大规格改为任何更高版本**。然而，负面影响是，在此过程中，NSX
    Edge服务会出现中断。因此，推荐的部署选项是选择正确的Edge外形规格。对于负载均衡器等服务，其中有大量的SSL终止和卸载任务，这些任务会消耗大量的vCPU周期，首选的外形规格是Edge
    **X-Large**。话虽如此，我们将从NSX世界中最激动人心的主题之一开始。路由的简便性和功能丰富的集成，使NSX成为所有vSphere架构师的理想平台。
- en: Introducing OSP, BGP, and ISIS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍OSPF、BGP和ISIS
- en: As we know, distributed routing capability in the VMware NSX provides an optimized
    and scalable way of handling East-West traffic in a data center. The NSX Edge
    services router provides the traditional centralized routing. What more could
    we need in an enterprise environment? Both these components, **Distributed Logical
    Router** (**DLR**) and Edge, give a cutting-edge solution in an enterprise's routing
    architecture. Before we start with how routing works between these solutions,
    let me give some quick background on routing protocols that are supported in an
    NSX environment, and together, we will explore an OSPF routing protocol configuration
    between DLR and NSX Edge. Sounds interesting? Let's get started.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，VMware NSX 中的分布式路由功能提供了一种优化且可扩展的方式来处理数据中心中的东西向流量。NSX Edge 服务路由器提供传统的集中式路由。我们在企业环境中还需要什么？这两个组件，**分布式逻辑路由器**（**DLR**）和
    Edge，提供了企业路由架构中的前沿解决方案。在我们开始讨论这些解决方案之间的路由如何工作的之前，让我简单介绍一下在 NSX 环境中支持的路由协议，然后我们一起探讨
    DLR 和 NSX Edge 之间的 OSPF 路由协议配置。听起来有趣吗？那我们开始吧。
- en: Exploring Open Shortest Path First
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索开放最短路径优先
- en: 'From my experience, while teaching and doing labs, people often find it really
    difficult to understand the **Open Shortest Path First** (**OSPF**) protocol.
    So, let''s split this abbreviation into its component parts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，在教学和实验室操作中，人们常常发现理解 **开放最短路径优先**（**OSPF**）协议非常困难。所以，让我们将这个缩写分解成它的组成部分：
- en: '**Open**: Yes, this is an open standard protocol developed by a wide range
    of network vendors. This means that it is publicly available on any dynamic routing
    protocol-supported routers. Again, we are not limited to running OSPF on CISCO
    or Juniper, or any other vendor routers in an OSPF routing environment. This is
    certainly configurable in multivendor deployment scenarios.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放**：是的，这是一个开放标准协议，由广泛的网络厂商开发。这意味着它在任何支持动态路由协议的路由器上都是公开可用的。同样，我们不仅仅局限于在 CISCO、Juniper
    或其他厂商的路由器上运行 OSPF，在 OSPF 路由环境中，任何厂商的路由器都可以使用。对于多厂商部署场景，这肯定是可以配置的。'
- en: '**Shortest Path First**: **Shortest Path First** (**SPF**) uses a Dijkstra
    algorithm to find the single shortest path to reach a destination network.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最短路径优先**：**最短路径优先**（**SPF**）使用 Dijkstra 算法找到通往目标网络的唯一最短路径。'
- en: 'So, in a nutshell, we have an open standard routing protocol that calculates
    the shortest path to reach a destination. For now, we will pause for some time
    and understand routing classes, and we will come back to the topic of OSPF. There
    are three classes of routing protocols, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们有一个开放标准的路由协议，它计算到达目的地的最短路径。现在，我们将暂停一下，理解路由协议的分类，然后再回到 OSPF 的话题。路由协议有三种分类，分别是：
- en: '**Distance vector**: A distance vector protocol finds the best path to a remote
    network by judging distance. RIP is a distance vector routing protocol. In RIP
    routing, to reach the destination network, the router will choose the path that
    has the least number of hops. The term vector means the direction to the destination
    network.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离矢量**：距离矢量协议通过判断距离找到通往远程网络的最佳路径。RIP 是一种距离矢量路由协议。在 RIP 路由中，路由器会选择经过最少跳数的路径来到达目标网络。矢量这个术语指的是到目标网络的方向。'
- en: '**Link state**: Link state protocols are also called Shortest Path First protocols.
    In a link state protocol environment, routers create three separate tables:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链路状态**：链路状态协议也叫做最短路径优先协议。在链路状态协议环境中，路由器创建三个独立的表：'
- en: Directly-attached neighbors
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接连接的邻居
- en: Topology of the entire network
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个网络的拓扑
- en: Routing table
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由表
- en: Behind the scenes, link state protocols send updates containing the state of
    their own links to all other directly connected routers on the network.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在后台，链路状态协议会将自己链路的状态更新发送到网络中所有其他直接连接的路由器。
- en: '**Hybrid**: A hybrid protocol is a mix of distance vector and link state protocols,
    and **Enhanced Interior Gateway Routing Protocol** (**EIGRP**) is a great example.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合型**：混合协议是距离矢量协议和链路状态协议的结合，**增强型内部网关路由协议**（**EIGRP**）就是一个很好的例子。'
- en: Understanding basic OSPF terminology
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解基本的 OSPF 术语
- en: 'To understand the fundamentals of OSPF, let''s clarify some basic OSPF terminology:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 OSPF 的基础知识，让我们先澄清一些基本的 OSPF 术语：
- en: '**Link**: A link is a network, or OSPF router interface, assigned to any given
    network. Yes, it is important to understand if we have multiple interfaces in
    an up-and-running state; OSPF wont treat them as link. Only when an interface
    is added to the OSPF process is it considered to be a link.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Link**: 链路是分配给任何给定网络的网络或OSPF路由器接口。是的，了解我们是否有多个运行状态的接口是很重要的；OSPF不会将它们视为链路。只有当接口添加到OSPF进程时，它才被视为链路。'
- en: '**Router ID**: The **router ID** (**RID**) is an IP address used to identify
    the OSPF router.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Router ID**: **路由器ID**（**RID**）是用于标识OSPF路由器的IP地址。'
- en: '**Neighbor**: Neighbors are two or more OSPF routers that have an interface
    on a common network:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Neighbor**: 邻居是在共同网络上拥有接口的两个或多个OSPF路由器：'
- en: Area ID
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域ID
- en: Stub area flag
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stub区域标志
- en: Authentication password
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证密码
- en: Hello and dead intervals
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello和死亡间隔
- en: Note
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the preceding parameters should be matching to form a neighbor ship.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有上述参数应匹配以形成邻居关系。
- en: '**Adjacency**: Adjacency is a relationship between two OSPF routers that permits
    the direct exchange of route updates. This totally depends upon both the type
    of network and the configuration of the routers:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adjacency**: 邻接关系是允许两个OSPF路由器直接交换路由更新的关系。这完全取决于网络类型和路由器的配置：'
- en: '**Designated Router**: A **Designated Router** (**DR**) is elected whenever
    OSPF routers are connected to the same broadcast network to minimize the number
    of adjacencies formed. Selection can be either manual or automated, based on priority
    value as the first pararmeter. All routers on the same network will establish
    adjacencies with the DR and the BDR, which ensures that all router''s topology
    tables are synchronized.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Designated Router**: 每当OSPF路由器连接到同一广播网络时，都会选举一个**指定路由器**（**DR**），以减少形成的邻接数。选择可以是手动的或基于优先级值作为第一个参数的自动化选择。同一网络上的所有路由器都将与DR和BDR建立邻接关系，从而确保所有路由器的拓扑表同步。'
- en: '**Backup Designated Router**: A **Backup Designated Router** (**BDR**) is a
    backup for the DR router.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Backup Designated Router**: **备份指定路由器**（**BDR**）是指DR路由器的备份。'
- en: '**Hello protocol**: The OSPF Hello protocol provides dynamic neighbor discovery
    and maintains neighbor relationships. Hello packets are addressed to multicast
    address `224.0.0.5`. Hello packets and **Link State Advertisements** (**LSAs**)
    build the topological database.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hello protocol**: OSPF Hello协议提供动态邻居发现并维护邻居关系。Hello数据包发送到组播地址`224.0.0.5`。Hello数据包和**链路状态广告**（**LSAs**）构建拓扑数据库。'
- en: '**Neighborship database**: A neighborship database is a list of all OSPF routers
    for which Hello packets are visible. Lets discuss about how OSPF database is getting
    updated.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Neighborship database**: 邻居数据库是所有可见Hello数据包的OSPF路由器列表。让我们讨论一下OSPF数据库如何更新。'
- en: Updating a topology database
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新拓扑数据库
- en: 'We are aware that the OSPF router teaches **directly attached neighbors**,
    **topology of the entire internetwork**, and finally, a **routing table**. Let''s
    discuss how a topology database is updated in an OSPF router:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道OSPF路由器直接教授**直连邻居**，**整个互联网络的拓扑**，最后是**路由表**。让我们讨论一下OSPF路由器如何更新拓扑数据库：
- en: '**Link state advertisement**: I would simply call it an OSPF language; the
    way OSPF routers communicate. LSA is an OSPF data packet containing link state
    and routing information that''s shared among OSPF routers.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Link state advertisement**: 我简单地称之为OSPF语言；OSPF路由器通信的方式。LSA是包含链路状态和路由信息的OSPF数据包，这些信息在OSPF路由器之间共享。'
- en: '**Areas**: An OSPF area is a grouping of contiguous networks and routers. All
    routers in the same area share a common area ID. The following figure depicts
    a simple OSPF topology:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Areas**: OSPF区域是连续网络和路由器的分组。同一区域中的所有路由器共享相同的区域ID。以下图展示了一个简单的OSPF拓扑：'
- en: '![Updating a topology database](img/image_05_002.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![更新拓扑数据库](img/image_05_002.jpg)'
- en: 'There is a total of eight important LSA types in OSPF:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在OSPF中总共有八种重要的LSA类型：
- en: '**LSA Type 1: Router LSA**: Each router within the area will flood a type 1
    router LSA within the area.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA Type 1: Router LSA**: 区域内的每个路由器都会向区域内传播类型1的路由器LSA。'
- en: '**LSA Type 2: Network LSA**: The network LSA or type 2 is created for each
    multi-access network. Network LSAs are generated by the designated router.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA Type 2: Network LSA**: 网络LSA或类型2是为每个多接入网络创建的。网络LSA是由指定路由器生成的。'
- en: '**LSA Type 3: Summary LSA**: **Area Border Router** (**ABR**) will create a
    LSA 3 summary and will pass the LSA information to other areas.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA Type 3: Summary LSA**: **区域边界路由器**（**ABR**）将创建LSA 3摘要，并将LSA信息传递给其他区域。'
- en: '**LSA Type 4: Summary ASBR LSA**: Routers need to know where to find the ASBR.
    In such cases, ABR will generate a summary.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA 类型 4：汇总 ASBR LSA**：路由器需要知道在哪里找到 ASBR。在这种情况下，ABR 将生成汇总。'
- en: '**LSA Type 5: Autonomous system external LSA**: A type 5 LSA will be sent by
    a border router to let other routers know how to reach the border router through
    the internal network.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA 类型 5：自治系统外部 LSA**：类型 5 LSA 将由边界路由器发送，以通知其他路由器如何通过内部网络到达边界路由器。'
- en: '**LSA Type 7: Not-so-stubby area LSA**: This doesn''t allow external LSAs (type
    5). All it will do is generate type 7 LSAs instead'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSA 类型 7：非截断区域 LSA**：这不允许外部 LSA（类型 5）。它所做的只是生成类型 7 LSA。'
- en: How about type 6 and type 8? Well, type 6 is no longer supported in OSPF v2
    and, type 8 LSA is a link-local only LSA for OSPF v3\. A type 8 LSA is used to
    give information about link-local addresses and a list of IPv6 addresses on the
    link. In this module, we have a practical use case discussion on OSPF in the NSX
    world by establishing a dynamic routing between NSX Edge and DLR.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，类型 6 和类型 8 呢？类型 6 在 OSPF v2 中不再受支持，而类型 8 LSA 是 OSPF v3 的链路本地 LSA。类型 8 LSA
    用于提供关于链路本地地址的信息以及链路上 IPv6 地址的列表。在本模块中，我们将通过在 NSX Edge 和 DLR 之间建立动态路由，讨论在 NSX 世界中应用
    OSPF 的实际案例。
- en: For now, let's move on and discuss ISIS protocol.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，咱们继续讨论 ISIS 协议。
- en: Exploring Intermediate System to Intermediate System
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索中间系统到中间系统
- en: 'An Intermediate System routing protocol is a link state protocol similar to
    OSPF. It is also called an ISP scale protocol, primarily because of its ability
    to support more areas than OSPF. An intermediate system is a **router**, and **Intermediate
    System to Intermediate System** (**IS-IS**) is the routing protocol that routes
    packets between intermediate systems. IS-IS routers are of three types: Level
    1 (intra area), Level 2 (inter area), or Level 1-2 (both). Routing information
    is exchanged between Level 1 routers and other Level 1 routers of the same area,
    and Level 2 routers can only form relationships and exchange information with
    other Level 2 routers. Level 1-2 routers exchange information with both levels
    and are used to connect the inter area routers with the intra area routers, as
    shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 中间系统路由协议是一种与 OSPF 类似的链路状态协议。它也被称为 ISP 规模协议，主要是因为它支持比 OSPF 更多的区域。中间系统是一个 **路由器**，而
    **中间系统到中间系统**（**IS-IS**）是将数据包在中间系统之间路由的协议。IS-IS 路由器有三种类型：Level 1（区域内）、Level 2（区域间）或
    Level 1-2（两者）。Level 1 路由器与同一区域的其他 Level 1 路由器交换路由信息，Level 2 路由器只能与其他 Level 2 路由器建立关系并交换信息。Level
    1-2 路由器与两个级别的路由器交换信息，用于连接区域间路由器和区域内路由器，如下图所示：
- en: '![Exploring Intermediate System to Intermediate System](img/image_05_003.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![探索中间系统到中间系统](img/image_05_003.jpg)'
- en: After having a brief glimpse at the ISIS protocol, let us now understand the
    **Border Gateway Protocol** (**BGP**).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 简要了解 ISIS 协议后，让我们现在来理解 **边界网关协议**（**BGP**）。
- en: Exploring Border Gateway Protocol
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索边界网关协议
- en: 'First and foremost, this is an exterior gateway protocol. BGP is primarily
    used by **Internet Service Providers** (**ISP**) and large enterprise companies
    when they have connections with multiple ISPs. All it does is bind smaller, autonomous
    (internetworks) to ensure efficient routing is possible regardless of the location.
    BGP is basically a group of autonomous systems. This raises another question:
    what are autonomous systems? **Autonomous Systems** (**AS**) are groups of networks
    under a common administration. Just like private and public IP concepts, AS also
    have private and public numbers. Public AS numbers range from 1 to 64511, and
    private AS numbers range from 64512 to 65535\. When we do a routing within an
    AS it is called iBGP routing, and eGBP is routing between two different autonomous
    systems. The process for forming a BGP peering is very simple. A TCP session needs
    to established, with the BGP source port being an emphemeral port, and the destination
    being TCP port 179\. The following figure depicts a iBGP and eBGP topology:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，最重要的是，这是一种外部网关协议。BGP主要由**互联网服务提供商**（**ISP**）和大型企业公司在与多个ISP连接时使用。它的作用就是将较小的自治（互联网络）绑定在一起，以确保无论位置如何，都能够实现高效的路由。BGP本质上是由一组自治系统组成的。这就引出了另一个问题：什么是自治系统？**自治系统**（**AS**）是由共同管理的网络组成的群体。就像私有和公有IP的概念一样，AS也有私有和公有的编号。公有AS编号的范围是1到64511，私有AS编号的范围是64512到65535。当我们在一个AS内进行路由时，它被称为iBGP路由，而eBGP则是指在两个不同的自治系统之间进行路由。形成BGP对等连接的过程非常简单。需要建立一个TCP会话，BGP的源端口是临时端口，目标端口为TCP端口179。下图展示了iBGP和eBGP的拓扑结构：
- en: '![Exploring Border Gateway Protocol](img/image_05_004.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![探索边界网关协议](img/image_05_004.jpg)'
- en: I have limited the explanation of BGP, ISIS, and OSPF, primarily because it
    would demand writing a different book to cover all aspects of routing protocol.
    Enough said-let's finish of our network topology by configuring OSPF routing.
    Before we start with routing between the Distributed Logical Router and the NSX
    Edge gateway, let's go back to the lab topology that we used in [Chapter 4](ch04.html
    "Chapter 4. NSX Virtual Networks and Logical Router"),  *NSX Virtual Network and
    Logical Router*, and understand where we are and what the next requirement is.
    From the following figure, it is clear that we have established a routing between
    web, app, and DB networks. It's time to ask a few questions. We need all these
    networks to communicate with another network (192.168.100.0/24) through a transit
    network. How do we do that? Can we connect the transit network to NSX Edge and
    leverage dynamic routing capability so that an app, web, and DB can communicate
    with external networks?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我对BGP、ISIS和OSPF的解释有所限制，主要是因为要覆盖所有的路由协议方面内容，就需要写一本不同的书。话已说完——让我们通过配置OSPF路由来完成网络拓扑。在我们开始配置分布式逻辑路由器和NSX
    Edge网关之间的路由之前，让我们回到[第4章](ch04.html "第4章：NSX虚拟网络与逻辑路由器")中使用的实验拓扑，*NSX虚拟网络与逻辑路由器*，理解我们现在的位置以及接下来的要求。从下图可以清楚地看到，我们已经在web、app和DB网络之间建立了路由。现在是时候提出一些问题了。我们需要让这些网络通过一个中继网络与另一个网络（192.168.100.0/24）通信。我们该如何做到呢？我们能否将中继网络连接到NSX
    Edge并利用动态路由功能，使得应用、Web和数据库能够与外部网络通信？
- en: 'The following figure depicts a three-tier application leveraging DLR functionality:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了利用DLR功能的三层应用：
- en: '![Exploring Border Gateway Protocol](img/image_05_005.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![探索边界网关协议](img/image_05_005.jpg)'
- en: Deploying an NSX Edge gateway
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署NSX Edge网关
- en: An NSX Edge gateway is a perimeter device and for the same reason, all ingress
    and egress traffic from a network virtualized data center has to go through Edge
    devices and finally hit the upstream router. In our case three tier application
    is in need of communicating with an external network-192.168.100.0/24 which demands
    an Edge gateway to deployed. Let's deploy an NSX Edge gateway and connect with
    Distributed Logical Router. In a nutshell, all we are doing is connecting two
    routers together and creating a dynamic routing environment for them to exchange
    the networks, so that eventually, our three-tier application can communicate with
    network 192.168.100.0/24.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: NSX Edge网关是一个边缘设备，因此，网络虚拟化数据中心中的所有入口和出口流量必须通过Edge设备，并最终到达上游路由器。在我们的例子中，三层应用需要与外部网络（192.168.100.0/24）通信，因此需要部署一个Edge网关。让我们部署一个NSX
    Edge网关并与分布式逻辑路由器（DLR）连接。简而言之，我们所做的就是将两个路由器连接起来，为它们创建一个动态路由环境，以便交换网络，从而最终使得我们的三层应用能够与网络192.168.100.0/24进行通信。
- en: 'The steps are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: On the vSphere web client home tab, click **Inventories** | **Networking & Security**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 vSphere Web 客户端首页标签中，点击**库存** | **网络与安全**。
- en: In the left-hand navigation pane, select **NSX Edges**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航窗格中，选择**NSX Edge**。
- en: In the middle pane, click the green plus sign to open the **New NSX Edge** dialog
    box.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在中间窗格中，点击绿色加号打开**新建 NSX Edge**对话框。
- en: On the **Name and description** page, leave **Edge Services Gateway** selected.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称和描述**页面，保持选择**Edge Services Gateway**。
- en: Enter `Perimeter Gateway` in the **Name** text box and click **Next**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入`Perimeter Gateway`并点击**下一步**。
- en: 'The following screenshot shows NSX Edge:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 NSX Edge：
- en: '![Deploying an NSX Edge gateway](img/image_05_006.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![部署 NSX Edge 网关](img/image_05_006.jpg)'
- en: On the CLI credentials page, enter the password in the **Password** text box.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CLI 凭证页面，在**密码**文本框中输入密码。
- en: Enter the password correctly because a verification box is not provided:![Deploying
    an NSX Edge gateway](img/image_05_007.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确输入密码，因为没有提供验证框：![部署 NSX Edge 网关](img/image_05_007.jpg)
- en: On the **Configure deployment** page, verify that the **Datacenter** selection
    is our Edge Cluster that we created during the initial vSphere Cluster design
    phase.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置部署**页面，确认**数据中心**选择的是我们在初始 vSphere 集群设计阶段创建的 Edge 集群。
- en: Verify that the **Appliance Size** selection is **Compact**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**设备大小**选择为**Compact**。
- en: Verify that the **Enable auto rule generation** checkbox is selected.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**启用自动规则生成**复选框已选中。
- en: Note
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: NSX Edge adds firewall, NAT, and routing routes, to enable control traffic to
    flow for these services. If this option is disabled, we need to manually create
    firewall rules, which is tedious work.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NSX Edge 添加防火墙、NAT 和路由，以便控制流量通过这些服务。如果此选项被禁用，我们需要手动创建防火墙规则，这是繁琐的工作。
- en: 'Under **NSX Edge Appliances**, click the green plus sign, as highlighted in
    the following screenshot, to open the **Add NSX Edge Appliance** dialog box, and
    perform the following actions:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**NSX Edge 设备**下，点击绿色加号，如下截图所示，打开**添加 NSX Edge 设备**对话框，并执行以下操作：
- en: Select **Management and Edge Cluster** from the **Cluster/Resource Pool** drop-down
    menu.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**集群/资源池**下拉菜单中选择**管理和 Edge 集群**。
- en: Select **shared datastore** from the **Datastore** drop-down menu.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**数据存储**下拉菜单中选择**共享数据存储**。
- en: Leave all other fields at the default value and click **OK**.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他字段为默认值并点击**确定**。
- en: 'Click **Next,** as shown in the following sreenshot:'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，如以下截图所示：
- en: '![Deploying an NSX Edge gateway](img/image_05_008.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![部署 NSX Edge 网关](img/image_05_008.jpg)'
- en: 'On the **Configure interfaces** page, click the green plus sign to open the
    **Add NSX Edge Interface** dialog box and perform the following actions to configure
    the first of two interfaces:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置接口**页面，点击绿色加号打开**添加 NSX Edge 接口**对话框，并执行以下操作配置两个接口中的第一个：
- en: Enter `Uplink-Interface` in the **Name** text box.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入`Uplink-Interface`。
- en: For **Type**, leave **UpLink** selected.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**类型**，保持选择**上行链路**。
- en: Click the **Connected To** | **Select** link.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接到** | **选择**链接。
- en: Click **Distributed Portgroup**.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**分布式端口组**。
- en: Click the **Mgmt-Edge-VDS-HQ Uplink** button and click **OK**.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Mgmt-Edge-VDS-HQ 上行链路**按钮并点击**确定**。
- en: Click the green plus sign under **Configure Subnets**.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**配置子网**下方的绿色加号。
- en: In the **Add Subnet** dialog box, click the green plus sign to add an IP address
    field.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加子网**对话框中，点击绿色加号添加一个 IP 地址字段。
- en: Enter `192.168.100.3` in the **IP Address** text box and click **OK** to confirm
    the entry.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**IP 地址**文本框中输入`192.168.100.3`并点击**确定**确认输入。
- en: Enter **24** in the **Subnet prefix length** text box.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**子网前缀长度**文本框中输入**24**。
- en: Click **OK** to close the **Add Subnet** dialog box.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**关闭**添加子网**对话框。
- en: Leave all other settings at default value and click **OK**.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他设置为默认值并点击**确定**。
- en: 'Click the green plus sign to open the **Add NSX Edge Interface** dialog box,
    and perform the following actions to configure the second interface:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色加号打开**添加 NSX Edge 接口**对话框，并执行以下操作配置第二个接口：
- en: Enter `Transit-Interface` in the **Name** text box.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入`Transit-Interface`。
- en: For **Type**, click **Internal**.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**类型**，点击**内部**。
- en: Click the **Connected To** | **Select** link.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接到** | **选择**链接。
- en: Click the **Transit-Network** button and click **OK**
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Transit-Network**按钮并点击**确定**。
- en: 'The following screenshot shows the NSX Edge Interface selection:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 NSX Edge 接口选择：
- en: '![Deploying an NSX Edge gateway](img/image_05_009.jpg)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![部署 NSX Edge 网关](img/image_05_009.jpg)'
- en: Click **Next**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: On the **Default gateway settings** page, select the **Configure Default Gateway**
    check box.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**默认网关设置**页面上，勾选**配置默认网关**复选框。
- en: Verify that the **vNIC** selection is **Uplink-Interface**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证**vNIC**选择是否为**上行链路接口**。
- en: Enter `192.168.100.2` in the **Gateway IP** text box.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**网关 IP**文本框中输入`192.168.100.2`。
- en: This value is the IP address of a router that is available on the HQ uplink
    port group.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此值是一个路由器的 IP 地址，该路由器可在 HQ 上行链路端口组中使用。
- en: Leave all the other settings at the default value and click **Next**, as shown
    in the following screenshot:![Deploying an NSX Edge gateway](img/image_05_010.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留其他所有设置为默认值并点击**下一步**，如下图所示：![部署 NSX Edge 网关](img/image_05_010.jpg)
- en: On the **Firewall and HA** page, select the **Configure Firewall default policy**
    check box.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**防火墙和高可用性**页面上，勾选**配置防火墙默认策略**复选框。
- en: For the **Default Traffic Policy**, click **Accept**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**默认流量策略**，点击**接受**。
- en: Note
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a very important step, as you can see that, by default, all traffic
    is blocked.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个非常重要的步骤，因为默认情况下，所有流量都被阻止。
- en: '**Configure HA parameters**. High Availability (HA) ensures that an NSX Edge
    appliance is always available by installing an active pair of Edges on your virtualized
    infrastructure, which will be discussed further during Edge HA modules. Hence,
    for the time being, we are leaving the rest of the settings as they are. The following
    screenshot depicts Edge firewall and HA settings:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**配置高可用性参数**。高可用性（HA）确保通过在虚拟化基础架构上安装一对活动的 Edge 设备，使 NSX Edge 设备始终可用，关于 Edge
    高可用性模块的详细内容将进一步讨论。因此，目前我们将其余设置保持不变。以下截图展示了 Edge 防火墙和 HA 设置：'
- en: '![Deploying an NSX Edge gateway](img/image_05_011.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![部署 NSX Edge 网关](img/image_05_011.jpg)'
- en: On the **Ready to complete page**, review the configuration report and click
    **Finish**.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**准备完成页面**上，查看配置报告并点击**完成**。
- en: So, we have deployed **Distributed Logical Router** and, later, the **NSX Edge
    gateway**. Once again, the prime aim here is to have our web, app, and DB servers
    communicating with network 192.168.100.0/24, and we know for sure these networks
    are not a directly-connected network. Before moving forward with routing, let's
    have a quick look at the following figure to see our current topology.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已部署了**分布式逻辑路由器**，然后是**NSX Edge 网关**。再一次，主要目的是让我们的 Web、应用和数据库服务器与网络 192.168.100.0/24
    通信，而且我们确信这些网络不是直接连接的网络。在继续配置路由之前，让我们快速查看以下图示，看看当前的拓扑结构。
- en: 'The following figure depicts a three-tier application connected to DLR, and
    a DLR to Edge connection:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了连接到 DLR 的三层应用程序和 DLR 与 Edge 的连接：
- en: '![Deploying an NSX Edge gateway](img/image_05_012.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![部署 NSX Edge 网关](img/image_05_012.jpg)'
- en: Now that we have completed the NSX Edge deployment, we will go ahead with configuring
    OSPF on NSX Edge.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已完成 NSX Edge 部署，接下来将继续配置 NSX Edge 上的 OSPF。
- en: Configuring OSPF on NSX Edge
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 NSX Edge 上的 OSPF
- en: 'Configuring OSPF routing on NSX Edge (Perimeter Edge) allows logical networks
    to be learned by the logical router and distributed through a transit network.
    The steps are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NSX Edge（边缘防火墙）上配置 OSPF 路由允许逻辑网络通过逻辑路由器进行学习，并通过传输网络进行分发。具体步骤如下：
- en: In the routing categories list, select **Global Configuration**.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由类别列表中，选择**全局配置**。
- en: In the **Dynamic Routing Configuration** panel, click **Edit** to open **Edit
    Dynamic Routing**, as shown in the following screenshot:![Configuring OSPF on
    NSX Edge](img/image_05_013.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动态路由配置**面板中，点击**编辑**以打开**编辑动态路由**，如下图所示：![配置 NSX Edge 上的 OSPF](img/image_05_013.jpg)
- en: 'In the **Dynamic Routing Configuration** dialog box, perform the following
    actions:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动态路由配置**对话框中，执行以下操作：
- en: Select **Uplink - **192.168.100.3**** from the **Router ID** drop-down menu.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**路由器 ID**下拉菜单中选择**上行链路 - 192.168.100.3**。
- en: Check the **Enable OSPF** checkbox.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勾选**启用 OSPF**复选框。
- en: 'Leave all other fields at the default value and click **Save**, as shown in
    the following screenshot:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有其他字段为默认值，并点击**保存**，如下图所示：
- en: '![Configuring OSPF on NSX Edge](img/image_05_014.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置 NSX Edge 上的 OSPF](img/image_05_014.jpg)'
- en: At the top of the **Global Configuration** page, click **Publish Changes**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**全局配置**页面顶部，点击**发布更改**。
- en: In the routing category panel, select **OSPF**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由类别面板中，选择**OSPF**。
- en: 'In the area definitions list, verify that an area with the following properties
    appears in the list, as shown in the following screenshot:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在区域定义列表中，验证是否出现具有以下属性的区域，如下图所示：
- en: '**Area ID**: **0**'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域 ID**：**0**'
- en: '**Type**: **Normal**'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：**正常**'
- en: '**Authentication**: **None**'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：**无**'
- en: '![Configuring OSPF on NSX Edge](img/image_05_015.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在NSX Edge上配置OSPF](img/image_05_015.jpg)'
- en: Note
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Area 0 is the default area in OSPF and all other areas will be connected to
    Area 0.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 区域0是OSPF中的默认区域，所有其他区域将连接到区域0。
- en: 'Above the area definitions list, click the green plus sign to open the **New
    Area Definition** dialog box, and perform the following actions:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在区域定义列表的上方，点击绿色加号以打开**新建区域定义**对话框，并执行以下操作：
- en: Enter **10** in the **Area ID** text box.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**区域ID**文本框中输入**10**。
- en: Leave all other settings at the default value and click **OK**.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有其他设置为默认值，并点击**确定**。
- en: 'Under **Area Interface Mapping**, at the bottom of the **OSPF** page, click
    the green plus sign to open the **New Area to Interface Mapping** dialog box,
    and perform the following actions:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域接口映射**下，页面底部点击绿色加号以打开**新建区域到接口映射**对话框，并执行以下操作：
- en: Verify that the **vNIC** selection is **Uplink-Interface**.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认**vNIC**选择为**上行接口**。
- en: Select **0** from the **Area** drop-down menu.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**区域**下拉菜单中选择**0**。
- en: Leave all other fields at the default value and click **OK**.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有其他字段为默认值，并点击**确定**。
- en: 'Under **Area Interface Mapping**, at the bottom of the **OSPF** page, click
    the green plus sign to open the **New Area to Interface Mapping** dialog box,
    and perform the following actions, as shown in the following screenshot:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域接口映射**下，页面底部点击绿色加号以打开**新建区域到接口映射**对话框，并执行以下操作，如下图所示：
- en: Select **Transit**-Interface from the drop-down menu.
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**过境**-接口。
- en: Select **10** from the **Area** drop-down menu.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**区域**下拉菜单中选择**10**。
- en: 'Leave all other fields at the default value and click **OK**:'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有其他字段为默认值，并点击**确定**：
- en: '![Configuring OSPF on NSX Edge](img/image_05_016.jpg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在NSX Edge上配置OSPF](img/image_05_016.jpg)'
- en: At the top of the OSPF page, click **Publish Changes**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在OSPF页面顶部，点击**发布更改**。
- en: Note
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can configure the type of subnets that are advertised by Perimeter Gateway
    through OSPF.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过OSPF配置Perimeter Gateway发布的子网类型。
- en: In the **Routing** category panel, select **Route Redistribution Status**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**路由**类别面板中，选择**路由重分发状态**。
- en: 'Under **Route Redistribution table**, at the bottom of the page, click the
    green plus sign to open the N**ew Redistribution criteria** dialog box, and perform
    the following actions:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**路由重分发表**下，页面底部点击绿色加号以打开**新建重分发标准**对话框，并执行以下操作：
- en: Under **Allow learning from**, select the **Connected** checkbox.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**允许学习自**下，选中**已连接**复选框。
- en: Subnets connected to Perimeter Gateway can now be learned.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以学习连接到Perimeter Gateway的子网。
- en: 'Leave all other settings at the default value and click **OK**, as shown in
    the following screenshot:'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留所有其他设置为默认值，并点击**确定**，如下图所示：
- en: '![Configuring OSPF on NSX Edge](img/image_05_017.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在NSX Edge上配置OSPF](img/image_05_017.jpg)'
- en: In the **Route Redistribution Status** panel, at the top of the page, determine
    if a green check mark appears next to OSPF. For now, it is not, as shown in the
    following screenshot:![Configuring OSPF on NSX Edge](img/image_05_018.jpg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**路由重分发状态**面板的页面顶部，查看OSPF旁边是否出现绿色勾选标记。此时没有，如下图所示：![在NSX Edge上配置OSPF](img/image_05_018.jpg)
- en: 'If a green check mark does not appear, perform the following actions:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有出现绿色勾选标记，请执行以下操作：
- en: On the right-hand side of the **Route Redistribution Status** panel, click **Change**.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**路由重分发状态**面板的右侧，点击**更改**。
- en: 'In the **Change redistribution settings** dialog box, select the **OSPF** checkbox,
    as shown in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**更改重分发设置**对话框中，选中**OSPF**复选框，如下图所示：
- en: Click **Save**.
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: 'In the **Route Redistribution Status** panel, at the top of the page, verify
    that a green check mark appears next to **OSPF**:'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**路由重分发状态**面板的页面顶部，确认OSPF旁边出现绿色勾选标记：
- en: '![Configuring OSPF on NSX Edge](img/image_05_019.jpg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在NSX Edge上配置OSPF](img/image_05_019.jpg)'
- en: At the top of the page, click **Publish Changes**:![Configuring OSPF on NSX
    Edge](img/image_05_020.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面顶部，点击**发布更改**：![在NSX Edge上配置OSPF](img/image_05_020.jpg)
- en: 'With the preceding steps, we have successfully configured OSPF on Perimeter
    Edge. All we have done so far is select a **Router-ID** for Perimeter Gateway
    and enable OSPF. Later, we created Area-10 and performed an Area-to-interface
    mapping, and finished by enabling **Route Redistribution**. It''s time to recollect
    the firewall policy that we selected during NSX Edge deployment; we have allowed
    the traffic and also selected the **Enable auto rule generation** checkbox. In
    this example, we have configured OSPF on NSX Edge and we would expect OSPF auto
    rules to be configured in the firewall table. Let''s verify that by switching
    to the **Perimeter Gateway** | **Manage** | **Firewall** tab, as shown in the
    following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述步骤，我们已成功在外围网关上配置了OSPF。到目前为止，我们所做的只是为外围网关选择了一个**路由器 ID**并启用了OSPF。随后，我们创建了
    Area-10，并进行了区域到接口的映射，最后启用了**路由重分发**。接下来，让我们回顾一下在NSX Edge部署过程中选择的防火墙策略；我们已经允许了流量并选中了**启用自动规则生成**复选框。在本示例中，我们已经在NSX
    Edge上配置了OSPF，并且我们期望防火墙表中自动配置OSPF规则。让我们通过切换到**外围网关** | **管理** | **防火墙**标签来验证这一点，如下图所示：
- en: '![Configuring OSPF on NSX Edge](img/image_05_021.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![在NSX Edge上配置OSPF](img/image_05_021.jpg)'
- en: 'As we can see, there are three firewall rules auto-configured: two **Internal**
    rules and one **Default** rule. Now that we have an OSPF process running on the
    NSX Edge and firewall rules are auto-configured, let''s move forward and configure
    OSPF on Distributed Logical Router.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，已经自动配置了三条防火墙规则：两条**内部**规则和一条**默认**规则。现在，OSPF进程已在NSX Edge上运行，并且防火墙规则已自动配置，接下来我们继续在分布式逻辑路由器上配置OSPF。
- en: Configuring OSPF routing on Distributed Logical Router
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在分布式逻辑路由器上配置OSPF路由
- en: 'Let me re-emphasize the Distributed Logical Router use case. The whole purpose
    of DLR is to do an intelligent East-West routing, which allows virtual machine
    to virtual machine communication without going through traditional data center
    hop-by-hop routing. Let''s go ahead and configure OSPF on DLR:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再次强调分布式逻辑路由器的使用案例。DLR的核心目的是实现智能的东西向路由，这允许虚拟机之间的通信无需通过传统的数据中心逐跳路由。接下来，让我们在DLR上配置OSPF：
- en: In the **Routing** category panel, select **Global Configuration**.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**路由**类别面板中，选择**全局配置**。
- en: On the right-hand side of the **Dynamic Routing Configuration** panel, click
    **Edit.**
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动态路由配置**面板的右侧，点击**编辑**。
- en: In the **Edit Dynamic Routing Configuration** dialog box, select Interface as
    **Transit and 192.168.10.2** from the **Router ID** drop-down menu, as shown in
    the following screenshot:![Configuring OSPF routing on Distributed Logical Router](img/image_05_022.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑动态路由配置**对话框中，从**路由器 ID**下拉菜单中选择接口为**Transit 和 192.168.10.2**，如下面的截图所示：![在分布式逻辑路由器上配置OSPF路由](img/image_05_022.jpg)
- en: This setting must be specified before OSPF can be configured.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置OSPF之前，必须指定此设置。
- en: Leave all other fields at the default value and click **Save**.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留其他字段的默认值并点击**保存**。
- en: At the top of the **Global Configuration** page, click **Publish Changes**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**全局配置**页面的顶部，点击**发布更改**。
- en: In the **Routing** category panel, select **OSPF**.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**路由**类别面板中，选择**OSPF**。
- en: 'On the right-hand side of the **OSPF Configuration** panel, click **Edit**
    to open the **OSPF Configuration** dialog box, and perform the following actions:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**OSPF配置**面板的右侧，点击**编辑**以打开**OSPF配置**对话框，并执行以下操作：
- en: Select the **Enable OSPF** checkbox.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**启用 OSPF**复选框。
- en: Enter `192.168.10.3` in the **Protocol Address** text box.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**协议地址**文本框中输入`192.168.10.3`。
- en: Enter `192.168.10.2` in the **Forwarding Address** text box.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**转发地址**文本框中输入`192.168.10.2`。
- en: Note
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Protocol Address**: Establishing routing protocol sessions with other routers.
    In our example, this address would be used for establishing a routing protocol
    session with the NSX Edge Perimeter Gateway. **Forwarding Address**: IP address
    that is to be used by the router data path module in the hosts to forward data
    path packets.'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**协议地址**：与其他路由器建立路由协议会话。在我们的示例中，该地址将用于与NSX Edge外围网关建立路由协议会话。**转发地址**：用于路由器数据路径模块在主机中转发数据路径包的IP地址。'
- en: Click **OK**:![Configuring OSPF routing on Distributed Logical Router](img/image_05_023.jpg)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**：![在分布式逻辑路由器上配置OSPF路由](img/image_05_023.jpg)
- en: In the **Area Definitions** panel, click the green plus sign to open the **New
    Area Definition** dialog box.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域定义**面板中，点击绿色加号打开**新建区域定义**对话框。
- en: Enter **10** in the **Area ID** text box.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域 ID**文本框中输入**10**。
- en: Leave all other fields at the default value and click **OK**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有其他字段保留为默认值，然后点击**确定**。
- en: In the **Area to Interface Mapping** panel, click the green plus sign to open
    the **New Area to Interface Mapping** dialog box.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域到接口映射**面板中，点击绿色加号以打开**新的区域到接口映射**对话框。
- en: Verify that the **Interface** selection is **Transit**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**接口**选择为**传输**。
- en: Select **10** from the **Area** drop-down menu.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**区域**下拉菜单中选择**10**。
- en: Leave all other fields at the default value and click **OK**.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有其他字段保留为默认值，然后点击**确定**。
- en: At the top of the **OSPF configuration** page, click **Publish Changes**.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**OSPF配置**页面顶部，点击**发布更改**。
- en: After the changes have been published, verify that the **OSPF Configuration
    Status** is **Enabled**, as shown in the following screenshot:![Configuring OSPF
    routing on Distributed Logical Router](img/image_05_024.jpg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '更改发布后，请验证**OSPF配置状态**是否为**已启用**，如下截图所示: ![配置分布式逻辑路由器上的OSPF路由](img/image_05_024.jpg)'
- en: 'We can configure the type of subnets that are advertised by the distributed
    router, through OSPF:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过OSPF配置广播的分布式路由器的子网类型：
- en: In the **Routing** category panel, select **Route Redistribution**.
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**路由**类别面板中，选择**路由重分发**。
- en: 'In the **Route Redistribution table**, select the single entry that appears,
    click the pencil icon to open the **Edit Redistribution criteria** dialog box,
    and verify the following settings:'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**路由重分发表**中，选择出现的单个条目，点击铅笔图标以打开**编辑重分发标准**对话框，并验证以下设置：
- en: '**Prefix Name**: Any'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前缀名称**: 任意'
- en: '**Learner Protocol**: **OSPF**'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习协议**: **OSPF**'
- en: '**Allow Learning From**: **Connected**'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许学习来自**: **连接**'
- en: '**Action**: **Permit**'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**: **允许**'
- en: Click **Cancel**.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**取消**。
- en: If the default route redistribution entry does not appear in the list or is
    not configured as specified, create a new route redistribution by clicking the
    green plus sign and configuring the criteria as specified in Step 13\. The following
    screenshot shows an OSPF route redistribution table:![Configuring OSPF routing
    on Distributed Logical Router](img/image_05_025.jpg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果默认路由重分发条目未出现在列表中或未按指定配置进行配置，请点击绿色加号并配置第13步指定的标准创建新的路由重分发。下图显示了OSPF路由重分发表:
    ![配置分布式逻辑路由器上的OSPF路由](img/image_05_025.jpg)'
- en: 'Let''s verify the distributed router firewall policy to confirm if we have
    required rules for OSPF learning. We certainly have OSPF auto rule populated;
    however, the only difference is that the default rule is **Deny,** as shown in
    the following screenshot**.** We will certainly check if that rule is blocking
    any traffic in our example. For now, we are not changing that rule:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们验证分布式路由器防火墙策略，确认我们是否有必要的OSPF学习规则。我们当然已经填充了OSPF自动规则；然而，唯一的区别是默认规则是**拒绝**，如下截图所示**。**
    我们当然会检查该规则是否在我们的示例中阻止了任何流量。目前，我们不会更改该规则:'
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_026.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![配置分布式逻辑路由器上的OSPF路由](img/image_05_026.jpg)'
- en: 'Even though the NSX GUI is nice and cool, there is no way we can view the routing
    table; we are limited to running CLI commands to check, and we have two methods
    to do that:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '即使NSX GUI很好，我们无法查看路由表；我们只能运行CLI命令进行检查，我们有两种方法可以做到这一点:'
- en: Direct console to NSX Edge and logical router
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接控制台到NSX Edge和逻辑路由器
- en: SSH session to NSX Edge and logical router.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH会话到NSX Edge和逻辑路由器。
- en: 'Let''s SSH to NSX Edge. We are connecting to NSX edge with the IP address `192.168.100.3`.
    There are a few interesting things to note from this output, as shown in the following
    screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们SSH到NSX Edge。我们正在使用IP地址`192.168.100.3`连接到NSX Edge。从此输出中可以注意到一些有趣的事情，如下截图所示：
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_027.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![配置分布式逻辑路由器上的OSPF路由](img/image_05_027.jpg)'
- en: 'The name is mentioned as **vShield Edge**. Let''s not get embarrassed with
    that output. As explained in [Chapter 1](ch01.html "Chapter 1. Introduction to
    Network Virtualization"),  *Introduction to Network Virtualization*, NSX is a
    product that is created from VMware **vCloud Networking Security** (**vCNS**).
    Irrespective we are doing a greenfield deployment of NSX, or a brownfield deployment
    where older VCNS was upgraded to NSX, edges would still show as vShield Edge.
    However, the version would certainly be different based on the VCNS/NSX management
    version. Let''s list a few display commands and make a note of a few configurations:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 名称被标注为**vShield Edge**。不要因为这个输出而感到尴尬。正如在[第1章](ch01.html "第1章 网络虚拟化介绍")中所解释的，*网络虚拟化介绍*，NSX是一个由VMware
    **vCloud Networking Security**（**vCNS**）创建的产品。不管我们是进行NSX的绿地部署，还是在旧的VCNS升级为NSX的棕地部署中，边缘设备仍然会显示为vShield
    Edge。然而，根据VCNS/NSX管理版本的不同，版本号肯定会有所不同。我们列出一些显示命令，并记下几项配置：
- en: '`Show IP OSPF interface`: This command would display the interfaces where the
    OSPF process is running. For example, if a router has 10 interfaces and out of
    that only two interfaces are connected to OSPF AREA, only those interfaces would
    be listed:![Configuring OSPF routing on Distributed Logical Router](img/image_05_028.jpg)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Show IP OSPF interface`：此命令将显示运行OSPF协议的接口。例如，如果一个路由器有10个接口，其中只有两个接口连接到OSPF区域，则只会列出这两个接口：![在分布式逻辑路由器上配置OSPF路由](img/image_05_028.jpg)'
- en: 'We have two interfaces in our OSPF configuration:'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在OSPF配置中有两个接口：
- en: 192.168.10.1 (Transit Interface)
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 192.168.10.1（传输接口）
- en: 192.168.100.3 (Uplink)
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 192.168.100.3（上行）
- en: '`Show IP OSPF neighbor`: This command shows the IP address of our OSPF neighbor,
    as shown in the following screenshot of the output:![Configuring OSPF routing
    on Distributed Logical Router](img/image_05_029.jpg)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Show IP OSPF neighbor`：此命令显示我们OSPF邻居的IP地址，如下图所示的输出：![在分布式逻辑路由器上配置OSPF路由](img/image_05_029.jpg)'
- en: The neighbor ID is `192.168.10.2`. The transit interface (`192.168.10.1`) of
    NSX Edge is connected to a neighbor DLR, whose IP address is `192.168.10.2`, and
    their OSPF state is `Full` (in this state, both NSX Edge and DLR are fully adjacent
    with each other). When OSPF adjacency is formed, a router goes through several
    state changes before it becomes fully adjacent with its neighbor. The states are
    `Down`, `Attempt`, `Init`, `2-Way`, `Exstart`, `Exchange`, `Loading`, and `Full`.
    It took me lot of practice sessions to understand the basics of OSPF. I have done
    numerous sessions using GNS3, and did a lot of Wireshark capture, which gives
    a precise picture of how communication is happening and in-depth information on
    LSA packets. To those of you who are finding it difficult to follow my steps,
    my request would be to make a note of all these steps and keep drawing the topology.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 邻居ID是`192.168.10.2`。NSX Edge的传输接口（`192.168.10.1`）连接到邻居DLR，DLR的IP地址为`192.168.10.2`，它们的OSPF状态为`Full`（在此状态下，NSX
    Edge和DLR已经完全邻接）。当OSPF邻接关系建立时，路由器会经历几个状态变化，直到与邻居完全邻接。状态包括`Down`、`Attempt`、`Init`、`2-Way`、`Exstart`、`Exchange`、`Loading`和`Full`。我花了很多时间和练习才能理解OSPF的基础。我使用GNS3进行过无数次实验，并进行了很多Wireshark捕获，Wireshark能提供有关LSA包的详细信息，精确展示通信如何进行。对于那些觉得跟不上我步骤的人，我的建议是记录下所有步骤，并不断绘制拓扑图。
- en: '`Show IP route`: Show IP route will display the full routing table for that
    router:![Configuring OSPF routing on Distributed Logical Router](img/image_05_030.jpg)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Show IP route`：`Show IP route`命令将显示该路由器的完整路由表：![在分布式逻辑路由器上配置OSPF路由](img/image_05_030.jpg)'
- en: 'From the preceding screenshot, we see that:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从上面的截图中，我们可以看到：
- en: A total of eight routes are populated and out of that, we have three OSPF routes
    for networks 172.16.10.0, 172.16.20.0, and 172.16.30.0/24
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总共有8条路由，其中有三条OSPF路由，分别对应网络172.16.10.0、172.16.20.0和172.16.30.0/24
- en: Have a look at the yellow highlighted column to know through which IP address
    NSX Edge perimeter gateway is learning it- 192.168.10.2(DLR Transit Interface)
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请查看黄色高亮的列，以了解NSX Edge周边网关是通过哪个IP地址进行学习的—192.168.10.2（DLR传输接口）
- en: '`Show IP OSPF database`: This command shows the IPv4 OSPF database. The worst
    way to troubleshoot an OSPF would be by not looking at the database. The fundamental
    problem I have seen is that we find the output very lengthy and we are unsure
    where to start and what to look at. Have a look at the following OSPF database
    output, which we have captured from NSX Edge. Even in a simple network, the topology
    table looks very lengthy and confusing, just assume an enterprise network OSPF
    database? The following screenshot depicts an OSPF database:![Configuring OSPF
    routing on Distributed Logical Router](img/image_05_031.jpg)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Show IP OSPF database`：此命令显示IPv4 OSPF数据库。故障排除OSPF的最糟糕方式就是不查看数据库。我见过的根本问题是，我们发现输出内容非常冗长，不确定从哪里开始以及该看什么。请看以下从NSX
    Edge捕获的OSPF数据库输出。即使在一个简单的网络中，拓扑表也看起来非常冗长且令人困惑，假设一个企业网络的OSPF数据库呢？以下截图展示了一个OSPF数据库：![在分布式逻辑路由器上配置OSPF路由](img/image_05_031.jpg)'
- en: 'For now, we will make a note of a few configuration details:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将记录一些配置细节：
- en: OSPF is a link state routing protocol. Based on the types of Network and Area,
    it will have a unique Link State table. Hence, we are seeing the same in the output.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSPF是一种链路状态路由协议。根据网络和区域的类型，它将有一个唯一的链路状态表。因此，我们在输出中看到了相同的内容。
- en: 'In our example, we have two Areas:'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们有两个区域：
- en: Link ID - This is the OSPF router ID for L1 and type L2\. However, for L3, an
    L5 type LSA, link ID is a network address.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链路ID - 这是L1的OSPF路由器ID，类型为L2。不过，对于L3，一个L5类型的LSA中，链路ID是一个网络地址。
- en: 'Types of link state for Area-10:'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域10的链路状态类型：
- en: Router link state
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器链路状态
- en: Network link state
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络链路状态
- en: Summary link state
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇总链路状态
- en: Opaque area link state
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不透明区域链路状态
- en: Area 0 (backbone area)
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域0（骨干区域）
- en: Area 10 (normal area we created)
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域10（我们创建的普通区域）
- en: 'Here''s another brain twisting question: Why do we have Network Link State
    LSA for Area 10? All we have done is connect a DLR OSPF router to NSX Edge through
    a transit network, which is a point-to-point connection. Well, this is where I
    need more focus from everyone. Transit-Network is a logical switch, which is nothing
    but a vSphere PortGroup (L2 segment). This is the prime reason we have a network
    LSA in Area 10\. Routers are not connected as point-to-point; rather, they are
    connected to one logical switch and **Designated Router** (**DR**) will send the
    type 2 LSA. In summary LSA will help the router reach the prefix from one area
    to another area. Opaque LSA is used in practical applications on a routing platform
    (MPLS traffic engineering).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个令人费解的问题：为什么我们在区域10中有网络链路状态LSA？我们所做的只是将DLR OSPF路由器通过传输网络连接到NSX Edge，而传输网络是一个点对点连接。好吧，这就是我需要大家更加集中注意力的地方。传输网络是一个逻辑交换机，它实际上只是一个vSphere端口组（L2段）。这是我们在区域10中有网络LSA的主要原因。路由器不是点对点连接的；它们是连接到一个逻辑交换机，**指定路由器**（**DR**）会发送类型2
    LSA。汇总LSA将帮助路由器从一个区域到另一个区域到达前缀。不透明LSA在路由平台（MPLS流量工程）中的实际应用中使用。
- en: 'Enough talk-the whole purpose of explaining this picture is that ideally, when
    the OSPF routing tables are populated, we end up by doing a simple ping test and
    we never think about how they actually work. There is lot more we can discuss
    about OSPF; however, it is really out of the scope of this book. Let''s take a
    look at the following diagram, which showcases the entire topology with the OSPF
    routing table:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 够了，解释这张图的目的就是，理想情况下，当OSPF路由表被填充后，我们通过做一个简单的ping测试来验证，之后我们从不考虑它们实际是如何工作的。关于OSPF，我们还有很多可以讨论的内容；不过，这些内容超出了本书的范围。让我们看一下以下图示，它展示了整个拓扑以及OSPF路由表：
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_032.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![在分布式逻辑路由器上配置OSPF路由](img/image_05_032.jpg)'
- en: With dynamic routing capability between DLR and NSX Edge, our three-tier applications
    should be able to reach the `192.168.110.10` machine and vice versa. Let's log
    in to the application server and confirm if we can reach `192.168.110.10`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在DLR和NSX Edge之间具有动态路由能力，我们的三层应用应该能够访问`192.168.110.10`机器，反之亦然。让我们登录到应用服务器，确认是否能够访问`192.168.110.10`。
- en: 'The following screenshot shows successful connectivity from the application
    server (172.16.20.11) to external network 192.168.110.0/24, which was not possible
    earlier:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了从应用服务器（172.16.20.11）到外部网络192.168.110.0/24的连接成功，这在之前是无法实现的：
- en: '![Configuring OSPF routing on Distributed Logical Router](img/image_05_033.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![在分布式逻辑路由器上配置OSPF路由](img/image_05_033.jpg)'
- en: 'That concludes our routing module. I know it is hard to recollect all we did
    so far to establish a virtualized routing environment. I would summarize it in
    six steps to make it easy to remember:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Created three logical switches.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployed a distributed logical router from the NSX Manager.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NSX Controller pushed the DLR configuration to underlying ESXi host.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployed an NSX Edge device and configuring OSPF on Edge and DLR.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All learned routes get pushed to NSX Controller.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NSX Controller updates the ESXi host DLR routing table.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now move on to the next sections.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: NSX routing design decisions
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assume that we have already decided what routing protocol is required for a
    particular use case. Design factors are key in ensuring that they work flawlessly:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: If we are a service provider, and multi tenancy is required for DLR control
    VM and **Edge Services Gateway** (**ESG**), we should deploy a separate instance,
    which would ease the management. We can also achieve true isolation between the
    tenants.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Area Border Router** (**ABR**) should be a physical router.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we are not leveraging the **High Availability** (**HA**) feature for ESG
    and DLR, ensure that tenant ESG and DLR VM are not residing on the same ESXi host.
    However, recommended practice would be to leverage HA for DLR control VM and ESG
    with vSphere HA.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is a shortage of interfaces in ESG, we should leverage the trunk interface
    so that multiple DLR can be connected to the same ESG.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DLR to DLR peering is not possible.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPsec** with dynamic routing is not supported.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use route summarization wherever we can.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DLR control VM doesn't support ABR configuration; however, it supports normal
    and NSSA areas.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the type of physical network and vendors that we choose, there are
    a lot of other design parameters, which we need to follow explicitly to ensure
    we are getting the best of both worlds. I would highly recommend reading vendor
    design guides before implementing NSX. I don't expect everyone to do a Google
    search. In the [Chapter 8](ch08.html "Chapter 8.  NSX Troubleshooting"), *NSX
    Troubleshooting*, I will provide all external guide links, to which we should
    refer before deploying an NSX setup.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: NSX Edge NAT
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How do we merge two intranets with duplicate addresses and ensure that the
    host assigned with a private IP can communicate with other hosts through the Internet?
    There is only one solution for it: **Network Address Translation** (**NAT**).'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'NSX Edge NAT supports two types of NAT services:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '**Source NAT (SNAT)**: Translates the internal private IP address to a public
    address for outbound access'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination NAT (DNAT)**: Translates the public IP address to an internal
    private address for inbound access'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Okay, let''s have a look at how this whole feature works. In the following
    figure, one of our application servers is in need of communicating with the public
    network. We can see the application server **172.16.20.1** sending an outbound
    packet to NSX Edge. Based on the NAT entries, which the NSX administrator would
    have configured earlier, Edge will perform a NAT table lookup. Since we have a
    **Source NAT**, which is configured for **172.16.20.1**, it will translate the
    IP to **170.168.2.1**, which is the public IP. This is a very simple example of
    1:1 NAT configuration for outbound access. But remember, Edge also has a firewall
    feature, and by default, it will block all traffic. So, doing a NAT alone won''t
    do the trick; we need to allow respective source and destination IP in the firewall
    table:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX Edge NAT](img/image_05_034.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go ahead and check how a NAT table configuration looks in NSX Edge:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Log into VMware vSphere web client and switch to the **Networking & Security**
    solution page.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **NSX Edge management** page, double-click the NSX Edge instance that
    handles the NAT. The following screenshot shows the NSX Edge NAT configuration:![NSX
    Edge NAT](img/image_05_035.jpg)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since we don''t have any rule created, as of now, nothing is populated there.
    Let''s explore DNAT and SNAT options further:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the add icon, select **Add DNAT Rule**, and configure the following settings
    based on the business use case:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '**Applied On**: The interface on which to apply the destination NAT rule, for
    example, external link. The drop-down menu will display the names of all 10 interfaces
    of this NSX Edge instance.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orginal IP**: The original (public) IP address in one of the following formats:'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address 172.168.2.1
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address range172.168.2.1-172.168.2.3
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP address/Subnet 172.168.2.1/24
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol**: The protocols that are used by the application (we could simply
    update as **Any)**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Original Port/Range**: The original port, a range of ports, or ****Any****
     port'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translated IP/Range**: Since this is a DNAT rule, the translated IP would
    be the internal/private IP range'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translated Port/Range**: The translated port or range of ports in the internal/private
    network'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If all the preceding parameters are configured properly, with firewall rules
    enabled for the same configuration, our internal machines would be accessible
    from the public network.In our example we have a done a 1:1 DNAT configuration.
    This is shown in the following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '![NSX Edge NAT](img/39.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: The NAT is an integral part of NSX load balancer functionality, and we need
    that basic understanding of how NAT works to understand the feature. Last but
    not least, we are living in a world where nothing is perfect; when something goes
    wrong, we need to start troubleshooting it. One of the common problems I have
    seen is not an issue of wrong NAT configuration, it is the intermediate culprit,
    firewall, which blocks all the traffic, and one would simply wonder, *What the
    heck am I missing in this setup?* Okay, enough talk. Let's move on and discuss
    NSX Edge logical load balancer.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: NSX Edge logical load balancer
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about load balancers, traditional load balancers are typically
    placed in the aggregation layer. Load balancing can be implemented with hardware,
    software, or a combination of both. One of the first methods of load balancing
    was round-robin DNS. In the current cloud era, we have applications running in
    multitenant environments and the number of load balancer requirements also gets
    increased. In a nutshell, if every application tier needs a load balancer, it
    is extremely difficult to get an optimal performance. This is where virtual load
    balancers are really making a difference, compared with physical load balancers.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: The NSX Edge load balancer enables network traffic to follow multiple paths
    to a specific destination. A load balancer distributes incoming service requests
    evenly among multiple servers (virtual machines). Load balancing thus helps to
    achieve optimal resource use, maximizing throughput, minimizing response time,
    and avoiding overload. NSX Edge provides load balancing up to Layer 7\. Let's
    get familiarized with some load balancer terms and terminology that is very common
    in all load balancers.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Server pools
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Groups of machines that are running similar applications get added to this pool.
    This is one of the key design decisions to plan while deploying a load balancer.
    Firstly, identify the set of virtual machines that are required to be in the server
    pool.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Virtual server
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the address from which server pool machines will receive sessions from
    the load balancer. Each virtual server will have a unique **Virtual IP** (**vIP**).
    The vIP is an IP address and also contains the service port number.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Application profile
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application profile is where we would configure what type of access protocol
    (TCP, HTTP, and HTTPS) is used and what type of load balancing algorithm we should
    use. NSX load balancer supports a wide range of load balancing algorithms.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'NSX load balancer operates in two modes:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '**Proxy mode**: The one-arm load balancer mode is also called proxy mode. The
    NSX Edge gateway uses one interface to advertise the vIP address and to connect
    to the web servers.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline mode**: Inline load balancer mode is also called transparent mode.
    The NSX Edge gateway uses the following interfaces:'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to advertise the vIP address
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to connect to the web servers
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web servers must point to the NSX Edge gateway as the default gateway
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Design considerations while load balancing
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several best practices should be followed when setting up an NSX load balancer.
    Let''s read the following points carefully before doing a lab exercise:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Based on the number of server pools, load balancer numbers will also get increased.
    However, that way, since each tenant has its own load balancer, management and
    configuration changes will have no impact on other tenants' load balancers.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy load balancers in HA mode for High Availability.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you don't deploy a load balancer on the same machine where the underlying
    load-balanced machines are running. Follow the best practice of deploying on a
    different ESXi host or in a separate management edge cluster.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the right load balancing protocol based on application characteristics.
    For example, round robin, least connected, hashing, and least loaded are some
    of the common algorithms.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One common question is, *do we need an end-to-end SSL connection, or do we need
    to terminate or offload SSL traffic?*
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch out for bandwidth and number of **connections per second** (**CPS**) that
    the load balancer is capable of.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rule of thumb is to test the load balancer functionality before hitting production,
    especially if this is the first time we are load balancing an application request
    in an NSX world.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we need to decide whether we are perfectly okay with having too many
    eggs in one basket. How does that relate to an NSX load balancer? Well, remember
    that nothing is stopping us configuring routing/NAT/VPN/DHCP and other Edge/DLR
    services features on the same Edge/DLR. So, carefully plan what type of services
    are required to run on Edge/DLR.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's time to recollect all that we have discussed so far in relation to NSX
    load balancers, and now we have an objective to perform an SSL load balancing
    against our web servers. However, in this lab, I'm not leveraging SSL certificates
    for web servers; hence, we will stick with client to load balancer SSL configuration.
    So let's get started. First and foremost, we don't have any SSL certificate generated
    so far. In this example, we will use a self-signed certificate and will leverage
    the same.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: Generating a certificate
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will generate a certificate request and instruct the VMware NSX Edge instance
    to create a self-signed certificate from that request:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: In the left-hand navigation pane, select **NSX Edges**.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the edge list, double-click the **Perimeter Gateway** entry to manage that
    object.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Manage** tab and click **Settings**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the settings category panel, select **Certificates**.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Generate CSR** from the **Actions** drop-down menu to open the **Generate
    CSR** dialog box, and perform the following actions:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Webload** in the **Common Name** text box.
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter **Loadbalancer** in the **Organization Name** text box.
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that **RSA** is the selected **Message Algorithm**.
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that **2048** is the selected **Key Size**.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value and click **OK**.
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the certificate list, select the newly generated signing request and select
    **Self Sign Certificate** from the **Actions** drop-down menu.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted, enter **365** in the **Number of days** text box, and click **OK**.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the **Generate CSR** screen where we need
    to update all the steps that we have discussed so far:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a certificate](img/image_05_037.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have a certificate created, we will go ahead and self sign the
    certificate and use it in our load balancer configuration. The following screenshot
    depicts the self signed certificate step:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a certificate](img/image_05_038.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
- en: Setting up a load balancer
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will perform the following steps in the same order to set up and test a load
    balancer.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Set global option for the load balancer
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an application profile
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a service monitor to define health check performance
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a server pool
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the load balancer
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting global options
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The procedure for setting global options for the load balancer is as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Manage** and then click the **Load Balancer** tab.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit**.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the check boxes next to the options you want to enable:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable Load balancer**: Allows the NSX Edge load balancer to distribute traffic
    to internal servers for load balancing'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Service Insertion**: Allows the load balancer to work with third-party
    vendor appliances.'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acceleration Enabled**: When enabled, the NSX Edge load balancer uses the
    faster L4 LB engine rather than the L7 LB engine.'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: The NSX Edge load balancer collects traffic logs. You can also
    choose the log level.'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **OK**.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an application profile
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since we have enabled the load balancer service, in this step, we will configure
    for HTTPS traffic:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Manage** tab, click **Load Balancer**.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Global Configuration**.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Edit**, on the right-hand side of the global configuration page.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Edit load balancer global configuration** page, select the **Enable
    Load Balancer** checkbox and click **OK**. Select the certificate that we created
    earlier and leave all other fields at the default value.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Insert X-Forwarded-For HTTP header** helps you identify the IP address
    of a client when you use an HTTP load balancer.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Application Profiles**.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Profile**
    dialog box, and perform the following actions:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Web-Server** in the **Name** text box.
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **HTTPS**.
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other fields at the default value and click **OK**.
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Application Profile Configuration** for
    the load balancer:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an application profile](img/image_05_039.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
- en: Creating a service monitor
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a service monitor to define health check parameters for a particular
    type of network traffic. When you associate a service monitor with a pool, the
    pool members are monitored according to the service monitor parameters. The following
    screenshot shows the default service monitoring pools:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a service monitor](img/image_05_040.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
- en: Creating a server pool
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we will create a round-robin server pool that contains the two
    web server virtual machines as members:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Pool** dialog
    box, and perform the following actions:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Pools**.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter ****Web-Pool**** in the **Name** text box.
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Algorithm** selection is ****ROUND-ROBIN**** .
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the monitoring selection, we can either select ****NONE**** , one of the
    default monitoring pools, or something that we manually created.
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Below **Members**, click the green plus sign to open the **New Member** dialog
    box, and add the first server.
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Member** dialog box.
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Members**, click the green plus sign to open the **New Member** dialog
    box, and add a second server.
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Member** dialog box.
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to close the **New Pool** dialog box.
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Name field enter **Web -01a**.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the IP Address field enter **172.16.10.11**.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Port** field enter **443** in the text box.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the same steps and add our second web server, `172.16.20.11`. The following
    screenshot shows the pool settings that we configured:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating a server pool](img/image_05_041.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
- en: Creating a virtual server
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The virtual server is positioned on the external network attached to the uplink
    interface of the perimeter:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: In the load balancer category panel, select **Virtual Servers**.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Above the top panel, click the green plus sign to open the **New Virtual Server**
    dialog box, and perform the following actions:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Enabled** check box is selected.
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **VIP** in the **Name** text box.
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **192.168.100.9** in the **IP Address** text box.
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **HTTPS** from the **Protocol** drop-down menu.
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Port** setting has changed to 443.
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Web-Pool** from the **Default Pool** drop-down menu.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the **Application Profile** selection is **Web-Server**.
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave all other settings at the default value and click **OK**
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the virtual server configuration for the web-pool
    that we are trying to load balance:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_042.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
- en: We are not leveraging an **application** rule in the load balancing setup. With
    application rules, we have the flexibility to specify HTTP/HTTPS redirection;
    regardless of the URL, the traffic will always redirect based on the rules. All
    we need to do now for testing is just go ahead and enter the VIP `192.168.100.9`
    in the browser, and we should see the traffic getting redirected to one of the
    web servers.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the load balancing done against web-sv-02a:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_043.jpg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
- en: 'I personally hate learning things from looking at a GUI. CLI is my best friend,
    and I have captured a debug output of our load balancing scenario with the lab
    topology to ensure that the concepts are crystal clear for everyone:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a virtual server](img/image_05_044.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
- en: That concludes the topic of load balancing, and we all know that we certainly
    need a working NSX Edge instance to load balance any traffic.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Network
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NSX Edge supports several types of VPN service, such as SSL-VPN, L2-VPN, and
    IPsec VPN. They are as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '**SSL VPN-plus**: The prime reason someone would go for an SSL VPN connection
    would be for users (roaming profiles) who need to access private networks that
    are behind a perimeter device.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPsec VPN**: NSX supports site to site VPN between the NSX Edge gateway and
    most of the third-party IPsec VPN devices.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**L2 VPN**: In the current cloud era, we have a lot of use cases where an on-premises
    network needs an extension all the way to another site, which can be a private
    cloud or any other public cloud service, such as vCloud Air, AWS, and Azure. Please
    don''t confuse this with a direct connect solution. Virtual machines in L2 VPN
    will be on the same subnet, irrespective of being moved between the sites.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss these topics a bit more in depth to learn about their features
    and where NSX would fit, and finally, we will focus on a few design decisions.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: SSL VPN
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The NSX SSL VPN feature provides remote users a secure connection to a private
    network, which is residing behind an NSX Edge gateway. We can either have a web-based
    connection, or we need to install an SSL client and access the private network.
    Behind the scenes, traffic will be tunneled and securely directed to private networks.
    The following steps would be done in the same order to configure an SSL VPN connection:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Configure SSL VPN server settings.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an IP pool.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a private network.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add authentication.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an installation package.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a user.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify all the configurations and enable SSL VPN.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure depicts three sites (A, B, C), which are in need of connecting
    to other sites through SSL-VPN, IPSEC, and L2 VPN setups:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '![SSL VPN](img/52.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
- en: We will start with SITE-A's SSL VPN configuration.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Configure SSL VPN server settings
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned previously, we need to follow Steps 1 to 7 to configure SSL-VPN
    settings:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: In the **SSL VPN-Plus** tab, select **Server Settings** from the left-hand panel.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Change**.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **IPv4 Address** or **IPv6 Address**.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the port number if required. This port number is required to configure
    the installation package.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the encryption method.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Server certificate** table, select the server certificate that you
    want to add. This is an optional step; adding to that, let's not get embarrassed
    that we are seeing a web-load SSL certificate. This is the same certificate that
    we created earlier during the SSL-load balancer topic.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the SSL VPN server settings:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '![Configure SSL VPN server settings](img/image_05_046.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
- en: Adding ID pool
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The whole purpose of adding this pool is to assign a **Virtual IP** (**VIP**)
    from the pool of IP addresses to the remote user. The following screenshot depicts
    an IP pool page:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ID pool](img/image_05_047.jpg)'
  id: totrans-440
  prefs: []
  type: TYPE_IMG
- en: In our example, we are taking the range as `192.168.170.2` to `192.168.170.254`
    and the gateway as `192.168.170.1`. DNS/WINS settings are optional; hence, we
    are skipping that configuration.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Private network
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The private network is the network that we want our remote users to connect
    to and access. The following screenshot depicts the private network configuration.
    We are taking 192.168.1.0/24 as our network for SSL VPN access:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '![Private network](img/image_05_048.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
- en: 'Please take a look at the following steps:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '**Add authentication**: External authentication servers like AD, LDAP, Radius,
    or RSA are supported, or we can simply create a local user and use the same local
    user name and password to connect to the private network.'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add an installation package**: We can create an installation package of the
    SSL-VPN client for remote users based on the type of operating system from which
    we need to access the private network. There are several logon settings we can
    select during the package selection.'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add a user**: Since we have already added the authentication method, we can
    go ahead and add those users for accessing the private network.'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable SSL VPN service**: After verifying the entire configuration, we need
    to enable the SSL VPN service by switching to the **SSL VPN-Plus** tab. Select
    **Dashboard** from the left-hand panel. The following screenshot shows a **Service
    enabled successfully** message:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Private network](img/image_05_049.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
- en: Now that we have successfully enabled an SSL-service, remote user (192.168.7.1)
    can initiate an SSL-VPN connection to the private network (192.168.1.0/24) after
    authentication, based on the type of authentication we selected earlier. There
    are several ways in which we can check the SSL session. The best and easiest way
    would be from the client machine itself (192.168.7.1), by doing a **route lookup** on
    the local operating system; we would see a new route added all the way to the
    private network. With that, we are moving on to IPsec VPN for **Site-B**.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: IPsec VPN
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NSX Edge Gateway supports Site-Site VPN between NSX Edge and remote sites.
    In a nutshell, the original packet will be authenticated and encrypted, and it
    will be encapsulated with an **Encapsulation Security Payload** (**ESP**) header,
    trailer, and authentication data. The following screenshot depicts initial IPsec
    VPN configuration:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '![IPsec VPN](img/image_05_050.jpg)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
- en: Since we already have a topology shared earlier, the requirement is to establish
    an IPsec tunnel between Site-B and the remote site (192.168.5.0/24). Let's get
    started.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the procedure for configuring IPsec:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Monitor** tab and then click the **VPN** tab.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **IPSec VPN**.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the add icon.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a name for the IPsec VPN.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the NSX Edge instance in **Local Id**. This will be the
    **Peer Id** on the remote site.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the local endpoint.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-466
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are adding an IP-to-IP tunnel using a pre-shared key, the local ID and
    local endpoint IP can be the same.
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type the subnets to share between the sites in CIDR format. Use a comma separator
    to type multiple subnets.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the **Peer Id** to uniquely identify the peer site. For peers using certificate
    authentication, this ID must be the common name in the peer's certificate. For
    PSK peers, this ID can be any string. VMware recommends that you use the public
    IP address of the VPN or a FQDN for the VPN service as the peer ID.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the IP address of the peer site in **Peer Endpoint**. If you leave this
    blank, NSX Edge waits for the peer device to request a connection.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the internal IP address of the peer subnet in CIDR format. Use a comma
    separator to type multiple subnets.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Encryption Algorithm**.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pre-Shared Key (PSK)**: This indicates that the secret key shared between
    NSX Edge and the peer site is to be used for authentication. The secret key can
    be a string with a maximum length of 128 bytes. NSX IPsec VPN supports symmetric
    keys. **Certificate**: This indicates that the certificate defined at the global
    level is to be used for authentication.'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type in the shared key if anonymous sites are to connect to the VPN service.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Display Shared Key** to display the key on the peer site.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Diffie-Hellman (DH) Group**, select the cryptography scheme that will allow
    the peer site and the NSX Edge to establish a shared secret over an insecure communications
    channel.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the default MTU if required.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select whether to enable or disable the **Perfect Forward Secrecy** (**PFS**)
    threshold. In IPsec negotiations, PFS ensures that each new cryptographic key
    is unrelated to any previous key.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK**.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable VPN.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As per our topology, we have updated our IPsec configuration in the Edge. Once
    we configure the partner device, the IPsec tunnel will get established:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![IPsec VPN](img/image_05_051.jpg)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
- en: 'The IKE phase 1 parameters used by the NSX Edge include:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Main mode
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AES / AES 256 preferred / TripleDES /
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-1
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MODP (DH) group 2 (MODP1024 bits)
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-shared secret [Configurable]
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA lifetime of 28800 seconds (eight hours) with no kilobytes rekeying
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISAKMP aggressive mode disabled
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The IKE phase 2 parameters supported by NSX Edge include:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: AES / AES 256 Preferred / TripleDES / [Will match the Phase 1 setting]
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-1
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESP tunnel mode
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MODP (DH) group 2 (MODP1024 bits)
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perfect forwarding secrecy for rekeying
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA lifetime of 3600 seconds (one hour) with no kilobytes rekeying
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectors for all IP protocols and all ports between the two networks using
    IPv4 subnets
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L2 VPN
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: L2 VPN allows us to configure a tunnel between two sites. As I said earlier,
    virtual machines will be on the same subnet irrespective of where they are moving.
    As per our topology, we need to establish a L2-VPN between Site-C and remote site
    192.168.5.0/24\. In our example, we are taking Site-C as the L2 VPN server, and
    the remote site is the L2 VPN client. The L2 VPN server is the source NSX Edge
    server to which destination L2 VPN Client is getting connected.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The internal IP address assigned to the L2 VPN server and client must be different.
    They can be on the same subnet.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the procedure for L2 VPN server:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the vSphere web client.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Networking & Security** and then click **NSX Edges**.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click an NSX Edge.
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Manage** tab and then click the **VPN** tab.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **L2 VPN**, select **Server**, and click **Change**.
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **Server Details**.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Listener IP**, type the primary or secondary IP address of an external
    interface of the NSX Edge. In our example, the IP would be `192.168.9.1`.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default port for the L2 VPN service is **443**. Edit this if required.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the encryption method.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the internal interface of the NSX Edge that is being stretched .This
    interface must be connected to a DV port group or logical switch.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a description.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **User Details** and type the username and password.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In server certificates, do one of the following:'
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use System Generated Certificate** to use a self signed certificate
    for authentication.
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the signed certificate to be used for authentication.
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **OK**:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Prerequisites](img/B03244_05_52-1024x492.jpg)'
  id: totrans-521
  prefs: []
  type: TYPE_IMG
- en: '**Listener IP**: **192.168.9.1**'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '**Listener Port**: **443**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '**Encryption Algorithm**: **AES256-SHA**'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal Interface**: **Internal Interface-A**'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '**User Id**: **vpn-user**'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '**Server Certificate**: **TEST.LOCAL**'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: To configure the L2-VPN client, all we need to update is the server address
    to which the client is supposed to be connected, and the internal interface that
    needs to be stretched. Apart from these details, the rest of the configuration
    is the same, and the L2 tunnel will be up and running after that
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '**L2VPN Service Status**: **Enabled**'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Address**: **192.168.9.1**'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Port**: **443**'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Interface**: **Internal Interface-B**'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Id**: **vpn-user**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design decisions while configuring VPN
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a few key points we should be aware of while configuring
    the VPN:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: Route-based VPN is not supported, NSX Edge supports only policy-based VPN
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can have a maximum of 64 tunnels across a maximum of 10 sites
  id: totrans-537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NAT-traversal is supported in VPN configuration
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overlapping of subnets is not allowed
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route summarization is supported for both peer and local subnets
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic routing through IPsec tunnels is not supported
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NSX Edge supports pre-shared key and certificate-based authentication.
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few exceptions with special characters in a pre-shared key that
    I have seen with a few third-party vendors. Hence, watch out for special characters.
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes VPN key design decisions, and it is always advisable not to deviate
    and start configuring VPN from what the product doesn't support.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: DHCP relay
  id: totrans-545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dynamic Host Configuration Protocol automatically assigns an IP address. This
    is something we all know. But there is certainly a drawback with that model: the
    DHCP server and client should be on the same broadcast domain. In a nutshell,
    the DHCP relay agent relays DHCP messages between client and server on different
    networks. This is a new feature, which was added in **NSX 6.1** and can be applied
    on **DLR or NSX Edge**. In earlier versions of NSX and VCNS, we were limited to
    configuring traditional DHCP servers. It is important to know that we cannot have
    overlapping subnets. But what if we need the same IP every time a virtual machine
    boots? NSX DHCP static binding would do the trick in that case. We can simply
    bind the IP with the MAC of a virtual machine.'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-547
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter with an introduction to NSX Edge, and later, we covered
    routing protocols and NSX Edge services, use cases, and a few design considerations.
    This was certainly a lengthy topic, and the whole purpose of explaining the topics
    with a few labs and topologies was to make it as informative as possible. I strongly
    believe that in the near future, we will see lot of new features getting added
    to NSX Edge services. For example, NSX Edge being a Perimeter Device, we would
    be more than happy to see WAN acceleration features or Policy Based Routing.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: With the skills that we have gained so far, we are good to start with our next
    chapter, on NSX security features and design decisions. We will have a close look
    at NSX security policies, groups, and a few use cases.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
