- en: Server Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that computers, no matter how sophisticated or expensive, are still
    just machines, although electronic. Electronic devices have very few moving parts.
    In fact, outside of the read/write heads in a secondary storage device, the open
    and close drawer on optical storage devices, and maybe a couple of more moveable
    items, the overall design of computers doesn't include many moving parts. We could
    say that the electrical signals that move about the computer are *moving parts*,
    but bits and their transmission media don't really cause many failure issues and
    server maintenance is all about preventing failure and resolving problems as they
    arise.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers the duties and activities of the system administrator relating
    to the maintenance of a network server. This includes the definition and execution
    of a change and patch application and management program, monitoring the performance
    and health of a server's outward-facing components, the process used to troubleshoot
    and resolve issues on a network server, and the application of fault tolerance
    and high-availability technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Change and patch management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fault tolerance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change and patch management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the context of system and server administration, change management programs,
    commonly known as change control programs, have one purpose above all others—the
    assurance that the application of the appropriate and necessary patches, updates,
    and configuration changes follows a formalized controlled, coordinated, and consistent
    methodology. The two terms—**change management** and **change control**—commonly
    refer to service maintenance and software maintenance, respectively. However,
    for the Server+ exam, change management refers to server and hardware maintenance
    in general and OS maintenance in particular.
  prefs: []
  type: TYPE_NORMAL
- en: A formalized change management or control program is a written, distributed,
    reviewed, approved, and implemented document. Depending on the size of the organization,
    the people involved at different phases of the program include the IT staff, a
    change review board or committee, and possibly the stakeholders who the change
    impacts. Of course, in a smaller organization, the process typically involves
    only two or three IT people, due to the limited scope and effect of changes. In
    a larger organization, the number of participants grows with the potential scope
    and effect of a change. In either case, the process structure directs the reviewing,
    testing, and application of any system change.
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of the change management program in a server management environment
    should include the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Deciding the proposed change is both needed or applicable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying the impact of the proposed change and who or what it will affect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the change in a non-production environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the results of the test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining approval to apply the change in the live environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying the change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmarking the post-change environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change control process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process that should be a part of a change management and control program
    has six phases. These phases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Purpose**: Understand what the vendor says about what the proposed change
    is to correct, patch, fix, or improve and decide whether this is a change that
    is necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scope**: Any change has primary and secondary effects on a data center''s
    current operations. Therefore, knowing the full impact of a proposed change is
    essential before proceeding. This knowledge should include who, as well as what.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Approval**: Someone other than the system administrator should review the
    analysis of the preceding steps and grant approval to proceed or identify areas
    for further analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Test proposed changes on a non-production system before implementing
    them on the live systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement**: If the results of the non-production environment testing are
    as expected, apply the change to the production environment. After applying the
    change, benchmark the system''s performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review**: For a set time period, check the results of the applied change
    to ensure its continued success.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Patch management** is a part of change management and control, but its importance
    is less for the operational system tasks and capabilities than it is for the security
    of the system. The majority of patches (vendor-supplied updates and fixes) address
    vulnerabilities identified in a software product, such as an OS or major application
    package. The application of patches to a system should generally follow the approaches
    discussed in the previous two sections. However, patch management does have a
    few requirements of its own:'
  prefs: []
  type: TYPE_NORMAL
- en: Patch management should be a priority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain an accurate inventory of IT assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop and apply a thorough testing process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign responsibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document the process, actions, and results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In today's environment of malware, hackers, worms, Trojans, and other evil-doers,
    the time frame between the identification of a vulnerability (a weakness or flaw
    in a system that a hacker could exploit) and the issuance of a patch to close
    it, may be only a few hours. In system environments that must exhibit **high availability**
    (**HA**), the application of a patch could cause the system to be unavailable
    for an undetermined amount of time. The system administrator must analyze a patch
    for its appropriateness to the system and then decide on the best course for its
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: In larger, distributed data centers with remote locations managed from a central
    site, patch management (and change management for that matter) is a bit more complicated.
    Because of this, many use software tools, such as Microsoft's **Security Configuration
    and Analysis** (**SCA**) tool, **Windows Server Update Services** (**WSUS**),
    or **System Center Configuration Manager** (**SCCM**). Third-party patch management
    systems are available as either on-premise or cloud-based systems, such as SolarWinds
    Patch Manager (on-premise), ManageEngine Patch Manager Plus, or NinjaRMM (cloud-based).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the patch management display of the NinjaRMM
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27390fea-0e58-483d-920e-dd200d0c98e4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A patch management scheduling display. Image courtesy of NinjaRMM
  prefs: []
  type: TYPE_NORMAL
- en: OS updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to knowing if the OS is up-to-date and free of any known errors
    or bugs, applying fixes, patches, and updates is key to the security of the server
    and, most likely, its network. OS updates correct reported errors in the code
    and close vulnerabilities before or because of exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Most OS, including Windows, macOS, and many of the Linux distributions, include
    an automatic update feature. However, the update policy of the organization should
    direct whether this feature is enabled or disabled. Disabling automatic updates
    doesn't eliminate the administrator's ability to apply the update; it just won't
    happen automatically. Some OS updates can conflict with corrections or instructions
    inserted as workarounds for a flaw the patch is correcting. Prior to applying
    an update or patch, a thorough analysis of its effects and before and after testing
    should be a part of any change management procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable or disable the automatic update features in Windows, macOS, and Linux ,
    follow these guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Server**: On an **Active Directory** (**AD**) system, control of
    the automatic update function may be at the group level. The WSUS and the Windows
    Update and Maintenance Scheduler settings in Group Policy set the parameters for
    when, what, and how OS updates occur. Use these settings to disable automatic
    updates as well. In addition to OS updates, WSUS also updates Microsoft applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows 7 and 8**: The feature used to enable and disable automatic updates
    on a Windows 7 or earlier version is on the Control Panel under the System and
    Security header and titled Windows Update. This feature provides three options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn automatic updating on and off: If turned off, manual update is available
    through the Windows Update option on the Start Menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for updates: This searches for unapplied updates that are available for
    the Windows OS, Microsoft Office, and other Microsoft services for manual application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View installed updates: This lists the installed updates of the OS, including
    their coverage and when posted.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows 10**: Control of automatic updates is enabled or disabled through
    the Settings | Windows Update functions (see the following screenshot):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3eb40553-2d27-4e5e-8097-e00f0e63f58a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Windows 10: Windows Update page'
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS**: Control of automatic or manual OS updates is effected through a
    page in the Apple Store. As shown in the following screenshot, there are three
    levels of control—automatically checking for updates; downloading and possibly
    installing the update; and downloading and installing previously purchased software
    installed on another macOS:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0cf47982-e94a-4d0f-90ea-ff17333c0ad9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Apple macOS automatic update configuration
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: Each Linux distribution has an automatic update utility. For example,
    Ubuntu and Debian Linux releases have the *unattended-upgrades* utility that downloads
    and applies security updates and system patches. Another Linux utility for automatic
    updates is the `yum-cron` command and parameters in Red Hat Enterprise Linux and
    associated distributions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device driver updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a Windows system, updates to device drivers can also be automated or turned
    off, whatever the case may be.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set automatic device driver updates on (or off), apply the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the  `gpedit.msc`  utility to open the Group Policy Editor (see the following
    screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate through Computer Configuration | Administrative Templates | System
    | Device Installation (and Device Installation Restrictions, if you are turning
    off this setting).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Setting window, select the policy settings you wish to activate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57be7322-7204-469e-a2c0-49f4cc12a290.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use the Group Policy Editor to configure automatic device driver update settings
  prefs: []
  type: TYPE_NORMAL
- en: Firmware updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many system administrators follow the, *if it isn't broke, don't fix it*, approach
    to firmware updates, and only consider updates that are improving or adding security
    functions. However, there are reasons to upgrade the firmware, even when security
    isn't the issue. For example, when you add a newer hardware component to a relatively
    older computer, the computer most likely needs a BIOS/UEFI update to enable a
    compatible interface to the component. Consider firmware updates in the same way
    as an OS or application update. A firmware update may not affect a particular
    server or network and may not be necessary. It's also important to remember that
    a firmware update intended to fix a bug may have bugs of its own.
  prefs: []
  type: TYPE_NORMAL
- en: It's also a good practice to update the firmware of a computer when building
    it up as a server, or when the manufacturer of the computer or motherboard says
    that you should update the firmware. In either case, how you go about updating
    the firmware varies among manufacturers of motherboards and computers. Check the
    manufacturer's website for the process and application instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In networks that require high availability, network and system administrators
    must rely on a variety of monitoring, error notification, and troubleshooting
    guides to detect and alert them when problems occur. On high-availability systems,
    downtime is not an option. All support and maintenance activities focus on ensuring
    uptime and availability. In the following sections, we look at some of the tools
    available to assist administrators in achieving these goals.
  prefs: []
  type: TYPE_NORMAL
- en: Server monitoring systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Server monitors provide system administrators with automated reporting, scheduled
    device checking, and warnings that a device or system may be nearing or has reached
    a preset threshold or ceiling setting and requires preemptive troubleshooting.
    The majority of server monitoring systems include checks and measurements and
    reporting, if necessary, in relation to the major systems, subsystems, and components
    of a network server, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU usage**: High CPU utilization can impact response times and productivity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hard disk space**: Low disk space can lead to slower performance, missing
    updates, high fragmentation, and slow indexed searches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disk input/output operations per second (IOPS)**: Disk IOPS is a benchmark
    measurement that indicates the operating efficiency of a secondary storage device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAID health**: RAID systems can have a variety of issues, such as controller
    failings, errors in partitioning, and, of course, one or more physical disk drive
    failures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM utilization**: High RAM utilization can cause slower runtimes, throughput,
    and perhaps system or application crashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware status**: A poorly performing hardware component can slow or halt
    a network server. Proactively checking hardware health and processing capacity
    may avoid system downtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System temperatures**: Several components in a server (or network node) are
    sensitive to high heat, including the microprocessor, which is why system temperatures
    need monitoring (see the following screenshot):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a57b2472-34d2-4c87-a0b5-7a06a76bb373.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of a hardware status monitor
  prefs: []
  type: TYPE_NORMAL
- en: '**Network utilization**: This metric is the ratio of the current traffic load
    on a network to the network medium''s maximum throughput to indicate how busy
    the network medium truly is at any given moment. The following screenshot shows
    an example of a dashboard display from a network utilization program:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3981aa5b-4a65-4cb2-ab69-235d4b5e9b93.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A screen capture of the Dashboard display of the ColaSoft Capsa software
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual machine performance**: An active virtual machine can have counters
    enabled to track its activity and performance levels, such as, input/output operations
    to a virtual disk, the amount of memory in use, and its network traffic volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light Emitting Diodes (LED) server status indicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer systems designed for use as a network server have one or more sets
    of LEDs on the motherboard, rear panel, or front panel, or some combination of
    these locations. The LEDs display color and/or blinking patterns to indicate the
    status of the system, which can range from *All is well* to *Power off now*. Server
    manufacturers differ on where the LEDs are located and what their combinations
    of colors and blinking means.
  prefs: []
  type: TYPE_NORMAL
- en: The following table shows an example of the LED server status indicators for
    an Intel server board.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Color** | **Display** | **Meaning** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| Green | Steady | System normal | None |'
  prefs: []
  type: TYPE_TB
- en: '| Green | Slow blink | System degraded | Memory error **Baseboard Management
    Controller** (**BMC**) detected error |'
  prefs: []
  type: TYPE_TB
- en: '| Amber | Slow blink | Non-fatal flaw | Memory error—error threshold exceeded
    |'
  prefs: []
  type: TYPE_TB
- en: '| Amber | Steady | Fatal | System failure—CPU configuration error |'
  prefs: []
  type: TYPE_TB
- en: '| None | N/A | System not ready | AC power is off |'
  prefs: []
  type: TYPE_TB
- en: Sampling of server board LED status indicator lights
  prefs: []
  type: TYPE_NORMAL
- en: Liquid Crystal Display (LCD) messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In place of or in addition to LED indicators, several server systems display
    server status information on a small LCD that typically has one line of text limited
    to between 25 and 65 characters. Should an issue occur during the POST or a subsequent
    configuration, a short message displays on the LCD screen, like the examples given
    in the following table. This display is often exclusive to the server display
    and not displayed on the administrator console. Some servers, such as the Dell
    PowerEdge Server R-and Tx20 series, color the background in the display to indicate
    the severity of the issue, similar to the illustration in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a50b796b-363b-407f-8573-0ab698c10806.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of a server LCD display
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of server LCD error codes and messages are shown in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Error code** | **Message** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `E1114` | Temp Ambient | Ambient system temperature is out of acceptable
    range |'
  prefs: []
  type: TYPE_TB
- en: '| `E1210` | CMOS Batt | CMOS battery is missing, or the voltage is out of acceptable
    range |'
  prefs: []
  type: TYPE_TB
- en: '| `E1410` | CPU # IERR | Microprocessor # is reporting an internal error |'
  prefs: []
  type: TYPE_TB
- en: '| `E1714` | Unknown Err | There has been an error, but BIOS is unable to determine
    its origin |'
  prefs: []
  type: TYPE_TB
- en: '| `E1810` | HDD ## Fault | HDD ## has experienced a fault |'
  prefs: []
  type: TYPE_TB
- en: '| `E2014` | CMOS Fail | CMOS RAM not functioning properly |'
  prefs: []
  type: TYPE_TB
- en: '| `E2019` | Parity Error | Main memory parity error |'
  prefs: []
  type: TYPE_TB
- en: '| `E201E` | POST Mem Test | BIOS POST memory test failure |'
  prefs: []
  type: TYPE_TB
- en: Examples of server LCD error codes and messages
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: https://www.dell.com/support/'
  prefs: []
  type: TYPE_NORMAL
- en: Beep codes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you power on a PC, a firmware utility, called the **power-on self-test**
    (**POST**), checks the internal hardware components included in the BIOS or UEFI
    configuration. The POST checks each of the components for its presence (connection),
    compatibility, and function (response). If all is well, the POST issues an all-clear
    signal and continues the start up procedure. The signal given is generally a single
    *beep* tone, but some systems may beep twice.
  prefs: []
  type: TYPE_NORMAL
- en: However, should the POST encounter a problem, meaning the PC fails the POST,
    one of two things may happen—a beep code pattern is emitted that indicates the
    nature of the problem detected, or there is a power-off without sounding a beep.
    Beep codes, also known as POST error codes, where used, provide a general indication
    of the component causing the POST fail. It could be a bad connection, a removed
    device, or, perhaps, a failed device. The purpose of the beep codes is to provide
    a starting point for troubleshooting the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Beep codes are a part of the BIOS/UEFI module stored in a ROM or NVRAM chip.
    Unfortunately, there is no standard, and each manufacturer can use a different
    beep code pattern scheme in its computers. Even different BIOS products of a single
    company may have completely different code meanings. As shown in the following
    table, the three manufacturers shown, while using the same beep code patterns,
    each assign a different issue or condition to their codes. A short tone or beep
    is a quick beep that is about one-tenth of a second in length. A long tone is
    about twice as long:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Failure****/issue** | **AMIBIOS (American Megatrends)** | **Award BIOS****(Phoenix
    Technologies)** | **IBM corporation** | **Dell computers** |'
  prefs: []
  type: TYPE_TB
- en: '| DRAM | 1 beep | Continuous tone | - | 2 shorts |'
  prefs: []
  type: TYPE_TB
- en: '| CPU | 5 beeps | Repeating low and high tones | 1 long, 1 short | 7 beeps
    |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard | 6 beeps | 1 short, 2 shorts, 2 shorts, 1 short | 3 longs | - |'
  prefs: []
  type: TYPE_TB
- en: '| CMOS | 10 beeps | 1 long, 4 shorts | 2 shorts | 1 short |'
  prefs: []
  type: TYPE_TB
- en: '| Display | 8 beeps | 1 long, 3 shorts | 1 long, 3 shorts | 6 shorts |'
  prefs: []
  type: TYPE_TB
- en: Each vendor may have completely different beep tones
  prefs: []
  type: TYPE_NORMAL
- en: Replace failed components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The components that make up the hardware of a network server are in two major
    groups, each with its own handling, installation procedures, and complexity. The
    following table shows the categories of several server components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer-Replaceable Units (CRUs)**: These are the components that a user/customer
    is able to remove and replace. CRUs fall into levels of difficulty, such as a
    CRU 1 being relatively simple to replace and a CRU 3 being more difficult. In
    some systems, a CRU N or CRU X indicates a component that a user should not attempt
    to replace. Examples of CRUs are monitors, keyboards, batteries, and all external
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field-Replaceable Units (FRUs)**: These are the components that only a qualified
    field service representative should remove and replace. Examples of FRUs include hard
    disk drives, motherboards, internal control units, fans, backplanes, and memory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Component** | **CRU/FRU** |'
  prefs: []
  type: TYPE_TB
- en: '| CMOS battery | FRU |'
  prefs: []
  type: TYPE_TB
- en: '| DIMMs | FRU |'
  prefs: []
  type: TYPE_TB
- en: '| HDDs | CRU |'
  prefs: []
  type: TYPE_TB
- en: '| Internal cables | CRU |'
  prefs: []
  type: TYPE_TB
- en: '| Memory card | FRU |'
  prefs: []
  type: TYPE_TB
- en: '| Microprocessor | FRU |'
  prefs: []
  type: TYPE_TB
- en: '| Power supply unit | CRU |'
  prefs: []
  type: TYPE_TB
- en: '| RAID controller | FRU |'
  prefs: []
  type: TYPE_TB
- en: '| SSDs | CRU |'
  prefs: []
  type: TYPE_TB
- en: Examples of CRU/FRU designations for server components
  prefs: []
  type: TYPE_NORMAL
- en: Preventive maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unfortunately, computers, and especially servers, aren''t *set ''em and forget
    ''em* devices. They require constant monitoring and administration. A very large
    part of these efforts is to organize a schedule of preventive maintenance activities,
    followed and recorded assiduously. They are necessary for just about every scheduling
    frequency: daily, weekly, monthly, quarterly, yearly, and perhaps between them.'
  prefs: []
  type: TYPE_NORMAL
- en: The primary purpose of preventive maintenance is to avoid device or component
    failure, which creates corrective or restorative maintenance. Just like taking
    a flu shot helps to prevent getting sick with the flu, a solid **preventive maintenance**
    (**PM**) program can prevent serious problems down the road. Of course, the PM
    program is typically different for every system, data center, and network, but
    there is a list of tasks that any PM program should include.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists a sampling of these actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Frequency** | **Task** |'
  prefs: []
  type: TYPE_TB
- en: '| Daily | Check server error and usage logs to identify potential problems
    |'
  prefs: []
  type: TYPE_TB
- en: '| Weekly |'
  prefs: []
  type: TYPE_TB
- en: Check disk space on servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean paper dust out of printers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for appropriate air flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that antivirus software is up to date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit system users to ensure adherence to virus policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that OS patches and critical fixes are up to date and installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check event log for errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check system resources, such as HDD, RAM, and CPU, for availability and performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Monthly |'
  prefs: []
  type: TYPE_TB
- en: Check batteries on laptops and mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor and collect data on trends for memory, CPU, and disk utilization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Quarterly |'
  prefs: []
  type: TYPE_TB
- en: Clean dust from cooling system and fans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean keyboards, mice, and other moving parts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Annually |'
  prefs: []
  type: TYPE_TB
- en: Test uninterruptible power supplies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check network wiring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review the effectiveness of the preventive maintenance program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: A sample server preventive maintenance schedule
  prefs: []
  type: TYPE_NORMAL
- en: Fault tolerance and high availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the terms used to describe server systems that are able to resist failures
    is *hardened*. While hardening is most associated with closing unused ports and
    other vulnerabilities, to achieve a truly hardened system usually requires the
    application of fault-tolerance techniques.
  prefs: []
  type: TYPE_NORMAL
- en: When one component fails, it may affect the function of another component, which
    then affects the functions of yet another component. This chain reaction of failing
    components creates a condition of cascading failure, which is not a good thing.
    There are several methods through which a server can be fault (fail) tolerant,
    meaning the server is able to withstand a component failure and stay available,
    achieving high availability.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where a server is generally a single computer running server software, a server
    cluster consists of servers arranged in an interactive group. The general purpose
    of a server cluster is to improve process throughput and responsiveness to users.
    A server cluster has two or more interconnected servers that operate as a single
    unit under the control of a primary or load-balancing server or controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The primary benefits provided by server clustering are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability**: In situations where network or user demands exceed the capabilities
    of an existing cluster, it''s relatively easy to incorporate additional servers
    into the cluster to handle the increased volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reliability**: A single server is both a single point of failure and, at
    times, a bottleneck. A server cluster spreads the processing load across several
    servers, which is likely to withstand the failure of a single server in the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manageability**: Maintenance on a single server generally requires downtime.
    However, a cluster of servers provides continuity of operations, while one or
    more of the clustered devices receive maintenance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, there are some disadvantages to server clustering, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure**: A server cluster requires more computers and support infrastructure,
    which adds to the expense of maintaining the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compatibility**: Not all computers designed as servers are cluster-friendly.
    Clustering is a fairly rigid structure and beyond add-on scalability is not very
    flexible. Some software applications aren''t cluster-compatible either.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost**:Clustering can be expensive and its design must be carefully set to
    work efficiently, increasing the cost of administration and management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active/active versus active/passive clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The two primary configurations for server clusters are **active/active** and
    **active/passive**. Each of these configurations can be a strategy for high availability.
    An active/active server cluster is commonly a load-balancing solution that interconnects
    two or more computers that perform the same processing steps. As depicted in the
    following diagram, a blade server chassis holds several active servers. A load-balancing
    appliance or server manages the process assignments to the servers optimizing
    the response time of the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e4345c3-a856-41e7-a0f1-000fef40711d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of an active/active server cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'By contrast, an active/passive server cluster configuration, as shown in the
    following diagram, also has two or more interconnected servers, and may have one
    or more active servers sharing the processing load and one or more failover, backup,
    or standby servers ready to replace a failed server or one taken out of service
    for maintenance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4acf8c9-8064-4795-a794-be74741b7d83.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of an active/passive server cluster
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed above, load balancing is a function that distributes incoming network
    traffic to two or more servers arranged in a pool, farm, or cluster. Load balancing
    can be performed by specific software, a hardware appliance, or a dedicated computer.
    A load-balancing server or appliance enables a client/server application or a
    content provider to even out high volumes by spreading the incoming service requests
    over the available capacity of the server group. In effect, a load balancer is
    a form of router. Where a router directs traffic based on the best path to a destination,
    the load balancer directs traffic to a server with the appropriate software or
    data or, like a router, the load balancer directs the traffic to the best available
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The primary functions of a load-balancing application or appliance is to distribute
    incoming client requests for service to the server cluster to achieve efficiency,
    provide high availability by balancing its traffic only to active servers, and
    to provide flexibility by permitting administrators to add or remove servers to
    and from the cluster as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load balancers use a variety of algorithms to determine the server in a cluster
    or group to which an incoming message goes for processing. The most common of
    the load-balancing algorithms used are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agent-based adaptive load balancing**: This is a supplemental algorithm used
    in conjunction with a *weighted* algorithm. Each server in the cluster has an
    agent that interacts with the load balancer to provide a real-time update on its
    server''s status. The load balancer uses this data to determine which server will
    process the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chained failover**: The servers in the processing group or cluster form a
    serial chain. Incoming messages go to the first server in the chain. If that server
    isn''t able to service the message, it passes to the next server for processing.
    If that server is unable to provide processing, the message passes along until
    a server is able to process it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Least connections**: Neither of the round robin algorithms consider the current
    load of the server group when deciding where to send a message. However, the least
    connections algorithm looks at the load on each of the servers and assigns a message
    to the server with the least number of active processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Round robin**: In an active/active cluster, every server is able to process
    the message traffic equally. While all of the load balancers and each of the servers
    all share the same domain name, each has a unique IP address assigned. The primary
    DNS server for this domain associates the domain name with each of the IP addresses
    in the cluster. When a request asks for the IP address for the cluster domain,
    it''s provided with a server IP. The IP address provided for the domain name rotates
    after each DNS request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Software-defined networking (SDN) adaptive**: This load-balancing technique
    combines data about the network from the Presentation and Transport Layers with
    data from the Data Link and Network Layers to learn the status of the servers
    and their active applications, the status of the network itself, and whether there
    is any congestion or blockage on the network medium to make its load-balancing
    decision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source IP hash**: This algorithm converts the source and destination IP addresses
    of the client and server and hashes them together to create a key that it uses
    to forward the message to a particular server. The hash key is recalculable should
    processing interrupt and restart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weighted least connection**: The servers in the cluster or group receive
    a weighted value based on their resources and capabilities. Servers with more
    resources receive higher values. This value combines with the connections count
    of each server to determine a server prioritization. Servers with more resources
    get a bigger share of the load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weighted response time**: An intermittent server response time check sets
    a ranking for servers based on their response times. A server under a heavier
    processing load responds more slowly than a server with a lighter load, resulting
    in the servers with the fastest response times receiving more messages—at least
    until the response time check repeats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weighted round robin**: In addition to the basic round robin algorithm, each
    server receives a weighting factor. The servers with higher weightings receive
    a larger share of the incoming messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heartbeat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A heartbeat mechanism, also known as a heartbeat network or heartbeat protocol,
    is a common distribution method in a clustered server arrangement. Each of the
    clustered servers communicates with a synchronizing server, or *sync*, that it
    is up and operating by sharing that they have a heartbeat.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the active servers in the cluster periodically sends a heartbeat message
    to the *sync*, indicating its health. The sync adds the heartbeat messages to
    the bottom of a **first-in/first-out** (**FIFO**) push-up stack. The top entry
    in the FIFO stack identifies to the load balancer or cluster manager which of
    the active servers is next to receive a message request. However, if a server
    fails to provide its heartbeat message in the allotted time, the sync assumes
    that the server doesn't have a heartbeat and is therefore unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: Hot and not hot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **high-availability** (**HA**) strategy aims to keep a server, network, or
    cloud service running and available to users and subscribers without the need
    to take the server down to change out a failed or idled component. HA programs
    can address several aspects of server availability, including data restoration,
    server failover, component replacement, and disaster recovery. On the Server+
    exam, you should expect to see a question or two concerning component replacement
    and the differences between hot-swappable and non-hot-swappable devices and procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Hot swap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In spite of its common usage, hot plugging is not hot swapping. Typically, a
    hot plug device will connect to the system through plug and play, but often there
    is still another step required to complete the installation. On the other hand,
    a hot swap device installs on a running computer and is immediately usable.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most common hot swap device is a **Universal Serial Bus** (**USB**)
    flash memory drive. While USB flash drives aren't typically secondary storage
    on a network server, other USB, FireWire, Thunderbird, and eSATA devices, such
    as external storage devices, network adapters, and other peripheral devices, are
    generally hot swappable. Components usually thought of as internal devices, such
    as power supplies and hard disk drives, can also be hot swappable. However, not
    all power supplies and hard disk drives are hot swappable, and not all computers
    support hot swapping.
  prefs: []
  type: TYPE_NORMAL
- en: Non-hot swap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary difference between a hot swappable device and a non-hot swappable
    device is that the replacement of a non-hot swappable device typically requires
    a reboot of the computer. Regardless of how fast a system reboot completes, the
    system was not available to users during that time. This method of device replacement
    is a warm swap.
  prefs: []
  type: TYPE_NORMAL
- en: Another not-hot device replacement method is a cold swap that requires a system
    shutdown (powered down).
  prefs: []
  type: TYPE_NORMAL
- en: Service level agreements (SLA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An SLA is a common instrument provided by a service provider to the service
    subscriber. The essential elements of an information system SLA are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parties**: The specific identification of all of the parties to the agreement
    or their agents listing their authorities and abilities under the agreement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: The services specifically covered by the agreement, defined by
    function, procedure, actions, time, and pertinent metrics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: A specification of the time, volumes, duration, acceptable
    performance, unacceptable performance, uptime commitment, downtime limits, and
    agreed-to metrics and thresholds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementation**: If the implementation of the covered services is on a schedule,
    the agreement must specify the timelines, tasks, objectives, and acceptance or
    completion criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other areas typical to an SLA are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheduled downtime**: A delineation of any agreed-upon scheduled system downtime,
    during which access is unavailable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unscheduled downtime**: *What are the rights of the service subscriber in
    the event the system suffers unscheduled, extended, or catastrophic downtime,
    and what are the agreed-upon recovery requirements of the service provider?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client notification**: The SLA should detail the methods the service provider
    will use to notify the subscriber of changes in system status and define the amount
    of time for a notification of a scheduled downtime event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean time to repair/restoration (MTTR)**: A committed downtime duration,
    either historical, an estimate, or industry data, in the event of unanticipated
    downtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Change management programs ensure that the necessary patches, updates, and changes
    follow a controlled and consistent process. Change management in a server environment
    should follow six phases—purpose, scope, approval, testing, implementation, and
    review. Patch management is a part of change management and control. Patch management
    should be a priority. Firmware updates generally fix a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Server monitors provide automated reporting, scheduled device checking, and
    threshold and troubleshooting warnings for CPU usage, hard disk space, and utilization,
    disk IOPS, RAM utilization, and network traffic. The components of a network server
    are either CRUs or FRUs. Preventive maintenance avoids device or component failure.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of a server cluster is to improve process throughput and responsiveness
    to users through two or more interconnected servers operating as a single unit
    under the control of a primary or load-balancing server. The two configurations
    for server clusters are active/active and active/passive. An active/active server
    cluster is a load-balancing solution that interconnects two or more computers
    that perform the same processing steps. An active/passive server cluster has interconnected
    servers and one standby server to replace a failed server.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancing distributes incoming network traffic to two or more servers to
    spread incoming service requests over the capacity of the server group. An HA
    strategy keeps a server available to users during the change-out of a failed component.
    A hot swappable device installs on a running computer and is immediately usable.
    A non-hot swappable device requires a reboot of the computer.
  prefs: []
  type: TYPE_NORMAL
- en: An SLA is a common instrument provided by a service provider to the service
    subscriber. The essential elements of an information system SLA are parties, services,
    performance, and implementation. Other areas typical to an SLA include scheduled
    downtime, unscheduled downtime, client notification, and MTTR.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is not a phase of a change control process?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Approval
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Immediate application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Purpose
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One difference between a change management program and a patch management program
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Patch management should be a priority
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Patches should use the same change management process as major OS updates
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Patch management requires no testing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A software patch only affects the user interface
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of software provides for scheduled device checks, including checks
    against preset thresholds, hard disk utilization, disk IOPS, and other system
    health metrics on a server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Asset management systems
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SNMP-MIBs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Server monitors
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Packet sniffers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the significance of the IOPS metric?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is an estimate of the maximum channel/bus bandwidth
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It represents the maximum number of reads and writes (input/output operations)
    to and from non-contiguous storage locations on secondary storage devices
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It reflects the number of independent operations a CPU performs in a second
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It measures the number of I/O operations per second made by the CPU
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the BIOS/UEFI start up process detects an error or possible error, it signals
    a code to identify the issue and its source. What are these audible signals commonly
    called?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Error indicators
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Failure alarms
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Beep codes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: POST alerts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A server component or peripheral that can be installed, configured, or removed
    by the server owner's staff is categorized as what type of device?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Field replaceable unit** (**FRU**)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User replaceable unit** (**URU**)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Remote replaceable unit** (**RRU**)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Customer replaceable unit** (**CRU**)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The objective of a preventive maintenance program is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To extend the service life of a server component
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To avoid component failures
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To maintain server uptime commitments
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Improving process throughput and responsiveness by interconnecting two or more
    servers in a cluster to operate as a single device describes what server configuration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Active/active
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Active/passive
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Passive/passive
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hot swappable
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The server cluster configuration in which a standby or failover server is available
    to replace a failed server, if required, is a(n):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Active/active
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Active/passive
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Passive/passive
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hot swappable
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A failed server device or component that an administrator may replace while
    a system remains running and productive is a:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cold swap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Warm swap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hot swap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Just right swap
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
