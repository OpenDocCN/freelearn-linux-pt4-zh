- en: Chapter 3. Deploying Servers on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hundreds of different services can be deployed on an Ubuntu Server, and each
    one of these services can be detailed in an entire book. In this chapter, we will
    have a look at the essentials of setting up and configuring some of the most common
    servers that system administrators need. Newbies will get a step-by-step guide,
    and advanced users will discover the Ubuntu approach towards servers. We will
    start with the deployment of the famous OpenSSH server. Then, we'll move on to
    set up a DNS server. After that, we will cover how to turn on a web and an e-mail
    server. Finally, we will cover how to deploy a database, DHCP, and file server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an OpenSSH server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a DNS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning on a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a mail server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a database server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a DHCP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a file server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an OpenSSH server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the most useful server that, according to me, every administrator
    should install on their server, irrespective of the aim of this server and the
    services that need to be put on it. It is the **OpenSSH** server that allows you
    to remotely connect in a secure way to a server from a computer that can reach
    this server. The OpenSSH server is a set of tools that allow, besides the secure
    remote connection, a secure file transfer with the help of the scp protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenSSH server allows clients to connect using many authentication methods,
    such as a plain password, a public key, and kerberos tickets.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenSSH server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can install only the OpenSSH server, but in general, we need both the OpenSSH
    tools—a server and a client. We need a server to connect to the Ubuntu Server
    that we are working on from a reachable computer. We require a client to connect
    it to another server or computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing OpenSSH (the server and client) is quite easy. To install the OpenSSH
    client, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For the OpenSSH server, we previously saw that we can install it by using the
    `tasksel` utility during the Ubuntu Server installation process, but if you forgot
    to do this in the preceding step, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install both the client and the server at once, you can simply run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the OpenSSH server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OpenSSH server is handled by the `sshd` daemon. Its configuration is located
    in the `/etc/ssh/sshd_config` file, which can be modified by editing it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A bad manipulation of this file can alter the SSH server work and break it.
    Therefore, it is better to start by performing a backup for this file and, as
    a security measurement, set the backup file as read-only by using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look at a couple of examples of what you can change by using
    this file. For the first example, find the port number. By default, `sshd` is
    listening on port *22*. You can change this behavior and configure it to make
    it listen on port *2233* by setting the value of the port directive to *2233*
    inside this file. You will also find the **HostKey** directive, which allows us
    to set authentication keys paths. Another example is an instance where you would
    like to show the banner message that exists in the `/etc/issue.net` file as a
    pre-login message by commenting out the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you would like to know more about the configuration directives that can be
    changed, and the eventual values and their use, just run the man `sshd_config`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: After making modifications in the `/etc/ssh/sshd_config` file, you should save
    it and then restart the daemon by using the `sudo service ssh restart` command.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when editing this file from a remote location, especially when the
    remote connection is the only way of reaching the server, because modifying this
    file can change the way it behaves when interacting with the network. Besides,
    in case there are some errors in this file and you restart the `sshd` daemon,
    the server may not start again and you will lose the connection on the server.
    Therefore, be careful and prepare your plan B (for example, having someone on
    site to reestablish the connection by restoring the original backup file).
  prefs: []
  type: TYPE_NORMAL
- en: Note that by running `/usr/bin/sshd -t`, you can test the `config` file before
    restarting the server and thus avoid the eventual problems that we talked about
    in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a DNS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **DNS** is a **domain name system** server that answers queries about domain
    names by providing the relative IP address. It is a must for www working; without
    it, users will have to learn the IP addresses of every website that they want
    to visit and type them manually in their browser (or add them manually to host
    files), which is impossible.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of programs that provide DNS services under Ubuntu, but the
    most common one is BIND.
  prefs: []
  type: TYPE_NORMAL
- en: The BIND installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you missed installing BIND during the Ubuntu Server installation, you can
    do it now, and there is more than one way of doing that.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either use the `tasksel` utility, which will automatically install
    for you the two `bind9` and `bind9-doc` packages. Alternatively, you can use the
    `apt-get` tool, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once the BIND packages are installed, it is fully configured and functional
    with the default parameters that allow it to work as a caching DNS for recursive
    queries. You can of course customize it to fit your needs. We will discuss how
    to do that in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check BIND''s status by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In case it is not running, you can launch it by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The BIND installation](img/B04800_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ubuntu's BIND conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'BIND files may have an organization in Ubuntu that is different from the ones
    in other distributions. The following are the basic files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/bind`: This is the main directory for the BIND configuration files. It
    also contains the `zone` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/bind/named.conf`: This is BIND''s main configuration file. It includes
    scripts from other files, with the most notable ones being: `/etc/bind/named.conf.default-zones`,
    which contains a default zone such as local host; `/etc/bind/named.conf.local`,
    which contains zones added by the system administrator (use this file when you
    would like to add zones); and `/etc/bind/named.conf.options`, which contains additional
    options such as forwarders'' addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/bind/db.*`: The zone files, which contain information related to each
    zone, have the convention of starting with `db.`, and each file identifies a particular
    zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/init.d/bind9`: This is the file that contains the BIND startup parameters
    that are needed to launch the service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/syslog`: By default, BIND uses this file to store its logs. This
    file contains the log of a lot of other services. So, if you would like to have
    only the BIND log, you can simply search for the named keyword using the `grep`
    command, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring BIND
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring BIND is simple. It is always about creating new zones (or editing
    the existing ones). This is done by performing the following three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Either create a zone file relative to the zone that needs to be added, or edit
    an existing one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a reference to the zone file in `/etc/bind/named.conf.local`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload the BIND service by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Zone file configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The details related to a specific domain name are stored in a DNS server in
    an entity called **zone**. Each zone is represented by a file under the `/etc/bind/
    directory`. In this section, we will take a look at how to configure a DNS zone
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to get more information about this subject, a complete tutorial
    on zone files and their contents is available at [http://www.slashroot.in/what-dns-zone-file-complete-tutorial-zone-file-and-its-contents](http://www.slashroot.in/what-dns-zone-file-complete-tutorial-zone-file-and-its-contents).
  prefs: []
  type: TYPE_NORMAL
- en: The zone files have the same structure. So, an easy way of configuring a new
    zone is by copying an existing zone file (such as `/etc/bind/db.local`) and then
    modifying it as required.
  prefs: []
  type: TYPE_NORMAL
- en: By default, timers in the zone file are set in seconds. You can use other time
    units such as the day by adding the letter `d` to the value, the week by adding
    the letter `w`, the hour using the letter `h`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most important fields in the zone file configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SOA**: **Start of Authority**, this server is considered to be the best source
    of information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NS**: This is the name servers for the zone file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A**: This is IPv4 address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AAAA**: This is IPv6 address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MX**: This is the mail server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also need to configure a reversed DNS file for every zone that you create.
    The structure is also the same, so you can just copy one of the default reversed
    zones, such as `/etc/bind/db.127`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reference a zone file inside `/etc/bind/named.conf.local`, you need to just
    copy a sample of an existing reference and modify it. The following is an example
    that demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you reload BIND, it will take into consideration the modified zone file
    that has a higher serial number. So, be sure to increment the serial field in
    the zone file each time you modify it. If you don't do this, your modifications
    will be ignored. Most system administrators use the yyyyMMddHHmm format for this
    field.
  prefs: []
  type: TYPE_NORMAL
- en: DNS redundancy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DNS is a critical service for web and e-mail applications. So, it is important
    to have a redundancy of the main DNS server (called **salve**), which has the
    same information as the **master** DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure this, you have to add the salve server to the zone file in the
    master server by using the NS record. Then, when referencing the zone file, you
    should add the allow-transfer option to the zone definition inside the master
    DNS to allow the slave DNS to copy the data from it. You can also add the also-notify
    option so that the master DNS will notify the slave DNS for every modification
    inside that zone. On the other hand, in the slave server, the zone definition
    should contain the slave type and point to the master server. As an example, if
    we assume that the IP address of the master DNS is *192.168.1.1* and the IP address
    of the slave DNS is *192.168.1.2*, we should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `master` server you will find the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `slave` server you will find the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: DNS testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test whether your DNS is working, you should request to server and check
    the correctness of the information. To do this, you should either use a computer
    in which you point your name server to this DNS, or simply add the IP address
    of that DNS server as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The famous NsLookup tool is the simplest tool to test DNS and reverse DNS. There
    is also the `dig` utility, which gives a richer answer, and the host tool, which
    is similar to NsLookup.
  prefs: []
  type: TYPE_NORMAL
- en: Turning on a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of open source web servers that we can deploy on the Ubuntu
    Server, such as Apache Tomcat, NGINX, and Jetty. Each web server should be installed
    and configured to deal with a specific programming language. We should also install
    its libraries, along with the installation and configuration of the database that
    is necessary for the web server. Instead of doing all of this, especially when
    you need a web server to deploy an application developed in PHP, Perl, or Python,
    the best choice is to install a LAMP server.
  prefs: []
  type: TYPE_NORMAL
- en: '**LAMP** is the abbreviation for **Linux Apache MySQL PHP** (or sometimes **Perl**
    or **Python**). It is the de facto standard for a web server deployment based
    on a combination of the Apache web server program that is used with Perl, PHP,
    or Python for dynamic content handling, and a MySQL database on the backend, with
    all of these components running on a Linux server. It has become a common way
    of setting up a web server deployment under Linux. That''s the reason why Ubuntu
    has grouped all the necessary packages together—to simplify using LAMP inside
    an Ubuntu Server.'
  prefs: []
  type: TYPE_NORMAL
- en: The LAMP Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few different ways of setting up a web server on a default Ubuntu
    Server installation. Probably the easiest method is selecting the LAMP server
    during the initial installation, or afterwards with the `tasksel` tool. This will
    add the `apache2`, `apache2-mpm-prefork`, `mysql-server-5.6`, `mysql-client-5.6`,
    and `php5-mysql` packages along with all of their libraries and other dependencies.
    Alternatively, you can install each of these packages from the command line using
    the `apt-get install` tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'During installation, the package manager will ask you to enter the root password
    of the MySQL database, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The LAMP Installation](img/B04800_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Entering the password is optional. You can keep it empty, but for security reasons
    it is recommended that you set a root password for the MySQL database. If you
    don't do that, anyone with an account on the server can access your database and
    read, alter, and even delete data.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the LAMP server, there is an additional program that is very
    helpful and which can be installed. This program is called **phpMyAdmin**. It
    is a LAMP application that was specifically written for the administration of
    MySQL servers. It provides an easy graphical interface for database administration
    tasks that are written in PHP and which can be accessed via a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'During installation, you will be asked to choose the web server that you want
    to configure for phpMyAdmin. In our case, it is `apache2`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The LAMP Installation](img/B04800_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can test the LAMP server by using the IP address of the Ubuntu Server on
    your web browser. You should get the Apache2 default page. Also, you can test
    `phpmyadmin` by using `<ubuntu-server-IP>/phpmyadmin`. You will get the login
    interface (use the MySQL parameters to log in to `phpmyadmin`).
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu's LAMP Conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like most other distributions, Ubuntu has certain conventions when it comes
    to the Apache administration. Configuration files are organized in a particular
    way, as are administrative tools and logs. If you aren''t used to the way Debian
    and Ubuntu organize Apache, it is quite different from what you may have seen
    on other distributions. Here are the major file conventions for Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/apache2`: This directory contains all the Apache configuration files.
    Formerly, Apache was configured via one large `httpd.conf` file, which contained
    options, settings, and different virtual hosts. Actually, this file is empty because
    Ubuntu has moved away from the monolithic `httpd.conf` model and has split up
    its configuration across a number of files and subdirectories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/apache2.conf`: This is the main Apache configuration file that
    is used by Ubuntu''s Apache2 binary. The default `apache2.conf` file is heavily
    commented. So, it works well as a guide in and of itself to each configuration
    option and what it does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/envvars`: This file contains the definition of the environment
    variables used by different scripts when Apache starts to define settings such
    as the location of the PID files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/ports.conf`: This file is used to define which ports Apache listens
    on when it starts. The default settings make it listen on the standard port *80,*
    and additionally on port *443* when the SSL module is enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/conf.d/`: This directory is listed as an included directory in
    the main `apache2.conf` file, which means that when Apache starts, it will also
    include the configuration files found in this directory and add them to the overall
    configuration. This directory is used for additional Apache options that an administrator
    (or a package) might want to add separately from the core `apache2.conf` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/mods-available/`: Ubuntu offers a simpler and more modular approach
    than the traditional way of adding modules. All the modules that are available
    on the system are represented within this directory by the .load and `.conf` files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/mods-enabled/`: This directory basically contains symbolic links
    to the .load and .conf files in the `mods-enabled` directory. When Apache starts,
    it will scan this directory and load all the modules referenced within the directory.
    So for instance, if you want to enable the SSL module, you can run `sudo ln -s
    /etc/apache2/mod-available/ssl.load /etc/apache2/mods-enabled/ssl.load`. Ubuntu
    even provides tools to simplify this. To enable a module, just run `a2enmod`,
    followed by the module that you want to enable. For example, to enable the SSL
    module as we did previously, just run `sudo a2enmod ssl`. Likewise, there is an
    `a2dismod` program that will disable a module for you. It takes the same syntax
    as `a2enmod`. So, to disable SSL, execute `sudo a2dismod ssl`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/sites-available/`: Ubuntu organizes the Apache virtual hosts
    in a similar way to how it organizes modules. Under Ubuntu, every virtual host
    or site that is available to be served by Apache on this machine has its configuration
    in a separate file under sites-available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/etc/apache2/sites-enabled/`: Like `mods-enabled`, this directory contains
    symbolic links to configuration files in sites-available. So, when you want to
    add a new virtual host to Apache, just create a new configuration file for the
    host that contains a complete `<VirtualHost>` block under sites-available, and
    **symbolic link** (**symlink**) it here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, you can use the `a2ensite` script that works just like `a2enmod`.
    Just run `a2enmod` with the site that you wish to enable as an argument. To enable
    `mysite`, type `sudo a2ensite mysite`, and to disable it you can use `a2dissite`,
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`/var/www/`: This is the default document root for Apache. An HTML file that
    is readable by Apache and placed in this directory will be available once you
    point a web browser at the server. There is already a default `index.html` in
    this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/lib/cgi-bin/`: This is the default location for the CGI scripts. The
    scripts referenced on the web server by `/cgi-bin` will point here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/apache2/`: This is the standard directory in which the Apache logs
    are stored. The `access.log` file contains information about the files that have
    been accessed on the web server, and the `error.log` file lists the Apache errors.
    In case you have trouble starting Apache, look in `error.log` for clues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To activate the new configuration, you need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Apache management and testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following section, we will discover one of the most helpful Apache tools
    named `apache2ctl,` and some of its applications.
  prefs: []
  type: TYPE_NORMAL
- en: apache2ctl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `/usr/sbin/apache2ctl` program is the primary command-line program that
    you will use to manage Apache under Ubuntu. The syntax for the command is fairly
    straightforward. Run `apache2ctl` from the command line and pass a single command
    to it as an argument. The simple start, stop, and restart commands will, as you
    might imagine, start, stop, and restart the Apache process respectively. You can
    also achieve the same functionality with the `apache2 init` script. Therefore,
    the three commands that do the same thing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Stopping Apache gracefully
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a potential risk associated with the `restart` and `stop` commands.
    When you restart or stop Apache with these commands, all the currently running
    Apache processes are killed, even if they are in the middle of serving files to
    a user. If you issue a `restart` command when a user is in the middle of loading
    a page, it will only load as much information as it currently has and then stop
    loading a page, thus forcing users to reload the page. To avoid this, `apache2ctl`
    has provided the `graceful` and `graceful-stop` commands.
  prefs: []
  type: TYPE_NORMAL
- en: These commands restart and stop Apache respectively, but when they do, they
    wait for each process to finish the outstanding requests first. On an active site,
    a graceful restart won't even be noticed by anyone using the service. In general,
    unless you know that a site is not actively serving traffic (or unless you don't
    care whether all the active connections are closed), you should use `graceful`
    and `graceful-stop`. The only exception is when you add new SSL certificates to
    a site or make other changes that do require a full Apache restart to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnostic apache2ctl commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The other main commands for `apache2ctl` provide more diagnostic features. The
    first, `configtest`, will test the current Apache configuration files for errors.
    This can be very useful in case you decide to automate the deployment of Apache
    scripts. When you set up a script to deploy configuration files and restart Apache,
    a challenge that you may face is that in case you have made a mistake in the configuration
    files, Apache might not start a back up. If you deploy the same file to the entire
    web farm, you may potentially bring the entire web farm down with a single syntax
    error and a script that blindly deploys and restarts Apache. With `configtest`,
    you can set up logic in your deployment scripts that restarts Apache once a server
    has passed the `configtest` command.
  prefs: []
  type: TYPE_NORMAL
- en: As an Apache server gets traffic, you typically want to get diagnostic information
    from it, such as how many Apache processes are active, what those processes are
    doing, and how many open slots you still have available. The `status` and `fullstatus
    apache2ctl` commands provide you with a lot of great diagnostic data. The status
    command outputs a general-purpose overall status of the Apache server, including
    how long the server has been up, how many requests are active, and how many processes
    are idle. In addition to this, it outputs an ASCII art map of all the available
    processes with different letters representing different process states. The `fullstatus`
    command outputs similar information, with just more of it and in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an e-mail server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with the Web, e-mail is probably the service that most people think of
    when they think of the Internet. Like web servers, e-mail servers have traditionally
    been pretty tricky to set up, and there are many guides and books on this subject.
    However, you will find that e-mail servers are pretty easy to set up and use under
    Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an e-mail server requires you to manage the sending and receiving
    of e-mails. These two notions are important because they implement two different
    protocols—**SMTP** to send, and **POP** or **IMAP** to receive the messages.
  prefs: []
  type: TYPE_NORMAL
- en: When a user sends an e-mail it is in fact never in direct contact with the recipient.
    The e-mail goes through at least two servers that are, in order, the sending server
    (SMTP), called the **MTA** (**Mail Transfer Agent**), which sends it to the receiver
    server (POP or IMAP), called **MDA** (**Mail Delivery Agent**), possibly transiting
    the e-mail via other SMTP servers as well. Then, the e-mail will wait on this
    last server until the recipient launches its e-mail client (such as Thunderbird),
    which will retrieve the message from the receiving server via one of the two POP
    or IMAP protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can find all of these servers located on the same machine or different machines;
    it depends on the dimension of the e-mail server that you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that to have a working e-mail server that sends and receives mails
    to and from the Internet, you should have a working DNS server with a valid domain
    name that you own.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to avoid assembling the different pieces of an e-mail server,
    and at the same time use a very powerful mailing server on Ubuntu, you can opt
    for a solution such as the famous Zimbra server. Explaining how to install and
    administrate Zimbra needs more than a section in a chapter. That's why I wrote
    a book about it named *Learning Zimbra Server Essentials*, Packt Publishing, in
    October 2013 (for more information, visit [https://www.packtpub.com/networking-and-servers/learning-zimbra-server-essentials](https://www.packtpub.com/networking-and-servers/learning-zimbra-server-essentials)).
    If you want, you can refer to it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discover how to handle every piece of the e-mail server.
  prefs: []
  type: TYPE_NORMAL
- en: The MTA server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of **Mail Transfer Agent** (**MTA**s) that can be deployed on
    an Ubuntu Server, but the most famous MTA one is **Postfix**, because it is a
    good, secure, and an easy-to-administer e-mail server. Besides, it is the default
    e-mail server that Ubuntu uses when you select **Mail server** in `tasksel`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Postfix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Postfix can be installed with the same methods that are used by many of the
    other services that I mentioned in this chapter. You can choose **Mail server**
    either during the initial installation or when you run the `tasksel` program.
    Alternatively, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When you install Postfix, the installer will launch the initial Postfix configuration
    script. It is an interactive program that provides you with a few standard common
    e-mail server configurations. Based on your choice, it will propose a few more
    options so that at the end of this process, you should at least have a functional
    e-mail server.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, it gives you an overview of the different configuration modes
    that you can adopt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Postfix](img/B04800_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, it will give you the options to choose. In our case, we will choose **Internet
    site**, as shown in the following screenshot, so that we can directly send and
    receive e-mails using SMTP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Postfix](img/B04800_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, it asks you about the domain name that you will use for this e-mail
    server. This is the domain name that you will use to send e-mails. In our case,
    we will choose `ubuntu-essentials.net`, which will allow us to send mail such
    as `contact@ ubuntu-essentials.net`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Postfix](img/B04800_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that although the e-mail server will function, you will need to
    perform some extra configurations if you want to add greylisting, spam/virus checking,
    IMAP or POP servers, or other advanced options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During the installation process, you will be asked for only a few details.
    Therefore, to complete the customization of the other necessary parameters, such
    as the trusted subnets, the default mailbox size, and the root address, you can
    run the following command after finishing the installation process and follow
    the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Managing Postfix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There aren't too many surprises with Ubuntu's Postfix conventions. Most of the
    directories and files used by Postfix under Ubuntu follow the same structure on
    other platforms. For example, the `/etc/postfix/ directory` contains a majority
    of the Postfix configuration files, especially `/etc/postfix/main.cf`, where you
    can activate secure authentication using SSL, install TLS certificates for signature
    and encryption, and make use of a lot of other options. The `/var/spool/mail/`
    directory contains the users' mailboxes, and `/var/log/mail.*` are the log files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main tool that you will use to administer Postfix is aptly named postfix.
    It works much like `apache2ctl` in that it accepts a few different commands as
    arguments and can also be used as a substitute for the `init` script to start
    and stop the service. For instance, to stop Postfix and then start it again, type
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For other parameters and their explanation, you can get them from the `man`
    command via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the Postfix command-line tool, Postfix provides a few other
    tools to help you with the administration of the services. The following are some
    of these tools:'
  prefs: []
  type: TYPE_NORMAL
- en: The `postqueue` command can be used by regular users to get information about
    the current e-mail queue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `postsuper` command allows a superuser to perform privileged operations
    on a queue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `postconf` command outputs every Postfix setting to the screen along with
    its value. This can be very useful in case you modify the main `config` file and
    you would like to get the active running configuration before reloading. So for
    example, if you want to see the current value of `myhostname` in the running `config`
    file, we just have to type the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The MDA server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like for MTA, there is a lot of MDA software that exist under the official Ubuntu
    repositories and which differs in terms of complexity and functionalities besides
    the interoperability with other e-mail server components, such as Postfix. For
    this example, I will cover the Dovecot POP and IMAP servers, as they integrate
    well with Postfix, support Maildirs, and have a number of additional packages
    available that provide advanced features such as LDAP, MySQL, and Postgres support.
    The steps are pretty simple. They start with enabling Maildirs on Postfix and
    then installing Dovecot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maildir is a specific directory structure that is used to save e-mails instead
    of the traditional manner of using the `mbox` format. It should be enabled on
    Postfix by setting the `home_mailbox` variable inside the `/etc/postfix/main.cf`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, to enable it, you can just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You should of course reload `postfix` after this step by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, move on to install Dovecot by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will install and enable POP, POP with SSL, IMAP, and IMAP with SSL.
  prefs: []
  type: TYPE_NORMAL
- en: After this, you can customize Dovecot by using the main `/etc/dovecot/dovecot.conf
    config` file. Don't forget to reload the daemon every time you modify the `config`
    file using the `sudo /etc/init.d/dovecot reload` command to implement the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to tell Dovecot to use Maildirs and also let it know where
    it can find them on the system. To do this, check whether there is already an
    uncommented line that starts with `mail_location` (in the default installation,
    it''s commented out). If it doesn''t exist, then add the following line; if it
    does exist, then modify the `mail_location` line so that it looks like the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Then, reload Dovecot by using the `sudo /etc/init.d/dovecot reload` command.
    Now, you should be able to configure e-mail clients to point to the server and
    access their local e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Filters and security for an e-mail server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today, **Unsolicited Bulk Email** (**UBE**) represents one of the largest problems
    for e-mail servers. Also known as **spam**, such messages may also carry viruses
    and other forms of malware. To handle this issue, there are a lot of powerful
    utilities that can be installed on an Ubuntu Server and integrated with an e-mail
    server. The following is a list of the best utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amavisd-new** is a generic scanner program. Its role is to call a certain
    number of content filtering tools such as antivirus, spam detection, and so on.
    You can install it by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To configure it, you have to first of all activate antivirus and anti-spam
    detection in Amavisd-new by editing the `/etc/amavis/conf.d/15-content_filter_mode`
    file and uncommenting some lines, as described in the file itself. To customize
    Amavisd-new, you can edit options in the `config` files under the `/etc/amavis/conf.d/`
    directory. Don''t forget to restart the daemon by using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For integration with Postfix, you have to enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, edit `/etc/postfix/master.cf` by adding the following to the end of the
    file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To prevent messages that are generated to report spam from being classified
    as spam, add the following two lines immediately below the pickup transport service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, restart Postfix by using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this step, content filtering with spam and virus detection is enabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Spamassassin** is the most used open source anti-spam program in the world
    today. It uses a variety of mechanisms to filter e-mails based on message content.
    You can install it via the `sudo apt-get install spamassassin` command. To activate
    the `spamassassin` daemon, you have to change the value of the enabled parameter
    from *0* to *1* in the `/etc/default/spamassassin` file. Then, start the daemon
    by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ClamAV** is the most known open source antivirus application. You can install
    it by using the `sudo apt-get install clamav-daemon` command. The default configuration
    of ClamAV fits our needs. Therefore, we can start working with it. However, you
    can customize it by using the `config` files in `/etc/clamav`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need to add the ClamAV and Amavis users to each other''s groups in order
    for Amavisd-new to have appropriate access to scan files and prevent ownership
    issues from inhibiting scans, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Postgrey** is a program that implements greylisting for the Postfix server.
    **Greylisting** is a technique that helps you cut down on the amount of spam a
    server receives. You can install it by using the `sudo apt-get install postgrey`
    command. For its configuration, all that you have to do is modify the `smtpd_recipient_restrictions`
    option in Postfix''s `main.cf` file to add the `localhost:10023` service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **OpenDKIM** implements a **Sendmail Mail Filter** (**Milter**) for the
    **DomainKeys Identified Mail** (**DKIM**) standard, and `python-postfix-policyd-spf`
    enables **Sender Policy Framework** (**SPF**) to check it with Postfix. You can
    install OpenDKIM via the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To get more knowledge about this subject, visit [https://mandrill.zendesk.com/hc/en-us/articles/205582267-What-are-SPF-and-DKIM-and-how-do-I-set-them-up-](https://mandrill.zendesk.com/hc/en-us/articles/205582267-What-are-SPF-and-DKIM-and-how-do-I-set-them-up-).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Spamassassin** process can be enhanced by using some optional packages
    that integrate with it, for better spam detection. We can install these packages
    by using the `sudo apt-get install pyzor razor` command. Spamassassin automatically
    detects optional components and will use these components if they are present.
    So, there is no need to configure `pyzor` and `razor`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To filter e-mail attachments, we need the main filtering application''s compression
    utilities, which can be installed by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Other facilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After installing an e-mail server, you can use it by configuring an e-mail
    client such as Thunderbird or Evolution. You can also access it via the Web if
    you have already installed a webmail client. There are a lot of webmail clients
    that you can install. All that you need is a working MTA and MDA, along with a
    web server. We have covered these topics in the previous sections. Then, you should
    install the webmail solution and configure it to work with your e-mail server.
    You can choose a solution from SquirrelMail, Horde, OpenWebMail, and Roundcube.
    As an example, we will install and configure Roundcube. To do this, you need to
    run the `sudo apt-get install roundcube-mysql roundcube` command. Then, edit the
    `/etc/roundcube/apache.conf` file and uncomment the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, restart Apache by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can now access your webmail via `<domaine-name>/roundcube`. In our case,
    it is `www.buntu-essentials.net/roundcube`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also install a mass mailing manager (a mailing list manager), such as
    the famous mailman, and configure it to work with the e-mail server in a manner
    that is similar to how you installed and configured the webmail client.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Databases are also one of most used services that every system administrator
    deals with every day. With the Ubuntu Server, installing and managing databases
    is quite simple. We previously saw how to install a MySQL database within a LAMP
    server. In this section, we will see how to do that as a separate action. We will
    also see how to install and manage another commonly used Open Source database
    server named Postgres.
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is easy to install the MySQL database on Ubuntu, just run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You will be asked to enter the root password. You can leave it empty, but I
    recommend that you set one, and a good one (a strong password) is better.
  prefs: []
  type: TYPE_NORMAL
- en: For customization tasks, you can find the MySQL main configuration files under
    `/etc/mysql/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu includes the `mysqladmin` tool to help you with MySQL administration.
    You can think of it as the `apache2ctl` program in that it accepts certain commands
    on the command line and then interacts with the `mysqld` process for you. For
    instance, to get the current status of your MySQL process, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I used the `-p` argument in this command, which will tell `mysqladmin` to prompt
    me for the password on the command line. If you set a password for the root user,
    you will need to use `-p` with your commands. However, if you plan to run a batch
    of commands and don''t want to enter the password every time, you can add the
    password to the `-p` option. So for instance, if the MySQL password was myP@ssword,
    type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `mysqladmin` manual page (type man mysqladmin on a console) lists the full
    set of commands.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to manage a MySQL database is by using the phpMyAdmin utility.
    Have a look at how to install and configure it in the section named *Web Server*
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Postgre server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though MySQL has the reputation of being easy to use, PostgreSQL under
    Ubuntu is also simple to install and use. To install PostgreSQL, you can either
    select **PostgreSQL Server** as you install Ubuntu or do so afterwards with `tasksel`,
    or use a package manager to install the `postgresql` package, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `postgresql` package has been installed, the database service will
    start in the background and you can then set up your superuser account and create
    a database. The initial administration will be performed by the `postgres` user.
    So first, use `sudo` to become that user by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, from this shell, you can create a new user account by using the `createuser`
    program. On the other hand, the `dropuser` command deletes users. Creating databases
    is done via the `createdb` program, and accessing the database is done via the
    `psql` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with MySQL, there is a PHP-based administration tool called **phpPgAdmin**.
    To install phpPgAdmin, you simply need to install the `phppgadmin` package, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The package will download all of its dependencies, including a web server,
    in case one is not already installed. Once the package is installed, create a
    symlink to its Apache configuration file under `/etc/apache2/sites-available`
    and then use `a2ensite` to enable the site, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DHCP** stands for **Dynamic Host Control Protocol**. With this protocol,
    a new host on the network can issue a request for IP information. The DHCP server
    will then provide the host with all the necessary information that it needs to
    communicate on the network, such as its IP address, netmask, the gateway, and
    the DNS servers that need to be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing DHCP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing a DHCP server under Ubuntu is an easy task, just type the following
    command and you will get the DHCP server installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Ubuntu DHCP Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It just needs additional configuration to be useful; we will see this in this
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/dhcp3/dhcpd.conf`: This is the configuration file for the DHCP server.
    By default, it is a heavily commented file that should provide plenty of examples
    for you to work on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/lib/dhcp3/dhcpd.leases`: This file contains the current list of DHCP
    leases that your server has handed out. If you are wondering which MAC address
    got a particular IP or when a particular lease will expire, look in this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/syslog`: DHCP uses the standard `syslog` file for all of its logs.
    Here, you will be able to find requests from the network for a DHCP request along
    with the DHCP server''s reply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring DHCP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ubuntu provides a heavily commented DHCP configuration file that explains all
    the major options and gives a number of different configuration examples. For
    basic DHCP services, you generally want to set up one or possibly two scenarios—**dynamic
    DHCP** and **static DHCP**. In a dynamic DHCP configuration, new hosts get assigned
    an IP out of a possible range of IPs. There's no guarantee that a host will get
    assigned the same IP every time. With static DHCP, you can bind a particular IP
    address to a host's MAC address and ensure that every time it shows up on the
    network, it will get the same IP. Dynamic DHCP is good for a simple, easy-to-maintain
    DHCP server, and static DHCP gives you many benefits of static IPs without nearly
    as many headaches. Plus with static IPs, if you do want to change the IP address
    of a host, you can do so in the `dhcpd.conf` file and reload DHCP instead of having
    to track down and change the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to reload DHCP and enable my settings, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In case you didn't make a syntax error, the DHCP server will stop and then start
    again. If there is an error in the file, it should output an error to the screen
    along with its location. A common error is a missing semicolon at the end of a
    particular line.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a file server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the last section in this chapter. In this section, we will discover
    how to install and configure, on an Ubuntu Server, two of the most used file servers—**FTP**
    and **Samba**.
  prefs: []
  type: TYPE_NORMAL
- en: The FTP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `vsftpd` is an FTP daemon available in Ubuntu. It is easy to install, set
    up, and maintain. To install `vsftpd`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/etc/vsftpd.conf` file contains the main configuration options for the
    FTP server. It is well commented. Therefore, you can edit it easily. After the
    `config` modification, you should restart the server by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Connecting to the FTP server is quite easy. You can do so either by using the
    FTP command in the CLI of the customer machine or a client GUI program such as
    FileZilla.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With FTP, data is transmitted unencrypted over the network. To transmit data
    securely, you can either use the FTPS protocol (FTP over SSL), or advantageously
    turn to **SFTP** (**SSH File Transfer Protocol**).
  prefs: []
  type: TYPE_NORMAL
- en: The Samba server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Samba** is a program that implements SMB and CIFS, the Windows file-sharing
    protocols. As such, it''s ideal as a platform to share file under Windows, since
    all the clients can access the server without additional software. Over time,
    Samba has grown to support advanced sections of Windows file sharing to a point
    where it can operate like any other Windows file server or **Primary Domain Controller**
    (**PDC**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Samba, you can either select the **Samba Server** option during
    the Ubuntu installation or after the installation with the help of the `tasksel`
    program, or install the `samba`, `samba-doc`, `smbfs`, and `winbind` packages
    separately with the help of the package manager, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The Samba service will start automatically. By default, of course nothing too
    interesting will be shared. So, you will need to tweak Samba's configuration files
    before any directories are shared. The main configuration files are located under
    the `/etc/samba/` directory, especially the core configuration file named `/etc/samba/smb.conf`.
    This file is heavily commented, and it contains a number of different examples
    of how to set up shares, including a useful example configuration.
  prefs: []
  type: TYPE_NORMAL
- en: After installing and configuring the Samba server, go to another host on the
    network and attempt to connect to the Samba server. On an Ubuntu desktop, navigate
    to **Places** | **Connect to Server**. Then, select **Windows share** from the
    **Service type** drop-down menu. Finally, enter the IP address or hostname of
    the Samba server and then enter the name that you put between the brackets in
    the `smb.conf` file for the name of the share. Click on **Connect**. Ubuntu will
    mount and display the mounted share on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went in depth in terms of deploying services on an Ubuntu
    Server. We discussed how to install and configure some of the most used servers
    that every system administrator will usually deal with.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will move on to the security aspect of an Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
