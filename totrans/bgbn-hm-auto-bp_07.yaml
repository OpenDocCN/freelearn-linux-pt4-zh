- en: Chapter 7. Facebook Plant Monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social networks are very common nowadays, and having a monitoring (or controlling)
    system that interacts with them has become a must, especially for consumer systems.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to see how to implement a plant monitor capable
    of measuring solar light, soil moisture, and the soil temperature (internal and
    external) along with how to take some pictures at specific intervals via a webcam.
  prefs: []
  type: TYPE_NORMAL
- en: The user will be able to control the monitor through a web interface and they
    can then decide to publish the plant pictures on their Facebook timeline.
  prefs: []
  type: TYPE_NORMAL
- en: The basics of functioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this project, I''m going to present a simple implementation of a plant monitor
    with the following two special features:'
  prefs: []
  type: TYPE_NORMAL
- en: The first feature is the ability to measure and estimate the soil moisture according
    to a direct measurement of the moisture via a dedicated sensor and through the
    temperature difference between the external soil temperature and the internal
    soil temperature in the garden pot where the plant lives. This is because the
    internal resistance of the moisture sensor may change with the temperature; in
    fact, when the sun beats down on the soil and the soil warms up, the resistance
    changes and this effect will produce a false *dry* read. For this reason, we employ
    two different temperature probes in order to know if the soil is too hot with
    respect to the internal soil temperature and then we regulate the moisture level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second feature is the ability to add a webcam to take several pictures of
    our lovely plant at well-defined intervals and the possibility to publish them,
    at the user's request, on our Facebook timeline in order to show to our friends
    how green is our thumb!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A little schematic representation of the sensors position to correctly implement
    the first feature is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basics of functioning](img/3526OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s consider *Te* as the external soil temperature and *Ti* as the internal
    soil temperature. If we name the value returned by the moisture sensor *M*, a
    reasonable estimation (*Me*) of the real moisture can be given by the following
    formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me = M + K * (Te – Ti) when Te > Ti*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Me = M when Te ≤ Ti*'
  prefs: []
  type: TYPE_NORMAL
- en: where *K* is a suitable (and empirical) *moisture coefficient* that the user
    can set at runtime in order to fix their needs. Note that if *K* is `0`, the system
    will take the measured moisture level without any compensation.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the second feature, it is possible to take a picture of the monitored
    plant and then publish it on Facebook. In order to do this, we have to use the
    Facebook API to interact with a Facebook account. This step will be explained
    in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we are going to use two analog sensors, two digital sensors,
    and a webcam to take the pictures. The analog sensors are connected to two different
    ADC channels inputs (as in the previous chapter). The contactless external temperature
    sensor uses an I²C bus to communicate with the BeagleBone Black, while the waterproof
    internal temperature sensor uses a 1-Wire bus. Finally, the webcam is connected
    via the **USB** bus.
  prefs: []
  type: TYPE_NORMAL
- en: As in the previous chapter, I can add some actuators to flood water the plant
    and so on; but due to lack of space, I decided to leave these tasks to the reader
    as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the moisture sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The moisture sensor is the device shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the moisture sensor](img/3526OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The device can be purchased from [http://www.cosino.io/product/moisture-sensor](http://www.cosino.io/product/moisture-sensor),
    or by surfing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: The user guide of this device is available at [http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor](http://seeedstudio.com/wiki/Grove_-_Moisture_Sensor).
  prefs: []
  type: TYPE_NORMAL
- en: This device is quite similar to the water sensor presented in [Chapter 3](ch03.html
    "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*, since the functioning is still
    based on water conductivity; however, its shape is different due to the fact that
    we are interested in the soil humidity level and not whether water is present
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The connection to the BeagleBone Black is shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pin | Cable color |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| P9.3 - Vcc | Red |'
  prefs: []
  type: TYPE_TB
- en: '| P9.39 - AIN0 | Yellow |'
  prefs: []
  type: TYPE_TB
- en: '| P9.1 - GND | Black |'
  prefs: []
  type: TYPE_TB
- en: By using a multimeter, we can verify whether the output voltage is near to 0V
    when the sensor is in the air, the output is about 1.5V while in water, and that
    all the other output values stay in this range.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, since the maximum output voltage is about 1.5V, we can safely connect
    the output pin of this device directly to the BeagleBone Black ADC's input. However,
    we can use a 1.8V Zener diode between the *AIN0* pin and GND in order to be definitely
    sure that the output voltage cannot go over the critical threshold of 1.8V. (Remember
    what has been said several times in the previous chapters, starting from [Chapter
    2](ch02.html "Chapter 2. Ultrasonic Parking Assistant"), *Ultrasonic Parking Assistant*,
    about this issue.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to verify the device output, we can enable the BeagleBone Black''s ADCs
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These settings can be done by using the `bin/load_firmware.sh` script in the
    book''s example code repository, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can read the moisture level in water by putting the sensor into a
    cup of water and then executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can read the moisture level in air by removing the sensor from the
    water and then rerunning the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, the higher the moisture level, the higher the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the light sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An ambient light sensor is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the light sensor](img/B00255_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The device can be purchased from [http://www.cosino.io/product/photoresitor](http://www.cosino.io/product/photoresitor),
    or found by surfing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: The user guide of this device is available at [https://www.sparkfun.com/datasheets/Sensors/Imaging/SEN-09088-datasheet.pdf](https://www.sparkfun.com/datasheets/Sensors/Imaging/SEN-09088-datasheet.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'This device functioning is quite similar to the light sensor presented in [Chapter
    5](ch05.html "Chapter 5. WhatsApp Laundry Room Monitor"), *WhatsApp Laundry Room
    Monitor*; however, this is a single photoresistor with low power consumption that
    has an output function very similar to the pressure sensor presented in [Chapter
    6](ch06.html "Chapter 6. Baby Room Sentinel"), *Baby Room Sentinel*, so, even
    in this case, we can use the same circuitry to manage it, as reported in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the light sensor](img/B00255_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, *R=6.8 KΩ* and **Rp** is the light sensor's internal
    resistor that is represented by a variable resistor.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that the preceding circuitry not only connects the sensor to the BeagleBone
    Black''s ADC input pin but also ensures that the input voltage on that pin is
    lower than the critical value on 1.8V! In fact, the V[ADCin] voltage is given
    by the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '*V[ADCin]* *= R / (R + Rp + R) * Vcc = R / (2R + Rp) * Vcc*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we know that Vcc is 3.3V, so, even in case the **Rp** value drops to 0Ω,
    the *V[ADCin]* is equal to Vcc/2, that is, 1.65V, which is a safe value for the
    BeagleBone Black's ADCs.
  prefs: []
  type: TYPE_NORMAL
- en: This sensor must be connected with the BeagleBone Black at the *AIN1* input
    pin, which is labeled *P9.40*, while the other end must be connected with the
    resistor R, as shown in the preceding circuitry diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for all connections, we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as we have already done for the other light sensor in the earlier chapters,
    we can cover it with a cup and try to reread the ADC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, if we turn on a lamp over the sensor, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, the brighter the environment light, the higher the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the contactless temperature sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The contactless temperature sensor is the same as that used in [Chapter 6](ch06.html
    "Chapter 6. Baby Room Sentinel"), *Baby Room Sentinel*, so you can take a look
    at the *Setting up the contactless temperature sensor* section to see how to set
    up and test this device; however, for completeness, again, some basic information
    about it is reported as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the contactless temperature sensor](img/B00255_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The device can be purchased from [http://www.cosino.io/product/contactless-temperature-sensor](http://www.cosino.io/product/contactless-temperature-sensor),
    or found by surfing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: The user guide of this device is available at [https://www.sparkfun.com/datasheets/Sensors/Temperature/SEN-09570-datasheet-3901090614M005.pdf](https://www.sparkfun.com/datasheets/Sensors/Temperature/SEN-09570-datasheet-3901090614M005.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'The connections are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pin | Temperature sensor pin |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| P9.4 - Vcc | 3 - Vdd |'
  prefs: []
  type: TYPE_TB
- en: '| P9.17 - SCL | 1 - SCL |'
  prefs: []
  type: TYPE_TB
- en: '| P9.18 - SDA | 2 - SDA |'
  prefs: []
  type: TYPE_TB
- en: '| P9.2 - GND | 3 - Vss |'
  prefs: []
  type: TYPE_TB
- en: 'Now, if everything has been well connected, we can activate the I²C bus with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While the temperature can be retrieved by reading at the device location `0x07`,
    so by using the `i2cget` command, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output value must be converted to degree Celsius by multiplying it by 0.02
    after converting it to a decimal value, so we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the waterproof temperature sensor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regarding the internal temperature sensor, I used the same one used in [Chapter
    3,](ch03.html "Chapter 3. Aquarium Monitor") *Aquarium Monitor*, so you can take
    a look at the *Connecting the temperature sensor* section to see how to set up
    and test this device; however, for completeness, again, some basic information
    about it is reported:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the waterproof temperature sensor](img/B00255_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The device can be purchased from [http://www.cosino.io/product/waterproof-temperature-sensor](http://www.cosino.io/product/waterproof-temperature-sensor),
    or found by surfing the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: The datasheet of this device is available at [http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf](http://datasheets.maximintegrated.com/en/ds/DS18B20.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 'The connections are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Pin | Cable color |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| P9.4 - Vcc | Red |'
  prefs: []
  type: TYPE_TB
- en: '| P8.11 - GPIO1_13 | White |'
  prefs: []
  type: TYPE_TB
- en: '| P9.2 - GND | Black |'
  prefs: []
  type: TYPE_TB
- en: 'To enable it, we have to load a proper DTS file into the kernel with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Chapter 3](ch03.html "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*,
    to see how to obtain the DTS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything works well, we should see a new 1-Wire device under the `/sys/bus/w1/devices/`
    directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The new temperature sensor is represented by the directory named `28-000004b541e9`
    and to read the current temperature, we can use the `cat` command on the `w1_slave`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the current temperature is `t=29500`, which is expressed
    in **millidegrees Celsius** (**m°C**), so it's equivalent to 29.5°C.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that your sensor has a different ID, so, in your system, you'll get a different
    path name in the form of `/sys/bus/w1/devices/28-NNNNNNNNNNNN/w1_slave`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the webcam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*,
    I explained how to use a webcam with the BeagleBone Black, so you can take a look
    at that chapter to do the job. However, in that chapter, I required a UVC-based
    webcam (or at least another one which is supported by the `mjpg-streamer` tool).
    But this time, you can use any webcam supported by the Video4Linux driver class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The curious reader can obtain more information about Video4Linux drivers from
    [http://www.linuxtv.org/wiki/index.php/Main_Page]( http://www.linuxtv.org/wiki/index.php/Main_Page).
  prefs: []
  type: TYPE_NORMAL
- en: To know if our webcam is supported by the Video4Linux system, you just need
    to connect it to the BeagleBone Black USB host port and then check if a new `/dev/video`
    **X** device has been added (where **X** can be 0, 1, 2, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, on my system, using the same webcam used in [Chapter 3](ch03.html
    "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*, I get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'So, my webcam is supported by the Video4Linux subsystem and it can be used
    by the `fswebcam` program to take pictures. To install the program, we can use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can take a simple picture by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can happen that when the `fswebcam` program is executed, you get the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, when you try to display the picture, the image is black. To resolve this
    issue, the trick is to skip the first frames with the `-S` option argument, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'However, what is really interesting in this program is the possibility to add
    text in different positions on the picture. For example, by using the following
    command, we can take a picture with, in the bottom-right corner, the text `Picture''s
    title`, and in the bottom-left corner the text `Information text` with a smaller
    font and a time stamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output picture is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the webcam](img/B00255_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this is a great software for taking pictures with descriptions!
  prefs: []
  type: TYPE_NORMAL
- en: Adding a water pump
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we know if water is present on the floor, we can also decide to implement
    an automatic system to flood our plant with water when we detect that it's missing.
    A possible solution is using a water pump, as already done in [Chapter 3](ch03.html
    "Chapter 3. Aquarium Monitor"), *Aquarium Monitor*. Then, we can use one or more
    relays to control several pumps by using BeagleBone Black's GPIOs, but, as already
    stated, I'm not going to do it here due to lack of space, thus, leaving this issue
    as a useful exercise for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: The final picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following image shows the prototype I made to implement this project and
    to test the software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final picture](img/B00255_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The connections are very simple this time. Note also that all the sensors should
    be connected to the BeagleBone Black with a long cable in order to be easily put
    in the plant's garden pot.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, we monitor (and possibly control) a very slow system (a growing plant).
    So, using a simple Bash script is more than appropriate, while the web interface
    can be implemented by using two little HTML (with JavaScript) and PHP scripts.
    The real difficulty, apart from getting access to the peripherals, is using the
    Facebook API in order to get access to an account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apropos the monitoring loop and the web interface, there is a major issue,
    that is, the **Inter Process Communication** (**IPC**) system to use in order
    to exchange data between them. In [Chapter 1](ch01.html "Chapter 1. Dangerous
    Gas Sensors"), *Dangerous Gas Sensors*, we mainly used a MySQL server to store
    the system''s data and configuration settings. But we also used it to exchange
    data between the different tasks composing the system! However, this time, we
    have very few data to store and using a database may be very expensive. So, I
    decided to use a simple way to solve the problem: I''m going to use a file! Yes,
    by using a normal file with a well-defined internal structure and proper locking
    functions to serialize access to it, we can solve the problem with very few system
    resources. This solution will be explained in detail in a later section.'
  prefs: []
  type: TYPE_NORMAL
- en: The Facebook API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At [https://developers.facebook.com/docs/reference/php/5.0.0](https://developers.facebook.com/docs/reference/php/5.0.0),
    there is a user manual of the PHP API I used to get access to my Facebook account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, different APIs exist to get access to Facebook, and for further information
    about them, the reader can take a look at [https://developers.facebook.com/docs/apis-and-sdks](https://developers.facebook.com/docs/apis-and-sdks).
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot to read, so in the following section I've listed all steps I
    followed to install and configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, we have to download the source code. There are two possible ways
    to do it: installing with **Composer** and manual installing. I decided to use
    the manual installing method since I have no Composer support on my BeagleBone
    Black (nor do I wish to install it for such an easy task).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Composer tool is a dependency manager for PHP; a curious reader can refer
    to [https://getcomposer.org/](https://getcomposer.org/) for further information
    about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code can be downloaded by clicking either on the **Download the SDK for
    PHP v5.0** button in the browser running on the host PC or directly on the BeagleBone
    Black by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A copy of that archive can be found in the `chapter_07/5.0-dev.zip` file in
    the book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, put the archive on your BeagleBone Black (if not already present)
    and then unzip it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If not installed, the `unzip` command can be retrieved by using the usual `aptitude`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to use the API, we simply need to use the following two lines in all our
    scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To simplify this operation, I created a file called `setup.php`, where I put
    these lines so that I can do a simple include in all my scripts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding file can be found in the `chapter_07/setup.php` file in the book's
    example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Facebook app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we need a new app that can use the API. In fact, all Facebook access must
    be done through a dedicated app, and the following steps are needed to create
    a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Facebook developers page at [https://developers.facebook.com/apps/?action=create](https://developers.facebook.com/apps/?action=create)
    and click on the **Add a New App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Website** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a name for your App (I used `BBB Plant Monitor`) and click on the **Create
    New Facebook App ID** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a category (I used `Entertainment`) and click on **Create App ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Site URL** with `http://localhost` and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that to be able to follow the preceding steps, you need a pre-existing
    Facebook account, otherwise the system will ask to register before continuing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your App has now been created. Then, in the **Next Steps** section, click on
    **Skip to Developer Dashboard**, and the panel shown in the following screenshot
    should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Facebook app](img/B00255_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **App ID** is visible by default, but the **App Secret** is hidden. Click
    on **Show**, enter your password again (if requested) to reveal the **App Secret**,
    and then copy and keep this information apart.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to finish the job, click on **Settings**, add `http://localhost` to **App
    Domains**, add your valid e-mail to **Contact Email**, and then click on **Save
    Changes**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting access to the Facebook account
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that our app is ready, we can start trying some code on it. However, before
    going live, we can create a `test user` account with different permissions that
    do not interfere with our real Facebook account to make sure that everything is
    set up correctly (under the **Roles** menu and then the **Test Users** section).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Test Users** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Edit** button and choose the **Get an access token for this test
    user** entry from the displayed list, accept the default settings, and then copy
    and keep the access token apart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to test our first script! The following code snippet of a simple
    script used to get basic information of a Facebook account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete code can be found in the `chapter_07/get_info.php` file in the
    book's example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script is really simple. As the first step, we need to define a new Facebook
    session with the `Facebook\Facebook` class, where the `APP_ID` and `APP_SECRET`
    values are taken from the preceding app information, and the `DEF_TOKEN` is the
    test that the user''s token generated previously. All this information is stored
    in a dedicated file named `config.php`, holding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that all information has been replaced by zeros or the `X` character,
    so you have to replace them with your custom values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the file can be loaded, as in the preceding command, with the following
    PHP command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Once the Facebook session has been created, we can start fetching data from
    it by using the `get()` method with different parameters. For example, by using
    the `/me` string, we can get the user's name and ID, while using the `/me/permissions`
    string, we can get the user's permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Facebook permissions are listed and explained well at [https://developers.facebook.com/docs/facebook-login/permissions/v2.2](https://developers.facebook.com/docs/facebook-login/permissions/v2.2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once collected, the user''s information is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The API is okay and the accessing information has been correctly written! So,
    let''s see how we can post a picture on the test user''s timeline. To do the trick,
    we must use the `post()` method, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: After creating the Facebook session, as explained previously, we have to call
    the `post()` method with the `/me/photos` string and proper parameters. In particular,
    you should pay attention to the `videoToUpload()` method that is used to specify
    the image to be published.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, supposing that the image is in the `webcam-shot.jpg` file, we can do our
    post with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify the post, we can log in with the test user account generated previously
    by selecting the **Log in as this test user** entry in the **Edit** button. The
    following screenshot shows what I got on my test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When finished, you have to log out from this test account and then log in again
    with your own account.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to go. Click on the **Status & Review** menu in the **Do you
    want to make this app and all its live features available to the general public?**
    section and click on **Yes**. Then, we need an access token for our Facebook profile,
    so we have to go to the **Tools & Support** top menu entry and then select the
    **Graph API Explorer** entry. On the new page, click on the **Graph API Explorer**
    drop-down list and then select our new application, **BBB Plant Monitor**. Then,
    click on the **Get Token** drop-down list and select the **Get Access Token**
    entry.
  prefs: []
  type: TYPE_NORMAL
- en: In the new window, you can add whatever permission you wish; however, we need
    only the extended permission `publish_actions`, so enable it and then click on
    the **Get Access Token** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this time, an authorization window such as the one shown in the following
    screenshot should appear (sorry for the non-English text):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, approve and select the audience of the new app (just you, your friends
    only, or public. Don't worry about it—this setting can be changed later from your
    profile settings).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, get the new access token and copy it into the `config.php` file and then
    rerun the `get_info.php` script. If everything works well, you should get something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Great, now I can try to post a picture to my Facebook timeline by using the
    `post_pic.php` script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a snippet of my Facebook timeline with the new
    post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Okay, it seems to work well! However, there is a problem. If you click on the
    **i** in the blue circle (near the beginning of your new access token), a window
    will appear showing the token's expiration time (that is, the time till your access
    token will work), and, as you can see, it's very short! Usually, it is only 1
    or 2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following screenshot for an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To increase this time, we can click on the **Open in Access Token Tool** button
    and then ask for an extended version by clicking on the **Extend Access Token**
    button. Then, a new extended token will be released, as shown in the following
    screenshot (note that it may happen that the system will request your profile
    password again before giving the extended token to you; if so, enter the password
    again):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting access to the Facebook account](img/B00255_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new token is now valid for 60 days.
  prefs: []
  type: TYPE_NORMAL
- en: Unluckily, I've not found a suitable way to either automate this procedure or
    to renew a token when the current one expires. When it happens, you have to repeat
    this procedure to get a new valid token and then update the `config.php` file
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It may happen that you get an error in executing the command. In that case,
    you can enable the debugging messages by using the `-d` option argument and then
    trying to execute the command again, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This is not related to the Facebook API itself, but to an authentication stage
    of the SSL certificate. A possible workaround is implemented by using the following
    patch. However, this decreases the security level of the whole API. You are warned!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The monitoring loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the Facebook API is up and running, we can start writing the code to
    implement our plant monitor.
  prefs: []
  type: TYPE_NORMAL
- en: As already stated, the monitoring system is so slow that using a Bash script
    can be the most *quick-and-dirty* way to resolve our problem. In fact, we simply
    need to read plant's data from all installed sensors and then do some simple actions.
    The most difficult part is to create a status file containing all measured data
    to be exchanged with the web interface (see the next section for this last part).
  prefs: []
  type: TYPE_NORMAL
- en: 'The monitoring loop is in the `chapter_07/plant_mon.sh` file in the book''s
    example code repository, while the relevant code is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are three main steps to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the plant's data from all sensors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exchange the data by managing the file addressed by the `STATUS_FILE` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a new picture according to the user input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first step is implemented by the `read_sensors` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is implemented by the `do_picture` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The second action needs some explanation. As already stated, we have to send
    the plant's data to the web interface. From the web interface, we have to read
    an input value (the moisture coefficient). To do that, I decided to use a normal
    file due to the fact that all operations are executed very slowly.
  prefs: []
  type: TYPE_NORMAL
- en: The only difficulty when using a file to exchange data is related to the fact
    that we must be sure to have exclusive access to it. To do so, we can use the
    `flock()` system call to ask the system for exclusive access to a file in order
    to exclude concurrent reads or writes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `flock()` in a Bash script, we have the `flock` command that, when
    used in a shell script, must be used as suggested by the `flock`''s man pages.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the `man flock` command for further information.
  prefs: []
  type: TYPE_NORMAL
- en: After grabbing the lock, we can start reading the file. It holds the system
    status in the JSON format because the file content must be shared with a PHP application
    that has predefined functions to manage such format. So, first we read the user
    input by using the `json_decode` function, then we calculate the estimated moisture
    level using the formula described at the beginning of this chapter, and, as the
    last step, we write back the status file in the JSON format by using the `json_encode`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the program enabling all debugging messages, we can use the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Then, the program can be stopped by running the *CTRL* + *C* keys.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to modify the line where I define the `INT_TEMP_DEV` variable holding
    the 1-Wire temperature sensor's ID according to the ID of your sensor, otherwise
    you're going to get a read error while executing the program.
  prefs: []
  type: TYPE_NORMAL
- en: Note that as the first step, the program reads all the sensors' data and then
    takes a picture in such a way that the web interface has whatever it needs to
    display the current system status to the user, as explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, I'm going to implement a simple web interface by using the HTML,
    PHP, and JavaScript languages. What I want to implement is something really simple
    that allows the user to see the plant's data and the last picture of the plant
    stored on the system. Then, they should be able to post that picture on the Facebook
    timeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core of the web interface is in the `chapter_07/plant.html` file in the
    book''s example code repository, while the relevant code is shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is a simple table where all the data is reported and where
    the user can change the moisture coefficient with the **Set** button. Then, the
    plant's picture is shown at the bottom with a **Post on Facebook** button to allow
    the user to post the current picture on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Set** button is managed by the following JavaScript code included in
    the `plant.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: So, each time we press the button, we generate a `POST` request holding the
    user input value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar manner, the **Post on Facebook** button is managed by the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we generate another `POST` request, but with different parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, the following JavaScript code is used for two main tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The first task is to request and then update the plant's data on the web page,
    while the second task is to update the plant's image.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that we use a trick to force the browser to refresh the plant''s image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Here, I appended a parameter with the current date to the image's attribute
    in order to force the browser to update the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the preceding codes, the reader can notice that when the PHP file
    is executed, the `handler.php` script is executed in turn too. The `handler.php`
    file manages the data on the server side, and the following snippet shows its
    relevant code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete code can be found in the `chapter_07/handler.php` file in the book's
    example code repository.
  prefs: []
  type: TYPE_NORMAL
- en: At the first step, we check for any `POST` requests and, in case, we serve them.
    In the first case, we update the moisture coefficient, while in the second case
    we call the `do_post()` function that is explained next to post the plant's image
    on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have to read (and eventually update) the system''s status file by
    using the `flock()` system call. In PHP, the file lock is managed by the `flock()`
    function, as follows, in order to acquire and release the lock on a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As the last action, we return the plant's data to the browser in the JSON format
    suitable for the calling JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now we''re at the last thing to show, which is the `do_post()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This function simply performs the same steps as the `post_pic.php` script shown
    previously in order to post the plant's picture on the user's Facebook timeline.
  prefs: []
  type: TYPE_NORMAL
- en: Final test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the prototype, I first executed the `chapter_07/SYSINIT.sh` file in
    the book''s example code repository to set up all peripherals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after checking that the web server is running, I started the `plant_mon.sh`
    plant monitor script, enabling all debugging messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Then, I set up the web server's root directory in order to implement the web
    interface. On my BeagleBone Black, the web server's root directory is `/var/www/`,
    but it may vary according to your system settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reader can take a look at the book *BeagleBone Essentials*, *Packt Publishing*,
    written by the author of this book, in order to get more information regarding
    how to set up a web server on the BeagleBone Black.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have the same configuration as mine, and the `plant_mon.sh` script is
    running, then your `/var/www/` directory should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: These files are created by the monitoring script, and they're, respectively,
    the lock file, the system's status file, and the last picture taken. Along with
    these files you also need the Facebook API (so we have to unzip its source code
    here, as shown previously) and the configuration files `config.php` and `setup.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have to add the `plant.html`, `plant.css`, and `handler.php` files
    for the the web interface with the `jquery-1.9.1.js` file that can be downloaded
    from [https://code.jquery.com/jquery/](https://code.jquery.com/jquery/) by using
    the browser on the host PC or directly on your BeagleBone Black with the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we must make sure that all files are owned by the system user `www-user`
    in order to allow the web server to read/write them without problems. To do so,
    we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works well, your web server''s root directory should look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, everything should be in place, so, on my host PC, I pointed my browser
    to the BeagleBone Black''s IP address on the emulated Ethernet line via a USB
    cable to display the web interface. A screenshot of my test is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that a similar result can be obtained by using a smartphone or tablet.
    In fact, if I connect my BeagleBone Black to my LAN and then point my smartphone''s
    browser to the BeagleBone Black IP address, I get what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final test](img/B00255_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that the IP address of the USB emulated Ethernet is usually `192.168.7.2`,
    while the IP address that the BeagleBone Black gets when it is connected to your
    LAN may vary according to your LAN settings. It can be retrieved by using the
    `ifconfig eth0` command on a BeagleBone Black's terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This time, we used several sensors to get important data about our lovely plant.
    Then, we also discovered a simple way to exchange this data between processes
    by using a normal file. We learned how to use the Facebook PHP API to do a post
    on a user's timeline by using a simple script.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll try to implement an intrusion alarm system with motion
    detection sensors that, in case of alarm, will start taking pictures of the intruders
    and then send them to the user's e-mail address.
  prefs: []
  type: TYPE_NORMAL
