- en: Chapter 6. Allowing Remote Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running commands remotely through SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a more secure SSH login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securely connecting to SSH without a password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting SSH access by user or group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting SSH with Fail2ban
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confining sessions to a chroot jail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring TigerVNC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tunneling VNC connections through SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter will help you provide remote access to your CentOS
    system in a security-conscious way. You'll learn how to execute commands on a
    remote system through SSH, configure the OpenSSH SSH server to increase security
    surrounding remote logins, and use key-based authentication to connect. You'll
    also learn how to allow or deny access to different users, configure Fail2ban
    to automatically block suspected IP addresses to protect your server from brute
    force attacks better, and restrict users to a chroot jail once they've logged
    in. The concluding recipes show you how to provide remote access to a complete
    desktop environment using VNC, and how to secure that access by tunneling VNC
    traffic through an SSH tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Running commands remotely through SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to execute one-shot commands on a remote system through
    **Secure Shell** (**SSH**). Having the ability to run commands without establishing
    a full interactive session can be convenient because you can avoid running a second
    terminal; everything can be done directly from the same command line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a remote system running the OpenSSH server and a local
    computer with the OpenSSH SSH client installed (both should be installed by default
    on CentOS). The examples assume that the remote system is configured with the
    IP address `192.168.56.100`. Also, you will need a user account available on the
    remote system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following examples show you how to run commands on a remote system from
    your local system through SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a command remotely, use `ssh` and specify the hostname or IP address
    of the target system followed by the command and its arguments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the command as a different user, provide a username with the remote
    system''s address:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the remote command requires `sudo`, supply `ssh` with the `-t` argument:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `-X` argument to forward the remote system''s X11 display to execute
    a graphical program:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use quotes when you execute a complex command, for example, a series of commands
    or when using I/O redirection. This avoids ambiguity between the local and remote
    shells:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can pipe input from the local system to remote commands that read from
    stdin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ssh` is used mainly to log in to a remote system and access an interactive
    shell because it''s possible that many people don''t know that commands can be
    executed remotely without a shell. This recipe presented several examples that
    illustrate how you can use `ssh` to run remote commands, each of which follow
    this general invocation pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Anything provided after the remote host is accepted as the command to execute
    remotely by `ssh` as demonstrated in the following two examples. The first invokes
    `uname` to print information about the remote system such as the kernel, processor,
    and operating system, and the second runs `id` to display the username of the
    current effective user ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`ssh` doesn''t launch an interactive shell when running these commands as there''s
    no reason for it to allocate a tty/pseudo-terminal; it acts as the shell itself
    and routes input and output between the remote and local systems. However, some
    commands require a terminal to function properly. For example, `sudo` uses the
    terminal to ensure the user''s password isn''t printed on the screen as they type
    it. Without a terminal, `sudo` refuses to run and reports back that `you must
    have a tty to run sudo`. We can provide the `-t` argument when executing such
    commands to force `ssh` to allocate a remote terminal resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-X` argument forwards the X11 display and allows us to run graphical programs.
    The program appears as if it were running in our local desktop environment, although
    in reality it''s running on the remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Graphical applications can be run using X11 forwarding
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure an invocation is interpreted how you intend, you may need to quote
    commands. This is especially true when using I/O redirection or when you are running
    multiple commands. To see why, consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`tar` outputs a list of files in the archive which is then redirected to create
    the `contents.txt` file. Everything happens remotely—`tar` runs on the remote
    system and the new file is created on the remote system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, here''s the same invocation but without quoting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`tar` still executes remotely, but the local shell interprets the redirect
    and `contents.txt` is created on the local system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I/O redirection is possible in both directions. That is, we can pipe input
    from the local system to the remote system''s stdin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `foo.txt` is read by `cat` and the contents are piped to the
    remote system. There, a remotely running instance of `cat` will be waiting to
    read the input. When it detects the end of the transmission, `cat` outputs what
    it received, which is then redirected to create `foo.txt` on the remote system.
    In essence, we've just made a copy of `foo.txt` from the local system to the remote
    system.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on running commands remotely
    through SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ssh` manual page (`man 1 ssh`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Piping with SSH ([http://linux.icydog.net/ssh/piping.php](http://linux.icydog.net/ssh/piping.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commandlinefu.com SSH commands ([http://www.commandlinefu.com/commands/matching/ssh/c3No/sort-by-votes](http://www.commandlinefu.com/commands/matching/ssh/c3No/sort-by-votes))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a more secure SSH login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSH is considered a secure alternative to older protocols, such as Telnet, rsh,
    and rlogin, because it encrypts the connection between the client and server.
    This encryption protects the traffic from any ne'er-do-wells who may be eavesdropping
    on the network. However, your system can still fall victim to the denial of service
    attacks or a malicious user who takes advantage of an idle session that was carelessly
    left unattended. This recipe takes the first steps in hardening SSH by updating
    the server's configuration to increase security surrounding remote logins.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system running the OpenSSH server. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to increase the security of your SSH logins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the SSH server''s configuration file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `LoginGraceTime` option. Uncomment it and change its value to `30`
    seconds to limit the amount of time users are given to provide their credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find and uncomment the `PrintLastLog` option and change its value to `yes`
    to show the user the time and location of their last login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uncomment the `Banner` option and set its value to `/etc/banner` to display
    a login warning to users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `/etc/banner` file with the following (or similar) verbiage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the SSH server for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To automatically log out sessions after 10 minutes of inactivity, create the
    `/etc/profile.d/timeout.sh` file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first option we adjusted in the SSH server''s configuration file was `LoginGraceTime`,
    to determine how long a user is allowed to enter their username and password.
    By default, the connection attempt times out if the user doesn''t provide their
    credentials within two minutes. We reduced this time to `30` seconds, but you
    can set a more appropriate value if you find this not to be long enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, setting the `PrintLastLog` option''s value to `yes` causes the time and
    location of the user''s last log in to be displayed. This is helpful because an
    unknown time or location can alert a user if their account has been compromised
    and is being used for unauthorized access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Next, we configured a login banner. A strongly-worded warning isn't likely to
    deter a malicious user, but many organizations require them to be prominently
    displayed when a user logs in for legal reasons. Such messages are considered
    to be sufficient notification in some jurisdictions to inform users that their
    actions are monitored and they should have no expectations of privacy for what
    they do on the system. This gives the organization better legal standing to prosecute
    any abuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the warning before the login prompt, we set `Banner` with the path
    to a file containing our message. Then we created the file with the desired text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The user is presented with a banner message before logging in to the remote
    system
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`nroff` can be used to justify the banner''s text:'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `**(echo -e ".ll 75\n.pl 0\n.nh"; cat) | nroff > /etc/banner**` ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`cat` reads text from stdin (press ***Ctrl*** + ***D*** when you''re finished)
    and both the echo''d instructions and the text are piped to `nroff` for formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.ll` tells `nroff` to set the line length at `75` characters. It''s a good
    idea to use a value less than `80` because the traditional terminal displays `80`
    characters per line.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.pl` sets the page length, and setting it `0` prevents `nroff` from adding
    additional whitespace after the text in an attempt to fill the length of some
    imaginary printed page.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.nh` prevents `nroff` from hyphenating words at the end of a line.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to display the banner after the user logs in instead of before,
    you can use the message of the day file instead. In this case, uncomment the `PrintMotd`
    option and set its value to `yes` and then save your text in `/etc/motd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we created the `/etc/profile.d/timeout.sh` file to set the `TMOUT`
    environment variable. Setting `TMOUT` under `/etc/profile.d` applies it globally
    to all users when they log in. To target individual users instead, or if you want
    to override the global value for specific users, you can place the export in their
    `~/.bash_profile` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now with the variable set, bash automatically closes the user''s session if
    it''s been inactive for the specified amount of time with the message `timed out
    waiting for input: auto-logout`. The value is given in seconds, with the recipe''s
    example closing idle sessions after 10 minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on tightening security
    on SSH logins:'
  prefs: []
  type: TYPE_NORMAL
- en: The `sshd_config` manual page (`man 5 sshd_config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 System Administrator''s Guide: OpenSSH ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CentOS Wiki: Securing OpenSSH ([https://wiki.centos.org/HowTos/Network/SecuringSSH](https://wiki.centos.org/HowTos/Network/SecuringSSH))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should I use a login banner? ([http://serverfault.com/questions/24376/should-i-use-a-login-banner-and-if-so-what-should-it-say](http://serverfault.com/questions/24376/should-i-use-a-login-banner-and-if-so-what-should-it-say))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securely connecting to SSH without a password
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to generate a key pair and set up key-based authentication
    for SSH sessions, allowing you to secretly connect to a remote system without
    using a password. Key-based authentication is considered more secure than using
    a password because a weak password can be easy to guess and a strong password
    can be easy to forget and more likely to be written down. In either case, an attacker
    has a fairly good chance of discovering a user's password. With key-based authentication,
    a user must supply the correct private key file, which is practically impossible
    to crack or spoof.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a remote system running the OpenSSH server and a local
    computer with the OpenSSH SSH client installed. Its examples assume that the remote
    system is configured with the IP address `192.168.56.100`. Also, you will need
    an available user account on the remote system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up key-based authentication for SSH sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the local computer, use the `ssh-keygen` command to create a pair of authentication
    keys. Accept the default path/filename for the keys and leave the passphrase empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `.ssh` directory if it doesn''t already exist in your remote home
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the contents of `id_rsa.pub` to `.ssh/authorized_keys` on the remote
    system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Secure the `authorized_keys` file''s permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that you can connect to the remote system without providing a password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat steps 2 through 5 for any additional remote systems you want to log in
    to using key-based authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Key-based authentication is considered more secure than using passwords because
    it''s nearly impractical to crack a suitable encryption key while brute forcing
    a password is trivial. This recipe used the OpenSSH suite''s `ssh-keygen` program
    to generate a new pair of keys, which we then used to authenticate our SSH session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`-C` embeds a brief comment in the key which is useful for identifying the
    owner or purpose of a key and `-b` sets the number of bits used for the key''s
    modulus. The more bits used, the larger the number that can be represented, which
    means greater resistance to cracking attacks. If `-b` isn''t provided, the default
    value is 2,048 bits. Based on the estimates of the rate at which computing power
    increases, 2,048 is generally thought to be suitable until around the year 2030
    (researchers developed a successful attack against 1,024-bit keys in 2010). A
    3,072-bit key is considered suitable beyond 2030.'
  prefs: []
  type: TYPE_NORMAL
- en: We accepted the suggested `~/.ssh/id_rsa` value as the name of the output file
    when prompted (this is where `ssh` looks for our private identity key by default
    when we connect to a remote server). We also didn't provide a passphrase. If we
    were to give one, then the key would be encrypted and we'd need to provide the
    password to decrypt the key every time we wanted to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'When `ssh-keygen` is finished, the private key `id_rsa` and the public key
    `id_rsa.pub` can be found in the `.ssh` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The pair of keys is generated for password-less authentication
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we created the `.ssh` directory in our home directory on the remote system.
    You can execute the `mkdir` command while being logged in to the remote system,
    otherwise you can execute the command remotely through SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we added the public key to `.ssh/authorized_keys` on the remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Because proper permissions help ensure the security of your keys, `ssh` won''t
    consider them safe to use if the permissions are too lax. The permissions on the
    `.ssh` directory should be read, write, and execute permissions only for the owner
    (`700`), read permissions for the owner and group, and write permissions for the
    owner (`640`) on `authorized_keys`. A simple `chmod` call ensures that everything
    is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When we connect, `ssh` sees the `id_rsa` file and sends our private key as part
    of the connection request. The server checks for the corresponding public key
    in the `authorized_keys` file, and if everything matches up then we're authorized
    and logged in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on using key-based authentication
    with OpenSSH:'
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 7 System Administrator''s Guide: OpenSSH ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH password versus key authentication ([http://security.stackexchange.com/questions/33381/ssh-password-vs-key-authentication](http://security.stackexchange.com/questions/33381/ssh-password-vs-key-authentication))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting SSH access by user or group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the role of your system and which user accounts are configured
    on it, you may not want all of its registered users to have access through SSH.
    This recipe shows you how to configure the SSH server to restrict remote user
    access by explicitly granting or denying the users access.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system running the OpenSSH server. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to restrict users'' SSH access:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the SSH server''s configuration file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `PermitEmptyPasswords` option. Uncomment it and set its value to `no`
    to disallow accounts with empty passwords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To disallow remote access with the `root` account, locate and uncomment the
    `PermitRootLogin` option and set its value to `no`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deny remote access for specific user accounts by adding an entry for `DenyUsers`.
    The option''s value should be a space-separated list of usernames you want to
    deny:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deny remote access for users who are members of a specific group by adding
    an entry for `DenyGroups`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `AllowUsers` entry to deny access to everyone except those in the list
    of permitted users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `AllowGroups` entry to deny access to everyone except those in the list
    of permitted groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the SSH server for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we uncommented `PermitEmptyPasswords` and set its value to `no`. This
    prevents user accounts that don''t have a password from being used to log in over
    SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Passwords are the first level of defense in protecting ourselves from malicious
    attacks using compromised user accounts. Without a strong password, anyone can
    log in simply by knowing the username. This is a scary thought because usernames
    can be easily guessed and sometimes are even publicly available in the form of
    e-mail addresses and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we uncommented the `PermitRootLogin` option and set its value to `no`.
    This prevents `root` from establishing an SSH session directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Such restrictions were of critical importance when protocols such as Telnet
    were used because the username and password were often sent across the network
    in plain text—an attacker could easily monitor the network traffic and capture
    the password. However, even though SSH makes this concern moot by encrypting its
    traffic, the password is still vulnerable from brute force cracking attacks. For
    this reason, it's wise to require users to authenticate using their unprivileged
    account first and then use `su` or `sudo` to elevate their privileges when necessary
    (refer to [Chapter 3](ch03.html "Chapter 3. User and Permission Management"),
    *User and Permission Management*).
  prefs: []
  type: TYPE_NORMAL
- en: The recipe then presented the `DenyUsers`, `DenyGroups`, `AllowUsers`, and `AllowGroups`
    options as a way to restrict SSH access on a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DenyUsers` option prohibits specific users from logging in. While other
    user accounts will be able to access the system remotely, the users listed under
    `DenyUsers` will see the message `Permission Denied`. The recipe''s example denies
    access to the users `bbarrera`, `jbhuse`, and `mbutterfield`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DenyGroups` option works similarly, but denies users based on their group
    membership; the following example denies access to anyone who''s a member of the
    `users` group or the `noremote` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The denial options are useful for blacklisting a small number of users. To
    block all users except for a select few, we use the allow options. `AllowUsers`
    denies access to everyone except those specified. `AllowGroups` is its counterpart
    allowing only those users who are members of the specified group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The options can also have values that use `*` and `?` as wildcards. `*` matches
    zero or more characters and `?` matches a single character. For example, the following
    denies all users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AllowUsers` and `AllowGroups` deny all users/groups except the ones they list.
    Be careful if you depend on SSH to administer your servers because it''s very
    easy to block yourself with these. Before logging out of your current SSH session,
    check that you can successfully log in using a second terminal. If there''s a
    problem, you''ll still be logged in with the first session and will able to fix
    the issue.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following for more information on restricting remote SSH access:'
  prefs: []
  type: TYPE_NORMAL
- en: The `sshd_config` manual page (`man 5 sshd_config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 System Administrator''s Guide: OpenSSH ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-OpenSSH.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH how to deny all users except for one? ([http://www.linuxquestions.org/questions/linux-security-4/howto-sshd-deny-all-users-except-for-one-368752/](http://www.linuxquestions.org/questions/linux-security-4/howto-sshd-deny-all-users-except-for-one-368752/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting SSH with Fail2ban
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A determined attacker may try to brute force a user's password to gain access
    or attempt repeated logins to consume network and system resources as part of
    a denial of service attack. Fail2ban can help protect you from such attacks by
    monitoring a server's log files, identifying suspicious activity, and automatically
    banning the IP addresses responsible for the activity. This recipe teaches you
    how to install Fail2ban to safeguard your system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system running the OpenSSH server. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`. The `fail2ban` package is hosted by the EPEL repository;
    if the repository is not already registered, refer to the *Registering the EPEL
    and Remi repositories* recipe in [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to protect your system with Fail2ban:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `fail2ban` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the jail configuration file `/etc/fail2ban/jail.local` using the following
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Fail2ban service and enable its automatic start-up when the system
    boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To view the `sshd` jail''s status, use `fail2ban-client` with the `status`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've learned how to install Fail2ban and configure automated IP blocking after
    several failed login attempts. You also learned how to manually ban and unban
    addresses using `fail2ban-client`.
  prefs: []
  type: TYPE_NORMAL
- en: A Fail2ban jail configuration brings together filter and action definitions
    to perform an activity whenever certain patterns are observed in a server's log
    file. Filters specify the pattern definitions for identifying interesting log
    entries, for example, repeated authentication failures. Actions, on the other
    hand, define the commands that run when a filter is matched. Fail2ban is shipped
    with several predefined filters for common servers such as Apache, MySQL, Sendmail,
    and SSH, and several predefined actions such as managing iptable entries to block
    and unblock IP addresses, sending e-mail notifications, and triggering DNS updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several jails defined in `/etc/fail2ban/jail.conf`. To activate the
    `sshd` jail, we created the `jail.local` file with entries that override and extend
    the default jail definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Intuitively, the `enabled` option enables or disables the jail. `maxretry`,
    which we set to `5`, is the number of failed login attempts permitted before Fail2ban
    enacts the ban. `bantime` sets how long the ban will last, which we set to `86400`
    seconds. With this configuration, users are allowed up to `5` failed attempts
    before their IP address is banned for 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: The existing definition from `jail.conf` already identifies the default port
    and the log file location. If you're running SSH on a nonstandard port, you can
    override the original definition's setting using `port`. The location of the SSH's
    log file can be overridden with `logfile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`fail2ban-client` is used to interact with the Fail2ban service. Its `status`
    command outputs information about the service''s current state, and if `status`
    is followed by a jail name then status information about the jail is returned
    instead. Perhaps of particular interest in the jail''s status is a list of IP
    addresses that have been banned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The jail's status output presents the list of banned addresses
  prefs: []
  type: TYPE_NORMAL
- en: The client also has `get` and `set` commands to inspect and update various properties
    of the running service. For example, `get sshd bantime` returns the configured
    ban duration. `set sshd bantime` temporarily updates the duration until the service
    is restarted.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can manually ban an IP address by setting the jail''s `banip` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'To manually unban an address, set `unbanip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Being able to manually unban addresses is important in case a legitimate address
    is banned for some reason. If there are addresses that should never be blocked,
    perhaps a test integration server executing failed logins on purpose, or perhaps
    an administrator''s computer, you can identify them using the `ignoreip` option
    in your `jail.local` configuration file and Fail2ban will avoid banning those
    addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on Fail2ban:'
  prefs: []
  type: TYPE_NORMAL
- en: The `fail2ban-client` manual page (`man 1 fail2ban-client`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fail2ban Wiki ([http://www.fail2ban.org/wiki/index.php/Main_Page](http://www.fail2ban.org/wiki/index.php/Main_Page))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permanently ban repeat offenders with Fail2ban ([http://stuffphilwrites.com/2013/03/permanently-ban-repeat-offenders-fail2ban/](http://stuffphilwrites.com/2013/03/permanently-ban-repeat-offenders-fail2ban/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the Fail2ban log ([http://www.the-art-of-web.com/system/fail2ban-log/](http://www.the-art-of-web.com/system/fail2ban-log/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confining sessions to a chroot jail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to set up a chroot jail. A chroot call changes the
    user's view of the filesystem hierarchy by setting a particular path as the root;
    for the user, the path appears as `/` and they are unable to traverse beyond it.
    This creates a sandbox or jail, confining the user to a small branch of the real
    hierarchy. Chroot jails are commonly used for security purposes, for example,
    user containment and honeypots and also for application testing and in recovery
    procedures.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system running the OpenSSH server. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure a chroot jail and confine users to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `cpchroot` script needed to copy commands and their dependencies
    into the chroot environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the script executable using `chmod`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/jail` directory and its subdirectories to mimic a root filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `chroot` script to copy the desired programs and commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the `terminfo` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the special device files under `/jail/dev` using `mknod`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a group for chroot''d users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `/etc/ssh/sshd_config` file with your text editor and add the following
    to the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the SSH server for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a new chroot''d user, create the user with `useradd` and assign them
    to the `sandbox` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, move their `home` directory to reside under the chroot `jail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To chroot an existing user, assign them to the `sandbox` group and move their
    `home` directory to the `jail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identifying and copying dependencies is tedious and error-prone if done manually.
    So, I''ve written a helper script to automate the process of finding and cloning
    programs with their dependencies into the jail. Our first steps were to download
    the script using `curl` and then make it executable using `chmod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The script is hosted on GitHub, but its direct URL was prohibitively long so
    I used a URL-shortening service to shorten the address. We need to provide `-L`
    for `curl` to follow any redirects (the service responds with a redirect to GitHub)
    and `-o` sets the name of the download, in this case `cpchroot`, in your `home`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're having problems because of the URL-shortening service, you can find
    the direct link by visiting [https://gist.github.com/tboronczyk/00d77b1baafd13daab3b](https://gist.github.com/tboronczyk/00d77b1baafd13daab3b),
    clicking on the **Raw** button, and then copying the URL that appears in your
    browser's address bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we created the `/jail` directory containing a directory structure that
    mimics the root filesystem. When a user logs in and is chroot''d, they and everything
    they do will be contained to `/jail`. They will not be able to traverse outside
    that directory, so we need to replicate the directory layout the programs expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We used `mkdir` with the `-p` option and took advantage of shell expansion
    to create most of the layout with a single command. CentOS sets up its top-level
    `/bin`, `/lib`, and `/lib64` directories as symbolic links to the corresponding
    directories under `/usr`, which we duplicated using `ln` within the `/jail` directory.
    The final layout looks like the following one presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The layout of the sandbox root mimics that of the host's root filesystem
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we used the script to copy the desired commands to the jail. The script
    does the hard work of finding each program''s binary and identifies all of the
    libraries it depends on, and then it copies everything into the appropriate location
    in the sandboxed filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Its first argument is the directory acting as our chroot'd root, and then following
    that is a list of one or more programs we want to make available to the user.
    The recipe provides a dozen programs as an example, and you should feel free to
    add or omit some as you see fit. At a minimum, you need a shell (`bash`). I recommend
    that you include at least `ls` and `pwd` so that the user can navigate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we copied the `terminfo` database to the `jail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Some programs, such as `screen`, `less`, and `vi`, use the `terminfo` database
    to make sure their output displays correctly. The database is a collection of
    files that describe the capabilities of different terminal types, such as the
    number of lines per screen, how to clear the screen, what colors are supported,
    and so on. If this information isn't accessible, users will be warned that the
    `terminal is not fully functional` and the output may be garbled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish making the `jail`, we created the `/dev/null`, `/dev/zero`, and `/dev/random`
    devices with the `mknod` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`mknod` is used to create special files such as character files and block files.
    These files are special because they can generate data (as is the case with `null`
    and `zero`) or represent physical devices and receive data. Both `null` and `zero`
    are character files, as indicated by the letter `c`, since we read from them one
    character at a time. Block files, on the other hand, operate with several characters
    at a time. A physical storage disk is often represented as a block device.'
  prefs: []
  type: TYPE_NORMAL
- en: We also need to provide a major and minor number when creating a character or
    block device. These values are predefined and understood by the kernel as to how
    the device file should behave. `1` and `3` are the major and minor numbers that
    define a null device. `1` and `5` define the file as a null byte source. You can
    see the full list of major and minor number assignments in the Linux Allocated
    Device document listed in this recipe's *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the chroot environment was set up, we turned our attention to configure
    the SSH server. First, we created the `sandbox` group, which can be assigned to
    any user we want contained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we added a `Match` block to the SSH server''s configuration file targeting
    the new group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '`Match` starts a new conditional section in the configuration file that applies
    only when its condition is matched. In this case, we''re matching the user''s
    group to `sandbox`. When the user is a member of the group, the `ChrootDirectory`
    option is applied and it sets `/jail` as the user''s root directory. Now when
    a user connects, anything they do will be confined to the chroot jail, including
    actions that happen automatically such as launching an interactive shell (`bash`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bash tries to place the user in their `home` directory after signing in. However,
    if their `home` directory isn''t accessible, the user will see the error message
    `Could not chdir to home directory` and find themselves in the root directory.
    To avoid this, we moved their `home` directory into the `jail`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might be tempted to specify the `home` directory when creating a new user,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**useradd -m -D /jail/home/jbhuse -G sandbox jbhuse**`'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this doesn't work. The `home` directory is created in the desired
    location, the user is chroot'd, and the path is viewed in relation to `/jail`
    so that bash looks for `/jail/jail/home/jbhuse`. This is why the recipe demonstrates
    moving the `home` directory as a second step. The entry in `/etc/passwd` stays,
    `/home/jbhuse` is interpreted as `/jail/home/jbhuse`, and all is right with the
    world.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following for more information on setting up chroot environments:'
  prefs: []
  type: TYPE_NORMAL
- en: The `sshd_config` manual page (`man 5 sshd_config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Configure SFTP with Chroot ([http://www.unixmen.com/configure-sftp-chroot-rhel-centos-7](http://www.unixmen.com/configure-sftp-chroot-rhel-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safely identify dependencies for chrooting ([http://zaemis.blogspot.com/2016/02/safely-identify-dependencies-for-chroot.html](http://zaemis.blogspot.com/2016/02/safely-identify-dependencies-for-chroot.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux allocated devices ([https://www.kernel.org/doc/Documentation/devices.txt](https://www.kernel.org/doc/Documentation/devices.txt))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring TigerVNC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtual Network Computing (VNC) works by capturing the display's frame buffer
    and making it available across the network. This recipe shows you how to install
    TigerVNC and configure it to provide remote users access to their graphical desktop
    environment as if they were physically in front of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires two systems, a CentOS system to host the VNC server (remote
    system) and a local computer with a VNC client to connect to it. It assumes that
    the remote system is running the OpenSSH SSH server and a graphical desktop environment
    such as GNOME or KDE. Administrative privileges are required on the remote server,
    either by logging in with the `root` account or through the use of `sudo`. The
    local computer is expected to have a VNC client installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install and configure TigerVNC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the remote system, install the TigerVNC server package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the example unit file provided with the package to `/etc/systemd/system`,
    adjusting its name to include the username of the person using VNC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the new unit file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `<USER>` placeholder that appears in the `[Service]` section''s
    `ExecStart` and `PIDFile` entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 2 to 5 for each user who will use VNC to connect to their desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload systemd''s configuration to make it aware of the new unit files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open ports `5900` through `5903` in the system''s firewall to accept incoming
    VNC requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The users using VNC should set the password they''ll use to authenticate with
    the VNC server using `vncpasswd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When a user wants to connect, specify a display number after `@` in the unit''s
    name when starting TigerVNC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop the server when it''s not in use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with the VNC server, the `tigervnc-server` package installs a `systemd`
    unit file to start and stop the server. However, there's some configuration we
    need to attend to before using it because the server runs under the user's account
    to obtain their desktop.
  prefs: []
  type: TYPE_NORMAL
- en: When TigerVNC starts, it connects to the X server and logs in to the user's
    desktop just as if the user was sitting in front of the system itself. This means
    each user needs their own instance of the server running and we need to configure
    it for each user. We made a copy of the original unit file found under `/usr/lib/systemd/system`,
    one for each user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The name of the copied file contains the username so that we can keep everything
    organized. They're placed under `/etc/systemd/system` because `systemd` looks
    in `/etc/systemd` for units before searching `/usr/lib/systemd` (in fact, many
    entries in `/etc/systemd` are symbolic links to their original files under `/usr/lib/systemd`).
    So, placing the copies there lets us keep the original intact and safeguards us
    from loosing our configuration in the event of an upgrade where the original until
    file is replaced.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This system has VNC access configured for several users
  prefs: []
  type: TYPE_NORMAL
- en: 'We replaced any occurrence of the `<USER>` placeholder under the `[SERVICE]`
    section in each configuration file with the appropriate username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The command specified in the `ExecStart` entry is invoked when we start the
    server using `systemctl start`; it uses `runuser` to run TigerVNC under the user's
    account. The `-l` (lowercase L) argument provides the username and `-c` specifies
    the command and its arguments that `runuser` will execute. The `PIDFile` entry
    specifies the directory in which the running process will keep track of its process
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dan Walsh, the author of `runuser`, wrote a blog entry entitled *runuser vs
    su* detailing the backstory behind the command. You can read it online at [http://danwalsh.livejournal.com/55588.html](http://danwalsh.livejournal.com/55588.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@` symbol appearing in the filename has special significance to systemd.
    Anything after it and before the file suffix is passed to the commands in the
    unit file replacing `%i`. This lets us pass limited information to the server,
    for example, the display number for TigerVNC to run on. When we start the server
    as shown in the recipe, `:1` is given after `@`. The value is parsed by systemd
    and TigerVNC is started on display 1\. If we use `:2`, the server will start on
    display 2\. We can start multiple instances of TigerVNC for different users or
    even for the same user as long as the display is different for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Traffic for the display''s corresponding port should be allowed by the firewall.
    Display 0 uses port `5900`, display 1 uses port `5901`, display 2 uses port `5902`,
    and so on. If you''re using FirewallD, the predefined `vnc-server` service opens
    ports `5900`-`5903`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need additional ports or if you don''t need to open the entire range,
    you can open just what you need using `--add-port`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The user needs to set a VNC password using `vncpasswd` before they can connect
    to the display. The password must be at least six characters long, although only
    the first eight characters are significant. Moreover, the password is stored in
    the user's `~/.vnc/` directory. In the light of these issues, it's recommended
    that the user doesn't use the same password as their account password. It's also
    wise to run the VNC server only when needed since anyone who knows the display
    number and password can connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user also needs a VNC client to connect from their local computer. CentOS
    users can install the `tigervnc` package to use TigerVNC''s client. Other popular
    clients are Vinagre for Ubuntu, RealVNC for TightVNC on Windows, and Chicken of
    the VNC for OS X:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The IP address or hostname for the remote system and the display (port) that
    VNC is running are needed to establish the connection. They can be provided in
    different ways depending on the client, but the standard format accepted by most
    clients appends the display to the system''s address, for example, `192.168.56.100:1`.
    The user will then be prompted for their password, and if all goes well they''ll
    be connected to the remote display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A user prepares to connect to a remote display using VNC
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on running TigerVNC and
    how systemd uses `@` in filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: TigerVNC ([http://tigervnc.org/](http://tigervnc.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 System Administrator''s Guide: TigerVNC ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-TigerVNC.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-TigerVNC.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ArchWiki: TigerVNC ([https://wiki.archlinux.org/index.php/TigerVNC](https://wiki.archlinux.org/index.php/TigerVNC))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@` symbol and `systemctl` ([http://superuser.com/questions/393423/the-symbol-and-systemctl-and-vsftpd/393429#393429](http://superuser.com/questions/393423/the-symbol-and-systemctl-and-vsftpd/393429#393429))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Systemd Units and Unit Files ([https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files](https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tunneling VNC connections through SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe showed you how to give remote access to the user's desktop
    through VNC. However, there are clearly some security concerns if the service
    is running on an untrusted network. Only the display number and password are required
    to connect, and the password can be relatively easy for a malicious user to crack
    given that only the first eight characters are significant. Moreover, the traffic
    is unencrypted and it may be snooped. To help mitigate these risks, this recipe
    teaches you how to route the VNC connection through an encrypted SSH tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires two systems, a CentOS system hosting the VNC server (remote
    system) and a local computer with a VNC client to connect to it. It assumes that
    the remote system is running the OpenSSH SSH server and TigerVNC server and is
    configured with the IP address `192.168.56.100`. It also assumes that you have
    administrative privileges. The VNC server should be configured as described in
    the previous recipe. The local computer should have the OpenSSH SSH client (`ssh`)
    and a VNC client installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to route VNC connections through an encrypted SSH tunnel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the remote server, open a `vncserver@.service` configuration file using
    your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `ExecStart` entry and add the `-localhost` argument to the `vncserver`
    command invoked by `runuser`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your change and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 to 3 as necessary for the other users' configuration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload systemd''s configuration to make it aware of the updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the VNC server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On your local system, establish an SSH session to the server with `-L` to define
    the tunnel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Connect to the tunnel's local endpoint (`localhost:1`) using a VNC client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to secure VNC by tunneling its traffic through SSH.
    We configured the TigerVNC server to only accept connections from its localhost
    and then set up a tunnel on the local client side to route traffic through an
    SSH connection. This helps mitigate some of the aforementioned security risks
    because proper authentication is needed to establish the tunnel and encrypt the
    VNC traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you edited the `ExecStart` command in the unit files used to start instances
    of the VNC server. The `-localhost` argument to `vncserver` instructs the server
    to communicate only with the local system; any incoming connections originating
    from the network will be refused:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, the user now needs to establish an SSH tunnel using `ssh`
    before they can connect to the remote display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The `-L` argument defines the tunnel as `local-port:target-host:target-port`.
    The target host and port represent the final destination in relation to the server
    `ssh` is connected to. For example, we know that the recipe is running the user's
    desktop on display 1 which uses port `5901`. We also know that TigerVNC server
    is running on `192.168.56.100` but configured to listen only to its localhost.
    This means, we need to connect to `localhost:5901` from `192.168.56.100`. Thus,
    `localhost:5901` is the target in relation to that system.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has an established tunnel, they can minimize the session's terminal.
    (Don't close it!) `ssh` is connected to the remote system while also listening
    on the local port (also `5901`). On the remote server, `ssh` has established a
    second connection to the target host and port. The VNC client will connect to
    the local port by using the address `localhost:1` where the traffic is then routed
    through the SSH tunnel to the remote server and then forwarded to the final destination.
  prefs: []
  type: TYPE_NORMAL
- en: The remote system acts as a gateway as traffic travels through it from the client's
    tunnel to the final destination. Keep in mind, unless a tunnel to the target has
    also been created on the remote server, the second leg of the data's journey is
    not encrypted. This isn't a concern for this recipe because the remote and target
    hosts are the same. If your final destination is anything other than localhost,
    ensure that the network is trusted or create a second tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Routing traffic with SSH in this fashion can be done to secure other services
    as well, for example, NFS, FTP, HTTP, POP3, and SMTP. The overall process is the
    same: configure the server to listen locally and then establish the tunnel on
    the client.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources to learn more about SSH tunneling:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ssh` manual page (`man 1 ssh`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing network traffic with SSH ([https://security.berkeley.edu/resources/best-practices-how-articles/securing-network-traffic-ssh-tunnels](https://security.berkeley.edu/resources/best-practices-how-articles/securing-network-traffic-ssh-tunnels))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH tunneling made easy ([http://www.revsys.com/writings/quicktips/ssh-tunnel.html](http://www.revsys.com/writings/quicktips/ssh-tunnel.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
