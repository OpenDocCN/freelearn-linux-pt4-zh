- en: Chapter 2. Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting a static IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding multiple addresses to a single Ethernet device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bonding two Ethernet devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the network firewall with FirewallD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the network firewall using iptables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a DHCP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an NFS server to share a filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an NFS client to use a shared filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving Windows shares with Samba
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter cover various networking tasks that should prove
    useful to you as a CentOS administrator. You'll learn how to configure a static
    IP address, bind multiple addresses to a single Ethernet device, and bond two
    devices together. You'll also see how to configure the system's firewall using
    FirewallD and iptables, and how to set up a DHCP server to distribute IP addresses,
    which allows other computers using dynamic networking configurations to access
    the network. The remaining recipes will teach you how to set up centralized file
    storage using NFS and Samba.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a static IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to configure a static IP address. Unless you configured
    a static address during installation, CentOS uses the Dynamic Host Configuration
    Protocol (DHCP) to obtain an IP address to communicate across the network. Using
    a dynamically assigned address is fine for most desktop and laptop systems, but
    those that host e-mail servers, file sharing and print services, and web servers
    should have an address that doesn't change. The static address provides a stable,
    known location on the network where users can access a system's services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and administrative
    privileges provided by logging in with the `root` account. It assumes that your
    primary Ethernet device is named `enp0s3` and is currently configured with DHCP.
    If your device is named differently, substitute its name appropriately in the
    following commands.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure a static IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Ethernet device''s configuration file, found under `/etc/ sysconfig/network-scripts`,with
    your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of `BOOTPROTO` to none:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the file, add the `IPADDR`, `NETMASK`, and `BROADCAST` entries
    to set the desired IP address. Assign them values that properly reflect your network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/image_02_001.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The interface is configured with a static IP address
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/etc/sysconfig/network` file using your editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `GATEWAY` entry to identify your network''s gateway:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the networking service for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you learned how to assign a static IP address to an Ethernet
    device. It assumed the name of your primary Ethernet device to be `enp0s3`, thus
    `ifcfg-enp0s3` would be the name of the device's configuration file. If your device
    is named differently (for example, `eth0`, `eno1677`, and so on) then you need
    to adjust the recipe's directions accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: First, we changed the value for `BOOTPROTO` from `dhcp`, the protocol used to
    obtain an IP address dynamically, to `none` since we are setting the address ourselves.
    Then we added the `IPADDR`, `NETMASK`, and `BROADCAST` entries to provide the
    details of the static IP address. Next, we specified the network's default gateway
    using `GATEWAY` in `/etc/ sysconfig/network`. This allows us to route traffic
    beyond the local subnetwork.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you restart the networking service, you can confirm the new address using
    the `ip` command. `ip addr show` will display information about the current state
    of your system''s network devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ip addr show displays your system's networking information
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on configuring network settings in CentOS, refer to the
    *Configure IP Networking* chapter in the RHEL 7 Networking Guide ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Configure_IP_Networking.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Configure_IP_Networking.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Binding multiple addresses to a single Ethernet device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to bind multiple IP addresses to a single Ethernet
    device. The ability to assign more than one address to the same device can be
    useful-the most obvious benefit is that you don't need to procure multiple Ethernet
    cards. The cost of hardware has dropped substantially, but IT budgets still run
    tight. Perhaps a less obvious benefit, but one more valuable, is the greater flexibility
    it gives when configuring network services. Different services, such as e-mail
    and websites, can run on the same system but be accessed using different addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that your primary Ethernet device is `enp0s3` and is configured with a static
    IP address. You'll also need administrative privileges provided by logging in
    with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to bind multiple addresses to the same Ethernet device:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a copy of the device''s configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the new file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the `UUID` entry entirely. If a `HWADDR` entry exists, delete that also.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `NAME` and `DEVICE` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of `IPADDR` to the IP address you wish to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the networking service for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you learned how to assign multiple IP addresses to the same
    Ethernet device. We made a copy of one of the original network configuration files,
    taking care to name it appropriately to create a virtual adapter, and edited its
    configuration details. Since the name of the first device's configuration is `ifcfg-enp0s3`,
    the new file is named `ifcfg-enp0s3:1` to create the first virtual adapter associated
    with that device. If you want to add more adapters (assign more IP addresses),
    repeat the steps using incrementing numbers, for example, `enp0s3:2`, `enp0s3:3`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the configuration file, we removed the `HWADDR` and `UUID` entries since
    they are not needed for a virtual adapter. Then we updated the `DEVICE` and `NAME`
    entries to give the adapter its own identify, and, of course, we updated the `IPADDR`
    entry to assign its IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple IP addresses are bound to an Ethernet device via a virtual adapter
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on binding multiple addresses
    to the same Ethernet device:'
  prefs: []
  type: TYPE_NORMAL
- en: Create Multiple IP Addresses to One Single Network Interface ([http://www.tecmint.com/create-multiple-ip-addresses-to-one-single-network-interface](http://www.tecmint.com/create-multiple-ip-addresses-to-one-single-network-interface))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign Multiple IP Addresses To Single Network Interface Card On CentOS 7 ([http://www.unixmen.com/linux-basics-assign-multiple-ip-addresses-single-network-interface-card-centos-7](http://www.unixmen.com/linux-basics-assign-multiple-ip-addresses-single-network-interface-card-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Secondary IP Addresses ([https://dbiers.me/adding-secondary-ip-addresses-centosrhel/](https://dbiers.me/adding-secondary-ip-addresses-centosrhel/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bonding two Ethernet devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to combine multiple Ethernet devices as a single
    network device in a configuration known as channel bonding. Channel bonding allows
    us to bind multiple devices together so that they appear as a single interface
    to servers running on the CentOS system. Its purpose is to improve your system's
    overall network performance and provide redundancy if one of the network devices
    fails.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with at least two Ethernet devices. It
    assumes that your primary Ethernet device is `enp0s3`. If your device is named
    differently, substitute the name appropriately in the recipe's commands. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to bond two Ethernet devices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `bind-utils` and `ethtool` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new configuration file for the bonded interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the file, substituting values for `IPADDR`, `NETMASK`,
    and `BROADCAST` that are appropriate for your network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the configuration file of the first device you wish to bond:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure `BOOTPROTO` is set to `none` and `ONBOOT` is set to `yes`. Then remove
    the `IPADDR`, `NETMASK`, and `BROADCAST` entries if they exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `SLAVE` and `MASTER` entries at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 5-8 for each additional device you want to bond.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the configuration file used by the kernel to control how the bonding
    interface should behave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register the bonding module with the system''s kernel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart networking services for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We began by creating a configuration file for the bonding interface at `/etc/sysconfig/
    network-scripts/ifcfg-bond0`. `BOOTPROTO` was set to `none` because the IP address
    is set statically, `DEVICE` gives a name to the interface, `USERCTL` was set to
    `no` to prohibit nonadministrative users from bringing the interface up and down,
    and `ONBOOT` was set to `yes` so that the interface will be automatically activated.
    We also gave the IP address information with `IPADDR`, `NETMASK`, and `BROADCAST`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we updated the configuration files for each device we want to bond. We
    made sure `BOOTPROTO` was set to `none` and there was no address information since
    the device will no longer need its own IP address. Adding the `SLAVE` and `MASTER`
    entries, we identified the device as being bound to the new `bond0` device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: By performing these steps, we have created a new virtual device known as the
    bonding master that will use our real Ethernet devices as slaves. If one slave
    device fails, the other slave will still be active, providing redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we created a new configuration file with our preferences for the kernel
    bonding module. The module is the kernel implementation of the bonding device
    and is responsible for coordinating the physical devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`miimon=100` specifies that MII link monitoring will occur every `100` milliseconds
    to verify that the physical devices are active. `mode=5` represents a basic configuration
    that doesn''t require any specific type of network switch support. It allows outgoing
    traffic to be distributed according to the current load on each slave device.
    There are five other modes which give you plenty of options in configuring how
    the devices work together, although you should be aware that some modes may require
    specific hardware support. Refer to [http://wiki.centos.org/TipsAndTricks/BondingInterfaces](http://wiki.centos.org/TipsAndTricks/BondingInterfaces)
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After making changes to the device''s configuration files, we registered the
    bonding kernel module using `modprobe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Two Ethernet devices are bound with the same IP addresses through the bonding
    adapter
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on bonding Ethernet devices CentOS, refer to the *Configure
    Network Bonding* chapter in the RHEL 7 Networking Guide ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Configure_Network_Bonding.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-Configure_Network_Bonding.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the network firewall with FirewallD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you'll learn how to configure the networking firewall using FirewallD. Starting
    with CentOS 7, FirewallD replaces iptables as the default firewall configuration
    utility (although iptables is still used behind the scenes by FirewallD). Based
    on which zones and services you configure, you can increase the network security
    of your server by controlling what traffic is allowed or disallowed to and from
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This collection of commands will show you how to perform several basic configuration
    tasks using FirewallD''s command-line client, `firewall-cmd`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To identify the currently active zones and which Ethernet devices are assigned
    to them, use the `--get-active-zones` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To temporarily change which zone a device is assigned to, use the `--zone`
    argument to specify the target zone and `--change-interface` to specify the Ethernet
    device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To permanently assign a device to a zone, add a `ZONE` entry to the device''s
    configuration file. This change will not take effect until the service has been
    restarted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To identify the current configuration for a zone, use the `--zone` argument
    to specify the target zone and include `--list-all`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To allow traffic through the firewall, use the `--add-service` or `--add-port`
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Traffic for common services and protocols such as HTTP and SMTP can be allowed
    by name. The following adds the `http` service which opens port `80` (the port
    used by Apache and other HTTP servers):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Traffic can always be allowed directly given the port and network protocol.
    The following opens port 8080 to TCP traffic, another port commonly used to serve
    web content:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To disallow traffic that is currently allowed through the firewall, use the
    `--remove-service` or `--remove-port` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To reload the firewall after making a change, use `--reload  `:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default installation of FirewallD makes several preconfigured zones available,
    for example, `public`, `dmz`, `work`, `home`, and `trusted`. Different interfaces
    can be assigned to different zones and have different rules applied. To see all
    of the available zones and their configuration, we can invoke `firewall-cmd` with
    the `--list-all-zones` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Most updates made to the firewall rules will take effect immediately but are
    temporary. We saw this earlier when we had to update the device''s configuration
    file and restart the service to make a zone change permanent. This lets us experiment
    with different settings before finalizing the configuration. When configuring
    services and ports, the `--permanent` flag is used to make the changes permanent.
    If you don''t provide the flag, the changes will take effect immediately but will
    only be temporary (not persist across a system reboot or restart of the firewall
    service):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Named services are preconfigured port settings that are common to a specific
    network service and are available for our convenience. For example, SSH traffic
    commonly consists of TCP packets destined for port 22, so the `ssh` service reflects
    this. In the examples, we used the `http` service, which configured port 80, the
    standard port used to serve web pages. While assigning the port directly has the
    same effect, services provide convenient, human-readable names and should be used
    when possible. To get a list of all available services, use `--get-services`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: firewall-cmd is a command-line client for configuring firewall rules
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Named services are defined as XML files under `/usr/lib/firewalld/services`.
    If you want to allow access for some traffic but a service isn't defined, and
    you would prefer to perform the configuration using a service instead of the port
    and protocol for the sake of readability, you can create a new service file in
    this directory. Copy an existing file as your starting point and modify it to
    suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on working with FirewallD, refer to the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'RHEL 7 Migration Planning Guide: Security and Access Control ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_%20Linux/7/html/Migration_Planning_Guide/sect-Red_Hat_Enterprise_%20Linux-Migration_Planning_Guide-Security_and_Access_%20Control.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_%20Linux/7/html/Migration_Planning_Guide/sect-Red_Hat_Enterprise_%20Linux-Migration_Planning_Guide-Security_and_Access_%20Control.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FirewallD ([http://fedoraproject.org/wiki/FirewallD](http://fedoraproject.org/wiki/FirewallD))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How To Set Up a Firewall Using FirewallD on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-using-firewalld-on-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the network firewall using iptables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to replace FirewallD with the iptables service
    and perform basic firewall configurations. iptables was the default method for
    managing the firewall's settings in CentOS prior to version 7\. Some administrators
    might prefer iptables because it's within their comfort level or maybe they have
    several older servers running in the data center and they want to maintain similarity
    as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will allow you to replace FirewallD with the iptables service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the FirewallD service and disable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `iptables-services` package which contains the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the service and register it so that it will start automatically when
    the system is booted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following collection of commands will show you how to perform several basic
    configuration tasks using `iptables`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `-L` flag to print the current configuration. Add the `--line-numbers`
    flag to display each rule''s ID number alongside it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to allow TCP traffic on port 80 from the `enp0s3`
    interface through the firewall:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To remove the rule that allows TCP traffic on port 80, execute `iptables -L
    --line-numbers` to find the rule''s ID and then use the following (replace `##`
    with the rule''s ID):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload iptables after making configuration changes for them to be in effect:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To replace FirewallD with the iptables service to manage the network firewall,
    we first stopped and disabled the FirewallD service; we don''t want multiple firewall
    daemons running since it would lead to conflicts. FirewallD uses iptables behind
    the scenes so iptables is already installed, but the iptables service isn''t.
    So, next we installed the `iptables-services` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We then saw how to perform basic configurations to allow and disallow traffic.
    For example, the recipe presented the command to add a rule that allows TCP traffic
    through port `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `-A` argument indicates that we wish to add a firewall rule and is followed
    by the rule type. Possible values are `INPUT`, `OUTPUT`, and `FORWARD`, which
    apply to incoming traffic, outgoing traffic, and traffic that is routed, respectively
    (if the system is configured as a router, for example). Since `INPUT` is specified,
    our rule applies to incoming traffic on port `80`.
  prefs: []
  type: TYPE_NORMAL
- en: The `-i` argument specifies the network interface that is monitored by the rule.
    In this case, the rule applies to `enp0s3`. Then, `--dport` specifies the traffic's
    destination port, in this case port `80`, and `-p` specifies the transport protocol,
    for example, either TCP or UDP.
  prefs: []
  type: TYPE_NORMAL
- en: The `-j` argument is the target action for **jump to**. With iptables, rules
    are strung together to make chains of filtering logic. Imagine iptables checking
    traffic against each rule we've specified; if the first rule doesn't match, it
    goes on to check the next rule, and the next, until a match is found. When the
    matching rule is found, iptables stops checking and *jumps *to the desired state.
    Possible states are `ACCEPT` to accept the traffic, `REJECT` to actively deny
    the connection, and `DROP` to silently ignore it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also saw how to display the rules that are currently defined using the `-L`
    flag and that using `--line-numbers` will display an identifier alongside each
    rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: iptables accepts or denies traffic based on the configured rules
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing a rule''s identifier is convenient if we want to delete it. By providing
    `-D`, the rule type (`INPUT`, `OUTPUT`, or `FORWARD`), and the ID, we can succinctly
    remove a rule from the chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can respecify the entire rule while substituting `-A` with
    `-D` to delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with iptables:'
  prefs: []
  type: TYPE_NORMAL
- en: How to Migrate from FirewallD to iptables on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-migrate-from-firewalld-to-iptables-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-migrate-from-firewalld-to-iptables-on-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to List and Delete iptables Firewall Rules ([https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules](https://www.digitalocean.com/community/tutorials/how-to-list-and-delete-iptables-firewall-rules))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 25 Most Frequently Used Linux iptables Rules ([http://www.thegeekstuff.com/2011/06/iptables-rules-examples](http://www.thegeekstuff.com/2011/06/iptables-rules-examples))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop versus reject ([http://www.chiark.greenend.org.uk/~peterb/network/drop-vs-reject](http://www.chiark.greenend.org.uk/~peterb/network/drop-vs-reject))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to set up your own DHCP server on CentOS. DHCP
    is used to assign IP addresses and other network configuration details on demand
    to a client. While a system configured with a static IP address will already know
    all the necessary networking details, a system configured to use DHCP broadcasts
    a request on the network and waits to receive a response from the DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only one DHCP server should be running on the network to prevent clients from
    receiving conflicting responses that can result in network instability. Many routers
    already have a DHCP service running on them, so check for this on your own network
    before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up a DHCP server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `dhcp` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the example configuration file provided by the package to serve as the
    starting point of your server''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the configuration file using your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the configuration with values that make sense for your environment.
    In particular, you''ll want to address the following options: `domain-name` and
    `domain-name-servers`, `subnet`, the `dynamic-bootp` range, `broadcast-address`,
    and `routers`. Here is an example configuration for a network of two subnets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the `dhcp` service and enable it to start at system boot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open ports `67` and `68` in the system''s firewall to allow traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A system configured to use DHCP will broadcast a request and wait to receive
    a response from the DHCP server. The server's response lets the client know which
    IP address, netmask, gateway information, and so on to use on the network. DHCP-provisioned
    addresses are usually leased, which means that after a set amount of time they
    expire and the client needs to send another request. The DHCP server, in addition
    to handing out connection details, must keep track of the addresses that have
    already been leased so that a client doesn't receive an address that's already
    in use by another system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We began by installing the `dhcpd` package, which contains the server and example
    configuration files. Copying the example configuration to use as a starting point
    for our own saves us from having to draft the entire configuration from scratch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the configuration file, there are several places where you need to provide
    values that make sense for your network. The minimal configuration file provided
    as an illustration in the recipe reflects a network divided into two subnets.
    The first subnet is `192.168.56.0/25` and the second is `192.168.56.128/25`. Each
    subnet has its own declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examining the first subnet declaration, the subnet''s ID is `192.168.56.0`
    with a netmask of `255.255.255.128`. The `range` option will restrict the DHCP
    server in assigning IP addresses in the range of `192.168.56.110` to `120` (the
    other addresses are still valid and are available for static assignment). Subsequent
    `option` entries provide the subnet''s broadcast-address and gateway, and override
    the domain name and nameservers defined globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuring a DHCP server properly requires an understanding of computer networking.
    It is a complex topic and, as such, we can''t discuss every option in detail.
    I advise you to read the manual page for `dhcpd.conf` for extra guidance. The
    page can be accessed using the `man` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The configuration file for dhcpd is documented in a manual page
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the DHCP server was configured and running, we then needed to poke a hole
    in the firewall to allow requests and responses to flow freely. DHCP requests
    occur using UDP and ports `57` and `58` (you can allow them using the service
    defined for FirewallD):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on setting up a DHCP server, refer to the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: The `dhcpd.conf` manual page (`man 5 dhcpd.conf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Networking Guide: DHCP Servers ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-DHCP_Servers.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Networking_Guide/ch-DHCP_Servers.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Quick Start: Setup CentOS 7 as a DHCP Server ([www.yoyoclouds.com/2015/01/quick-start-setup-centos-7-as-dhcp.html](http://www.yoyoclouds.com/2015/01/quick-start-setup-centos-7-as-dhcp.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet Calculator ([www.subnet-calculator.com](http://www.subnet-calculator.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an NFS server to share a filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network File System (NFS) is a protocol for a distributed filesystem. That is,
    we can store files to a directory on a remote server and clients can mount the
    share. The remote directory will appear to the client as if it were local, although
    all data saved to it resides on the server. This recipe shows you how to configure
    NFS on a server and expose the storage as a network share. (The next recipe will
    show you how to configure NFS on a client.)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up an NFS server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `nfs-utils` and `libnfsidmap` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a globally accessible directory which will serve as the root of the
    file share:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open /`etc/exports` and add the following entry to mark the directory for export
    by NFS. When done, save and close the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `exports` file is very picky. Make sure there's no space between the network
    and the parenthesized options as well as no spaces around the commas that separate
    the options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the necessary services and register them so that they will start when
    the server boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open ports `111`, `2048`, and `2049` in the firewall to allow traffic through:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you learned how to set up a shared network directory using NFS.
    After installing the appropriate packages, we created the shared directory, registered
    it to be exported, and started the necessary system services.
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/exports` is the configuration file that manages which filesystems are
    exported and how. We added an entry that identified the directory we want to export,
    followed by which clients they are exported to and the options that govern how
    the export will be treated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example, we make the share available to `192.168.56.0/24`, in other
    words, any host on the network. Alternatively, you can share the directory a single
    host or a range of hosts. An entry that shares the directory with a specific host
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `rw++` option allows both read and write access to the share. `sync` flushes
    any changes to a file immediately to disk. While writing to disk might make access
    to the file slower at times, the delay won't be noticeable unless your system
    is under high load, and it would seem like a fair trade-off for the safety that
    immediate flushes provide in the event of a crash.
  prefs: []
  type: TYPE_NORMAL
- en: NFS will effectively squash the root user's ownership when `root_squash` is
    provided by changing the owner to `nfsnobody`. This is a security measure that
    mitigates the risk of a root user on the client system attempting to write a file
    to the share with root ownership (otherwise a malicious user could store a file
    and mark it executable where it might be run with root privileges). If you want
    to squash the ownership of all files to `nfsnobdy`, you can use the `all_squash`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: NFS relies on a few other services, which is why we also enabled rpcbind and
    opened firewall ports for rpcbind and mountd. NFS works on top of the Remote Procedure
    Call (RPC) protocol, and rcpind is responsible for mapping the RPC-based services
    to their ports. An incoming connection from a client first hits the rpcbind service,
    providing an RPC identifier. Rpcbind resolves the identifier to a particular service
    (NFS in this case) and redirects the client to the appropriate port. There, mountd
    handles the request to determine whether the requested share is exported and whether
    the client is allowed to access it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information about configuring an
    NFS server:'
  prefs: []
  type: TYPE_NORMAL
- en: The Network Filesystem ([http://www.tldp.org/LDP/nag/node140.html](http://www.tldp.org/LDP/nag/node140.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Storage Administration Guide: NFS Server Configuration ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/nfs-serverconfig.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/nfs-serverconfig.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to setup NFS Server on CentOS 7 ([http://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-setup-nfs-server-on-centos-7-rhel-7-fedora-22.html](http://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-setup-nfs-server-on-centos-7-rhel-7-fedora-22.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring an NFS client to use a shared filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe continues where the previous recipe left off, showing you how to
    configure NFS on a client system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that an NFS server has been configured as explained in the previous recipe. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure an NFS client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `nfs-utils` and `libnfsidmap` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the directory which will serve as the mount point for the remote filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `rpcbind` service and register it so that it will start when the
    server boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mount the NFS share to the mount point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like the server side, the client side of NFS relies on RPC. So, we started
    and enabled the rpcbind service. The `mount` command is then used to mount the
    remote share:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The `-t` argument indicates the share's filesystem type, which, of course is, `nfs`.
    The location of the remote share is also provided, the IP address of the server
    and the directory of the shared data separated by a colon. Finally, the mount
    target is given.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manually unmount the share, the `umount` command is used with the mount
    point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also configure the system to mount the NFS share automatically at boot
    time. Open `/etc/fstab` using your editor and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The share will be automatically mounted when the system boots. Since `mount`
    can look up information in `/etc/fstab`, the invocation to mount the share manually
    becomes much simpler once it''s registered in this manner. You can now mount the
    share manually by providing just the `mount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information about configuring an
    NFS client:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mount` manual page (`man 8 mount`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an NFS Client ([http://www.tldp.org/HOWTO/NFS-HOWTO/client.html](http://www.tldp.org/HOWTO/NFS-HOWTO/client.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RHEL 7 Storage Administration Guide: NFS Client Configuration ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/nfs-clientconfig.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/nfs-clientconfig.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to setup NFS Server on CentOS 7 ([http://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-setup-nfs-server-on-centos-7-rhel-7-fedora-22.html](http://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-setup-nfs-server-on-centos-7-rhel-7-fedora-22.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving Windows shares with Samba
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to serve a Windows share from a CentOS system
    using Samba. Like NFS, a Windows share is a directory on a remote server that
    a client may access to store files. Samba is a server that understands the SMB
    protocol used by Windows so that it can export directories that a Windows client
    can mount.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. You'll
    also need administrative privileges provided by logging in with the `root` account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of your Windows workgroup is needed to configure Samba properly. Before
    you begin, on your Windows system in your network, run `net config workstation`
    and record the `Workstation domain` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image_02_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: net config workstation displays information about the Windows system's workgroup
    and domain
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Samba to share directories with Windows systems:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `samba` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a dedicated group for Samba users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the directory which will serve as the root of the file share. Set its
    group ownership to the new Samba users group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Samba''s configuration file using your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `workgroup` parameter in the `[global]` section to match the Windows
    workgroup name. Feel free to review the other parameters in the configuration
    file as each is clearly documented with helpful comments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the configuration file, add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the necessary services and register them so that they will start when
    the server boots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open ports `137`-`139` and `445` to allow the network traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For each user who will connect to the share, assign them to the users group
    and register the password they will use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you learned how to install and configure Samba to share a directory
    which a Windows client can access.
  prefs: []
  type: TYPE_NORMAL
- en: We started by doing a bit of research using the `net config` command to discover
    the Windows workgroup that our client belongs to. This is important because two
    systems on the same network but identifying themselves as part of different workgroups
    will not be able to communicate with one another. In the example, the workgroup's
    name was simply `WORKGROUP`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we installed the `samba` package and created a special group named `smbgroup`.
    We'll configure Samba so that any user account on the CentOS system will be able
    to access the share as long as it's assigned to the `smbgroup` group. Then we
    created the directory we would be sharing and set its group ownership to the new
    group.
  prefs: []
  type: TYPE_NORMAL
- en: We then edited Samba's configuration file, specifying the name of the Windows
    workgroup we looked up earlier for the `workgroup` value, and added a section
    to define the new share. We restricted the share so that only authenticated users
    belonging to `smbgroup` can access it by setting `guest ok` to `no` and `valid
    users` to `@smbgroup`. The `writable` entry allows users to create and update
    files on the share (otherwise the files would be read-only), and the `create mask`
    entry was used to specify the default file permissions that new files will be
    assigned in the Linux filesystem. The name `share` within brackets not only starts
    that configuration section but also serves as the name the share will be exported
    as (that is, `\\192.168.56.100\share`). You can export multiple shares as long
    as each name is distinct.
  prefs: []
  type: TYPE_NORMAL
- en: For each user account that will be used to connect to the share, we made sure
    it belonged to the `smbgroup` and used the `smbpasswd` command to specify a password
    the account would use to authenticate its SMB sessions. This password is maintained
    separately from the system's credentials and is valid only for authenticating
    to Samba, so a password different from the account's login password should be
    chosen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Managing Samba users is done using `smbpasswd`. The `-a` flag adds an entry
    in Samba''s account database, and we can delete a user from the database using
    the `-x` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Windows system, you can use the `net use` command to map the remote
    share to a drive letter. Once it''s mapped, the drive appears in the list of available
    drives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can map the drive through the Windows GUI, navigating through
    `Computer` | `Map network drive` | `Map network drive` in File Explorer while
    the **This PC** bookmark is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Samba share is available as a network mapped drive
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on working with Samba, refer to the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: The `smb.conf` manual page (`man 5 smb.conf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Samba on CentOS With Windows 7/8 ([https://rcollier.me/2013/07/30/using-samba-on-centos-with-windows-78/](https://rcollier.me/2013/07/30/using-samba-on-centos-with-windows-78/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install And Configure Samba Server In CentOS 7 ([http://www.unixmen.com/install-configure-samba-server-centos-7](http://www.unixmen.com/install-configure-samba-server-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
