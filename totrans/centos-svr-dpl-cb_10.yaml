- en: Chapter 10. Managing Web Servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache HTTP Server and PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring name-based virtual hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Apache to serve pages over HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling overrides and performing URL rewriting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing NGINX as a load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains recipes for working with the Apache HTTP Server to serve
    websites. You'll first learn how to install the server as well as PHP, a very
    common server-side scripting engine used to generate dynamic web content. Then
    you'll see how to serve multiple sites with the same server instance using name-based
    virtual hosting, encrypt the connection and serve content over HTTPS, and how
    to rewrite incoming URLs on the fly. We'll finish with looking at NGINX and its
    use as a reverse proxy to decrease load on the server while at the same time speeding
    up access to our sites for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache HTTP Server and PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have heard the acronym LAMP which stands for Linux, Apache, MySQL, and
    PHP. It refers to the popular pairing of technologies for providing websites and
    web applications. This recipe teaches you how to install the Apache HTTP Server
    (Apache for short) and configure it to work with PHP to serve dynamic web content.
  prefs: []
  type: TYPE_NORMAL
- en: First released over twenty years ago, Apache was one of the first web servers
    and it continues to be one of the most popular. Its task in the LAMP stack is
    to interact with the user by responding to their requests for web resources. Perhaps
    one of its selling points is its design that allows its functionality to be expanded
    with modules. Many modules exist, from `mod_ssl`, which adds HTTPS support to
    `mod_rewrite`, which allows you to modify the request URL on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: PHP is a scripting language for creating dynamic web content. It works behind
    the scenes and the output of a script is usually served by Apache to satisfy a
    request. PHP was commonly installed as a module (`mod_php`) that embedded the
    language's interpreter into Apache's processing, but nowadays, running PHP as
    a standalone process is preferred. This is the approach we'll take in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100`. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the official CentOS repositories install PHP 5.4\. The Remi repositories
    offer 5.5, 5.6, and 7.0 if you want to install a newer release. To install one
    of the 5.x versions, open the `/etc/yum.repos.d/remi.repo` file, locate the `enabled`
    option in the `[remi-php55]` or `[remi-php56]` section and set its value to `1`.
    For 7.0, update the `enabled` option found in `/etc/yum.repos.d/remi-php70.repo`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What happened to PHP 6? *It's a long story...*. The team of volunteers developing
    PHP was working on version 6, but the initiative faced many hurdles and was eventually
    shelved. To prevent confusion between the latest release and any blog postings
    that were written about PHP 6, it was decided that its version number would be
    bumped to 7\. In short, PHP 6 did exist but never achieved a proper release status
    and most of the cool features planned for 6 made it into PHP 5.3, 5.4, and 7.0.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install Apache HTTP Server and PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `httpd` and `php-fpm` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Apache''s configuration file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `ServerName` option. Remove `#` appearing at the start of the line
    to uncomment it and then change the option''s value to reflect your server''s
    hostname or IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `DirectoryIndex` option and add `index.php` to the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the end of the file, add the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes to the configuration and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that `mod_proxy` (listed as `proxy_module`) and `mod_proxy_fcgi` (`proxy_fcgi_module)`
    extension modules are enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both modules should appear in the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start Apache and PHP''s FPM service and enable them to start automatically
    when your system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `80` in the system''s firewall to allow HTTP requests through:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several ways to integrate PHP with Apache''s HTTP server to generate
    dynamic web content. Historically, using Apache''s `mod_php` module was the way
    to go, but now the preferred approach is to run PHP as a separate process, which
    the web server communicates with using the FastCGI protocol. So, we installed
    the `httpd` package for the Apache HTTP Server and the `php-fpm` package for the
    PHP interpreter and its process manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The PHP FastCGI Process Manager (FPM) is included in the core PHP distributions
    as of version 5.3\. Separating PHP from Apache encourages a more scalable architecture,
    and using a persistent PHP process reduces CPU overhead because a new interpreter
    doesn't have to be spawned for each request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache''s main configuration file is `/etc/httpd/conf/httpd.conf`, in which
    we updated the `ServerName` option to reflect our server''s hostname or IP address.
    While this step isn''t strictly necessary, if we don''t set the option then the
    server will write warning messages to its log files. Besides, it''s useful for
    the server to be able to identify itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we updated for the `DirectoryIndex` option by adding `index.php` to its
    list of values. When the user requests a resource that resolves to a directory,
    the server will look in that directory for a file that matches one of the names
    in the `DirectoryIndex` list. If found, Apache will return that file to satisfy
    the request. This behavior is what allows visitors to access a website''s home
    page with a URL such as `www.example.com` rather than `www.example.com/index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The order in which files are listed is significant. For example, if both `index.html`
    and `index.php` exist in the directory then `index.html` will be returned because
    it's listed before `index.php` in the option's list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we navigated to the end of the file to add the following proxy configuration.
    If the regular expression of `ProxyPassMatch` matches the incoming request then
    the server retrieves the given URL and returns that content instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Regular expressions are written using a special notation that describes how
    to match text. Most characters are matched literally, but some have special meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.`: This matches any character. The pattern `bu.` matches against the text
    `bud`, `bug`, `bun`, `bus`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+`: This matches the preceding element one or more times. The pattern `fe+t`
    matches `fet`, `feet`, and `feeet` and so on but not `ft`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*`: This optionally matches the preceding element any number of times. The
    pattern `fe*t` matches `ft`, `fet`, `feet`, `feeet`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`?`: This optionally matches the preceding element once. The pattern `colou?r`
    matches `color` and `colour`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`^`: This anchors the match to the beginning of the line. The pattern `^abc`
    only matches `abc` if `abc` appears at the beginning of the text (`^` has special
    significance when used in `[ ]`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$`: This anchors the match to the end of the line. The pattern `xyz$` only
    matches `xyz` if `xyz` appears at the end of the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[ ]`: This matches any of the characters given within the brackets. The pattern
    `co[lr]d` matches `cold` and `cord`. When the first character in `[ ]` is `^`
    then the list is negated; `co[^lr]d` matches `coed` but not `cold` or `cord`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`( )`: This groups elements and captures matches. The pattern `jump(ed)?` matches
    `jump` and `jumped`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want any of these special characters to be matched literally then you
    should escape them with a leading backslash, for example `foo\.html` will match
    `foo.html` instead of `fooahtml`, `foobhtml`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Special numeric variables like `$1` and `$2` contain the value of any captured
    matches. The order in which they are populated are the order in which the parentheses
    capture a match, thus `(foo)\.(html)` sets `$1` to `foo` and `$2` to `html`.
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, you should now be able to decipher that the regular
    expression `^/(.*\.php)$` captures the path and filename of the requested resource
    that end with the extension `.php`. The `$1` variable represents the captured
    path, so a request for `/about/staff.php` will be proxied as `fcgi://127.0.0.1:9000/var/www/html/about
    /staff.php` where PHP's Fast-CGI listener is listening to the local interface
    on port `9000`.
  prefs: []
  type: TYPE_NORMAL
- en: Apache's functionality is often extended through modules, and as a safeguard
    it's a good practice to wrap module-specific configuration options in an `IfModule`
    block. The opening of such blocks contain the name of the module and appear in
    angle brackets `< >`. The block's closing appears as `</IfModule>` just like closing
    an HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The directory out of which the server serves files from is set by the option
    `DocumentRoot`. The default value is `/var/www/html`, so any files we place there
    or in a subdirectory within it will be accessible. As an example to illustrate
    this, the distribution includes a sample `index.html` file, which we can use to
    verify that the server is running correctly; copy the `/usr/share/httpd/noindex/index.html`
    file to `/var/www/html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open your browser and navigate to the domain or IP address of the system.
    You should see the welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can copy Apache's default index page to the web directory to test whether
    the server is up and running
  prefs: []
  type: TYPE_NORMAL
- en: For PHP, you need to place a PHP file where it can be read by the Fast-CGI service.
    The proxy URL is `fcgi://127.0.0.1:9000/var/www/html/$1`, so that we can place
    our PHP files in `/var/www/html` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `info.php` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now save the file and then navigate to the page in your browser. You should
    see the output of PHP''s `phpinfo()` function providing detailed information on
    how PHP is configured and which of its modules are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PHP reports information about its environment and the request
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For security purposes, it's recommended that you delete the welcome `index.html`
    file if you copied it over and the `info.php` script after you verify everything
    works. The information they present can give malicious users more information
    about the set up of your web server than you'd like them to have.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with Apache
    and PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache HTTP Server Project ([http://httpd.apache.org/](http://httpd.apache.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PHP home page ([http://php.net/](http://php.net/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache `mod_proxy_fcgi` documentation ([http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html](http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Httpd Wiki: PHP-FPM ([http://wiki.apache.org/httpd/PHP-FPM](http://wiki.apache.org/httpd/PHP-FPM))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RFC-2616: HTTP/1.1 ([http://www.rfc-base.org/txt/rfc-2616.txt](http://www.rfc-base.org/txt/rfc-2616.txt))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring name-based virtual hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall from our discussions surrounding DNS in [Chapter 8](ch08.html
    "Chapter 8. Managing Domains and DNS"), *Managing Domains and DNS* a user's browser
    needs to translate a website's hostname to its IP address via DNS lookups before
    it can connect and retrieve the desired web content. You may also recall that
    this doesn't have to be a one-to-one mapping-more than one site can resolve to
    the same IP address. Apache is flexible enough so that the same server can serve
    more than one site by a configuration known as name-based virtual hosting.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe teaches you how to set up name-based virtual hosting. Each site
    has it's own configuration (often kept in its own configuration file for better
    organization). Based on the site name that appears in the request, Apache then
    selects from the available configurations to properly serve the desired site.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and running
    Apache as described in the previous recipe. Because we'll be connecting to the
    server via a domain name instead of an IP address, you'll need to make sure the
    name resolves to the correct address by updating your DNS records or adding entries
    to `/etc/hosts` first. Administrative privileges are also required, either by
    logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up name-based virtual hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Apache''s configuration file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the bottom of the file, add the following `Include` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the updated configuration and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `sites` directory referenced in the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a virtual host configuration file within the new `sites` directory for
    your first site:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the site''s configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the site''s document root referenced in the configuration options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat steps 4-8 for each additional site you will be hosting, using the host
    or domain name to create a unique directory path for each site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the HTTP server for the configuration changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring Apache to serve multiple domains is a matter of creating a `VirtualHost`
    definition for each site. This recipe organizes the definitions in their own file
    under the directory `/etc/httpd/sites` and then references them in the main `httpd.conf`
    configuration file using an `Include` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How you organize your sites is up to you. This recipe uses a scheme where each
    site is served from a path based on the domain name followed by the subdomain
    rooted in `/var/www`. The path `/var/www/example.com/www/html` contains the files
    for the site at `www.example.com`. Files for the site at `web.example.com` would
    be placed in `/var/www/example.com/web/html`. The `html` directory is simply the
    web-accessible root for the site. By including it instead of serving files out
    of `example.com/www` directly, we can place any supporting files outside the root
    which aren't mean to be accessed directly (for example, a script with configuration
    options for a PHP website), but still keep them organized with the rest of the
    site's files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Naming the publicly accessible directory root `html` is a convention, but its
    one that I find outdated since more than just HTML files are often served. I often
    name my own root directories `public` or `public_files` and update their references
    in the configuration file accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each definition for a virtual host is contained within a `VirtualHost` block.
    The opening provides the IP address of the interface on which the server is listening
    followed by the port number. `*` indicates that the definition applies to all
    of the system''s interfaces and `80` is the default port for HTTP traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Options that don''t appear explicitly in the definition are assumed to have
    the same settings as found in the main configuration, so at a minimum, the `ServerName`
    and `DocumentRoot` options need to be defined to make the definition unique. If
    you''re using PHP, you''ll want to provide the `ProxyPassMatch` option as well
    so that the requests are mapped to the correct PHP files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The order in which the virtual host definitions are loaded is somewhat important;
    the first one loaded acts as the default and will handle any requests that do
    not match any of the virtual hosts definitions. Prefixing the configuration files
    numerically, for example `10-www.example.conf`, can help you control the loading
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each request is logged to `/var/log/httpd/access_log` and any errors are logged
    to `error_log`. Of course, this is fine if you''re only serving one site. But
    when serving multiple sites, you may find it beneficial to route log entries to
    different files for different sites. The `CustomLog` option names a file where
    the access and general logging messages are written to and the format of the entries.
    `ErrorLog` specifies the file where the error messages are written. Both of these
    options can appear in a virtual host''s configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The second argument to `CustomLog` can be the format string itself or an alias
    that represents the format string. Format strings simply define what details are
    contained in the logged messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a slew of format specifiers available which are all documented in
    the Apache HTTPd Server''s documentation. Here''s a list of some of the more common
    ones you may use, while you can find a complete list online at [http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats](http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`%b`: This is the size of the response (in bytes) served back to the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%D`: This is the time taken to process the request in milliseconds (`%T` represents
    the time taken in seconds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%h`: This is the IP or hostname of the requesting system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%H`: This is the protocol used to make the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%m`: This is the method used to make the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%q`: This is the query string portion of the requested URI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%r`: This is the first line of the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%>s`: This is the request''s final status code (`%s` represents the initial
    status for requests that are redirected)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%t`: This is the time when the request was received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%u`: This is the username for authenticated requests when the request was
    received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%v`: This is the name of the server (`ServerName`) handling the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `LogFormat` option names a format string with an alias. For example, the
    `httpd.conf` file uses `LogFormat` to define strings named as `common` and `combined`,
    which can be used elsewhere. It''s a good idea to define your own alias for your
    virtual host logging and use the alias in the individual configuration files rather
    than having cryptic format strings scattered about. In `httpd.conf`, simply add
    your custom `LogFormat` entry in the same area as the `common` and `combined`
    entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can reference the alias in your sites'' configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After making the changes, restart Apache for the configuration to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever their destination, make sure the ownership/permissions your security
    context allow Apache runs to write to the log file. If the logs reside under `/var/log/httpd`
    then creating the necessary subdirectories should be sufficient. The server will
    create the log files itself when it starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you wish to keep the logs in another directory, perhaps such as
    `/var/www/example.com/www/logs`, the server may be blocked from writing to them.
    SELinux is enabled regardless of the filesystem permissions appearing sane. To
    fix the situation, first verify the security context with `ls -Z`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the `logs` directory is owned by the `apache` user, which Apache
    runs under, and the permissions on the directory should allow the server to create
    the log files. However, we can also see that the directory has inherited the label
    that identifies it as web content as indicated by `httpd_sys_content_t`. To fix
    the problem, we need to relabel the directory for logging purposes using `chcon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with virtual
    hosting:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Virtual Host documentation ([http://httpd.apache.org/docs/current/vhosts/](http://httpd.apache.org/docs/current/vhosts/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache `mod_log_config` documentation ([http://httpd.apache.org/docs/current/mod/mod_log_config.html](http://httpd.apache.org/docs/current/mod/mod_log_config.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirtualHost examples ([http://httpd.apache.org/docs/current/vhosts/examples.html](http://httpd.apache.org/docs/current/vhosts/examples.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CentOS Wiki: SELinux HowTo ([https://wiki.centos.org/HowTos/SELinux](https://wiki.centos.org/HowTos/SELinux))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Apache to serve pages over HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP traffic is sent in plain text across the network. In an untrusted environment,
    a malicious user can monitor and capture the traffic to spy on what sites you're
    visiting and what content you're reading. While such snooping isn't interesting
    if the victim is just reading the daily news or watching cat videos on YouTube,
    the user's credit card number, shipping address, and other details could be snagged
    if an e-commerce transaction were to take place unencrypted. To support encrypted
    traffic, Apache supports HTTPS. This recipe will teach you how to configure HTTPS
    support and protect your users' traffic from prying eyes no matter how benign
    the content is.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100` and is running
    Apache as described in the previous recipes. Administrative privileges are also
    required, either by logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to serve pages over HTTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a new key file and security certificate using `openssl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the server''s SSL module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `/etc/httpd/conf.d/ssl.conf` file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `SSLCertificateFile` option and update its value to point to the
    self-signed certificate file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `SSLCertificateKeyFile` option and update it to point to the encryption
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the server for the updated configuration to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `443` in the firewall to allow HTTPS traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apache HTTP Server comes with a default SSL/TLS configuration contained
    within a catch-all virtual host definition in `/etc/httpd/conf.d/ssl.conf`. With
    most of the configuration already done for us, all that's left is to install the
    SSL module, generate a new key and certificate, and update the configuration to
    point to our files.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we generated a new encryption key and signing certificate. If you''ve
    already read the *Configuring Postfix to use TLS* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing E-mails"), *Managing E-mails*, then you already know that
    the key is needed for secured communication and the certificate confirms the ownership
    of the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The recipe generates a self-signed certificate which is sufficient for personal
    use and intranet sites. The `req` option creates a new certificate and `-newkey`
    generates a new private key. The key is a 2048-bit RSA key and itself is not encrypted
    (`-nodes`), so we don't need to provide a passphrase to decrypt the key every
    time we start the web server. The certificate is an X.509 certificate (`-x509`)
    and is valid for 3 years (`-days 730`). The certificate's `CN` field must match
    the domain name of the site it will be used for.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the configuration file, the `SSLCertificateFile` option specifies the file
    that contains the certificate file and the key is identified using `SSLCertificateKeyFile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The server determines which virtual host configuration to use to handle a request
    by looking at the site's name in the incoming request. However, the original HTTPS
    implementation encrypted the request in its entirety between the web client and
    server, including the site's hostname, which raised a chicken and egg problem.
    The server needed to know which certificate to serve and couldn't know it without
    reading the request, and the client wanted a certificate that matched the site's
    domain before it would even send the request. It was impossible to use TLS with
    name-based virtual hosting and any encrypted site required its own dedicated IP
    address.
  prefs: []
  type: TYPE_NORMAL
- en: RFC-3546 (Transport Layer Security Extensions) modified the protocol so that
    the hostname could be sent unencrypted. This allowed the server to select the
    correct certificate to satisfy the client and opened the door for using TLS with
    virtual hosting. It took approximately ten years for the major browsers to support
    the change but we're pretty much there now Internet Explorer as of version 7,
    Mozilla Firefox as of version 2, and Google Chrome as of version 6 support what
    is known as Server Name Indication (SNI).
  prefs: []
  type: TYPE_NORMAL
- en: 'To server your virtual hosts over HTTPS, each site will need its own certificate
    and key. Then, add the `SSLEngine`, `SSLCertificateFile`, and `SSLCertificateKeyFile`
    options to the host''s configuration. The port number also needs to be changed
    in the configuration to `443`, the default port for HTTPS traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Although self-signed certificates are adequate for personal use and private
    network/intranet sites, most likely you'll want to use a trusted certificate for
    sites accessible on a larger scale. However, depending on the Certificate Authority
    and the specifics of your request, purchasing a trusted certificate can be expensive.
    If you need only a basic trusted certificate, then you might want to investigate
    whether Let's Encrypt will meet your needs. Let's Encrypt is a project offering
    an automated, self-service model for generating trusted certificates for free.
  prefs: []
  type: TYPE_NORMAL
- en: To use *Let's Encrypt*, you'll need to install the `certbot` package available
    in the EPEL repository (refer to the *Registering the EPEL and Remi repositories* recipe
    in           [Chapter 4](ch04.html "Chapter 4. Software Installation Management"),* Software
    Installation Management* if you haven't already enabled the repository). Then
    run the `certbot certonly` command and follow the prompts to request your certificate.
    Full instructions can be found online in the Let's Encrypt/Certbot User Guide
    at    [http://letsencrypt.readthedocs.io/en/latest/using.html](http://letsencrypt.readthedocs.io/en/latest/using.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few caveats to Let's Encrypt. First, the certificates are only valid
    for three months; you'll need to request a new certificate every 90 days. It also
    won't generate certificates for IP addresses. Also, it rate limits requests which,
    although necessary to help prevent abuse, causes issues for those using a dynamic
    DNS service such as DynDNS or NoIP to make their sites accessible. For Let's Encrypt
    to be a viable option for you, you'll need a proper domain and access to the web
    system to automate the renewal. If you're running a home server or using a shared
    hosting provider, then Let's Encrypt is probably not for you.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for working with HTTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SSL/TLS Strong Encryption: How-To ([http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html](http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create an SSL Certificate for Apache on CentOS 7 ([http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7](http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to secure Apache with Let's Encrypt on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling overrides and performing URL rewriting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to use `mod_rewrite`. I mentioned `mod_rewrite`
    earlier; it is a module for Apache that allows us to modify the URL and resolve
    it to different resources. There are many reasons one would want to do this. For
    example, perhaps you moved some files and their URL changed, but you don't want
    any links that exist elsewhere still pointing to the old destinations to be broken.
    You can write a rewrite rule that matches the old locations and updates the URL
    on the fly to successfully satisfy the request. Another example is SEO; you may
    have long, unfriendly canonical URLs for a resource but want something shorter
    and more memorable. The friendly URLs can be mapped to the canonical URL behind
    the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100` and is running
    Apache as described in the previous recipes. Administrative privileges are also
    required, either by logging in with the `root` account or through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to perform URL rewriting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/etc/httpd/conf/httpd.conf` file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `Directory` section that defines various options for your document
    root. Find its `AllowOverrides` option and update the value from `None` to `All`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart Apache for the configuration update to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the `mod_rewrite` module (identified as `rewrite_module`) is available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `.htaccess` in your document root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `.htaccess` file, add `RewriteEngine` to turn on the URL rewriting engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `Rewrite` rules that describe the desired redirects. For example, the following
    rule redirects all requests without a file extension to a PHP file of the given
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.htaccess` files are supplemental configuration files that reside in the
    sites' directory structure. When configured, Apache searches for an `.htaccess`
    file and applies the option settings in it while satisfying a request. Of course,
    searching and loading configuration values for each request does have a slight
    performance impact, but its trade-off increases flexibility. For example, the
    server doesn't need to be restarted for configuration changes in an `.htaccess`
    file to take effect. In a shared-hosting environment, savvy clients can tweak
    the server's behavior for their own sites without asking a server administrator
    or requiring access to the main configuration files in `/etc/httpd` (which may
    contain sensitive configuration values). Even web applications that rely on specific
    server features might include an `.htaccess` file with the necessary configuration
    to make its deployment easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache doesn''t allow the use of the `.htaccess` files to override the server''s
    configuration by default. To enable it, we need to update the `AllowOverrides`
    option in the appropriate context and then restart the server. This recipe made
    the change in the section that applies to the web root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using virtual hosting, be sure to put the `AllowOverrides` option
    in your site's configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A value of `None` causes the server to ignore any `.htaccess` files. Apart
    from that, not all options are allowed in an `.httaccess` file. The most common
    ones found in the files pertain to rewriting requests or directory-specific access.
    Those that can appear are grouped under different categories and we can specify
    the category of options that will be allowed to be overridden. The possible group
    names are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AuthConfig`: This allows overriding the authorization options (`AuthUserFile`,
    `AuthDBMUserFile`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileInfo`: This allows overriding request-related options (`ErrorDocument`,
    `Redirect`, `RewriteRule`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Indexes`: These allow index-related options to be overridden (`DirectoryIndex`,
    `IndexOptions`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Limit`: This allows the access options to be overridden (`Allow`, `Deny`,
    and `Order`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`All`: This allows overriding all of the option groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since `AllowOverrides` applies to the directory level, it''s possible to allow
    or deny different overrides in different directories. For example, overriding
    can be disabled across a site, but then the authorization options can be overridden
    for a `private` directory so that the specific authorization databases can be
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you have full control over Apache and you want to place everything in
    the main `httpd.conf` files for performance reasons, allowing rewrite options
    to be overridden with `FileInfo` lets you devise and troubleshoot your rules without
    restarting the server after each change. You can then migrate the rules to the
    main configuration file once you're certain they're correct, and turn off overrides.
  prefs: []
  type: TYPE_NORMAL
- en: '`rewrite_module` injects itself into the server''s request handling workflow
    and can change what the requested URL looks like on the fly, given what we provide
    in our ruleset. Although the module is installed by default, we still need to
    explicitly enable URL rewriting with `RewriteEngine on`. Beyond that, the two
    most important rewrite options are `RewriteRule` and `RewriteCond`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RewriteRule` option specifies a regular expression against which the URL
    is compared. If it matches, then the given substitution takes place. Positional
    variables such as `$1` can be used in the substitution to reference captured pattern
    matches. In our recipe, the rule matches the path (such as `/about` or `/contactus`)
    and rewrites it to direct the user to a PHP script of the same name (`about.php`
    or `contact.php`), thus hiding the fact that we''re using PHP from our users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We also can provide flags that affect how the request is returned. The `NC`
    flag, for example, performs the pattern matching case insensitively. The `L` flag
    stops the engine and returns the URL without any further rule processing. Also
    common are `R`, which forces a redirect (an HTTP status code is usually given,
    for example `R=301`), and `QSA`, which appends the query string from the original
    URL to the new URL.
  prefs: []
  type: TYPE_NORMAL
- en: The `RewriteCond` option gives a condition that must pass before evaluating
    a `RewriteRule`. The condition is a mix of regular expression matching, variables,
    and test operators. Special variables are available which we can use to reference
    pieces of the URL, such as the hostname (`%{HTTP_HOST}`), the requested file (`%{REQUEST_FILENAME}`),
    and the query string (`%{QUERY_STRING}`), or details about the environment/request,
    such as cookies (`%{HTTP_COOKIE`}) and user agent strings (`%{HTTP_USER_AGENT}`).
    The `-d` operator tests whether the path is a directory, `-f` tests whether the
    path is a file, and `!` negates the match. `RewriteCond` can also accept a handful
    of flags, such as `NC` flag to make comparison without regard to case sensitivity
    and the `OR` flag to join multiple options in an *or* relationship (multiple options
    are implicitly treated as *and*).
  prefs: []
  type: TYPE_NORMAL
- en: 'A very common rewrite that uses both `RewriteCond` and `RewriteRule` is one
    that directs the user to a main `index.php` file when the request doesn''t match
    an existing file or directory. This is used a lot with web applications that route
    all requests through a central control point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The first `RewriteCond` option checks whether the request is for an existing
    file and the second checks the same for an existing directory. If the request
    is neither for a file nor a directory, then the `RewriteRule` option maps the
    request to `index.php`. Any query string that may be present is included and it's
    marked as the last action, so no further rewriting will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many people jokingly refer to rewriting as black magic. Indeed, it''s impressive
    how powerful `mod_rewrite` is and how it transforms requests, and it can be frustrating
    when you can''t seem to figure out the proper incantation to make your rule work
    as desired. In this case, you may want to turn on logging to gain insight into
    how the engine views the request. To enable logging, use the `RewriteLog` option
    to specify a log file where messages can be written to, and use `RewriteLogLevel`
    to specify the verbosity. Typically, a value of `5` for `RewriteLogLevel` is sufficient.
    They can be added to your `.htaccess` file and removed later after you''re confident
    that your rules are correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on rewriting URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache `mod_rewrite` documentation ([http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL rewriting guide ([http://httpd.apache.org/docs/2.0/misc/rewriteguide.html](http://httpd.apache.org/docs/2.0/misc/rewriteguide.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL rewriting for the fearful ([https://24ways.org/2013/url-rewriting-for-the-fearful](https://24ways.org/2013/url-rewriting-for-the-fearful))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing NGINX as a load balancer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High traffic websites can be distributed to different servers, either to better
    spread out the workload or to achieve redundancy. Each server in the cluster of
    systems would have their own copy of the website or web application's files and
    be capable of satisfying the user's request. The trick then is to route the user's
    request to one of these servers in an orderly fashion. There are different approaches
    to this, but a common one is to set up a load balancer or reverse proxy server.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX is somewhat newer to the scene than Apache; written a little over a decade
    ago specifically to handle high-load connections, it can function as a web server,
    proxy, cache, and load-balancer. In this recipe, we'll see how to set up NGINX
    as a load balancer to proxy requests between the client and a cluster of Apache
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that you have other systems configured with Apache to serve a website as described
    in the earlier recipes; we'll refer to these systems using the IP addresses `192.168.56.20`
    and `192.168.56.30`. The package for NGINX is hosted by the EPEL repository; if
    the repository is not already registered, refer to the *Registering the EPEL and
    Remi repositories* recipe in [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*. Administrative privileges are
    also required, either by logging in with the `root` account or through the use
    of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up reverse proxy using NGINX:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `nginx` package from the EPEL repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the NGINX server''s configuration file with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `http` block, add a new `upstream` block to identify the servers
    in your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the `location` block and add a `proxy_pass` option that references the
    `upstream` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes to the configuration and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the server and enable it to start automatically when your system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `80` in the system''s firewall to allow HTTP requests through:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As usual, we began by installing the program''s package, this time `nginx`.
    The package is available in the EPEL repository. Once installed, we updated its
    configuration, identifying the servers in our cluster and then proxying requests.
    First, we added an `upstream` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '`cluster` is simply a name we assigned to this group of servers so that we
    can refer to the group by name. You can have multiple upstream blocks if you are
    balancing multiple clusters. Each `server` entry within it gives the IP address
    or hostname of one of the systems running the site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we found the main `location` block and added a `proxy_pass` parameter.
    `proxy_pass` will forward the incoming request to one of the systems in our cluster
    group and return the response to satisfy the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Communication between NGINX and the hosting web servers is done over `http`
    since that's the protocol specified in the value for `proxy_pass`. This is fine
    because the clustered systems would be running behind the load balancer on a trusted
    network. If your site is to be served over HTTPS, it's NGINX that will need to
    handle the TLS negotiation as it's the public server point seen by the client;
    the client is unaware of anything behind the balancer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure NGINX to handle HTTPS requests, within the `server` block update
    the `listen` options to listen on port 443\. Then add entries with the `ssl_certificate`
    and `ssl_certificate_key` options to identify the certificate and key, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the changes are made and the configuration file is saved, open port `443`
    in your firewall and restart NGINX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Round-robin is the default approach for load balancing. This means the first
    request is proxied to the first server in the cluster, then next to the second
    server, and so on. When NGINX reaches the end of the list, it starts again from
    the top of the list, proxying the next request to the first server. There are
    other strategies we can use, for example, weighted balancing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform weighted balancing, we assign a weight to any of the servers and
    it will handle that number of requests per iteration. Here, the first server will
    handle five requests before NGINX proxies anything to the second server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: When using load balancing, remember that any one web server isn't guaranteed
    to receive the next request sent by a user. If you're balancing access to a web
    application that uses sessions, this can be problematic. You may want to consider
    storing session data on a central system that each web server has access to, perhaps
    using a database such as Redis or Memcache.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend that you avoid any balancing strategy that relies on session persistence.
    The post at [http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil](http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil)
    offers a good overview of their problems.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with NGINX
    and load balancing:'
  prefs: []
  type: TYPE_NORMAL
- en: The NGINX website ([https://www.nginx.com/](https://www.nginx.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install NGINX on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring HTTPS servers ([http://nginx.org/en/docs/http/configuring_https_servers.html](http://nginx.org/en/docs/http/configuring_https_servers.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NGINX as a load balancer ([http://nginx.org/en/docs/http/load_balancing.html](http://nginx.org/en/docs/http/load_balancing.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to store PHP sessions in Memcache ([http://www.scalescale.com/tips/nginx/store-php-sessions-memcached](http://www.scalescale.com/tips/nginx/store-php-sessions-memcached))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
