- en: Chapter 10. Managing Web Servers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：管理 Web 服务器
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下食谱：
- en: Installing Apache HTTP Server and PHP
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Apache HTTP 服务器和 PHP
- en: Configuring name-based virtual hosting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置基于名称的虚拟主机
- en: Configuring Apache to serve pages over HTTPS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Apache 通过 HTTPS 提供页面
- en: Enabling overrides and performing URL rewriting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用重写并执行 URL 重写
- en: Installing NGINX as a load balancer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NGINX 作为负载均衡器
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter contains recipes for working with the Apache HTTP Server to serve
    websites. You'll first learn how to install the server as well as PHP, a very
    common server-side scripting engine used to generate dynamic web content. Then
    you'll see how to serve multiple sites with the same server instance using name-based
    virtual hosting, encrypt the connection and serve content over HTTPS, and how
    to rewrite incoming URLs on the fly. We'll finish with looking at NGINX and its
    use as a reverse proxy to decrease load on the server while at the same time speeding
    up access to our sites for the user.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了如何使用 Apache HTTP 服务器来托管网站的食谱。首先，您将学习如何安装服务器以及 PHP，这是一个非常常见的服务器端脚本引擎，用于生成动态的
    Web 内容。接下来，您将了解如何通过基于名称的虚拟主机在同一个服务器实例上托管多个网站，如何加密连接并通过 HTTPS 提供内容，以及如何动态重写传入的
    URL。最后，我们将介绍 NGINX 及其作为反向代理的使用，能够减少服务器负载，同时加速用户访问我们的网站。
- en: Installing Apache HTTP Server and PHP
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Apache HTTP 服务器和 PHP
- en: You may have heard the acronym LAMP which stands for Linux, Apache, MySQL, and
    PHP. It refers to the popular pairing of technologies for providing websites and
    web applications. This recipe teaches you how to install the Apache HTTP Server
    (Apache for short) and configure it to work with PHP to serve dynamic web content.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听过 LAMP 这个缩写，它代表 Linux、Apache、MySQL 和 PHP。它指的是提供网站和 Web 应用程序的流行技术组合。本食谱将教你如何安装
    Apache HTTP 服务器（简称 Apache）并配置它与 PHP 一起工作，以提供动态的 Web 内容。
- en: First released over twenty years ago, Apache was one of the first web servers
    and it continues to be one of the most popular. Its task in the LAMP stack is
    to interact with the user by responding to their requests for web resources. Perhaps
    one of its selling points is its design that allows its functionality to be expanded
    with modules. Many modules exist, from `mod_ssl`, which adds HTTPS support to
    `mod_rewrite`, which allows you to modify the request URL on the fly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 最早在二十多年前发布，是最早的 Web 服务器之一，并且一直是最受欢迎的服务器之一。它在 LAMP 堆栈中的任务是通过响应用户对 Web
    资源的请求与用户互动。它的一个卖点可能就是它的设计，允许通过模块扩展其功能。有许多模块，例如 `mod_ssl`，它为 Apache 添加了 HTTPS 支持，以及
    `mod_rewrite`，它允许您动态修改请求的 URL。
- en: PHP is a scripting language for creating dynamic web content. It works behind
    the scenes and the output of a script is usually served by Apache to satisfy a
    request. PHP was commonly installed as a module (`mod_php`) that embedded the
    language's interpreter into Apache's processing, but nowadays, running PHP as
    a standalone process is preferred. This is the approach we'll take in this recipe.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 是一种用于创建动态 Web 内容的脚本语言。它在后台工作，脚本的输出通常由 Apache 提供，以响应请求。PHP 通常作为模块（`mod_php`）安装，将语言的解释器嵌入到
    Apache 的处理过程中，但现在，运行 PHP 作为独立进程更受欢迎。这就是我们在这个食谱中采用的方法。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100`. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱要求使用具有有效网络连接的 CentOS 系统。假设系统已配置为 IP 地址 `192.168.56.100`。还需要管理员权限，可以通过登录
    `root` 账户或使用 `sudo` 来获得权限。
- en: Note that the official CentOS repositories install PHP 5.4\. The Remi repositories
    offer 5.5, 5.6, and 7.0 if you want to install a newer release. To install one
    of the 5.x versions, open the `/etc/yum.repos.d/remi.repo` file, locate the `enabled`
    option in the `[remi-php55]` or `[remi-php56]` section and set its value to `1`.
    For 7.0, update the `enabled` option found in `/etc/yum.repos.d/remi-php70.repo`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，官方 CentOS 仓库安装的是 PHP 5.4。如果您想安装更新的版本，Remi 仓库提供了 PHP 5.5、5.6 和 7.0。要安装 5.x
    版本之一，请打开 `/etc/yum.repos.d/remi.repo` 文件，找到 `[remi-php55]` 或 `[remi-php56]` 部分中的
    `enabled` 选项，并将其值设置为 `1`。对于 7.0 版本，请更新 `/etc/yum.repos.d/remi-php70.repo` 文件中的
    `enabled` 选项。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What happened to PHP 6? *It's a long story...*. The team of volunteers developing
    PHP was working on version 6, but the initiative faced many hurdles and was eventually
    shelved. To prevent confusion between the latest release and any blog postings
    that were written about PHP 6, it was decided that its version number would be
    bumped to 7\. In short, PHP 6 did exist but never achieved a proper release status
    and most of the cool features planned for 6 made it into PHP 5.3, 5.4, and 7.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 6 发生了什么事？*这是一个很长的故事……*。开发 PHP 的志愿者团队曾致力于第 6 版的开发，但该项目遇到了许多困难，最终被搁置。为了避免与关于
    PHP 6 的博客文章产生混淆，决定将其版本号提升到 7。简而言之，PHP 6 确实存在过，但从未达到正式发布状态，大多数为 6 版规划的酷炫功能最终被包含在
    PHP 5.3、5.4 和 7.0 中。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to install Apache HTTP Server and PHP:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Apache HTTP 服务器和 PHP：
- en: 'Install the `httpd` and `php-fpm` packages:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `httpd` 和 `php-fpm` 包：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open Apache''s configuration file with your text editor:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开 Apache 的配置文件：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Locate the `ServerName` option. Remove `#` appearing at the start of the line
    to uncomment it and then change the option''s value to reflect your server''s
    hostname or IP address:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `ServerName` 选项。去掉行首的 `#` 以取消注释，并将该选项的值更改为反映服务器的主机名或 IP 地址：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Find the `DirectoryIndex` option and add `index.php` to the list:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 `DirectoryIndex` 选项，并将 `index.php` 添加到列表中：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At the end of the file, add the following configuration:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下配置：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your changes to the configuration and close the file.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的配置更改并关闭文件。
- en: 'Verify that `mod_proxy` (listed as `proxy_module`) and `mod_proxy_fcgi` (`proxy_fcgi_module)`
    extension modules are enabled:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `mod_proxy`（列为 `proxy_module`）和 `mod_proxy_fcgi`（列为 `proxy_fcgi_module`）扩展模块是否已启用：
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both modules should appear in the output.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出中应该出现这两个模块。
- en: 'Start Apache and PHP''s FPM service and enable them to start automatically
    when your system reboots:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Apache 和 PHP 的 FPM 服务，并启用它们在系统重启时自动启动：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open port `80` in the system''s firewall to allow HTTP requests through:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开系统防火墙的 `80` 端口，以允许 HTTP 请求通过：
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are several ways to integrate PHP with Apache''s HTTP server to generate
    dynamic web content. Historically, using Apache''s `mod_php` module was the way
    to go, but now the preferred approach is to run PHP as a separate process, which
    the web server communicates with using the FastCGI protocol. So, we installed
    the `httpd` package for the Apache HTTP Server and the `php-fpm` package for the
    PHP interpreter and its process manager:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以将 PHP 与 Apache 的 HTTP 服务器集成以生成动态网页内容。历史上，使用 Apache 的 `mod_php` 模块是常见的做法，但现在推荐的方法是将
    PHP 作为独立进程运行，Web 服务器通过 FastCGI 协议与其通信。因此，我们安装了 Apache HTTP 服务器的 `httpd` 包和 PHP
    解释器及其进程管理器的 `php-fpm` 包：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The PHP FastCGI Process Manager (FPM) is included in the core PHP distributions
    as of version 5.3\. Separating PHP from Apache encourages a more scalable architecture,
    and using a persistent PHP process reduces CPU overhead because a new interpreter
    doesn't have to be spawned for each request.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PHP FastCGI 进程管理器（FPM）从 5.3 版本起包含在核心 PHP 分发包中。将 PHP 与 Apache 分离有助于构建更具可扩展性的架构，使用持久的
    PHP 进程可以减少 CPU 的负担，因为每个请求不需要重新启动新的解释器。
- en: 'Apache''s main configuration file is `/etc/httpd/conf/httpd.conf`, in which
    we updated the `ServerName` option to reflect our server''s hostname or IP address.
    While this step isn''t strictly necessary, if we don''t set the option then the
    server will write warning messages to its log files. Besides, it''s useful for
    the server to be able to identify itself:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 的主配置文件是 `/etc/httpd/conf/httpd.conf`，我们在其中更新了 `ServerName` 选项以反映服务器的主机名或
    IP 地址。虽然这一步不是严格必要的，但如果不设置该选项，服务器将会在日志文件中写入警告消息。此外，服务器能够识别自身是有益的：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we updated for the `DirectoryIndex` option by adding `index.php` to its
    list of values. When the user requests a resource that resolves to a directory,
    the server will look in that directory for a file that matches one of the names
    in the `DirectoryIndex` list. If found, Apache will return that file to satisfy
    the request. This behavior is what allows visitors to access a website''s home
    page with a URL such as `www.example.com` rather than `www.example.com/index.html`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过将 `index.php` 添加到 `DirectoryIndex` 选项的值列表中进行了更新。当用户请求一个解析为目录的资源时，服务器会在该目录中查找与
    `DirectoryIndex` 列表中的名称匹配的文件。如果找到，Apache 将返回该文件以满足请求。这种行为使得访客可以通过类似 `www.example.com`
    而不是 `www.example.com/index.html` 的 URL 访问网站的首页：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The order in which files are listed is significant. For example, if both `index.html`
    and `index.php` exist in the directory then `index.html` will be returned because
    it's listed before `index.php` in the option's list.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 文件列出的顺序是有意义的。例如，如果目录中同时存在`index.html`和`index.php`，则返回`index.html`，因为它在选项列表中排在`index.php`之前。
- en: 'Then we navigated to the end of the file to add the following proxy configuration.
    If the regular expression of `ProxyPassMatch` matches the incoming request then
    the server retrieves the given URL and returns that content instead:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导航到文件的末尾添加了以下代理配置。如果`ProxyPassMatch`的正则表达式匹配到传入的请求，那么服务器将获取指定的URL并返回该内容：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Regular expressions are written using a special notation that describes how
    to match text. Most characters are matched literally, but some have special meaning:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是使用一种特殊的符号书写的，描述了如何匹配文本。大多数字符是按字面意思匹配的，但有些字符具有特殊的意义：
- en: '`.`: This matches any character. The pattern `bu.` matches against the text
    `bud`, `bug`, `bun`, `bus`, and so on.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.`：这匹配任何字符。模式`bu.`匹配文本`bud`、`bug`、`bun`、`bus`等。'
- en: '`+`: This matches the preceding element one or more times. The pattern `fe+t`
    matches `fet`, `feet`, and `feeet` and so on but not `ft`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`：这表示前面的元素可以匹配一次或多次。模式`fe+t`可以匹配`fet`、`feet`、`feeet`等，但不能匹配`ft`。'
- en: '`*`: This optionally matches the preceding element any number of times. The
    pattern `fe*t` matches `ft`, `fet`, `feet`, `feeet`, and so on.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：这表示前面的元素可以匹配零次或多次。模式`fe*t`可以匹配`ft`、`fet`、`feet`、`feeet`等。'
- en: '`?`: This optionally matches the preceding element once. The pattern `colou?r`
    matches `color` and `colour`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`：这表示前面的元素可以选择性地匹配一次。模式`colou?r`匹配`color`和`colour`。'
- en: '`^`: This anchors the match to the beginning of the line. The pattern `^abc`
    only matches `abc` if `abc` appears at the beginning of the text (`^` has special
    significance when used in `[ ]`).'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`^`：这将匹配文本行的开头。模式`^abc`仅在`abc`出现在文本的开头时才匹配`abc`（`^`在`[ ]`中使用时具有特殊含义）。'
- en: '`$`: This anchors the match to the end of the line. The pattern `xyz$` only
    matches `xyz` if `xyz` appears at the end of the line.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$`：这将匹配文本行的结尾。模式`xyz$`仅在`xyz`出现在行末时才匹配`xyz`。'
- en: '`[ ]`: This matches any of the characters given within the brackets. The pattern
    `co[lr]d` matches `cold` and `cord`. When the first character in `[ ]` is `^`
    then the list is negated; `co[^lr]d` matches `coed` but not `cold` or `cord`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ ]`：这表示匹配括号内的任意字符。模式`co[lr]d`匹配`cold`和`cord`。当`[ ]`中的第一个字符是`^`时，列表会被取反；`co[^lr]d`匹配`coed`，但不匹配`cold`或`cord`。'
- en: '`( )`: This groups elements and captures matches. The pattern `jump(ed)?` matches
    `jump` and `jumped`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`( )`：这将元素分组并捕获匹配项。模式`jump(ed)?`可以匹配`jump`和`jumped`。'
- en: If you want any of these special characters to be matched literally then you
    should escape them with a leading backslash, for example `foo\.html` will match
    `foo.html` instead of `fooahtml`, `foobhtml`, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望匹配这些特殊字符的字面意义，则应在前面加上反斜杠进行转义，例如`foo\.html`将匹配`foo.html`，而不是`fooahtml`、`foobhtml`等。
- en: Special numeric variables like `$1` and `$2` contain the value of any captured
    matches. The order in which they are populated are the order in which the parentheses
    capture a match, thus `(foo)\.(html)` sets `$1` to `foo` and `$2` to `html`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的数字变量如`$1`和`$2`包含任何捕获到的匹配项的值。它们被赋值的顺序与括号捕获匹配项的顺序相同，因此`(foo)\.(html)`将`$1`设置为`foo`，`$2`设置为`html`。
- en: With this understanding, you should now be able to decipher that the regular
    expression `^/(.*\.php)$` captures the path and filename of the requested resource
    that end with the extension `.php`. The `$1` variable represents the captured
    path, so a request for `/about/staff.php` will be proxied as `fcgi://127.0.0.1:9000/var/www/html/about
    /staff.php` where PHP's Fast-CGI listener is listening to the local interface
    on port `9000`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些理解，你现在应该能够解读正则表达式`^/(.*\.php)$`，它捕获以`.php`扩展名结尾的请求资源的路径和文件名。`$1`变量表示捕获到的路径，因此请求`/about/staff.php`将被代理为`fcgi://127.0.0.1:9000/var/www/html/about
    /staff.php`，其中PHP的Fast-CGI监听器正在本地接口的`9000`端口上监听。
- en: Apache's functionality is often extended through modules, and as a safeguard
    it's a good practice to wrap module-specific configuration options in an `IfModule`
    block. The opening of such blocks contain the name of the module and appear in
    angle brackets `< >`. The block's closing appears as `</IfModule>` just like closing
    an HTML element.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Apache 的功能通常通过模块扩展，作为一种安全措施，最好将特定模块的配置选项包装在 `IfModule` 块中。此类块的开头包含模块的名称，并出现在尖括号
    `< >` 中。块的结束则是 `</IfModule>`，就像关闭一个 HTML 元素一样。
- en: 'The directory out of which the server serves files from is set by the option
    `DocumentRoot`. The default value is `/var/www/html`, so any files we place there
    or in a subdirectory within it will be accessible. As an example to illustrate
    this, the distribution includes a sample `index.html` file, which we can use to
    verify that the server is running correctly; copy the `/usr/share/httpd/noindex/index.html`
    file to `/var/www/html`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器提供文件的目录是通过选项 `DocumentRoot` 设置的。默认值为 `/var/www/html`，因此我们放置在那里或其子目录中的任何文件都可以访问。例如，为了说明这一点，发行版包含一个示例的
    `index.html` 文件，我们可以用它来验证服务器是否正常运行；将 `/usr/share/httpd/noindex/index.html` 文件复制到
    `/var/www/html` 中：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, open your browser and navigate to the domain or IP address of the system.
    You should see the welcome page:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开浏览器并访问系统的域名或 IP 地址。你应该看到欢迎页面：
- en: '![How it works...](img/image_10_001.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_10_001.jpg)'
- en: You can copy Apache's default index page to the web directory to test whether
    the server is up and running
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Apache 的默认首页复制到 Web 目录中，以测试服务器是否已启动并正常运行
- en: For PHP, you need to place a PHP file where it can be read by the Fast-CGI service.
    The proxy URL is `fcgi://127.0.0.1:9000/var/www/html/$1`, so that we can place
    our PHP files in `/var/www/html` as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PHP，你需要将 PHP 文件放置在 Fast-CGI 服务可以读取的位置。代理 URL 是 `fcgi://127.0.0.1:9000/var/www/html/$1`，因此我们也可以将
    PHP 文件放置在 `/var/www/html` 中。
- en: 'Create the `info.php` file with the following content:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `info.php` 文件，并添加以下内容：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now save the file and then navigate to the page in your browser. You should
    see the output of PHP''s `phpinfo()` function providing detailed information on
    how PHP is configured and which of its modules are available:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存文件，然后在浏览器中访问该页面。你应该看到 PHP 的 `phpinfo()` 函数的输出，提供有关 PHP 配置的详细信息，以及哪些模块可用：
- en: '![How it works...](img/image_10_002.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_10_002.jpg)'
- en: PHP reports information about its environment and the request
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 报告有关其环境和请求的信息
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For security purposes, it's recommended that you delete the welcome `index.html`
    file if you copied it over and the `info.php` script after you verify everything
    works. The information they present can give malicious users more information
    about the set up of your web server than you'd like them to have.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全考虑，建议在验证一切正常后删除你复制的欢迎 `index.html` 文件以及 `info.php` 脚本。它们提供的信息可能会让恶意用户比你希望的更多地了解你的
    Web 服务器配置。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on working with Apache
    and PHP:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源以获取更多关于 Apache 和 PHP 的工作信息：
- en: Apache HTTP Server Project ([http://httpd.apache.org/](http://httpd.apache.org/))
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache HTTP 服务器项目 ([http://httpd.apache.org/](http://httpd.apache.org/))
- en: The PHP home page ([http://php.net/](http://php.net/))
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 首页 ([http://php.net/](http://php.net/))
- en: Apache `mod_proxy_fcgi` documentation ([http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html](http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html))
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache `mod_proxy_fcgi` 文档 ([http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html](http://httpd.apache.org/docs/current/mod/mod_proxy_fcgi.html))
- en: 'Httpd Wiki: PHP-FPM ([http://wiki.apache.org/httpd/PHP-FPM](http://wiki.apache.org/httpd/PHP-FPM))'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Httpd Wiki: PHP-FPM ([http://wiki.apache.org/httpd/PHP-FPM](http://wiki.apache.org/httpd/PHP-FPM))'
- en: 'RFC-2616: HTTP/1.1 ([http://www.rfc-base.org/txt/rfc-2616.txt](http://www.rfc-base.org/txt/rfc-2616.txt))'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'RFC-2616: HTTP/1.1 ([http://www.rfc-base.org/txt/rfc-2616.txt](http://www.rfc-base.org/txt/rfc-2616.txt))'
- en: Configuring name-based virtual hosting
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置基于名称的虚拟主机
- en: As you may recall from our discussions surrounding DNS in [Chapter 8](ch08.html
    "Chapter 8. Managing Domains and DNS"), *Managing Domains and DNS* a user's browser
    needs to translate a website's hostname to its IP address via DNS lookups before
    it can connect and retrieve the desired web content. You may also recall that
    this doesn't have to be a one-to-one mapping-more than one site can resolve to
    the same IP address. Apache is flexible enough so that the same server can serve
    more than one site by a configuration known as name-based virtual hosting.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在我们讨论 DNS 时回忆起的内容，在[第 8 章](ch08.html "第 8 章：管理域名和 DNS")中，*管理域名和 DNS* 用户的浏览器需要通过
    DNS 查询将网站的主机名转换为其 IP 地址，才能连接并检索所需的网页内容。你也许还记得，这并不需要一一对应映射——多个站点可以解析到相同的 IP 地址。Apache
    足够灵活，允许同一服务器通过名为基于名称的虚拟主机的配置来提供多个站点。
- en: This recipe teaches you how to set up name-based virtual hosting. Each site
    has it's own configuration (often kept in its own configuration file for better
    organization). Based on the site name that appears in the request, Apache then
    selects from the available configurations to properly serve the desired site.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将教你如何设置基于名称的虚拟主机。每个站点都有自己的配置（通常会保存在单独的配置文件中以便于管理）。根据请求中出现的站点名称，Apache 然后从可用的配置中选择，以正确地提供所需的站点。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection and running
    Apache as described in the previous recipe. Because we'll be connecting to the
    server via a domain name instead of an IP address, you'll need to make sure the
    name resolves to the correct address by updating your DNS records or adding entries
    to `/etc/hosts` first. Administrative privileges are also required, either by
    logging in with the `root` account or through the use of `sudo`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求你使用已连接网络的 CentOS 系统，并且安装了运行如前一教程所述的 Apache。因为我们将通过域名而不是 IP 地址连接到服务器，所以你需要通过更新
    DNS 记录或首先向 `/etc/hosts` 文件添加条目，确保域名解析到正确的地址。还需要管理员权限，可以通过登录 `root` 账户或使用 `sudo`
    来获取。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to set up name-based virtual hosting:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置基于名称的虚拟主机：
- en: 'Open Apache''s configuration file with your text editor:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开 Apache 的配置文件：
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At the bottom of the file, add the following `Include` option:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部添加以下 `Include` 选项：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save the updated configuration and close the file.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更新后的配置并关闭文件。
- en: 'Create the `sites` directory referenced in the configuration:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建配置中引用的 `sites` 目录：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a virtual host configuration file within the new `sites` directory for
    your first site:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新 `sites` 目录中为第一个站点创建一个虚拟主机配置文件：
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to the site''s configuration file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向站点的配置文件中添加以下代码：
- en: '[PRE18]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save your changes and close the file.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Create the site''s document root referenced in the configuration options:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建配置选项中引用的站点文档根目录：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Repeat steps 4-8 for each additional site you will be hosting, using the host
    or domain name to create a unique directory path for each site.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个额外要托管的站点，重复步骤 4-8，使用主机或域名为每个站点创建唯一的目录路径。
- en: 'Restart the HTTP server for the configuration changes to take effect:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 HTTP 服务器以使配置更改生效：
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Configuring Apache to serve multiple domains is a matter of creating a `VirtualHost`
    definition for each site. This recipe organizes the definitions in their own file
    under the directory `/etc/httpd/sites` and then references them in the main `httpd.conf`
    configuration file using an `Include` directive:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Apache 以服务多个域名就是为每个站点创建一个 `VirtualHost` 定义。本教程将这些定义组织到 `/etc/httpd/sites`
    目录下的各自文件中，并通过 `Include` 指令在主 `httpd.conf` 配置文件中引用它们：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How you organize your sites is up to you. This recipe uses a scheme where each
    site is served from a path based on the domain name followed by the subdomain
    rooted in `/var/www`. The path `/var/www/example.com/www/html` contains the files
    for the site at `www.example.com`. Files for the site at `web.example.com` would
    be placed in `/var/www/example.com/web/html`. The `html` directory is simply the
    web-accessible root for the site. By including it instead of serving files out
    of `example.com/www` directly, we can place any supporting files outside the root
    which aren't mean to be accessed directly (for example, a script with configuration
    options for a PHP website), but still keep them organized with the rest of the
    site's files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如何组织你的网站由你决定。本教程使用了一种方案，其中每个网站都从基于域名的路径提供，路径以`/var/www`为根。路径`/var/www/example.com/www/html`包含`www.example.com`网站的文件。`web.example.com`网站的文件将放在`/var/www/example.com/web/html`中。`html`目录仅仅是网站的可通过Web访问的根目录。通过包含它而不是直接从`example.com/www`提供文件，我们可以将任何不打算直接访问的支持文件放在根目录之外（例如，包含PHP网站配置选项的脚本），同时仍然将它们与网站的其他文件保持组织性。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Naming the publicly accessible directory root `html` is a convention, but its
    one that I find outdated since more than just HTML files are often served. I often
    name my own root directories `public` or `public_files` and update their references
    in the configuration file accordingly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将公开可访问的目录根目录命名为`html`是一种约定，但我认为它已经过时，因为不仅仅是HTML文件通常被提供。我通常将自己的根目录命名为`public`或`public_files`，并在配置文件中相应更新它们的引用。
- en: 'Each definition for a virtual host is contained within a `VirtualHost` block.
    The opening provides the IP address of the interface on which the server is listening
    followed by the port number. `*` indicates that the definition applies to all
    of the system''s interfaces and `80` is the default port for HTTP traffic:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每个虚拟主机的定义都包含在`VirtualHost`块内。开头提供了服务器监听的接口的IP地址，后面是端口号。`*`表示该定义适用于系统的所有接口，而`80`是HTTP流量的默认端口：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Options that don''t appear explicitly in the definition are assumed to have
    the same settings as found in the main configuration, so at a minimum, the `ServerName`
    and `DocumentRoot` options need to be defined to make the definition unique. If
    you''re using PHP, you''ll want to provide the `ProxyPassMatch` option as well
    so that the requests are mapped to the correct PHP files:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义中没有明确出现的选项假定具有与主配置中相同的设置，因此至少需要定义`ServerName`和`DocumentRoot`选项，以使定义具有唯一性。如果你使用PHP，你还需要提供`ProxyPassMatch`选项，以便将请求映射到正确的PHP文件：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The order in which the virtual host definitions are loaded is somewhat important;
    the first one loaded acts as the default and will handle any requests that do
    not match any of the virtual hosts definitions. Prefixing the configuration files
    numerically, for example `10-www.example.conf`, can help you control the loading
    order.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟主机定义加载的顺序是有一定重要性的；第一个加载的定义作为默认设置，将处理任何不匹配任何虚拟主机定义的请求。可以通过为配置文件添加数字前缀，例如`10-www.example.conf`，来帮助你控制加载顺序。
- en: 'Each request is logged to `/var/log/httpd/access_log` and any errors are logged
    to `error_log`. Of course, this is fine if you''re only serving one site. But
    when serving multiple sites, you may find it beneficial to route log entries to
    different files for different sites. The `CustomLog` option names a file where
    the access and general logging messages are written to and the format of the entries.
    `ErrorLog` specifies the file where the error messages are written. Both of these
    options can appear in a virtual host''s configuration:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求都被记录到`/var/log/httpd/access_log`，任何错误都会被记录到`error_log`。当然，如果你只提供一个站点，这样做是没问题的。但当提供多个站点时，你可能会发现将日志条目路由到不同站点的不同文件会更有帮助。`CustomLog`选项指定了一个文件，访问和一般日志消息将写入该文件，并且条目的格式。`ErrorLog`指定了写入错误消息的文件。这两个选项都可以出现在虚拟主机的配置中：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The second argument to `CustomLog` can be the format string itself or an alias
    that represents the format string. Format strings simply define what details are
    contained in the logged messages.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomLog`的第二个参数可以是格式字符串本身或表示格式字符串的别名。格式字符串仅仅定义了日志消息中包含的详细信息。'
- en: 'There''s a slew of format specifiers available which are all documented in
    the Apache HTTPd Server''s documentation. Here''s a list of some of the more common
    ones you may use, while you can find a complete list online at [http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats](http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats)):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多格式说明符可以使用，这些都已在Apache HTTPd服务器的文档中记录。以下是一些常见的格式说明符，你可以在[http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats](http://httpd.apache.org/docs/current/mod/mod_log_config.html#formats)找到完整的列表：
- en: '`%b`: This is the size of the response (in bytes) served back to the client'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`：这是返回给客户端的响应大小（以字节为单位）'
- en: '`%D`: This is the time taken to process the request in milliseconds (`%T` represents
    the time taken in seconds)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%D`：这是处理请求所花费的时间，单位为毫秒（`%T`表示所花费的时间，单位为秒）'
- en: '`%h`: This is the IP or hostname of the requesting system'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%h`：这是发起请求的系统的IP地址或主机名'
- en: '`%H`: This is the protocol used to make the request'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%H`：这是发起请求时使用的协议'
- en: '`%m`: This is the method used to make the request'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`：这是发起请求时使用的方法'
- en: '`%q`: This is the query string portion of the requested URI'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%q`：这是请求的URI中的查询字符串部分'
- en: '`%r`: This is the first line of the request'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%r`：这是请求的第一行'
- en: '`%>s`: This is the request''s final status code (`%s` represents the initial
    status for requests that are redirected)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%>s`：这是请求的最终状态码（`%s`表示重定向请求的初始状态）'
- en: '`%t`: This is the time when the request was received'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%t`：这是接收到请求的时间'
- en: '`%u`: This is the username for authenticated requests when the request was
    received'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%u`：这是接收到请求时经过身份验证的用户名'
- en: '`%v`: This is the name of the server (`ServerName`) handling the request'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%v`：这是处理请求的服务器名称（`ServerName`）'
- en: 'The `LogFormat` option names a format string with an alias. For example, the
    `httpd.conf` file uses `LogFormat` to define strings named as `common` and `combined`,
    which can be used elsewhere. It''s a good idea to define your own alias for your
    virtual host logging and use the alias in the individual configuration files rather
    than having cryptic format strings scattered about. In `httpd.conf`, simply add
    your custom `LogFormat` entry in the same area as the `common` and `combined`
    entries:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`LogFormat`选项指定了一个带别名的格式字符串。例如，`httpd.conf`文件使用`LogFormat`定义了名为`common`和`combined`的字符串，这些字符串可以在其他地方使用。定义你自己的虚拟主机日志别名，并在各个配置文件中使用该别名，而不是将复杂的格式字符串分散在各处，是一个不错的主意。在`httpd.conf`中，只需在`common`和`combined`条目的相同区域添加自定义的`LogFormat`条目：'
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, you can reference the alias in your sites'' configuration files:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在你的网站配置文件中引用该别名：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After making the changes, restart Apache for the configuration to take effect.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出更改后，重新启动Apache以使配置生效。
- en: 'Whatever their destination, make sure the ownership/permissions your security
    context allow Apache runs to write to the log file. If the logs reside under `/var/log/httpd`
    then creating the necessary subdirectories should be sufficient. The server will
    create the log files itself when it starts:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 无论日志的目标位置是什么，请确保安全上下文的所有权/权限允许Apache能够写入日志文件。如果日志位于`/var/log/httpd`下，那么创建必要的子目录应该就足够了。服务器将在启动时自动创建日志文件：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'However, if you wish to keep the logs in another directory, perhaps such as
    `/var/www/example.com/www/logs`, the server may be blocked from writing to them.
    SELinux is enabled regardless of the filesystem permissions appearing sane. To
    fix the situation, first verify the security context with `ls -Z`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你希望将日志保存在另一个目录中，例如`/var/www/example.com/www/logs`，可能会遇到服务器无法写入日志的情况。无论文件系统权限看起来多么正常，SELinux都会启用。为了解决这个问题，首先使用`ls
    -Z`验证安全上下文：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this case, the `logs` directory is owned by the `apache` user, which Apache
    runs under, and the permissions on the directory should allow the server to create
    the log files. However, we can also see that the directory has inherited the label
    that identifies it as web content as indicated by `httpd_sys_content_t`. To fix
    the problem, we need to relabel the directory for logging purposes using `chcon`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`logs`目录属于Apache运行的`apache`用户，并且目录的权限应该允许服务器创建日志文件。然而，我们也可以看到该目录继承了标识为web内容的标签，标签为`httpd_sys_content_t`。为了解决问题，我们需要使用`chcon`命令重新标记该目录以用于日志记录：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on working with virtual
    hosting:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有关虚拟主机的更多信息，请参考以下资源：
- en: Apache Virtual Host documentation ([http://httpd.apache.org/docs/current/vhosts/](http://httpd.apache.org/docs/current/vhosts/))
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache虚拟主机文档 ([http://httpd.apache.org/docs/current/vhosts/](http://httpd.apache.org/docs/current/vhosts/))
- en: Apache `mod_log_config` documentation ([http://httpd.apache.org/docs/current/mod/mod_log_config.html](http://httpd.apache.org/docs/current/mod/mod_log_config.html))
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache `mod_log_config`文档 ([http://httpd.apache.org/docs/current/mod/mod_log_config.html](http://httpd.apache.org/docs/current/mod/mod_log_config.html))
- en: VirtualHost examples ([http://httpd.apache.org/docs/current/vhosts/examples.html](http://httpd.apache.org/docs/current/vhosts/examples.html))
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟主机示例 ([http://httpd.apache.org/docs/current/vhosts/examples.html](http://httpd.apache.org/docs/current/vhosts/examples.html))
- en: 'CentOS Wiki: SELinux HowTo ([https://wiki.centos.org/HowTos/SELinux](https://wiki.centos.org/HowTos/SELinux))'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS Wiki：SELinux使用指南 ([https://wiki.centos.org/HowTos/SELinux](https://wiki.centos.org/HowTos/SELinux))
- en: Configuring Apache to serve pages over HTTPS
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Apache以通过HTTPS提供页面
- en: HTTP traffic is sent in plain text across the network. In an untrusted environment,
    a malicious user can monitor and capture the traffic to spy on what sites you're
    visiting and what content you're reading. While such snooping isn't interesting
    if the victim is just reading the daily news or watching cat videos on YouTube,
    the user's credit card number, shipping address, and other details could be snagged
    if an e-commerce transaction were to take place unencrypted. To support encrypted
    traffic, Apache supports HTTPS. This recipe will teach you how to configure HTTPS
    support and protect your users' traffic from prying eyes no matter how benign
    the content is.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP流量是以明文形式在网络上传输的。在不受信的环境中，恶意用户可以监视并捕获流量，窃听你正在访问的网站和阅读的内容。如果受害者只是阅读每日新闻或观看YouTube上的猫咪视频，窃听可能并不有趣，但如果发生未加密的电子商务交易，用户的信用卡号、邮寄地址和其他细节可能会被窃取。为了支持加密流量，Apache支持HTTPS。这个配方将教你如何配置HTTPS支持，并保护用户的流量免受窥探，无论内容多么无害。
- en: Getting ready
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100` and is running
    Apache as described in the previous recipes. Administrative privileges are also
    required, either by logging in with the `root` account or through the use of `sudo`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方要求使用带有有效网络连接的CentOS系统。假设系统已配置IP地址`192.168.56.100`，并且按前面的配方运行Apache。还需要管理员权限，可以通过`root`账户登录或使用`sudo`。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to serve pages over HTTPS:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤通过HTTPS提供页面：
- en: 'Generate a new key file and security certificate using `openssl`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`openssl`生成新的密钥文件和安全证书：
- en: '[PRE30]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Install the server''s SSL module:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装服务器的SSL模块：
- en: '[PRE31]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `/etc/httpd/conf.d/ssl.conf` file with your text editor:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开`/etc/httpd/conf.d/ssl.conf`文件：
- en: '[PRE32]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Locate the `SSLCertificateFile` option and update its value to point to the
    self-signed certificate file:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`SSLCertificateFile`选项，并更新其值以指向自签名证书文件：
- en: '[PRE33]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Locate the `SSLCertificateKeyFile` option and update it to point to the encryption
    key:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找`SSLCertificateKeyFile`选项，并将其更新为指向加密密钥：
- en: '[PRE34]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Save your changes and close the file.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Restart the server for the updated configuration to take effect:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启服务器以使更新的配置生效：
- en: '[PRE35]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open port `443` in the firewall to allow HTTPS traffic:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在防火墙中打开端口`443`以允许HTTPS流量：
- en: '[PRE36]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Apache HTTP Server comes with a default SSL/TLS configuration contained
    within a catch-all virtual host definition in `/etc/httpd/conf.d/ssl.conf`. With
    most of the configuration already done for us, all that's left is to install the
    SSL module, generate a new key and certificate, and update the configuration to
    point to our files.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Apache HTTP服务器带有一个默认的SSL/TLS配置，包含在`/etc/httpd/conf.d/ssl.conf`中的一个通用虚拟主机定义内。大部分配置已经为我们完成，剩下的就是安装SSL模块，生成新的密钥和证书，并更新配置以指向我们的文件。
- en: 'First, we generated a new encryption key and signing certificate. If you''ve
    already read the *Configuring Postfix to use TLS* recipe in [Chapter 9](ch09.html
    "Chapter 9. Managing E-mails"), *Managing E-mails*, then you already know that
    the key is needed for secured communication and the certificate confirms the ownership
    of the key:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们生成了一个新的加密密钥和签名证书。如果你已经阅读了[第9章](ch09.html "第9章 管理电子邮件")中的*配置Postfix以使用TLS*配方，那么你已经知道密钥用于安全通信，证书确认密钥的所有权：
- en: '[PRE37]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The recipe generates a self-signed certificate which is sufficient for personal
    use and intranet sites. The `req` option creates a new certificate and `-newkey`
    generates a new private key. The key is a 2048-bit RSA key and itself is not encrypted
    (`-nodes`), so we don't need to provide a passphrase to decrypt the key every
    time we start the web server. The certificate is an X.509 certificate (`-x509`)
    and is valid for 3 years (`-days 730`). The certificate's `CN` field must match
    the domain name of the site it will be used for.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案生成一个自签名证书，足够个人使用和内网站点使用。`req`选项用于创建新证书，`-newkey`生成新的私钥。该密钥是2048位的RSA密钥，并且本身不加密（`-nodes`），所以我们不需要每次启动Web服务器时提供解密密钥的密码。证书是一个X.509证书（`-x509`），有效期为3年（`-days
    730`）。证书的`CN`字段必须与它将用于的站点的域名匹配。
- en: 'In the configuration file, the `SSLCertificateFile` option specifies the file
    that contains the certificate file and the key is identified using `SSLCertificateKeyFile`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，`SSLCertificateFile`选项指定包含证书文件的文件，而密钥则通过`SSLCertificateKeyFile`来标识：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The server determines which virtual host configuration to use to handle a request
    by looking at the site's name in the incoming request. However, the original HTTPS
    implementation encrypted the request in its entirety between the web client and
    server, including the site's hostname, which raised a chicken and egg problem.
    The server needed to know which certificate to serve and couldn't know it without
    reading the request, and the client wanted a certificate that matched the site's
    domain before it would even send the request. It was impossible to use TLS with
    name-based virtual hosting and any encrypted site required its own dedicated IP
    address.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器通过查看传入请求中的站点名称来确定使用哪个虚拟主机配置来处理请求。然而，原始的HTTPS实现加密了请求的全部内容，包括站点的主机名，这引发了一个“先有鸡还是先有蛋”的问题。服务器需要知道要提供哪个证书，但如果不读取请求，它就无法知道，而客户端希望在发送请求之前就得到与站点域名匹配的证书。在基于名称的虚拟主机上使用TLS几乎是不可能的，任何加密站点都需要独立的IP地址。
- en: RFC-3546 (Transport Layer Security Extensions) modified the protocol so that
    the hostname could be sent unencrypted. This allowed the server to select the
    correct certificate to satisfy the client and opened the door for using TLS with
    virtual hosting. It took approximately ten years for the major browsers to support
    the change but we're pretty much there now Internet Explorer as of version 7,
    Mozilla Firefox as of version 2, and Google Chrome as of version 6 support what
    is known as Server Name Indication (SNI).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: RFC-3546（传输层安全扩展）修改了协议，使主机名可以不加密地发送。这使得服务器可以选择正确的证书来满足客户端的需求，并为使用TLS与虚拟主机配合使用打开了大门。主流浏览器大约花了十年时间才支持这一变化，但现在我们几乎可以确认支持了。从Internet
    Explorer 7版本开始，Mozilla Firefox 2版本开始，Google Chrome 6版本开始，已经支持所谓的服务器名称指示（SNI）。
- en: 'To server your virtual hosts over HTTPS, each site will need its own certificate
    and key. Then, add the `SSLEngine`, `SSLCertificateFile`, and `SSLCertificateKeyFile`
    options to the host''s configuration. The port number also needs to be changed
    in the configuration to `443`, the default port for HTTPS traffic:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过HTTPS提供虚拟主机服务，每个站点都需要自己的证书和密钥。然后，将`SSLEngine`、`SSLCertificateFile`和`SSLCertificateKeyFile`选项添加到主机的配置中。配置中还需要将端口号更改为`443`，这是HTTPS流量的默认端口：
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Although self-signed certificates are adequate for personal use and private
    network/intranet sites, most likely you'll want to use a trusted certificate for
    sites accessible on a larger scale. However, depending on the Certificate Authority
    and the specifics of your request, purchasing a trusted certificate can be expensive.
    If you need only a basic trusted certificate, then you might want to investigate
    whether Let's Encrypt will meet your needs. Let's Encrypt is a project offering
    an automated, self-service model for generating trusted certificates for free.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管自签名证书对于个人使用和私有网络/内网站点来说是足够的，但对于可公开访问的大规模站点，你很可能希望使用一个受信任的证书。然而，根据证书授权机构（CA）和你的请求的具体情况，购买受信任证书可能会很昂贵。如果你只需要一个基本的受信任证书，那么你可能想要了解一下Let's
    Encrypt是否能满足你的需求。Let's Encrypt是一个项目，提供一个自动化的自助服务模型，可以免费生成受信任的证书。
- en: To use *Let's Encrypt*, you'll need to install the `certbot` package available
    in the EPEL repository (refer to the *Registering the EPEL and Remi repositories* recipe
    in           [Chapter 4](ch04.html "Chapter 4. Software Installation Management"),* Software
    Installation Management* if you haven't already enabled the repository). Then
    run the `certbot certonly` command and follow the prompts to request your certificate.
    Full instructions can be found online in the Let's Encrypt/Certbot User Guide
    at    [http://letsencrypt.readthedocs.io/en/latest/using.html](http://letsencrypt.readthedocs.io/en/latest/using.html).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 *Let's Encrypt*，您需要安装 EPEL 仓库中提供的 `certbot` 包（如果您还没有启用该仓库，请参阅[第 4 章](ch04.html
    "第 4 章。软件安装管理")中的 *注册 EPEL 和 Remi 仓库* 章节）。然后运行 `certbot certonly` 命令并按照提示请求您的证书。完整的操作指南可以在
    Let's Encrypt/Certbot 用户指南中找到：[http://letsencrypt.readthedocs.io/en/latest/using.html](http://letsencrypt.readthedocs.io/en/latest/using.html)。
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a few caveats to Let's Encrypt. First, the certificates are only valid
    for three months; you'll need to request a new certificate every 90 days. It also
    won't generate certificates for IP addresses. Also, it rate limits requests which,
    although necessary to help prevent abuse, causes issues for those using a dynamic
    DNS service such as DynDNS or NoIP to make their sites accessible. For Let's Encrypt
    to be a viable option for you, you'll need a proper domain and access to the web
    system to automate the renewal. If you're running a home server or using a shared
    hosting provider, then Let's Encrypt is probably not for you.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Let's Encrypt 时有一些注意事项。首先，证书的有效期只有三个月；您需要每 90 天请求一次新证书。它也不会为 IP 地址生成证书。此外，它有请求频率限制，虽然这对于防止滥用是必要的，但对于使用动态
    DNS 服务（如 DynDNS 或 NoIP）使站点可访问的用户来说，会造成一些问题。要使 Let's Encrypt 成为您的可行选择，您需要一个合适的域名和对
    web 系统的访问权限以自动化证书更新。如果您正在运行家庭服务器或使用共享主机提供商，那么 Let's Encrypt 可能不适合您。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for working with HTTPS:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源，了解如何使用 HTTPS：
- en: 'SSL/TLS Strong Encryption: How-To ([http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html](http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html))'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSL/TLS 强加密：操作指南 ([http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html](http://httpd.apache.org/docs/2.4/ssl/ssl_howto.html))
- en: How to create an SSL Certificate for Apache on CentOS 7 ([http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7](http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7))
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 CentOS 7 上为 Apache 创建 SSL 证书 ([http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7](http://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-apache-for-centos-7))
- en: How to secure Apache with Let's Encrypt on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7))
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 CentOS 7 上使用 Let's Encrypt 保护 Apache ([https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-centos-7))
- en: Enabling overrides and performing URL rewriting
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用覆盖并执行 URL 重写
- en: This recipe teaches you how to use `mod_rewrite`. I mentioned `mod_rewrite`
    earlier; it is a module for Apache that allows us to modify the URL and resolve
    it to different resources. There are many reasons one would want to do this. For
    example, perhaps you moved some files and their URL changed, but you don't want
    any links that exist elsewhere still pointing to the old destinations to be broken.
    You can write a rewrite rule that matches the old locations and updates the URL
    on the fly to successfully satisfy the request. Another example is SEO; you may
    have long, unfriendly canonical URLs for a resource but want something shorter
    and more memorable. The friendly URLs can be mapped to the canonical URL behind
    the scenes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程教您如何使用 `mod_rewrite`。我之前提到过 `mod_rewrite`；它是 Apache 的一个模块，允许我们修改 URL 并将其解析为不同的资源。人们有很多理由需要这样做。例如，假设您移动了一些文件，且它们的
    URL 已发生变化，但您不希望其他地方的链接指向旧位置导致失效。您可以编写一个重写规则，匹配旧的位置并实时更新 URL，从而成功响应请求。另一个例子是 SEO；您可能有一些长且不友好的标准
    URL，但希望用更短、更易记的 URL 替代。友好的 URL 可以在后台映射到标准 URL。
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that the system is configured with the IP address `192.168.56.100` and is running
    Apache as described in the previous recipes. Administrative privileges are also
    required, either by logging in with the `root` account or through the use of `sudo`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱要求使用有网络连接的CentOS系统。假设系统配置了IP地址`192.168.56.100`并且正在运行先前食谱中描述的Apache。还需要管理员权限，可以通过使用`root`账户登录或使用`sudo`来获得。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to perform URL rewriting:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行URL重写：
- en: 'Open the `/etc/httpd/conf/httpd.conf` file with your text editor:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开`/etc/httpd/conf/httpd.conf`文件：
- en: '[PRE40]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Locate the `Directory` section that defines various options for your document
    root. Find its `AllowOverrides` option and update the value from `None` to `All`:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到定义文档根目录各种选项的`Directory`部分。找到其`AllowOverrides`选项，并将值从`None`更新为`All`：
- en: '[PRE41]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save your changes and close the file.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Restart Apache for the configuration update to take effect:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Apache以使配置更新生效：
- en: '[PRE42]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Verify that the `mod_rewrite` module (identified as `rewrite_module`) is available:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`mod_rewrite`模块（标识为`rewrite_module`）是否可用：
- en: '[PRE43]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a file named `.htaccess` in your document root:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文档根目录下创建一个名为`.htaccess`的文件：
- en: '[PRE44]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the `.htaccess` file, add `RewriteEngine` to turn on the URL rewriting engine:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.htaccess`文件中添加`RewriteEngine`以启用URL重写引擎：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add `Rewrite` rules that describe the desired redirects. For example, the following
    rule redirects all requests without a file extension to a PHP file of the given
    name:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加描述所需重定向的`Rewrite`规则。例如，以下规则将所有没有文件扩展名的请求重定向到给定名称的PHP文件：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Save and close the file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `.htaccess` files are supplemental configuration files that reside in the
    sites' directory structure. When configured, Apache searches for an `.htaccess`
    file and applies the option settings in it while satisfying a request. Of course,
    searching and loading configuration values for each request does have a slight
    performance impact, but its trade-off increases flexibility. For example, the
    server doesn't need to be restarted for configuration changes in an `.htaccess`
    file to take effect. In a shared-hosting environment, savvy clients can tweak
    the server's behavior for their own sites without asking a server administrator
    or requiring access to the main configuration files in `/etc/httpd` (which may
    contain sensitive configuration values). Even web applications that rely on specific
    server features might include an `.htaccess` file with the necessary configuration
    to make its deployment easier.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`.htaccess`文件是位于站点目录结构中的补充配置文件。当配置好后，Apache会在满足请求时搜索`.htaccess`文件并应用其中的选项设置。当然，每次请求时都要搜索并加载配置值会对性能产生轻微影响，但这种权衡增加了灵活性。例如，服务器不需要重启即可使`.htaccess`文件中的配置更改生效。在共享主机环境中，精明的用户可以在不要求服务器管理员协助或访问`/etc/httpd`中的主配置文件（这些文件可能包含敏感配置值）的情况下，为自己的网站调整服务器行为。即使是依赖特定服务器功能的Web应用程序，也可能包含一个`.htaccess`文件，内含必要的配置以简化其部署。'
- en: 'Apache doesn''t allow the use of the `.htaccess` files to override the server''s
    configuration by default. To enable it, we need to update the `AllowOverrides`
    option in the appropriate context and then restart the server. This recipe made
    the change in the section that applies to the web root directory:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Apache不允许使用`.htaccess`文件来覆盖服务器的配置。要启用它，我们需要在适当的上下文中更新`AllowOverrides`选项，然后重启服务器。本食谱在适用于Web根目录的部分进行了更改：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're using virtual hosting, be sure to put the `AllowOverrides` option
    in your site's configuration file.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用虚拟主机，确保将`AllowOverrides`选项放入你站点的配置文件中。
- en: 'A value of `None` causes the server to ignore any `.htaccess` files. Apart
    from that, not all options are allowed in an `.httaccess` file. The most common
    ones found in the files pertain to rewriting requests or directory-specific access.
    Those that can appear are grouped under different categories and we can specify
    the category of options that will be allowed to be overridden. The possible group
    names are as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`None`的值会导致服务器忽略任何`.htaccess`文件。除此之外，并非所有选项都允许出现在`.htaccess`文件中。文件中最常见的选项涉及重写请求或目录特定访问。可以出现的选项按不同类别分组，我们可以指定允许覆盖的选项类别。可能的组名如下：'
- en: '`AuthConfig`: This allows overriding the authorization options (`AuthUserFile`,
    `AuthDBMUserFile`, and so on)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthConfig`：此选项允许覆盖授权选项（`AuthUserFile`，`AuthDBMUserFile` 等等）。'
- en: '`FileInfo`: This allows overriding request-related options (`ErrorDocument`,
    `Redirect`, `RewriteRule`, and so on)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileInfo`：此选项允许覆盖与请求相关的选项（`ErrorDocument`，`Redirect`，`RewriteRule` 等等）。'
- en: '`Indexes`: These allow index-related options to be overridden (`DirectoryIndex`,
    `IndexOptions`, and so on)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Indexes`：这些选项允许覆盖与索引相关的选项（`DirectoryIndex`，`IndexOptions` 等等）。'
- en: '`Limit`: This allows the access options to be overridden (`Allow`, `Deny`,
    and `Order`)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Limit`：此选项允许覆盖访问选项（`Allow`，`Deny` 和 `Order`）。'
- en: '`All`: This allows overriding all of the option groups'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`All`：此选项允许覆盖所有选项组。'
- en: 'Since `AllowOverrides` applies to the directory level, it''s possible to allow
    or deny different overrides in different directories. For example, overriding
    can be disabled across a site, but then the authorization options can be overridden
    for a `private` directory so that the specific authorization databases can be
    specified:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `AllowOverrides` 应用于目录级别，因此可以允许或拒绝在不同目录中使用不同的覆盖。例如，可以在整个网站上禁用覆盖，但可以在 `private`
    目录中允许覆盖授权选项，从而指定特定的授权数据库：
- en: '[PRE48]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Even if you have full control over Apache and you want to place everything in
    the main `httpd.conf` files for performance reasons, allowing rewrite options
    to be overridden with `FileInfo` lets you devise and troubleshoot your rules without
    restarting the server after each change. You can then migrate the rules to the
    main configuration file once you're certain they're correct, and turn off overrides.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你对 Apache 有完全控制权，并且出于性能原因希望将所有内容放置在主 `httpd.conf` 文件中，允许通过 `FileInfo` 覆盖重写选项也能让你在不重启服务器的情况下设计和排查规则。然后，当你确定规则正确无误时，可以将其迁移到主配置文件中，并关闭覆盖选项。
- en: '`rewrite_module` injects itself into the server''s request handling workflow
    and can change what the requested URL looks like on the fly, given what we provide
    in our ruleset. Although the module is installed by default, we still need to
    explicitly enable URL rewriting with `RewriteEngine on`. Beyond that, the two
    most important rewrite options are `RewriteRule` and `RewriteCond`.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`rewrite_module` 将自身注入到服务器的请求处理工作流中，并根据我们在规则集中的提供内容，实时更改请求的 URL。尽管该模块默认已安装，但我们仍需显式启用
    URL 重写，使用 `RewriteEngine on`。除此之外，两个最重要的重写选项是 `RewriteRule` 和 `RewriteCond`。'
- en: 'The `RewriteRule` option specifies a regular expression against which the URL
    is compared. If it matches, then the given substitution takes place. Positional
    variables such as `$1` can be used in the substitution to reference captured pattern
    matches. In our recipe, the rule matches the path (such as `/about` or `/contactus`)
    and rewrites it to direct the user to a PHP script of the same name (`about.php`
    or `contact.php`), thus hiding the fact that we''re using PHP from our users:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`RewriteRule` 选项指定一个正则表达式，用于与 URL 进行比较。如果匹配，则进行给定的替代操作。可以在替代操作中使用位置变量，如 `"$1"`，来引用捕获的模式匹配。在我们的例子中，规则匹配路径（如
    `/about` 或 `/contactus`），并将其重写为指向同名的 PHP 脚本（如 `about.php` 或 `contact.php`），从而隐藏我们正在使用
    PHP 的事实。'
- en: '[PRE49]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We also can provide flags that affect how the request is returned. The `NC`
    flag, for example, performs the pattern matching case insensitively. The `L` flag
    stops the engine and returns the URL without any further rule processing. Also
    common are `R`, which forces a redirect (an HTTP status code is usually given,
    for example `R=301`), and `QSA`, which appends the query string from the original
    URL to the new URL.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提供一些标志来影响请求的返回方式。例如，`NC` 标志会执行不区分大小写的模式匹配。`L` 标志会停止引擎并返回 URL，而不再处理其他规则。常见的还有
    `R`，它强制进行重定向（通常会给出 HTTP 状态码，例如 `R=301`），以及 `QSA`，它将原始 URL 的查询字符串附加到新 URL 上。
- en: The `RewriteCond` option gives a condition that must pass before evaluating
    a `RewriteRule`. The condition is a mix of regular expression matching, variables,
    and test operators. Special variables are available which we can use to reference
    pieces of the URL, such as the hostname (`%{HTTP_HOST}`), the requested file (`%{REQUEST_FILENAME}`),
    and the query string (`%{QUERY_STRING}`), or details about the environment/request,
    such as cookies (`%{HTTP_COOKIE`}) and user agent strings (`%{HTTP_USER_AGENT}`).
    The `-d` operator tests whether the path is a directory, `-f` tests whether the
    path is a file, and `!` negates the match. `RewriteCond` can also accept a handful
    of flags, such as `NC` flag to make comparison without regard to case sensitivity
    and the `OR` flag to join multiple options in an *or* relationship (multiple options
    are implicitly treated as *and*).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`RewriteCond` 选项提供了一个条件，必须满足该条件才能评估 `RewriteRule`。该条件是正则表达式匹配、变量和测试操作符的结合。可以使用一些特殊变量来引用
    URL 的某些部分，例如主机名（`%{HTTP_HOST}`）、请求的文件（`%{REQUEST_FILENAME}`）以及查询字符串（`%{QUERY_STRING}`），或者有关环境/请求的详细信息，例如
    Cookie（`%{HTTP_COOKIE}`）和用户代理字符串（`%{HTTP_USER_AGENT}`）。`-d` 操作符用于测试路径是否是目录，`-f`
    用于测试路径是否是文件，`!` 用于取反匹配。`RewriteCond` 还可以接受一些标志，例如 `NC` 标志，它让比较不区分大小写，以及 `OR` 标志，用于将多个选项通过
    *或* 关系连接（多个选项默认被视为 *与*）。'
- en: 'A very common rewrite that uses both `RewriteCond` and `RewriteRule` is one
    that directs the user to a main `index.php` file when the request doesn''t match
    an existing file or directory. This is used a lot with web applications that route
    all requests through a central control point:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的重写示例，使用了 `RewriteCond` 和 `RewriteRule`，当请求不匹配现有的文件或目录时，会将用户引导到一个主 `index.php`
    文件。这在许多将所有请求通过中央控制点路由的 Web 应用程序中使用得非常多：
- en: '[PRE50]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The first `RewriteCond` option checks whether the request is for an existing
    file and the second checks the same for an existing directory. If the request
    is neither for a file nor a directory, then the `RewriteRule` option maps the
    request to `index.php`. Any query string that may be present is included and it's
    marked as the last action, so no further rewriting will be performed.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 `RewriteCond` 选项检查请求是否是现有文件，第二个检查请求是否是现有目录。如果请求既不是文件也不是目录，那么 `RewriteRule`
    选项会将请求映射到 `index.php`。任何可能存在的查询字符串都会被包括在内，并且它被标记为最后的操作，因此不会再进行进一步的重写。
- en: 'Many people jokingly refer to rewriting as black magic. Indeed, it''s impressive
    how powerful `mod_rewrite` is and how it transforms requests, and it can be frustrating
    when you can''t seem to figure out the proper incantation to make your rule work
    as desired. In this case, you may want to turn on logging to gain insight into
    how the engine views the request. To enable logging, use the `RewriteLog` option
    to specify a log file where messages can be written to, and use `RewriteLogLevel`
    to specify the verbosity. Typically, a value of `5` for `RewriteLogLevel` is sufficient.
    They can be added to your `.htaccess` file and removed later after you''re confident
    that your rules are correct:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人开玩笑说 URL 重写是黑魔法。的确，`mod_rewrite` 功能强大，能够将请求转换得如此神奇，当你无法找到正确的写法时，它会让人感到沮丧。在这种情况下，你可能需要开启日志记录，以便深入了解引擎如何看待请求。要启用日志记录，可以使用
    `RewriteLog` 选项指定日志文件，并使用 `RewriteLogLevel` 来指定日志的详细程度。通常，`RewriteLogLevel` 设置为
    `5` 足够了。它们可以被添加到 `.htaccess` 文件中，待确认规则正确后再删除：
- en: '[PRE51]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: See also
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following resources for more information on rewriting URLs:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下资源，以获取有关 URL 重写的更多信息：
- en: Apache `mod_rewrite` documentation ([http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html))
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache `mod_rewrite` 文档 ([http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html))
- en: URL rewriting guide ([http://httpd.apache.org/docs/2.0/misc/rewriteguide.html](http://httpd.apache.org/docs/2.0/misc/rewriteguide.html))
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL 重写指南 ([http://httpd.apache.org/docs/2.0/misc/rewriteguide.html](http://httpd.apache.org/docs/2.0/misc/rewriteguide.html))
- en: URL rewriting for the fearful ([https://24ways.org/2013/url-rewriting-for-the-fearful](https://24ways.org/2013/url-rewriting-for-the-fearful))
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向恐惧者的 URL 重写 ([https://24ways.org/2013/url-rewriting-for-the-fearful](https://24ways.org/2013/url-rewriting-for-the-fearful))
- en: Installing NGINX as a load balancer
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 NGINX 作为负载均衡器
- en: High traffic websites can be distributed to different servers, either to better
    spread out the workload or to achieve redundancy. Each server in the cluster of
    systems would have their own copy of the website or web application's files and
    be capable of satisfying the user's request. The trick then is to route the user's
    request to one of these servers in an orderly fashion. There are different approaches
    to this, but a common one is to set up a load balancer or reverse proxy server.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 高流量网站可以分布到不同的服务器上，要么更好地分配工作负载，要么实现冗余。集群中的每台服务器都有自己的一份网站或Web应用文件，并能够满足用户的请求。诀窍在于按顺序将用户的请求路由到这些服务器之一。实现这一点的方法有很多种，但常见的一种是设置负载均衡器或反向代理服务器。
- en: NGINX is somewhat newer to the scene than Apache; written a little over a decade
    ago specifically to handle high-load connections, it can function as a web server,
    proxy, cache, and load-balancer. In this recipe, we'll see how to set up NGINX
    as a load balancer to proxy requests between the client and a cluster of Apache
    servers.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX在登场时间上略晚于Apache；它大约十多年前为了处理高负载连接而特别编写，可以作为web服务器、代理、缓存和负载均衡器。在本例中，我们将看到如何将NGINX设置为负载均衡器，在客户端和一组Apache服务器之间代理请求。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. It assumes
    that you have other systems configured with Apache to serve a website as described
    in the earlier recipes; we'll refer to these systems using the IP addresses `192.168.56.20`
    and `192.168.56.30`. The package for NGINX is hosted by the EPEL repository; if
    the repository is not already registered, refer to the *Registering the EPEL and
    Remi repositories* recipe in [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*. Administrative privileges are
    also required, either by logging in with the `root` account or through the use
    of `sudo`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 本例需要一个具有工作网络连接的CentOS系统。假设你已经配置了其他系统，使用Apache提供网站，如前面章节所述；我们将使用IP地址`192.168.56.20`和`192.168.56.30`来引用这些系统。NGINX的包托管在EPEL仓库中；如果仓库尚未注册，请参考[第4章](ch04.html
    "第4章 软件安装管理")中的*注册EPEL和Remi仓库*一节，*软件安装管理*。此外，还需要管理员权限，可以通过`root`账户登录或使用`sudo`。
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to set up reverse proxy using NGINX:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用NGINX设置反向代理：
- en: 'Install the `nginx` package from the EPEL repository:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从EPEL仓库安装`nginx`包：
- en: '[PRE52]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open the NGINX server''s configuration file with your text editor:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开NGINX服务器的配置文件：
- en: '[PRE53]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Within the `http` block, add a new `upstream` block to identify the servers
    in your cluster:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http`块中，添加一个新的`upstream`块以标识集群中的服务器：
- en: '[PRE54]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Find the `location` block and add a `proxy_pass` option that references the
    `upstream` block:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`location`块并添加一个引用`upstream`块的`proxy_pass`选项：
- en: '[PRE55]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Save your changes to the configuration and close the file.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存配置文件的更改并关闭文件。
- en: 'Start the server and enable it to start automatically when your system reboots:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动服务器并使其在系统重启时自动启动：
- en: '[PRE56]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Open port `80` in the system''s firewall to allow HTTP requests through:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统的防火墙中打开端口`80`，允许HTTP请求通过：
- en: '[PRE57]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'As usual, we began by installing the program''s package, this time `nginx`.
    The package is available in the EPEL repository. Once installed, we updated its
    configuration, identifying the servers in our cluster and then proxying requests.
    First, we added an `upstream` block:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，我们首先安装了程序包，这次是`nginx`。该包可以在EPEL仓库中找到。安装后，我们更新了它的配置，标识了集群中的服务器，并代理了请求。首先，我们添加了一个`upstream`块：
- en: '[PRE58]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '`cluster` is simply a name we assigned to this group of servers so that we
    can refer to the group by name. You can have multiple upstream blocks if you are
    balancing multiple clusters. Each `server` entry within it gives the IP address
    or hostname of one of the systems running the site.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`cluster`仅仅是我们为这一组服务器指定的名称，方便我们通过名称引用该组。如果你有多个集群在进行负载均衡，可以有多个`upstream`块。每个`server`条目中都包含了运行网站的系统的IP地址或主机名。'
- en: 'Next, we found the main `location` block and added a `proxy_pass` parameter.
    `proxy_pass` will forward the incoming request to one of the systems in our cluster
    group and return the response to satisfy the request:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们找到了主`location`块，并添加了一个`proxy_pass`参数。`proxy_pass`将把传入的请求转发到集群中的一台系统，并返回响应以满足请求：
- en: '[PRE59]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Communication between NGINX and the hosting web servers is done over `http`
    since that's the protocol specified in the value for `proxy_pass`. This is fine
    because the clustered systems would be running behind the load balancer on a trusted
    network. If your site is to be served over HTTPS, it's NGINX that will need to
    handle the TLS negotiation as it's the public server point seen by the client;
    the client is unaware of anything behind the balancer.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX和托管Web服务器之间的通信是通过`http`协议进行的，因为在`proxy_pass`的值中指定了该协议。这是可以的，因为集群系统将会在负载均衡器后面的受信任网络中运行。如果你的网站需要通过HTTPS提供服务，那么需要NGINX处理TLS协商，因为它是客户端所见的公有服务器点；客户端对负载均衡器后面的内容一无所知。
- en: 'To configure NGINX to handle HTTPS requests, within the `server` block update
    the `listen` options to listen on port 443\. Then add entries with the `ssl_certificate`
    and `ssl_certificate_key` options to identify the certificate and key, respectively:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置NGINX处理HTTPS请求，需在`server`块内更新`listen`选项以监听端口443。然后添加包含`ssl_certificate`和`ssl_certificate_key`选项的条目，分别标识证书和密钥：
- en: '[PRE60]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Once the changes are made and the configuration file is saved, open port `443`
    in your firewall and restart NGINX:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成更改并保存配置文件，请在防火墙中打开端口`443`并重启NGINX：
- en: '[PRE61]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Round-robin is the default approach for load balancing. This means the first
    request is proxied to the first server in the cluster, then next to the second
    server, and so on. When NGINX reaches the end of the list, it starts again from
    the top of the list, proxying the next request to the first server. There are
    other strategies we can use, for example, weighted balancing.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 循环轮询是负载均衡的默认方法。这意味着第一个请求会被代理到集群中的第一台服务器，然后是第二台服务器，依此类推。当NGINX到达列表末尾时，它会从列表顶部重新开始，将下一个请求代理到第一台服务器。我们还可以使用其他策略，例如加权均衡。
- en: 'To perform weighted balancing, we assign a weight to any of the servers and
    it will handle that number of requests per iteration. Here, the first server will
    handle five requests before NGINX proxies anything to the second server:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行加权均衡，我们为任意服务器分配一个权重，它将在每次迭代中处理该数量的请求。在这里，第一台服务器将处理五个请求，之后NGINX会将请求代理到第二台服务器：
- en: '[PRE62]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: When using load balancing, remember that any one web server isn't guaranteed
    to receive the next request sent by a user. If you're balancing access to a web
    application that uses sessions, this can be problematic. You may want to consider
    storing session data on a central system that each web server has access to, perhaps
    using a database such as Redis or Memcache.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用负载均衡时，请记住，没有任何一台Web服务器能保证接收到用户发送的下一个请求。如果你在负载均衡一个使用会话的Web应用时，这可能会成为问题。你可能需要考虑将会话数据存储在一个每台Web服务器都能访问的中央系统上，可能是使用像Redis或Memcache这样的数据库。
- en: Note
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I recommend that you avoid any balancing strategy that relies on session persistence.
    The post at [http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil](http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil)
    offers a good overview of their problems.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议避免使用任何依赖于会话持久性的负载均衡策略。可以参考[http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil](http://www.chaosincomputing.com/2012/05/sticky-sessions-are-evil)上的帖子，它提供了关于这些问题的良好概述。
- en: See also
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on working with NGINX
    and load balancing:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下资源，获取更多关于NGINX和负载均衡的信息：
- en: The NGINX website ([https://www.nginx.com/](https://www.nginx.com/))
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NGINX官网 ([https://www.nginx.com/](https://www.nginx.com/))
- en: How to install NGINX on CentOS 7 ([https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7))
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在CentOS 7上安装NGINX ([https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7))
- en: Configuring HTTPS servers ([http://nginx.org/en/docs/http/configuring_https_servers.html](http://nginx.org/en/docs/http/configuring_https_servers.html))
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置HTTPS服务器 ([http://nginx.org/en/docs/http/configuring_https_servers.html](http://nginx.org/en/docs/http/configuring_https_servers.html))
- en: Using NGINX as a load balancer ([http://nginx.org/en/docs/http/load_balancing.html](http://nginx.org/en/docs/http/load_balancing.html))
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NGINX作为负载均衡器 ([http://nginx.org/en/docs/http/load_balancing.html](http://nginx.org/en/docs/http/load_balancing.html))
- en: How to store PHP sessions in Memcache ([http://www.scalescale.com/tips/nginx/store-php-sessions-memcached](http://www.scalescale.com/tips/nginx/store-php-sessions-memcached))
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将PHP会话存储在Memcache中 ([http://www.scalescale.com/tips/nginx/store-php-sessions-memcached](http://www.scalescale.com/tips/nginx/store-php-sessions-memcached))
