["```\n$ sudo apt-cache pkgnames code\n```", "```\n$ sudo apt install code\n```", "```\n$ sudo apt install install code_version_arch.deb\n```", "```\nPS> Get-Command -Noun Variable\n```", "```\nPS> Get-Help Get-Variable\n```", "```\nPS> Get-Variable\n```", "```\nPS> Get-PsProvider\n```", "```\nPS> Set-Location Variable:\n```", "```\nPS> Get-ChildItem .\n```", "```\nGet-ChildItem /home/ram/random-directory\nWrite-Host \"Hello world!\"\n```", "```\nPS> Set-Variable ErrorActionPreference SilentlyContinue\n```", "```\nPS> Get-Variable Error\n```", "```\nGet-Variable Error | Select-Object -ExpandProperty Value\n```", "```\nPS> $PROFILE\n```", "```\nPS> Test-Path $PROFILE\n```", "```\nPS> New-Item $PROFILE -ItemType File\n```", "```\nPS> New-Item $PROFILE -ItemType File -Force\n```", "```\nPS> code $PROFILE\n```", "```\nPS> Get-Variable ErrorActionPreference\nContinue\n```", "```\nPS> Set-Variable ErrorAction SilentlyContinue\n```", "```\nPS> $ErrorActionPreference\nSilentlyContinue\n```", "```\nPS> Get-ChildItem /home/ram/random-directory\n```", "```\n Remove-Item $PROFILE\n```", "```\nfunction prompt {\n  $Location = (Get-Location).Path.ToString()\n  switch -Wildcard ($Location) {\n    \"/home/$env:USERNAME\" { $Location = '~'; break }\n    \"/home/$env:USERNAME/Documents\" { $Location = 'Documents'; break }\n    \"/home/$env:USERNAME/Downloads\" { $Location = 'Downloads'; break }\n    \"/home/$env:USERNAME/Pictures\" { $Location = 'Pictures'; break }\n    \"/home/$env:USERNAME/Videos\" { $Location = 'Videos'; break }\n    \"/home/$env:USERNAME/Music\" { $Location = 'Music'; break }\n    \"/home/$env:USERNAME/Documents/code\" { $Location = 'Code'; break }\n    \"/home/$env:USERNAME/*\" { $Location = $Location.Replace(\"/home/$env:USERNAME/\", '~/'); break }\n    Default { }\n  }\n  Write-Host \"PS \" -NoNewline\n  Write-Host `\n    ($($env:USERNAME) + \"@\" + \"$([System.Net.Dns]::GetHostByName((hostname)).HostName) \") `\n    -NoNewLine -ForegroundColor Cyan\n  Write-Host \"$Location\" -NoNewline -ForegroundColor Green\n  Write-Host (\"`n> \") -NoNewline\n  return \" \"\n}\n```", "```\nGet-Command prompt\n```", "```\nPS> (Get-Command prompt).ScriptBlock\n```", "```\nPS> Get-Process\n```", "```\nPS> Get-Process > processes.txt\n```", "```\nPS> Get-Content ./processes.txt\n```", "```\nPS> Get-Date >> ./processes.txt\n```", "```\nPS> Get-Content ./processes.txt\n```", "```\nPS> Get-Process | Out-File processes.txt\n```", "```\nPS> Get-Date | Out-File processes.txt -Append\n```", "```\nPS> Get-Process | Tee-Object ./processes.txt\n```", "```\nPS /home/ram> Get-Content ./processes.txt\n```", "```\n$ command < input_file.txt\n```", "```\nPS> Get-Content input_file.txt | command\n```", "```\nPS> Get-Content input.txt\n```", "```\n$ ls\n```", "```\nPS> Get-Content input.txt | Remove-Item\n```", "```\nPS> Get-ChildItem .\n```", "```\nPS> Get-Help Remove-Item -Parameter Path\n```", "```\nPS> ls -l\n```", "```\nPS> ls -l | Get-Member\n```", "```\nPS> ls -l | Get-Member\n```", "```\nPS> ls -l\n```", "```\nPS> ls -l\n```", "```\nPS> ls -l\n```", "```\nPS> Get-ChildItem -l\n```", "```\nPS> Get-Alias ls\n```", "```\nPS> Get-Alias ls\n```", "```\nGet-ChildItem\n```", "```\nGet-ChildItem .\n```", "```\nGet-ChildItem -Path .\n```", "```\nPS> Get-Help Get-ChildItem -Parameter Path\n\n-Path <String[]>\n    Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (`.`).\n\n    Required?                    false\n    Position?                    1\n    Default value                Current directory\n    Accept pipeline input?       True (ByPropertyName, ByValue)\n    Accept wildcard characters?  true\n```", "```\nGet-Help New-Item\n\n.\n.\n.\nSYNTAX\n    New-Item [[-Path] <String[]>] [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] -Name <String> [-UseTransaction] [-Value <Object>] [-WhatIf] [<CommonParameters>]\n\n    New-Item [-Path] <String[]> [-Confirm] [-Credential <PSCredential>] [-Force] [-ItemType <String>] [-UseTransaction] [-Value <Object>] [-WhatIf] [<CommonParameters>]\n```", "```\nPS> Get-Help New-Item -Parameter Path\n\n-Path <String[]>\n    Specifies the path of the location of the new item. Wildcard characters are permitted.\n\n    You can specify the name of the new item in Name , or include it in Path .\n\n    Required?                    true\n    Position?                    0\n    Default value                None\n    Accept pipeline input?       True (ByPropertyName)\n    Accept wildcard characters?  false\n```", "```\nNew-Item file1\n```", "```\nNew-Item -Name file2\n```", "```\nNew-Item -Path file3\n```", "```\nGet-ChildItem -Path .\n```", "```\nGet-Help Remove-Item\n```", "```\nRemove-Item file1\n```", "```\nGet-ChildItem -Path .\n```", "```\nRemove-Item -Path file1, file2\n```", "```\nNew-Item -Path test-dir -ItemType Directory\n```", "```\nNew-Item test-dir/file1, test-dir/file2 -ItemType File\nNew-Item test-dir/child-dir -ItemType Directory\nNew-Item test-dir/child-dir/file3 -ItemType File\n```", "```\nRemove-Item -Path test-dir\n```", "```\nRemove-Item -Path test-dir -Recurse\n```", "```\nGet-ChildItem .\n```", "```\nMove-Item /home/ram/Documents/GitHub /home/ram/Documents/Code/\n```", "```\nNew-Item test-dir/child-dir -ItemType Directory -Force\nNew-Item ./test-dir/file1, ./test-dir/file2, ./test-dir/child-dir/file3\n```", "```\nGet-ChildItem -Path .\n```", "```\ngci\n```", "```\nget-ch<Tab><Space>.\n```", "```\nget-comm<Tab><Space>-param<Tab><Space>computername<Enter>\n```", "```\nGet-Command -Parameter computername\n```", "```\nget-comm<Tab><Space>-param<Tab><Tab>\n```", "```\nget-comm<Tab><Space>-param<Tab>n<Tab><Space>computername<Enter>\n```", "```\nGet-Command -ParameterName computername\n```", "```\nGet-Help Start-Sleep\n```", "```\nStart-Sleep 5\n```", "```\nstart-s<Tab><Space>-mi<Tab>100\n```", "```\nStart-Sleep -Milliseconds 100\n```", "```\nstart-s<Tab><Space>-m<Space>100\n```", "```\nStart-Sleep -m 100\n```", "```\nset-exec<Tab><Space>-exec<Tab><Space>unre<Tab> \n```", "```\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted \n```", "```\nget-comm<Tab>-parametern<Tab>Cn\n```", "```\nGet-Command -ParameterName Cn\n```", "```\nGet-Command -ParameterName ComputerName\n```", "```\nGet-Command Invoke-Command \n```", "```\nGet-Command Invoke-Command | Get-Member \n```", "```\n(Get-Command Invoke-Command).Parameters \n```", "```\n(Get-Command Invoke-Command).Parameters | Get-Member \n```", "```\n(Get-Command Invoke-Command).Parameters.Values \n```", "```\n(Get-Command Invoke-Command).Parameters.Values | select Name, Aliases \n```", "```\nWrite-Host \"Hello, World!\"\n```", "```\n./hello-world.ps1\n```", "```\n$Message = \"I was dot-sourced!\"\n```", "```\n& ./hello-world\n```", "```\n$Message\n```", "```\n. ./hello-world.ps1\n```", "```\n$Message\n```", "```\npwsh -h\n```", "```\npwsh -c Get-ChildItem\n```", "```\npwsh -f ./Documents/code/github/powershell/chapter-3/hello-world.ps1\n```", "```\nStart-Transcript -Path ./command-transcript.txt\n```", "```\nGet-Date\n```", "```\nGet-ChildItem .\n```", "```\nNew-Item test-transcript -ItemType Directory\n```", "```\nNew-Item -Path test-transcript/testing-transcript.txt -ItemType File\n```", "```\n@'\nIn publishing and graphic design, lorem ipsum is a placeholder text commonly used to demonstrate the visual form of a document without relying on meaningful content (also called greeking).\nReplacing the actual content with placeholder text allows designers to design the form of the content before the content itself has been produced.\nâ€”Wikipedia\n'@ | Out-File ./test-transcript/testing-transcript.txt -Append\n```", "```\nRemove-Item -Path ./test-transcript -Recurse\n```", "```\nStop-Transcript\n```", "```\nGet-Content -Path ./command-transcript.txt\n```"]