- en: Using Python as a Bash Scripting Alternative
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 作为 Bash 脚本的替代方案
- en: 'In the previous chapter, we saw a practical example of using AWK and we saw
    how to process `lastlog` output to produce better reports. In this chapter, we
    will take a look at another scripting alternative for bash. We will talk about
    Python. Python is another scripting language and the newest that we have looked
    at so far. Similar to bash, Python is an interpreted language and makes use of
    the shebang. Although it does not have a shell interface, we can access a console
    called REPL where we can type Python code to interact with the system. In this
    chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了一些使用 AWK 的实际示例，并且我们了解了如何处理 `lastlog` 输出，以生成更好的报告。在本章中，我们将看看 Bash
    的另一种脚本替代方案，我们将讨论 Python。Python 是另一种脚本语言，也是我们迄今为止研究的最新语言。与 Bash 相似，Python 是一种解释型语言，并且使用了
    shebang。尽管它没有 shell 接口，但我们可以通过一个叫做 REPL 的控制台来访问， 在其中我们可以输入 Python 代码与系统进行交互。在本章中，我们将讨论以下内容：
- en: What is Python?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Python？
- en: Saying Hello World the Python way
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 Python 的方式打招呼——Hello World
- en: Pythonic arguments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pythonic 参数
- en: Significant whitespace
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显著的空格缩进
- en: Reading user input
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: String manipulation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串处理
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14)'
- en: What is Python?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python？
- en: Python is an object-oriented interpreted language that is designed to be easy
    to use and to aid **Rapid Application Development**. This is achieved by the use
    of simplified semantics in the language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种面向对象的解释型语言，旨在易于使用并促进**快速应用开发**。这一目标通过语言中简化的语法来实现。
- en: 'Python was created at the end of the 1980s, towards the very end of December
    1989, by the Dutch developer Guido van Rossum. The majority of the design of the
    language aims for clarity and simplicity, and one of the main rules of the *Zen
    of Python* is:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python 由荷兰开发者 Guido van Rossum 于 1989 年 12 月底创建。该语言的大多数设计旨在追求清晰和简洁，其中 *Zen of
    Python* 的一条主要规则是：
- en: '*There should be one, and preferable only one, obvious way to do it.*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*应该有一种，最好只有一种，明显的方式来做这件事。*'
- en: Often systems will have both Python 2 and Python 3 installed; however, all newer
    distributions are switching to Python 3\. We will be working with Python 3.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 系统通常同时安装 Python 2 和 Python 3，但所有新的发行版都在切换到 Python 3。我们将使用 Python 3。
- en: Since we are using Linux Mint, it comes shipped with Python 3 already.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是 Linux Mint，它已经预装了 Python 3。
- en: 'If you are using another Linux distribution or Python 3 is not found for any
    reason, you can install it like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是其他 Linux 发行版，或者由于某种原因找不到 Python 3，你可以通过以下方式进行安装：
- en: 'On RedHat based distributions:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基于 RedHat 的发行版上：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On Debian based distributions:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基于 Debian 的发行版上：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Although there is no shell, we can interact with Python using REPL—read, evaluate,
    print, and loop. We can access this by typing `python3` in the command line or
    `python36` if you are using CentOS 7\. You should see something similar to the
    following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有 shell，我们可以使用 REPL 来与 Python 交互——读取、评估、打印和循环。我们可以通过在命令行中输入 `python3` 或在使用
    CentOS 7 时输入 `python36` 来访问它。你应该会看到类似下面的截图：
- en: '![](img/f6f4a369-5ad2-417f-b7f3-c8c5d2f9c8f4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6f4a369-5ad2-417f-b7f3-c8c5d2f9c8f4.png)'
- en: We can see that we are presented with the `>>>` prompt and this is known as
    the REPL console. We should emphasize that this is a scripting language and, like
    bash and Perl, we will normally execute code through the text files that we create. Those
    text files will normally be expected to have a `.py` suffix to their name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，系统为我们提供了 `>>>` 提示符，这就是 REPL 控制台。我们需要强调的是，这是一种脚本语言，像 Bash 和 Perl 一样，我们通常通过我们创建的文本文件来执行代码。这些文本文件通常会以
    `.py` 作为后缀。
- en: 'While working with REPL, we can print the version independently by importing
    a module. In Perl, we will use the keyword; in bash we will use the command source;
    and in Python we use import:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 REPL 时，我们可以通过导入模块独立打印版本。在 Perl 中，我们使用关键字；在 Bash 中，我们使用命令 source；在 Python
    中，我们使用 import：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the module loaded, we can now investigate the object-oriented nature of
    Python by printing the version:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模块后，我们现在可以通过打印版本来探讨 Python 的面向对象特性：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will navigate to the `sys` object within our namespace and call the version
    method from that object.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导航到命名空间中的 `sys` 对象，并从该对象调用版本方法。
- en: 'Combining these two commands, we should see the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个命令结合起来，我们应该能看到以下输出：
- en: '![](img/244aaa63-2f2c-41d0-a43b-db41ce9bb335.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/244aaa63-2f2c-41d0-a43b-db41ce9bb335.png)'
- en: 'To close this section describing Python, we should take a look at the Zen of
    Python. From REPL, we can type `import this`, as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束这部分关于 Python 的描述时，我们应该看看 Python 的 Zen。在 REPL 中，我们可以输入 `import this`，如以下截图所示：
- en: '![](img/ee86f25a-9032-4709-918a-7890a7e289aa.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee86f25a-9032-4709-918a-7890a7e289aa.png)'
- en: This is far more than just the Zen of Python; it's actually a good rule for
    all programming languages and a guide for developers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这远不止是 Python 的 Zen，它实际上是所有编程语言的一个好规则，也是开发者的指南。
- en: Finally, to close the REPL, we will use *Ctrl* + *D* in Linux or *Ctrl* + *Z*
    in Windows.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要关闭 REPL，我们将在 Linux 中按 *Ctrl* + *D*，或在 Windows 中按 *Ctrl* + *Z*。
- en: Saying Hello World the Python way
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以 Python 方式输出 Hello World
- en: 'The code we write in Python should be clear and uncluttered: sparse is better
    than dense. We will need the shebang on the first line and then the `print` statement.
    The `print` function includes the newline and we do not need semicolons at the
    end of the line. We can see the edited version of `$HOME/bin/hello.py` in the
    following example:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中编写的代码应该清晰简洁：简洁胜过冗长。我们需要在第一行添加 shebang，然后是 `print` 语句。`print` 函数会自动添加换行符，且我们不需要在行尾加分号。我们可以在以下示例中看到编辑后的
    `$HOME/bin/hello.py` 版本：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will still need to add the execute permission, but we can run the code as
    earlier using `chmod`. This is shown in the following command but we should be
    a little used to this now:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要添加执行权限，但可以像之前一样使用 `chmod` 来运行代码。以下命令展示了这一点，尽管我们现在应该有些习惯了：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, we can now execute the code to see our greeting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以执行代码来查看我们的问候语。
- en: 'Similarly, you can run the file using the Python interpreter from the command
    line like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以通过命令行使用 Python 解释器运行文件，如下所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or in some Linux distributions, you can run it like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在某些 Linux 发行版中，你可以这样运行：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, knowing at least one language makes it easier to adapt to others and
    there aren't many new features in this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，至少掌握一门语言能更容易适应其他语言，这一点没有太多新意。
- en: Pythonic arguments
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pythonic 参数
- en: We should know by now that we will want to pass command-line arguments to Python
    and we can do this using the `argv` array. However, we are more like bash; with
    Python we combine the program name into the array with the other arguments.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该知道我们需要向 Python 传递命令行参数，可以通过 `argv` 数组来实现。不过，我们更像是 bash；在 Python 中，我们将程序名和其他参数一起放入数组中。
- en: 'Python also uses lowercase instead of uppercase in the object name:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还使用小写而不是大写来表示对象名称：
- en: The `argv` array is a part of the `sys` object
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argv` 数组是 `sys` 对象的一部分'
- en: '`sys.argv[0]` is the script name'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[0]` 是脚本名'
- en: '`sys.argv[1]` is the first argument supplied to the script'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[1]` 是传递给脚本的第一个参数'
- en: '`sys.argv[2]` is the second supplied argument and so on'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sys.argv[2]` 是第二个提供的参数，依此类推'
- en: The argument count will always be at least 1, so, keep this in mind when checking
    for supplied arguments
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数计数将始终至少为 1，因此，在检查提供的参数时请记住这一点
- en: Supplying arguments
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供参数
- en: 'If we create the `$HOME/bin/args.py` file we can see this in action. The file
    should be created as follows and made executable:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建 `$HOME/bin/args.py` 文件，我们可以看到这个操作的效果。文件应该按以下方式创建，并设置为可执行：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we run the script with a supplied argument, we should see something similar
    to the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行带有提供参数的脚本，应该能看到类似以下截图的内容：
- en: '![](img/9f8f5f9c-a8b6-49eb-a3ef-71fe4a6f2b59.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f8f5f9c-a8b6-49eb-a3ef-71fe4a6f2b59.png)'
- en: Our code is still quite clean and simple; however, you may have noticed that
    we cannot combine the quoted text in the `print` statement with the argument.
    We use the + symbol to join or concatenate the two strings together. As there
    is no specific symbol to denote a variable or any other type of object, they cannot
    appear as static text within quotes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码仍然相当简洁清晰；不过，你可能已经注意到，我们无法将 `print` 语句中的引号文本与参数结合起来。我们使用 + 符号来连接或拼接两个字符串。由于没有专门的符号表示变量或其他类型的对象，因此它们不能作为静态文本出现在引号内。
- en: Counting arguments
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数参数
- en: As previously mentioned, the script name is the first argument at index `0`
    of the array. So, if we try to count the arguments, then the count should always
    be at the very least 1\. In other words, if we have not supplied arguments, the
    argument count will be 1\. To count the items in an array, we can use the `len()`
    function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，脚本名称是数组中索引`0`的第一个参数。因此，如果我们尝试计算参数数量，计数应该至少为1。换句话说，如果我们没有提供参数，参数数量将为1。要计算数组中的项数，我们可以使用`len()`函数。
- en: 'If we edit the script to include a new line we will see this work, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们编辑脚本并加入一行新代码，我们将看到它的效果，如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Executing the code as we have earlier, we can see that we have supplied two
    arguments—the script name and then the string `Mokhtar`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的方式执行代码，我们可以看到我们提供了两个参数——脚本名称和字符串`Mokhtar`：
- en: '![](img/14f2ceb6-5e31-4896-a472-2e53ee8febc5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14f2ceb6-5e31-4896-a472-2e53ee8febc5.png)'
- en: 'If we try and have a single `print` statement to print the output and the number
    of arguments, then it will produce an error because we can''t concatenate integers
    with strings. The length value is an integer and this cannot be mixed with strings
    without conversion. That''s why we used the `str` function to convert the integer
    to a string. The following code will fail:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用一个`print`语句来打印输出和参数的数量，将会产生错误，因为我们不能将整数与字符串连接。长度值是一个整数，它不能与字符串混合，除非进行转换。因此，我们使用了`str`函数将整数转换为字符串。以下代码会失败：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/586821ef-3beb-4361-ba75-a15d1f8a3c39.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/586821ef-3beb-4361-ba75-a15d1f8a3c39.png)'
- en: 'If we try to run the script and omit to supply an argument, then there will
    be a null value in the array when we reference index `1`. This will give an error,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试运行脚本并省略了传递参数，那么当我们引用索引`1`时，数组中将会有一个空值。这将导致错误，如下图所示：
- en: '![](img/3bcebb19-f36c-4b3e-8385-92cda7f2c297.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bcebb19-f36c-4b3e-8385-92cda7f2c297.png)'
- en: We of course need to handle this to prevent the error; enter the concept of
    significant whitespace.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要处理这个问题以防止错误；这就是重要空白符的概念。
- en: Significant whitespace
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要的空白符
- en: A major difference between Python and most other languages is that additional
    whitespace can mean something. The indent level of your code defines the block
    of code to which it belongs. So far, we have not indented the code we have created
    past the start of the line. This means that all of the code is at the same indent
    level and belongs to the same code block. Rather than using brace brackets or
    the do and done keywords to define the code block, we use indents. If we indent
    with two or four spaces or even tabs, then we must stick to those spaces or tabs.
    When we return to the previous indent level, we return to the previous code block.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Python与大多数其他语言的一个主要区别是额外的空白符可能具有意义。代码的缩进级别定义了它属于的代码块。到目前为止，我们创建的代码没有缩进超出行的开始位置。这意味着所有代码都在相同的缩进级别，并且属于同一个代码块。与使用大括号或do和done关键字来定义代码块不同，Python使用缩进来表示代码块。如果我们使用两个或四个空格，甚至是制表符缩进，那么必须始终保持一致。当我们返回到上一个缩进级别时，我们就回到之前的代码块。
- en: 'This seems complex but it is really quite simple and keeps your code clean
    and uncluttered. If we edit the `arg.py` file to prevent unwelcomed errors, if
    an argument is not supplied, we can see this in action:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很复杂，但实际上它非常简单，可以保持代码的简洁和整洁。如果我们编辑`arg.py`文件以防止不必要的错误，当没有提供参数时，我们可以看到它的实际效果：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `if` statement checks if the argument count is greater than `1` or not.
    We now store for ease, the argument count has its own variable, which we call
    `count`. The code block starts with the colon and then all of the following code
    that is indented with four spaces is part of the code that will execute when the
    condition returns to true.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句检查参数数量是否大于`1`。现在为了方便，我们将参数数量存储到一个名为`count`的变量中。代码块以冒号开始，接着所有后续缩进四个空格的代码都是在条件成立时会执行的部分。'
- en: When we return to the previous indent level, we return to the main code block
    and we execute the code regardless of the status of the condition.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回到上一级缩进时，我们回到主代码块，并且无论条件的状态如何，都会执行代码。
- en: 'We can see this illustrated in the following screenshot, where we can execute
    the script with and without the argument:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下面的截图中看到这一点，在其中我们可以通过有无参数来执行脚本：
- en: '![](img/5442796d-3c11-4c49-88ad-32943ce706a0.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5442796d-3c11-4c49-88ad-32943ce706a0.png)'
- en: Reading user input
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: 'If we want the welcome message to greet us by name, no matter whether we supply
    the argument to the script or not, we can add in a prompt to capture the data
    while the script is running. Python makes this simple and easy to implement. We
    can see, from the edited file shown in the screenshot that follows, how this is
    achieved:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望欢迎消息根据我们的名字来问候我们，无论我们是否向脚本提供参数，我们都可以在脚本运行时添加一个提示来捕获数据。Python 可以简单而轻松地实现这一点。从下面的编辑文件中，我们可以看到如何实现这一点：
- en: '![](img/73f82bf9-3d49-406b-a5b8-8769a66edd85.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73f82bf9-3d49-406b-a5b8-8769a66edd85.png)'
- en: 'We make use of a new variable in the script that we set in the main block,
    initially, to be an empty string. We set it here to make the variable available
    to the complete script and all code blocks:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在脚本中使用了一个新变量，最初在主块中设置为空字符串。我们在这里设置它是为了使该变量对整个脚本和所有代码块都可用：
- en: '![](img/055b7509-1ee2-44ea-91a3-7ebf5d557ee2.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/055b7509-1ee2-44ea-91a3-7ebf5d557ee2.png)'
- en: The `input` function in Python 3 (or `raw_input` in Python 2) can be used to
    get user input. We store that input in the `name` variable. If we have supplied
    an argument we pick it up on the code in the `else` block and set the `name` variable
    to the first supplied argument. It is this that is used in the `print` statement
    back in the main block.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3 中的 `input` 函数（或 Python 2 中的 `raw_input`）用于获取用户输入。我们将输入存储在 `name` 变量中。如果我们提供了一个参数，在代码的
    `else` 块中我们将使用它，并将 `name` 变量设置为第一个提供的参数。这个在主块中的 `print` 语句中使用。
- en: Using Python to write to files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 写入文件
- en: 'To add some variety to this chapter, we will now look at printing this data
    to a file. Again using Python, this is quite a simple and easy way to pick up.
    We will start by making a copy of our existing `args.py`. We will copy this to
    `$HOME/bin/file.py`. The new `file.py` should read similar to the following screenshot
    and have the execute permission set:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加本章的变化，我们现在将看看如何将这些数据打印到文件中。再次使用 Python，这是一个相当简单和容易的方式。我们将首先复制我们现有的 `args.py`。我们将其复制到
    `$HOME/bin/file.py`。新的 `file.py` 应该类似于以下屏幕截图，并设置执行权限：
- en: '![](img/c2073b52-8953-4dfe-979d-8873f725f54a.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2073b52-8953-4dfe-979d-8873f725f54a.png)'
- en: You will notice that we have just altered the final lines and instead of print
    we now open a file. We also see more of the object-orientated nature of Python,
    whereby it dynamically assigns the `write()` and `close()` methods to the object
    log, as it is seen as an instance of a file. When we open the file, we open it
    up for the purpose of appending, meaning that we do not overwrite the existing
    content if it is already there. If the file is not there, we will create a new
    file. If we use `w`, we will open the file for writing, which might translate
    to overwriting, so take care.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们刚刚改变了最后几行，现在不再使用打印而是打开一个文件。我们还可以看到 Python 更多的面向对象的特性，其中它动态地为对象 `log`
    分配了 `write()` 和 `close()` 方法，因为它被视为文件的实例。当我们打开文件时，我们将其用于追加，这意味着如果文件已经存在内容，我们不会覆盖它。如果文件不存在，我们将创建一个新文件。如果使用
    `w`，我们将打开文件进行写入，这可能导致覆盖现有内容，所以请小心。
- en: You can see that this is an easy task; this is why Python is used in many applications
    and is taught widely in schools.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这是一个简单的任务；这就是为什么 Python 在许多应用程序中被广泛使用并且在学校广泛教授的原因。
- en: String manipulation
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串操作
- en: 'Dealing with strings in Python is very simple: you can search, replace, change
    character case, and perform other manipulations with ease:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Python 中的字符串非常简单：您可以轻松地进行搜索、替换、更改字符大小写和执行其他操作：
- en: 'To search for a string, you can use the find method like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要搜索字符串，您可以像这样使用 find 方法：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/409cba04-6f75-4ced-a2a0-f51c08178b79.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/409cba04-6f75-4ced-a2a0-f51c08178b79.png)'
- en: The string count in Python starts from zero too, so the position of the word
    `scripting` is at `18`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的字符串计数也是从零开始的，因此单词 `scripting` 的位置在 `18` 处。
- en: 'You can get a specific substring using square brackets like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用方括号获取特定子字符串，像这样：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/7d996f4c-71ac-4faa-8e65-b408841d8ae5.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d996f4c-71ac-4faa-8e65-b408841d8ae5.png)'
- en: 'To replace a string, you can use the replace method like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要替换字符串，您可以像这样使用 replace 方法：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/ad30521f-0df5-49e6-b500-1f411b6ede49.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad30521f-0df5-49e6-b500-1f411b6ede49.png)'
- en: 'To change the character case, you can use `upper()` and `lower()` functions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改字符大小写，您可以使用 `upper()` 和 `lower()` 函数：
- en: '![](img/2da7c9f9-6718-4ff1-914d-505e3c3f3fca.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2da7c9f9-6718-4ff1-914d-505e3c3f3fca.png)'
- en: As you can see, working with strings in Python is very simple. Python as an
    alternative scripting language is an awesome choice.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用 Python 处理字符串非常简单。作为替代脚本语言，Python 是一个非常棒的选择。
- en: The power of Python lies in the libraries available out there. Literally, there
    are thousands of libraries for everything you can imagine.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的强大之处在于其可用的库。实际上，几乎所有你能想到的都有成千上万的库。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This now finishes our look at Python and it certainly has been a brief tour.
    We can again emphasize the similarities that you will see in many languages and
    the importance of learning any coding language. What you learn in one language
    will help in most other languages that you come across.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们对 Python 的学习的结束，虽然这确实是一次简短的旅程。我们再次强调，你在学习多种语言时会看到的许多相似之处，以及学习任何编程语言的重要性。你在一种语言中学到的知识，将帮助你理解大多数你遇到的其他语言。
- en: 'What we learn from the Zen of Python will help us design and develop great
    code. We can print the Zen of Python using the following Python code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 的 Zen 中我们学到的内容将帮助我们设计和开发出色的代码。我们可以使用以下 Python 代码打印 Python 的 Zen：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can type the code on the REPL prompt. Keeping your code clean and well spaced-out
    will aid readability and ultimately this will help with code maintenance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 REPL 提示符下输入代码。保持代码简洁且良好排版将有助于提高可读性，并最终帮助代码维护。
- en: We have also seen that Python likes you to be explicit in your code and will
    not implicitly convert data types.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也看到，Python 喜欢你在代码中显式地指定，且不会隐式地转换数据类型。
- en: Finally, we saw how to manipulate strings using Python.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何使用 Python 操作字符串。
- en: We are also at the end of the book but hopefully, the start of your scripting
    career. Good luck and thank you for reading.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也到了本书的结尾，但希望这只是你编写脚本生涯的开始。祝你好运，谢谢阅读。
- en: Questions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How many characters will be printed from the following code?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将打印多少个字符？
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How many words will be printed from the following code?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将打印多少个单词？
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How many words will be printed from the following code?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码将打印多少个单词？
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Further reading
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容以获取与本章相关的进一步阅读资料：
- en: '[https://www.python.org/about/gettingstarted/](https://www.python.org/about/gettingstarted/)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.python.org/about/gettingstarted/](https://www.python.org/about/gettingstarted/)'
- en: '[https://docs.python.org/3/](https://docs.python.org/3/)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/](https://docs.python.org/3/)'
