- en: Using Python as a Bash Scripting Alternative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we saw a practical example of using AWK and we saw
    how to process `lastlog` output to produce better reports. In this chapter, we
    will take a look at another scripting alternative for bash. We will talk about
    Python. Python is another scripting language and the newest that we have looked
    at so far. Similar to bash, Python is an interpreted language and makes use of
    the shebang. Although it does not have a shell interface, we can access a console
    called REPL where we can type Python code to interact with the system. In this
    chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Python?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saying Hello World the Python way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pythonic arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Significant whitespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading user input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The source code for this chapter can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter14)'
  prefs: []
  type: TYPE_NORMAL
- en: What is Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is an object-oriented interpreted language that is designed to be easy
    to use and to aid **Rapid Application Development**. This is achieved by the use
    of simplified semantics in the language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python was created at the end of the 1980s, towards the very end of December
    1989, by the Dutch developer Guido van Rossum. The majority of the design of the
    language aims for clarity and simplicity, and one of the main rules of the *Zen
    of Python* is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*There should be one, and preferable only one, obvious way to do it.*'
  prefs: []
  type: TYPE_NORMAL
- en: Often systems will have both Python 2 and Python 3 installed; however, all newer
    distributions are switching to Python 3\. We will be working with Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using Linux Mint, it comes shipped with Python 3 already.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using another Linux distribution or Python 3 is not found for any
    reason, you can install it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On RedHat based distributions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian based distributions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Although there is no shell, we can interact with Python using REPL—read, evaluate,
    print, and loop. We can access this by typing `python3` in the command line or
    `python36` if you are using CentOS 7\. You should see something similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6f4a369-5ad2-417f-b7f3-c8c5d2f9c8f4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we are presented with the `>>>` prompt and this is known as
    the REPL console. We should emphasize that this is a scripting language and, like
    bash and Perl, we will normally execute code through the text files that we create. Those
    text files will normally be expected to have a `.py` suffix to their name.
  prefs: []
  type: TYPE_NORMAL
- en: 'While working with REPL, we can print the version independently by importing
    a module. In Perl, we will use the keyword; in bash we will use the command source;
    and in Python we use import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the module loaded, we can now investigate the object-oriented nature of
    Python by printing the version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will navigate to the `sys` object within our namespace and call the version
    method from that object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Combining these two commands, we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/244aaa63-2f2c-41d0-a43b-db41ce9bb335.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To close this section describing Python, we should take a look at the Zen of
    Python. From REPL, we can type `import this`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee86f25a-9032-4709-918a-7890a7e289aa.png)'
  prefs: []
  type: TYPE_IMG
- en: This is far more than just the Zen of Python; it's actually a good rule for
    all programming languages and a guide for developers.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to close the REPL, we will use *Ctrl* + *D* in Linux or *Ctrl* + *Z*
    in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Saying Hello World the Python way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code we write in Python should be clear and uncluttered: sparse is better
    than dense. We will need the shebang on the first line and then the `print` statement.
    The `print` function includes the newline and we do not need semicolons at the
    end of the line. We can see the edited version of `$HOME/bin/hello.py` in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will still need to add the execute permission, but we can run the code as
    earlier using `chmod`. This is shown in the following command but we should be
    a little used to this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we can now execute the code to see our greeting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can run the file using the Python interpreter from the command
    line like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or in some Linux distributions, you can run it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Again, knowing at least one language makes it easier to adapt to others and
    there aren't many new features in this.
  prefs: []
  type: TYPE_NORMAL
- en: Pythonic arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We should know by now that we will want to pass command-line arguments to Python
    and we can do this using the `argv` array. However, we are more like bash; with
    Python we combine the program name into the array with the other arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python also uses lowercase instead of uppercase in the object name:'
  prefs: []
  type: TYPE_NORMAL
- en: The `argv` array is a part of the `sys` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sys.argv[0]` is the script name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sys.argv[1]` is the first argument supplied to the script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sys.argv[2]` is the second supplied argument and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The argument count will always be at least 1, so, keep this in mind when checking
    for supplied arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supplying arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we create the `$HOME/bin/args.py` file we can see this in action. The file
    should be created as follows and made executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the script with a supplied argument, we should see something similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f8f5f9c-a8b6-49eb-a3ef-71fe4a6f2b59.png)'
  prefs: []
  type: TYPE_IMG
- en: Our code is still quite clean and simple; however, you may have noticed that
    we cannot combine the quoted text in the `print` statement with the argument.
    We use the + symbol to join or concatenate the two strings together. As there
    is no specific symbol to denote a variable or any other type of object, they cannot
    appear as static text within quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Counting arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously mentioned, the script name is the first argument at index `0`
    of the array. So, if we try to count the arguments, then the count should always
    be at the very least 1\. In other words, if we have not supplied arguments, the
    argument count will be 1\. To count the items in an array, we can use the `len()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we edit the script to include a new line we will see this work, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the code as we have earlier, we can see that we have supplied two
    arguments—the script name and then the string `Mokhtar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14f2ceb6-5e31-4896-a472-2e53ee8febc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we try and have a single `print` statement to print the output and the number
    of arguments, then it will produce an error because we can''t concatenate integers
    with strings. The length value is an integer and this cannot be mixed with strings
    without conversion. That''s why we used the `str` function to convert the integer
    to a string. The following code will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/586821ef-3beb-4361-ba75-a15d1f8a3c39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we try to run the script and omit to supply an argument, then there will
    be a null value in the array when we reference index `1`. This will give an error,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bcebb19-f36c-4b3e-8385-92cda7f2c297.png)'
  prefs: []
  type: TYPE_IMG
- en: We of course need to handle this to prevent the error; enter the concept of
    significant whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: Significant whitespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A major difference between Python and most other languages is that additional
    whitespace can mean something. The indent level of your code defines the block
    of code to which it belongs. So far, we have not indented the code we have created
    past the start of the line. This means that all of the code is at the same indent
    level and belongs to the same code block. Rather than using brace brackets or
    the do and done keywords to define the code block, we use indents. If we indent
    with two or four spaces or even tabs, then we must stick to those spaces or tabs.
    When we return to the previous indent level, we return to the previous code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'This seems complex but it is really quite simple and keeps your code clean
    and uncluttered. If we edit the `arg.py` file to prevent unwelcomed errors, if
    an argument is not supplied, we can see this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `if` statement checks if the argument count is greater than `1` or not.
    We now store for ease, the argument count has its own variable, which we call
    `count`. The code block starts with the colon and then all of the following code
    that is indented with four spaces is part of the code that will execute when the
    condition returns to true.
  prefs: []
  type: TYPE_NORMAL
- en: When we return to the previous indent level, we return to the main code block
    and we execute the code regardless of the status of the condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see this illustrated in the following screenshot, where we can execute
    the script with and without the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5442796d-3c11-4c49-88ad-32943ce706a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Reading user input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want the welcome message to greet us by name, no matter whether we supply
    the argument to the script or not, we can add in a prompt to capture the data
    while the script is running. Python makes this simple and easy to implement. We
    can see, from the edited file shown in the screenshot that follows, how this is
    achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73f82bf9-3d49-406b-a5b8-8769a66edd85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We make use of a new variable in the script that we set in the main block,
    initially, to be an empty string. We set it here to make the variable available
    to the complete script and all code blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/055b7509-1ee2-44ea-91a3-7ebf5d557ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: The `input` function in Python 3 (or `raw_input` in Python 2) can be used to
    get user input. We store that input in the `name` variable. If we have supplied
    an argument we pick it up on the code in the `else` block and set the `name` variable
    to the first supplied argument. It is this that is used in the `print` statement
    back in the main block.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python to write to files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add some variety to this chapter, we will now look at printing this data
    to a file. Again using Python, this is quite a simple and easy way to pick up.
    We will start by making a copy of our existing `args.py`. We will copy this to
    `$HOME/bin/file.py`. The new `file.py` should read similar to the following screenshot
    and have the execute permission set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2073b52-8953-4dfe-979d-8873f725f54a.png)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that we have just altered the final lines and instead of print
    we now open a file. We also see more of the object-orientated nature of Python,
    whereby it dynamically assigns the `write()` and `close()` methods to the object
    log, as it is seen as an instance of a file. When we open the file, we open it
    up for the purpose of appending, meaning that we do not overwrite the existing
    content if it is already there. If the file is not there, we will create a new
    file. If we use `w`, we will open the file for writing, which might translate
    to overwriting, so take care.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that this is an easy task; this is why Python is used in many applications
    and is taught widely in schools.
  prefs: []
  type: TYPE_NORMAL
- en: String manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dealing with strings in Python is very simple: you can search, replace, change
    character case, and perform other manipulations with ease:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To search for a string, you can use the find method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/409cba04-6f75-4ced-a2a0-f51c08178b79.png)'
  prefs: []
  type: TYPE_IMG
- en: The string count in Python starts from zero too, so the position of the word
    `scripting` is at `18`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get a specific substring using square brackets like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7d996f4c-71ac-4faa-8e65-b408841d8ae5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To replace a string, you can use the replace method like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ad30521f-0df5-49e6-b500-1f411b6ede49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To change the character case, you can use `upper()` and `lower()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2da7c9f9-6718-4ff1-914d-505e3c3f3fca.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, working with strings in Python is very simple. Python as an
    alternative scripting language is an awesome choice.
  prefs: []
  type: TYPE_NORMAL
- en: The power of Python lies in the libraries available out there. Literally, there
    are thousands of libraries for everything you can imagine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This now finishes our look at Python and it certainly has been a brief tour.
    We can again emphasize the similarities that you will see in many languages and
    the importance of learning any coding language. What you learn in one language
    will help in most other languages that you come across.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we learn from the Zen of Python will help us design and develop great
    code. We can print the Zen of Python using the following Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We can type the code on the REPL prompt. Keeping your code clean and well spaced-out
    will aid readability and ultimately this will help with code maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen that Python likes you to be explicit in your code and will
    not implicitly convert data types.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we saw how to manipulate strings using Python.
  prefs: []
  type: TYPE_NORMAL
- en: We are also at the end of the book but hopefully, the start of your scripting
    career. Good luck and thank you for reading.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many characters will be printed from the following code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How many words will be printed from the following code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How many words will be printed from the following code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please see the following for further reading relating to this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/about/gettingstarted/](https://www.python.org/about/gettingstarted/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/](https://docs.python.org/3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
