- en: Data Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A crucial part of any network are the data storage devices that allow data to
    be organized, cataloged, and mapped in permanent storage for the purposes of retention
    and retrieval. In our day-to-day computer use, we almost take the hard disk drive
    in our desktop or portable computer for granted. It's just there, after all. Data
    storage on a network, which uses basically the same storage technologies as the
    disk drive in the desktop computer, is more complicated and does require more
    attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll focus on the technology, devices, protocols, medium,
    and applications of data storage on a network. In doing so, we''ll look at the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The hardware specifications of data storage devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary disk drive interface protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data storage systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redundant Array of Independent Disks (RAID)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capacity planning for data storage needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data storage devices and their specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data has become one of the most valuable assets a person, business, company,
    enterprise, corporation, or organization has and must protect. Computing and storage
    devices that process and store data must be reliable and available, and above
    all else, secure.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll look at disk drive hardware and configuration, data storage
    and transfer protocols and technologies, and we'll also take a hard look at RAID.
  prefs: []
  type: TYPE_NORMAL
- en: Hard drive specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the most basic functioning levels, technology in hard disk drives, of all
    shapes and sizes is virtually the same. The following diagram shows the essential
    internal components of a basic hard disk drive. As this diagram illustrates, an
    actuator arm, attached to and positioned by the actuator shaft, extends, and retracts
    the read/write heads to place them over the appropriate track/cylinder and sector:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33fed98c-e32f-4c4a-a0d7-470131de8b3c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The primary components of a hard disk drive
  prefs: []
  type: TYPE_NORMAL
- en: 'As indicated earlier, hard disk drives come in a wide variety of sizes. In
    this case, size means different things: height, circumference, and capacity. A
    disk drive''s form factor sets the first two characteristics. The capacity of
    a hard disk drive relates to the disk''s form factor, but it''s more a function
    of the technology in use.'
  prefs: []
  type: TYPE_NORMAL
- en: Form factors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A form factor, as we discussed in an earlier chapter, sets the form and fit
    of a computer's case, motherboard, power supply, and more. However, for a hard
    disk drive, the form factor sets the height, width, length, and the type and placement
    of its connector to the host computer. The following sections discuss the more
    popular hard disk form factors found in servers.
  prefs: []
  type: TYPE_NORMAL
- en: Small form factor (SFF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SFF is smaller than most other common forms. The diameter of the internal disk
    platters average 2.5 inches in diameter. The SFF standard specifies a drive width
    of 2.7 inches, an overall length of 100 mm, or 3.93 inches, and a height ranging
    from 5 mm (0.20 inches) to 15 mm (0.59 inches). Because of their compact size,
    SFF hard disk drives are common in notebooks and other portable computers. SFF
    drives can be used in desktop computers as well but require mounting brackets
    to fill up a 3.5-inch bay.
  prefs: []
  type: TYPE_NORMAL
- en: Because their storage capacity can be as much as 5 TB, SFF drives are in use
    in some server environments. In these systems, interactive and transaction-processing
    systems use SFF drives, and backup, archival, and larger volume backups use larger
    drives or technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Large form factor (LFF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The height dimension of a **large form factor** (**LFF**) hard disk drive can
    range from 19.9 mm (0.78 inches) to 26.1 mm (1.03-inches). While this may not
    seem *large*, the latest LFF drives are able to store as much as 100 TB, depending
    on their technology (more on this later). The length dimension of an LFF drive
    is 146 mm (5.75 inches) and its width is 101.6 mm (4.0 inches). The following
    image illustrates the difference in the sizes of the SFF and the LFF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0d57f10-f98c-4f7e-9bb3-eccbdbaab49e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A comparison of a 3.5-inch LFF (left) and a 2.5-inch SFF (right)
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Seagate Technology, LLC'
  prefs: []
  type: TYPE_NORMAL
- en: HDD specification and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical specifications of an HDD describe its technology, interface,
    capacity, and operational speeds. For any HDD, there are two sets of specifications:
    the device specifications and the configured specifications. **Device specifications**
    indicate the *raw* or unformatted measurements of the disk drive''s components
    and operations. The **configuration specifications**, which are also called **logical
    configurations,** reflect any changes to the device specifications after formatting
    or partitioning the disk media.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The device specifications important to either internal or external disk drives
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Revolutions per minute (RPM)**: The two dominant RPM rates in HDDs are 7,200
    and 5,400, which indicate the number of times the disk platters in a disk drive
    rotate in a minute. A higher number means a faster disk drive. For example, a
    7,200 RPM drive is roughly one-third faster than a 5,400 RPM drive. In this case,
    faster means that the stored bits on the disk platter move under the read/write
    head at a faster rate, which speeds up the data transfer process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface**: The type of communication interface a drive supports can indicate
    the capacity of a drive, the bus width used to transfer data to or from the HDD,
    and its maximum (raw) data storage capacity. The following table shows the transfer
    rates and maximum capacity for each of the currently popular hard disk bus interfaces
    (see the *Hard disk interfaces* section later in this chapter for more information):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **HDD Interface** | **Maximum transfer rate (Mbps)** | **Maximum capacity
    (TB)** |'
  prefs: []
  type: TYPE_TB
- en: '| PATA | 133 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| SCSI | 320 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| SATA | 600 | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| SAS | 750 | 12 |'
  prefs: []
  type: TYPE_TB
- en: Characteristics of commonly used HDD interfaces
  prefs: []
  type: TYPE_NORMAL
- en: '**Access time**: This is the aggregate of each of the timing elements that
    occur after the disk controller initiates an I/O action and immediately before
    data can be read from or written to the disk medium. Access time includes the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seek time**: The time it takes for the actuator arm to position the read/write
    head over the appropriate disk platter and then over the disk track on that platter
    that contains the targeted data sector.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotational latency**: Also known as rotational delay or latency, this is
    the time required for the rotating disk platter to move the targeted data sector
    under the read/write head.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command execution** **time** and **settle time**: These measurements are
    generally very small and may not be included in a manufacturer''s hard disk drive
    performance specifications. **Command execution time** is the time required to
    establish the link between the various elements involved in the transfer of data
    to or from the memory or the disk drive. **Settle time** is the time required
    to lower the read/write head into position to write data to the disk medium or
    read data from the disk medium. Most HDD specifications include settle time in
    seek time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throughput**: Also known as **data transfer rate** (**DTR**), this is the
    time required to move data from one location to another in a specific operation.
    In the context of an HDD, throughput is measured as *read throughput* and *write
    throughput*. In either case, this is what is required to move data from the read/write
    head to memory (read throughput) or from memory to the read/write head (write
    throughput).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I/O operations per second (IOPS)**: This is pronounced *eye-ops*, IOPS measures
    the number of read and write operations from and to random, non-contiguous addresses
    that an HDD can perform in one second. The structure of this measurement may vary
    from different manufacturers, so it may not be a reliable metric for comparing
    HDDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk capacity – decimal versus binary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The storage capacity of a storage device, such as an HDD, is expressed as both
    a decimal value and a binary value, which can confuse the amount of actual space
    available on the device. For example, the decimal value of 1000^(10) or 1 KB is
    often used interchangeably as the equivalent of 2^(10) or 1024^(10 )which is also
    referred to as 1 KB.
  prefs: []
  type: TYPE_NORMAL
- en: A hard disk drive and a few other storage devices often appear to lose around
    seven percent of their stated or nominal capacity after they are formatted. For
    example, a new 1 GB HDD ends up having only approximately 938 MB after being formatted.
    This difference represents the average of seven percent of the total storage that
    seems to disappear.
  prefs: []
  type: TYPE_NORMAL
- en: The confusion comes from the fact that a computer, because of its design, uses
    binary representations of numeric values, such as 2^(20) being considered to be
    the same as 10⁶, or 1,048,576 being interchangeable with 1,000,000, or essentially
    1 MB equaling 1 MB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the more commonly used prefix notations and their
    equivalent values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Prefix** | **Value** | **Decimal****power** | **Decimal****value** | **Binary****power**
    | **Binary value** |'
  prefs: []
  type: TYPE_TB
- en: '| Kilo | Thousand | 103 | 1,000 | 210 | 1,024 |'
  prefs: []
  type: TYPE_TB
- en: '| Mega | Million | 106 | 1,000,000 | 220 | 1,048,576 |'
  prefs: []
  type: TYPE_TB
- en: '| Giga | Billion | 109 | 1,000,000,000 | 230 | 1,073,741,824 |'
  prefs: []
  type: TYPE_TB
- en: '| Tera | Trillion | 1012 | 1,000,000,000,000 | 240 | 1,099,511,627,776 |'
  prefs: []
  type: TYPE_TB
- en: '| Peta | Quadrillion | 1015 | 1,000,000,000,000,000 | 250 | 1,125,899,906,842,624
    |'
  prefs: []
  type: TYPE_TB
- en: '| Exa | Quintillion | 1018 | 1,000,000,000,000,000,000 | 260 | 1152921504606846976
    |'
  prefs: []
  type: TYPE_TB
- en: '| Zetta | Sextillion | 1021 | 1,000,000,000,000,000,000,000 | 270 | 1180591620717411303424
    |'
  prefs: []
  type: TYPE_TB
- en: '| Yotta | Septillion | 1024 | 1,000,000,000,000,000,000,000,000 | 280 | 1,208,925,819,614,629,174,706,176
    |'
  prefs: []
  type: TYPE_TB
- en: Numeric notation prefixes
  prefs: []
  type: TYPE_NORMAL
- en: Hard disk drive (HDD) versus solid-state drive (SSD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mechanical, or common, HDD has at least eight major moving parts, some of
    which are shown in *The primary components of a hard disk drive* image in the
    *Hard drive specifications* section earlier in the chapter. Just the term *moving
    parts* may send up a red flag, because anything that moves can break or wear out.
    Okay, so not many hard drives fail due to a seized-up actuator arm or an intermittent
    read/write gap error, but they could. A hard disk drive that has no moving parts
    would be ideal and there'd be no threat of mechanical breakdown. An SSD is just
    such a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'An SSD works along the lines of a USB flash memory drive in that both store
    data in semiconductor chips (see the following image). Solid-state is a term that
    has been around since the days of transistor radios. It refers to a circuit that
    is made up solely of semiconductors. Solid-state also means that there are no
    moving parts. SSDs are mostly designed for internal installation in a portable
    or compact computer, but they can also be external devices as well, sort of like
    very large flash drives. SSDs typically use either an SAS or SATA interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1b7553f-3c87-4169-b66c-8fe3a4b4acb4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An exploded view of an SSD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Intel Corporation'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using an SSD over an HDD are characterized mainly by three
    things: dependability, speed, and reduced power consumption. As shown in the following
    table, an SSD has an edge over an HDD, but only in the extreme. An SSD is nearly
    four times faster than an HDD on average and uses about half as much power. On
    the other hand, the capacity of an SSD hasn''t caught up with HDD yet and its
    cost per GB is much higher. What this all means is that an SSD storage device
    is more dependable, faster, and operationally less costly to use. However, the
    upfront costs are higher:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Characteristic** | **HDD** | **SSD** |'
  prefs: []
  type: TYPE_TB
- en: '| Failure rate | 1.5 million hours MTBF* | 2.0 million hours MTBF* |'
  prefs: []
  type: TYPE_TB
- en: '| Read / write speed | 50 – 120 MBps | 200 – 550 MBps |'
  prefs: []
  type: TYPE_TB
- en: '| Power usage | 6 – 7 watts | 2 – 3 watts |'
  prefs: []
  type: TYPE_TB
- en: '| Maximum capacity | 10 TB | 4 TB |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | $ 0.03/GB | $ 0.20/GB |'
  prefs: []
  type: TYPE_TB
- en: A comparison of the physical characteristics of an HDD and an SSD
  prefs: []
  type: TYPE_NORMAL
- en: '* MTBF = mean time between failures'
  prefs: []
  type: TYPE_NORMAL
- en: SSD specification and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comparing an HDD to an SSD on just their speed ratings is simple—the SSD is
    faster. The answer to the question, *What is the difference between SSD and HDD?*
    is *pretty much everything*. Well, maybe not everything. After all, an SSD doesn't
    have all of the moving parts. In fact, it has none of those of an HDD. This removes
    some performance specifications from the comparison, such as RPM, rotational delay,
    settle time, and a few others.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas an HDD is a serially accessed device, an SSD is a random-access device.
    You can randomly access an HDD, but there is latency in getting to the data. On
    an SSD, you go directly to the data. None of the latency issues associated with
    the physics of an HDD effect the performance of an SSD. Measures such as IOPS,
    access time, and throughput are many times higher or lower, as the case may be.
    Remember too that the SSD is more expensive, at least for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: Hard disk interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it may be inside the system case, an HDD is a peripheral device to
    the motherboard and CPU. An HDD and a computer communicate, that is, pass data
    to each other, through a drive interface. A drive interface is the bus structure
    that the device driver, the hard disk device, RAM, and controllers use to pass
    data requests and the data requested.
  prefs: []
  type: TYPE_NORMAL
- en: HDD interfaces are either word-serial or bit-serial. Word-oriented interfaces
    transfer data in 8-bit, 16-bit, or 32-bit words using parallel bit signaling.
    Examples of word-oriented interfaces are the **Small Computer Serial Interface**
    (**SCSI**) and the **Parallel Advanced Technology Attachment** (**PATA**). Bit-oriented
    interfaces interconnect through a **host bus adapter** (**HBA**). Examples of
    bit-oriented interfaces are **fibre channel** (**FC**), **serial ATA** (**SATA**),
    and **serial attached SCSI** (**SAS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The HDD drive interfaces you should know about for the Security+ exam are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PATA**: PATA uses parallel bit signaling to transmit word-length data between
    an HDD and controllers and drivers. It connects to the system through an 80-pin
    cable that carries a 5V signal. Not every conductor carries data. If fact, every
    second wire is a ground. Because of the size of its connecting cable, a PATA HDD
    is an internally mounted device. PATA devices can transfer data with DTRs as high
    as 80 MBps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SATA**: SATA uses serial bit signaling to transmit data between an HDD and
    the motherboard, controllers, and drivers. SATA transmits data over a 7-conductor
    cable at higher speeds. SATA came about primarily because the PATA standard was
    unable to support the higher **data transfer rates** (**DTRs**) of larger capacity
    disk drives. SATA devices can transfer data with DTRs as high as 600 MBps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SCSI**: SCSI (*scuzzy*) provides a multiple-connection interface for a variety
    of devices, including HDD, optical drives, printers, scanners, and other peripherals.
    As many as 15 devices can be attached to an SCSI interface that occupies only
    a single HBA slot in a host computer. SCSI uses parallel bit signaling and can
    transfer data with DTRs as high as 80 MBps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SAS**: SAS improves on its base interface SCSI by expanding several of its
    capabilities and capacities. SAS controllers are connected directly to SAS HDD.
    SAS can connect up to 128 different devices on a single interface. It is a full-duplex
    interface that can transfer data with DTRs as high as 3.0 GBps. Another important
    characteristic of SAS is that it is a hot-plug technology.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FC**: The FC technology is primarily a communication protocol commonly used
    in data centers and server farms. Although its name suggests that it is based
    on fibre optic cabling, because it''s based on a protocol, the transmission medium
    it uses can be coaxial, copper twisted-pair, and fibre optic cabling. The type
    of cable used determines the length of separation for FC-connected devices. Copper-connected
    nodes should be within 100 feet, but multimodal fibre optic cable-connected devices
    can be as far as 10 kilometers (6.67 miles) apart. The FC technology is replacing
    SCSI in data centers because of its reliability, flexibility, speed, and distances.
    Currently, FC can transmit data with a 128 GBps DTR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data storage systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we need to squeeze in some basic disk storage terminology and
    concepts. For the Server+ exam, your knowledge of these terms and concepts is
    generally assumed, so this is something we need to cover. In this and the next
    few sections, we'll look at the technical organization of data storage and retrieval
    methods, technologies, and systems.
  prefs: []
  type: TYPE_NORMAL
- en: Direct-attached storage (DAS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name DAS should be self-explanatory. DAS is any storage device, HDD, SSD,
    USB, tape, optical disc, flash drive, and so on connected directly to or attached
    to a computer. An HDD installed inside a computer's case is DAS; a USB-connected
    external HDD is DAS; and an a USB tape drive is DAS. In other words, if a data
    storage device is directly attached to a computer and its bus, it's DAS.
  prefs: []
  type: TYPE_NORMAL
- en: Network-attached storage (NAS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NAS, as shown in the next image, is one or more data storage devices attached
    to a network that network clients can share. NAS appears to network users much
    like DAS, especially when the **Network File System** (**NFS**) is in use. NFS
    is a network file-sharing protocol that allows authenticated and authorized users
    to access network file systems and resources, such as NAS. Although NFS is a common
    element of NAS systems, it can also work with unstructured clusters of HDDs, which
    are generally referred to as **just a bunch of disks** (**JBOD**). In a JBOD arrangement,
    the disks operate as independent devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89ef83a4-bc53-473c-8446-dc2bf3233c36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A 16-bay NAS unit
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Infortrend Technology, Inc'
  prefs: []
  type: TYPE_NORMAL
- en: Storage area network (SAN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One commonly used application for FC communication, especially in large networks
    and data centers, is a SAN. A SAN is a self-contained network of storage devices
    and specialized switches that provides high-speed data access to connected network
    nodes. To a network server, portions of a SAN appears to be directly connected
    to only that server. Every server connected to the SAN has this same view. A SAN
    provides network servers with the capability to move data between storage devices
    and perform backup and restore activities, in addition to providing multiple servers
    with data access.
  prefs: []
  type: TYPE_NORMAL
- en: SAN fabric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the following diagram illustrates, a SAN, in its simplest form, is made
    up of one or more network servers that are connected to a data storage array of
    two or more hard disk drives through one or more dedicated switches. In this diagram,
    the red, dashed box encloses what is called the **fabric**, which is the switch-controlled
    disk drive network of the SAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b4f3a64-495a-4d47-8c7e-9048eb943af8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The components of a SAN
  prefs: []
  type: TYPE_NORMAL
- en: SAN communications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most SANs use one of two communication technologies: FC and **Internet SCSI**
    (**iSCSI**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**FC SAN:** FC is the most commonly used SAN communication technology. An FC-based
    SAN incorporates FC switches that interconnect storage devices and FC HBAs that
    connect FC switches to network servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iSCSI SAN:** The iSCSI alternative doesn''t require the specialized devices
    of the FC-based SAN. An iSCSI SAN can operate on Ethernet switches and physical
    connections to storage devices and network servers. The result is a lower-cost,
    although lower-performing, SAN solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another SAN option is **Fibre Channel over Ethernet** (**FCoE**). FCoE merges
    Ethernet and FC signals on a common network medium. However, not all Ethernet
    networking devices support the FCoE standard.
  prefs: []
  type: TYPE_NORMAL
- en: Logical Unit Number (LUN) zoning and masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One critical element in a SAN, based on any of the communication technologies,
    is the LUN. A LUN is an identity assigned to a unit of SAN storage, which can
    be a portion of an HDD, an entire HDD, or even more than one HDD, especially in
    RAID configurations. A LUN represents a mapping between the storage media and
    network clients that indicates which network hosts can access which SAN-managed
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an FC SAN, setting up LUN zoning defines specifically which network servers/hosts
    have access to certain LUNs and their contents. As illustrated in the following
    diagram, the server on the left has zone access to the first and third LUNs and
    the server on the right can access the second and the fourth LUNs. LUN zoning
    is specific to FC SANs. iSCSI and FCoE, because they use Ethernet technology,
    are set up much like a **virtual LAN** (**VLAN**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/735b354e-1974-4632-a026-0eaf03a48d0c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: LUN zoning determines which hosts have access to which LUNs
  prefs: []
  type: TYPE_NORMAL
- en: Once LUN zoning is in place, LUN masking applies additional restrictions that
    can hide a LUN from specific servers and hosts. While LUN masking can be part
    of a security policy in many data centers, its primary usage is typically to restrict
    access to only the data a network server or host (and their users) requires.
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any computer, stand alone or network-attached, organizes the data it stores
    on secondary storage using a **filesystem**. A filesystem isn't just a pattern
    for storing data files. It also includes the processes, methods, and structures
    used to name, store, locate, and retrieve data. Although, it is also used by some
    to refer to a disk partition.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems and filesystems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network servers can and do use a wide assortment of filesystems, some proprietary
    to an operating system and some standard or more generic. For example, as shown
    in the following table, several Linux versions from different providers all used
    the **Extended File System version 3** (**ext3**) and later **ext4**. Windows
    systems relied on the **New Technology File System** (**NTFS**) for several years
    and it is still in use today, but newer filesystems are emerging:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Year released** | **Operating system** | **File system** |'
  prefs: []
  type: TYPE_TB
- en: '| 2000 | Windows Server 2000 | NTFS |'
  prefs: []
  type: TYPE_TB
- en: '| 2005 | Fedora/Ubuntu/Debian Linux | ext3 |'
  prefs: []
  type: TYPE_TB
- en: '| 2006 | Windows Vista | NTFS |'
  prefs: []
  type: TYPE_TB
- en: '| 2009 | Windows 7 | NTFS |'
  prefs: []
  type: TYPE_TB
- en: '| 2012 | Windows Server 2012 | Resilient File System (ReFS) |'
  prefs: []
  type: TYPE_TB
- en: '| 2013 | Fedora/Ubuntu/Debian Linux | Extended File System version 4 (ext4)
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2015 | OpenSUSE 42.1 | Better FS (Btrfs)/Extents File System (XFS) |'
  prefs: []
  type: TYPE_TB
- en: '| 2017 | macOS | Apple File System (APFS) |'
  prefs: []
  type: TYPE_TB
- en: Examples of operating systems and their associated file systems over the years
  prefs: []
  type: TYPE_NORMAL
- en: File sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Server Message Block** (**SMB**) is a file-sharing protocol that give
    applications the capability to access files and other network resources on a network.
    A network client is able to create, open, read, write, or move data files on any
    network server configured to respond to SMB client requests. The SMB protocol
    has a standard format for SMB request messages, but different *dialects*, format
    variations, developed for a variety of specific operating systems or system requirements.
    One such dialect, actually one of the original dialects, is the **Common Internet
    File System** (**CIFS**), Microsoft's version of SMB for accessing file and print
    services on a network. Microsoft replaced CIFS with its own version of SMB.
  prefs: []
  type: TYPE_NORMAL
- en: Another commonly known dialect of SMB is **Samba**, which enables a Windows
    computer to share files with a computer running the UNIX or Linux operating system.
    Samba combines a number of different protocols and services, including SMB and
    **NetBIOS over TCP/IP** (**NBT**).
  prefs: []
  type: TYPE_NORMAL
- en: RAID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An essential element of data center and server administration is **availability **as,
    in a network, data stores, and communication links are always available, meaning
    24 hours a day, 7 days a week. In an electrically powered world, keeping electric
    devices always available goes beyond backup power units, **uninterruptible power
    systems** (**UPSs**), and generators. Even when electrical power is guaranteed
    to be always available, there are several other threats to the availability of
    a system or network. However, in your preparation for the Server+ exam, we should
    focus on the availability of data storage devices and systems, and particularly
    their reliability.
  prefs: []
  type: TYPE_NORMAL
- en: RAID is a technical methodology used to improve the availability, reliability,
    and performance of data storage systems, especially in larger data centers, cloud
    systems, and high-volume **transaction processing systems** (**TPSs**). In general,
    a RAID system is built on two or more HDD or SSD volumes that operate synchronously.
    There are no RAID standards and each company offering a RAID solution can offer
    its own specifications and levels. However, there are some practices and configurations
    that are generally implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Striping and mirroring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Striping and mirroring are the methods that a RAID system can use to create
    data redundancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Striping** separates data into chunks that are stored on two or more disk
    drives or volumes. The size of these chunks varies by provider and ranges from
    single bytes and fixed-length blocks to entire partitions. For example, a RAID
    system with 5 HDDs may stripe 128 KB data blocks onto each drive and, if needed,
    would continue by repeating the sequence. A RAID system with 10 disks could stripe
    a 10 MB file to each of the 10 disks in 1 MB stripes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mirroring** is essentially duplicating or copying data onto two or more drives.
    The primary purpose of mirroring is to provide an exact copy of a data file, for
    instance, so that it could be a failover should something happen to the original
    file or the drive on which it''s stored. Although a mirror is like a backup, it''s
    online and immediately available, where a backup requires a few more steps. Mirrored
    files are generally synchronized, meaning updates to the original are also made
    to the mirror. This may also speed up data access operations because parts of
    a data file can be read from both copies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAID levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A RAID level is a functional methodology that incorporates striping or mirroring,
    or both, and may apply parity or not. Over the years, vendors and providers have
    defined 10 or more RAID levels, some of which are still in use as quasi-standards,
    and some have become obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the various RAID levels that are commonly used and
    may show up on the Server+ exam:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **RAID level** | **Description** | **Minimum number of disks** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Block striping; no parity | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Mirroring; no parity | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Block striping; with parity | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Block striping; double parity | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 1+0 (10) | Block striping with mirroring; no parity | 4 |'
  prefs: []
  type: TYPE_TB
- en: Active RAID levels
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 0**: RAID level 0 isn''t a redundancy or data recovery method; it''s
    more of a performance enhancer. By striping data to multiple disk drives, data
    I/O processes speed up. The next diagram illustrates striping across three disks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/01cd6c93-4027-4412-bb09-af4fe3507dd2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RAID 0 with data blocks striped across multiple disks
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 1**: RAID level 1 provides a mirror image or *replica* of a data block
    that is available for processing should a disk drive fail, or the primary data
    copy become corrupted. This diagram illustrates RAID 1 mirroring:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/57edec11-4e30-4b51-a5ac-f26e1babd1e4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RAID 1 with data mirrors saved to another disk
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 5**: RAID level 5 looks like RAID 0 with parity added in (see the following
    diagram). The similarity goes only that far because RAID 5, which is the most
    common RAID implementation in enterprise networks and data centers, uses the striped
    data and parity information to recreate a data block from a failing drive on an
    active drive so processing may continue uninterrupted. The downside to a RAID
    5 implementation is that in I/O heavy environments, especially those with a lot
    of write actions, latency could be an issue:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/27960df4-03bd-41a1-8602-19543a58141a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RAID 5 with data and parity information striped to multiple drives
  prefs: []
  type: TYPE_NORMAL
- en: '**RAID 6**: RAID level 6 is essentially RAID 5 with the parity information
    doubled, which means that two or more disk drives could fail and processing would
    continue. That is, providing that more than two drives are in the array. RAID
    6 is also common to enterprise networks and data centers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAID 10**: RAID level 1+0 or 10 combines the mirroring of level 1 with the
    striping of level 0, but without parity. This RAID level is popular on smaller
    networks and servers and is applied through software RAID applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAID implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A RAID system can be implemented on a server, SAN, or NAS as hardware RAID
    or software RAID. Operationally, there isn''t much difference between the two
    RAID types, although many experts favor hardware RAID. If there are differences,
    they are a part of where the RAID processing takes place. In a software RAID implementation,
    RAID processing is performed by a server''s (typically the RAID host server''s)
    CPU. Hardware RAID is implemented in a variety of ways: a RAID controller expansion
    card installed in a host server (as shown in the following image); a stand-alone
    RAID controller appliance; or disk drives with embedded RAID controllers. Performance
    is often given as the primary difference between the two, with hardware RAID having
    an advantage. However, the differences are dependent on the number of disk drives
    and their formatting and the RAID level in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27008b25-461d-452c-8b7c-b7bdadedbacc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A hardware RAID controller expansion card
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: HighPoint, Inc'
  prefs: []
  type: TYPE_NORMAL
- en: 'An array controller, also known as a disk array controller, RAID controller,
    and **storage processor** (**SP**), manages and controls an array of disk drives,
    which it presents to servers and hosts as one or more logical units. The disk
    array can be one big JBOD or configured as  NAS or SAN. An array controller typically
    has three main components: a processor, RAM, and I/O interfaces. The processor
    interprets incoming requests for data to be provided or to be stored. The instructions
    and addressing required for data movement in or out is in RAM. The I/O component
    typically has at least one frontend port that communicates with the host computer''s
    host adapter, and a backend port that links to the disk drives.'
  prefs: []
  type: TYPE_NORMAL
- en: RAID systems commonly include **battery-backed cache memory**. This cache provides
    a buffer that enables the RAID controller to process data in either direction
    of I/O operations faster than its able to write it to a disk. The battery power
    enables the data to be retained in the event of a power failure. In larger RAID
    implementations, a **redundant disk array controller** (**RDAC**) that shares
    a dual-port connection with the primary disk array controller provides an immediate
    backup and failover should the primary fail. Without this redundancy, a failed
    disk array controller renders the disk array unreachable.
  prefs: []
  type: TYPE_NORMAL
- en: Disk quotas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System and network administrators not only have the job of ensuring that a system
    or network keeps running and remains available to its users. Included in their
    duties are the tasks of managing, controlling, and allocating system resources.
    Hard disk space on a multi-user system may require usage limits to provide adequate
    storage space for all users. One way of accomplishing this is to set disk quotas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Disk quotas**, which are set at user or group levels, limit the maximum size
    of single files or data blocks written to an HDD. Typically, a disk quota is specific
    to individual users or groups as one of two types of quota settings: user, or
    block, quotas or file, or inode (UNIX), quotas. A user quota limits an individual
    or group account to a specific maximum disk usage limit. File quotas limit the
    number and/or size of files created by a user or group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, disk quotas of either type are specific to a file system. Disk
    quotas can be set in most operating systems, including Windows (see the following
    screenshot), UNIX, and Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0333e25b-d8a4-4c7f-a0ff-9dd1a859683e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting disk quotas on a Windows system
  prefs: []
  type: TYPE_NORMAL
- en: Disk compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many administrators see disk compression as a means to reduce the amount of
    space data files take up on an HDD. Some even claim that disk compression may
    speed up the I/O process since the compression/decompression actions take place
    in RAM. Well, this is another place where the following Gilster''s Law applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '"You never can tell, and it all depends."'
  prefs: []
  type: TYPE_NORMAL
- en: Disk compression, in general, may add a small amount of time to the I/O process,
    in either direction. Depending on the nature of the data stored in compressed
    form, the increase in the amount of data stored on a disk may mitigate the latency
    of the compression. On a high-volume I/O system, a compressed disk may not be
    the best solution. However, a data archive or warehouse, where I/O activity is
    low, is a much better candidate.
  prefs: []
  type: TYPE_NORMAL
- en: '**Disk compression** reduces the space that stored data uses on a disk medium.
    Disk compression, which is different from file compression, which compacts individual
    files, compresses all data written to the disk. When disk compression is enabled,
    a data compression utility that is between the operating system and the HDD controller
    intercepts any data written to or read from the affected HDD. The data is compressed
    or decompressed by the utility, as needed, and passed on.'
  prefs: []
  type: TYPE_NORMAL
- en: High availability (HA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An extremely important characteristic of a network server and all other network-connected
    systems is HA. A system that exhibits HA is operating and available a predominant
    percentage of the time. HA is measured in the percentage of uptime a system should
    or does realize. You may have heard the expression *four nines (9999)*. What this
    refers to is the number of digits to the right of the decimal when expressing
    the uptime percentage (as shown in the following table):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Availability** | **Common name** | **Downtime/year** | **Downtime/month**
    | **Downtime/week** | **Downtime/ day** |'
  prefs: []
  type: TYPE_TB
- en: '| 99.9999999% | 9-nines | 31.56 ms | 2.63 ms | 604.80 µs | 86.40 µs |'
  prefs: []
  type: TYPE_TB
- en: '| 99.999% | 5-nines | 5.26 min | 26.30 sec | 6.05 sec | 864.00 ms |'
  prefs: []
  type: TYPE_TB
- en: '| 99.99% | 4-nines | 52.60 min | 4.38 min | 1.01 min | 8.64 sec |'
  prefs: []
  type: TYPE_TB
- en: '| 99% | 2-nines | 3.65 days | 7.31 hrs | 1.68 hrs | 14.40 min |'
  prefs: []
  type: TYPE_TB
- en: '| 55.5555555% | 9-fives | 162.33 days | 13.53 days | 74.92 hrs | 10.67 hrs
    |'
  prefs: []
  type: TYPE_TB
- en: Some of the more commonly used HA measures with their time equivalents
  prefs: []
  type: TYPE_NORMAL
- en: '* ms: milliseconds'
  prefs: []
  type: TYPE_NORMAL
- en: '* µs: microseconds'
  prefs: []
  type: TYPE_NORMAL
- en: '* sec: seconds'
  prefs: []
  type: TYPE_NORMAL
- en: '* min: minutes'
  prefs: []
  type: TYPE_NORMAL
- en: '* hrs: hours'
  prefs: []
  type: TYPE_NORMAL
- en: The nines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the previous table, what is meant by HA can vary with the purpose
    and use of a network server and the network-connected devices. Each supporting
    device on a network, such as RAID, NAS, SAN, **Routing and Remote Access Service**
    (**RRAS**), and so on, typically has an HA expectation to both the data center
    administrators and its users. A goal of *9-nines* may be a bit too aggressive
    for most server operations, allowing only 31.56 milliseconds of downtime per year.
    However, many **service level agreements** (**SLAs**), or customer or subscriber
    support commitments, are typically for four or five-nines, committing to no more
    than 5-52 minutes of downtime a year. These commitments are either an average
    of the actual results experienced from a server or data center, or the aspirations
    of a network configuration built to provide a desired availability.
  prefs: []
  type: TYPE_NORMAL
- en: Fault tolerance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where the goal of high availability is to keep a system available and accessible,
    the goal of **fault tolerance** is to retain all in-process data and operations
    in the event of a component or system failure. Tolerating a fault or failure is
    essential for any server or server-connected storage array. The level to which
    fault tolerance is incorporated into a system is dependent upon the nature of
    the services provided and the sensitivity of the data involved. A high-demand,
    around-the-clock system that must always be available combines high availability
    and fault tolerance principles. At the other end of the spectrum, the fault tolerance
    of a system may be more of a *soft landing* that provides the time needed to store
    all in-process data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any level of fault tolerance has three general characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**There is no single point of failure**: Any element of a system that could
    possibly fail and take the system down is backed up by a failover or redundant
    element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A component failure shouldn''t require the system to stop**: If a component
    fails, applying a replacement doesn''t require any or all systems to be powered
    down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Any fault or failure is easily identified and isolated**: A failed component
    won''t cause data or processing to be lost or interrupted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These principles can be applied to any of the three major failure areas of
    any system: hardware, software, and power.'
  prefs: []
  type: TYPE_NORMAL
- en: Replacing failed components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The capability to replace or take a failed component offline without impacting
    users or operations is the primary goal of both high availability and fault tolerance.
    Avoiding the need to power down the entire system to replace a failed component
    is the ultimate goal. However, it isn't necessary to shut down the whole system
    or just the failed component in all cases. Some components have the capability
    of being replaced *on the fly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, there are three general types of failed hardware and power component
    replacement methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hot swapping**: Hot swapping involves the immediate switchover or physical
    replacement of a failed component while a system is running and fully operational.
    Examples of hot swappable devices, referred to as **hot spares**, are audio devices,
    displays, USB devices, SATA drives, and network jacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warm swapping**: Warm swapping requires the suspension of a system''s, or
    failed component''s, operations while a replacement or switchover takes place.
    In general, warm swapping involves media changes, rather than entire components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold swapping**: Cold swapping involves completely shutting down a system
    to affect upgrades, replacements, or repairs by applying **cold spares**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk storage capacity planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forecasting how much data storage space a computer, system, or data center will
    need in the future, near or far, can be tricky. On the one hand, you don't want
    to bring in too much storage capacity unnecessarily and tie up money that you
    could use elsewhere. On the other hand, running out of storage space could mean
    system interruptions and higher last-minute prices. The trick is to find a happy
    medium where you will have the right amount of disk space over a specific time
    frame and a clear plan of when storage space should increase or decrease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most HDD manufacturers have disk capacity planning tools you can use to forecast
    your storage needs in the future. There are also several system management software
    packages that include a capacity planning function (see the following screenshot).
    However, before you begin forecasting future needs, be sure you understand where
    the disk storage demands will come from and what other technologies or approaches
    may address the capacity requirements. Disk storage technologies and methods such
    as tiered storage, data compression, virtualization, SAN, and NAS, may be a better
    and more economical way to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8c2106b-4f80-434e-bc82-4ceda510dff4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A disk space capacity planning report
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Power Admin, LLC'
  prefs: []
  type: TYPE_NORMAL
- en: Other storage devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Other forms of data storage devices that just don''t work for efficient data
    retrieval are appropriate for use in data backup, file archives, and disaster
    recovery. Of these, magnetic tape is perhaps the most commonly used medium for
    two reasons: portability and cost.'
  prefs: []
  type: TYPE_NORMAL
- en: Magnetic tape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Magnetic tape** is a plastic or mylar strip that is coated with an iron oxide
    or chromium layer that can be magnetized or demagnetized to represent data bits,
    which are written to the tape in either a parallel or helical pattern of up to
    128 tracks. Originally, magnetic tape was stored on reels, but today, it''s generally
    packaged inside plastic cases (cartridges).'
  prefs: []
  type: TYPE_NORMAL
- en: Data is written to or read from tape serially, which means that to retrieve
    data from the end of the tape, all the preceding data must be skipped. Historically,
    magnetic tape wasn't a medium for random access. However, newer technologies,
    such as the **Linear Tape Open** (**LTO**), perform like random access by storing
    data objects separately from their metadata. LTFS organization allows magnetic
    tape to store as much as 220 TB of data.
  prefs: []
  type: TYPE_NORMAL
- en: An enterprise or any other organization, typically stores its recorded tapes,
    whether for regular system backups, data archives, or disaster recovery, in a
    tape library.
  prefs: []
  type: TYPE_NORMAL
- en: A **tape library** can be an organized storage facility or cabinet, storing
    tapes in chronological, purpose, or content order. However, magnetic tape devices
    able to hold several tape cartridges that rotate sequentially on a set schedule
    are also known as tape libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Optical storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another technology used for data backup, storing large files, transferring data
    or programming from one computer to another, or commercially packaged application
    software is optical data storage. An **optical disc drive** (**ODD**) reads from
    or writes to an optical disc, but, for the most part, optical discs are inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Common examples of optical discs are **compact discs** (**CDs**), **digital
    versatile/video discs** (**DVDs**), and Blu-ray discs. Optical discs were at one
    time considered a better option than most portable magnetic media. A CD can store
    as much as 700 MB of data; a DVD can hold up to 8.4 GB; and a Blu-ray disk may
    contain as much as 50 GB. However, with USB flash memory drives (thumb drives/flash
    drives) now storing as much as 256 GB, optical drives may have a limited capability
    as backup media.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form factors set the form and fit of a computer's case, motherboard, power supply,
    and disk storage drive, the form factor sets the height, width, length, and the
    type and placement of its connector to the host computer. HDD device specifications
    include RPM, interface, access time, throughput, and IOPS. An HDD is a serial
    device and an SSD is a random-access device.
  prefs: []
  type: TYPE_NORMAL
- en: An SSD stores data in solid-state semiconductor chips and has no moving parts.
    SSDs use a SAS or SATA interface. Disk drive interfaces are word-serial or bit-serial and
    bit-oriented interfaces that connect through HBA, FC, SATA, and SAS. PATA uses
    parallel bit signaling . SATA uses serial bit signaling. SCSI provides a multiple-connection
    interface for several devices. SAS expands SCSI. NAS is clustered storage devices
    that appear as a network share. SAN is a network of storage devices and switches
    providing access to connected network nodes. A LUN identifies a unit of SAN storage. Data
    is organized on secondary storage in a filesystem. SMB assists applications to
    access files and network resources on a network. SMB has different versions or
    dialects that are unique to specific OSes, such as CIFS.
  prefs: []
  type: TYPE_NORMAL
- en: RAID systems are built on two or more HDD or SSD volumes that operate synchronously.
    Striping and mirroring are the methods a RAID system uses to create data redundancy.
    Striping separates data into stripes stored on two or more disk drives. Mirroring
    duplicates data onto two or more drives. RAID levels incorporate striping or mirroring,
    or both, and may also apply parity. RAID 0 uses striping but isn't a redundancy
    method. RAID 1 provides mirroring that's available if a disk drive fails or data
    becomes corrupted. RAID 5 is like RAID 0 with parity added and uses striped data
    and parity information to recreate a data block on a failing drive. RAID 6 is
    the equivalent RAID 5 with the parity information doubled and is common in larger
    networks. RAID Level 1+0 or 10 combines the mirroring of Level 1 with the striping
    of Level 0, but without parity. Hardware RAID is implemented by a controller card
    in a host server, a standalone RAID appliance, or through HDDs with embedded controllers. Disk
    compression reduces the space data requires on a disk medium. Disk compression
    is different from file compression. A data compression utility between the OS
    and HDD intercepts data being passed and compresses or decompresses it as needed
    and passes it on.
  prefs: []
  type: TYPE_NORMAL
- en: HA is the uptime condition of a system that is available a significant percentage
    of the time. Fault-tolerant systems are able to continue operating in the event
    of a component or system failure. Hot swapping is the immediate switchover or
    replacement of a failed component completed while a system remains fully operational.
    Warm swapping requires the suspension of operations, although still powered, to
    affect the replacement of a failed component. Cold swapping requires the powering
    down of a system to affect replacements or repairs. Other media and storage devices
    may be used to store data, including magnetic tape and optical storage.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following are differences between an HDD and an SSD? Choose all
    that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rotational delay
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Access time
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Storage capacity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An SSD device uses one of which two of the following interfaces? Choose two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PATA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SATA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SCSI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SAS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following storage technologies describes a number of independent
    disks not configured into an array?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DAS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SAN
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: JBOD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following statements best describes a SAN?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One or more storage devices directly connected to a computer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A cluster of data storage devices that appear to be direct-attached storage
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A self-contained storage device network and switches that provide high-speed
    access to data
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Zoning that identifies the access permissions of servers and hosts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two of the following identify the access to data resources in a SAN for
    servers and hosts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File permissions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: LUN zoning
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: LUN masking
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Filesystem
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The filesystems common to Linux and Windows respectively are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux and UNIX
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DOS and Windows
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ext3 and NTFS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: EFS and RAID
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SAMBA is an implementation of which application layer protocols?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTTP/FTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IPSec/WPA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SBA/TCP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SMB/CIFS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are two redundancy methods applied in the different RAID levels? Choose
    two.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mirroring
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Striping
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a data redundancy level of RAID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID 0
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID 1
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID 5
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RAID 10
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A system that is fully operational and accessible by users for a significant
    percentage of time is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fault tolerant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fault averse
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Highly available
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Extremely available
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Match the name on the left to the description on the right that best describes
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Hot swapping
  prefs: []
  type: TYPE_NORMAL
- en: b. Cold swapping
  prefs: []
  type: TYPE_NORMAL
- en: c. Warm swapping
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Requires the powering down of a system to affect replacements or repairs
  prefs: []
  type: TYPE_NORMAL
- en: 2\. The immediate switchover or replacement of a failed component completed
    while a system remains fully operational
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The suspension of operations, although still powered, to affect the replacement
    of a failed component
  prefs: []
  type: TYPE_NORMAL
