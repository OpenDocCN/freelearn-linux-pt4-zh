- en: Chapter 10. CoreOS and Containers – Troubleshooting and Debugging
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 10 章：CoreOS 与容器 - 故障排除与调试
- en: Both CoreOS and Containers pose some special challenges in troubleshooting and
    there are ways to overcome this problem. CoreOS, being a Container-optimized OS,
    does not support a package manager, and this prevents the installation of some
    of the Linux debugging tools. This can be overcome by running the Linux tools
    in a Container with a tool called Toolbox provided by CoreOS. Containers run in
    their own namespaces, and the regular Linux tools do not give enough information
    to debug Containers. This problem is solved by tools such as `cadvisor` and `sysdig`.
    Logging is another important tool to debug system-level issues, and there are
    a few vendors such as LogEntries trying to solve this problem for Containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 和容器在故障排除方面带来了一些特殊挑战，但也有解决这个问题的方法。CoreOS 作为一个优化容器的操作系统，不支持包管理器，这就阻止了某些
    Linux 调试工具的安装。这个问题可以通过使用 CoreOS 提供的名为 Toolbox 的工具，在容器中运行 Linux 工具来解决。容器在自己的命名空间中运行，而常规的
    Linux 工具无法提供足够的信息来调试容器。这个问题可以通过诸如`cadvisor`和`sysdig`等工具来解决。日志记录是另一个重要的调试系统级问题的工具，一些供应商如
    LogEntries 正在尝试为容器解决这个问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Using CoreOS Toolbox and other CoreOS utilities to debug the CoreOS system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CoreOS Toolbox 和其他 CoreOS 实用工具来调试 CoreOS 系统
- en: Monitoring a Container using `sysdig` and `cadvisor`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `sysdig` 和 `cadvisor` 监控容器
- en: Docker remote API support
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 远程 API 支持
- en: Docker logging drivers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 日志驱动程序
- en: Using LogEntries to do central Container log monitoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 LogEntries 进行中央容器日志监控
- en: CoreOS Toolbox
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS Toolbox
- en: As CoreOS does not support a package manager, it is difficult to install custom
    tools for debugging problems, such as tcpdump, strace, and others. CoreOS provides
    you with a toolbox script that can start a Ubuntu or Fedora container with system-level
    privileges on top of which we can run Linux system tools, such as tcpdump to monitor
    and debug the CoreOS host.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CoreOS 不支持包管理器，因此很难安装自定义调试工具来解决问题，例如 tcpdump、strace 等。CoreOS 提供了一个 Toolbox
    脚本，它可以启动一个具有系统级权限的 Ubuntu 或 Fedora 容器，在其上我们可以运行 Linux 系统工具，如 tcpdump 来监控和调试 CoreOS
    主机。
- en: To start Toolbox, run `/usr/bin/toolbox` from the CoreOS shell.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 Toolbox，请从 CoreOS shell 运行 `/usr/bin/toolbox`。
- en: 'The following process output in the CoreOS host system shows that Toolbox has
    started with system-level privileges:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 CoreOS 主机系统中的进程输出，显示 Toolbox 已以系统级权限启动：
- en: '![](img/00359.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00359.jpg)'
- en: 'Toolbox by default uses the Fedora image. The following output shows you Fedora
    inside the Toolbox container:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Toolbox 默认使用 Fedora 镜像。以下输出显示了 Toolbox 容器内的 Fedora：
- en: '![](img/00361.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00361.jpg)'
- en: Tcpdump is not present in the default Fedora image. I was able to install `tcpdump`
    using `yum` and monitor the `eth0` interface from inside the Toolbox container.
    This shows one example of how Toolbox can be used.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Fedora 镜像中没有 tcpdump。我通过 `yum` 安装了 `tcpdump` 并在 Toolbox 容器内部监控了 `eth0` 接口。这展示了
    Toolbox 如何使用的一个示例。
- en: To change the default Linux image that CoreOS Toolbox uses, we can specify a
    custom image in `~/.toolboxrc`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改 CoreOS Toolbox 使用的默认 Linux 镜像，可以在 `~/.toolboxrc` 中指定自定义镜像。
- en: 'The following is an example `.toolboxrc`, where we are asking Toolbox to use
    a Ubuntu image:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `.toolboxrc` 的示例，在该示例中，我们要求 Toolbox 使用 Ubuntu 镜像：
- en: '`TOOLBOX_DOCKER_IMAGE=ubuntu TOOLBOX_DOCKER_TAG=14.04`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`TOOLBOX_DOCKER_IMAGE=ubuntu TOOLBOX_DOCKER_TAG=14.04`'
- en: 'If we start Toolbox after the preceding change, Toolbox will start a Ubuntu
    image with system-level privileges. The following is the Ubuntu image running
    as part of starting Toolbox:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在上述更改后启动 Toolbox，Toolbox 将启动一个具有系统级权限的 Ubuntu 镜像。以下是作为启动 Toolbox 一部分运行的
    Ubuntu 镜像：
- en: '![](img/00363.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00363.jpg)'
- en: 'We can specify the image selection in the `cloud-config` so that `.toolboxrc`
    is automatically written as part of the Container startup. The following is a
    sample `cloud-config` section where we specified `.toolboxrc` with Ubuntu as the
    default Toolbox Container image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `cloud-config` 中指定镜像选择，以便 `.toolboxrc` 在容器启动时自动写入。以下是一个示例 `cloud-config`
    部分，在该部分中我们指定了以 Ubuntu 作为默认 Toolbox 容器镜像的 `.toolboxrc`：
- en: '`-write_files:   - path: /home/core/.toolboxrc     owner: core     content: |
          TOOLBOX_DOCKER_IMAGE=ubuntu       TOOLBOX_DOCKER_TAG=14.04`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`-write_files:   - path: /home/core/.toolboxrc     owner: core     content: |
          TOOLBOX_DOCKER_IMAGE=ubuntu       TOOLBOX_DOCKER_TAG=14.04`'
- en: Other CoreOS debugging tools
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 CoreOS 调试工具
- en: 'We covered basic CoreOS debugging in [Chapter 2](index_split_048.html#filepos153225),
    Setting Up the CoreOS Lab in the Basic debugging section. The following are a
    few utilities that can be used:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](index_split_048.html#filepos153225)《设置CoreOS实验环境》的基础调试部分中介绍了CoreOS的基本调试。以下是一些可以使用的工具：
- en: The `journalctl` utility can be used to check the logs of all systemd services
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`journalctl`工具可以用来检查所有systemd服务的日志。'
- en: The `systemctl` utility can be used to check the status of all the services
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`systemctl`工具可以用来检查所有服务的状态。'
- en: The `cloud-config` validator tool can be used to validate the `cloud-config`
    before using it with CoreOS
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud-config`验证工具可以用来在与CoreOS一起使用之前验证`cloud-config`。'
- en: Utilities such as Etcd, Fleet, Flannel, and Locksmith have their own debugging
    capabilities that can be turned on if necessary
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像Etcd、Fleet、Flannel和Locksmith这样的工具，具有自身的调试功能，可以在必要时启用。
- en: Container monitoring
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 容器监控
- en: 'As Containers run in their own namespaces, traditional Linux monitoring tools
    such as top, ps, tcpdump, and lsof from the host system do not help monitor the
    activity happening within a Container or between Containers. This makes it complex
    to troubleshoot Containers. Before we discuss tools available for Container monitoring,
    let''s see the major items that we need to monitor:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于容器在自己的命名空间中运行，传统的Linux监控工具（如宿主系统中的top、ps、tcpdump和lsof）无法帮助监控容器内或容器之间的活动。这使得容器的故障排查变得复杂。在讨论容器监控工具之前，让我们先看看需要监控的主要项目：
- en: The CPU usage by a Container and processes running inside a Container
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器及其内部运行的进程的CPU使用情况
- en: The memory usage by a Container and processes running inside a Container
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器及其内部运行的进程的内存使用情况
- en: Network access for both incoming and outgoing connections
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络访问，包括所有的入站和出站连接
- en: File I/O performed by Containers
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器执行的文件I/O
- en: 'The following are some approaches to monitor Containers:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些监控容器的方法：
- en: 'Install monitoring software in the Container: This defeats the Container model
    where a Container runs a single microservice and is also not scalable.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中安装监控软件：这种做法违背了容器模型，容器运行的是单个微服务，而且不可扩展。
- en: 'Install monitoring software in the host machine where the Container runs: This
    approach makes it difficult to install specialized software on a cluster OS like
    CoreOS as they allow only applications to run as Containers and not allow installing
    software in the base OS.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在宿主机上安装监控软件，容器运行的机器：这种方法使得在像CoreOS这样的集群操作系统上安装专用软件变得困难，因为它们只允许以容器方式运行应用程序，并不允许在基础操作系统上安装软件。
- en: 'Install monitoring software as a Container with system-level privileges: This
    is the most preferred approach.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以容器形式安装带有系统级权限的监控软件：这是最推荐的做法。
- en: Docker provides you with the `docker stats` command that provides basic CPU,
    memory, and I/O usage on a per Container basis. We covered `docker stats` in [Chapter
    7](index_split_164.html#filepos509414), Container Integration with CoreOS – Docker
    and Rkt. The data provided by Docker commands is very basic. There are many open
    source and commercial Container monitoring tools, such as cadvisor, sysdig, Data
    dog, newrelic, Prometheus, and Scout that provide more visibility in Containers.
    In this chapter, we will cover cadvisor and sysdig.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Docker提供了`docker stats`命令，可提供每个容器的基本CPU、内存和I/O使用情况。我们在[第7章](index_split_164.html#filepos509414)《与CoreOS的容器集成——Docker和Rkt》中介绍了`docker
    stats`。Docker命令提供的数据非常基础。市面上有很多开源和商业的容器监控工具，如cadvisor、sysdig、Data dog、newrelic、Prometheus和Scout，它们提供了容器的更多可视化信息。在本章中，我们将介绍cadvisor和sysdig。
- en: Sysdig
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig
- en: Sysdig is an open source project that provides Linux system-level visibility
    with built-in native support for Containers. Sysdig can be used for host monitoring
    as well as Container monitoring.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig是一个开源项目，提供Linux系统级的可视化，并原生支持容器。Sysdig不仅可以用于宿主机监控，也可以用于容器监控。
- en: 'The following diagram shows the Sysdig architecture:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了Sysdig架构：
- en: '![](img/00297.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00297.jpg)'
- en: 'The following are some notes on the Sysdig architecture:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于Sysdig架构的笔记：
- en: Sysdig can monitor the host system, VM, and Containers.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig可以监控宿主系统、虚拟机和容器。
- en: Sysdig can monitor different Container runtime like Docker, Rkt and LXC.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig可以监控不同的容器运行时环境，如Docker、Rkt和LXC。
- en: The Sysdig documentation calls sysdig as `strace + tcpdump + htop + iftop +
    lsof + awesome sauce`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig文档将sysdig称为`strace + tcpdump + htop + iftop + lsof + 神奇的酱`。
- en: The Sysdig probe is a kernel module that needs to be installed in the host machine
    to do the monitoring. Sysdig has made the installation of this module very simple,
    and it works in regular Linux systems as well as in Container-based OSes, such
    as CoreOS and Rancher.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig探针是一个内核模块，需要安装在主机系统中才能进行监控。Sysdig简化了此模块的安装，适用于常规Linux系统以及基于容器的操作系统，如CoreOS和Rancher。
- en: Since sysdig directly monitors all Kernel system calls, sysdig provides more
    detailed monitoring data compared to other monitoring tools.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于sysdig直接监控所有内核系统调用，sysdig提供比其他监控工具更详细的监控数据。
- en: A Sysdig container can be run on the host system and monitors the host processes
    as well as Containers running in the host system.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig容器可以在主机系统上运行，监控主机进程以及在主机系统中运行的容器。
- en: Sysdig can monitor CPU, memory, network IO, and file IO. Sysdig provides various
    options to fine-tune the monitor query to provide relevant data.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig可以监控CPU、内存、网络IO和文件IO。Sysdig提供各种选项来微调监控查询，以提供相关数据。
- en: The Sysdig open source version has the sysdig CLI and csysdig, which has an
    ncurses-based interface. Csysdig is similar to htop, where we get an interactive
    text-based interface.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig的开源版本包括sysdig CLI和csysdig，后者具有基于ncurses的界面。Csysdig类似于htop，提供交互式的文本界面。
- en: The Sysdig cloud is the commercial version of Sysdig where data from multiple
    hosts and Containers are aggregated in a single location in the cloud and can
    be accessed as a SaaS application. The Sysdig cloud can be accessed from the cloud
    or installed on-premise.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sysdig Cloud是Sysdig的商业版，将来自多个主机和容器的数据聚合到云端的一个位置，并可作为SaaS应用程序访问。Sysdig Cloud可以通过云端访问，或安装在本地。
- en: 'Sysdig can be started as a Container. The following command shows you how to
    start the sysdig container:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig可以作为容器启动。以下命令展示了如何启动sysdig容器：
- en: '`docker run -i -t --name sysdig --privileged -v /var/run/docker.sock:/host/var/run/docker.sock -v /dev:/host/dev -v /proc:/host/proc:ro sysdig/sysdig`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run -i -t --name sysdig --privileged -v /var/run/docker.sock:/host/var/run/docker.sock
    -v /dev:/host/dev -v /proc:/host/proc:ro sysdig/sysdig`'
- en: 'For more details on Sysdig installation, please refer [http://www.sysdig.org/install/](http://www.sysdig.org/install/).
    The following command shows you a running sysdig container in a CoreOS system:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Sysdig安装的更多详情，请参阅[http://www.sysdig.org/install/](http://www.sysdig.org/install/)。以下命令展示了在CoreOS系统中运行的sysdig容器：
- en: '![](img/00367.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00367.jpg)'
- en: Examples of Sysdig
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig示例
- en: 'The following output shows you a list of Containers running in a CoreOS system
    on which we will try out some simple sysdig commands:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出展示了在CoreOS系统中运行的一些容器列表，我们将在这些容器中尝试一些简单的sysdig命令：
- en: '![](img/00369.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00369.jpg)'
- en: 'The following command shows the top processes consuming the CPU. The output
    lists the PID in the host machine as well as the container. The `topprocs_cpu`
    utility is a chisel. In sysdig terms, each chisel is a script with some predefined
    task:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了消耗CPU资源的前几个进程。输出列出了主机机器以及容器中的PID。`topprocs_cpu`工具是一个chisel。在sysdig术语中，每个chisel都是一个包含预定义任务的脚本：
- en: '`sysdig -pc -c topprocs_cpu`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysdig -pc -c topprocs_cpu`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为前述命令的输出：
- en: '![](img/00371.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00371.jpg)'
- en: 'The following command lists the top containers using network IO:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令列出了使用网络IO的前几个容器：
- en: '`sysdig -pc -c topcontainers_net`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysdig -pc -c topcontainers_net`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为前述命令的输出：
- en: '![](img/00373.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00373.jpg)'
- en: 'The following command lists the top containers using file IO:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令列出了使用文件IO的前几个容器：
- en: '`sysdig -c topcontainers_file`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysdig -c topcontainers_file`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为前述命令的输出：
- en: '![](img/00375.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00375.jpg)'
- en: 'The Sysdig spy command is useful to monitor all the external interactions to
    the host or Container. The following output shows the command executed in an nginx
    container when we used the exec command and performed `ps` in the container:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig spy命令对于监控所有外部与主机或容器的交互非常有用。以下输出展示了我们在nginx容器中执行`exec`命令并在容器中执行`ps`命令时的结果：
- en: '`sysdig -pc -c spy_users`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`sysdig -pc -c spy_users`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为前述命令的输出：
- en: '![](img/00378.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00378.jpg)'
- en: The preceding output shows that the `docker exec` and `ps` commands were executed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前述输出展示了`docker exec`和`ps`命令的执行结果。
- en: Csysdig
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Csysdig
- en: Csysdig is a text based UI for Sysdig. Csysdig is implemented as a customizable
    Curses UI. All operations that can be done through sysdig can also be done with
    csysdig. The csysdig user interface can be customized to show different views
    and the output can be filtered based on different user inputs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Csysdig 是 Sysdig 的文本用户界面。Csysdig 实现为一个可定制的 Curses 用户界面。所有可以通过 sysdig 完成的操作，也可以通过
    csysdig 完成。csysdig 用户界面可以定制，以显示不同的视图，并且输出可以根据不同的用户输入进行过滤。
- en: 'Csysdig can be started using the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令启动 Csysdig：
- en: '`Cssysdig –pc (pc option gives container details)`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cssysdig –pc  (pc 选项提供容器详情)`'
- en: 'The following output shows different views possible in csysdig:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了 csysdig 中可能的不同视图：
- en: '![](img/00381.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00381.jpg)'
- en: 'The following output lists the containers running in the host. This is available
    in the Container view:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出列出了主机中运行的容器。这可以在容器视图中查看：
- en: '![](img/00391.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00391.jpg)'
- en: 'Once we select a specific container, the following output shows the processes
    running in the container:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了一个特定的容器，以下输出显示了在该容器中运行的进程：
- en: '![](img/00387.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00387.jpg)'
- en: The Sysdig cloud
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig 云
- en: The sysdig cloud is a commercial solution from Sysdig where the sysdig data
    from the host machine is sent to a central server where the container and host
    monitoring data are collated from different hosts. The sysdig cloud can either
    be run on Sysdig's servers or as an on-premise solution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig 云是 Sysdig 提供的商业解决方案，其中来自主机机器的 sysdig 数据被发送到中央服务器，来自不同主机的容器和主机监控数据在此汇总。Sysdig
    云可以在 Sysdig 的服务器上运行，也可以作为本地解决方案运行。
- en: The sysdig cloud is available on a 15-day trial period. I tried out the Sysdig
    cloud trial version and installed Sysdig in a CoreOS cluster running in AWS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig 云提供 15 天的试用期。我试用了 Sysdig 云试用版，并在 AWS 上运行的 CoreOS 集群中安装了 Sysdig。
- en: 'The following are the steps to install the Sysdig cloud and how to use it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装 Sysdig 云及其使用方法的步骤：
- en: Register and create on online account in the Sysdig cloud. As part of registration,
    Sysdig will provide an access key.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Sysdig 云上注册并创建一个在线账户。作为注册的一部分，Sysdig 会提供一个访问密钥。
- en: The access key provided by Sysdig needs to be used in the host machine. Sysdig
    will use the access key to associate the hosts that are part of the same account.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sysdig 提供的访问密钥需要在主机机器上使用。Sysdig 会使用该访问密钥将属于同一账户的主机关联起来。
- en: When sysdig is started on the host machine, the sysdig agent will talk to the
    Sysdig server in the cloud and export the monitoring data.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在主机上启动 sysdig 时，sysdig 代理将与云中的 Sysdig 服务器通信，并导出监控数据。
- en: The Sysdig cloud can also integrate with AWS. If we provide the AWS access key,
    Sysdig can automatically pull in AWS VM monitoring data as well.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sysdig 云也可以与 AWS 集成。如果我们提供 AWS 访问密钥，Sysdig 还可以自动拉取 AWS 虚拟机监控数据。
- en: 'The following is the CoreOS service unit file to start the sysdig-agent service
    in the host machine, which talks to the Sysdig cloud. The access key needs to
    be filled in appropriately. This unit starts the sysdig cloud agent in all the
    nodes of the CoreOS cluster as the `Global` option is set in X-Fleet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是启动 sysdig-agent 服务的 CoreOS 服务单元文件，该服务与 Sysdig 云进行通信。访问密钥需要适当填写。由于在 X-Fleet
    中设置了 `Global` 选项，该单元将在 CoreOS 集群中的所有节点上启动 sysdig 云代理：
- en: '`[Unit] Description=Sysdig Cloud Agent After=docker.service Requires=docker.service  [Service]
    TimeoutStartSec=0 ExecStartPre=-/usr/bin/docker kill sysdig-agent ExecStartPre=-/usr/bin/docker rm sysdig-agent
    ExecStartPre=/usr/bin/docker pull sysdig/agent ExecStart=/usr/bin/docker run --name sysdig-agent --privileged --net host --pid host -e ACCESS_KEY=<access key> -e TAGS=[role:web,location:bangalore] -v /var/run/docker.sock:/host/var/run/docker.sock -v /dev:/host/dev -v /proc:/host/proc:ro -v /boot:/host/boot:ro sysdig/agent
    ExecStop=/usr/bin/docker stop sysdig-agent  [X-Fleet] Global=true`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Unit] Description=Sysdig 云代理 After=docker.service Requires=docker.service  [Service]
    TimeoutStartSec=0 ExecStartPre=-/usr/bin/docker kill sysdig-agent ExecStartPre=-/usr/bin/docker
    rm sysdig-agent ExecStartPre=/usr/bin/docker pull sysdig/agent ExecStart=/usr/bin/docker
    run --name sysdig-agent --privileged --net host --pid host -e ACCESS_KEY=<access
    key> -e TAGS=[role:web,location:bangalore] -v /var/run/docker.sock:/host/var/run/docker.sock
    -v /dev:/host/dev -v /proc:/host/proc:ro -v /boot:/host/boot:ro sysdig/agent ExecStop=/usr/bin/docker
    stop sysdig-agent  [X-Fleet] Global=true`'
- en: 'The following is my three-node CoreOS cluster:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我的三节点 CoreOS 集群：
- en: '![](img/00389.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00389.jpg)'
- en: 'The following command can be used to start the sysdig agent on the CoreOS machine:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于在 CoreOS 机器上启动 sysdig 代理：
- en: '`fleetctl start docker-sysdig.service`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`fleetctl start docker-sysdig.service`'
- en: 'The following output shows the running sysdig-agent container in one of the
    CoreOS nodes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了在其中一个CoreOS节点中运行的sysdig-agent容器：
- en: '![](img/00392.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00392.jpg)'
- en: 'The following output in the Sysdig cloud shows the registered hosts along with
    the running containers. Here, we can see the three hosts and the Containers running
    in each host along with their CPU, memory, network IO, and file IO:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Sysdig云中显示的注册主机及其运行的容器的输出。在这里，我们可以看到三台主机和每台主机上运行的容器，以及它们的CPU、内存、网络I/O和文件I/O：
- en: '![](img/00394.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00394.jpg)'
- en: 'The following output shows the summary view:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了摘要视图：
- en: '![](img/00396.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00396.jpg)'
- en: 'The following output shows the dashboard output for a single Container with
    its associated processes. We have picked the sysdig container for the following
    output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了单个容器的仪表板输出及其相关进程。我们选择了sysdig容器进行以下输出：
- en: '![](img/00398.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00398.jpg)'
- en: Kubernetes integration
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集成
- en: Sysdig recently added a feature to integrate with Kubernetes, where Sysdig is
    aware of Kubernetes logical constructs, such as the master node, minion node,
    Pods, replication controllers, labels, and so on. Sysdig gets this awareness by
    querying the Kubernetes API server. By combining the data collected from Containers
    and the Kubernetes API server, Sysdig and the Sysdig cloud can group information
    at Kubernetes' level. For example, we can view the CPU and memory usage either
    on the Kubernetes pod or replication controller basis. Sysdig has plans to integrate
    with other orchestration engines such as Mesos and Swarm in the future. Sysdig
    also has plans to integrate with other Container runtime such as Rkt.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Sysdig最近增加了一项与Kubernetes集成的功能，Sysdig可以识别Kubernetes的逻辑结构，如主节点、从节点、Pod、复制控制器、标签等。Sysdig通过查询Kubernetes
    API服务器来获得这些信息。通过结合从容器和Kubernetes API服务器收集的数据，Sysdig和Sysdig云可以在Kubernetes级别上对信息进行分组。例如，我们可以根据Kubernetes
    pod或复制控制器查看CPU和内存使用情况。Sysdig计划未来与其他编排引擎（如Mesos和Swarm）进行集成。Sysdig还计划与其他容器运行时（如Rkt）进行集成。
- en: Cadvisor
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Cadvisor
- en: Cadvisor is an open source tool from Google to monitor Containers as well as
    the host system on which the Container is running. Google developed cadvisor for
    its own Container system and later extended its support to Docker containers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Cadvisor是Google推出的一款开源工具，用于监控容器及其运行的主机系统。Google为其自己的容器系统开发了cadvisor，之后将其支持扩展到Docker容器。
- en: 'The following are some notes on cadvisor:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于cadvisor的说明：
- en: It monitors CPU, memory, network, and file I/O for both the host system as well
    as Containers.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它监控主机系统和容器的CPU、内存、网络和文件I/O。
- en: It can work with Docker and other Container runtimes.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与Docker和其他容器运行时一起使用。
- en: It can be started as a Container in the host system with no special changes
    necessary in the host system.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以作为容器在主机系统中启动，且不需要对主机系统进行任何特殊更改。
- en: The cadvisor container starts a simple web server, using which we can access
    the dashboards using a simple GUI.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cadvisor容器启动了一个简单的Web服务器，我们可以通过它访问仪表板并使用简单的GUI。
- en: It provides REST API for programmatic access.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了用于编程访问的REST API。
- en: Cadvisor stores the history for only a small duration. It is necessary to use
    cadvisor with backends such as InfluxDB ([https://influxdata.com/](https://influxdata.com/))
    and Prometheus ([https://prometheus.io/](https://prometheus.io/)) to maintain
    the history.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cadvisor仅存储短期历史记录。要维持历史记录，需要将cadvisor与InfluxDB（[https://influxdata.com/](https://influxdata.com/)）和Prometheus（[https://prometheus.io/](https://prometheus.io/)）等后端一起使用。
- en: 'The following command can be used to start the Docker cadvisor Container:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于启动Docker cadvisor容器：
- en: '`docker run \``  --volume=/:/rootfs:ro \``  --volume=/var/run:/var/run:rw \``  --volume=/sys:/sys:ro \``  --volume=/var/lib/docker/:/var/lib/docker:ro \``  --publish=8080:8080 \``  --detach=true \``  --name=cadvisor \``  google/cadvisor:latest`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run \`  --volume=/:/rootfs:ro \`  --volume=/var/run:/var/run:rw \`  --volume=/sys:/sys:ro
    \`  --volume=/var/lib/docker/:/var/lib/docker:ro \`  --publish=8080:8080 \`  --detach=true
    \`  --name=cadvisor \`  google/cadvisor:latest`'
- en: 'The following output shows a running cadvisor container in the CoreOS system:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了在CoreOS系统中运行的cadvisor容器：
- en: '![](img/00400.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00400.jpg)'
- en: 'The following screenshot is a GUI snapshot showing processes and the CPU usage
    for a container:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了容器的进程和CPU使用情况的GUI快照：
- en: '![](img/00012.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpg)'
- en: 'The following output shows the REST API subtypes supported by cadvisor:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了cadvisor支持的REST API子类型：
- en: '![](img/00405.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00405.jpg)'
- en: The following are some examples of a REST API provided by cadvisor with the
    details that they provide. This link, [https://github.com/google/cadvisor/blob/master/docs/api.md](https://github.com/google/cadvisor/blob/master/docs/api.md),
    gives the details of all the supported REST APIs. All the following commands return
    output in the JSON format.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 cadvisor 提供的 REST API 示例，包括它们提供的详细信息。这个链接，[https://github.com/google/cadvisor/blob/master/docs/api.md](https://github.com/google/cadvisor/blob/master/docs/api.md)，提供了所有支持的
    REST API 详情。以下所有命令的输出格式为 JSON。
- en: 'The following command gives the host detail:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令提供主机详细信息：
- en: '`curl -X GET http://172.17.8.102:8080/api/v1.3/machine | jq .`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.102:8080/api/v1.3/machine | jq .`'
- en: 'The following command gives the Container performance detail:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令提供容器性能详细信息：
- en: '`curl -X GET http://172.17.8.102:8080/api/v1.3/containers/ | jq .`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.102:8080/api/v1.3/containers/ | jq .`'
- en: 'The following command gives the Docker container nginx performance detail:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令提供 Docker 容器 nginx 性能详细信息：
- en: '`curl -X GET http://172.17.8.102:8080/api/v1.3/docker/nginx | jq .`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.102:8080/api/v1.3/docker/nginx | jq .`'
- en: Cadvisor provides you with limited information compared to sysdig as cadvisor
    relies mainly on Docker-provided statistics. Additionally, cadvisor provides only
    limited history on statistics, and so it is necessary to integrate cadvisor with
    other tools such as Influxdb to maintain a longer history.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Cadvisor 提供的信息比 sysdig 少，因为 cadvisor 主要依赖 Docker 提供的统计信息。此外，cadvisor 提供的统计历史有限，因此需要将
    cadvisor 与其他工具（如 Influxdb）集成，以保持更长的历史记录。
- en: The Docker remote API
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 远程 API
- en: The Docker remote API can be used to access the Docker engine with the REST
    API. This can be used for programmatic access to Docker.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 远程 API 可以用于通过 REST API 访问 Docker 引擎。这可以用于程序化访问 Docker。
- en: 'The following section of CoreOS `cloud-config` can be used to enable the Docker
    remote API listening on TCP port `2375`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分 CoreOS `cloud-config` 可用于启用 Docker 远程 API 并监听 TCP 端口 `2375`：
- en: '`    - name: docker-tcp.socket       command: start       enable: true       content: |
            [Unit]         Description=Docker Socket for the API         [Socket]
            ListenStream=2375         Service=docker.service         BindIPv6Only=both
            [Install]         WantedBy=sockets.target`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`    - name: docker-tcp.socket       command: start       enable: true       content:
    |         [Unit]         Description=Docker Socket for the API         [Socket]
            ListenStream=2375         Service=docker.service         BindIPv6Only=both
            [Install]         WantedBy=sockets.target`'
- en: 'The following are some examples of accessing the Docker remote API:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些访问 Docker 远程 API 的示例：
- en: 'List the running Containers:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 列出正在运行的容器：
- en: '`docker -H tcp://172.17.8.102:2375 ps`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker -H tcp://172.17.8.102:2375 ps`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前述命令的输出：
- en: '![](img/00407.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00407.jpg)'
- en: 'List the Container images:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 列出容器镜像：
- en: 'The following command can be used to list Container images in the JSON format:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于以 JSON 格式列出容器镜像：
- en: '`curl -X GET http://172.17.8.101:2375/images/json | jq .`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.101:2375/images/json | jq .`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前述命令的输出：
- en: '![](img/00410.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00410.jpg)'
- en: 'List Docker engine details:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker 引擎详细信息：
- en: 'The following command is equivalent to `docker info`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令相当于 `docker info`：
- en: '`curl -X GET http://172.17.8.101:2375/info | jq .`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.101:2375/info | jq .`'
- en: 'List particular Container statistics:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 列出特定容器统计信息：
- en: '`curl -X GET http://172.17.8.101:2375/containers/26b225ec6a8e/stats | jq .`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.101:2375/containers/26b225ec6a8e/stats | jq .`'
- en: 'List the Docker version:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker 版本：
- en: '`curl -X GET http://172.17.8.102:2375/version | jq .`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.102:2375/version | jq .`'
- en: 'List the Docker events:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker 事件：
- en: '`curl -X GET http://172.17.8.102:2375/events`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.102:2375/events`'
- en: 'The following command deletes the specific `busybox` container:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令删除特定的 `busybox` 容器：
- en: '`curl -X DELETE http://172.17.8.102:2375/images/busybox`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X DELETE http://172.17.8.102:2375/images/busybox`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前述命令的输出：
- en: '![](img/00412.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00412.jpg)'
- en: 'List specific Container logs sent to stdout:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列出发送到 stdout 的特定容器日志：
- en: 'The Container ID is specified as an argument for the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 容器 ID 作为参数指定用于以下命令：
- en: '`curl -X GET http://172.17.8.101:2375/containers/5ab9abb4787e/logs?stdout=1`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl -X GET http://172.17.8.101:2375/containers/5ab9abb4787e/logs?stdout=1`'
- en: If we need secure access to the Docker remote API, we can do it using TLS, and
    the Docker daemon supports this.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要安全访问 Docker 远程 API，可以使用 TLS，Docker 守护进程支持此功能。
- en: Container logging
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 容器日志
- en: 'When Containers send the output to stdout or stderr, it needs to be logged.
    This is useful to monitor errors and events and also to maintain the history of
    the Container application. With Containers, there are some special challenges
    with respect to logging:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器将输出发送到 stdout 或 stderr 时，必须记录这些日志。这对于监控错误和事件，以及维护容器应用程序的历史记录非常有用。使用容器时，日志记录存在一些特殊挑战：
- en: Typically, Containers run a microservice, and we don't want the logging process
    running inside a container as this defeats the Container model.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，容器运行的是微服务，我们不希望日志记录过程在容器内部运行，因为这违背了容器模型。
- en: With microservices, a single application can be split into multiple containers
    running across different hosts. It is necessary to collate logs from multiple
    containers to make meaningful conclusions. This enforces the need to have a central
    logging server rather than doing container monitoring on the host where the container
    is running.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于微服务来说，一个应用程序可以拆分成多个容器，运行在不同的主机上。为了得出有意义的结论，必须从多个容器中收集日志。这就要求我们必须有一个中央日志服务器，而不是在容器运行的主机上进行容器监控。
- en: We covered Container monitoring in the previous section. When Container logs
    are correlated with the Container monitoring data, we can get a better understanding
    of the system and easily narrow down any system wide issues.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中介绍了容器监控。当将容器日志与容器监控数据关联时，我们可以更好地理解系统，并轻松地缩小系统范围内的任何问题。
- en: 'I found the following two approaches widely used for centralized Container
    logging:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现以下两种方法在集中式容器日志记录中被广泛使用：
- en: 'ELK stack (Elastic search, Logstash, and Kibana): Elastic search is used as
    a central log repository, Logstash is used as an agent to export Container data,
    and Kibana is used as a logging GUI frontend. I have not covered the ELK stack
    in this chapter. The links in the references section provide details on setting
    up the ELK stack for Container logging.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELK 堆栈（Elastic 搜索、Logstash 和 Kibana）：Elastic 搜索作为中央日志存储库，Logstash 作为代理导出容器数据，Kibana
    作为日志记录的 GUI 前端。我在本章中没有介绍 ELK 堆栈。参考部分中的链接提供了有关为容器日志记录设置 ELK 堆栈的详细信息。
- en: 'LogEntries: LogEntries combines the Container agent, frontend, and central
    logging server for a single integrated solution.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogEntries：LogEntries 将容器代理、前端和中央日志服务器结合为一个集成解决方案。
- en: There are also other tools such as AWS Cloudwatch ([https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)),
    Loggly ([https://www.loggly.com](https://www.loggly.com)), Elastic ([http://www.elastic.io/](http://www.elastic.io/)),
    and Sematext Logsene ([https://sematext.com/logsene/](https://sematext.com/logsene/))
    that provide logging capability for Containers. When using AWS cloudwatch for
    Container monitoring, we get custom hooks based on the AWS environment, and it
    also integrates well with their other cloud monitoring options.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他工具，如 AWS Cloudwatch（[https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)）、Loggly（[https://www.loggly.com](https://www.loggly.com)）、Elastic（[http://www.elastic.io/](http://www.elastic.io/)）和
    Sematext Logsene（[https://sematext.com/logsene/](https://sematext.com/logsene/)），它们提供容器日志记录功能。在使用
    AWS Cloudwatch 进行容器监控时，我们可以根据 AWS 环境获得自定义钩子，并且它与其他云监控选项集成良好。
- en: Docker logging drivers
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 日志驱动程序
- en: 'Docker supports the following log drivers as of Docker 1.7:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 Docker 1.7，Docker 支持以下日志驱动程序：
- en: '`None`: No logging.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None`：不进行日志记录。'
- en: '`Json-file`: Logs are stored as a file in the JSON format. This is the default
    logging option.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Json-file`：日志以 JSON 格式的文件存储。这是默认的日志记录选项。'
- en: '`Syslog`: Logs are sent to the syslog server.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Syslog`：日志被发送到 syslog 服务器。'
- en: '`Journald`: Logs are sent to the journald daemon. Journald is integrated with
    systemd.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Journald`：日志被发送到 journald 守护进程。Journald 与 systemd 集成。'
- en: '`Gelf`: This writes log messages to the GELF endpoint, such as Graylog or Logstash.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gelf`：它将日志消息写入 GELF 端点，如 Graylog 或 Logstash。'
- en: '`Fluentd`: This writes log messages to fluentd.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fluentd`：它将日志消息写入 Fluentd。'
- en: '`Awslogs`: This is the Amazon cloudwatch logging driver.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Awslogs`：这是 Amazon Cloudwatch 的日志记录驱动程序。'
- en: The JSON-file driver
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-file 驱动程序
- en: 'The following command starts a Docker container with the json-file log driver
    with the maximum number of files limited to 100, each file not exceeding 1 MB:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令启动一个使用 json-file 日志驱动程序的 Docker 容器，最多保留 100 个文件，每个文件的大小不超过 1 MB：
- en: '`docker run --name busyboxjsonlogger --log-driver=json-file --log-opt max-size=1m --log-opt max-file=100 -d busybox /bin/sh -c "while true; do echo hello world ; sleep 5 ; done"`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run --name busyboxjsonlogger --log-driver=json-file --log-opt max-size=1m
    --log-opt max-file=100 -d busybox /bin/sh -c "while true; do echo hello world
    ; sleep 5 ; done"`'
- en: 'In the preceding `busyboxjsonlogger` Container, we are continuously sending
    `hello world` output to stdout. The following output shows the `docker logs` output
    for `busyboxjsonlogger`, where we can see the `hello world` output:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述的 `busyboxjsonlogger` 容器中，我们持续发送 `hello world` 输出到标准输出。以下输出显示了 `busyboxjsonlogger`
    的 `docker logs` 输出，其中我们可以看到 `hello world` 输出：
- en: '![](img/00414.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00414.jpg)'
- en: 'The following command can be executed to find out the location of the json
    log file:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令可以执行以找出 json 日志文件的位置：
- en: '![](img/00416.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00416.jpg)'
- en: 'Using the preceding path, we can directly dump the json logs, which gives additional
    information such as timestamp, stream type, and so on:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述路径，我们可以直接转储 json 日志，提供额外的信息，如时间戳、流类型等：
- en: '![](img/00418.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00418.jpg)'
- en: The Syslog driver
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog 驱动程序
- en: The Syslog driver is useful to collate messages from multiple containers into
    a single server running the syslog daemon.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog 驱动程序对将多个容器的消息汇总到运行 syslog 守护程序的单个服务器非常有用。
- en: 'The following command can be used to start the syslog server as a container.
    This command exposes the syslog server to port `5514` in the host machine:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令可以用来启动 syslog 服务器作为容器。此命令将 syslog 服务器暴露给主机机器上的端口 `5514`：
- en: '`docker run -d -v /tmp:/var/log/syslog -p 5514:514/udp  --name rsyslog voxxit/rsyslog`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run -d -v /tmp:/var/log/syslog -p 5514:514/udp --name rsyslog voxxit/rsyslog`'
- en: 'The following command can be used to start a container with the syslog driver
    option that sends the logs to the syslog server specified earlier:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令可以用来启动一个带有 syslog 驱动程序选项的容器，将日志发送到前面指定的 syslog 服务器：
- en: '`docker run --log-driver=syslog --log-opt syslog-address=udp://127.0.0.1:5514 --log-opt syslog-facility=daemon --log-opt tag="mylog" --name busyboxsysloglogger -d busybox /bin/sh -c "while true; do echo hello world ; sleep 5 ; done"`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run --log-driver=syslog --log-opt syslog-address=udp://127.0.0.1:5514
    --log-opt syslog-facility=daemon --log-opt tag="mylog" --name busyboxsysloglogger
    -d busybox /bin/sh -c "while true; do echo hello world ; sleep 5 ; done"`'
- en: 'The following output shows the syslog from the syslog server:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的输出显示了来自 syslog 服务器的 syslog：
- en: '`docker exec rsyslog tail –f /var/log/messages`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker exec rsyslog tail –f /var/log/messages`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面命令的输出：
- en: '![](img/00008.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpg)'
- en: The journald driver
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: journald 驱动程序
- en: The journald logging driver sends container logs to the systemd journal. Log
    entries can be retrieved using the `journalctl` command. This works well in a
    CoreOS environment where journald is used for all the other logging.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: journald 日志驱动程序将容器日志发送到 systemd 日志。可以使用 `journalctl` 命令检索日志条目。这在使用 journald
    作为所有其他日志记录的 CoreOS 环境中运行良好。
- en: 'The following command starts a container with the journal driver:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令启动带有 journal 驱动程序的容器：
- en: '`docker run --name busyboxjournallogger --log-driver=journald -d busybox /bin/sh -c "while true; do echo hello world ; sleep 5 ; done"`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run --name busyboxjournallogger --log-driver=journald -d busybox /bin/sh
    -c "while true; do echo hello world ; sleep 5 ; done"`'
- en: 'The following command shows the logs from journalctl with `CONTAINER_NAME`
    used as a filter:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令显示以 `CONTAINER_NAME` 作为过滤器的 journalctl 日志：
- en: '`journalctl CONTAINER_NAME=busyboxjournallogger`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`journalctl CONTAINER_NAME=busyboxjournallogger`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面命令的输出：
- en: '![](img/00360.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00360.jpg)'
- en: 'The following command shows the journalctl logs in the JSON format:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令显示以 JSON 格式显示的 journalctl 日志：
- en: '`journalctl -o json CONTAINER_NAME=busyboxjournallogger --no-pager`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`journalctl -o json CONTAINER_NAME=busyboxjournallogger --no-pager`'
- en: 'The following screenshot is the output of the preceding command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是前面命令的输出：
- en: '![](img/00377.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00377.jpg)'
- en: Logentries
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 日志条目
- en: 'LogEntries can be used to collect logs from the host system running containers,
    export them to the central logging server, and analyze logs from a central server.
    The following diagram describes the components of the LogEntries Container architecture:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: LogEntries 可用于收集运行容器的主机系统的日志，将其导出到中央日志服务器，并从中央服务器分析日志。以下图表描述了 LogEntries 容器架构的组件：
- en: '![](img/00368.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00368.jpg)'
- en: 'The following are some notes on the LogEntries Container architecture:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 LogEntries 容器架构的一些注释：
- en: The LogEntries container runs in the host system. It uses the Docker API to
    collect Container statistics, logs, and events, and transports them to a central
    server.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogEntries 容器在主机系统中运行。它使用 Docker API 收集容器统计信息、日志和事件，并将它们传输到中央服务器。
- en: The token-based system can be used to aggregate Container logs from multiple
    hosts. For a Container dataset belonging to a single domain, we can create a token
    from LogEntries and use this token in every individual host of the domain. The
    LogEntries agent in each host talks to the LogEntries server with this token.
    LogEntries aggregates log sets based on the token.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于令牌的系统可以用于聚合来自多个主机的容器日志。对于属于同一域的容器数据集，我们可以从 LogEntries 创建一个令牌，并在该域的每个主机中使用此令牌。每个主机中的
    LogEntries 代理会使用该令牌与 LogEntries 服务器进行通信。LogEntries 会根据令牌聚合日志集。
- en: As LogEntries collects Container statistics, it also displays some Container
    monitoring data in addition to logs.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着 LogEntries 收集容器统计信息，它还会显示一些容器监控数据，除了日志之外。
- en: LogEntries provides extensions using Community packs. Community packs provide
    a way to share Search Queries, Tags, Alerts, and Widgets easily. Community packs
    follow a JSON structure and can be easily imported in the Logentries account via
    the LogEntries UI.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogEntries 提供使用社区包的扩展功能。社区包提供了一种轻松共享搜索查询、标签、警报和小工具的方式。社区包遵循 JSON 结构，可以通过 LogEntries
    UI 轻松导入到 LogEntries 账户中。
- en: LogEntries has both free and paid subscriptions. A paid subscription gives additional
    storage and enterprise-level features.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogEntries 提供免费和付费订阅。付费订阅提供额外的存储和企业级功能。
- en: Exporting CoreOS journal logs
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 导出 CoreOS 日志
- en: CoreOS uses journalctl to store logs from all services. The following Container
    ([https://github.com/kelseyhightower/journal-2-logentries](https://github.com/kelseyhightower/journal-2-logentries))
    can be used to send journal entries to the LogEntries server using SSL.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS 使用 journalctl 存储所有服务的日志。可以使用以下容器 ([https://github.com/kelseyhightower/journal-2-logentries](https://github.com/kelseyhightower/journal-2-logentries))
    通过 SSL 将日志条目发送到 LogEntries 服务器。
- en: 'The following are the steps necessary to export journalctl logs from CoreOS
    nodes:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 CoreOS 节点导出 journalctl 日志所需的步骤：
- en: Create a token from logentries.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 logentries 创建一个令牌。
- en: Use the token either in a service file or inside a `cloud-config` as an option
    while starting the `journal-2-logentries` container. An alternate option is to
    update the token in etcd, which all the nodes in a CoreOS cluster can use.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动 `journal-2-logentries` 容器时，可以在服务文件中或 `cloud-config` 内部作为选项使用令牌。另一种选择是更新
    etcd 中的令牌，CoreOS 集群中的所有节点都可以使用该令牌。
- en: Update the token in etcd (for example, `etcdctl set /logentries.com/token <token>`).
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 etcd 中更新令牌（例如，`etcdctl set /logentries.com/token <token>`）。
- en: 'The following service file can be used to start the `journal-2-logentries`
    container in all the CoreOS nodes of the cluster:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下服务文件可以用于在集群的所有 CoreOS 节点上启动 `journal-2-logentries` 容器：
- en: '`[Unit] Description=Forward Systemd Journal to logentries.com  [Service] TimeoutStartSec=0
    ExecStartPre=-/usr/bin/docker kill journal-2-logentries ExecStartPre=-/usr/bin/docker rm journal-2-logentries
    ExecStartPre=/usr/bin/docker pull quay.io/kelseyhightower/journal-2-logentries
    ExecStart=/usr/bin/bash -c \ "/usr/bin/docker run --name journal-2-logentries \
    -v /run/journald.sock:/run/journald.sock \ -e LOGENTRIES_TOKEN=$(etcdctl get /logentries.com/token) \
    quay.io/kelseyhightower/journal-2-logentries"  [X-Fleet] Global=true`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Unit] Description=将 Systemd 日志转发到 logentries.com  [Service] TimeoutStartSec=0
    ExecStartPre=-/usr/bin/docker kill journal-2-logentries ExecStartPre=-/usr/bin/docker
    rm journal-2-logentries ExecStartPre=/usr/bin/docker pull quay.io/kelseyhightower/journal-2-logentries
    ExecStart=/usr/bin/bash -c \ "/usr/bin/docker run --name journal-2-logentries
    \ -v /run/journald.sock:/run/journald.sock \ -e LOGENTRIES_TOKEN=$(etcdctl get
    /logentries.com/token) \ quay.io/kelseyhightower/journal-2-logentries"  [X-Fleet]
    Global=true`'
- en: 'As the logentries container uses `journald.sock`, it is necessary to export
    that socket using the following unit in the `cloud-config`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 logentries 容器使用 `journald.sock`，因此需要使用以下单元在 `cloud-config` 中导出该套接字：
- en: '`    - name: systemd-journal-gatewayd.socket       command: start       enable: yes
          content: |          [Unit]          Description=Journal Gateway Service Socket
             [Socket]          ListenStream=/var/run/journald.sock          Service=systemd-journal-gatewayd.service
             [Install]          WantedBy=sockets.target`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`    - name: systemd-journal-gatewayd.socket       command: start       enable:
    yes       content: |          [Unit]          Description=Journal 网关服务套接字          [Socket]
             ListenStream=/var/run/journald.sock          Service=systemd-journal-gatewayd.service
             [Install]          WantedBy=sockets.target`'
- en: 'The following output shows the `journal-2-logentries` service running in all
    the CoreOS nodes of the cluster:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了在集群的所有 CoreOS 节点上运行的 `journal-2-logentries` 服务：
- en: '![](img/00157.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00157.jpg)'
- en: 'The following output shows the `journal-2-logentries` Container running in
    one of the nodes:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了在其中一个节点上运行的 `journal-2-logentries` 容器：
- en: '![](img/00376.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00376.jpg)'
- en: 'The following screenshot shows the LogEntries server frontend with journal
    logs from CoreOS nodes:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 LogEntries 服务器前端的日志，包含来自 CoreOS 节点的日志条目：
- en: '![](img/00409.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00409.jpg)'
- en: Container logs
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 容器日志
- en: LogEntries can be used to export Container logs, events, and statistics. Container
    events could be container start, create, stop, and die events. Container logs
    are the stdout and stderr logs. Container statistics are CPU, memory, file, and
    network IO related details.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: LogEntries 可用于导出容器日志、事件和统计信息。容器事件可以是容器启动、创建、停止和终止事件。容器日志是标准输出（stdout）和标准错误（stderr）日志。容器统计信息包括
    CPU、内存、文件和网络 IO 相关的详细信息。
- en: 'The following are the steps necessary to export Container statistics and logs
    from CoreOS nodes:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从 CoreOS 节点导出容器统计信息和日志所需的步骤：
- en: Create a token from Logentries.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Logentries 创建一个令牌。
- en: Use the token either in a service file or as an option while starting the docker-logentries
    container. An alternate option is to update the token in etcd, which all the nodes
    in the CoreOS cluster can use.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务文件中使用令牌，或者在启动 docker-logentries 容器时作为选项使用。另一种选择是将令牌更新到 etcd，CoreOS 集群中的所有节点都可以使用该令牌。
- en: Update the token in etcd (for example, `etcdctl set /logentries.com/token <token>`).
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 etcd 中的令牌（例如，`etcdctl set /logentries.com/token <token>`）。
- en: To view Docker container statistics, it is necessary to use the Docker community
    pack. This is a JSON file and can be downloaded from [https://community.logentries.com/packs/](https://community.logentries.com/packs/).
    The following instructions ([https://logentries.com/doc/community-packs/](https://logentries.com/doc/community-packs/))
    can be used to import the Docker community pack in logentries.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 Docker 容器统计信息，需要使用 Docker 社区包。该包是一个 JSON 文件，可以从 [https://community.logentries.com/packs/](https://community.logentries.com/packs/)
    下载。以下说明 ([https://logentries.com/doc/community-packs/](https://logentries.com/doc/community-packs/))
    可用于将 Docker 社区包导入 Logentries。
- en: 'The following command can be used to start the `docker-logentries` container:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于启动 `docker-logentries` 容器：
- en: '`docker run -v /var/run/docker.sock:/var/run/docker.sock logentries/docker-logentries -t <token>`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run -v /var/run/docker.sock:/var/run/docker.sock logentries/docker-logentries
    -t <token>`'
- en: 'The following service file can be used to start the `docker-logentries` container
    in all CoreOS nodes:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下服务文件可用于在所有 CoreOS 节点上启动 `docker-logentries` 容器：
- en: '`[Unit] Description=Forward Forward Container logs/stats to logentries.com  [Service]
    TimeoutStartSec=0 ExecStartPre=-/usr/bin/docker kill docker-logentries ExecStartPre=-/usr/bin/docker rm docker-logentries
    ExecStartPre=/usr/bin/docker pull logentries/docker-logentries ExecStart=/usr/bin/bash -c \
    "/usr/bin/docker run --name docker-logentries \ -v /var/run/docker.sock:/var/run/docker.sock \
    -e LOGENTRIES_TOKEN=$(etcdctl get /logentries.com/token) \ logentries/docker-logentries"  [X-Fleet]
    Global=true`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Unit] Description=将容器日志/统计信息转发到 logentries.com  [Service] TimeoutStartSec=0
    ExecStartPre=-/usr/bin/docker kill docker-logentries ExecStartPre=-/usr/bin/docker
    rm docker-logentries ExecStartPre=/usr/bin/docker pull logentries/docker-logentries
    ExecStart=/usr/bin/bash -c \ "/usr/bin/docker run --name docker-logentries \ -v
    /var/run/docker.sock:/var/run/docker.sock \ -e LOGENTRIES_TOKEN=$(etcdctl get
    /logentries.com/token) \ logentries/docker-logentries"  [X-Fleet] Global=true`'
- en: 'The following output shows the `docker-logentries` service running on all CoreOS
    nodes:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了 `docker-logentries` 服务在所有 CoreOS 节点上运行的情况：
- en: '![](img/00388.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00388.jpg)'
- en: 'The following output shows the `docker-logentries` container running on one
    of the nodes:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了 `docker-logentries` 容器在其中一个节点上运行的情况：
- en: '![](img/00187.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00187.jpg)'
- en: I created a bunch of Containers, and stopped and deleted a few to generate different
    Container events and logs.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了多个容器，并停止并删除了一些容器，以生成不同的容器事件和日志。
- en: 'The following output shows the Dashboard output that''s received from the Docker
    community pack. The dashboard shows a summary of Container events along with Container
    monitoring data:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了从 Docker 社区包接收到的仪表盘输出。仪表盘展示了容器事件的汇总以及容器监控数据：
- en: '![](img/00397.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00397.jpg)'
- en: 'The following output shows the log set view, which also shows the specific
    containers created with each Container create event. In the following picture,
    we can see the create events for the Redis, WordPress, and MySQL containers:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了日志集视图，此外还展示了每个容器创建事件所创建的具体容器。在以下图片中，我们可以看到 Redis、WordPress 和 MySQL 容器的创建事件：
- en: '![](img/00029.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpg)'
- en: 'To show the logging capability of LogEntries, I started the following container,
    which keeps sending `hello world` to stdout periodically:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 LogEntries 的日志功能，我启动了以下容器，它会定期将 `hello world` 发送到标准输出（stdout）：
- en: '`docker run -d busybox /bin/sh -c "while true; do echo hello world; sleep 5; done"`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run -d busybox /bin/sh -c "while true; do echo hello world; sleep 5;
    done"`'
- en: 'The following output shows logs filtered by the `busybox` container name where
    we can see the stdout:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了通过 `busybox` 容器名称过滤的日志，我们可以看到标准输出：
- en: '![](img/00406.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00406.jpg)'
- en: Summary
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered ways to monitor and debug CoreOS systems as well
    as Docker Containers. Rather than approaching Containers and the host system as
    two separate entities, monitoring tools need to approach Containers and the host
    system as one entity and be able to provide both Container view as well as system
    view and correlate between the data. As Containers get deployed in hundreds and
    thousands across hosts, monitoring solutions need to be very scalable. There are
    a lot of developments happening with debugging and troubleshooting CoreOS systems
    and Docker Containers; multiple companies are trying to solve this problem. Companies
    such as Sysdig and Logentries have nice solutions to solve monitoring and logging
    problems. In the next chapter, we will cover production considerations for CoreOS,
    Docker Containers, and microservices.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了监控和调试 CoreOS 系统以及 Docker 容器的方法。监控工具需要将容器和主机系统作为一个整体来处理，而不是将其视为两个独立的实体，并能够提供容器视图和系统视图，同时关联这些数据。随着容器在多个主机上以数百或数千个实例部署，监控解决方案需要具备高度可扩展性。目前在调试和排除
    CoreOS 系统及 Docker 容器故障方面有很多发展，许多公司都在努力解决这个问题。像 Sysdig 和 Logentries 这样的公司提供了很好的监控和日志解决方案。在下一章中，我们将讨论
    CoreOS、Docker 容器和微服务的生产环境考虑事项。
- en: References
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'CoreOS Toolbox: [https://github.com/coreos/toolbox](https://github.com/coreos/toolbox)
    and [http://thepracticalsysadmin.com/change-coreos-default-toolbox/](http://thepracticalsysadmin.com/change-coreos-default-toolbox/)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CoreOS 工具箱: [https://github.com/coreos/toolbox](https://github.com/coreos/toolbox)
    和 [http://thepracticalsysadmin.com/change-coreos-default-toolbox/](http://thepracticalsysadmin.com/change-coreos-default-toolbox/)'
- en: 'Cadvisor: [https://github.com/google/cadvisor](https://github.com/google/cadvisor)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cadvisor: [https://github.com/google/cadvisor](https://github.com/google/cadvisor)'
- en: 'Comparing Container monitoring options: [http://rancher.com/comparing-monitoring-options-for-docker-deployments/](http://rancher.com/comparing-monitoring-options-for-docker-deployments/)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '比较容器监控选项: [http://rancher.com/comparing-monitoring-options-for-docker-deployments/](http://rancher.com/comparing-monitoring-options-for-docker-deployments/)'
- en: 'Sysdig: [https://sysdig.com/coreos-sysdig-part-1-digging-into-coreos-environments/](https://sysdig.com/coreos-sysdig-part-1-digging-into-coreos-environments/),
    [https://sysdig.com/sysdig-coreos-part-2-troubleshooting-flannel-networking-confd/](https://sysdig.com/sysdig-coreos-part-2-troubleshooting-flannel-networking-confd/),
    [http://www.sysdig.org/](http://www.sysdig.org/), and [https://github.com/draios/sysdig](https://github.com/draios/sysdig)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig: [https://sysdig.com/coreos-sysdig-part-1-digging-into-coreos-environments/](https://sysdig.com/coreos-sysdig-part-1-digging-into-coreos-environments/),
    [https://sysdig.com/sysdig-coreos-part-2-troubleshooting-flannel-networking-confd/](https://sysdig.com/sysdig-coreos-part-2-troubleshooting-flannel-networking-confd/),
    [http://www.sysdig.org/](http://www.sysdig.org/)，和 [https://github.com/draios/sysdig](https://github.com/draios/sysdig)'
- en: 'Sysdig and Kubernetes integration: [https://sysdig.com/monitoring-kubernetes-with-sysdig-cloud/](https://sysdig.com/monitoring-kubernetes-with-sysdig-cloud/)
    and [https://sysdig.com/digging-into-kubernetes-with-sysdig/](https://sysdig.com/digging-into-kubernetes-with-sysdig/)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig 和 Kubernetes 集成: [https://sysdig.com/monitoring-kubernetes-with-sysdig-cloud/](https://sysdig.com/monitoring-kubernetes-with-sysdig-cloud/)
    和 [https://sysdig.com/digging-into-kubernetes-with-sysdig/](https://sysdig.com/digging-into-kubernetes-with-sysdig/)'
- en: 'Customizing the Docker remote API: [https://coreos.com/os/docs/latest/customizing-docker.html](https://coreos.com/os/docs/latest/customizing-docker.html)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '自定义 Docker 远程 API: [https://coreos.com/os/docs/latest/customizing-docker.html](https://coreos.com/os/docs/latest/customizing-docker.html)'
- en: 'The Docker logging driver: [http://docs.docker.com/engine/reference/logging/overview/](http://docs.docker.com/engine/reference/logging/overview/)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker 日志驱动程序: [http://docs.docker.com/engine/reference/logging/overview/](http://docs.docker.com/engine/reference/logging/overview/)'
- en: LogEntries:[https://logentries.com](https://logentries.com)
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LogEntries: [https://logentries.com](https://logentries.com)'
- en: 'Docker logging with ELK: [http://technologyconversations.com/2015/05/18/centralized-system-and-docker-logging-with-elk-stack/](http://technologyconversations.com/2015/05/18/centralized-system-and-docker-logging-with-elk-stack/)
    and [http://evanhazlett.com/2014/11/Logging-with-ELK-and-Docker/](http://evanhazlett.com/2014/11/Logging-with-ELK-and-Docker/)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用ELK进行Docker日志记录: [http://technologyconversations.com/2015/05/18/centralized-system-and-docker-logging-with-elk-stack/](http://technologyconversations.com/2015/05/18/centralized-system-and-docker-logging-with-elk-stack/)
    和 [http://evanhazlett.com/2014/11/Logging-with-ELK-and-Docker/](http://evanhazlett.com/2014/11/Logging-with-ELK-and-Docker/)'
- en: 'Docker logging with JSON and Syslog: [https://medium.com/@yoanis_gil/logging-with-docker-part-1-b23ef1443aac#.ehjyv77n7](https://medium.com/@yoanis_gil/logging-with-docker-part-1-b23ef1443aac#.ehjyv77n7)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用JSON和Syslog记录Docker日志: [https://medium.com/@yoanis_gil/logging-with-docker-part-1-b23ef1443aac#.ehjyv77n7](https://medium.com/@yoanis_gil/logging-with-docker-part-1-b23ef1443aac#.ehjyv77n7)'
- en: Further reading and tutorials
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读与教程
- en: 'Centralizing logs from a CoreOS cluster: [https://blog.logentries.com/2015/03/how-to-centralize-logs-from-coreos-clusters/](https://blog.logentries.com/2015/03/how-to-centralize-logs-from-coreos-clusters/)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '从CoreOS集群集中日志: [https://blog.logentries.com/2015/03/how-to-centralize-logs-from-coreos-clusters/](https://blog.logentries.com/2015/03/how-to-centralize-logs-from-coreos-clusters/)'
- en: 'Docker logging enhancements with 1.7: [https://blog.logentries.com/2015/06/the-state-of-logging-on-docker-whats-new-with-1-7/](https://blog.logentries.com/2015/06/the-state-of-logging-on-docker-whats-new-with-1-7/)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker 1.7版本的日志增强: [https://blog.logentries.com/2015/06/the-state-of-logging-on-docker-whats-new-with-1-7/](https://blog.logentries.com/2015/06/the-state-of-logging-on-docker-whats-new-with-1-7/)'
- en: 'Logging on Docker webinar: [https://vimeo.com/123341629](https://vimeo.com/123341629)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker日志记录网络研讨会: [https://vimeo.com/123341629](https://vimeo.com/123341629)'
- en: 'The dark arts of Container monitoring: [https://www.youtube.com/watch?v=exna5ntTCpY](https://www.youtube.com/watch?v=exna5ntTCpY)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '容器监控的黑魔法: [https://www.youtube.com/watch?v=exna5ntTCpY](https://www.youtube.com/watch?v=exna5ntTCpY)'
- en: 'Sysdig and Logentries webinar: [https://www.youtube.com/watch?v=wNxteOCv5eE](https://www.youtube.com/watch?v=wNxteOCv5eE)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig与Logentries网络研讨会: [https://www.youtube.com/watch?v=wNxteOCv5eE](https://www.youtube.com/watch?v=wNxteOCv5eE)'
- en: 'Docker stats API: [https://blog.logentries.com/2015/02/what-is-the-docker-stats-api/](https://blog.logentries.com/2015/02/what-is-the-docker-stats-api/)
    and [http://blog.scoutapp.com/articles/2015/06/22/monitoring-docker-containers-from-scratch](http://blog.scoutapp.com/articles/2015/06/22/monitoring-docker-containers-from-scratch)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker统计API: [https://blog.logentries.com/2015/02/what-is-the-docker-stats-api/](https://blog.logentries.com/2015/02/what-is-the-docker-stats-api/)
    和 [http://blog.scoutapp.com/articles/2015/06/22/monitoring-docker-containers-from-scratch](http://blog.scoutapp.com/articles/2015/06/22/monitoring-docker-containers-from-scratch)'
- en: 'Sysdig Container visibility: [https://sysdig.com/let-light-sysdig-adds-container-visibility/](https://sysdig.com/let-light-sysdig-adds-container-visibility/)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Sysdig容器可视化: [https://sysdig.com/let-light-sysdig-adds-container-visibility/](https://sysdig.com/let-light-sysdig-adds-container-visibility/)'
- en: 'The Docker remote API: [http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api)
    and [http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker远程API: [http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-8-docker-remote-api)
    和 [http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images](http://blog.flux7.com/blogs/docker/docker-tutorial-series-part-9-10-docker-remote-api-commands-for-images)'
- en: 'Protecting the Docker daemon: [https://docs.docker.com/engine/articles/https/](https://docs.docker.com/engine/articles/https/)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '保护Docker守护进程: [https://docs.docker.com/engine/articles/https/](https://docs.docker.com/engine/articles/https/)'
