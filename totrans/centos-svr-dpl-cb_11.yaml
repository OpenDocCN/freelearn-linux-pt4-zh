- en: Chapter 11. Safeguarding Against Threats
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。防范威胁
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '本章包含以下配方： '
- en: Sending messages to Syslog
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送消息到Syslog
- en: Rotating log files with logrotate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用logrotate旋转日志文件
- en: Using Tripwire to detect modified files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tripwire检测修改文件
- en: Using ClamAV to fight viruses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ClamAV来抵御病毒
- en: Checking for rootkits with chkrootkit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用chkrootkit检测rootkit
- en: Using Bacula for network backups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bacula进行网络备份
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: From logging your system's activities to sniffing out rootkits, this chapter
    presents recipes to help protect the investment you've made in your system and
    its data against various threats. First, you'll learn how to set up a central
    log server using Syslog, and then, how to rotate log files to make sure that they
    don't grow out of control. Then, we'll look at how Tripwire is used to detect
    system intrusion by checking if changes have been made to important system files.
    This chapter also contains recipes for setting up ClamAV and chkrootkit to keep
    your system free of viruses, Trojans, rootkits, and other malware. We'll finish
    with how to set up a centralized backup server using Bacula to safeguard your
    data from everyday threats such as accidental deletion and hardware failures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从记录系统活动到嗅探rootkit，本章提供了一些配方，帮助保护您在系统及其数据上投资免受各种威胁。首先，您将学习如何使用Syslog设置一个集中日志服务器，然后学习如何旋转日志文件以确保它们不会失控。然后，我们将看看如何使用Tripwire检测系统入侵，方法是检查重要系统文件是否有变化。本章还包括了一些设置ClamAV和chkrootkit的配方，以保持您的系统免受病毒、特洛伊木马、rootkit和其他恶意软件的影响。最后，我们将介绍如何使用Bacula设置一个集中式备份服务器，以保护您的数据免受意外删除和硬件故障等日常威胁。
- en: Sending messages to Syslog
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送消息到Syslog
- en: Syslog is a process that listens for messages from other applications and writes
    them to its log files, providing a common service to handle all logging activity.
    Messages can also be sent to a running instance of Syslog on a remote system acting
    as a centralized log server for your entire network. Apart from convenience, centralized
    logging can be useful for security reasons and also because it's harder for an
    attacker to cover their tracks when it's logged to a second system. In this recipe,
    you'll learn how to configure local and remote instances of Syslog to run your
    own log server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog是一个进程，它监听来自其他应用程序的消息并将它们写入其日志文件，提供处理所有日志记录活动的通用服务。消息也可以发送到远程系统上运行的Syslog的运行实例，作为整个网络的集中日志服务器。除了便利性外，集中式日志记录出于安全原因也很有用，因为当日志记录到第二个系统时，攻击者更难掩盖其行踪。在本配方中，您将学习如何配置本地和远程Syslog实例来运行您自己的日志服务器。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires two CentOS systems with working network connections. The
    recipe will refer to the first system as the local system and assume that it is
    configured with the IP address `192.168.56.100` and the hostname `benito`. The
    second system, referred to as the remote system, is assumed to have the address
    `192.168.56.35` and the hostname `logs`. The systems should be able to access
    each other by the hostnames; so, you will need to add the appropriate DNS records
    or override entries in the systems' `/etc/hosts` files. Administrative privileges
    are also required either by logging in with the `root` account or through the
    use of `sudo`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方需要两台已连接到网络的CentOS系统。配方将将第一台系统称为本地系统，并假定它配置有IP地址`192.168.56.100`和主机名`benito`。第二个系统，称为远程系统，假定具有地址`192.168.56.35`和主机名`logs`。这些系统应能够通过主机名相互访问；因此，您需要在系统的`/etc/hosts`文件中添加适当的DNS记录或覆盖条目。还需要管理权限，可以通过`root`帐户登录或通过`sudo`使用。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To forward log messages from the local system to the remote system, perform
    the following steps on the local system:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要将本地系统的日志消息转发到远程系统，请在本地系统上执行以下步骤：
- en: 'Open Syslog''s configuration file using your text editor:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开Syslog的配置文件：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At the end of the file, add the following rule:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下规则：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the change and close the configuration file.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭配置文件。
- en: 'Restart Syslog for the updated configuration to take effect:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Syslog以使更新后的配置生效：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, to accept incoming log messages, perform the following steps on the remote
    system:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在远程系统上执行以下步骤以接受传入的日志消息：
- en: 'Open Syslog''s configuration file using your text editor:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开Syslog的配置文件：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Locate the `$ModLoad` directive responsible for loading the `imudp` module
    and uncomment it by removing the leading `#` character. Uncomment the `$UDPServerRun`
    directive that immediately follows it as well:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位负责加载`imudp`模块的`$ModLoad`指令，并通过删除前导的`#`字符取消注释它。紧接着取消注释紧随其后的`$UDPServerRun`指令：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the changes and close the configuration file.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭配置文件。
- en: 'Restart Syslog for the updated configuration to take effect:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Syslog使更新的配置生效：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the firewall to UDP traffic on port `514`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开防火墙以允许UDP流量通过`514`端口：
- en: '[PRE6]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Syslog receives messages through several logging facilities, and each message
    has an assigned priority/severity. Messages can be filtered based on their facility
    and priority so that the desired messages are relayed while the rest are discarded.
    A list of facilities and priorities are both outlined in RFC-5424 (the Syslog
    protocol), and Rsyslog (the version of Syslog available in CentOS) implements
    most of them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog通过多个日志设施接收消息，每条消息都有一个指定的优先级/严重性。消息可以根据它们的设施和优先级进行过滤，以便传递所需的消息，同时丢弃其余的消息。设施和优先级的列表已在RFC-5424（Syslog协议）中列出，而Rsyslog（CentOS中使用的Syslog版本）实现了其中的大部分。
- en: 'Facilities offer a broad categorization designed to organize messages by the
    type of service that generates them. You can think of them as channels, where
    a message that logs a user''s failed login attempt can be sent over the `auth`
    channel separate from messages logging the restart of a service sent over the
    `daemon` channel. Rsyslog''s facilities are the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设施提供了一种广泛的分类方法，旨在通过生成消息的服务类型来组织消息。你可以把它们想象成频道，其中记录用户登录失败的消息可以通过`auth`频道发送，而记录服务重启的消息可以通过`daemon`频道发送。Rsyslog的设施如下：
- en: '`auth`: Security and authorization-related messages'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth`：与安全和授权相关的消息'
- en: '`cron`: Messages from cron'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cron`：来自cron的消息'
- en: '`daemon`: Messages from system daemons'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`daemon`：来自系统守护进程的消息'
- en: '`kern`: Messages from the Linux kernel'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kern`：来自Linux内核的消息'
- en: '`lpr`: Messages from the system''s printer services'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lpr`：来自系统打印服务的消息'
- en: '`mail`: Messages from the system''s mail services'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mail`：来自系统邮件服务的消息'
- en: '`news`: Messages from NTTP services'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`news`：来自NTTP服务的消息'
- en: '`syslog`: Messages generated by Syslog itself'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syslog`：由Syslog本身生成的消息'
- en: '`user`: User-level messages'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：用户级消息'
- en: '`uucp`: Messages from UUCP services'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uucp`：来自UUCP服务的消息'
- en: '`local0`-`local7`: User-level facilities for messages that aren''t handled
    by the other facilities'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local0`-`local7`：用于处理其他设施无法处理的用户级消息'
- en: 'Priorities indicate the severity of the message, for example, a situation that
    generates an error message is more severe than one generating an informational
    or debugging message. Rsyslog''s priorities are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级表示消息的严重性，例如，生成错误消息的情况比生成信息或调试消息的情况更严重。Rsyslog的优先级如下：
- en: '`emerg`, `panic`: The system is unusable'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emerg`, `panic`：系统不可用'
- en: '`alert`: Immediate action is required'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert`：需要立即采取行动'
- en: '`crit`: A critical event happened'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crit`：发生了一个严重事件'
- en: '`err`, `error`: An error happened'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`err`, `error`：发生错误'
- en: '`warn`, `warning`: A significant condition is encountered'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warn`, `warning`：遇到重要情况'
- en: '`notice`: Notice messages'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notice`：通知消息'
- en: '`info`: Informational messages'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`：信息性消息'
- en: '`debug`: Debugging messages'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`：调试消息'
- en: The rules in Syslog's configuration file specify where a log is written to and
    they are made up of two parts—the first part is a pattern that identifies a facility
    and priority. It consists of both the facility and priority names separated by
    a dot, for example, `auth.warn` or `local2.debug`. More than one facility can
    be separated by commas, as in `auth,daemon,cron.warn`. Additionally, `*` can be
    used as a wildcard to match all facilities or priorities. `auth.*` represents
    messages coming through the `auth` facility of any priority, `*.warn` represents
    messages with a priority of `warn` or above from any facility, and `*.*` represents
    all messages regardless of facility or priority.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog配置文件中的规则指定日志的写入位置，它们由两部分组成——第一部分是一个模式，用来识别一个设施和优先级。它由设施和优先级名称通过点号分隔，例如`auth.warn`或`local2.debug`。多个设施可以通过逗号分隔，例如`auth,daemon,cron.warn`。此外，`*`可以作为通配符，用来匹配所有设施或优先级。`auth.*`表示来自`auth`设施的任何优先级的消息，`*.warn`表示来自任何设施的`warn`优先级或更高的消息，`*.*`表示所有消息，无论设施或优先级。
- en: Messages that match the pattern are processed by the rule's second part, the
    action. Usually, the action is the location of a file that the message is written
    to, but it can also discard the message (use `~` as the location), send the message
    to a named pipe to be handled by an external process (prefix the location with
    `|`), or forward the message to another system (give a hostname as the location
    prefixed with `@`).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与模式匹配的消息将由规则的第二部分处理，即动作。通常，动作是将消息写入文件的位置，但它也可以丢弃消息（使用`~`作为位置）、将消息发送到一个命名管道，由外部进程处理（将位置前缀加上`|`），或者将消息转发到另一个系统（提供一个以`@`为前缀的主机名作为位置）。
- en: 'Since Rsyslog is installed, the service''s configuration file is `/etc/rsyslogd.conf`.
    On the local system we added the following rule:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于已安装Rsyslog，服务的配置文件是`/etc/rsyslogd.conf`。在本地系统上，我们添加了以下规则：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This rule matches all messages and sends them to the server `logs.example.com`.
    One `@` means messages will be sent using UDP while two means they will be sent
    using TCP:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该规则匹配所有消息并将其发送到服务器`logs.example.com`。一个`@`表示消息将通过UDP发送，而两个`@`则表示消息将通过TCP发送：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we uncommented the following configuration on the remote system:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在远程系统上取消注释了以下配置：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`$ModLoad` loads a Syslog module, in this case `imudp`, which handles incoming
    messages over UDP. The `$UDPServerRun` directive specifies the port which the
    module listens to for the messages. Traditionally, Syslog messages are sent to
    port `514`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ModLoad`加载一个Syslog模块，在本例中是`imudp`，它处理通过UDP接收的消息。`$UDPServerRun`指令指定该模块监听消息的端口。传统上，Syslog消息发送到`514`端口。'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Syslog can be configured to transmit messages using TCP, but unless you have
    specific need to do so, I recommend that you use UDP. UDP is less reliable, but
    TCP entails more overhead and can result in more severe network congestion during
    heavy logging events.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog可以配置为使用TCP传输消息，但除非有特定的需要，我建议你使用UDP。UDP可靠性较差，但TCP会带来更多的开销，并可能在大量日志记录事件期间导致更严重的网络拥塞。
- en: '![How it works...](img/image_11_001.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_11_001.jpg)'
- en: The configuration file contains rules to direct messages to different files
    based on their facility and priorities
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件包含规则，将消息根据其设施和优先级引导到不同的文件。
- en: 'Many applications are capable of sending messages to Syslog, even if they write
    to their own log files by default. Some programs do so when given an appropriate
    argument on the command line, for example, MySQL accepts the `--syslog` argument.
    Others, such as BIND and Apache, require changes in their configuration files.
    Even the shell scripts you write can send messages to Syslog using the `logger`
    command as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序能够将消息发送到Syslog，即使它们默认写入自己的日志文件。例如，MySQL在命令行中提供合适的参数时，会接受`--syslog`参数。其他程序，如BIND和Apache，则需要在其配置文件中进行更改。即使是你编写的Shell脚本，也可以通过以下方式使用`logger`命令将消息发送到Syslog：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`logger` accepts several arguments and then the log message. `-n` specifies
    the server where the message is sent (messages are sent to the local system''s
    Syslog instance when not provided) and `-p` specifies the facility and priority
    for the message.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`logger`接受多个参数，然后是日志消息。`-n`指定消息发送的服务器（如果没有提供，消息将发送到本地系统的Syslog实例），`-p`指定消息的设施和优先级。'
- en: See also
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with Syslog:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源，了解更多关于Syslog的操作信息：
- en: The Rsyslog website ([http://www.rsyslog.com/](http://www.rsyslog.com/))
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rsyslog网站 ([http://www.rsyslog.com/](http://www.rsyslog.com/))
- en: Basic configuration of Rsyslog ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-basic_configuration_of_rsyslog.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-basic_configuration_of_rsyslog.html))
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rsyslog的基本配置 ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-basic_configuration_of_rsyslog.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/s1-basic_configuration_of_rsyslog.html))
- en: 'RFC5424: The Syslog protocol ([http://www.rfc-base.org/txt/rfc-5424.tx](http://www.rfc-base.org/txt/rfc-5424.tx)t)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC5424：Syslog协议 ([http://www.rfc-base.org/txt/rfc-5424.tx](http://www.rfc-base.org/txt/rfc-5424.tx)t)
- en: Rotating log files with logrotate
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用logrotate轮换日志文件
- en: Log files are important because they provide better insight into what is happening
    on a system. The debugging and error messages in a log can be used to track down
    the source of a problem and resolve it quickly. Authentication messages maintain
    a record of who accessed the system and when, and repeated authentication failures
    can be a sign that an attacker is trying to gain unauthorized access. However,
    the usefulness of logs typically diminishes with age, and chatty applications
    that generate a lot of log entries could, if left unchecked, easily consume all
    of the system's storage resources. This recipe will show you how to rotate the
    log files to prevent the files from growing out of control and stale logs from
    wasting space.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件非常重要，因为它们能更好地了解系统上发生的事情。日志中的调试和错误消息可以用来追踪问题的根源并迅速解决。认证消息记录了谁在何时访问了系统，反复的认证失败可能是攻击者试图获得未授权访问的迹象。然而，日志的实用性通常会随着时间的推移而减少，而生成大量日志条目的活跃应用程序如果不加以管理，可能会轻易地消耗系统的所有存储资源。本食谱将向您展示如何旋转日志文件，以防止日志文件过大失控，并避免过时的日志浪费空间。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required either by logging in with the `root` account or through
    the use of `sudo`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱要求使用具有有效网络连接的 CentOS 系统。还需要具有管理员权限，可以通过以 `root` 账户登录或使用 `sudo` 获得。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to configure log file rotation using `logrotate`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 `logrotate` 配置日志文件旋转：
- en: 'Create the `/etc/logrotate.d/example` file:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `/etc/logrotate.d/example` 文件：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Write the following contents to the file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容写入文件：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save your update and close the file.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的更新并关闭文件。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`logrotate` rotates the log files by renaming them as sequential backups and
    creating a new file for the application to write to. While rotating `example.log`,
    it renames `example.log` to `example.log.1`. If `example.log.1` exists, it renames
    that file to `example.log.2` first (and so on for the other enumerated files).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`logrotate` 通过将日志文件重命名为顺序备份并创建一个新的文件供应用程序写入来旋转日志文件。在旋转 `example.log` 时，它将 `example.log`
    重命名为 `example.log.1`。如果 `example.log.1` 已存在，它首先将该文件重命名为 `example.log.2`（以此类推，其他按序号排列的文件也是如此）。'
- en: For the sake of this example, this recipe created a new configuration to rotate
    the `/var/log/example.log` file. The main configuration file of `logrotate` is
    `/etc/logrotate.conf`, while additional files can be placed in the `/etc/logrotate.d`
    directory. You'll want to check `logrotate.d` to see if rotation for the application's
    logs you want to manage is already configured (many packages will drop a configuration
    file there as a courtesy). You can then update the configuration if the package
    maintainer's configuration doesn't suit your needs. Directives in the main file
    set the global behavior, which is overridden on a per-configuration basis by the
    additional files in `logrotate.d`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个示例，本食谱创建了一个新的配置来旋转 `/var/log/example.log` 文件。`logrotate` 的主配置文件是 `/etc/logrotate.conf`，而附加文件可以放置在
    `/etc/logrotate.d` 目录中。您需要检查 `logrotate.d` 目录，查看您希望管理的应用程序日志的旋转是否已经配置好（许多软件包会在那里放置一个配置文件作为一种方便）。如果软件包维护者的配置不符合您的需求，您可以更新该配置。主文件中的指令设置全局行为，而附加文件中的指令会根据每个配置文件的情况进行覆盖。
- en: 'The configuration supplies the name of the targeted log file followed by a
    braced set of directives that specifies how `logrotate` should manage the file.
    `*` can be used as a wildcard to match multiple files which is useful when an
    application writes to more than one log file. For example, the Apache HTTP server
    logs messages to `access_log` and `error_log` in /`var/log/http`. So it''s configuration
    targets the log files as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置提供了目标日志文件的名称，后跟一组大括号指令，用于指定 `logrotate` 如何管理该文件。`*` 可以作为通配符匹配多个文件，这在应用程序写入多个日志文件时很有用。例如，Apache
    HTTP 服务器将消息写入 `/var/log/http` 目录下的 `access_log` 和 `error_log` 文件。所以它的配置将如下所示：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `monthly` directive instructs `logrotate` to rotate the files on a monthly
    basis. Other options are `daily`, `weekly`, and `yearly`. Alternatively, you can
    instruct `logrotate` to manage files based on their size—the `size` directive
    specifies a size and `logrotate` will rotate those files that are larger than
    that.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`monthly` 指令指示 `logrotate` 每月旋转一次文件。其他选项包括 `daily`（每天）、`weekly`（每周）和 `yearly`（每年）。或者，您可以指示
    `logrotate` 根据文件大小来管理文件——`size` 指令指定一个大小，`logrotate` 将旋转那些大于该大小的文件。'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If a value is given without a unit, the given value is understood as bytes.
    `logrotate` also supports `k` for kilobytes, `M` for megabytes, and `G` for gigabytes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的值没有单位，默认单位为字节。`logrotate` 还支持 `k` 表示千字节，`M` 表示兆字节，`G` 表示吉字节。
- en: 'The `rotate` directive specifies how many log files to keep in the rotation.
    In our scenario, four files are allowed; so, `example.log.3` overwrites `example.log.4`
    and there is no `example.log.5`. The `missingok` directive lets `logrotate` know
    that it''s okay to go on if a log file doesn''t exist (its default behavior is
    to raise an error). Also, the `notifempty` directive instructs `logrotate` to
    skip rotating if the file is empty. The `create` directive instructs `logrotate`
    to create a new log file after renaming the original and supplies the mode, user,
    and group for the new file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotate` 指令指定轮换中保留多少个日志文件。在我们的例子中，最多允许保留四个文件；因此，`example.log.3` 会覆盖 `example.log.4`，并且不会有
    `example.log.5`。`missingok` 指令告知 `logrotate` 如果某个日志文件不存在也可以继续运行（其默认行为是报错）。同时，`notifempty`
    指令指示 `logrotate` 如果文件为空，则跳过轮换。`create` 指令告知 `logrotate` 在重命名原始日志文件后创建一个新文件，并为新文件提供模式、用户和组：'
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![How it works...](img/image_11_002.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_11_002.jpg)'
- en: Rotated log files are numbered in sequence
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 轮换的日志文件按顺序编号
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The content of the original `example.log.4` file doesn't have to be lost. One
    option is to use the `mail` directive to instruct `logrotate` to e-mail its contents
    to you before overwriting it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 `example.log.4` 文件的内容不一定会丢失。一个选项是使用 `mail` 指令，在覆盖文件之前指示 `logrotate` 将其内容通过电子邮件发送给你。
- en: '`**mail tboronczyk@example.com**`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`**mail tboronczyk@example.com**`'
- en: Personally though, I recommend using `mail` only if the file is relatively small
    since sending a large file can cause undue strain on the mail server. Also, a
    log file that contains sensitive information shouldn't be transmitted by e-mail.
    For sensitive logs and larger files, I recommend using `prerotate` to invoke `scp`
    or another utility to copy the file elsewhere before the rotation.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 个人建议，只有在文件相对较小的情况下使用 `mail`，因为发送大型文件可能会对邮件服务器造成不必要的负担。此外，包含敏感信息的日志文件不应该通过电子邮件传输。对于敏感日志和较大的文件，我建议使用
    `prerotate` 来调用 `scp` 或其他工具，在轮换之前将文件复制到其他地方。
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can specify external actions to be performed before and after the log files
    are rotated. The `prerotate` directive supplies a set of shell commands that will
    be executed before the rotation process begins, and the `postrotate` directive
    supplies commands that will be run after rotation. Both directives use `endscript`
    to mark the end of the command set as shown in the preceding tip and in the recipe''s
    configuration. The configuration invokes `kill` to send the hang-up signal (`HUP`)
    to the example process which would reload that daemon. Some programs might be
    confused if the log file they''re writing to is moved and recreated, and reloading
    it causes the program to reopen its connection to the log file so that it can
    continue logging:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定在日志文件轮换前后执行的外部操作。`prerotate` 指令提供一组在轮换开始前执行的 shell 命令，`postrotate` 指令提供在轮换后执行的命令。两个指令都使用
    `endscript` 来标记命令集的结束，如前面的提示和配方配置中所示。配置中调用 `kill` 发送挂起信号（`HUP`）到示例进程，这将重新加载该守护进程。如果日志文件被移动并重新创建，一些程序可能会出现混乱，重新加载后程序会重新打开日志文件的连接，从而继续记录日志：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`logrotate` is run daily via `cron`, so once you''ve created/adjusted your
    rotation''s configuration you should be finished. The next time `logrotate` runs,
    it will pick up the update as it re-reads all of the configuration files.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`logrotate` 是通过 `cron` 每日运行的，因此一旦你创建/调整了轮换配置，就可以完成设置。下次 `logrotate` 运行时，它会重新读取所有配置文件并获取更新。'
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with `logrotate`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 参见以下资源，获取更多关于使用 `logrotate` 的信息：
- en: The `logrotate` manual page (`man 8 logrotate`)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logrotate` 手册页 (`man 8 logrotate`)'
- en: Manage Linux log files with Logrotate ([http://www.techrepublic.com/article/manage-linux-log-files-with-logrotate](http://www.techrepublic.com/article/manage-linux-log-files-with-logrotate))
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Logrotate 管理 Linux 日志文件 ([http://www.techrepublic.com/article/manage-linux-log-files-with-logrotate](http://www.techrepublic.com/article/manage-linux-log-files-with-logrotate))
- en: How to manage system logs ([http://www.tecmint.com/manage-linux-system-logs-using-rsyslogd-and-logrotate/](http://www.tecmint.com/manage-linux-system-logs-using-rsyslogd-and-logrotate/))
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理系统日志 ([http://www.tecmint.com/manage-linux-system-logs-using-rsyslogd-and-logrotate/](http://www.tecmint.com/manage-linux-system-logs-using-rsyslogd-and-logrotate/))
- en: Using Tripwire to detect modified files
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tripwire 检测修改过的文件
- en: This recipe shows you how to set up Tripwire, an auditing tool for detecting
    changes made to files on your system. Most often, Tripwire is positioned as an
    intrusion detection system because the unexpected modification of important configuration
    files is usually a sign of intrusion or malicious activity. Being able to monitor
    for such changes gives you the ability to detect and put a stop to malicious activity
    in a timely manner should it occur.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向你展示了如何设置Tripwire，这是一个用于检测系统中文件更改的审计工具。Tripwire通常被作为入侵检测系统来使用，因为重要配置文件的意外修改通常是入侵或恶意活动的标志。能够监控这些变化，可以帮助你及时发现并制止可能发生的恶意活动。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. The
    `tripwire` package is found in the EPEL repository, so the repository must be
    registered as discussed in [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*. Administrative privileges are
    also required, either by logging in with the `root` account or through the use
    of `sudo`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求使用有网络连接的CentOS系统。`tripwire`包位于EPEL仓库中，因此必须按[第4章](ch04.html "第4章：软件安装管理")《软件安装管理》中讨论的内容注册该仓库。还需要管理员权限，或者登录`root`账户，或者使用`sudo`命令。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to monitor for system intrusions using Tripwire:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤使用Tripwire监控系统入侵：
- en: 'Install the `tripwire` package from the EPEL repository:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从EPEL仓库安装`tripwire`包：
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run `tripwire-setup-keyfiles` to generate Tripwire''s keyfiles and configuration
    and policy files:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`tripwire-setup-keyfiles`来生成Tripwire的密钥文件、配置文件和策略文件：
- en: '[PRE19]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You will be prompted to provide a passphrase for the site keyfile and local
    keyfiles and then to give the site passphrase again to sign the configuration
    and policy files that are generated.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统会提示你输入站点密钥文件和本地密钥文件的密码，并再次输入站点密码来签名生成的配置文件和策略文件。
- en: 'Initialize Tripwire''s database. You will be prompted to provide your local
    passphrase:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化Tripwire的数据库。系统会提示你输入本地密码短语：
- en: '[PRE20]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Review warnings in the output to identify files that are defined in the policy
    but do not exist on your system:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查输出中的警告，以确定在策略中定义但在系统上不存在的文件：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Comment out the entries in `/etc/tripwire/twpol.txt` that reference the nonexisting
    files in `output.txt`. If all of the warnings in `output.txt` were caused by nonexisting
    files, then you can automate this step as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注释掉`/etc/tripwire/twpol.txt`中引用`output.txt`中不存在的文件的条目。如果`output.txt`中的所有警告都由于文件不存在而引起，那么你可以通过以下方式自动化此步骤：
- en: '[PRE22]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Regenerate the signed policy file. Provide the password for the site keyfile
    when prompted:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新生成已签名的策略文件。系统会提示你输入站点密钥文件的密码：
- en: '[PRE23]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Delete the original database and initialize a new one. This time, the process
    should finish without generating any warnings:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除原始数据库并初始化一个新的数据库。这次，过程应该在没有任何警告的情况下完成：
- en: '[PRE24]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Tripwire audits your system to detect which files have changed. The idea behind
    this is, if an attacker gains access to your system, they''ll inevitably create
    or modify keyfiles to secure their presence. However, it would be trivial for
    an attacker to modify Tripwire''s policy files to create the illusion that nothing
    has changed; so, the configuration and policy files are signed with a keyfile.
    The configuration file, policy file, and the keyfile are all generated when we
    run:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Tripwire审计你的系统以检测哪些文件发生了变化。其背后的理念是，如果攻击者获得了你的系统访问权限，他们不可避免地会创建或修改关键文件来确保其存在。然而，攻击者很容易修改Tripwire的策略文件，制造出没有变化的假象；因此，配置文件、策略文件和关键文件都需要用密钥文件进行签名。当我们运行以下命令时，配置文件、策略文件和密钥文件都会生成：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Because the default policy tries to be as comprehensive as possible for most
    users, there will be entries that aren't applicable to our CentOS system. If we
    were to run with the unmodified defaults then Tripwire would report the missing
    files, and sifting through the list of false positives would make it more difficult
    to identify if someone deleted a file of legitimate concern. Rather than reviewing
    the policy file manually, especially if you're not an expert and familiar with
    some of the files, the best approach is to run an initial scan on a system that
    is known to be clean and then let Tripwire report the nonexistent files. This
    will help save time as we try to tailor the policy to our system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于默认策略试图尽可能全面地涵盖大多数用户，可能会包含与我们的 CentOS 系统不相关的条目。如果我们使用未经修改的默认策略运行，Tripwire 会报告缺失的文件，筛选出误报的文件会使我们更难辨别是否有人删除了真正需要关注的文件。与其手动审查策略文件，特别是如果你不是专家并不熟悉某些文件，最好的做法是在已知干净的系统上进行初步扫描，然后让
    Tripwire 报告不存在的文件。这将帮助节省时间，并帮助我们将策略调整到我们的系统上。
- en: 'Initializing Tripwire''s database is done using `tripwire --init`. The program
    will scan the system, comparing the filesystem with what it knows about in the
    policy file and collect statistics on the files that do exist. These statistics
    are stored in the database as a baseline metric for comparison the next time Tripwire
    runs to see if there have been changes. The recipe redirected the error output
    containing the list of missing files to a separate text file for two reasons:
    the list will be lengthy and it''s sometimes easier to page through a file than
    scroll the terminal session, and we can script the process of customizing the
    policy based on that output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化 Tripwire 数据库使用命令 `tripwire --init`。程序将扫描系统，比较文件系统与策略文件中的信息，并收集现有文件的统计数据。这些统计数据将存储在数据库中，作为下次运行
    Tripwire 时与文件进行比较的基准指标。该过程将包含缺失文件的错误输出重定向到单独的文本文件，原因有二：列表可能很长，有时翻阅文件比滚动终端会话更方便；另外，我们可以基于该输出脚本化地定制策略：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`sed` is the traditional search-and-replace workhorse and `grep` is great for
    finding and extracting lines of interest, so we can use these two tools to update
    the policy `/etc/tripwire/twpol.txt`. First, we need to know what the messages
    in `output.txt` look like:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`sed` 是传统的搜索和替换工具，而 `grep` 非常适合查找和提取感兴趣的行，因此我们可以使用这两个工具来更新策略文件 `/etc/tripwire/twpol.txt`。首先，我们需要知道
    `output.txt` 中的消息格式如下：'
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![How it works...](img/image_11_003.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_11_003.jpg)'
- en: Nonexistent files generate a warning when initializing the Tripwire database
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不存在的文件在初始化 Tripwire 数据库时会产生警告
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If all of the warnings in the output file are related to nonexistent files then
    it's safe to automate updating the policy. This is why we then carefully reviewed
    the contents before continuing.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出文件中的所有警告都与不存在的文件有关，那么就可以安全地自动更新策略。这就是我们在继续之前仔细检查内容的原因。
- en: 'We use `grep` to target the lines containing `Filename:` and then use `cut`
    to split the line on the colon and capture the second part—the name of the nonexistent
    file. The `for` loop captures each filename and assigns it to the variable `f`,
    which we can then reference in our pattern to `sed`. The pattern performs a global
    search and replace, using capturing parentheses and numeric back references to
    overwrite the filename with a leading `#`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `grep` 来筛选包含 `Filename:` 的行，然后使用 `cut` 按冒号分割该行并提取第二部分——不存在的文件名。`for` 循环捕获每个文件名，并将其赋值给变量
    `f`，然后我们可以在 `sed` 的模式中引用它。该模式执行全局查找和替换，使用捕获括号和数字反向引用将文件名替换为以 `#` 开头：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important there is a space in the search space after the filename to make
    sure we only match the entire file. For example, we want to avoid a scenario where
    `/etc/rc.d` will also match `/etc/rc.d/init` because of the common prefix.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 确保文件名后面有一个空格非常重要，这样可以确保我们只匹配整个文件名。例如，我们想避免 `/etc/rc.d` 也会匹配到 `/etc/rc.d/init`，因为它们有共同的前缀。
- en: 'An unsigned, plain-text copy of the policy is stored at `/etc/tripwire/twpol.txt`.
    After we make our changes, we want to create a signed policy file which is used
    by Tripwire for the security reasons mentioned earlier. This is done with `twadmin`
    and the `--create-policy` argument. The `-S` argument provides the command with
    the path to our signing key and then we supply the plain-texted copy of the policy
    as the input:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 策略的未签名纯文本副本存储在 `/etc/tripwire/twpol.txt`。在我们进行更改后，我们希望创建一个签名的策略文件，Tripwire 将出于前面提到的安全原因使用它。这可以通过
    `twadmin` 和 `--create-policy` 参数完成。`-S` 参数为命令提供签名密钥的路径，然后我们提供策略的纯文本副本作为输入：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`twadmin` will sign the policy and write the result to `/etc/tripwire/tw.pol`.
    After the policy file has been modified we can then reinitialize the database.
    In fact, any time the policy file is updated you should regenerate the database,
    which is stored in `/var/lib/tripwire` and is named using the system''s hostname:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`twadmin` 会签署策略并将结果写入 `/etc/tripwire/tw.pol`。在策略文件修改后，我们可以重新初始化数据库。实际上，每次更新策略文件时，你都应该重新生成数据库，该数据库存储在
    `/var/lib/tripwire` 中，并以系统的主机名命名：'
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To scan the system for violations, run Tripwire with the `--check` option:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要扫描系统中的违规行为，可以运行带有 `--check` 选项的 Tripwire：
- en: '[PRE31]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![How it works...](img/image_11_004.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_11_004.jpg)'
- en: Tripwire reports its findings after a scan is performed
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Tripwire 在执行扫描后会报告其发现。
- en: 'Of course, to be effective, a scan must be performed at least once a day. For
    this reason, a cron job is installed in `/etc/cron.daily` by the `tripwire` package
    which runs a Tripwire scan. Depending on how cron is configured, the output of
    the scan will probably be e-mailed by cron to the system''s `root` user (and will
    most likely end up in `/var/spool/mail/root`). You can edit `/etc/cron.daily/tripwire-check`
    so that the output is e-mailed to you instead:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了有效，扫描必须至少每天执行一次。为此，`tripwire` 包在 `/etc/cron.daily` 中安装了一个 cron 任务，该任务会运行
    Tripwire 扫描。根据 cron 的配置，扫描的输出很可能会通过 cron 发送到系统的 `root` 用户的邮箱（并很可能最终进入 `/var/spool/mail/root`）。你可以编辑
    `/etc/cron.daily/tripwire-check`，让输出发送到你的邮箱：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can also configure Tripwire to send e-mails itself if you prefer. First,
    you''ll want to ensure that Tripwire can send mail to your address. Issue the
    following to send a test message and then check to make sure it arrives in your
    inbox:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你也可以配置 Tripwire 自行发送电子邮件。首先，你需要确保 Tripwire 能够向你的地址发送邮件。执行以下命令发送测试邮件，然后检查确保它到达了你的收件箱：
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: You can use supply the `--email-report` option when running a manual scan to
    have Tripwire send its results to your e-mail.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行手动扫描时，你可以使用 `--email-report` 选项，让 Tripwire 将结果发送到你的电子邮件。
- en: '`**tripwire --check --email-report**`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`**tripwire --check --email-report**`'
- en: By default, Tripwire will attempt to send the e-mail via sendmail (or Postfix's
    sendmail interface). If you need to send the mail through an SMTP server instead,
    review the *Email Notification Variables* section in `man 4 twconfig`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Tripwire 会尝试通过 sendmail（或 Postfix 的 sendmail 接口）发送电子邮件。如果你需要通过 SMTP 服务器发送邮件，可以查看
    `man 4 twconfig` 中的 *电子邮件通知变量* 部分。
- en: 'Specifying the destination e-mail address is a bit more involved in Tripwire''s
    configuration. The tests defined in the Tripwire policy file are grouped into
    rulesets, which allows files to be grouped together in a logical fashion. For
    example, there is a ruleset that tests the integrity of the Tripwire binaries
    themselves, which is separate from the ruleset that tests system administration
    programs. Each ruleset can have a defined e-mail address to send notifications
    to, which is great for flexibility where one administrator should be notified
    of modifications to one set of files and another admin should be notified about
    others:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Tripwire 配置中，指定目标电子邮件地址会稍微复杂一些。Tripwire 策略文件中定义的测试被分组到规则集中，这样可以将文件按逻辑方式进行分组。例如，有一个规则集测试
    Tripwire 可执行文件的完整性，这与测试系统管理程序的规则集是分开的。每个规则集可以有一个定义的电子邮件地址来发送通知，这对于灵活性非常好，允许一个管理员接收关于某一组文件的修改通知，另一个管理员接收关于其他文件的通知：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you're the only administrator, repeatedly specifying the same address can
    be tedious. A better approach would define the e-mail address as a global variable
    and then let the creative use of `sed` come to the rescue.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是唯一的管理员，反复指定相同的地址可能会很麻烦。一个更好的方法是将电子邮件地址定义为全局变量，然后通过巧妙地使用 `sed` 来简化操作。
- en: 'First, edit `twpol.txt` to include the variable assignment for your e-mail
    address in the global variable definitions section:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编辑`twpol.txt`文件，在全局变量定义部分添加你的电子邮件地址的变量赋值：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Save the change and close the file. Then, knowing each ruleset contains a `severity`
    directive, we can use a replacement pattern to insert the `mailto` directive:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。然后，考虑到每个规则集中都包含`severity`指令，我们可以使用替换模式来插入`mailto`指令：
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The end result should include the `emailto` directive in each ruleset''s definition:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果应该在每个规则集的定义中包含`emailto`指令：
- en: '[PRE37]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After you inspect the results, resign the policy file and reinitialize the database.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查结果后，重新签署策略文件并重新初始化数据库。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on working with Tripwire:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下资源，了解更多关于使用Tripwire的信息：
- en: Introduction to Tripwire (`man 8 twintro`)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tripwire简介（`man 8 twintro`）
- en: Tripwire configuration manual page (`man 4 twconfig`)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tripwire配置手册页面（`man 4 twconfig`）
- en: Tripwire policy manual page (`man 4 twpolicy`)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tripwire策略手册页面（`man 4 twpolicy`）
- en: Intrusion detection with Tripwire ([http://www.akadia.com/services/tripwire.html](http://www.akadia.com/services/tripwire.html))
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入侵检测与Tripwire（[http://www.akadia.com/services/tripwire.html](http://www.akadia.com/services/tripwire.html)）
- en: How to set up and use Tripwire ([http://www.linuxjournal.com/article/8758](http://www.linuxjournal.com/article/8758))
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置和使用Tripwire（[http://www.linuxjournal.com/article/8758](http://www.linuxjournal.com/article/8758)）
- en: Using ClamAV to fight viruses
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ClamAV抵御病毒
- en: The threat from viruses, Trojans, and other forms of malware is real. They have
    grown exponentially in both quantity and in sophistication, and antivirus software
    have had to adopt sophisticated detection methods. While there's no guarantee
    that your system will not fall victim to these unwanted bits of code, remaining
    mindful when using the Internet and sharing files, implementing common-sense security
    policies, and using an up-to-date antivirus program can go a long way in protecting
    you. This recipe will show you how to install ClamAV, the professional-grade open-source
    antivirus program, keep its threat database up to date, and scan your system.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 病毒、木马以及其他形式的恶意软件威胁是真实存在的。它们在数量和复杂性上都呈指数级增长，防病毒软件不得不采用复杂的检测方法。虽然无法保证你的系统不会成为这些恶意代码的受害者，但在使用互联网和共享文件时保持警惕，实施常识性的安全策略，并使用最新的防病毒程序，能够在很大程度上保护你。这个教程将向你展示如何安装ClamAV这一专业级开源防病毒程序，保持其威胁数据库的最新状态，并扫描你的系统。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. The
    ClamAV packages can be found in the EPEL repository, so the repository must be
    registered as discussed in [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*. Administrative privileges are
    also required either by logging in with the `root` account or through the use
    of `sudo`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程需要一个具有有效网络连接的CentOS系统。ClamAV软件包可以在EPEL仓库中找到，因此必须注册该仓库，如[第4章](ch04.html "第4章
    软件安装管理")《软件安装管理》中所讨论的那样。还需要具有管理员权限，可以通过登录`root`账户或使用`sudo`来获取。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps to install ClamAV and scan for viruses and Trojans:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装ClamAV并扫描病毒和木马：
- en: 'Install the `clamav` and `clamav-update` packages from the EPEL repository:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从EPEL仓库安装`clamav`和`clamav-update`软件包：
- en: '[PRE38]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Open the `freshclam` configuration file with your text editor:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开`freshclam`配置文件：
- en: '[PRE39]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Locate the `Example` line and add an `#` to the start of its line to comment
    it out:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`Example`行并在行首添加`#`以将其注释掉：
- en: '[PRE40]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Save the update and close the file.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更新并关闭文件。
- en: 'Run `freshclam` to update the scanner''s threat database:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`freshclam`以更新扫描器的威胁数据库：
- en: '[PRE41]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a `systemd` service file to manage the `freshclam` daemon for automate
    updates:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`systemd`服务文件来管理`freshclam`守护进程，以实现自动更新：
- en: '[PRE42]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Use the following for the file''s content:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容作为文件的内容：
- en: '[PRE43]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Force `systemd` to reload its services:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强制`systemd`重新加载其服务：
- en: '[PRE44]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Start the new `freshclam` service and enable it to start when the system reboots:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动新的`freshclam`服务并启用它在系统重启时自动启动：
- en: '[PRE45]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Scan the files in your `home` directory for threats using `clamscan`:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`clamscan`扫描`home`目录中的文件以检查威胁：
- en: '[PRE46]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, we installed the `clamav` and `clamav-update` packages. The `clamav`
    package contains the virus scanner while `clamav-update` contains the `freshclam`
    program, which updates ClamAV''s virus definitions to keep it up to date:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们安装了`clamav`和`clamav-update`软件包。`clamav`软件包包含病毒扫描器，而`clamav-update`包含`freshclam`程序，该程序用于更新ClamAV的病毒定义，以保持其最新：
- en: '[PRE47]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`freshclam` reads its configuration from `/etc/freshclam.conf`. The file contains
    a line with the word `Example` to prevent users from using the defaults blindly
    and we must remove it or comment it out before we can use `freshclam`. The defaults
    settings are fine for our purposes and this is more of an annoyance than anything
    else, but it does force us to look at the file and see what behavior can be tweaked.
    Each directive is commented with an explanation and what the default behavior
    is.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`freshclam`从`/etc/freshclam.conf`读取其配置文件。该文件包含一行包含单词`Example`，以防止用户盲目使用默认设置，我们必须在使用`freshclam`之前将其删除或注释掉。默认设置适合我们的目的，这更多的是一种烦恼，但它确实迫使我们查看文件并查看哪些行为可以调整。每个指令都有注释，说明其默认行为是什么。'
- en: 'Then, we ran `freshclam` to update the scanner''s databases:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们运行了`freshclam`以更新扫描器的数据库：
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The process outputs its progress to the terminal and you may see several error
    messages. For example, it may report that it was unable to download a daily file.
    Don't panic; `freshclam` will try several mirrors. As long as it reports that
    `main.cvd`, `daily.cvd`, and `bytecode.cvd` are up to date when it's finished
    you know you have the latest definitions.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程将其进度输出到终端，您可能会看到几个错误消息。例如，它可能会报告无法下载某个每日文件。不要惊慌；`freshclam`会尝试多个镜像。只要它报告`main.cvd`、`daily.cvd`和`bytecode.cvd`在完成时是最新的，您就知道已经拥有最新的定义。
- en: 'We can run `freshclam` any time we want to make sure the definition databases
    are up to date, but it would be inconvenient to have to always run it manually.
    When launched with the `-d` argument, `freshclam` will run in the daemon mode
    and periodically check for updates throughout the day (every two hours by default).
    To keep things clean, we created a service file to run `freshclam` and registered
    it with `systemd`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随时运行`freshclam`以确保定义数据库是最新的，但每次手动运行它会不太方便。当以`-d`参数启动时，`freshclam`将在守护进程模式下运行，并定期检查更新（默认每两小时检查一次）。为了保持整洁，我们创建了一个服务文件来运行`freshclam`并将其注册到`systemd`：
- en: '[PRE49]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The `[Unit]` section defines the basic attributes of the service, such as its
    description and that it relies on a network connection. The `[Service]` section
    defines the service itself, `ExecStart` will run `freshclam` with the `-d` argument,
    `Type` lets systemd know that the process will fork and run in the background
    as a daemon, and `Restart` will have systemd monitor the service and restart it
    automatically if it crashes. The `[Install]` section defines how it will be linked
    when we run `systemctl enable`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`[Unit]`部分定义了服务的基本属性，如描述和它依赖于网络连接。`[Service]`部分定义了服务本身，`ExecStart`将运行`freshclam`并带有`-d`参数，`Type`让systemd知道该进程将分叉并在后台以守护进程方式运行，`Restart`将使systemd监控该服务，如果它崩溃，将自动重启。`[Install]`部分定义了当我们运行`systemctl
    enable`时，它将如何被链接。'
- en: Note
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The system file's content is pretty basic and can be used as a starting point
    for other custom services you write.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 系统文件的内容相当基础，可以作为您编写其他自定义服务的起点。
- en: 'Scanning files for threats is done with `clamscan`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`clamscan`扫描文件中的威胁：
- en: '[PRE50]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `-i` argument instructs the scanner to only output infected files as opposed
    to the name of every file it scans. `-r` triggers a recursive scan, descending
    into subdirectories. The path given can be an individual file to scan or a directory,
    in this case, our `home` directory:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`-i`参数指示扫描器仅输出感染的文件，而不是每个扫描的文件名。`-r`触发递归扫描，深入子目录。给定的路径可以是要扫描的单个文件或目录，在本例中是我们的`home`目录：'
- en: '![How it works...](img/image_11_005.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_11_005.jpg)'
- en: ClamAV provides a summary of its scan results
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ClamAV提供其扫描结果的总结
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can use EICAR's test files from [http://www.eicar.org/85-0-Download.html](http://www.eicar.org/85-0-Download.html)
    to verify if ClamAV is working. Read their intended use page for more information
    at [http://www.eicar.org/86-0-Intended-use.html](http://www.eicar.org/86-0-Intended-use.html).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用EICAR的测试文件，从[http://www.eicar.org/85-0-Download.html](http://www.eicar.org/85-0-Download.html)下载，来验证ClamAV是否正常工作。有关更多信息，请阅读它们的预期用途页面，网址为[http://www.eicar.org/86-0-Intended-use.html](http://www.eicar.org/86-0-Intended-use.html)。
- en: ClamAV is generally used in two ways—as a scanner to examine existing files
    to detect threats or as a filter to detect threats in a stream of data in real
    time. The easiest way to schedule a reoccurring scan is by setting up a cron job.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ClamAV通常有两种使用方式——作为扫描器检查现有文件以检测威胁，或作为过滤器实时检测数据流中的威胁。设置定期扫描的最简单方法是通过设置cron作业。
- en: 'To create a personal cron job that runs `clamav` to scan your `home` directory,
    use `crontab`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个个人的cron作业，以运行`clamav`扫描`home`目录，请使用`crontab`：
- en: '[PRE51]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`crontab` will launch your default editor for you to enter the job schedule.
    Then `crontab` will automatically activate the job after you save the schedule
    and close the file.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`crontab`将启动默认编辑器，供您输入作业计划。然后，`crontab`将在您保存计划并关闭文件后自动激活该作业。'
- en: 'An example schedule that runs `clamscan` every day at 3:00 a.m. might look
    as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一个每天凌晨3:00运行`clamscan`的示例计划可能如下所示：
- en: '[PRE52]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The first five columns specify the time when the job should run. The first column
    is the time's minutes, the second is hours, the third is the day of the month,
    the fourth is the month, and last is the day of the week when the job will run.
    `*` is used as a shorthand to indicate the entire range, thus the example will
    run every day of every month. More information can be found in the man page outlining
    the format of the `crontab` file (`man 5 crontab`).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 前五列指定作业运行的时间。第一列是分钟，第二列是小时，第三列是日期，第四列是月份，最后一列是作业运行的星期几。`*`用作简写，表示整个范围，因此该示例将每天的每个月运行。更多信息可以在`crontab`文件的格式手册页中找到（`man
    5 crontab`）。
- en: On a server system, ClamAV is often run as a real-time scanner as a mail filter.
    Messages are received by the mail server, for example Postfix, and passed off
    to ClamAV for scanning. Assuming that you're running Postfix, as discussed in
    [Chapter 9](ch09.html "Chapter 9. Managing E-mails"), *Managing E-mails*, here's
    what you'll need to do to set up ClamAV and Postfix to work together.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器系统上，ClamAV通常作为实时扫描器作为邮件过滤器运行。邮件服务器（例如Postfix）接收邮件，然后将其传递给ClamAV进行扫描。假设您正在运行Postfix，正如[第9章](ch09.html
    "第9章. 管理电子邮件")中讨论的那样，*管理电子邮件*，以下是设置ClamAV与Postfix协同工作的步骤。
- en: 'First, we need to install some additional packages. The `clamav-scanner-systemd`
    package will install the functionality we need to run `clamscan` as a daemon so
    that it''s always available and the `clamav-milter-systemd` package installs a
    mail filter that acts as a proxy between Postfix and the scanner:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装一些额外的软件包。`clamav-scanner-systemd`软件包将安装我们需要的功能，使得`clamscan`可以作为守护进程运行，这样它始终可用，而`clamav-milter-systemd`软件包则安装了一个邮件过滤器，作为Postfix和扫描器之间的代理：
- en: '[PRE53]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, edit the configuration file `/etc/clamd.d/scan.conf`. Comment out the
    `Example` line and uncomment the `LocalSocket` option:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，编辑配置文件`/etc/clamd.d/scan.conf`。注释掉`Example`行，并取消注释`LocalSocket`选项：
- en: '[PRE54]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The value given with `LocalSocket` is the socket file used by the scanner daemon
    for communicating with outside processes.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalSocket`给出的值是扫描守护进程用于与外部进程通信的套接字文件。'
- en: 'Next, edit the `/etc/mail/clamav-milter.conf` file, which is the configuration
    file for the `clamav-milter` mail filter. Comment out the `Example` line, uncomment
    the first `MilterSocket` directive, and add the `ClamdSocket` directive. The value
    for `ClamdSocket` should be the same as the `LocalSocket` in `scan.conf` but prefixed
    with `unix:` to denote that it''s a Unix socket:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑`/etc/mail/clamav-milter.conf`文件，这是`clamav-milter`邮件过滤器的配置文件。注释掉`Example`行，取消注释第一个`MilterSocket`指令，并添加`ClamdSocket`指令。`ClamdSocket`的值应与`scan.conf`中的`LocalSocket`相同，但需以`unix:`为前缀，表示这是一个Unix套接字：
- en: '[PRE55]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Start and enable the scanner daemon and the filter services:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 启动并启用扫描守护进程和过滤服务：
- en: '[PRE56]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Finally, open `/etc/postfix/main.cnf` and add an `smtpd_milters` entry which
    lets Postfix know about the filter:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开`/etc/postfix/main.cnf`并添加`smtpd_milters`条目，让Postfix知道过滤器的存在：
- en: '[PRE57]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Don''t forget to restart Postfix after updating its configuration:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Postfix配置后，别忘了重启Postfix：
- en: '[PRE58]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: See also
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with ClamAV:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有关与ClamAV合作的更多信息，请参考以下资源：
- en: ClamAV documentation ([http://www.clamav.net/documents/installing-clamav](http://www.clamav.net/documents/installing-clamav))
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClamAV文档 ([http://www.clamav.net/documents/installing-clamav](http://www.clamav.net/documents/installing-clamav))
- en: European Institute for Computer Anti-Virus Research ([http://www.eicar.org/](http://www.eicar.org/))
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧洲计算机防病毒研究所 ([http://www.eicar.org/](http://www.eicar.org/))
- en: Checking for rootkits with chkrootkit
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用chkrootkit检查rootkit
- en: In the unfortunate event that an attacker gains access to your system, one of
    the first things they'll do is try to hide their intrusion while preserving access
    for as long as possible, perhaps by installing a rootkit. A rootkit is a program
    that runs stealthily and gives the attacker administrator access. They embed themselves
    in the Linux kernel to prevent detection, and there are even rootkits that can
    hide in a system firmware's dedicated memory allowing an attacker to control the
    system even when it's powered down. This recipe shows you how to check your system
    for rootkits using chkrootkit.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不幸的是攻击者获得了系统访问权限，他们首先会做的事情之一就是隐藏自己的入侵，同时尽可能长时间地保持访问权限，可能会安装 rootkit。rootkit
    是一个潜伏在系统中的程序，攻击者通过它获得管理员权限。它们会嵌入到 Linux 内核中以防止被检测到，甚至有些 rootkit 可以隐藏在系统固件的专用内存中，让攻击者即使在系统断电时也能控制系统。本食谱展示了如何使用
    chkrootkit 检查系统是否存在 rootkit。
- en: Getting ready
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱要求使用 CentOS 系统，并且需要有效的网络连接。同时需要管理员权限，可以通过登录 `root` 账户或使用 `sudo` 来获得权限。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to use chkrootkit to check for rootkits:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 chkrootkit 检查是否存在 rootkit：
- en: 'Install the `gcc` and `glibc-static` packages that are needed to compile `chkrootkit`
    binaries:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装编译 `chkrootkit` 二进制文件所需的 `gcc` 和 `glibc-static` 软件包：
- en: '[PRE59]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Download `chkrootkit` source code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `chkrootkit` 源代码：
- en: '[PRE60]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Extract the downloaded source code archive and enter into the code''s directory:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取下载的源代码归档并进入代码目录：
- en: '[PRE61]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Run make to compile chkrootkit''s binary components:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 make 来编译 chkrootkit 的二进制组件：
- en: '[PRE62]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'chkrootkit requires `netstat` to conduct its network tests which is available
    in the `net-tools` package:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: chkrootkit 需要 `netstat` 来进行网络测试，`netstat` 包含在 `net-tools` 软件包中：
- en: '[PRE63]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Run chkrootkit to scan for rootkits:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 chkrootkit 扫描是否存在 rootkit：
- en: '[PRE64]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'chkrootkit consists of a shell script and a small collection of compiled utilities
    distributed as source code so we need to compile it. This means you''ll need a
    compiler installed on your system. Minimally, `gcc` will suffice. Also, we need
    to install the `glibc-static` package because the project''s `Makefile` builds
    a statically compiled binary—all of the binaries'' dependencies are compiled in;
    it doesn''t dynamically reference the copy of the system''s shared libraries:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: chkrootkit 由一个 shell 脚本和一小部分编译工具组成，作为源代码分发，因此需要编译。为了完成编译，你需要在系统中安装一个编译器。最基本的
    `gcc` 就足够了。此外，我们还需要安装 `glibc-static` 包，因为该项目的 `Makefile` 会构建一个静态编译的二进制文件——所有二进制文件的依赖都会被编译进去；它不会动态引用系统共享库的副本：
- en: '[PRE65]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The source code for chkrootkit is available on the project''s website. The
    link used in the recipe is a direct link to the latest source archive and is downloaded
    using `curl`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: chkrootkit 的源代码可以在项目网站上找到。食谱中使用的链接是指向最新源代码归档的直接链接，并通过 `curl` 下载：
- en: '[PRE66]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Once the download is complete, building chkrootkit''s is a matter of extracting
    the archive, entering into the newly created directory, and running `make`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，构建 chkrootkit 只需提取归档文件，进入新创建的目录并运行 `make`：
- en: '[PRE67]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: When you learned how to compile a program from source code in the *Compiling
    a program from source* recipe of [Chapter 4](ch04.html "Chapter 4. Software Installation
    Management"), *Software Installation Management*, you used the common `configure`,
    `make`, and `make install` approach. However, chkrootkit doesn't ship with a configure
    script and its `Makefile` doesn't contain an `install` target. All we need to
    do here to kick off the compilation process is invoke `make` itself.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 [第 4 章](ch04.html "第 4 章. 软件安装管理")的《从源代码编译程序》一节中学习如何从源代码编译程序时，你使用了常见的 `configure`、`make`
    和 `make install` 方法。然而，chkrootkit 并没有附带 configure 脚本，而且它的 `Makefile` 中没有包含 `install`
    目标。我们在这里需要做的，就是直接运行 `make` 来启动编译过程。
- en: 'chkrootkit runs a series of tests to check for known rootkit signatures. Some
    of these tests use its compiled utilities while others use common system utilities.
    One of its network tests checks which ports are open using `netstat`, which is
    not installed by default on CentOS but is available in the `net-tools` package.
    So, before we can use chkrootkit, we need to install this dependency:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: chkrootkit 会运行一系列测试以检查已知的 rootkit 特征。部分测试使用其编译好的工具，而其他测试则使用常见的系统工具。其中一个网络测试会使用
    `netstat` 检查哪些端口是开放的，`netstat` 在 CentOS 中默认没有安装，但可以从 `net-tools` 软件包中获取。因此，在使用
    chkrootkit 之前，我们需要先安装这个依赖：
- en: '[PRE68]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Once everything is installed, we can execute the chkrootkit script. When run
    without any arguments, chkrootkit executes all of its tests. Otherwise, we can
    specify one or more tests and only those will run. The `-l` (lowercase L) argument
    will display a list of possible tests:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，我们可以执行 chkrootkit 脚本。没有任何参数运行时，chkrootkit 会执行所有测试。否则，我们可以指定一个或多个测试，只有这些测试会运行。`-l`（小写
    L）参数将显示可能的测试列表：
- en: '[PRE69]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with chkrootkit:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下资源，了解更多关于使用 chkrootkit 的信息：
- en: The chkrootkit website ([http://www.chkrootkit.org](http://www.chkrootkit.org))
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: chkrootkit 网站（[http://www.chkrootkit.org](http://www.chkrootkit.org)）
- en: 'Chkrootkit: check your system for hidden rootkits ([https://www.youtube.com/watch?v=IdvdUv0Nsq4](https://www.youtube.com/watch?v=IdvdUv0Nsq4))'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chkrootkit：检查你的系统是否存在隐藏的 rootkit（[https://www.youtube.com/watch?v=IdvdUv0Nsq4](https://www.youtube.com/watch?v=IdvdUv0Nsq4)）
- en: Using Bacula for network backups
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Bacula 进行网络备份
- en: The fact of the matter is that we are living in a world that is becoming increasingly
    dependent on data. Also, from accidental deletion to a catastrophic hard drive
    failure, there are many threats to the safety of your data. The more important
    your data is and the more difficult it is to recreate if it were lost, the more
    important it is to have backups. So, this recipe shows you how you can set up
    a backup server using Bacula and how to configure other systems on your network
    to backup their data to it.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们生活在一个越来越依赖数据的世界中。此外，从意外删除到灾难性的硬盘故障，数据安全面临着许多威胁。你的数据越重要，如果丢失后再创建越困难，那么备份就越重要。因此，本教程将向你展示如何使用
    Bacula 设置备份服务器，并配置网络中的其他系统将它们的数据备份到此服务器。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires at least two CentOS systems with working network connections.
    The first system is the local system which we'll assume has the hostname `benito`
    and the IP address `192.168.56.41`. The second system is the backup server. You'll
    need administrative access on both systems, either by logging in with the `root`
    account or through the use of `sudo`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求至少有两台具有有效网络连接的 CentOS 系统。第一台是本地系统，我们假设它的主机名为 `benito`，IP 地址为 `192.168.56.41`。第二台是备份服务器。你需要在这两台系统上都有管理员权限，可以使用
    `root` 账户登录或通过 `sudo` 使用权限。
- en: How to do it...
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps on your local system to install and configure the
    Bacula file daemon:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地系统上执行以下步骤以安装和配置 Bacula 文件守护进程：
- en: 'Install the `bacula-client` package:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `bacula-client` 包：
- en: '[PRE70]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Open the file daemon''s configuration file with your text editor:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开文件守护进程的配置文件：
- en: '[PRE71]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In the `FileDaemon` resource, update the value of the `Name` directive to reflect
    the system''s hostname with the suffix `-fd`:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FileDaemon` 资源中，更新 `Name` 指令的值，以反映系统的主机名，并加上后缀 `-fd`：
- en: '[PRE72]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Save the changes and close the file.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Start the file daemon and enable it to start when the system reboots:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动文件守护进程，并设置为系统重启时自动启动：
- en: '[PRE73]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Open the firewall to allow TCP traffic through to port `9102`:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开防火墙，允许 TCP 流量通过端口 `9102`：
- en: '[PRE74]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Repeat steps 1-6 on each system that will be backed up.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个需要备份的系统上重复步骤 1-6。
- en: Perform the following steps on the system designated as the backup server to
    install and configure the Bacula director, storage, and file daemons.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定为备份服务器的系统上执行以下步骤，安装和配置 Bacula 主控、存储和文件守护进程。
- en: 'Install the `bacula-console`, `bacula-director`, `bacula-storage`, and `bacula-client`
    packages:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `bacula-console`、`bacula-director`、`bacula-storage` 和 `bacula-client` 包：
- en: '[PRE75]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Re-link the catalog library to use SQLite database storage:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新链接目录库以使用 SQLite 数据库存储：
- en: '[PRE76]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Type 2 when asked to provide the selection number.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示提供选择编号时，输入 2。
- en: 'Create the SQLite database file and import the table schema:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 SQLite 数据库文件并导入表格架构：
- en: '[PRE77]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Open the director''s configuration file with your text editor:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开主控配置文件：
- en: '[PRE78]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'In the `Job` resource where `Name` has the value `BackupClient1`, change the
    value of the `Name` directive to reflect one of the local systems. Then add a
    `Client` directive with a value that matches that system''s `FileDaemon``Name`:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Job` 资源中，`Name` 的值为 `BackupClient1`，将 `Name` 指令的值更改为本地系统的名称。然后添加一个 `Client`
    指令，值与该系统的 `FileDaemon` `Name` 相匹配：
- en: '[PRE79]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Duplicate the `Job` resource and update its directive values as necessary so
    that there is a `Job` resource defined for each system to be backed up.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 `Job` 资源，并根据需要更新其指令值，以便为每个需要备份的系统定义一个 `Job` 资源。
- en: 'For each system that will be backed up, duplicate the `Client` resource where
    the `Name` directive is set to `bacula-fd`. In the copied resource, update the
    `Name` and `Address` directives to identify that system:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个需要备份的系统，复制`Client`资源，其中`Name`指令设置为`bacula-fd`。在复制的资源中，更新`Name`和`Address`指令以标识该系统：
- en: '[PRE80]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Save your changes and close the file.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Open the storage daemon''s configuration file:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开存储守护进程的配置文件：
- en: '[PRE81]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'In the `Device` resource where `Name` has the value `FileStorage`, change the
    value of the `Archive Device` directive to `/bacula`:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Device`资源中，`Name`为`FileStorage`的条目，将`Archive Device`指令的值更改为`/bacula`：
- en: '[PRE82]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Save the update and close the file.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更新并关闭文件。
- en: 'Create the `/bacula` directory and assign it the proper ownership:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`/bacula`目录并分配适当的所有权：
- en: '[PRE83]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'If you have SELinux enabled, reset the security context on the new directory:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了SELinux，请重置新目录的安全上下文：
- en: '[PRE84]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Start the director and storage daemons and enable them to start when the system
    reboots:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动管理程序和存储守护进程，并使它们在系统重启时自动启动：
- en: '[PRE85]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Open the firewall to allow TCP traffic through to ports `9101-9103`:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开防火墙，允许TCP流量通过端口`9101-9103`：
- en: '[PRE86]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Launch Bacula''s console interface:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Bacula的控制台界面：
- en: '[PRE87]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Enter `label` to create a destination for the backup. When prompted for the
    volume name, use `Volume0001` or a similar value. When prompted for the pool,
    select the `File` pool:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`label`创建备份的目标。在提示输入卷名称时，使用`Volume0001`或类似的值。当提示选择池时，选择`File`池：
- en: '[PRE88]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Enter `quit` to leave the console interface.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`quit`退出控制台界面。
- en: How it works
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Configuring Bacula can be a daunting task for the most part because of the suite's
    distributed architecture and the level of flexibility it offers in organizing
    and scheduling backup and restore jobs. However, once everything is up and running,
    I'm sure you'll have peace of mind knowing that your data is safe from accidents
    and disasters.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Bacula大多数时候可能是一个令人生畏的任务，因为该套件的分布式架构以及在组织和调度备份与恢复作业方面提供的灵活性。然而，一旦一切都顺利运行，我相信你会放心，因为你知道你的数据已经远离意外和灾难的风险。
- en: Bacula is made up of several components. In this recipe, our efforts were centered
    on three daemons—the director, the file daemon, and the storage daemon. The file
    daemon is installed on each of the client systems to be backed up and listens
    for connections from the director. The director connects to each file daemon as
    scheduled and tells it which files to backup and where to copy them to (the storage
    daemon). The storage daemon receives the backed up data and writes it to the backup
    medium, for example, the disk or tape drive.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: Bacula由多个组件组成。在这个例子中，我们的重点是三个守护进程——管理程序、文件守护进程和存储守护进程。文件守护进程安装在每个需要备份的客户端系统上，并监听来自管理程序的连接。管理程序按计划连接到每个文件守护进程，并告诉它备份哪些文件以及将其复制到哪里（存储守护进程）。存储守护进程接收备份的数据，并将其写入备份介质，例如磁盘或磁带驱动器。
- en: 'First, we installed the file daemon with the `bacula-client` package on our
    client systems. Then we edited the file daemon''s configuration file found at
    `/etc/bacula/bacula-fd.conf` to specify the name of the process. The convention
    is to add the suffix `-fd` to the system''s hostname:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在客户端系统上使用`bacula-client`软件包安装了文件守护进程。然后，我们编辑了位于`/etc/bacula/bacula-fd.conf`的文件守护进程配置文件，以指定进程的名称。约定是将系统主机名后缀添加`-fd`：
- en: '[PRE89]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: After the update is made to the configuration, we started the service and opened
    the appropriate port in the system firewall. The file daemon is now listening,
    waiting for the director to connect and tell it what it needs to do.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新配置后，我们启动了服务并在系统防火墙中打开了适当的端口。文件守护进程现在正在监听，等待管理程序连接并告诉它需要执行的操作。
- en: 'On the backup server, we installed the `bacula-director`, `bacula-storage`,
    and `bacula-client` packages. This gives us the director and storage daemon, and
    another file daemon. The file daemon''s purpose here on the backup server is to
    backup Bacula''s catalog:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在备份服务器上，我们安装了`bacula-director`、`bacula-storage`和`bacula-client`软件包。这为我们提供了管理程序和存储守护进程，以及另一个文件守护进程。文件守护进程在备份服务器上的作用是备份Bacula的目录：
- en: '![How it works](img/image_11_006.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的](img/image_11_006.jpg)'
- en: This image reproduced from Bacula's documentation shows how the different applications
    relate to one another
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 这张从Bacula文档中复制的图像展示了不同应用程序之间的关系：
- en: Bacula maintains a database of metadata about previous backup jobs called the
    catalog, which can be managed by MySQL, PostgreSQL, or SQLite. SQLite is an embedded
    database library, meaning the program using it links against the SQLite library
    and manages its own database files. To support multiple databases, Bacula's code
    is written so that all the database access routines are contained in separate
    shared libraries with a different library for each database. Then, when Bacula
    wants to interact with a database, it does so through `libbaccats.so`, a *fake*
    library that is nothing more than a symbolic link pointing to one of the specific
    database libraries. This let's Bacula support different databases without requiring
    us to recompile its source code.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: Bacula 维护了一个关于之前备份任务的元数据数据库，称为目录，它可以由 MySQL、PostgreSQL 或 SQLite 管理。SQLite 是一个嵌入式数据库库，意味着使用它的程序会链接到
    SQLite 库并管理自己的数据库文件。为了支持多个数据库，Bacula 的代码编写方式使得所有数据库访问程序都包含在不同的共享库中，每个数据库都有一个不同的库。然后，当
    Bacula 想要与数据库交互时，它通过 `libbaccats.so` 进行，这个 *假* 库实际上只是一个指向特定数据库库的符号链接。这样，Bacula
    就能在不需要重新编译源代码的情况下支持不同的数据库。
- en: 'To create the symbolic link, we used `alternatives` and select the real library
    that we want to use:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建符号链接，我们使用了 `alternatives` 并选择了我们想要使用的真实库：
- en: '[PRE90]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Then, we initialized the database''s schema using the scripts that come with
    Bacula:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用随 Bacula 附带的脚本初始化了数据库的模式：
- en: '[PRE91]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '![How it works](img/image_11_007.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![How it works](img/image_11_007.jpg)'
- en: Bacula supports multiple databases without recompiling
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: Bacula 支持多个数据库而无需重新编译
- en: Note
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This recipe took advantage of Bacula''s SQLite support because it''s convenient
    and doesn''t require additional effort to set up. If you want to use MySQL, install
    MySQL as discussed in [Chapter 7](ch07.html "Chapter 7. Working with Databases"),
    *Working with Databases*, create a dedicated MySQL user for Bacula to use, and
    then initialize the schema with the following scripts:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案利用了 Bacula 的 SQLite 支持，因为它方便且不需要额外的设置工作。如果你想使用 MySQL，请按照 [第 7 章](ch07.html
    "第 7 章. 使用数据库")，*使用数据库* 中的说明安装 MySQL，创建一个专门供 Bacula 使用的 MySQL 用户，然后使用以下脚本初始化模式：
- en: '[PRE92]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: You'll also need to review Bacula's configuration files to provide Bacula with
    the required MySQL credentials.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要查看 Bacula 的配置文件，以便为 Bacula 提供所需的 MySQL 凭证。
- en: Different resources are defined in the director's configuration file at `/etc/bacula/bacula-dir.conf`,
    many of which consist not only of their own values but also reference to other
    resources. For example, the `FileSet` resource specifies which files are included
    or excluded in backups and restores, while a `Schedule` resource specifies when
    backups should be made. A `JobDef` resource can contain various configuration
    directives that are common to multiple backup jobs and also reference particular
    `FileSet` and `Schedule` resources. `Client` resources identify the names and
    addresses of systems running file daemons, and a `Job` resource will pull together
    a `JobDef` and `Client` resource to define the backup or restore task for a particular
    system. Some resources define things at a more granular level and are used as
    building blocks to define other resources, creating complex definitions in a flexible
    manner.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的资源在导演的配置文件 `/etc/bacula/bacula-dir.conf` 中定义，其中许多资源不仅包含它们自己的值，还引用其他资源。例如，`FileSet`
    资源指定备份和恢复时包含或排除的文件，而 `Schedule` 资源指定何时进行备份。`JobDef` 资源可以包含多个备份任务共用的配置指令，并且还引用特定的
    `FileSet` 和 `Schedule` 资源。`Client` 资源标识运行文件守护进程的系统的名称和地址，而 `Job` 资源将 `JobDef`
    和 `Client` 资源组合起来，定义特定系统的备份或恢复任务。某些资源在更细粒度的级别上定义内容，并作为构建其他资源的基础，从而灵活地创建复杂的定义。
- en: Tip
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The default resource definitions define basic backup and restore jobs sufficient
    for this recipe. You'll want to study the configuration and see how the different
    resources fit together so you can tweak them to better suit your backup needs.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的资源定义定义了足够的基本备份和恢复任务，适用于此方案。你应该研究配置，了解不同资源如何协同工作，以便根据你的备份需求进行调整。
- en: '![How it works](img/image_11_008.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![How it works](img/image_11_008.jpg)'
- en: This image, reproduced from Bacula's documentation shows, how the different
    resources relate to one another
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片摘自 Bacula 的文档，展示了不同资源之间的关系。
- en: 'To get started, we customized the existing backup `Job` by changing its name
    and client. Then we customized the existing `Client` resource by changing its
    name and address to point to a specific system running a file daemon. The pair
    of `Job` and `Client` resources were duplicated, a pair for each system we''re
    backing up. Notice that we also left a default `Client` resource that defines
    `bacula-fd` for the localhost. This is the file daemon that''s local to the backup
    server and will be the target for things such as restore jobs and catalog backups:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们通过更改名称和客户端定制了现有的备份`Job`。然后我们通过更改名称和地址，将现有的`Client`资源定制为指向特定的运行文件守护进程的系统。`Job`和`Client`资源的配对被复制，为我们要备份的每个系统都创建了一对。请注意，我们还保留了一个默认的`Client`资源，定义了本地主机的`bacula-fd`。这是本地备份服务器上的文件守护进程，将作为恢复作业和目录备份等操作的目标：
- en: '[PRE93]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Tip
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you have a lot of client systems or a lot of job definitions, you can stay
    better organized by defining these resources in their own files and read them
    into `bacula-dir.conf`. Create the directory `/etc/bacula/config.d`, and place
    the individual configuration files there. Then add the following line to `bacula-dir.conf`
    to read them:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多客户端系统或许多作业定义，可以通过将这些资源定义在各自的文件中，并将它们读入`bacula-dir.conf`，以便更好地组织。创建目录`/etc/bacula/config.d`，并将单独的配置文件放在该目录下。然后在`bacula-dir.conf`中添加以下行以读取它们：
- en: '`**@|"find /etc/bacula/config.d -name ''*.conf'' f -exec echo @{} \;"**`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`**@|"find /etc/bacula/config.d -name ''*.conf'' f -exec echo @{} \;"**`'
- en: To complete the setup, we need to label a backup volume. This task, as with
    most others, is performed through `bconsole`, a console interface to the Bacula
    director.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成设置，我们需要为备份卷打标签。这个任务和其他大多数任务一样，是通过`bconsole`完成的，`bconsole`是Bacula控制台接口。
- en: We used the `label` command to define a label for the backup volume, and when
    prompted for the pool, we assigned the labeled volume to the `File` pool. In a
    way very similar to how logical volumes work (refer to [Chapter 5](ch05.html "Chapter 5. Managing
    Filesystems and Storage"), *Managing Filesystems and Storage*), an individual
    device or storage unit is allocated as a volume and the volumes are grouped into
    storage pools. If a pool contains two volumes backed by tape drives for example,
    and one of the drives is full, the storage daemon will write the backup data to
    the tape that has space available. Even though in our configuration we're storing
    the backup to disk, we still need to create a volume as the destination for data
    to be written to.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`label`命令为备份卷定义了一个标签，当被提示选择池时，我们将标签卷分配到`File`池中。与逻辑卷的工作方式非常相似（参见[第5章](ch05.html
    "第5章 管理文件系统和存储")，*管理文件系统和存储*），单个设备或存储单元被分配为一个卷，并且这些卷被分组到存储池中。例如，如果一个池包含两个由磁带驱动器支持的卷，而其中一个驱动器已满，则存储守护进程会将备份数据写入有空闲空间的磁带上。即使在我们的配置中，我们将备份存储到磁盘，但仍然需要创建一个卷作为数据写入的目标。
- en: At this point, you should consider which backup strategy works best for you.
    A full backup is a complete copy of your data, a differential backup captures
    only the files that have changed since the last full backup, and an incremental
    backup copies the files that have changed since the last backup (regardless of
    the type of backup). Commonly, administrators employ a combination of these, perhaps
    making a full backup at the start of the week and then differential or incremental
    backups each day thereafter. This saves storage space because the differential
    and incremental backups are smaller and also convenient when the need to restore
    a file arises, because a limited number of backups need to be searched for the
    file.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你应该考虑哪种备份策略最适合你。完全备份是数据的完整副本，增量备份仅捕获自上次完全备份以来发生变化的文件，差异备份则仅捕获自上次完全备份以来发生变化的文件（无论备份类型如何）。通常，管理员会采用这些备份策略的组合，例如在每周开始时进行完全备份，然后每天进行差异备份或增量备份。这样可以节省存储空间，因为差异备份和增量备份较小，并且在需要恢复文件时也非常方便，因为只需要搜索少量备份就能找到文件。
- en: Another consideration is the expected size of each backup and how long it will
    take for the backup to run to completion. Full backups obviously take longer to
    run, and in an office with 9-5 working hours, Monday through Friday, it may not
    be possible to run a full backup during the evenings. Performing a full backup
    on Fridays gives the backup time over the weekend to run. Smaller, incremental
    backups can be performed on the other days when time is lesser.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个考虑因素是每次备份的预期大小以及备份完成所需的时间。全量备份显然需要更长的时间，在一个9到5的工作时间的办公室（周一至周五），晚上可能无法进行全量备份。在周五进行全量备份可以利用周末的时间进行备份。较小的增量备份可以在其他时间进行，当时间较少时。
- en: Still another point that is important in your backup strategy is how long the
    backups will be kept and where they will be kept. This touches on a larger issue,
    disaster recovery. If your office burns down, a year's worth of backups will be
    of no use if they were sitting in the office's IT closet. At one employer, we
    kept the last full backup and last day's incremental on a disk on site. These
    were then duplicated to tape and shipped off site.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在备份策略中需要注意的重要点是备份会保存多久以及保存的位置。这涉及到更大的问题——灾难恢复。如果你的办公室发生火灾，一年的备份将毫无用处，如果它们仍保存在办公室的
    IT 机房中。在我曾工作的一个地方，我们将最后的全量备份和最后一天的增量备份保存在本地磁盘上，然后将它们复制到磁带并运送到异地。
- en: Regardless of the strategy you choose to implement, your backups are only as
    good as your ability to restore data from them. You should periodically test your
    backups to make sure you can restore your files.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择实施什么样的策略，你的备份的有效性取决于你从备份中恢复数据的能力。你应该定期测试备份，以确保你能恢复文件。
- en: To run a backup job on demand, enter `run` in `bconsole`. You'll be prompted
    with a menu to select one of the current configured jobs. You'll then be presented
    with the job's options, such as what level of backup will be performed (full,
    incremental, or differential), it's priority, and when it will run. You can type
    `yes` or `no` to accept or cancel it or `mod` to modify a parameter. Once accepted,
    the job will be queued and assigned a job ID.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 要按需运行备份任务，在 `bconsole` 中输入 `run`。系统将提示你从当前配置的任务中选择一个。然后，你将看到该任务的选项，例如将执行哪种级别的备份（全量、增量或差异备份），优先级以及何时运行。你可以输入
    `yes` 或 `no` 来接受或取消它，或者输入 `mod` 来修改某个参数。接受后，任务将排队并分配一个任务 ID。
- en: To restore files from a backup, use the `restore` command. You'll be presented
    with a list of options allowing you to specify which backup the desired files
    will be retrieved from. Depending on your selection, the prompts will be different.
    Bacula's prompts are rather clear, so read them carefully and it will guide you
    through the process.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 要从备份中恢复文件，请使用 `restore` 命令。系统将提供一系列选项，允许你指定要从哪个备份中恢复所需的文件。根据你的选择，提示会有所不同。Bacula
    的提示信息非常清晰，所以仔细阅读它们，它会引导你完成整个过程。
- en: Apart from the `run` and `restore` commands, another useful command is `status`.
    It will allow you to see the current status of the Bacula components, if there
    are any jobs currently running, and which jobs have completed. A full list of
    commands can be retrieved by typing `help` in `bconsole`.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `run` 和 `restore` 命令外，另一个有用的命令是 `status`。它允许你查看 Bacula 组件的当前状态，是否有任何正在运行的任务，以及哪些任务已完成。你可以通过在
    `bconsole` 中输入 `help` 来获取所有命令的完整列表。
- en: '![How it works](img/image_11_009.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的](img/image_11_009.jpg)'
- en: bconsole is a console interface to the Bacula director
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`bconsole` 是 Bacula director 的控制台界面'
- en: See also
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'Refer to the following resources for more information on working with Bacula:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下资源获取有关使用 Bacula 的更多信息：
- en: Bacula documentation ([http://blog.bacula.org/documentation/](http://blog.bacula.org/documentation/))
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bacula 文档 ([http://blog.bacula.org/documentation/](http://blog.bacula.org/documentation/))
- en: How to use Bacula on CentOS 7 ([https://www.digitalocean.com/community/tutorial_series/how-to-use-bacula-on-centos-7](https://www.digitalocean.com/community/tutorial_series/how-to-use-bacula-on-centos-7))
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 CentOS 7 上使用 Bacula ([https://www.digitalocean.com/community/tutorial_series/how-to-use-bacula-on-centos-7](https://www.digitalocean.com/community/tutorial_series/how-to-use-bacula-on-centos-7))
- en: Bacula-Web (a web-based reporting and monitoring tool for Bacula) ([http://www.bacula-web.org/](http://www.bacula-web.org/))
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bacula-Web（Bacula 的基于 Web 的报告和监控工具） ([http://www.bacula-web.org/](http://www.bacula-web.org/))
