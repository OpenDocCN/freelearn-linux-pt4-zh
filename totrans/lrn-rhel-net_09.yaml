- en: Chapter 9. Deploying the Apache HTTPD Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Hypertext Transfer Protocol** (**HTTP**) server will be commonly referred
    to as a web server. As the name suggests, this is a network service that provides
    content to a client, typically a web browser, on the Internet. This typically
    means delivery of web pages, but any other documents can be served, such as images,
    sound, video, and even ISO files for RHEL.
  prefs: []
  type: TYPE_NORMAL
- en: The web server packaged on RHEL 7 is the Apache `httpd` service. This is the
    most common web server found on the Internet and developed by the Apache Software
    Foundation. RHEL has updated `httpd` to version 2.4, replacing the 2.2 release
    that has been in use in previous editions of RHEL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the `httpd` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the `httpd` service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding server modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using virtual hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the httpd service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apache `httpd` web server can serve pages to clients on the Internet or
    locally on our internal intranet, so don't feel that you will have to necessarily
    ramp up security if you are deploying a web server. Of course, if the website
    is to be facing the Internet, additional security and isolation of this service
    may be required. However, we are working in a lab environment and will focus more
    on the configuration of the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache 2.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The required packages are unlikely to be installed by default, so we will need
    to at least add the `httpd` package. Additionally, you may like to add the documentation.
    Consider only adding the documentation to a development server; I would not recommend
    adding it to a production server. We will add both packages to a server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Even at this stage, with so little effort added, we can start our service and
    browser to the web server using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have a graphic environment, we can use Firefox from our local system
    to browse the localhost. We will be rewarded with a welcome page similar to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Apache 2.4](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Although I would like to think that my work here is done; somehow, I feel that
    you may just want a little more guidance.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration base for the `httpd` service on RHEL 7 is the `/etc/httpd`
    directory. With the `tree` command, we can effectively illustrate the configuration
    hierarchy or service. The single configuration required here is `httpd.conf`,
    but Red Hat is taking a much more modular approach and now includes many sub-configurations
    to the main file. The following screenshot from the output of the tree shows all
    files in place after the default installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The configuration](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the preceding tree is not installed, it can be installed using `sudo yum
    install tree`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tree` command has been run from the `/etc/httpd` directory. We can see
    the `/etc/httpd/conf/httpd.conf` file, which is the main configuration file. This
    includes other files from `/etc/httpd/conf.d` and `/etc/httpd/conf.modules.d`.
    Also, there are three symbolically linked directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`logs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modules`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content of a page that we see when we browse through a site comes from the
    configuration in `/etc/httpd/conf.d/welcome.conf`. When no actual website content
    exists, the default welcome page is generated.
  prefs: []
  type: TYPE_NORMAL
- en: With the inclusion of the `userdir.conf` and `autoindex.conf` files, the separate
    modules configuration is very different from the `httpd` configuration on RHEL
    6, where these were all part of the main `httpd.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already mentioned that the configuration root of the web server is
    the `/etc/httpd` directory. The configuration for this is in the `/etc/httpd/conf/httpd.conf`
    file. Some of the key directives from this file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ServerRoot`: `/etc/httpd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DocumentRoot`: `/var/www/html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DirectoryIndex`: `index.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ServerRoot` directive, as we have seen is where we can locate configurations,
    logs, and modules for the web server. The `DocumentRoot` directive represents
    where the web content can be found, whereas the `DirectoryIndex` HTML page is
    the default page or pages to search for. Using `echo`, we can simply create our
    own content as follows. We run the following command as root and create a very
    basic welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The use of single quotes allow tags to be passed as literals.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view a page directly; as we have not changed any configuration, there
    is no need to reload a service. The page should now appear similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The configuration](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can access this site locally or remotely using the hostname or IP address.
    We can access the same page using `http://192.168.0.69`, (or which ever IP Address
    is assigned to your host interface). To access a page remotely, the firewall will
    need to include `http` and `https` in its `firewalld` rules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we open the HTTP port of port `80` and the HTTPS port
    of `443`. These are protocols and default ports used to access web servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As an administrator of the web server, we are not necessarily going to be the
    developer on the web content, but we can show that the web server is working with
    the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the DocumentRoot directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `DocumentRoot` directory should be readable by the `httpd` service. The
    account used by a service is listed in the `httpd.conf`. Default accounts that
    are used with corresponding directives are shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In an ideal world, the permissions on the `/var/www/html` directory would be
    `2750` in an octal notation or `rwx r_s _` in a symbolic notation. Setting up
    a group special bit on a directory ensures that all new content in a directory
    will be owned by the group owner of the directory. In this way, we do not have
    to grant any permission to others; as long as the directory is owned by the `apache`
    group, files will be accessible to that group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will set up the group ownership for this directory. We will use
    the `-R` option as we have already created the `index` page after this directory,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will set up the group special bit on the directory; this ensures all
    new files and directories created in this structure will be owned by the `apache`
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will remove permissions granted to others, helping secure the content
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Although this is not entirely necessary, configuring this at the outset can
    save work later when perhaps better security is required. With the `httpd.conf`,
    we also have a directory block that configures the access and options for the
    `DocumentRoot`. The following screenshot shows the directory block associated
    with the `DocumentRoot` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the DocumentRoot directory](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Directory` block appears similar to an XML-based data. This uses an opening
    tag and sets the target directory therein. This block is closed with the `</Directory>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `Indexes` option allows the creation of an index page. This option lists
    the contents of a directory if the name of a page is not included in the URL accessed
    by a client and no `index.html` exists. This is perhaps great for a downloads
    directory, alleviating the need for you to create a page linking it to all the
    available downloads; however, at `DocumentRoot`, we probably do not want this
    setting because it may pose a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: The `FollowSymLinks` option is probably self-explanatory, which allows you to
    follow the path of symbolic links. Symbolic links are pointers to other files
    and directories in a filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AllowOverride` directive specifies settings that can be used from the
    user control `.htaccess` file. It may be the case with virtual hosts that the
    administrator does not have access to the web server''s configuration file because
    they are just renting space on the web server. They can effect configurations
    by uploading an `.htaccess` file to the root of the directory to which the `Directory`
    block pertains. As the main server administrator, you can control the settings
    that can be read; here, we allow no settings to be read even if the `.htaccess`
    file is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The final setting here is new to Apache 2.4 and replaces the `Allow from /
    Deny from` directive in Apache 2.2 and earlier versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The default setting is equivalent to the `Allow from all` setting in Apache
    2.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'If required, you can adjust the host access with a configuration similar to
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding access control will only allow access to the localhost and the
    `192.168.0` network to the associated `Directory` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will change the configuration setting by editing the `/etc/httpd/conf/httpd.conf`
    file. Once we locate the correct `Directory` block for `/var/www/html`, we will
    remove the `Index` option and leave it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These changes should be saved, but we need to look at how we can check our settings
    before attempting to restart the server.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Apache web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we are ready to test the changes made, we can perform a pre-flight check
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You may receive an error message reporting that the hostname could not be resolved.
    This is a warning and is okay for the moment. The warning is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the Apache web service](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Syntax Ok` message at the end is what we want to see; with this, we know
    that we can restart the web server. Issuing a `reload` command to the service
    will force a graceful restart; wait for the active connections to complete before
    the restart is initiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The effect of the change is limited because we have allowed the local network
    access and the localhost. Removing the `indexes` option has no effect while the
    `index.html` page is present. If we remove the `index.html` page, we will receive
    access forbidden messages because the system will not generate the page. This
    is important to set because it removes the ability of hackers to be able to retrieve
    directory listings of our web server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the server name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also need to tidy up the warning about our server''s name. This is controlled
    using the `ServerName` directive in the `httpd.conf`. Adding the `ServerName`
    directive at the top of the file will resolve the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To completely restart the service, we will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a custom error page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we try to access a page on the server that does not exist, the viewer will
    get a standard `page not found` message. We can make the process a little more
    controlled and user-friendly by adding our own custom pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the global section of the `httpd.conf`, we can add the following directive
    to handle the `404 Page Not Found` message. This global section can affect all
    directory blocks, but we can add the following directive just to a single directory
    block if required. Adding the code document for a 404 error will just affect that
    particular error, but we can add other codes as and when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can reload the server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when an incorrect page is accessed, the viewer will be shown the custom
    error page we have created: `404.html`. This page should be created in the `DocumentRoot`
    because we have used the `/404.html` syntax. If we have many custom pages, we
    will most likely create an `error` directory in `DocumentRoot` and then reference
    the page as `/error/404.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Loading modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Red Hat has moved away from loading modules in the standard `httpd.conf` file.
    In the previous release of Red Hat (version 6), the configuration file would have
    been littered with many `LoadModule` directives.
  prefs: []
  type: TYPE_NORMAL
- en: These modules are now loaded via the configuration files in `/etc/httpd/conf.modules.d/`.
    In this way, the main configuration file is less cluttered and it's easier to
    drop additional configuration files as and when required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the currently loaded modules from Command Prompt, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that we have many modules loaded. We can pipe the output to the
    `wc` command to count the lines. Using the RHEL 7.1 demonstration system, the
    output is `82`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With the original output, we should be able to see that the `userdir_module`
    is loaded. If we do not need to support user home directories on the web server,
    we do not need this module. To load this module, the `LoadModule` directive referencing
    this Apache module is set in the `/etc/httpd/conf.modules.d/00-base.conf` file.
    To ensure that it is not loaded on future restarts of the web server, comment
    the line that reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With the line now commented, you will need to restart the web server, but when
    you check the loaded modules, you should be able to verify that the `userdir_module`
    is not loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apache has the capability to support multiple sites from the same server instance.
    This gives great flexibility, and at the same time, ease of management. This flexibility
    is known as virtual hosting. There are three basic ways of running virtual hosting
    with Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name-based** | This uses different names for each site and a common IP
    address, probably the most popular form of virtual hosting |'
  prefs: []
  type: TYPE_TB
- en: '| **IP-based** | This uses a different IP address for each site |'
  prefs: []
  type: TYPE_TB
- en: '| **Port-based** | This uses individual port numbers for each site |'
  prefs: []
  type: TYPE_TB
- en: We will look at all three of the methods and configurations within the `httpd.conf`
    required to implement each method.
  prefs: []
  type: TYPE_NORMAL
- en: Name-based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Name-based virtual hosting has been made possible with the introduction of
    HTTP protocol version 1.1, also known as HTTP/1.1\. When a browser is only capable
    of HTTP/1.0, a protocol tries to load a web page; it goes through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Resolves `theurbanpinguin.org` hostname to an IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connects to the resolved IP address over TCP protocol and port `80`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests `/index.html` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Therefore, only one website (defined by its domain name) can be hosted at any
    given IP address. If you direct another domain name—such as `theboldeagle.net`—to
    the same IP address, a user navigating to a URL will see exactly the same as the
    user navigating to URL because the web server cannot distinguish between these
    two requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the HTTP/1.1 protocol and the HTTP/1.1 capable browser sends a domain
    name to the web server along with the document path, this is how the next step
    (step 3) looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Request `/index.html` page from `theurbanpinguin.org` server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's now possible to host two or more different sites on the same IP address
    because the web server can distinguish between different domain names, as domain
    names now form a part of the HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: All contemporary web browsers support HTTP/1.1\. There are two aspects to name-based
    virtual hosting, which we will now look at.
  prefs: []
  type: TYPE_NORMAL
- en: The name resolution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the names for a site need to be mapped to the same IP address either via
    DNS or a localhost file. If any of the names are used in the system, the returned
    IP address will always be the same. The redirection of the incoming request to
    the correct location in the filesystem is handled by the `httpd` service and the
    incoming `http` header.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The key to name-based virtual hosting lies in the `httpd.conf` file in a block
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Almost any Apache entry is valid here including the `ErrorDocument` directive
    that we saw earlier. We have included the most typical entries in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding example, we will be directed to the web pages in `/var/www/packt/html`,
    if we use the URL of [https://www.packtpub.com/](https://www.packtpub.com/) while
    accessing the server's IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Apache to find the correct entries for virtual hosts, we must
    tell it which IP address they are aliases for. However, it''s not enough to define
    a virtual host using the previous block because Apache does not allow name-based
    virtual hosting by default. To make name-based virtual hosts work, this is done
    using the `NameVirtualHost` directive, which needs to be included in the `httpd.conf`
    file. This directive must be in the main server section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: IP-based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The IP addresses used must be bound to the main RHEL server. Within the Apache
    `httpd.conf`, we again use the `VirtualHost` block, but we do not need to set
    the `NameVirtualHost` directive. Instead of specifying `*:80` as IP and port selectors
    of `VirtualHost` block, we will use a real IP address that the Apache server listens
    to, that is, IP address assigned to one of the interfaces of the machine that
    the Apache server is running on. The following commands show a possible configuration
    we can add to the main `httpd.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Apache listens for incoming connections on all interfaces of the machine by
    default, so it should be enough just to specify an IP address of one of the interfaces
    in the `<VirtualHost>` opening directive. However, to be doubly sure that Apache
    listens to the right interface, the following command should be included in the
    main section of the `httpd.conf` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Using the previous example, when we access the host with the IP address `192.168.0.221`,
    we will be redirected to web pages in `/var/www/example/html`.
  prefs: []
  type: TYPE_NORMAL
- en: Port-based
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is only one aspect to port-based virtual hosting: the Apache configuration
    with the main `httpd.conf`. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using the previous example, when we access the port `7070` on the Apache host
    with the IP address of `192.168.0.220`, we will be redirected to web pages in
    `/var/www/example/html`.
  prefs: []
  type: TYPE_NORMAL
- en: Within all `VirtualHost` blocks, we can expect a `Directory` block in addition
    to the code we have shown so far. In this way, options and access control lists
    can be correctly set for each virtual host.
  prefs: []
  type: TYPE_NORMAL
- en: Automating virtual hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we create a template file for a virtual host, we can easily drop new virtual
    hosts using a script. First, we need a template file that is similar to the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If this file is saved as `/etc/httpd/conf.d/template`, it will not be used
    as a configuration as it does not end in `.conf`. We can use it as a template
    with a script similar to the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script is called `/root/vhost.sh`, we can run it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The preceding script will create a new configuration and replace `dummy-host.example.com`
    with `www.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to the Apache HTTPD service that runs on RHEL 7.1\.
    We looked at the `ServerRoot` being `/etc/httpd` and the `DocumentRoot` being
    `/var/www/html`. With the basics in place, you learned how to configure a server
    with custom error pages and virtual hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at SELinux in detail and try to leave you
    with the idea that you can implement SELinux without affecting your service delivery
    in a negative way. In fact, the word negative is far from the truth. SELinux will
    deliver you a secure and robust platform so that you can deploy public-facing
    services without any fear of compromise, adding **Mandatory Access Controls**
    (**MAC**) to the existing, but weaker **DAC** (**Discretionary Access Controls**).
  prefs: []
  type: TYPE_NORMAL
