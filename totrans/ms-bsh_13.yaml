- en: Its Time for a Timer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时器的时间
- en: 'Having had a peek into daemons and SSH tunnels, dealing with `cronjob` could
    look like a humble task, but let''s think for a while about our daily routine:
    how many times do we need to schedule a job to be executed in a specific time
    frame, maybe late at night or while we are on vacation? How many times do we need
    a certain task to be executed every day at a precise hour, every single day? Do
    we really want to stay up late at night or give up our vacations, or more importantly,
    can we be sure we will always be available to run a task every day at the same
    hour? Simply, we can''t be. So, a method to schedule jobs and have them executed
    when needed, everytime it is needed, can be humble, but it is what makes a system
    easier to manage and saves us a lot of headaches.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解守护进程和SSH隧道之后，处理`cronjob`可能看起来像是一项简单的任务，但让我们稍作思考：我们的日常生活中有多少次需要安排一个任务在特定的时间范围内执行，也许是在深夜或者我们度假时？有多少次我们需要一个任务每天在准确的时间执行，每一天都不例外？我们真的想熬夜，或者放弃度假吗？更重要的是，我们能确保自己每天都能按时执行任务吗？简单来说，我们不能。因此，一个安排任务并在需要时执行的方法看似简单，但正是它让系统更易管理，并且为我们节省了大量麻烦。
- en: We have many tools and forked projects available, but we will focus on a couple
    of them. The most famous old tools around are **at** and **cron**. They do quite
    the same thing, but with a different spin and definitely with a different goal.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多工具和分叉项目可用，但我们将重点关注其中的几个。最著名的老工具是**at**和**cron**。它们做的事情差不多，但实现方式不同，目标也有所不同。
- en: One shot at it
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次性执行
- en: 'Sometimes, we need to fire a job at a specific hour without any need to repeat
    the action, so just a one off. What we can use in this case is a simple utility
    called `at` with its companion batch. What does it do? It simply reads from the
    input or a file on what to execute and when, and it will use `/bin/sh` to invoke
    whatever we want. There is a little twist though: batch will do it but not at
    a specific time. It will be done when the system load drops below 1.5 or any level
    specified at the `atd` runtime.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要在特定时间执行一个任务，并且不需要重复操作，仅仅是一次性执行。在这种情况下，我们可以使用一个简单的工具，叫做`at`，它有一个伴侣工具叫做batch。它的作用是什么？它简单地从输入或文件中读取要执行的内容和时间，然后用`/bin/sh`调用我们想要执行的命令。不过有一个小小的区别：batch会在系统负载降到1.5以下，或`atd`运行时指定的任何负载水平时执行任务，而不是在特定的时间执行。
- en: 'So, we introduced `atd`; what is this? This is the daemon that executes the
    one shot jobs defined and put in its queue by the `at` utility, and so, it is
    a daemon that usually runs under a dedicated daemon user:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们介绍了`atd`；这是什么？这是一个守护进程，用来执行由`at`工具定义并放入其队列的单次任务，因此它是一个通常以专用守护进程用户身份运行的守护进程：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, this is a daemon that is fired up as a system service, but we have some
    other options; we can pass it to modify how it deals with the scheduled jobs.
    Let''s see what we can make use of:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这是一个作为系统服务启动的守护进程，但我们有一些其他选项；我们可以传递它来修改它如何处理计划任务。让我们看看有哪些可以使用的选项：
- en: '`-l`: Defines the load factor over which the scheduled jobs will not be run.
    If no limit is imposed, it defaults to 1.5; but, in systems with x CPUs, a good
    limit value could be higher than x-1.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：定义超过该负载因子的调度任务将不会被执行。如果没有设置限制，默认为1.5；但是，对于拥有x个CPU的系统，合适的限制值可能会高于x-1。'
- en: '`-b`: This sets the minimum interval in seconds between two consecutive jobs
    being fired. This defaults to `60`.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`：此选项设置两个连续任务之间的最小间隔（单位为秒）。默认为`60`。'
- en: '`-d`: Having issues here? This will enable a debug feature that will divert
    the error messages from `syslog` to `stderr`, usually the terminal. This option
    goes along with the `-f` option.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`：这里遇到问题了吗？此选项将启用调试功能，将错误信息从`syslog`重定向到`stderr`，通常是终端。此选项与`-f`选项一起使用。'
- en: '`-f`: Good for debugging, this options forces `atd` to run in the foreground.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：适合调试，此选项强制`atd`在前台运行。'
- en: '`-s`: Forces the processing of the `at` and `batch` queue to only a single
    run. This is used for backward compatibility with older versions of `at`; and
    it is run as we ran the old `atrun` command.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`：强制`at`和`batch`队列只执行一次。此选项用于与旧版`at`的向后兼容；它的运行方式类似我们以前运行的`atrun`命令。'
- en: 'Few files are involved in the `atd` running process:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`atd`运行过程涉及的文件很少：'
- en: '`/var/spool/cron/atjobs`: This is the directory where the jobs created by `at` are
    stored and `atd` will read the queue from. It must be owned by the same owner
    of the process (in our case, daemon) and have strict access rights of 700.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/spool/cron/atjobs`: 这是 `at` 创建的任务存储目录，`atd` 将从中读取队列。它必须由进程的同一所有者（在我们这个例子中是守护进程）拥有，并具有严格的
    700 访问权限。'
- en: '`/var/spool/cron/atspool`: This is the directory that temporarily holds the
    output of the jobs. It is owned by a daemon user with an access mode of 700.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/spool/cron/atspool`: 这是临时保存任务输出的目录。它由一个守护进程用户拥有，访问模式为 700。'
- en: '`/etc/at.allow`, `/etc/at.deny`: In this file, we can set which account can
    submit jobs to `atd` and which are forbidden.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/at.allow`, `/etc/at.deny`: 在这个文件中，我们可以设置哪些账户可以提交任务给 `atd`，哪些账户被禁止。'
- en: There is one limit in using `atd`; if it's spool directory is mounted with NFS,
    then whichever option you use for mounting, it will simply not work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `atd` 时有一个限制：如果它的排队目录通过 NFS 挂载，则无论你使用何种挂载选项，它都会完全无法工作。
- en: 'We saw a couple of interesting files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一些有趣的文件：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This administrator who can submit jobs to the `atd` daemon can have a really
    simple syntax: it is a simple list of account names, one per line, with no whitespaces.
    There is a precedence order in which the files are parsed:`/etc/at.allow` is the
    first one to be read. If any account names are found in it, these will be the
    only accounts to be allowed to submit the jobs.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提交任务给 `atd` 守护进程的管理员可以使用非常简单的语法：这是一个简单的账户名称列表，每行一个，不带空格。文件解析有优先顺序：`/etc/at.allow`
    是第一个被读取的。如果其中找到任何账户名，这些账户将是唯一允许提交任务的账户。
- en: If `/etc/at.allow` does not exist, then `/etc/at.deny` is parsed and every account
    name found in it will be forbidden to send jobs to `atd`. If the file exists but
    it is empty, it is interpreted as that every account can submit jobs to `atd`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `/etc/at.allow` 文件不存在，那么会解析 `/etc/at.deny`，其中找到的每个账户名都将被禁止向 `atd` 提交任务。如果文件存在但为空，则表示所有账户都可以提交任务给
    `atd`。
- en: If neither `/etc/at.allow` or `/etc/at.deny` exists, this means that only the
    superuser can submit jobs to `atd`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `/etc/at.allow` 或 `/etc/at.deny` 都不存在，这意味着只有超级用户可以提交任务给 `atd`。
- en: 'In the systems, we use a sandbox. We have `/etc/at.deny` and its contents here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统中，我们使用沙箱。我们有 `/etc/at.deny` 和其中的内容如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So for the rules we just saw, if  `/etc/at`. `allow` is absent, all the accounts
    listed in `/etc/at.deny` are forbidden to submit jobs to `atd`. This makes sense
    as we can see that these are accounts related to services or a nobody user, and
    these are not supposed to have any need to submit a job.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以对于我们刚才看到的规则，如果 `/etc/at.allow` 文件不存在，所有列在 `/etc/at.deny` 中的账户都被禁止提交任务给 `atd`。这也很合理，因为我们可以看到这些账户与服务相关，或者是没有身份的用户，它们不应该有提交任务的需求。
- en: This is all we need to know about the service part of the `at` facility; let's
    see what we can rely on to schedule a job. On the client side, we have the following
    utilities that we can use to submit jobs to `atd`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于 `at` 服务部分的所有内容；接下来我们来看一下可以用来安排任务的工具。在客户端，我们可以使用以下工具来提交任务给 `atd`。
- en: The `at` and `batch read` commands from a standard input or a specified file,
    which are to be executed at a later time, using `/bin/sh`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`at` 和 `batch` 命令从标准输入或指定文件读取，任务将在稍后的时间执行，使用 `/bin/sh`。'
- en: '`at`: This is the main utility we deal with, and its function is to submit
    jobs that are to be executed at a specific time. Time specification can be really
    smart and flexible.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`at`: 这是我们使用的主要工具，它的功能是提交将在特定时间执行的任务。时间指定非常智能且灵活。'
- en: '`HH:MM`: This specifies the time of the current day to run a command called
    by `at`. If the time has already passed, the command is intended to be run on
    the next day at the same hour.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HH:MM`: 这指定了当天运行 `at` 调用命令的时间。如果时间已经过去，该命令将计划在第二天同一时刻执行。'
- en: '`midnight`: The job is meant to be run at midnight:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`midnight`: 这个任务意味着在午夜执行：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To submit a job, simply press *Ctrl*+*D *on a newline:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 提交任务时，只需在新的一行上按 *Ctrl*+*D*：
- en: '`noon`: This job is meant to be run at noon'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noon`: 这个任务意味着在中午执行'
- en: '`teatime`: This job will be run at 4 PM'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teatime`: 这个任务将在下午 4 点执行'
- en: '`AM-PM`: We can add a trailing AM or PM to have the job be executed at a certain
    hour in the morning or in the afternoon:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AM-PM`: 我们可以添加后缀 AM 或 PM，将任务安排在早晨或下午的特定时间执行：'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`date month_name [year]`: We can also have a job running at a specific time
    on a precise day, month, and optionally, a year too; but, we have to keep in mind
    that whatever format we choose, the date must follow the time specification and
    not precede it:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date month_name [year]`：我们还可以设置任务在某个特定的时间，具体到某天、某月，甚至可以选择年份；但是我们需要记住，无论选择哪种格式，日期必须跟随时间规格，而不能位于其前：'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`MMDD[CC]YY`: Date specification as month, day, optional century, and year
    without spaces:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MMDD[CC]YY`：日期格式为月、日、可选世纪和年份，中间无空格：'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`MM/DD/[CC]YY`: Date specification as month/day/optional century/year separated
    by a slash:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MM/DD/[CC]YY`：日期格式为月/日/可选世纪/年份，用斜杠分隔：'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`DD.MM.[CC]YY`: Date specification as day.month.optional century.year separated
    by a dot:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DD.MM.[CC]YY`：日期格式为日.月.可选世纪.年份，使用点分隔：'
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`[CC]YY-MM-DD`: Date specification as optional century year-month-day, separated
    by a dash:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[CC]YY-MM-DD`：日期格式为可选世纪年-月-日，用破折号分隔：'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`now + minutes | hours | days | weeks`: We can also set the time in minutes,
    hours, days, or weeks from the time/date on the system at the moment of creating
    the job:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`now + minutes | hours | days | weeks`：我们也可以设置任务从当前系统时间起，按分钟、小时、天数或周数计算的执行时间：'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`today`: We can set a job to be run at a specific hour relative to today; if
    we do not define an hour, it will be simply executed immediately:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`today`：我们可以设置任务在今天的某个特定时间运行；如果没有定义时间，它将会立即执行：'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`tomorrow`:  We can set a job to be run at a specific hour the next day; if
    we do not define an hour, it will be simply executed at the same hour that the
    job has been created, but the next day:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tomorrow`：我们可以设置任务在第二天的特定时间运行；如果没有定义时间，它将会在创建任务时的同一时间执行，但会是第二天：'
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The complete reference for time specification is available at `/usr/share/doc/at/timespec`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 时间规格的完整参考资料可见于`/usr/share/doc/at/timespec`。
- en: 'As we can see from the examples, the commands are read from `stdin` or from
    a file, if using the option `-f` filename:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从示例中看到的，命令可以从`stdin`或文件中读取，如果使用`-f`选项并指定文件名：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the job is put in the queue, it retains some bits from the moment it was
    created:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦任务被放入队列，它会保留一些来自创建时的状态：
- en: The environment variables except for `BASH_VERSINFO`, `DISPLAY`, `EUID`, `GROUPS`,
    `SHELLOPTS`, `TERM`, `UID`, `_` , and `umask` are retained from the time of invocation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`BASH_VERSINFO`、`DISPLAY`、`EUID`、`GROUPS`、`SHELLOPTS`、`TERM`、`UID`、`_`和`umask`外，其他环境变量都会保留自调用时的状态。
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What kind of environment libraries are exported to the job depends on the future
    developments; but, for instance, if we want to schedule a compile job for some
    program sources, we will have to set such libraries as `LD_LIBRARY_PATH` or `LD_PRELOAD`
    from inside the job itself since they are not inherited.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将会导出到任务中的环境库种类取决于未来的开发；例如，如果我们想为某个程序源代码调度编译任务，我们必须从任务本身设置`LD_LIBRARY_PATH`或`LD_PRELOAD`等库，因为这些库不会被继承。
- en: Once the job is executed, its results will be displayed to `stdout` and `stderr`
    and mailed to the user using `/usr/sbin/sendmail`, but, if it is executed from
    `su` and `at` and retains its original user id, the results will be mailed to
    the user who originally logged in to `su`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦任务执行完毕，其结果将显示在`stdout`和`stderr`中，并通过`/usr/sbin/sendmail`发送邮件给用户；但是，如果任务是通过`su`和`at`执行，并且保留了原始用户ID，那么结果会发送给最初登录到`su`的用户。
- en: 'Let''s run a simple command that will generate some output, and then let''s
    make sure an email is sent:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个简单的命令来生成一些输出，然后确保邮件被发送：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And now, let''s check the mailbox for the default alias user for root (check
    `/etc/aliases` to know whom the emails to root will be delivered to):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们检查一下根用户的默认别名邮箱（查看`/etc/aliases`以了解邮件会发送给谁）：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we saw how to schedule a job, let''s see what options it supports:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何调度一个任务，接下来看看它支持哪些选项：
- en: '`-q`: Force `at` to use the specified queue to place a job. Queues are designated
    with a single character, from a to z and from A to Z; the default queue is named
    after *a for at* and *b for batch*. Queues with higher letters have an increased
    niceness while there is a special queue named `=` , which is reserved for jobs
    that are actually running. If a job is submitted to a queue with a capital letter,
    it is treated as if it was submitted to batch; so, once the time specification
    is hit, the job is executed only if the load average of the system is below the
    threshold.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-q`: 强制 `at` 使用指定的队列放置作业。队列用单个字符指定，从 a 到 z 和从 A 到 Z；默认队列分别以 *a 代表 at* 和 *b
    代表 batch* 命名。具有更高字母的队列具有增加的 niceness，而具有名称 `=` 的特殊队列专用于实际运行的作业。如果将作业提交到具有大写字母的队列，则会被视为提交到
    batch；因此，一旦达到时间规范，只有在系统的负载平均值低于阈值时，作业才会执行。'
- en: '`-V`: Just prints the version number of the utility to `stderr` and `exit`
    successfully.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-V`: 只是将实用程序的版本号打印到 `stderr` 并成功退出。'
- en: '`-m`: Sends an email to the user once the job has been completed, even if the
    job itself has no output.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-m`: 一旦作业完成，向用户发送电子邮件，即使作业本身没有输出。'
- en: '`-M`: Never sends any emails to the user.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-M`: 永远不向用户发送任何电子邮件。'
- en: '`-f` filename: We already saw this option; it forces `at` to read from the
    specified file the commands to run within the job, rather than from the `stdin`.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f` 文件名: 我们已经看到了这个选项；它强制 `at` 从指定文件中读取要在作业内运行的命令，而不是从 `stdin` 中读取。'
- en: '`-t [[CC]YY]MMDDhhmm[.ss]`: Defines the time to run the job named `at/`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t [[CC]YY]MMDDhhmm[.ss]`: 定义要运行命名为 `at/` 的作业的时间。'
- en: '`-l`: This is actually an alias for `atq`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`: 实际上是 `atq` 的别名。'
- en: '`-r`: This is actually an alias for `atrm`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`: 实际上是 `atrm` 的别名。'
- en: '`-d`: This is actually an alias for `atrm`.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`: 实际上是 `atrm` 的别名。'
- en: '`-b`: This is actually an alias for `batch`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-b`: 实际上是 `batch` 的别名。'
- en: '`-v`: Shows when a job will be executed before reading it:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`: 在读取作业之前显示将执行作业的时间：'
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`-c`: Shows on the `stdout` the specified job:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`: 在 `stdout` 上显示指定的作业：'
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`batch`: Runs a job when the average system load is under a specific threshold,
    the default threshold defaulting to 1.5\. There is a major caveat though: in order
    to work correctly, batch depends on Linux on a proc filesystem mounted on `/proc`:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch`: 当系统平均负载低于特定阈值时运行作业，默认阈值为1.5。但是有一个重要的注意事项：为了正常工作，`batch` 依赖于在 `/proc`
    上挂载的 Linux `proc` 文件系统：'
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If a user is not logged on at the time `at` is invoked or when the file named `/var/run/utmp`
    is not readable, the email at the end of the job is sent to the account found
    as the value of the environment variable LOGNAME. If this variable is unavailable,
    the current user id will receive the email.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在调用 `at` 时未登录，或者当名为 `/var/run/utmp` 的文件不可读时，作业结束时的电子邮件将发送到环境变量 LOGNAME 的值作为帐户找到的值。如果此变量不可用，则当前用户
    id 将接收该电子邮件。
- en: '`atq`: Shows a list of pending job, for the user. If run by superuser, it shows
    the list of all the scheduled jobs for all the accounts. The format of the list
    is here:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`atq`: 显示用户的待处理作业列表。如果由超级用户运行，则显示所有帐户的所有计划作业列表。列表的格式在这里：'
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, what the unprivileged users see is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，非特权用户看到的是：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And this is what `root` sees at the same time on the same system:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `root` 在同一系统上的同时看到的内容：
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As we can see from the list, the queue with the name of `a`, and `indeed` queues,
    are designated with a single character, from a to z and from A to Z, the default
    queue being named after *a for at* and *b for batch*. Queues with higher letters
    have an increased niceness, while there is a special queue named `=` , which is
    reserved for jobs actually running. If `atq` is given a specific queue as an argument,
    it will show only the jobs in that queue. Let''s see what `atq` can show without
    arguments:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中可以看出，名称为 `a` 和 `indeed` 的队列被指定为单个字符，从 a 到 z 和从 A 到 Z，而默认队列的名称分别为 *a 代表 at*
    和 *b 代表 batch*。具有更高字母的队列具有增加的 niceness，而名为 `=` 的特殊队列专门用于实际运行的作业。如果 `atq` 被给定特定队列作为参数，则只显示该队列中的作业。让我们看看
    `atq` 在没有参数的情况下能显示什么：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s restrict the list to just the batch queue:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将列表限制为仅显示 batch 队列：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So, `atq` supports the following options:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`atq` 支持以下选项：
- en: '`-q`: It is the only option, along with `V`, accepted by `atq` and restricts
    its output to the specified queue content'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-q`: 它是 `atq` 接受的唯一选项，与 `V` 一起，限制其输出为指定队列的内容'
- en: '`-V`: Just prints the version number of the utility to the `stderr` and `exit`
    successfully'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-V`: 只是将实用程序的版本号打印到 `stderr` 并成功退出'
- en: '`atrm`: Deletes jobs identified by the job id:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`atrm`：删除由任务ID标识的任务：'
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'So, we have four jobs whose ids are `3`, `9`, `13`, and `29`; let''s remove
    them:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有四个任务，其ID分别为`3`、`9`、`13`和`29`；让我们将它们删除：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Nothing left, we are done. On a final note, `atrm` accepts only one option,
    that is `-V`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 没有其他内容了，我们完成了。最后需要注意的是，`atrm`只接受一个选项，那就是`-V`。
- en: 'What we saw so far is good for a one shot job, since `at` will not allow us
    to set some recurring task; so, if we want to execute some recurring jobs over
    time, we need to resort to a different kind of facility: the well-known cron service.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的适用于一次性任务，因为`at`不会允许我们设置某些周期性任务；因此，如果我们想在一段时间内执行一些周期性任务，我们需要依赖另一种工具：著名的cron服务。
- en: The cron scheduler
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cron调度器
- en: One of the most used facilities on a server is actually the scheduler, even
    if we do not realize how much we rely on it. Some of the services that run unattended
    on our systems are dealt with by a scheduler, which is in charge to run them at
    specific times over a span of days, weeks, and months. All those humble, repetitive
    tasks, which are so essential for the correct functioning of our environment,
    are hidden behind the curtains and do what we would not like to do, for instance,
    rotate all the system logs when it is needed. Would we do these jobs every day,
    at crazy hours, for all the services that require maintenance? No, we have better
    things to do. The cron scheduler does not have any better things to do; its purpose
    is to wake up every minute and check if something has to be done, and this makes
    it the best candidate to perform tedious repetitive tasks, at the same hour, maybe
    every day or every week. So, since one of the purposes of this book is to get
    the best we can from our system, we will have a look at this humble servant and
    learn how to configure and administer it so that it will side us in the necessary
    but not-so-funny task of administering our systems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上最常用的工具之一实际上是调度器，即使我们没有意识到自己依赖它有多深。我们系统中一些无需人工干预的服务都是由调度器处理的，它负责在几天、几周甚至几个月的特定时间运行它们。所有这些看似简单、重复的任务，虽然对我们环境的正常运行至关重要，却在幕后默默进行，完成我们不愿意做的事情，例如，在需要时轮换所有系统日志。如果我们每天都得做这些任务，在疯狂的时间点，为所有需要维护的服务？不，我们有更重要的事情要做。cron调度器没有更重要的事情要做；它的目标是每分钟唤醒一次，检查是否有任务需要执行，这使它成为执行繁琐重复任务的最佳人选，也许是每天或每周在同一时间执行。因此，既然本书的目的之一是帮助我们从系统中获得最大效益，我们将深入了解这个谦逊的助手，学习如何配置和管理它，从而帮助我们完成必要但不那么有趣的系统管理任务。
- en: 'As with `at`, crontab relies on three different components: a utility, called
    `cron`**;** a set of configuration files, the most renowned being `/etc/crontab`;
    and a client/editor called crontab. Does it look a bit confusing? Let''s go in
    an orderly manner and have a look at the cron service first.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与`at`一样，crontab依赖三个不同的组件：一个名为`cron`的工具；一组配置文件，其中最著名的是`/etc/crontab`；还有一个名为crontab的客户端/编辑器。看起来有点混乱吗？让我们按顺序进行，并首先了解一下cron服务。
- en: cron
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cron
- en: 'This service runs every minute, looks for jobs stored in its crontab files,
    and checks if it must be run in the current minute. If anything is found, it is
    executed; otherwise, cron will be rerun the next minute and so forth. Once the
    job has been executed, the output of the commands issued is mailed to the owner
    of the crontab or to the user specified in the MAILTO environment variable in
    the crontab, if any. Notably, every minute, cron not only reads the crontab files
    but also checks the modification file of its spool directory or if `/etc/crontab`
    has changed and, if so, it will analyze the modification time of all the crontab
    files and reload them to get any changes made to the job''s specification. So,
    we do not worry about restarting cron if we changed anything. It will manage the
    changes by itself, but cron is also able to cope with clock changes: if the time
    has been changed by less than 3 hours backward, the already run jobs will not
    be rerun. Then, if the time shifts forward to less than 3 hours, the *skipped* jobs
    will be run as soon as the clock will hit the new time. This affects only those
    jobs that have been set with a specific execution time. So, those tasks, using
    keywords such as `@hourly`, and those who have the wildcard `*` in the hour or
    minute specification for the runtime will not be affected. If the clock is shifted
    by more than 3 hours, all the jobs will be run following the new time set.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务每分钟运行一次，检查存储在其 crontab 文件中的任务，并查看是否需要在当前分钟执行。如果找到任务，则执行；否则，cron 会在下分钟重新运行，依此类推。任务执行后，命令输出将通过邮件发送给
    crontab 所有者，或者发送给 crontab 中的 MAILTO 环境变量指定的用户（如果有）。特别地，每分钟，cron 不仅会读取 crontab
    文件，还会检查其 spool 目录的修改文件，或者检查 `/etc/crontab` 是否已更改，如果有变化，它会分析所有 crontab 文件的修改时间并重新加载它们，以便获取任务规范的任何更改。因此，如果我们做了更改，也无需担心重新启动
    cron。它会自行管理这些更改，不过 cron 也能够应对时钟变动：如果时间回退少于 3 小时，已运行的任务不会重新执行。然后，如果时间向前调整不到 3 小时，*跳过的*
    任务将在时钟到达新时间时立即执行。这只会影响那些设置了特定执行时间的任务。所以，使用 `@hourly` 等关键字的任务，以及在小时或分钟规格中使用通配符
    `*` 的任务将不会受到影响。如果时钟变化超过 3 小时，所有任务将按照新的时间设置执行。
- en: Each distribution can implement a different kind of cron facility and have the
    configuration files in a slightly different location. If unsure, `man cron` and
    `man crontab` will show what is supported by the service and which locations the
    relevant files are kept at.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个发行版可以实现不同类型的 cron 服务，并且配置文件的位置可能略有不同。如果不确定，`man cron` 和 `man crontab` 可以显示该服务支持的功能以及相关文件所在的路径。
- en: 'Then, there is one more surprise: there is no cron. Well, we can chuckle because
    actually we call cron the daemon part of the service, but what is actually used
    to provide that service can change according to the distribution that we are using.
    There are different schedulers available for our purposes. Here are some of them:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有一个惊喜：没有 cron。好吧，我们可以笑一笑，因为其实我们称之为 cron 的是该服务的守护进程部分，但提供该服务的实际程序可以根据我们使用的发行版而有所不同。我们有多种调度器可以选择。以下是其中的一些：
- en: '`vixie-cron`: This is the father of all the modern crons: the venerable cron
    from Paul Vixie, coded in 1987.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vixie-cron`：这是所有现代 cron 的始祖：Paul Vixie 编写的著名 cron，编码于 1987 年。'
- en: '`bcron`: It is a cron replacement focused to provide a secure service.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bcron`：它是一个安全性更强的 cron 替代品。'
- en: '`cronie`: It is a Fedora-based form of vixie-cron.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cronie`：它是基于 Fedora 的 vixie-cron 版本。'
- en: '`dcron`: Dillon''s cron is a stripped-down version of a cron; it is secure
    and simple.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dcron`：Dillon 的 cron 是一个精简版的 cron；它既安全又简单。'
- en: '`fcron`: It could be a nice replacement to the classic vixie cron and it is
    designed for a system that is not continuously running. So, it has some interesting
    features like the ability to schedule jobs at startup.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fcron`：它可以作为经典 vixie cron 的不错替代品，并且它是为非持续运行的系统设计的。因此，它有一些有趣的功能，比如能够在启动时调度任务。'
- en: These are just some cron implementations, and we are confident that somewhere
    there are some more, a fork or something original that addresses some precise
    requirement. For the purpose of this book, we will refer to vixie-cron as installed
    on a Debian system.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些 cron 实现，我们相信某个地方可能还有更多的实现，可能是某个分支或者是某个解决特定需求的原创版本。在本书中，我们将引用安装在 Debian
    系统上的 vixie-cron。
- en: 'We do not have many options to interact with cron, but let''s see what it supports:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与 cron 的交互选项不多，但让我们来看一下它支持什么：
- en: '`-f`: It does not daemonize and will stay in the foreground. It is useful to
    debug what is going on with it.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`：不进行守护进程化，并将保持在前台。这对于调试其运行状态非常有用。'
- en: '`-l`: It enables the Linux Standard Base compliant script names for files inside
    `/etc/cron.d` ([http://lanana.org/lsbreg/cron/index.html](http://lanana.org/lsbreg/cron/index.html)).
    Only the files inside this directory will be affected; those under `/etc/cron.hourly`,
    `/etc/cron.daily`, `/etc/cron/weekly` , and `/etc/cron/monthly` will not be affected.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：启用符合 Linux 标准基准的脚本名称，用于 `/etc/cron.d` 中的文件（[http://lanana.org/lsbreg/cron/index.html](http://lanana.org/lsbreg/cron/index.html)）。只有该目录中的文件会受到影响；`/etc/cron.hourly`、`/etc/cron.daily`、`/etc/cron/weekly`
    和 `/etc/cron.monthly` 中的文件不会受到影响。'
- en: '`-n`: Includes the Fully Qualified Domain Name in the subject of the email
    sent after a job has been run; otherwise, only the hostname will be used.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`：在任务执行后的电子邮件主题中包含完全限定的域名；否则，只会使用主机名。'
- en: '`-l`: Sets the log level. Errors are always logged; but, different levels unlock
    additional information that is recorded using the system log facility, usually
    syslog under the *cron* facility. The single level values can be summed and the
    resulting value will enable the collection of more than one kind of information:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`：设置日志级别。错误总是会被记录；但是，不同的级别解锁了额外的信息，这些信息通过系统日志设施记录，通常是在 *cron* 设施下的 syslog。可以将单个级别的值相加，得到的结果将启用收集多种信息：'
- en: '`1`: It logs the start of all cron jobs'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`：记录所有 cron 任务的开始'
- en: '`2`: It logs the end of all cron jobs'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`：记录所有 cron 任务的结束状态'
- en: '`4`: It logs the end of all failed jobs, so all jobs with exit status are different
    from `0`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`：记录所有失败任务的结束状态，因此所有退出状态不为 `0` 的任务都会被记录'
- en: '`8`: It logs the process identification number of all cron jobs'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`8`：记录所有 cron 任务的进程标识号'
- en: '`15`: It will collect all the information (8+4+2+1) grabbed in the preceding
    levels'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`15`：将收集所有在前面级别中捕获的信息（8+4+2+1）'
- en: The default log level is 1, but we can specify 0 if we want to disable logging
    at all
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的日志级别是 1，但如果我们希望完全禁用日志记录，可以指定 0
- en: 'There are a couple of things to keep in mind when using cron:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 cron 时需要注意几点：
- en: 'The cron daemons set up a number of environment variables when dealing with
    jobs, such as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: cron 守护进程在处理任务时设置了一些环境变量，示例如下：
- en: '`SHELL`: Set to `/bin/sh`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHELL`：设置为 `/bin/sh`'
- en: '`LOGNAME`: Set from the content of `/etc/passwd` line related to the crontab
    owner'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOGNAME`：从与 crontab 所有者相关的 `/etc/passwd` 行内容中设置'
- en: '`HOME`: Set from the content of `/etc/passwd` line related to the crontab owner'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOME`：从与 crontab 所有者相关的 `/etc/passwd` 行内容中设置'
- en: '`PATH`: Set to `/usr/bin:/bin`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATH`：设置为 `/usr/bin:/bin`'
- en: 'If any other environment variables must be set by the user, the easiest way
    to accomplish this is to set them into crontab definitions for vixie-cron; other
    implementations such as cronie do not allow this, so you can resort to prepend
    them on the crontab line entry before calling the script or program belonging
    to the job:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户需要设置其他环境变量，最简单的方式是将它们设置在 vixie-cron 的 crontab 定义中；其他实现（如 cronie）不允许这样做，因此你可以在调用属于该任务的脚本或程序之前，在
    crontab 行条目中预先添加这些环境变量：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we take a look at the syslog file, we can see the crontab being installed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 syslog 文件，我们可以看到 crontab 被安装：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So, if we did not make any mistakes, we should see the `/var/log/proxy` file
    being created and updated with the content of the environment the command named
    `env` has been invoked from:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们没有犯任何错误，我们应该看到 `/var/log/proxy` 文件被创建并更新，其中包含 `env` 命令被调用时的环境内容：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `HTTP_PROXY` environment variable is set for the job, and we will see more
    and more of these lines growing into the file, so we will see in a while how to
    remove this crontab or the single job.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTP_PROXY` 环境变量为任务设置，我们将看到这些行逐渐增长到文件中，所以稍后我们将看到如何删除该 crontab 或单个任务。'
- en: One environment is read instead of being set and this is called **MAILTO**.
    If it is defined, the output of the job will be sent to the name specified; if
    it is empty, no mail will be sent. MAILTO can also be set to send emails to a
    list of users separated by commas. If not, MAILTO is set so the outcome of a job
    will be sent to the owner of the crontab.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 读取一个环境变量，而不是设置它，这个变量叫做 **MAILTO**。如果定义了它，任务的输出将发送到指定的名称；如果为空，则不会发送邮件。MAILTO
    也可以设置为将电子邮件发送给由逗号分隔的用户列表。如果没有设置，MAILTO 将被设置为将任务结果发送给 crontab 所有者。
- en: 'Some of the cron implementations support PAM, so if they happen to set up a
    new cron job for a user, and we face some authorization issues we have three files
    to look at:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 cron 实现支持 PAM，因此如果它们恰好为用户设置了一个新的 cron 作业，并且我们遇到了一些授权问题，那么我们需要查看以下三个文件：
- en: '`/etc/cron.allow`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.allow`'
- en: '`/etc/cron.deny`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/cron.deny`'
- en: '`/etc/pam.d/cron`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/pam.d/cron`'
- en: '`/etc/at.allow` is the first file to be read if it exists. If any account names
    are found in it, these will be the only accounts to be allowed to submit jobs
    using the crontab utility. If `/etc/cron.allow` does not exist, then `/etc/cron.deny`
    is parsed and every account name found in it will be forbidden to send jobs to
    cron. If the file exists, but it is empty, only the superuser or those listed
    in `/etc/cron.allow` will be able to submit jobs. If neither `/etc/cron.allow` nor
    `/etc/cron.deny` are available, any user will be allowed to submit jobs to cron.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/at.allow` 是第一个被读取的文件（如果存在）。如果其中找到任何账户名，则这些账户将是唯一被允许使用 crontab 工具提交作业的账户。如果
    `/etc/cron.allow` 不存在，那么会解析 `/etc/cron.deny`，其中找到的每个账户名都会被禁止提交作业到 cron。如果文件存在，但为空，则只有超级用户或
    `/etc/cron.allow` 中列出的用户才能提交作业。如果 `/etc/cron.allow` 和 `/etc/cron.deny` 都不可用，任何用户都可以提交作业到
    cron。'
- en: 'We talked about the `crontab` utility. What is this? It is actually the program
    that lets us write the crontab files, which instruct cron on which jobs to execute,
    when, and on behalf of whom. Indeed, each user can have his/her own `crontab`,
    which is stored in `/var/spool/cron/crontabs`; but we should not edit them manually.
    We must resort to the `crontab` utility, which will let us edit and install the
    `crontab` file in the correct way. So, how do we use `crontab`? Let''s say we
    already have a file with our job specifications, and we will see later on how
    to write it; the only command we have to issue is here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了 `crontab` 工具。那么它是什么呢？它实际上是让我们编写 crontab 文件的程序，crontab 文件告诉 cron 执行哪些作业，何时执行，以及由谁执行。事实上，每个用户可以拥有自己的
    `crontab`，该文件存储在 `/var/spool/cron/crontabs` 中；但我们不应手动编辑这些文件。我们必须依赖 `crontab` 工具，它将允许我们以正确的方式编辑并安装
    crontab 文件。那么，如何使用 `crontab` 呢？假设我们已经有了一个包含作业规格的文件，我们稍后会看到如何编写它；我们需要执行的唯一命令是：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will install a new crontab for the current user from the file specified,
    but we can also manually enter our job details by typing them on the command line
    with `crontab`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从指定的文件为当前用户安装一个新的 crontab，但我们也可以通过命令行手动输入作业详情，使用 `crontab`。
- en: 'As we can imply from the preceding command lines, if `crontab` is called without
    passing a username, it will work on the cron jobs of the user who invoked it.
    So, if we want to list or modify a user `crontab`, given that we have sufficient
    privileges, this is being superuser, we can issue the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的命令行可以推测，如果没有传递用户名，`crontab` 将作用于调用它的用户的 cron 作业。因此，如果我们想列出或修改用户的 `crontab`，只要我们具有足够的权限（即超级用户权限），我们可以执行以下命令：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If we want to edit and install a new cron job, we can use the following syntax:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想编辑并安装一个新的 cron 作业，我们可以使用以下语法：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Look at the following example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下示例：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Being the first time the `crontab` utility is invoked by the user, it could
    ask for the default editor to be used; if not, the visual or editor environment
    variable are instanced. If nothing is set, `/usr/bin/editor` will be used.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于是第一次调用 `crontab` 工具，系统可能会要求选择默认编辑器；如果没有设置，则会实例化 visual 或 editor 环境变量。如果都没有设置，则使用
    `/usr/bin/editor`。
- en: In the example shown, the Debian distribution triggered the configuration of
    `/etc/alternatives`, which provides the link to the default editor.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在所示的示例中，Debian 发行版触发了 `/etc/alternatives` 的配置，该配置提供了指向默认编辑器的链接。
- en: Once into the editor, each cron job must be specified on a line on its own,
    such as `* * * * * ps`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 进入编辑器后，每个 cron 作业必须单独指定在一行上，例如 `* * * * * ps`。
- en: 'We will see later what this sequence means; as of now, we just exit the editor
    and save the content:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到这一序列的含义；目前，我们只需要退出编辑器并保存内容：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once done, `crontab` informs us that the crontab has been installed, and it
    could be interesting to have it displayed on the `stdout`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`crontab` 会通知我们 crontab 已经安装，显示在 `stdout` 上也许会很有意思：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As shown in the following example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示的示例：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we want to get rid of the crontab, there is a handy option that will remove
    it completely:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想删除 crontab，可以使用一个便捷选项，将其完全移除：
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: But be careful-if you want to get rid of some jobs but retain the others, the
    best solution is to edit the `crontab` again, delete the lines related to the
    jobs we do not want, and then save it. The new `crontab` with the remaining jobs
    will be installed and will completely replace the old one.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are not confident in deleting a crontab, we could set an alias that points
    to `crontab -i -r` , which works with `-r` and prompts the user for a confirmation
    before deleting the crontab:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We will not touch some distribution specific configurations, such as the support
    for `/etc/cron.hourly`, `/etc/cron.daily`, `/etc/cron.weekly`, and `/etc/cron.monthly` provided
    through the `/etc/crontab` file, since otherwise, we would end up drilling down
    all the bits and configurations of all possible cron implementations in all the
    main distributions.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'What interests us here is to understand the underlying basic notions on how
    to deal with cron so that whatever different implementation we find, we will be
    able to deal with it and look into its idiosyncrasies. There are a couple of interesting
    things left to see now: one is the syntax we will use to define a job and the
    other is a quick glance to anacron: a utility we have often heard of.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if a `crontab` file can look a bit cryptic at first glance, it is not
    so difficult to understand what the sequence of the characters mean: the first
    field is for the minute when the job must be executed; the second for the hour;
    the third for the day of the month; the fourth for the month; the fifth for the
    day of the week; and the sixth for the command to execute. So, the `crontab` we
    just created a few lines ago can be read as laid out in the following table:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '| **Fields** | ***** | ***** | ***** | ***** | ***** | **ps** |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| Minutes | X |  |  |  |  |  |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: '| Hours |  | X |  |  |  |  |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '| Day of the month |  |  | X |  |  |  |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| Month |  |  |  | X |  |  |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| Day of the week |  |  |  |  | X |  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: '| Command |  |  |  |  |  | X |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
- en: What the fields mean
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, now we know what these fields mean, but what are those asterisks and
    what can we write into each field? Another table will make all this easier to
    understand:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Allowed values** | **Metacharacters** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: '| Minutes | 0-59 | * , - / |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
- en: '| Hours | 0-23 | * , - / |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '| Day of the month | 1-31 | * , - / |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '| Month | 1-12 or Jan-Dec | * , - / |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
- en: '| Day of the week | 0-7 or Sun-Sat | * , - / |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: Which values can be used inside each field
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: We are almost there. Just a few things more to learn and we will be able to
    fully understand a crontab line; but first, what are those metacharacters and
    what do they mean?
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Sunday can be specified both as `0` and `7` in the day of
    the week field.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`*`: This stands for *every* and can be used in all the fields. So, inside
    a minute field it will tell cron to run the job every minute, inside the hour
    every hour, and so forth.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`,`: The comma defines a list. For instance, `1`, `5`, and `15` in the day
    of the month will instruct cron to run the job on the first, the fifth, and on
    the fifteenth day.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: The hyphen defines an inclusive range. For instance, 4-7 in the day of
    the week field will force cron to execute the job from Thursday to Sunday.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/`: The forward slash is used to define steps, and it can be used with ranges
    so that it will skip the value of the number through the range. So, 1-59/2 in
    the minute field will give us all the odd minutes in one hour, since it will start
    from one and wait 2 minutes before the next execution; this can be specified as
    a list as well: `1`, `3`, `5`, `7`, `9`, `11`, `13`, `15`, `17`, `19`, `21`, `23`,
    `25`, `27`, `29`, `31`, `33`, `35`, `37`, `39`, `41`, `43`, `45`, `47`, `49`,
    `51`, `53`, `55`, `57`, and `59`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, steps can be quite handy. The forward slash can also be combined
    with the asterisk: `*/2` in the hours field means *every 2 hours*, in the month
    field would be *every two months,* and so forth.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Some implementations of cron support an extra field for the *year,* with values
    from `1970` to `2099` supporting the `*`  and  `-` metacharacters.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one set of special markers we have to see before analyzing a crontab
    line. We can define some recurrences using special keywords prefixed by an `@`,
    as shown in the next table:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keyword** | **Execution** | **The same as** |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| `@yearly` | Once a year, at midnight of Jan 1st | `0 0 1 1 *` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| `@annually` | Equivalent to `@yearly` | `0 0 1 1 *` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| `@montly` | Once a month, at midnight of the first day of the month | `0
    0 1 * *` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| `@weekly` | Once a week, at midnight between Sat and Sun | `0 0 * * 0` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| `@daily` | Once a day, at midnight | `0 0 * * *` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: '| `@midnight` | Equivalent to `@daily` | `0 0 * * *` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| `@hourly` | Once an hour, at the tick of the hour | `0 * * * *` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: '| `@reboot` | At cron daemon startup | `nothing` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
- en: Keywords with special meanings
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '`This` replaces all the first five fields altogether and can become handy if
    you do not have special constraints about hours or days, but you want something
    being executed in a generic time frame.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Before proceeding there are a few things to be aware of:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Each line specifying a cron job must be ended by a newline.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The percent sign `%` used in the command field is turned into a newline character,
    and all the data after the first `%` is sent to the `stdin` of the command to
    be executed. The percentage can be escaped by doubling it `%%` so that it will
    not be interpreted as a newline.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the crontab file, blank lines, leading spaces, and tabs are not parsed.
    If a line starts with `#` , it will be treated as a comment and not parsed.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the crontab file, we can either set some variables or define a cron job;
    nothing else is allowed.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable can be assigned as `VARIABLE_NAME = value`.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaces surrounding the equals sign are optional.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No expansions or substitutions are performed on variables. So, `VARIABLE_NAME=$LOGNAME` will
    not instance `VARIABLE_NAME` since the value string is not even parsed for expansion
    or substitution.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty value must be surrounded by quotes, and if the values contain blanks,
    quotes are required to preserve them.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No per user time zones are available. The default system time zone is used instead.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, with this in mind, let''s have a look at a cron job specification:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '| 35 | 1-24/4 | * | * | Mon,Thu | /opt/scripts/script.sh |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| minutes | hours | Day of the month | month | Day of the week | command |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| Execute at minute 35 past every 4th hour, from 1 through 24 on Monday and
    Thursday |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: A useful grid to make sense of a job specification line
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'Caged in a table, the job specification is easier to understand and becomes
    much easier if we use some keywords:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'That''s all, the definition was shortened to two simple fields. But fiddling
    with the fields can lead us to something tricky:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: What does this do? Simply executes the script every odd minute, not even, odd.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if the system is rebooted or is a desktop, which can stay off for
    days or weeks? Using cron would lead to some jobs not being executed at all or
    just skipped, and this is not a desirable behavior. This is where anacron comes
    in handy: it will run a job even if we switch on the desktop after the scheduled
    time. How can it be? Simply, this utility keeps a log of all the jobs and when
    they were executed using a series of timestamped files held in `/var/spool/anacron`.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Let's proceed in an orderly manner and have a look at the file which drives
    anacron, whose name is `/etc/anacron`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand it, we must have a peek into its content:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As we can notice, we can have variables with crontab, but the format of a job
    definition is slightly different and can have one of the following syntaxes:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '`period`: Expressed in days specifying the frequency the job is run at. For
    instance, 10 is every 10 days.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@period`: Allows to use some keywords to specify the frequency: `@daily`,
    `@weekly`, and `@monthly` for once per day, week, and month.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delay`: Expressed in minutes, defines the delay after which anacron executes
    a scheduled job when the threshold is hit.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`job-name`: We can give a job whatever identifier we want, but no slashes are
    allowed. It will be used by anacron as the name for the timestamp file of the
    job.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command`: Can be whatever command.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we can see, the standard anacron file in the example will run the run-parts
    utility along with the directory argument. And, the exact job of run-parts is
    to run the scripts it finds in the directory it is being given as arguments. So,
    interpreting the anacron lines should be easy now, should''t it? Editing it is
    easy as well: we can do it by hand, no special utilities are required or available.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'The way anacron works is amazingly straightforward and effective: it checks
    each job specified in the `anacrontab` file and sees whether it has been executed
    in the last x specified in the period field. If it has not been run and the threshold
    is hit, it will execute the job after waiting for the delay set in the second
    field of the job definition. Once the task has been executed, anacron records
    the date in a timestamp file related to the job; so next time, it will just have
    to read it to know what to do:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once all the jobs scheduled have been executed, anacron exits; but, we also
    send anacron a SIGUSR1 signal to kill it: it will wait for any running jobs to
    finish and then will cleanly exit.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'But there is also another task performed by anacron once a job has been executed:
    if any output is created by the job, it is mailed to the user running anacron,
    usually root, or the one whose email is specified in the MAILTO environment variable
    from anacrontab. If a `LOGNAME` variable is instanced, it will be used as the
    sender of the email.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s see which options are supported by anacron:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`: Forces anacron to execute all the defined jobs, regardless of the timestamps.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`: Just updates the timestamps of the jobs to the current date without executing
    them.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: Serializes the execution of the jobs; meaning that, before starting the
    next job, anacron will wait for the current one to be completed.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-n`: Ignores the delay specification for each job and runs them as they hit
    the threshold. Implies the -s option.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: Usually anacron goes in background, but this option will force it to
    the foreground. It is useful for debugging, since anacron will sendn the runtime
    messages to the stderr and to syslog. The output emails will be sent to the recipient
    anyway.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-q`: Does not print messages to the stderr and implies the `-d` option.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t` file: Reads the jobs, definitions from the specified file instead of the
    default anacrontab.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-T`: Tests the validity of anacrontab. If there are any errors, they will
    be shown and anacron will return the value of `1`; otherwise, it will return `0`.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S` directory: Uses the specified directory to store the timestamp files.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`: Prints anacron version and exits.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`: Prints the usage help and exits.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have two methods available to execute jobs: one is a daemon, which forks
    in the background and stays there working on some, hopefully, important tasks;
    the other is the schedulers, great for those jobs that must be executed with a
    recurring pattern. These tools can really help us to keep everything in order,
    and execute complex and boring tasks by easing the maintenance of a server or
    even a desktop. But Bash is not only made of commands, scripts, tasks, and services:
    it is the home we are working in on a daily basis. It is our playground, our workbench,
    something to get familiar with. So, the next chapter will deal with some utilities,
    configurations, and advice to make our Bash a cozy place to live our digital life.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
