- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The error is in the second line: There should be no spaces in the variable
    declaration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The result will be `Tuesday` because the array is zero based.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two errors here: the first error is the space in the variable declaration
    and the second error is the usage of single quotes where we should use backticks
    instead.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The value of `b` variable will be `c` and the value of `c` will be `a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we didn't use dollar signs in the assignment lines, the variable will
    take the character value instead of the integer value.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Three
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is because the whole bash shebang is primarily a comment, so there are
    three lines of comment.
  prefs: []
  type: TYPE_NORMAL
- en: There is no space between the option `-b` and its value, so it will be treated
    as an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Four
  prefs: []
  type: TYPE_NORMAL
- en: This is because we have five passed parameters and we use the shift to drop
    a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-n`'
  prefs: []
  type: TYPE_NORMAL
- en: This is because it's on the left and the `shift` command drops parameters from
    the left.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`False`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since lower-case characters have a higher ASCII order, the statement will return `False`.
  prefs: []
  type: TYPE_NORMAL
- en: Both are correct and will return the same result, which is `Strings` are not
    identical.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Three`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-ge`: Greater than or equal to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-gt`: Greater than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ne`: Not equal to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since one test is enough to return true, so we can be sure that the second test
    will return true.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can make the following changes :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `source` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using `((`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The problem is with the space in the filename. To fix it, put the filename
    between quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is no dollar sign before the parentheses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No lines. Since the loop output is redirected to a file, nothing will appear
    on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Four. The loop will start at `8` and continue until it reaches `12`, it will
    match the condition which is greater than or equal, and it will break the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The problem is with the comma in the `for` loop definition. It should be semicolon
    instead. So the correct script should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Since the decrement statement is outside the loop, the count variable will be
    the same value, which is `10`. It's an endless loop, it will print `10` forever,
    and to stop it, you need to press* Ctrl *+ *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we used the `$1` variable not `$@`, the function will return the first
    element only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`50`. Yes, it''s a global variable, but because we printed the value before
    the function call, the variable isn''t affected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Missing brackets `()` or adding the keyword function before the function name.
    It should be written like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The problem is in the function call. We shouldn''t use brackets `()` during
    a function call. Brackets should only be used in function definitions. The correct
    code will be like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: None. Because you are searching for Sed with a capital letter which does not
    exist
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None. The delete command `d` only deletes lines from the stream, not the file.
    To delete from the file, you can use the `-i` option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fourth line. Because we used append command a, it will be inserted after the
    specified position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None, because the `w` flag is only used with the substitute command `s`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the following command to print line number 50:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use following command to change Apache default port `80` to `8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We search for `Listen`, where it defines the Apache default port, search for
    the number beside it, and change it to `Listen 8080`.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should use the variable name without the dollar sign to print it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution: zero'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because you should print `$1` instead of `$2` where `$1` is the first field.
  prefs: []
  type: TYPE_NORMAL
- en: The `while` loop should iterate with `i` value less than `4` not `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the only user that has UID less than `1` is root (`UID=0`), so one line
    will be printed.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 0 lines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because there is a period after the word `awesome`, if you want to print that
    line, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 2 lines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we search for the line that contains the word `scripting`. With a period
    after it followed by any text, this pattern only exists in two lines because the
    third line doesn't contain a period after the word.
  prefs: []
  type: TYPE_NORMAL
- en: 3 lines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we used the question mark that means the character class is not a must for
    the pattern to match.
  prefs: []
  type: TYPE_NORMAL
- en: Nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we used the pipe symbol, which is an ERE character, and as we used sed, we
    must use the `-r` option for sed to turn the extended engine on.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Field 1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use `print NR` or alternatively pipe the output to `wc -l`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must use `-l` otherwise, it will count words instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You should use head `-n 1` to get the one page only.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the `lastlog` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Use the `wc` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Zero. Because the line ends with two asterisks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '8'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are using the `sys` module, we should import it first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So the correct code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '2'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
