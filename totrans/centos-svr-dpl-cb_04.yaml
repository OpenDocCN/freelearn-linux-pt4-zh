- en: Chapter 4. Software Installation Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering the EPEL and Remi repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritizing repositories using the Priorities plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating software updates with `yum-cron`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying installed RPM packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling a program from source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents recipes for managing the installation of software on
    your CentOS system. You''ll learn how to add new package repositories to provide
    a wider selection of software than what''s found in the main CentOS repositories,
    and also how to prioritize the repositories to control those from which a package
    is installed. You''ll also learn how to automate software updates to keep up with
    the latest security patches and bug fixes, and how to verify the installed packages
    to make sure a malicious user hasn''t tampered with your software. Finally, you''ll
    learn a skill that''s slowly fading but is essential if you want to modify the
    open source software on your system: how to compile software from source.'
  prefs: []
  type: TYPE_NORMAL
- en: Registering the EPEL and Remi repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A clean CentOS installation will have the main supported repositories enabled,
    from which we can install a wide variety of software. We can also register third-party
    repositories to make additional (or newer) software available to us. This recipe
    teaches you how to add two such repositories, specifically the popular **Extra
    Packages for Enterprise Linux** (**EPEL**) and Remi repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To register the EPEL repository, install the epel-release package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To register and enable the REMI repository, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the repository''s configuration package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the downloaded package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete the file since it''s no longer needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the Remi repository''s configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `enabled` option in the `[remi]` section and change it''s value
    to `1` to enable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The EPEL repository hosts software packages that complement those in the official
    CentOS repositories. It can be automatically configured by installing the `epel-release`
    package available in the official repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Remi is a popular third-party repository providing newer versions of software
    found in the official repositories. We downloaded the configuration package for
    the repository from the project''s server using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We used the `-O` argument (an uppercase letter `O`, not zero) so that the file
    will be saved to disk, otherwise its contents would be dumped to the screen. The
    recipe didn't identify a specific directory you should download the file to. You
    can download it to your `home` directory, or even `/tmp` if you like, since the
    file isn't needed after the package is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the package is downloaded, we can install it using `yum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many times there are alternative ways to accomplish the same task. For instance,
    the `rpm` command can also be used to install the package after it is downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**rpm -iv remi-release-7.rpm**`'
  prefs: []
  type: TYPE_NORMAL
- en: The `-i` argument installs the package and `-v` instructs `rpm` to be verbose
    in its output so we can see it's activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `remi-release` package installs the configurations for three Remi repositories:
    the Remi, Safe Remi, and Remi''s PHP 7 repositories. Safe Remi is enabled by default
    because its packages are considered safe to use with the official CentOS-Base
    repository. However, the Remi repository is disabled so we need to edit `/etc/yum.repos.d/remi.repo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Remi repository is enabled by updating its configuration file
  prefs: []
  type: TYPE_NORMAL
- en: REMI is popular for providing newer releases of PHP. If you want to upgrade
    your existing PHP installation with a version found in Remi you can enable the
    desired section in `remi.repo` or in `remi-php70.repo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you''ve installed the EPEL repository and installed and enabled the Remi
    repository, you can ask yum to list the available repositories. The EPEL and Remi
    repositories should appear in its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The EPEL and Remi repositories are enabled and ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remi uses the same package names as those found in the official CentOS repositories.
    Like Remi, the IUS repository provides newer versions of software found in the
    official repositories, but uses different package names. Some managed service
    providers recommend using IUS over Remi because they update servers nightly and
    the differing package names help prevent unplanned upgrades. If you're contracted
    with such a provider and not using the Priorities plugin (discussed in the next
    recipe), be sure to heed their advice. More information on IUS can be found at
    their website, [https://ius.io/](https://ius.io/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on the EPEL and Remi repositories, refer to the following
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fedora Project: EPEL ([http://fedoraproject.org/wiki/EPEL](http://fedoraproject.org/wiki/EPEL))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remi's RPM repository ([http://rpms.famillecollet.com/](http://rpms.famillecollet.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install EPEL and additional repositories on CentOS and Red Hat ([http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat](http://www.rackspace.com/knowledge_center/article/install-epel-and-additional-repositories-on-centos-and-red-hat))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritizing repositories using the Priorities plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although package managers make installing and updating software an almost trivial
    task, there can still be some pain points if we're not careful. For example, we
    can configure multiple repositories, including third-party repositories not maintained
    by CentOS, and the version of a package in one repository can conflict with the
    same in another. This recipe uses the Priorities plugin to prioritize the repositories
    we use to help avoid such pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to prioritize which repositories `yum` downloads software
    from:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/etc/yum.conf` file with your text editor. Locate the `plugins` option
    and verify that its value is set to `1` to enable plugin support. Update the value
    if necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `yum-plugin-priorities` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To set a repository''s priority, open its respective configuration file found
    under `/etc/yum.repos.d`. Add the `priority` option as a new entry within each
    desired section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you're finished, save and close the repository's configuration file.![How
    to do it...](img/image_04_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CentOS-Base repository is given a relatively high priority for base packages
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we installed the Priorities plugin and prioritized our repositories
    by updating their configuration files. By prioritizing one repository over another,
    we can more easily control the packages and software versions installed on our
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we checked to make sure Yum''s plugin support is enabled. We opened
    its configuration file at `/etc/yum.conf` and verified the value of the `plugins`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we installed the `yum-plugin-priorities` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Priorities comes with its own minimal configuration file at `/etc/yum/plugins/
    priorities.conf`. There, the `enabled` option let''s us toggle whether the plugin
    is active or not. This means we can prioritize the repositories as we like, but
    temporarily disable prioritization for any reason without removing and then re-adding
    priority values in the repositories'' configuration files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to edit the repositories'' configuration files found in the
    `/etc/ yum.repos.d` directory. Each repository has its own file, for example,
    the CentOS-Base repository''s file is `/etc/yum.repos.d/CentOS-Base.repo`, which
    configures details about connections and security keys for each channel. To prioritize
    our repositories, we simply open the desired files and add a new line for the
    `priority` option in the desired sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Priorities are assigned as a number in the range of `1` to `99`, where `1` is
    the highest priority and `99` is the lowest priority. Any repository or channel
    we don't explicitly set a priority for will default to priority `99`. Repositories
    that are meant to work together (like EPEL and Remi) can be assigned the same
    priority.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't use consecutive priority numbers, like 1, 2, 3.... Setting priorities
    as multiples of 5 or 10, for example 5, 10, 15... or 10, 20, 30... allows you
    to later add additional repositories without re-prioritizing existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: When priorities are assigned and enabled and when we try to install or update
    a package which is found in multiple repositories, the package will be retrieved
    from whichever repository that has the highest priority. In this way, we can control
    if a third-party repository can replace important base packages, or if updates
    from supported CentOS repositories can replace third-party packages on a highly-customized
    system.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to the CentOS Wiki's `yum-plugin-priorities` article for more information
    on the Priorities plugin at [https://wiki.centos.org/PackageManagement/Yum/Priorities](https://wiki.centos.org/PackageManagement/Yum/Priorities).
  prefs: []
  type: TYPE_NORMAL
- en: Automating software updates with yum-cron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know the importance of staying on top of any security alerts and applying
    important updates, but it can be a tedious and time-consuming task to make sure
    all of the software on your CentOS system is updated, especially when you're managing
    more than one server. This recipe shows you how to automate the update process
    ensuring your system stays up to date without the need for daily interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To automate software updates using `yum-cron`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `yum-cron` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start and enable the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform a system update to ensure everything is up to date before `yum-cron`
    takes over:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our first action step was to install the `yum-cron` package, but you''ll notice
    that the invocation also updates Yum itself. Although we only have to specify
    `yum-cron`, including `yum` works around a particular versioning bug (you can
    read the bug report at [https://bugzilla.redhat.com/show_bug.cgi?id=1293713](https://bugzilla.redhat.com/show_bug.cgi?id=1293713)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The package installs the `yum-cron` command and a daily cron job to trigger
    it and a `systemctl` unit used to enable and disable updating. Starting the service
    with `systemctl` results in the creation of a special lock file. Cron runs the
    daily cron job every day to invoke `yum-cron`, which checks whether the lock file
    exists. If the file exists, then it knows it should check for updates. Otherwise,
    it knows daily updating is disabled (the service is stopped) and does nothing.
  prefs: []
  type: TYPE_NORMAL
- en: The `yum-cron.config` configuration file in `/etc/yum` can be used to modify
    the general behavior of `yum-cron`. The most important option is `update_cmd`
    because it lets us specify what type of update to perform. It's possible for `yum-cron`
    to perform different update strategies, and if you want to perform a more targeted
    update beyond the default then you can change the value of the `update_cmd` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Servers that fill different roles may require different update strategies;
    for example, you might want to apply only critical security updates on a production
    server and leave the other software installed at their specific versions. Comments
    in the configuration file list what values are valid for `update_cmd` and what
    they mean. `default` performs a general system-wide update, whereas a value such
    as `security` only applies security-related updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also of interest in `yum-cron.conf` is the `emit_via` option. The `stdio` value
    means any logging messages that may be generated by `yum-cron` will be passed
    through a standard output. Usually, this is captured by cron and written to `/var/log/cron`.
    Cron can be configured to e-mail the output, but you can also specifically configure
    `yum-cron` to e-mail the messages. If you want the output sent to you by `yum-cron`,
    change the value of `emit_via` to `email` and the value of `email_to` to your
    e-mail address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: yum-cron's configuration file lets us specify a specific update policy and notification
    options
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on automating software
    updates:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure automatic updates ([http://www.certdepot.net/rhel7-configure-automatic-updates](http://www.certdepot.net/rhel7-configure-automatic-updates))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling automatic updates in CentOS 7 and RHEL 7 ([http://linuxaria.com/howto/enabling-automatic-updates-in-centos-7-and-rhel-7](http://linuxaria.com/howto/enabling-automatic-updates-in-centos-7-and-rhel-7))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying installed RPM packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's been said the safest system is one that's *"powered off, cast in a block
    of concrete, and sealed in a lead-lined room with armed guards."* (Gene Spafford)
    Your CentOS system is probably concrete-free, which means it's at the risk of
    attack. This recipe shows you how to audit your system using `rpm` to make sure
    its installed software hasn't been compromised by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. Administrative
    privileges are also required, either by logging in with the `root` account or
    through the use of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is important to first make a backup of the RPM database at `/var/lib/rpm`.
    There are many ways to do this, but for the sake of this example, we''ll make
    an ISO image of the directory which you can then archive or burn to disc:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `genisoimage` and `wodim` packages for the necessary tools to create
    ISO images and to burn them to disc:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the ISO image with `genisoimage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If desired, burn the image with `wodim`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can delete the ISO file after burning it to disc if you have no plans to
    use it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the time comes to verify your system, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the backup database available. If you''ve burned the ISO file to disc,
    and assuming that it''s located at `/dev/cdrom`, use `mount` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the backup is an ISO file, use `mount` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the integrity of the installed `rpm` package against the backup copy
    of the database. `rpm` returns a list of the files that are different from the
    original package, so a successful audit should have no output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the integrity of all of the packages installed on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An attacker can alter files and replace programs with malicious copies on your
    system. Luckily, we can identify these changes using `rpm` to verify the integrity
    of files installed from a package. But to do this, we also need a database that
    we can trust. The integrity of the database used to compare file details is important
    because a smart attacker may also think to make changes there as well. It's important
    to make a read-only backup of the database regularly, perhaps before and after
    every time you install a new package or install updates. Then you can compare
    the state of the system's software against a trusted backup and be fully confident
    with the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can back up to any medium you wish: a removable USB thumb drive, a writable
    CD or DVD disc, remote storage, or even a high-capacity tape cartridge. The important
    thing is that it''s trustworthy. The recipe demonstrated making a backup of the
    `/var/lib/rpm` database as an ISO file, which can be burned to disc or copied
    around as-is and mounted read-only when needed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Long-time Linux users may remember the `mkisofs` and `cdrecord` programs. `genisoimage`
    and `cdrecord` are clones, and the former still exists in CentOS in the form of
    symlinks pointing to `genisoimage` and `cdrecord`.
  prefs: []
  type: TYPE_NORMAL
- en: The `-o` argument gives the name of the ISO file that will be created. `-R`
    creates the indexes necessary to preserve the length and casing of the filenames
    in our image, and `-v` indicates that `genisoimage` should be verbose so that
    we can see its progress. When it's finished, we'll have the `rpm-db-backup.iso`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`rpm-db-bckup.iso` is a suitable name if you''re going to burn the file to
    disc and delete it. If you plan on archiving the ISO file instead, you''ll want
    to consider including a timestamp in the name of when the backup was taken so
    that you can keep things organized. For example, the following command uses `date`
    to include the date and time in the filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**genisoimage -o rpm-db-bckup-$(date +"%Y-%m-%d_%H%M").iso -R -v /var/lib/rpm**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the recipe showed how to use `wodim` to burn the ISO to disc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `-v` argument puts `wodim` in verbose mode and the `dev` argument identifies
    the CD/DVD drive. The recipe assumed that `/dev/cdrom` is the appropriate device
    and you may need to modify the command depending on your system's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the trusted database available, we mounted the disc or ISO file. To
    mount the disc, we would place the disc in the drive and issue the following command
    (`/dev/cdrom` is the device and `/media` is the mount point its filesystem will
    be made available on):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To mount an ISO file, we issue the following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After the trusted database was made available, we used `rpm` with the `-V`
    option, which verifies an installed package. By default, `rpm` uses the files
    in `/var/lib/rpm` as the database, so we used the `--dbpath` option to override
    this and instead point to our trusted copy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'While we can provide one or more package names to check, the `-a` option will
    verify all of the packages installed on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`rpm` runs through a series of tests, checking the size of files and their
    permissions, and reports those that fail one or more tests. No output means the
    files installed on your system are exactly as they were when they were first installed
    by the package(s). Otherwise, `rpm` displays a dot for those tests that pass and
    one of the following mnemonic indicators to show which tests fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`S`: The size of the file has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`M`: The file''s permissions have changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5`: The MD5 checksum of the file does not match the expected checksum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L`: The symlink has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D`: The device has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`U`: The user owner of the file has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`G`: The owning group of the file has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`T`: The file''s timestamp has changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm` will also report if a file is missing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, not all discrepancies are bad. It''s up to us to know what changes
    are acceptable or not. Changes to a configuration file, for example, may be acceptable,
    but changes to a binary utility are certainly an indication of trouble. `rpm`
    differentiates configuration files by listing `c` next to the test results, which
    helps us differentiate them from other types of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Differences are reported when verifying the integrity of this system's packages
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on verifying the integrity
    of installed software:'
  prefs: []
  type: TYPE_NORMAL
- en: The `rpm` manual page (`man 8 rpm`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying files with Red Hat's RPM ([http://www.sans.org/security-resources/idfaq/rpm.php](http://www.sans.org/security-resources/idfaq/rpm.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wodim cannot open SCSI drive ([http://www.linuxquestions.org/questions/linux-software-2/wodim-cdrecord-cannot-open-scsi-drive-4175544944/](http://www.linuxquestions.org/questions/linux-software-2/wodim-cdrecord-cannot-open-scsi-drive-4175544944/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling a program from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern-day package managers make it easy to install software; with just a single
    command, we can install a program and its dependencies from any of our configured
    repositories. Yet an important value in the Linux community and free software
    movement is the ability to modify your software as you see fit (perhaps you want
    to fix a bug or add a new feature). For software written in a compiled language,
    such as C, this often means modifying the program's source code and compiling
    the code into an executable binary. This recipe walks you through compiling and
    installing the GNU Hello program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection. An unprivileged
    user account capable of escalating its privileges using `sudo` should also be
    available.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to compile and install the program from the source
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `sudo` to elevate your account''s privileges, install the `gcc` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the GNU Hello source code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the project''s directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `configure` script using the `--help` argument to view the project''s
    build options. The output can be quite lengthy and you may find it beneficial
    to paginate the content using `less`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `configure` script again, this time specifying any desired build options
    to generate a `Makefile` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke `make` which uses `Makefile` as a guide to compile the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `sudo` to again escalate your privileges, install the program and its
    supporting files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can run the `hello` program to display a friendly greeting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe taught you the canonical `configure`, `make`, and `make install`
    route of compiling and installing software from the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The minimal CentOS installation does not include a C compiler (a program that
    translates source code written in the C programming language into a binary, machine-executable
    format), so the first thing we did was install the GNU Compiler Collection. Because
    the package will be installed system-wide, elevated privileges were needed for
    `yum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since the GNU Hello project is written in C and includes a pregenerated `configure`
    script, `gcc` is all we need. There may be other projects though for which you''ll
    need additional software, such as `autoconf`, to generate a `configure` scripts,
    or compiler support for other languages like Fortran, C++, Objective-C, and Go.
    For a more capable build environment, consider installing the `Development Tools`
    package group:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**sudo yum groupinstall "Development Tools"**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we downloaded a copy of the project''s source code from its FTP server.
    The code is distributed as a compressed archive which we retrieved using `curl`.
    We omitted the `-O` argument that we used in previous recipes but piped the output
    directly to `tar` to decompress it. This results in the creation of a directory
    named `hello-2.10` that contains the project''s source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Quite often, a project will include several informative text files, so feel
    free to look around at the directory''s content. Some common files are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README`: This gives a general overview of the project (name, version, description,
    and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHANGELOG`: This lists the changes made in each release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSTALL`: This contains installation instructions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENCE`: This contains license information governing the use and distribution
    of the project''s code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the project uses the GNU Autotools build system (which GNU Hello uses), we
    can expect to find a `configure` script in the collection of source files. The
    job of `configure` is to scan our system's build environment to ensure that any
    necessary tools and dependencies are available and to generate the `Makefile`
    file. `Makefile` will contain instructions that compile and install the program,
    and any options we pass to `configure` ultimately find their way into `Makefile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what options are available to us, we first ran `configure` with `--help`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the options may be unique to the project while others are more general,
    having to do with setting paths and such as used in later parts of the build process.
    Some important general options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--prefix`: The base hierarchy in which the program and its files will be installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--disable-FEATURE`: This compiles the program without enabling the target
    feature that would otherwise be enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--enable-FEATURE`: This compiles the program with the optional target feature
    enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--with-PACKAGE`: This links to a specific library needed for some feature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second time we ran `configure`, we did so providing the `--prefix` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The prefix value of `/usr/local` means that this directory will be prefixed
    to the various paths where the different files will be installed to. For example,
    when we install the program, the compiled `hello` file is copied to `PREFIX/bin`,
    which is `/usr/local/bin`, the project's manual page will be installed under `PREFIX/share/man`,
    which is `/usr/local/share/man`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe installs GNU Hello as a system-wide accessible program. But don''t
    forget, you can use the `--prefix` option to compile and install files to personal
    directories too:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**./configure --prefix=/home/tboronczyk/.personal**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once `configure` generated `Makefile`, we executed those statements with `make`
    to compile the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `make` looks for a file named `Makefile` in the current directory
    to run. If for whatever reason the target script is named differently, we can
    tell `make` which file to use with its `-f` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, `Makefile` files often contain several sets of instructions or targets.
    Some common targets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all`: Compiles the program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check`: Runs any test suites that accompany the project to verify its proper
    functioning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean`: Deletes any intermediate files created during the compilation process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distclean`: Deletes the files created during the configuration process or
    compilation process, leaving only those files in the original distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dist`: Creates an archive to distribute the program'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: Installs the compiled program and any other necessary files to their
    final home on the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uninstall`: Deletes files that were installed by `install`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default target if none are provided is `all`.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, we don't want to compile software as `root` because it's possible for
    a `Makefile` to create arbitrary files in any location, something which can be
    taken advantage of by an attacker. Executing the file as a standard user blocks
    this attack vector simply because the unprivileged account doesn't have write-access
    to sensitive directories. This is why we used `sudo` only for the `install` target
    when we moved the program and its files to the directories under `/usr/local`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on building software:'
  prefs: []
  type: TYPE_NORMAL
- en: GNU Hello ([http://www.gnu.org/software/hello](http://www.gnu.org/software/hello))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RHEL7 Developer Guide ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Developer_Guide/index.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Developer_Guide/index.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autotools Mythbuster ([http://autotools.io/](http://autotools.io/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CentOS Wiki: Set up an RPM Build Environment ([http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment](http://wiki.centos.org/HowTos/SetupRpmBuildEnvironment))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
