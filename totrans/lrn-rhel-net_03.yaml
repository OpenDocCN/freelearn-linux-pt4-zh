- en: Chapter 3. Configuring Key Network Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It must be said that having a network is great and most fulfilling; however,
    the reasons for using that network must be challenged and understood. No one has
    a network for the sake of having a network, so we must bring services to our network
    to give it a purpose, meaning, and reason to exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, there are many and varied services that we can add, many of which
    are covered during the course of this book. To begin with, we will look at the
    following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: DNS (the name resolution)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP (the IP address assignment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NTP / PTP (time services)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP (e-mail)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain Name System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Domain Name System** (**DNS**) servers help us to resolve friendly computer
    names, such as [www.packtpub.com](http://www.packtpub.com), to a less human-friendly
    IP address, such as `83.166.169.231`. In this way, mere humans can access many
    computer systems by guessing the address or the DNS name. In the early days of
    UNIX computers, where access was limited to a few academic systems, hostnames
    were distributed by **Network Information Service** (**NIS**); a central computer
    maintained a single file that mapped hostnames to IP addresses. This file was
    then pushed out to client subscribers. Although this worked, it was clearly not
    scalable.'
  prefs: []
  type: TYPE_NORMAL
- en: In 1988, the first release of the DNS server was developed by four graduates
    from UCB (the University of California, Berkeley). This software in now maintained
    by the **ISC** (**Internet Systems Consortium**). Even today, it's still known
    as **Berkeley Internet Name Domain** (**BIND**).
  prefs: []
  type: TYPE_NORMAL
- en: 'On Red Hat Enterprise Linux 7.1, the version of the DNS server or bind that
    is shipped is 9.9.4\. Once installed, the version can be verified entering the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The DNS server can be installed and run without changes to the configuration.
    In this mode, it will operate as a *Local Caching Only* server. When operated
    in this manner, a server can resolve names on the Internet, but it does not host
    any of its own records. Additionally, in a setup without configuration changes,
    only localhost can query the server. In its simplest form, a caching-only server
    is still useful, but you will want to at least open the access control list to
    allow queries from your own network for it to be useful. In this way, computers
    on a local network can resolve names from a local server. Only the single server
    needs access to the Internet for name resolution, decreasing the Internet footprint
    of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring a Caching Only DNS server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, we will install the `bind` package on our system and configure
    it to resolve names for hosts on the local network. There is little to do here
    other than a simple change to the configuration file, but it will get us started.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `bind` from console, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With the package installed, we will now need to edit the `/etc/named.conf`
    configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will edit three existing lines as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`listen-on port 53 { 127.0.0.1; };` changes to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`listen-on-v6 port 53 { ::1; };` changes to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`allow-query { localhost; };` changes to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The changes that we have made are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows the DNS server to listen on all IPv4 interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disallow the DNS server to listen on IPv6, unless you need it to listen on IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows queries from my local network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusts the address range to match your network and the subnet mask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the changes in place, we will be able to save them. We can test the changes
    before we start the server. To do so, we will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be silent. The only output will occur if there are errors
    in the configuration. If you prefer an output, then you can make use of the `-p`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using this option, we will be presented with configuration options as they are
    interpreted by the service. If there are errors, we will only see errors and not
    the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now start and enable the DNS service with the `systemctl` command; the
    order in which commands are executed is not important:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For the purpose of these labs, we will not run the firewall at present. You
    can check this on your system using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s running, then either stop the firewall if it''s not required or enable
    the DNS traffic on UDP and the TCP port `53` to pass into the system. To stop
    and disable the firewall, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From the local system, we can test the name resolution using our DNS server;
    we will use the IP address of our server to prove that it''s accessible from the
    network, rather than just from the localhost alias. You can use the same command
    and make sure that the `@address` at the end of the sequence points to the address
    of your server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, use the IP address of your DNS server in place of the address we use.
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the **ANSWER** section in your output, detailing the address
    of the Packt server.
  prefs: []
  type: TYPE_NORMAL
- en: If you have another system on the same network, you can use the identical command
    to verify that it does indeed work for any host on your network.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, we will have a working DNS configured in the caching-only mode.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring clients to use this server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we were using the `dig` command before to test our DNS lookups, we had
    hardcoded the name server that we used, ignoring the client configuration. Traditionally,
    the client configuration file was `/etc/resolv.conf`. We can still use this, but
    more often in more modern Linux systems, this is overwritten by the NetworkManager
    service, which will read the name server from the interface configuration. In
    this way, we can use different DNS servers for different connection profiles.
    Of course, DNS will work with other operating systems as well, including your
    Microsoft Windows desktops and Apple iPhones. Very often, the DNS server list
    is handed out to the **DHCP** service (**Dynamic Host Configuration Protocol**),
    affecting the configuration across all DHCP clients. We will look at DHCP a little
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'On RHEL 7.1, we can use the following command to display an active connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: My active connection shows `eno16777736`; this is the same system that we worked
    with in the [Chapter 2](part0019.xhtml#aid-I3QM1 "Chapter 2. Configuring Network
    Settings"), *Configuring Network Settings*, where we looked at the consistent
    network device name that we find on modern Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can modify DNS servers for this configuration using the `nmcli` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the connection that is being modified relates to a traditional `ifcfg-`
    script, the corresponding file is also edited with the previous `nmcli` command.
    This is the case with the connection that we have modified. We can view the changes
    by looking at the file that `nmcli` modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To implement changes, we can restart the `NetworkManger` service as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now perform the DNS lookup with dig without the need to specify the
    address of our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have been able to configure the local client to resolve hostnames from
    the locally configured DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a quick solution, editing the `/etc/resolv.conf` file will work, but it may
    be overwritten if the changes are not made with the NetworkManager service.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the DNS zone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One reason to configure a local DNS server is to provide a centralized configuration
    for name lookups for your local servers. We will now look at how to configure
    a DNS zone to provide a name resolution for local servers. We will configure a
    zone called `tup.local.`; using the local suffix will ensure that the zone is
    configured locally and only available to DNS servers we configure with this zone.
  prefs: []
  type: TYPE_NORMAL
- en: As a caching-only DNS server, we have not hosted DNS zones thus far. A DNS zone
    is simply a text file that houses hostnames to IP address mappings. We can see?
    which zones we host in the `/etc/named.conf` file. Zone files are stored in the
    `/var/named` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the zone from /etc/named.conf
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within the bind configuration file, we must point to the zone file. The following
    example illustrates how this can be achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `named.conf` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following section at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do not forget the dot after the domain name: `tup.local`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the file configured and saved, we can check the configuration file as
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating the zone file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have configured the DNS server to point to the `named.tup` file. By default,
    this file needs to exist within the `/var/named/` directory on RHEL 7.1\. This
    directory location is dictated by the directory directive in the main options
    of the `named.conf` file. This extract is taken from the `/etc/named.conf` file
    and shows the configuration of the directory root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'First, create an empty zone file and set the permissions so that it can be
    read by the DNS server. The `touch` command will create an empty file. We set
    the permissions to be readable/writable by the user owner and only readable by
    the group owner. Finally, we set the permissions for the group owner of the file
    to named (the group used by the DNS server):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With the file and permissions in place, we can edit the file as root using
    `sudo`, so it reads similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the zone file](img/image00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can interpret the preceding screenshot line by line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ORIGIN tup.local.`: This sets the name of the DNS domain to be appended to
    all names not ending in a dot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$TTL 1D`: This directive sets the default time that records may be retrieved
    from cache **TTL** (**Time To Live**). The value is normally in seconds, but we
    can use letters defining larger units, such as `H` for hours, `D` for days, or
    even `W` for weeks. It''s possible to overwrite this default value within an individual
    DNS record. The larger the value assigned to TTL, the longer it will take to propagate
    changes on the Internet because records may still be served from cache for the
    TTL time period. The shorter the TTL is set, shorter the time to propagate changes,
    but more lookups will be performed on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ IN SOA ns1 root ( … )`: This sets the **Start Of Authority** (**SOA**) record
    for the `tup.local.` DNS domain. The `@` symbol represents this domain and the
    SOA record is set to the `ns1.tup.local` computer`.` Remember`$ORIGIN` and the
    e-mail contact is `root@tup.local.`. The brackets contain the serial number and
    timeouts used in the domain. The expiry record is overwritten by the `$TTL` directive
    where it''s used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NS ns1`: This sets the name server record for the domain. If we have additional
    slave servers, we can add more NS records in the zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ns1 A 192.168.40.3`: This sets the IP address mapping for the `ns1.tup.local.`
    server to the IP address we have set on the system. A single `A` represents an
    IPv4 address mapping, while `AAAA` will represent on IPv6 mapping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we complete the edit, we can check the zone syntax and integrity. In the
    command line, we enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the following screenshot from the demonstration
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the zone file](img/image00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having edited the `/etc/named.conf` file and implemented the new zone `/var/named/named.tup`
    database file, we are now ready to restart the service. We have also checked `named.conf`
    with the `named-checkconf` command and the zone file with the `named-checkzone`
    command, so we can be reassured of the integrity of the changes we have made;
    with this in mind, we will restart the service with `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `dig` or even just `ping` to check the operation of the zone now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Although we have only added a single record, there is nothing stopping us from
    adding more records as required. The serial number is normally incremented after
    zone changes, but it's used more to indicate when the changes have been made.
    Slave servers should synchronize these changes. If you have only the master server,
    there is no need to increment the serial number. Later in this chapter, we will
    add an **MX** or **Mail Exchange** record to support the use of e-mail delivery
    in the out domain.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a DHCP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **DHCP** (**Dynamic Host Configuration Protocol**) server is used to assign
    IP addresses to network hosts, rather than having to statically assign records
    to each host. This is, of course, particularly useful where guest devices—such
    as mobile phones and tablets—connect to you network.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Red Hat Enterprise Linux 7, a single DHCP server can supply IPv4 and IPv6
    configurations. Each configuration has its own separate file: `/etc/dhcp/dhcpd.conf`
    for IPv4 configurations and `/etc/dhcpd/dhcpd6.conf` for IPv6 configurations.
    Additionally, if you are used to the previous editions of Red Hat, there is no
    longer any need to configure the interface in `/etc/sysconfig/dhcp`. RHEL 7 will
    automatically listen on all interfaces that match a subnet definition in the `dhcpd.conf`
    or `dhcpd6.conf` file. In other words, interfaces that the DHCP server will listen
    for DHCP requests will match those interfaces that have addresses within the defined
    DHCP subnet.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have not configured the DNS server on the same system, you will need
    to create an empty lease file before the service will start, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can install the DHCP Server using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will configure the server to issue the IPv4 address configuration
    by editing the `/etc/dhcp/dhcpd.conf` file. The configuration file will be empty,
    except for a few comments. A simple configuration that is shown as follows, will
    match the configuration that we have been using on our demo system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting file should be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a DHCP server](img/image00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s interpret the preceding screenshot line by line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`option domain-name "tup.local";`: This configures the domain name to append
    to the client name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`option domain-name-servers 192.168.40.3;`: This sets the DNS server or servers.
    If more than one server is used, addresses are separated by spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default-lease-time 86400;`: This is a value specified in seconds, where we
    set the DHCP lease time. The value of `86400` is one day. The maximum lease time
    is similar, but it''s used only if a client requests a lease time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddns-update-style none;`: This disables the dynamic DNS, according to which
    the DHCP server will create DNS entries for clients that are issued with an IP
    address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log-facility local7;`: This sets the syslog facility that is used by DHCP.
    Entries in log files will be shown as coming from the `local7` facility. DHCP
    does not have its own facility entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then follows subnet definitions, where we describe the network, subnet mask,
    address, and options that will be issued for the subnet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this, we should now be familiar with the next step. Here, we start and
    enable the service using system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are running on a network where a DHCP server is already present, you
    will need to ensure that it's stopped before stating your own server. This includes
    the VMware Player and Virtual Box applications that can issue addresses on their
    private networks through their own DHCP service. Refer to your virtualization
    software for more help if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have additional RHEL 7 clients on a network, they can be forced to renew
    their DHCP leases with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will renew the DHCP lease on the Ethernet PCI card plugged
    in to the PCI bus address `12` and slot `0`. If a lease or leases have been issued
    by your server, you can check the leases file. This can be read as a standard
    user with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a lease from the demonstration RHEL 7.1 system
    and the lease for the host named `trusty`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a DHCP server](img/image00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With the DHCP server in place, we will move on to how to configure our basic
    networking services with a DNS and DHCP server. We will make this a little better
    by looking at time services.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring time services on RHEL 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the essential services on your network is the supply of accurate time.
    This is required for authentication with Active Directory or other Kerberos-based
    mechanisms and to make timestamps useful in log files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Network Time Protocol** (**NTP**) uses UDP and the traditional port `123`.
    This protocol dictates the number of seconds that have elapsed since midnight
    on January 1, 1900\. NTP is 32 bit, which means that the maximum time will be
    reached in 2036; however, as only the difference in timestamps is used rather
    than the actual time, the date does not present an issue unlike UNIX time ending
    in 2038, which is a little more serious.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the time service is started and synchronized with another time source,
    the client time can be changed to match the server's time as long as the time
    is said to be sane. Insane time is said to be a server, offering a time with more
    than 1000 seconds offset to the client. Using this level of sanity, a client is
    prevented from synchronizing with a rogue time source.
  prefs: []
  type: TYPE_NORMAL
- en: It's also possible to deploy **Precision Time Protocol** (**PTP**). This works
    with a hardware or software support on your **Network Interface Card** (**NIC**).
    Firstly, we will look at common NTP implementations and then look at PTP.
  prefs: []
  type: TYPE_NORMAL
- en: The provision of NTP on RHEL 7 can be done via the `chronyd` or `ntpd` daemon
    itself. The `chronyd` daemon is enabled by default; however, this is really designed
    for desktops and machines that are often disconnected from networks. Synchronization
    of time with `chronyd` is much quicker than `ntpd` and is therefore suitable for
    machines that are booted frequently or often suspended. The `ntpd` daemon is still
    preferred for servers because it supports more authentication options and can
    broadcast time over the network.
  prefs: []
  type: TYPE_NORMAL
- en: To help maintain accurate time even when the time server may not be available,
    both `chronyd` and `ntpd` can implement a drift file. The drift file is maintained
    on the client and shows the offset in the frequency of the local hardware clock
    and the frequency of the remote time source.
  prefs: []
  type: TYPE_NORMAL
- en: NTP is based on a hierarchy of servers. Each server is assigned a stratum number.
    The possible start values range from 0 to 15\. Stratum 16 indicates that time
    services are not available. A time server with a stratum value of 0 gets its time
    from a physical time source (such as a GPS clock or an atomic clock). A stratum
    1 server retrieves its time from a stratum 0 server, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing chronyd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the introduction of this section, `chronyd` is enabled by default
    on the RHEL 7.1 system we are using for this book. We can see the output of the
    status subcommand for this service with `systemctl` in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing chronyd](img/image00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding output of `sudo systemctl status`, `chronyd`
    is described as an NTP client/server. This is similar to what we expect from the
    traditional `ntpd` daemon. If `chronyd` acts as a service as well, then we should
    listen on port `123`. We can use the `netstat` command to display this. If we
    use the command with root privileges, we also see that the service holding the
    port open is `chronyd`. The `-p` option displays this, but requires root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'We run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing chronyd](img/image00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Going beyond what the output of `systemctl status` can display to use, we can
    see more detail on the synchronization status of `chronyd` using the `chronyc`
    command-line tool. Hopefully, you can see the pattern in the names now: `chronyd`
    for the service or daemon and `chronyc` for the command-line tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show which server has been selected and the status of synchronization, we
    will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the `chronyc` command. If you
    look carefully at the output, you will see the command and then the output that
    follows the issuance of the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing chronyd](img/image00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`Reference ID` shows the current server that we use to synchronize time with.
    `Frequency` shows as `ppm` (parts per million). This indicates the rate at which
    the system clock can become wrong if it was not synchronized. The value here of
    `0.8` means that after 1,000,000 seconds of not synchronizing, the clock will
    have an inaccuracy of `0.8` seconds; not at all bad. `Update Interval` shows how
    frequently we are currently synchronizing This expands to a much larger value
    than possible with `ntpd` being limited to 2 ^ 10 seconds (1024). This interval
    is quite permissible, given the accuracy of our clock.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following command, we can display all servers that we have configured
    to synchronize with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want an on screen display of the meaning of columns, we can use the `-v`
    option. The output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing chronyd](img/image00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If we want to synchronize ourselves with one of our own local time servers,
    we can edit the `/etc/chrony.conf` configuration file. It will seem reasonable
    to allocate one server on your network as a time server and use this server as
    a time reference for the network. The single server then can synchronize with
    external time sources. This ensures accurate time to all servers on the network
    while maintaining a small Internet footprint, thus limiting servers that need
    to access the time servers on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `server` directive within the configuration file defines potential synchronization
    partners. To set a bias towards your local server, the `prefer` option can be
    used. The following screenshot shows my edited file, where I leave just one of
    the original entries and add my own local time source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing chronyd](img/image00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For any changes to take effect, the `chronyd` service should be restarted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The frequency of synchronization will start slowly and gradually rise to match
    the accuracy of the offset frequency. Checking the output of `chronyc` tracking
    soon after the restart will show a value of 64 seconds for `Update Frequency`;
    however, this will increase to a larger interval over time.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing ntpd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to revert to the traditional `ntpd` daemon for time services, you
    can install the `ntp` package. The main advantage of the traditional package is
    the option of broadcast and stronger **ACL** (**Access Control List**). To install
    the package, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration file is located at `/etc/ntp.conf` and is not similar to
    the `chrony` file. When we edit `ntp.conf` in a similar way to `chrony.conf`,
    we will be able to configure a local server as before, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing ntpd](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The additional ACLs that we find here are defined using the `restrict` keyword.
    The local host address is not restricted at all, although everyone else is affected
    by the default restriction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default restriction is explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nomodify`: This prevents any changes to the configuration via the NTP protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notrap` : This prevents `ntpdc` control traps that are designed for use by
    the remote logging program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nopeer` :This prevents peer associations from being created, where 50 percent
    adjustments are made by each peer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noquery` :This prevents information on the status of the time server being
    accessed. Do not confuse this with preventing access to a time server. This option
    will still allow normal NTP time queries from clients. Should you want to restrict
    access to the time service, use `noserve`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you are comfortable with the changes made to your `/etc/ntp.conf` file,
    we will need first to stop and disable the `chronyd` service and then enable and
    start the `ntpd` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To query the status of a service, we will use the `ntpq -p` command. The output
    is shown in the following screenshot, indicating on my system that the server
    being used to synchronize with is `192.168.0.3` (indicated by asterix):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing ntpd](img/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing PTP on RHEL 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Precision Time Protocol** (**PTP**) like NTP is used to synchronize clocks
    on a network, but unlike NTP, if PTP is used with hardware support that can achieve
    sub-microsecond accuracy; support for PTP comes from your NIC in either software
    or hardware forms. The `linuxptp` package provides `ptp4l` and `phc2sys` programs
    (PTP for Linux and physical clock to system clock). However, `phc2sys` is only
    needed for hardware timestamping. Although implemented within NICs, many networking
    components (including switches) support PTP in software or hardware modes, thus
    enabling servers to synchronize time with their switch. The process is far more
    automated than traditional NTP and more accurate with each clock running the best
    master software that can select the best master to synchronize with. It''s best
    suited to Enterprise networks because switches will often provide time to devices
    they serve.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many NICs support software timestamping, but to query your own interface, use
    the following command, which will display the timestamping capabilities of your
    selected interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the preceding command to match the interface that you wish to interrogate.
    For the software support, we need to find the following lines in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_SOFTWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_TX_SOFTWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_RX_SOFTWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the hardware support, we will need the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_RAW_HARDWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_TX_HARDWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOF_TIMESTAMPING_RX_HARDWARE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output from my system is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install `linuxptp` on the system, we can use the following command to install
    from standard Red Hat repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The services can be run from the command line as a simple test. However, prior
    to this, we should stop NTP if it''s running. This is shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a service from the command line rather than as a daemon, we can verify
    that it works using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This starts the service using the interface we specify using the `-i` option,
    we ask output to go to the screen with the `-m` option and we set the software
    mode with the `-S` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The service will listen on UDP ports `319` and `320`. The output of the command
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we are happy with our configuration, we can create the startup configuration
    file and adjust the `sysconfig` file. We will start with the `sysconfig` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the interface option at the end of the line. The file should read the
    same as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will rename the existing configuration and create a minimal configuration
    that supports the same options that we used from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ptp4l.conf` file should be similar to adjusting the interface in order
    to match the interface on your own system. The following screenshot shows the
    `ptp4l.conf` file on my system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now ready to implement `ptp4l` as a service. With the `systemctl` command,
    we will be able to enable and start the service, as shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `status` subcommand to `systemctl` as in the previous commands, we
    will see the output similar to the following, indicating that the service has
    started and looking for clock announcements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the server is running, it may listen for other clock announcements and
    then negotiate as to which will be the grand master. In the following screenshot
    taken from the demonstration system, we can view the output of the `systemctl
    status` command. From the log extract, we can see the election of the new grand
    master:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing PTP on RHEL 7](img/image00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have now seen how to implement time services on Linux using either NTP, Cronyd,
    or PTP. With accurate time, we can now move forward to e-mail and **SMTP** (**Simple
    Mail Transfer Protocol**).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing e-mail delivery on RHEL 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default SMTP server used in the current release of RHEL is Postfix; the
    original Sendmail package is still available, but is no longer the default.
  prefs: []
  type: TYPE_NORMAL
- en: It's normal for the e-mail server to listen on the localhost or loopback address
    only when using default settings. In this way, local e-mail delivery is possible
    out of the box. This is used by many services, including the `crond` job schedule
    manager. If we wanted to enable Postfix to listen on all interfaces and receive
    messages from remote systems, there is a little configuration required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will back up and tidy the main configuration file. There is a tendency
    for many software packages to over comment their configurations. This can cause
    issues where you think that you have implemented a change; however, it was also
    set later on and you may not have noticed it. There are 679 lines in the default
    configuration file: `/etc/postfix/main.cf`. We will back up the file so that we
    do not lose comments and documentations, but we will also have a new working file
    with less than 10 percent of the number of lines. The following command shows
    how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This reduces the file from 679 lines to 25 lines and is far easier to work with.
    We can now edit this file without any distractions. We will add two new lines
    and edit two existing lines to the `/etc/postfix/main.cf` file. This will need
    to be edited as root.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will edit the `inet_interfaces = localhost` line so that it reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This will enable the SMTP service to listen on all interfaces, rather than just
    the loopback addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to make sure that we receive e-mails for the correct host and
    domain. This is controlled through the `mydestination` directive; however, we
    have to add the `myhostname` and `mydomain` directives before the `mydestination`
    line. These are the two lines that we add. We also need to add `$mydomain` to
    the existing `mydestination` line. On my system, these lines are set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the top few lines of the file where these changes
    have been implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing e-mail delivery on RHEL 7](img/image00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With these edits is place, we can save the file and restart the SMTP service.
    The following command shows how to restart the Postfix SMTP service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Adding an MX record to the DNS server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we are to receive an e-mail for the domain, we will need an MX record (e-mail
    exchange) to the DNS database that we created earlier in this section. The file
    that was used earlier for the `tup.local.` DNS domain was /`var/named/named.tup`.
    The record that we add for the MX or Mail Exchange record should be similar to
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: With this setting, we configure the MX or Mail Exchange priority to 10\. The
    lowest priority MX Record is the e-mail server that is used first if more than
    one e-mail server record exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated zone file is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an MX record to the DNS server](img/image00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With these updates in place, we can check the zone and restart the server.
    For convenience, the commands are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify that DNS is working with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the e-mail delivery, we should be able to send e-mails to the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We will be prompted for the `Subject` message and then we can enter the e-mail
    we wish. To end an e-mail, we will include a line with just the period or a dot
    character and nothing else. This should be delivered to the root on your system
    being recognized as the e-mail server for the domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the message system working in more detail, we can take a look at the
    log files. To see the recent activity, we can use the tail command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We now have a simple e-mail server to go with time, DNS, and DHCP services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to configure some of the fundamental network
    services often associated with Linux. We started off with how to set up the name
    resolution using DNS and ended up finishing on the same topic as we added e-mail
    server records to DNS. Having looked at DNS, we stayed alliteratively with D and
    studied DHCP, thus allowing a supply of IP configuration to the network. This
    took us to the complexities of the different time services that are on offer with
    `chronyd`, `ntpd`, and `ptp4l`. At the end of the chapter, we looked at a simple
    configuration of the Postfix SMTP server on RHEL 7\. This should give you a simple
    overview of services that you can expect to work with on a day-to-day basis with
    Enterprise Linux.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what is new on RHEL 7 and 7.1 and how to set
    up iSCSI storage services. You will find that the ISCSI target is now kernel-based
    and works very differently to the previous iSCSI target service on RHEL 6.
  prefs: []
  type: TYPE_NORMAL
