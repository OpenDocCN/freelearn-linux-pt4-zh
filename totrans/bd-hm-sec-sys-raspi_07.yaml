- en: Chapter 7. Building a Web-Based Control Panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've now got all of our hardware elements together for us to create a complete
    home-security system featuring contact switches for our doors and windows, and
    motion detectors and cameras to take happy snaps of wannabe intruders! I've deliberately
    guided you through this in a modular fashion so that you can pick and choose and
    expand on the hardware sensor elements that suit your requirements. In [Chapter
    9](ch09.html "Chapter 9. Putting It All Together"), *Putting It All Together*
    we will be wiring all of this together to form the complete system based on zones
    that we looked at earlier.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that all home security systems require is a **control panel** that
    allows us to **arm** and **disarm** the system and monitor the status of the zones
    within our system. We might also want to do things such as only arm certain zones,
    or have the system automatically arm and disarm at certain times of the day.
  prefs: []
  type: TYPE_NORMAL
- en: The hardware required for this, such as switches, LEDs, and LCD displays, can
    be quite expensive and time-consuming to put together; they can also make the
    system less configurable and flexible. So, in our system, we're going to build
    a Web-based control panel that we can access from our mobile phone browser. This
    also means that we can control the system remotely, when we are out of the house.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the scope of our home security in terms of the number of zones we will
    be monitoring and the I/O ports we will use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to install and configure a web server on our Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a basic HTML5 web page for our alarm control panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to use PHP scripts to dynamically configure our system from the
    web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several **web servers** readily available that we could install on
    our Raspberry Pi, and they would all be suitable for our system. But I like the
    **lighttpd** web server as it's easy to use and lightweight. lighttpd is often
    referred to, and affectionately known as, "Lighty"—which to be honest is less
    of a mouthful than lighttpd.
  prefs: []
  type: TYPE_NORMAL
- en: As well as the Web server itself, we're also going to install **PHP** support,
    which will allow us to write dynamic web pages to interact with the Linux system.
    Now, to be honest, I'm not a massive fan of PHP for commercial Web-based deployments
    for many reasons, but for a small embedded-Linux system such as our home security
    system, it's perfect and works really well. It's also quite straightforward to
    get into if you've never done server-side Web-scripting as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the following steps, you''ll need to be logged into your Raspberry
    Pi via the terminal console (for example, PuTTY):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the package installer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `lighttpd` Web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once installed, it will automatically start up as a background service, and
    will do so each time your Raspberry Pi starts up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install PHP5 support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to enable the PHP FastCGI module in our web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, we need to restart the Web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it! You should now have your PHP Web server installed. By default,
    the web content files get installed in the location, `/var/www`, and Lighty installs
    a test placeholder page in this location, which you can access from your browser
    by simply entering the IP address of your Raspberry Pi, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the web server](img/B04579_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Lighttpd placeholder page
  prefs: []
  type: TYPE_NORMAL
- en: Testing the PHP5 installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we''re at it, we should also test our PHP installation, as this is fundamental
    to building our console. This can be done by writing a simple PHP script page
    that, if PHP is installed correctly, will return information about its environment
    and configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to the web content folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Nano, create a file called `phpinfo.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the editor, enter just the following single line, then save and exit from
    Nano:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in your browser, enter the IP address of your Raspberry Pi followed by
    `/phpinfo.php`, for example, http://192.168.0.110/phpinfo.php, and you should
    be presented with the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the PHP5 installation](img/B04579_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The PHP info page generated by the Web server
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know our web server is working properly, we can start creating our
    console web page.
  prefs: []
  type: TYPE_NORMAL
- en: Being in control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So that we know what controls we want on our alarm control panel, we need to
    map out our system with the number of zone inputs and control inputs and outputs.
    As you'll remember from [Chapter 3](ch03.html "Chapter 3. Extending Your Pi to
    Connect More Things"), *Extending Your Pi to Connect More Things* we can essentially
    have up to 16 zones in our system using the two I/O ports on our port expander.
    We also have the eight GPIO pins at our disposal on the Raspberry Pi board itself.
    So, let's now allocate these outputs and document them in the table that follows.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to set up an 8-zone system for my alarm inputs using port A on the
    I/O expander board, using the native GPIO pins for things such as buttons and
    alert outputs. One reason for doing it in this configuration is that the system
    can always fail-safe—so if the expander board fails, the Raspberry Pi can still
    communicate alerts and buzzers connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: '| Port | I/O Pin | Label/Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Expander A | 0 (A0) | Zone 1 Input (Entry/Exit Channel) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1 (A1) | Zone 2 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 2 (A2) | Zone 3 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 3 (A3) | Zone 4 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 4 (A4) | Zone 5 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 5 (A5) | Zone 6 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 6 (A6) | Zone 7 Input |'
  prefs: []
  type: TYPE_TB
- en: '|   | 7 (A7) | Zone 8 – Anti-Tamper Loop Input |'
  prefs: []
  type: TYPE_TB
- en: '| Expander B | 0 (B0) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1 (B1) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 2 (B2) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 3 (B3) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 4 (B4) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 5 (B5) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 6 (B6) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 7 (B7) |   |'
  prefs: []
  type: TYPE_TB
- en: '| R-Pi GPIO | 0 (GP0) | Arm/Disarm Switch (Input) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 1 (GP1) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 2 (GP2) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 3 (GP3) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | 4 (GP4) | Armed LED (Output) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 5 (GP5) | Arm/Disarm Buzzer (Output) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 6 (GP6) | Alarm LED (Output) |'
  prefs: []
  type: TYPE_TB
- en: '|   | 7 (GP7) | Alarm Bell (Output) |'
  prefs: []
  type: TYPE_TB
- en: Arming yourself
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The terms *arm* and *disarm* are alarm system-speak for switching the alarm
    monitoring on (**arming** the system) and off (**disarming** the system). Zone
    1 of our system is going to be linked to the arming and disarming part of the
    system as it will be connected to the sensors on the door that we leave or enter
    from; this will be a special zone for **entry** or **exit** purposes.
  prefs: []
  type: TYPE_NORMAL
- en: When we set the alarm, we need a bit of time to get out of the house. The way
    that the system knows we've left the property is by monitoring the *exit* zone
    to see if we've opened and then closed the front door behind us within the time
    allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when we return, we will open the front door, but we don't want the
    alarm to go off straightaway—we need a chance to disarm the system within a given
    amount of time. We will arm and disarm the system via our web-based control panel,
    or by using a switch of some sort on the input GP0.
  prefs: []
  type: TYPE_NORMAL
- en: The master configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our system will use a **master configuration file** that will tell it how everything
    is set up and connected. This configuration file will be used by both the web
    control panel and the main alarm control scripts so that the two sub-systems can
    "talk" to each other. Let's create the file with our initial settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The settings file will be stored in the same location as where we will create
    our control scripts in [Chapter 9](ch09.html "Chapter 9. Putting It All Together"),
    *Putting It All Together*, which is in the folder. `/etc/pi-alarm`. So, let''s
    create this folder, and give it execute rights so that our scripts can be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now create the master configuration file, to be used by our system,
    in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As before, you don't have to create your files in Nano on the Raspberry Pi—you
    can create them on your desktop computer, and then transfer them to your Pi using
    SCP.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`alarm.cfg` file'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Web-based control panel is going to be a single PHP-driven HTML5 web page
    which will be **mobile optimized**. HTML5 is the latest mark-up standard for web
    pages and is supported by most modern smartphones and browsers. We will also create
    a **cascading style-sheet** (**CSS**) that will make our page look half reasonable
    on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: To create the web files, I recommend that you use something like the excellent
    Notepad++ on your desktop computer, rather than doing it directly on the Raspberry
    Pi. Alternatively, if you are a seasoned web developer, you may already have your
    IDE of choice.
  prefs: []
  type: TYPE_NORMAL
- en: The control panel HTML template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we'll do is create an HTML file that we can use to test our
    layout before we put the HTML into a PHP file to make it interact with our system.
    This makes it easier to tweak the way we want it to look beforehand, without the
    PHP scripts getting in the way.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is not a tutorial on Web development—there is a plethora of books out there
    on that subject—but I hope the code is clear enough for you to work out what's
    going on. The code I'm going to show you is fully functional, so you can just
    use what I give you without having to do any more. Hopefully, it makes your control
    panel look OK too!
  prefs: []
  type: TYPE_NORMAL
- en: The following mark-up gives you a basic control panel with status for our 8
    zones, a master arm and disarm switch, and switches to enable or disable any of
    our zones.
  prefs: []
  type: TYPE_NORMAL
- en: The `<head>` section of the code contains some `<meta>` tags that help mobile
    devices know that it's a mobile-friendly site. In the main `<body>` mark-up, we
    have a section for each zone that contains the zone's name and an on/off switch.
    Each zone is in its container so that we can also highlight a particular zone
    that needs our attention, for example, if it's triggered.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full HTML5 markup for our control panel in the `alarm-panel.html`
    file located inside the code folder of `chapter 7`.
  prefs: []
  type: TYPE_NORMAL
- en: Giving it some style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the moment, this page doesn''t look that great (in fact, it looks awful,
    like something from the 1990s); it isn''t particularly good for mobile devices
    and would most certainly fail the *sausage test*. So, we''re going to apply some
    styling to make it look not half bad. Although the preceding mark-up contains
    a reference to a CSS file—we haven''t created that file—so this is what our page
    currently looks like (as I said: it looks awful):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Giving it some style](img/B04579_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The web control panel without any styling
  prefs: []
  type: TYPE_NORMAL
- en: The following CSS3 mark-up is designed specifically for our control panel, and
    it makes it look quite nice while also making it usable on **touch-screen** mobile
    devices. The CSS is quite long and seems overwhelming, but you don't need to do
    anything with it, or understand it, if you don't want to—the only thing you need
    to know is that it's been designed for modern browsers and smartphones, so don't
    expect it to work on Internet Explorer 7, or probably even IE9!
  prefs: []
  type: TYPE_NORMAL
- en: 'In essence, it contains the styling for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the browser for our mobile layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our text and zone areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating cool switches instead of boring checkboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an area flash on and off when we need it to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Web control panel style sheet – `alarm-panel.css`
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the stylesheet and this is what you end up with (a little bit nicer,
    I think you''ll agree):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Giving it some style](img/B04579_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The web control panel with styling
  prefs: []
  type: TYPE_NORMAL
- en: Making it dynamic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the layout code defined for our control panel page, we can
    insert it in our PHP page so that it can be modified dynamically by the PHP script
    on the Web server, depending on the status of our home security system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The PHP script will help us achieve the following basic functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the configuration file with the position of the on/off switches for
    zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arming and disarming the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telling us which zone has been triggered when an intrusion has been detected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, I'm not going to go into detail about how the PHP code works, but hopefully
    the comments within the code will help you follow what's going on, and also help
    you modify it if you want to change its behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a bit of help first
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unless you change some of the PHP configuration, it can be a nightmare trying
    to work out what's gone wrong if you have a small bug in your code, as basically
    you are presented with…nothing!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, before we create and build our PHP page, we''ll change a couple of settings
    in the PHP configuration file to make sure we know if there are any issues:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the configuration file with **Nano**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The file is a bit large and unwieldy, but battle your way through it, find
    these settings, and change them as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit Nano.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, restart Lighty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The main PHP code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: And here it is… But don't run it yet—there's still a bit more to do…
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the full main PHP code in the `index.php` file located inside
    the code folder of `chapter 7`. In our Web server content folder, we should now
    have the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: I'm someone else
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, before we can actually open this PHP web page successfully, we need to
    be aware of the fact that the Web server, by default, actually runs as a different
    user called `www-data`. This means that it doesn't ordinarily have the right to
    perform certain operations; in particular, those that interact with the file system.
  prefs: []
  type: TYPE_NORMAL
- en: If you worked through the previous PHP script, you'll see that it actually executes
    some Linux commands to read and update our `alarm.cfg` file.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way that we have to put `sudo` in front of many commands because
    we're not the root user, it is true for other users as well, including `www-data`.
    So, to give the Web server rights to execute certain commands, we need to add
    it as a **sudoer**, using the **visudo** utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the utility to open the sudoer configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'At the bottom of the file, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then save the file and exit.
  prefs: []
  type: TYPE_NORMAL
- en: The final thing we have to do is create a small **Bash script** that will handle
    the task of updating settings in our `alarm.cfg` file. The reason why we need
    to do this is because we're going to use the Linux `sed` command to update the
    file. The way that we are invoking the `sed` command means that it needs to create
    a temporary file. Unless we do a bit of work with configuring the Web server because
    of its file location context, it won't work. So, it's easier to create a stub
    Bash script that is called by the PHP script. In this way, the Bash environment
    deals with the temporary file context.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we''ll create the following Bash script and save it in our `/etc/pi-alarm`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: update-alarm-setting.sh
  prefs: []
  type: TYPE_NORMAL
- en: 'And then we need to give the script execution rights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we should see in our `/etc/pi-alarm` folder at this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Right, after all that, I think we can now launch the control panel page in our
    browser at
  prefs: []
  type: TYPE_NORMAL
- en: '`http://<my-pi-ip>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php` is configured as a default page in Lighty''s config, so you don''t
    need to add it to the end of the URL; just the IP address will suffice.'
  prefs: []
  type: TYPE_NORMAL
- en: By changing the switch positions and then clicking on the **Update System**
    button, you should find that the setting values get updated accordingly in `alarm.cfg`.
    You can now see how this file will be the way for the status to be exchanged between
    our web console and the security system scripts that we'll develop in [Chapter
    9](ch09.html "Chapter 9. Putting It All Together"), *Putting It All Together*.
  prefs: []
  type: TYPE_NORMAL
- en: '![I''m someone else](img/B04579_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final operational control panel
  prefs: []
  type: TYPE_NORMAL
- en: Remote access to our control panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we can set up our system to receive email alerts when our system detects
    an intrusion, it would be really useful to be able to access our Web-based control
    panel wherever we are so that we can perhaps arm and disarm the system or switch
    off certain zones when we're not there.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in order to make this possible we need to do a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a dynamic DNS account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of us won't have a **fixed IP address** for the Internet connection in
    our home; it is likely to change from time to time, especially when we reboot
    or unplug our router, whereby our Internet service provider assigns us a new one
    when we next connect to them. Because of this, we can't rely on using the IP address
    to get to our home network when we're out and about. To solve this, we need to
    set up a **dynamic DNS** account that will allow us to set up a domain name for
    our home network (for example, *myhomenetwork.com*).
  prefs: []
  type: TYPE_NORMAL
- en: It works by having a service that runs inside your network, such as on your
    router or laptop, that updates the dynamic DNS service hosting your domain name
    with the current IP address of your Internet connection. Then, when you use your
    domain name in your browser, it will take you to a Web server on your home network.
  prefs: []
  type: TYPE_NORMAL
- en: Popular dynamic DNS providers out there include No-IP ([www.noip.com](http://www.noip.com))
    and DynDNS ([www.dyn.com](http://www.dyn.com)). You can also get a free DnsOMatic
    account with OpenDNS to manage your services ([www.dnsomatic.com](http://www.dnsomatic.com)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a dynamic DNS account](img/B04579_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: My Netgear NAS device has a DnsOMatic updater service add-on
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a dynamic DNS account](img/B04579_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: My Netgear Router has the option of updating a Dynamic DNS service
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi dynamic DNS client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since your Raspberry Pi-based home security system is likely to always be on,
    you might want to install the **ddclient** updater service on there instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can set it up for your particular service and account details
    using the following config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a static IP on your Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So that our home network always knows where to find your Raspberry Pi, we need
    to set up a **static IP address** on it, assuming that it currently acquires an
    IP address from your router's DHCP server each time it boots up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to edit the network settings on the Raspberry Pi. In Nano,
    open the following configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll probably find the Ethernet port configuration set to something like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change this configuration to be an unused static IP address on your network.
    In my case, I''ve set it to `192.168.0.99`. The gateway setting is the IP address
    of my Internet router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to restart the networking service—note that you''ll be disconnected
    from your terminal session. You''ll need to reconnect using the new IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you have any issues, simply restart the Pi with `sudo reboot` and all should
    be good when it comes back up.
  prefs: []
  type: TYPE_NORMAL
- en: Port-forwarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final piece of this puzzle is to make sure that our Internet router will
    direct incoming traffic on a given port to our Raspberry Pi's Web server. For
    the purpose of this example, I'm going to assume that we are going to stick to
    the default, port 80, on our Web server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A word about security**'
  prefs: []
  type: TYPE_NORMAL
- en: Given that our Web server will now be accessible from the outside world, we
    need to be mindful about securing our system properly. The two main ways to do
    this are to change the Web server port to a random number other than 80 (for example,
    8799) and add password protection to your site by applying basic authentication.
    Both of these can be done in the `lighttpd` configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most routers will allow you to set up **port-forwarding** as part of their
    **firewall** configuration. Essentially, setting this means that any incoming
    traffic from the Internet on a given TCP port will be allowed to pass through
    the router and will be directed to the device with the specified IP address. On
    my Netgear router, it''s set up as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Port-forwarding](img/B04579_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up port-forwarding on a Netgear router
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you enter your personal domain name in your browser, when you're away
    from home you should be taken to your alarm control panel.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might also want to consider opening up port 22 so that you can access the
    Raspberry Pi directly using PuTTy and SSH from outside your network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've now started building the software that will control our home security
    system by determining the format of the main configuration file. We've also installed
    a Web server and built a basic single-page control panel with PHP, HTML5, and
    CSS3, which can be accessed nicely on our mobile phone, allowing us to configure
    our system and view the status.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we've learned how to configure our home network and Raspberry Pi
    so that we can access our control panel when we're away from home.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](ch09.html "Chapter 9. Putting It All Together"), *Putting It
    All Together*, we'll put all of the electronic elements together and write the
    main scripts that will run the home security system. But before that, in the next
    chapter, we're going to look at a few other bits and pieces, such as adding other
    sensors, not necessarily related to intruder detection, to our home security system.
    We'll also look at how we can administer our entire Raspberry Pi system remotely
    using a Web browser, in addition to accessing our home security control panel.
  prefs: []
  type: TYPE_NORMAL
