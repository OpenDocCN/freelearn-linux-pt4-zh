- en: Chapter 7. Building a Web-Based Control Panel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：构建基于 Web 的控制面板
- en: We've now got all of our hardware elements together for us to create a complete
    home-security system featuring contact switches for our doors and windows, and
    motion detectors and cameras to take happy snaps of wannabe intruders! I've deliberately
    guided you through this in a modular fashion so that you can pick and choose and
    expand on the hardware sensor elements that suit your requirements. In [Chapter
    9](ch09.html "Chapter 9. Putting It All Together"), *Putting It All Together*
    we will be wiring all of this together to form the complete system based on zones
    that we looked at earlier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经把所有硬件元素都准备好了，以创建一个完整的家庭安全系统，系统包括门窗接触开关、运动探测器和摄像头，用来拍摄那些想当入侵者的“开心照”！我故意通过模块化的方式引导您完成这些步骤，以便您可以根据需求挑选和扩展适合的硬件传感器元素。在[第9章](ch09.html
    "第9章：集成所有功能")，*集成所有功能*，我们将把这些组件接线，构建基于区域的完整系统。
- en: One thing that all home security systems require is a **control panel** that
    allows us to **arm** and **disarm** the system and monitor the status of the zones
    within our system. We might also want to do things such as only arm certain zones,
    or have the system automatically arm and disarm at certain times of the day.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有家庭安全系统都需要一个**控制面板**，该面板可以让我们**启动**和**停止**系统，并监控系统内各区域的状态。我们还可能想做一些事情，比如只启动某些区域，或者让系统在一天中的特定时间自动启动和停止。
- en: The hardware required for this, such as switches, LEDs, and LCD displays, can
    be quite expensive and time-consuming to put together; they can also make the
    system less configurable and flexible. So, in our system, we're going to build
    a Web-based control panel that we can access from our mobile phone browser. This
    also means that we can control the system remotely, when we are out of the house.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的硬件，比如开关、LED 和 LCD 显示屏，可能会相当昂贵且耗时；它们也可能使系统变得不那么灵活和可配置。因此，在我们的系统中，我们将构建一个基于
    Web 的控制面板，可以通过手机浏览器访问。这也意味着当我们不在家时，可以远程控制系统。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Defining the scope of our home security in terms of the number of zones we will
    be monitoring and the I/O ports we will use
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义我们的家庭安全系统的范围，包括我们将监控的区域数量以及我们将使用的 I/O 端口
- en: Learning how to install and configure a web server on our Raspberry Pi
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在我们的 Raspberry Pi 上安装和配置 web 服务器
- en: Developing a basic HTML5 web page for our alarm control panel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的报警控制面板开发一个基本的 HTML5 网页
- en: Learning how to use PHP scripts to dynamically configure our system from the
    web page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 PHP 脚本动态配置我们系统的网页
- en: Installing the web server
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 web 服务器
- en: There are several **web servers** readily available that we could install on
    our Raspberry Pi, and they would all be suitable for our system. But I like the
    **lighttpd** web server as it's easy to use and lightweight. lighttpd is often
    referred to, and affectionately known as, "Lighty"—which to be honest is less
    of a mouthful than lighttpd.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可供选择的**web 服务器**可以安装在我们的 Raspberry Pi 上，它们都适用于我们的系统。但是我更喜欢**lighttpd** web
    服务器，因为它易于使用且轻量级。lighttpd 通常被称作“Lighty”，说实话，比 lighttpd 这个名字更简短。
- en: As well as the Web server itself, we're also going to install **PHP** support,
    which will allow us to write dynamic web pages to interact with the Linux system.
    Now, to be honest, I'm not a massive fan of PHP for commercial Web-based deployments
    for many reasons, but for a small embedded-Linux system such as our home security
    system, it's perfect and works really well. It's also quite straightforward to
    get into if you've never done server-side Web-scripting as well.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 web 服务器本身，我们还将安装**PHP**支持，这将使我们能够编写动态网页与 Linux 系统进行交互。说实话，虽然有很多原因让我不太喜欢 PHP
    用于商业 Web 部署，但对于我们这样的嵌入式 Linux 系统，它是完美的，并且非常适用。如果您以前没有做过服务器端 Web 脚本，它也非常容易入门。
- en: 'To perform the following steps, you''ll need to be logged into your Raspberry
    Pi via the terminal console (for example, PuTTY):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行以下步骤，您需要通过终端控制台（例如 PuTTY）登录到 Raspberry Pi：
- en: 'Update the package installer:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新软件包安装器：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the `lighttpd` Web server:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `lighttpd` Web 服务器：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once installed, it will automatically start up as a background service, and
    will do so each time your Raspberry Pi starts up.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装后，它将自动作为后台服务启动，并且每次 Raspberry Pi 启动时都会启动。
- en: 'Install PHP5 support:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 PHP5 支持：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we need to enable the PHP FastCGI module in our web server:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的 web 服务器中启用 PHP FastCGI 模块：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And finally, we need to restart the Web server:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要重启 Web 服务器：
- en: '[PRE4]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That''s it! You should now have your PHP Web server installed. By default,
    the web content files get installed in the location, `/var/www`, and Lighty installs
    a test placeholder page in this location, which you can access from your browser
    by simply entering the IP address of your Raspberry Pi, as shown in the following
    screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你应该已经成功安装了 PHP Web 服务器。默认情况下，网页内容文件将被安装在 `/var/www` 位置，Lighty 会在此位置安装一个测试占位符页面，你可以通过在浏览器中输入树莓派的
    IP 地址来访问它，截图如下所示：
- en: '![Installing the web server](img/B04579_07_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![安装网页服务器](img/B04579_07_01.jpg)'
- en: The Lighttpd placeholder page
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Lighttpd 占位符页面
- en: Testing the PHP5 installation
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试 PHP5 安装
- en: 'While we''re at it, we should also test our PHP installation, as this is fundamental
    to building our console. This can be done by writing a simple PHP script page
    that, if PHP is installed correctly, will return information about its environment
    and configuration:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还应该测试 PHP 安装情况，因为它对构建我们的控制台至关重要。可以通过编写一个简单的 PHP 脚本页面来完成这项测试，如果 PHP 安装正确，它将返回有关环境和配置的信息：
- en: 'First, go to the web content folder:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，进入网页内容文件夹：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In Nano, create a file called `phpinfo.php`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Nano 中创建一个名为 `phpinfo.php` 的文件：
- en: '[PRE6]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the editor, enter just the following single line, then save and exit from
    Nano:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中，输入以下单行命令，然后保存并退出 Nano：
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, in your browser, enter the IP address of your Raspberry Pi followed by
    `/phpinfo.php`, for example, http://192.168.0.110/phpinfo.php, and you should
    be presented with the following page:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的浏览器中，输入树莓派的 IP 地址后跟 `/phpinfo.php`，例如 http://192.168.0.110/phpinfo.php，应该会呈现如下页面：
- en: '![Testing the PHP5 installation](img/B04579_07_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![测试 PHP5 安装](img/B04579_07_02.jpg)'
- en: The PHP info page generated by the Web server
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Web 服务器生成的 PHP 信息页面
- en: Now that we know our web server is working properly, we can start creating our
    console web page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的网页服务器正常工作，可以开始创建我们的控制台网页了。
- en: Being in control
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制中
- en: So that we know what controls we want on our alarm control panel, we need to
    map out our system with the number of zone inputs and control inputs and outputs.
    As you'll remember from [Chapter 3](ch03.html "Chapter 3. Extending Your Pi to
    Connect More Things"), *Extending Your Pi to Connect More Things* we can essentially
    have up to 16 zones in our system using the two I/O ports on our port expander.
    We also have the eight GPIO pins at our disposal on the Raspberry Pi board itself.
    So, let's now allocate these outputs and document them in the table that follows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了知道我们在报警控制面板上需要哪些控制项，我们需要绘制出系统的地图，列出区域输入和控制输入输出的数量。正如你从[第 3 章](ch03.html "第
    3 章 扩展你的树莓派连接更多设备")中记得的那样，*扩展你的树莓派连接更多设备*，我们可以使用 I/O 扩展器上的两个端口最多设置 16 个区域。我们还可以使用树莓派板上的八个
    GPIO 引脚。因此，让我们现在分配这些输出并将它们记录在下表中。
- en: I'm going to set up an 8-zone system for my alarm inputs using port A on the
    I/O expander board, using the native GPIO pins for things such as buttons and
    alert outputs. One reason for doing it in this configuration is that the system
    can always fail-safe—so if the expander board fails, the Raspberry Pi can still
    communicate alerts and buzzers connected to it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 I/O 扩展板的 A 端口为我的报警输入系统设置 8 个区域，使用原生 GPIO 引脚来连接按钮和警报输出。这样配置的一个原因是，系统可以始终保持安全故障模式——即使扩展板发生故障，树莓派仍然能够通信并触发连接到它的警报器和蜂鸣器。
- en: '| Port | I/O Pin | Label/Purpose |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 端口 | I/O 引脚 | 标签/用途 |'
- en: '| --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Expander A | 0 (A0) | Zone 1 Input (Entry/Exit Channel) |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 扩展器 A | 0 (A0) | 区域 1 输入（进/出通道） |'
- en: '|   | 1 (A1) | Zone 2 Input |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|   | 1 (A1) | 区域 2 输入 |'
- en: '|   | 2 (A2) | Zone 3 Input |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '|   | 2 (A2) | 区域 3 输入 |'
- en: '|   | 3 (A3) | Zone 4 Input |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|   | 3 (A3) | 区域 4 输入 |'
- en: '|   | 4 (A4) | Zone 5 Input |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|   | 4 (A4) | 区域 5 输入 |'
- en: '|   | 5 (A5) | Zone 6 Input |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | 5 (A5) | 区域 6 输入 |'
- en: '|   | 6 (A6) | Zone 7 Input |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '|   | 6 (A6) | 区域 7 输入 |'
- en: '|   | 7 (A7) | Zone 8 – Anti-Tamper Loop Input |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|   | 7 (A7) | 区域 8 – 防拆环路输入 |'
- en: '| Expander B | 0 (B0) |   |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 扩展器 B | 0 (B0) |   |'
- en: '|   | 1 (B1) |   |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|   | 1 (B1) |   |'
- en: '|   | 2 (B2) |   |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '|   | 2 (B2) |   |'
- en: '|   | 3 (B3) |   |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|   | 3 (B3) |   |'
- en: '|   | 4 (B4) |   |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '|   | 4 (B4) |   |'
- en: '|   | 5 (B5) |   |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '|   | 5 (B5) |   |'
- en: '|   | 6 (B6) |   |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|   | 6 (B6) |   |'
- en: '|   | 7 (B7) |   |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|   | 7 (B7) |   |'
- en: '| R-Pi GPIO | 0 (GP0) | Arm/Disarm Switch (Input) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| R-Pi GPIO | 0 (GP0) | 启动/解除开关（输入） |'
- en: '|   | 1 (GP1) |   |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   | 1 (GP1) |   |'
- en: '|   | 2 (GP2) |   |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   | 2 (GP2) |   |'
- en: '|   | 3 (GP3) |   |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|   | 3 (GP3) |   |'
- en: '|   | 4 (GP4) | Armed LED (Output) |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|   | 4 (GP4) | 武装 LED（输出） |'
- en: '|   | 5 (GP5) | Arm/Disarm Buzzer (Output) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|   | 5 (GP5) | 启动/解除警报器（输出） |'
- en: '|   | 6 (GP6) | Alarm LED (Output) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|   | 6 (GP6) | 警报 LED（输出） |'
- en: '|   | 7 (GP7) | Alarm Bell (Output) |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '|   | 7 (GP7) | 报警铃（输出） |'
- en: Arming yourself
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活自己
- en: The terms *arm* and *disarm* are alarm system-speak for switching the alarm
    monitoring on (**arming** the system) and off (**disarming** the system). Zone
    1 of our system is going to be linked to the arming and disarming part of the
    system as it will be connected to the sensors on the door that we leave or enter
    from; this will be a special zone for **entry** or **exit** purposes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*激活*和*解除激活*是报警系统中用于开启（**激活**系统）和关闭（**解除激活**系统）监控的术语。我们系统的第1区将与系统的激活和解除激活部分连接，因为它将连接到我们进出门的传感器；这个区域将是一个**入口**或**出口**用途的特殊区域。'
- en: When we set the alarm, we need a bit of time to get out of the house. The way
    that the system knows we've left the property is by monitoring the *exit* zone
    to see if we've opened and then closed the front door behind us within the time
    allowed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设置闹钟时，我们需要一些时间来离开房子。系统知道我们已离开房产的方式是通过监控*出口*区域，看我们是否在规定的时间内打开并关闭了前门。
- en: Similarly, when we return, we will open the front door, but we don't want the
    alarm to go off straightaway—we need a chance to disarm the system within a given
    amount of time. We will arm and disarm the system via our web-based control panel,
    or by using a switch of some sort on the input GP0.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当我们返回时，我们将打开前门，但我们不希望报警立刻响起——我们需要在规定的时间内有机会解除激活系统。我们将通过基于Web的控制面板或使用某种开关在输入GP0上来激活和解除激活系统。
- en: The master configuration file
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主配置文件
- en: Our system will use a **master configuration file** that will tell it how everything
    is set up and connected. This configuration file will be used by both the web
    control panel and the main alarm control scripts so that the two sub-systems can
    "talk" to each other. Let's create the file with our initial settings.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统将使用一个**主配置文件**，该文件会告诉系统所有设备如何设置和连接。这个配置文件将被Web控制面板和主报警控制脚本同时使用，使得两个子系统能够相互“通信”。让我们创建一个带有初始设置的文件。
- en: 'The settings file will be stored in the same location as where we will create
    our control scripts in [Chapter 9](ch09.html "Chapter 9. Putting It All Together"),
    *Putting It All Together*, which is in the folder. `/etc/pi-alarm`. So, let''s
    create this folder, and give it execute rights so that our scripts can be run:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 设置文件将存储在与我们将在[第9章](ch09.html "第9章. 整合")中创建控制脚本的相同位置，*整合所有内容*，也就是在`/etc/pi-alarm`文件夹中。因此，接下来我们创建这个文件夹，并赋予其执行权限，以便我们的脚本可以运行：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We''ll now create the master configuration file, to be used by our system,
    in this folder:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在这个文件夹中创建系统将使用的主配置文件：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As before, you don't have to create your files in Nano on the Raspberry Pi—you
    can create them on your desktop computer, and then transfer them to your Pi using
    SCP.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你不必在Raspberry Pi上使用Nano创建文件——你可以在桌面计算机上创建文件，然后通过SCP将其传输到你的Pi。
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`alarm.cfg` file'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`alarm.cfg` 文件'
- en: Creating the web page
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网页
- en: Our Web-based control panel is going to be a single PHP-driven HTML5 web page
    which will be **mobile optimized**. HTML5 is the latest mark-up standard for web
    pages and is supported by most modern smartphones and browsers. We will also create
    a **cascading style-sheet** (**CSS**) that will make our page look half reasonable
    on mobile devices.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基于Web的控制面板将是一个单一的PHP驱动的HTML5网页，并且是**移动优化的**。HTML5是最新的网页标记标准，得到大多数现代智能手机和浏览器的支持。我们还将创建一个**层叠样式表**（**CSS**），使我们的页面在移动设备上看起来更加合理。
- en: To create the web files, I recommend that you use something like the excellent
    Notepad++ on your desktop computer, rather than doing it directly on the Raspberry
    Pi. Alternatively, if you are a seasoned web developer, you may already have your
    IDE of choice.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建网页文件，我建议你在桌面计算机上使用像Notepad++这样的优秀工具，而不是直接在Raspberry Pi上创建。或者，如果你是经验丰富的Web开发者，你可能已经有了自己的IDE。
- en: The control panel HTML template
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制面板HTML模板
- en: The first thing we'll do is create an HTML file that we can use to test our
    layout before we put the HTML into a PHP file to make it interact with our system.
    This makes it easier to tweak the way we want it to look beforehand, without the
    PHP scripts getting in the way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的第一件事是创建一个HTML文件，用于在将HTML放入PHP文件之前测试布局，以便与系统交互。这可以让我们在不被PHP脚本干扰的情况下，先调整页面的外观。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is not a tutorial on Web development—there is a plethora of books out there
    on that subject—but I hope the code is clear enough for you to work out what's
    going on. The code I'm going to show you is fully functional, so you can just
    use what I give you without having to do any more. Hopefully, it makes your control
    panel look OK too!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一篇关于Web开发的教程——关于这个主题有大量的书籍可供参考——但我希望代码足够清晰，你能理解代码的运作方式。我将给你的代码是完全可用的，因此你可以直接使用我给你的代码，不必做其他操作。希望这也能让你的控制面板看起来还不错！
- en: The following mark-up gives you a basic control panel with status for our 8
    zones, a master arm and disarm switch, and switches to enable or disable any of
    our zones.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标记为你提供了一个基本的控制面板，显示我们8个区域的状态，一个主开关用于武装和解除武装，以及用于启用或禁用任何区域的开关。
- en: The `<head>` section of the code contains some `<meta>` tags that help mobile
    devices know that it's a mobile-friendly site. In the main `<body>` mark-up, we
    have a section for each zone that contains the zone's name and an on/off switch.
    Each zone is in its container so that we can also highlight a particular zone
    that needs our attention, for example, if it's triggered.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的`<head>`部分包含一些`<meta>`标签，帮助移动设备识别该网站是移动友好的。在主`<body>`标记中，我们为每个区域创建了一个包含区域名称和开关的部分。每个区域都有自己的容器，以便我们能够高亮显示需要关注的特定区域，例如，如果该区域被触发。
- en: You can find the full HTML5 markup for our control panel in the `alarm-panel.html`
    file located inside the code folder of `chapter 7`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`chapter 7`中的代码文件夹里找到完整的HTML5标记文件`alarm-panel.html`，它包含了我们控制面板的HTML5代码。
- en: Giving it some style
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给它一些样式
- en: 'At the moment, this page doesn''t look that great (in fact, it looks awful,
    like something from the 1990s); it isn''t particularly good for mobile devices
    and would most certainly fail the *sausage test*. So, we''re going to apply some
    styling to make it look not half bad. Although the preceding mark-up contains
    a reference to a CSS file—we haven''t created that file—so this is what our page
    currently looks like (as I said: it looks awful):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个页面看起来并不好（事实上，它看起来很糟糕，像是1990年代的产物）；它对移动设备并不友好，很可能无法通过*香肠测试*。因此，我们将应用一些样式，使它看起来不至于那么糟糕。虽然前面的标记中提到了一个CSS文件——但我们还没有创建那个文件——所以这就是我们当前页面的样子（如我所说：它看起来糟糕）：
- en: '![Giving it some style](img/B04579_07_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![给它一些样式](img/B04579_07_03.jpg)'
- en: The web control panel without any styling
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 没有样式的Web控制面板
- en: The following CSS3 mark-up is designed specifically for our control panel, and
    it makes it look quite nice while also making it usable on **touch-screen** mobile
    devices. The CSS is quite long and seems overwhelming, but you don't need to do
    anything with it, or understand it, if you don't want to—the only thing you need
    to know is that it's been designed for modern browsers and smartphones, so don't
    expect it to work on Internet Explorer 7, or probably even IE9!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下CSS3标记专门为我们的控制面板设计，它使得控制面板看起来相当漂亮，同时也能在**触摸屏**移动设备上使用。虽然CSS代码很长，看起来有些让人不知所措，但你不需要对它做任何处理，也不需要理解它——你唯一需要知道的是，它是为现代浏览器和智能手机设计的，所以不要指望它能在Internet
    Explorer 7，甚至可能在IE9中正常工作！
- en: 'In essence, it contains the styling for the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，它包含以下样式：
- en: Preparing the browser for our mobile layout
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的移动布局准备浏览器
- en: Our text and zone areas
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的文本和区域区域
- en: Creating cool switches instead of boring checkboxes
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建酷炫的开关，替代单调的复选框
- en: Making an area flash on and off when we need it to
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要时让某个区域闪烁
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Web control panel style sheet – `alarm-panel.css`
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Web控制面板样式表 – `alarm-panel.css`
- en: 'Apply the stylesheet and this is what you end up with (a little bit nicer,
    I think you''ll agree):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 应用样式表后，效果如下（我认为看起来更漂亮了，你应该会同意）：
- en: '![Giving it some style](img/B04579_07_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![给它一些样式](img/B04579_07_04.jpg)'
- en: The web control panel with styling
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 带样式的Web控制面板
- en: Making it dynamic
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使其动态化
- en: Now that we have the layout code defined for our control panel page, we can
    insert it in our PHP page so that it can be modified dynamically by the PHP script
    on the Web server, depending on the status of our home security system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了控制面板页面的布局代码，我们可以将其插入到PHP页面中，这样PHP脚本就可以根据我们家庭安防系统的状态动态修改页面。
- en: 'The PHP script will help us achieve the following basic functions:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: PHP脚本将帮助我们实现以下基本功能：
- en: Updating the configuration file with the position of the on/off switches for
    zones
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新配置文件，包含各区域开关的位置
- en: Arming and disarming the system
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 武装和解除武装系统
- en: Telling us which zone has been triggered when an intrusion has been detected
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉我们在入侵被检测时，哪个区域被触发
- en: Again, I'm not going to go into detail about how the PHP code works, but hopefully
    the comments within the code will help you follow what's going on, and also help
    you modify it if you want to change its behavior.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我不打算详细讲解 PHP 代码的工作原理，但希望代码中的注释能帮助你理解正在进行的操作，同时也能帮助你在需要时修改它的行为。
- en: Getting a bit of help first
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 首先获得一些帮助
- en: Unless you change some of the PHP configuration, it can be a nightmare trying
    to work out what's gone wrong if you have a small bug in your code, as basically
    you are presented with…nothing!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 除非更改一些 PHP 配置，否则在代码中出现小错误时尝试找出问题可能会非常头疼，因为基本上你面对的是……什么都没有！
- en: 'So, before we create and build our PHP page, we''ll change a couple of settings
    in the PHP configuration file to make sure we know if there are any issues:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建和构建我们的 PHP 页面之前，我们将更改 PHP 配置文件中的一些设置，以确保我们知道是否存在任何问题：
- en: 'Open the configuration file with **Nano**:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Nano**打开配置文件：
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The file is a bit large and unwieldy, but battle your way through it, find
    these settings, and change them as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件有点大而且笨重，但是通过它，找到这些设置，并按以下方式进行更改：
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file and exit Nano.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并退出 Nano。
- en: 'Finally, restart Lighty:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，重新启动 Lighty：
- en: '[PRE14]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The main PHP code
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主 PHP 代码
- en: And here it is… But don't run it yet—there's still a bit more to do…
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样……但是现在别运行它——还有更多事情要做……
- en: 'You can find the full main PHP code in the `index.php` file located inside
    the code folder of `chapter 7`. In our Web server content folder, we should now
    have the following files:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`chapter 7`的代码文件夹内找到完整的主 PHP 代码。在我们的 Web 服务器内容文件夹中，现在应该有以下文件：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: I'm someone else
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我是另一个人
- en: Now, before we can actually open this PHP web page successfully, we need to
    be aware of the fact that the Web server, by default, actually runs as a different
    user called `www-data`. This means that it doesn't ordinarily have the right to
    perform certain operations; in particular, those that interact with the file system.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们实际能够成功打开这个 PHP 网页之前，我们需要意识到，默认情况下 Web 服务器实际上作为一个名为`www-data`的不同用户运行。这意味着它通常没有执行某些操作的权限；特别是那些涉及文件系统的操作。
- en: If you worked through the previous PHP script, you'll see that it actually executes
    some Linux commands to read and update our `alarm.cfg` file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经通过前面的 PHP 脚本工作过，你会发现它实际上执行了一些 Linux 命令来读取和更新我们的`alarm.cfg`文件。
- en: In the same way that we have to put `sudo` in front of many commands because
    we're not the root user, it is true for other users as well, including `www-data`.
    So, to give the Web server rights to execute certain commands, we need to add
    it as a **sudoer**, using the **visudo** utility.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们必须在许多命令前面加上`sudo`因为我们不是 root 用户一样，对其他用户也是如此，包括`www-data`。因此，为了给 Web 服务器赋予执行某些命令的权限，我们需要将其添加为一个**sudoer**，使用**visudo**实用程序。
- en: 'Run the utility to open the sudoer configuration file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 运行实用程序打开 sudoer 配置文件：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At the bottom of the file, add the following line:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件底部添加以下行：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then save the file and exit.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后保存文件并退出。
- en: The final thing we have to do is create a small **Bash script** that will handle
    the task of updating settings in our `alarm.cfg` file. The reason why we need
    to do this is because we're going to use the Linux `sed` command to update the
    file. The way that we are invoking the `sed` command means that it needs to create
    a temporary file. Unless we do a bit of work with configuring the Web server because
    of its file location context, it won't work. So, it's easier to create a stub
    Bash script that is called by the PHP script. In this way, the Bash environment
    deals with the temporary file context.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件事是创建一个小的**Bash 脚本**，用于处理更新我们的`alarm.cfg`文件中的设置任务。我们之所以需要这样做是因为我们将使用 Linux
    的`sed`命令来更新文件。我们调用`sed`命令的方式意味着它需要创建一个临时文件。除非我们在配置 Web 服务器时进行一些工作以处理其文件位置上下文，否则它将无法正常工作。因此，创建一个被
    PHP 脚本调用的简单的 Bash 脚本会更容易。这种方式下，Bash 环境处理临时文件上下文。
- en: 'So, we''ll create the following Bash script and save it in our `/etc/pi-alarm`
    folder:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将创建以下 Bash 脚本，并保存在我们的`/etc/pi-alarm`文件夹中：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: update-alarm-setting.sh
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: update-alarm-setting.sh
- en: 'And then we need to give the script execution rights:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要赋予脚本执行权限：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is what we should see in our `/etc/pi-alarm` folder at this time:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们在`/etc/pi-alarm`文件夹中应该看到以下内容：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Right, after all that, I think we can now launch the control panel page in our
    browser at
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，经过这一切，我想现在我们可以在浏览器中启动控制面板页面了，位于
- en: '`http://<my-pi-ip>`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://<my-pi-ip>`.'
- en: '`index.php` is configured as a default page in Lighty''s config, so you don''t
    need to add it to the end of the URL; just the IP address will suffice.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.php`被配置为Lighty的默认页面，因此你不需要将其添加到URL的末尾；只需要IP地址就可以了。'
- en: By changing the switch positions and then clicking on the **Update System**
    button, you should find that the setting values get updated accordingly in `alarm.cfg`.
    You can now see how this file will be the way for the status to be exchanged between
    our web console and the security system scripts that we'll develop in [Chapter
    9](ch09.html "Chapter 9. Putting It All Together"), *Putting It All Together*.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改开关位置，然后点击**更新系统**按钮，你应该会发现设置值在`alarm.cfg`中得到相应更新。现在你可以看到，这个文件将成为我们在[第9章](ch09.html
    "第9章：整合一切")中开发的Web控制台和安全系统脚本之间交换状态的方式，*整合一切*。
- en: '![I''m someone else](img/B04579_07_05.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![我是别人](img/B04579_07_05.jpg)'
- en: The final operational control panel
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最终操作控制面板
- en: Remote access to our control panel
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程访问我们的控制面板
- en: While we can set up our system to receive email alerts when our system detects
    an intrusion, it would be really useful to be able to access our Web-based control
    panel wherever we are so that we can perhaps arm and disarm the system or switch
    off certain zones when we're not there.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以设置系统在检测到入侵时接收电子邮件警报，但能在任何地方访问我们的基于Web的控制面板将非常有用，这样我们就可以在不在现场时，也许通过它来布防和撤防系统，或关闭某些区域。
- en: 'However, in order to make this possible we need to do a few things:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了实现这一点，我们需要做一些准备工作：
- en: Setting up a dynamic DNS account
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置动态DNS账户
- en: Most of us won't have a **fixed IP address** for the Internet connection in
    our home; it is likely to change from time to time, especially when we reboot
    or unplug our router, whereby our Internet service provider assigns us a new one
    when we next connect to them. Because of this, we can't rely on using the IP address
    to get to our home network when we're out and about. To solve this, we need to
    set up a **dynamic DNS** account that will allow us to set up a domain name for
    our home network (for example, *myhomenetwork.com*).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数家里没有**固定的IP地址**来连接互联网；它可能会时常变化，尤其是在我们重启或拔掉路由器时，互联网服务提供商会在我们重新连接时分配一个新的IP地址。因此，我们不能依赖IP地址来访问家庭网络，特别是在外出时。为了解决这个问题，我们需要设置一个**动态DNS**账户，这样我们就可以为我们的家庭网络设置一个域名（例如，*myhomenetwork.com*）。
- en: It works by having a service that runs inside your network, such as on your
    router or laptop, that updates the dynamic DNS service hosting your domain name
    with the current IP address of your Internet connection. Then, when you use your
    domain name in your browser, it will take you to a Web server on your home network.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过在你的网络内运行一个服务来工作，比如在路由器或笔记本电脑上，更新托管你域名的动态DNS服务，使用你当前的IP地址。然后，当你在浏览器中使用你的域名时，它将把你带到你家庭网络中的Web服务器。
- en: Popular dynamic DNS providers out there include No-IP ([www.noip.com](http://www.noip.com))
    and DynDNS ([www.dyn.com](http://www.dyn.com)). You can also get a free DnsOMatic
    account with OpenDNS to manage your services ([www.dnsomatic.com](http://www.dnsomatic.com)).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上流行的动态DNS提供商包括No-IP（[www.noip.com](http://www.noip.com)）和DynDNS（[www.dyn.com](http://www.dyn.com)）。你还可以通过OpenDNS获得一个免费的DnsOMatic账户来管理你的服务（[www.dnsomatic.com](http://www.dnsomatic.com)）。
- en: '![Setting up a dynamic DNS account](img/B04579_07_06.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![设置动态DNS账户](img/B04579_07_06.jpg)'
- en: My Netgear NAS device has a DnsOMatic updater service add-on
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Netgear NAS设备有一个DnsOMatic更新服务插件
- en: '![Setting up a dynamic DNS account](img/B04579_07_07.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![设置动态DNS账户](img/B04579_07_07.jpg)'
- en: My Netgear Router has the option of updating a Dynamic DNS service
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Netgear路由器提供更新动态DNS服务的选项
- en: The Raspberry Pi dynamic DNS client
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树莓派动态DNS客户端
- en: 'Since your Raspberry Pi-based home security system is likely to always be on,
    you might want to install the **ddclient** updater service on there instead:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你基于树莓派的家庭安全系统很可能始终开机，你可能更愿意在其上安装**ddclient**更新服务：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once installed, you can set it up for your particular service and account details
    using the following config file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以使用以下配置文件为你的特定服务和账户详细信息进行设置：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting up a static IP on your Raspberry Pi
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在树莓派上设置静态IP
- en: So that our home network always knows where to find your Raspberry Pi, we need
    to set up a **static IP address** on it, assuming that it currently acquires an
    IP address from your router's DHCP server each time it boots up.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的家庭网络始终知道在哪里找到你的树莓派，我们需要为其设置**静态IP地址**，假设它目前每次启动时从路由器的DHCP服务器获取IP地址。
- en: 'To do this, we need to edit the network settings on the Raspberry Pi. In Nano,
    open the following configuration file:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，我们需要编辑Raspberry Pi上的网络设置。在Nano中，打开以下配置文件：
- en: '[PRE23]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You''ll probably find the Ethernet port configuration set to something like
    this:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会发现以太网端口配置类似于以下内容：
- en: '[PRE24]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Change this configuration to be an unused static IP address on your network.
    In my case, I''ve set it to `192.168.0.99`. The gateway setting is the IP address
    of my Internet router:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此配置更改为您网络中未使用的静态IP地址。在我的例子中，我将其设置为`192.168.0.99`。网关设置为我的互联网路由器的IP地址：
- en: '[PRE25]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to restart the networking service—note that you''ll be disconnected
    from your terminal session. You''ll need to reconnect using the new IP address:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要重启网络服务—请注意，您将会断开当前的终端会话。您需要使用新的IP地址重新连接：
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you have any issues, simply restart the Pi with `sudo reboot` and all should
    be good when it comes back up.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何问题，只需使用`sudo reboot`重启Pi，重新启动后所有问题应该都会解决。
- en: Port-forwarding
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口转发
- en: The final piece of this puzzle is to make sure that our Internet router will
    direct incoming traffic on a given port to our Raspberry Pi's Web server. For
    the purpose of this example, I'm going to assume that we are going to stick to
    the default, port 80, on our Web server.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的最后一步是确保我们的互联网路由器能够将给定端口的传入流量定向到我们的Raspberry Pi的Web服务器。为了举例说明，我假设我们将保持Web服务器的默认端口80。
- en: Tip
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**A word about security**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于安全性的说明**'
- en: Given that our Web server will now be accessible from the outside world, we
    need to be mindful about securing our system properly. The two main ways to do
    this are to change the Web server port to a random number other than 80 (for example,
    8799) and add password protection to your site by applying basic authentication.
    Both of these can be done in the `lighttpd` configuration file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的Web服务器现在可以从外部访问，我们需要注意确保系统的安全性。实现这一点的两种主要方法是将Web服务器的端口更改为80以外的随机数（例如，8799），并通过应用基本身份验证为您的网站添加密码保护。这两者都可以在`lighttpd`配置文件中完成。
- en: 'Most routers will allow you to set up **port-forwarding** as part of their
    **firewall** configuration. Essentially, setting this means that any incoming
    traffic from the Internet on a given TCP port will be allowed to pass through
    the router and will be directed to the device with the specified IP address. On
    my Netgear router, it''s set up as shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数路由器都允许您将**端口转发**设置为其**防火墙**配置的一部分。基本上，设置这一项意味着来自互联网上某一给定TCP端口的任何传入流量将被允许通过路由器，并且会被定向到指定IP地址的设备。在我的Netgear路由器中，它的设置如下所示：
- en: '![Port-forwarding](img/B04579_07_08.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![端口转发](img/B04579_07_08.jpg)'
- en: Setting up port-forwarding on a Netgear router
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在Netgear路由器上设置端口转发
- en: Now, when you enter your personal domain name in your browser, when you're away
    from home you should be taken to your alarm control panel.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您在浏览器中输入您的个人域名时，即使您不在家，您也应该能够访问您的警报控制面板。
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You might also want to consider opening up port 22 so that you can access the
    Raspberry Pi directly using PuTTy and SSH from outside your network.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还希望考虑打开端口22，这样您就可以从外部网络使用PuTTy和SSH直接访问Raspberry Pi。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've now started building the software that will control our home security
    system by determining the format of the main configuration file. We've also installed
    a Web server and built a basic single-page control panel with PHP, HTML5, and
    CSS3, which can be accessed nicely on our mobile phone, allowing us to configure
    our system and view the status.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经开始构建控制家庭安全系统的软件，首先确定了主配置文件的格式。我们还安装了一个Web服务器，并使用PHP、HTML5和CSS3构建了一个基本的单页控制面板，该面板可以在我们的手机上良好访问，允许我们配置系统并查看状态。
- en: In addition, we've learned how to configure our home network and Raspberry Pi
    so that we can access our control panel when we're away from home.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们已经学习了如何配置家庭网络和Raspberry Pi，以便我们在不在家时也能访问控制面板。
- en: In [Chapter 9](ch09.html "Chapter 9. Putting It All Together"), *Putting It
    All Together*, we'll put all of the electronic elements together and write the
    main scripts that will run the home security system. But before that, in the next
    chapter, we're going to look at a few other bits and pieces, such as adding other
    sensors, not necessarily related to intruder detection, to our home security system.
    We'll also look at how we can administer our entire Raspberry Pi system remotely
    using a Web browser, in addition to accessing our home security control panel.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html "第9章. 整合所有内容")，*整合所有内容*，我们将把所有电子元件组合在一起，并编写运行家庭安全系统的主要脚本。但在此之前，在下一章中，我们将探讨一些其他的组件，比如将一些其他传感器添加到我们的家庭安全系统中，这些传感器不一定与入侵检测相关。我们还将了解如何通过Web浏览器远程管理整个Raspberry
    Pi系统，除了访问我们的家庭安全控制面板。
