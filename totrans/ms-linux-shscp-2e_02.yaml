- en: Creating Interactive Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建交互式脚本
- en: In [Chapter 1](f439f212-0f5f-4c9d-abdb-9f9b8c199a78.xhtml), *The What and Why
    of Scripting with Bash*, we learned how to create a script and use some of its
    basic elements. These included optional parameters that we can pass through to
    the script when it is executed. In this chapter, we will extend this by using
    the shell's built-in `read` command to allow for interactive scripts. Interactive
    scripts are scripts that prompt for information during the script's execution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一章](f439f212-0f5f-4c9d-abdb-9f9b8c199a78.xhtml)，*Bash 脚本的是什么以及为什么要使用*，我们学习了如何创建脚本并使用其中的一些基本元素。这些包括可选参数，我们可以在脚本执行时传递给脚本。在本章中，我们将通过使用
    shell 的内置`read`命令来扩展这一点，以允许交互式脚本。交互式脚本是在脚本执行过程中提示输入信息的脚本。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Using `echo` with options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选项的`echo`
- en: Basic script using `read`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`read`的基本脚本
- en: Script comments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本注释
- en: Enhancing read scripts with `read` prompts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`read`提示增强读取脚本
- en: Limiting the number of entered characters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制输入字符的数量
- en: Controlling the visibility of the entered text
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制输入文本的可见性
- en: Passing options
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递选项
- en: Read options values
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取选项值
- en: Try to be standard
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试遵循标准
- en: Enhancing learning with simple scripts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单脚本增强学习
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter02)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter02)'
- en: Using echo with options
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用带选项的`echo`
- en: 'So far, in this book we have been able to see that the `echo` command is very
    useful and is going to be used in many of our scripts, if not all of them. When
    running the `echo` command, the built-in command will be used unless we state
    the full path to the file. We can test this with the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中我们已经看到`echo`命令非常有用，并且将被用于许多我们的脚本中，如果不是所有脚本的话。在运行`echo`命令时，除非我们声明文件的完整路径，否则将使用内置命令。我们可以通过以下命令来测试这一点：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To gain help on the built-in command, we can use man bash and search for `echo`;
    however, the `echo` command is identical to the internal command, so we recommend
    that you use man echo in most cases in order to display the command options.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取内置命令的帮助，我们可以使用`man bash`并搜索`echo`；然而，`echo`命令与内部命令是相同的，因此我们建议在大多数情况下使用`man
    echo`来显示命令选项。
- en: 'The basic use of `echo` that we have seen so far will produce a text output
    and a new line. This is often the desired response, so we don''t need to be concerned
    that the next prompt will append to the end of the echoed text. The new line separates
    the script output from the next shell prompt. If we do not supply any text string
    to print, `echo` will print only the new line to `STDOUT`. We can test this with
    the following command, directly from the command line. We do not need to run `echo`
    or, in fact, any other command from a script. To run `echo` from the command line,
    we simply enter the command as shown:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的`echo`基本用法将产生文本输出和新行。这通常是期望的响应，因此我们无需担心下一个提示会附加到回显文本的末尾。新行将脚本输出与下一个
    shell 提示分开。如果我们没有提供任何文本字符串进行打印，`echo`将只打印新行到`STDOUT`。我们可以通过以下命令在命令行中直接测试这一点。我们不需要在脚本中运行`echo`或实际上任何其他命令。要从命令行运行`echo`，我们只需输入如下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will show a clear new line between the command we issued and the
    subsequent prompt. We can see this in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示命令与后续提示之间的明显新行。我们可以在下面的截图中看到这一点：
- en: '![](img/efb1c784-4e60-46cd-81ad-bbd50cace4c3.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efb1c784-4e60-46cd-81ad-bbd50cace4c3.png)'
- en: 'If we want to suppress the new line, which is especially useful if we are to
    prompt users, we can do this in the following two ways, with the help of `echo`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想抑制换行符，特别是在提示用户时非常有用，我们可以通过以下两种方式借助`echo`来实现：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The result will be to suppress the line feed. In the initial example, the `-n`
    option is used to suppress the line feed. The second example uses the more generic
    `-e` option, which allows escape sequences to be added to the text string. To
    continue on the same line, we use `\c` as the escape sequence.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将会抑制换行符。在初始示例中，使用了`-n`选项来抑制换行符。第二个示例使用了更通用的`-e`选项，它允许在文本字符串中添加转义序列。为了在同一行继续，我们使用`\c`作为转义序列。
- en: 'This does not look great as the final part of the script or when it is run
    from the command line, as the command prompt will follow. This is illustrated
    in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为脚本的最终部分，或者在命令行中运行时，这看起来并不好，因为命令提示符会跟随显示。以下截图展示了这一点：
- en: '![](img/da374c15-d11a-42ff-bc0c-f4c957d812a6.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da374c15-d11a-42ff-bc0c-f4c957d812a6.png)'
- en: Basic script using read
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `read` 的基本脚本
- en: 'When used as part of a script that prompts for user input, the suppression
    of the line feed is exactly what we want. We will begin by copying the existing
    `hello2.sh` script to `hello3.sh` and build an interactive script. Initially,
    we will use `echo` as the prompt mechanism, but, as we gradually enhance the script,
    we will generate the prompt directly from the shell built-in `read` command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为一个提示用户输入的脚本的一部分时，抑制换行正是我们想要的效果。我们将从将现有的 `hello2.sh` 脚本复制到 `hello3.sh` 开始，并构建一个交互式脚本。最初，我们将使用
    `echo` 作为提示机制，但随着脚本逐渐增强，我们将直接通过 shell 内置的 `read` 命令生成提示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit the `$HOME/bin/hello3.sh` script so that it reads as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `$HOME/bin/hello3.sh` 脚本，使其内容如下：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we execute the script, we will be greeted and prompted with whatever is typed.
    This is echoed using the `$REPLY` variable in the echo statement. As we have not
    yet supplied a variable name to the read built-in command, the default `$REPLY`
    variable is used. The script execution and output are shown in the following screenshot.
    Take some time to practice the script on your own system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行脚本时，我们将会看到问候语并提示输入用户输入的内容。这是通过 `echo` 语句中的 `$REPLY` 变量回显的。由于我们尚未为 `read`
    内置命令提供变量名，因此使用默认的 `$REPLY` 变量。脚本的执行和输出如下图所示。请花些时间在你的系统上实践这个脚本。
- en: '![](img/1f745d37-3805-4fc8-ba30-a6672c7a4e87.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f745d37-3805-4fc8-ba30-a6672c7a4e87.png)'
- en: This little step has taken us a long way and there are many uses for a script
    like this; we have all used installation scripts that prompt for options and directories
    as we run through the install. We accept that it is still quite trivial, but,
    as we delve into the chapter, we will get closer to some more useful scripts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这一小步让我们走了很远，这样的脚本有很多用途；我们都曾使用过在安装过程中提示选项和目录的安装脚本。我们接受它仍然非常简单，但随着我们深入这一章节，我们将逐步接近一些更有用的脚本。
- en: Script comments
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本注释
- en: 'We should always introduce commenting scripts early in the piece. A script
    comment is prefaced with a `#` symbol. Anything after the # symbol is a comment
    and is not evaluated by the script. The shebang, `#!/bin/bash`, is primarily a
    comment and, as such, is not evaluated by the shell. The shell running the script
    reads the whole shebang, so it knows which command interpreter to hand the script
    over to. A comment may be at the start of a line or partway into the line. Shell
    scripting does not have the notion of multi-line comments.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终在脚本的早期加入注释。脚本注释以 `#` 符号开始。`#` 符号后面的内容是注释，脚本不会对其进行求值。Shebang `#!/bin/bash`
    主要是一个注释，因此不会被 shell 求值。运行脚本的 shell 会读取整个 shebang，这样它就知道应该将脚本交给哪个命令解释器。注释可以位于行的开头，也可以在行中间。Shell
    脚本没有多行注释的概念。
- en: If you are not already familiar with comments, then please note that they are
    added to the script to describe who wrote the script, when it was written and
    last updated, and what the script does. They are the metadata of the script.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不熟悉注释，请注意它们是添加到脚本中的，用来描述谁编写了脚本，脚本何时编写和最后更新，以及脚本的作用。它们是脚本的元数据。
- en: 'The following is an example of comments in scripts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是脚本中注释的示例：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is good practice to comment, and add comments that explain what the code
    is doing and why. This will help you and your colleagues who need to edit the
    script at a later date.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的实践是注释代码，并添加解释代码作用和原因的注释。这将帮助你和你的同事在日后编辑脚本时理解它。
- en: Enhancing scripts with read prompts
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 `read` 提示增强脚本
- en: We have seen how we can use the built-in read to populate a variable. So far,
    we have used echo to produce the prompt, but this can be passed to read itself
    using the `-p` option. The `read` command will surpass the additional linefeed,
    so we reduce both the line count and the complexity to some degree.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用内置的 `read` 来填充变量。到目前为止，我们使用 `echo` 来产生提示，但这可以通过 `-p` 选项传递给 `read`
    本身。`read` 命令将会抑制额外的换行符，从而在一定程度上减少了行数和复杂性。
- en: 'We can test this at the command line itself. Try typing the following command
    to see `read` in action:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接在命令行上测试这一点。尝试输入以下命令来查看 `read` 的实际效果：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We use the `read` command with the `-p` option. The argument that follows the
    option is the text that appears in the prompt. Normally, we would make sure that
    there is a trailing space at the end of the text to ensure that we can clearly
    see what we type. The last argument supplied here is the variable we want to populate;
    we simply call it name. Variables are case-sensitive too. Even if we do not supply
    the last argument, we can still store the user's response, but this time in the
    `REPLY` variable.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用带有`-p`选项的`read`命令。选项后面的参数是提示符中出现的文本。通常，我们会确保文本的末尾有一个空格，以便清楚地看到我们输入的内容。这里提供的最后一个参数是我们想要填充的变量，我们简单地称之为name。变量也是区分大小写的。即使我们没有提供最后一个参数，我们仍然可以存储用户的响应，但这时它会存储在`REPLY`变量中。
- en: When we return the value of a variable, we use `$`, but not when we write it.
    In simple terms, when reading a variable we refer to `$VAR` and when setting a
    variable we refer to `VAR=value`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们返回一个变量的值时，我们使用`$`，但在写入时不使用。简单来说，当读取一个变量时，我们使用`$VAR`，而设置一个变量时，我们写作`VAR=value`。
- en: 'The `read` command with syntax using the `-p` option is shown as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-p`选项的`read`命令的语法如下：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can edit the script so that it appears similar to the following extract
    from `hello3.sh`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编辑脚本，使其看起来类似于`hello3.sh`中的以下摘录：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `read` prompt cannot evaluate commands within the message string, such as
    those we used before.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`提示符不能在消息字符串中执行命令，如我们之前使用的那些命令。'
- en: Limiting the number of entered characters
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制输入的字符数
- en: 'We have not needed this functionality in the scripts we have used so far, but
    we may need to ask users to hit any key to continue. At the moment, we have set
    it up in such a way that the variable is not populated until we hit the *Enter*
    key. Users have to hit *Enter* to continue. If we use the `-n` option followed
    by an integer, we can specify the number of characters to accept before continuing;
    we will set `1` in this case. Take a look at the following code extract:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们至今使用的脚本中并未需要此功能，但我们可能需要要求用户按任意键继续。目前，我们的设置方式是，在按下*Enter*键之前，变量并不会被填充。用户必须按*Enter*键才能继续。如果我们使用`-n`选项后跟一个整数，我们可以指定在继续之前接受的字符数；在这种情况下，我们将设置为`1`。请看以下代码摘录：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now the script will pause after displaying the name until we press any key;
    we can literally press any key before continuing, as we accept just 1 key stroke,
    whereas earlier we were required to leave the default behavior in place, as we
    could not know how long an entered name would be. We have to wait for the user
    to hit *Enter*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，脚本在显示名字后将暂停，直到我们按下任意键；我们可以按任何键继续，因为我们只接受一个按键输入，而之前我们必须保持默认行为，因为我们无法知道输入的名字有多长。我们必须等用户按下*Enter*键。
- en: We add an additional echo here to ensure that a new line is issued before the
    script ends. This ensures that the shell prompt starts on a new line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加了一个额外的echo命令，以确保脚本结束前会输出一个新行。这确保了shell提示符会在新的一行开始。
- en: Controlling the visibility of the entered text
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制输入文本的可见性
- en: 'Even though we have limited the input to a single character, we do get to see
    the text on the screen. In the same way, if we type the name, we get to see the
    entered text before we hit *Enter*. In this case, it is just untidy, but if we
    are entering sensitive data, such as a PIN or a password, we should hide the text.
    We can use the silent option, or `-s`, to achieve this. A simple edit in the script
    will set this in place:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们将输入限制为单个字符，我们仍然能看到屏幕上的文本。同样地，如果我们输入名字，在按下*Enter*键之前我们可以看到输入的文本。在这种情况下，它只是显得不整洁，但如果我们输入的是敏感数据，如PIN码或密码，我们应该隐藏文本。我们可以使用静默选项，或者`-s`，来实现这一点。脚本中的简单编辑将完成这一设置：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, when we use a key to continue, it will not be displayed on the screen.
    We can see the behavior of the script in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们按键继续时，文本将不会显示在屏幕上。我们可以在以下截图中看到脚本的行为：
- en: '![](img/8a3a1c4d-d287-4f35-9209-34a0d28f59fc.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a3a1c4d-d287-4f35-9209-34a0d28f59fc.png)'
- en: Passing options
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递选项
- en: So far, we have seen in the first chapter how to read parameters from the user.
    Also, you can pass options. So, what are options? And how are they different from
    parameters?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在第一章中学习了如何从用户那里读取参数。此外，你还可以传递选项。那么，什么是选项？它们与参数有何不同？
- en: Options are characters with a single dash before them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 选项是带有单一破折号的字符。
- en: 'Check out this example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 看这个例子：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-a` is an option. You can check from your script if the user entered this
    option; if so, then your script can behave in some manner.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`-a` 是一个选项。你可以在脚本中检查用户是否输入了这个选项；如果是，你的脚本可以根据这个选项执行某些操作。'
- en: 'You can pass multiple options:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以传递多个选项：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To print these options, you can use the `$1`, `$2`, and `$3` variables:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印这些选项，可以使用 `$1`、`$2` 和 `$3` 变量：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/00112873-5c8f-48e9-bbe6-da929c24c9ec.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112873-5c8f-48e9-bbe6-da929c24c9ec.png)'
- en: We should check these options, but, since we haven't discussed conditional statements
    yet, we will keep it simple for now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该检查这些选项，但由于我们还没有讨论条件语句，所以暂时保持简单。
- en: 'Options can be passed with a value, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选项可以像这样传递值：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here the `-b` option is passed with a value of `20`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`-b` 选项被传递，并且它的值是 `20`。
- en: '![](img/f49ffb2c-345c-4111-a6bf-7299bae26f75.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f49ffb2c-345c-4111-a6bf-7299bae26f75.png)'
- en: As you can see, the variable `$3=20`, which is the passed value.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，变量 `$3=20`，这是传入的值。
- en: This might not be acceptable to you. You need `$2=-b` and `$3=-c`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不符合你的要求。你需要 `$2=-b` 和 `$3=-c`。
- en: We will use some conditional statements to get these options correct.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些条件语句来确保这些选项正确。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you don't know about the while loop, it's not a problem; we will discuss
    conditional statements in detail in the coming chapters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不了解 `while` 循环，没关系；我们将在接下来的章节详细讨论条件语句。
- en: The `shift` command shifts the options one step to the left.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`shift` 命令将选项向左移动一步。'
- en: 'So, if we have three options or parameters and we use the `shift` command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们有三个选项或参数，并且使用 `shift` 命令：
- en: '`$3` becomes `$2`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$3` 变成了 `$2`'
- en: '`$2` becomes `$1`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$2` 变成了 `$1`'
- en: '`$1` is dropped'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$1` 被丢弃'
- en: It's like an action to move forward while iterating over the options using the
    while loop.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是在使用 `while` 循环遍历选项时，向前移动的一个动作。
- en: So, in the first loop cycle, `$1` will be the first option. After shifting the
    options, `$1` will be the second option and so on.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在第一次循环中，`$1` 会是第一个选项。选项移动后，`$1` 将是第二个选项，以此类推。
- en: If you try the previous code, you will notice that it still doesn't identify
    the values of options correctly. Don't worry, the solution is coming; just wait
    a little longer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试前面的代码，你会注意到它仍然没有正确识别选项的值。别担心，解决方案马上就来，稍等一下。
- en: Passing parameters with options
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传递带有选项的参数
- en: 'To pass parameters along with options simultaneously, you must separate them
    with a double dash, like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时传递参数和选项，你必须用双破折号分隔它们，像这样：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using the previous technique, we can iterate over the options till we reach
    the double dash, then we will iterate over the parameters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的技术，我们可以遍历选项直到遇到双破折号，然后我们将遍历参数：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now if we run it with parameters and options combined, we should see a list
    of options and another list of parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们将其与参数和选项一起运行，我们应该能看到选项列表和另一个参数列表：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/bc37cb87-8604-4816-8a01-d35bbfcbe25f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc37cb87-8604-4816-8a01-d35bbfcbe25f.png)'
- en: As you can see, anything passed after the double dash is treated as a parameter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，双破折号后传递的任何内容都会被视为参数。
- en: Read options values
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取选项值
- en: We have seen how to identify options and parameters, but we still need a way
    to read the options values correctly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何识别选项和参数，但我们仍然需要一种正确读取选项值的方法。
- en: You may need to pass a value for a specific option. How can this value be read?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要为特定选项传递一个值。如何读取这个值呢？
- en: We will check for the `$2` variable while the iteration goes through the options
    that we expect a value for.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在迭代过程中检查 `$2` 变量，针对我们期望有值的选项。
- en: 'Check the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/f03655e1-78fb-4bc8-99f1-ee6f69db10f8.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f03655e1-78fb-4bc8-99f1-ee6f69db10f8.png)'
- en: This looks good now; your script identifies the options and the passed value
    for the second option.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来不错；你的脚本已经能够识别选项和第二个选项的传递值。
- en: There is a built-in option for getting options from the users, which is using
    the `getopt` function.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个内建选项可以让用户获取选项，即使用 `getopt` 函数。
- en: Unfortunately, `getopt` doesn't support options with more than one character.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`getopt` 不支持多字符选项。
- en: There is a non-built-in program called `getopt`, which supports options larger
    than one character, but, again, the macOS X version doesn't support long options.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个非内建程序叫做 `getopt`，它支持多于一个字符的选项，但再次强调，macOS X 版本不支持长选项。
- en: Anyway, if you would like to read more about `getopt` usage, refer to the further
    reading resources given after this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果你想了解更多关于 `getopt` 的使用方法，可以参考本章后面的进一步阅读资源。
- en: Try to be standard
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试保持标准
- en: You may use bash scripts from GitHub, and you may notice that there is a standard
    option scheme that is followed. It's not required, but it is preferable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用来自 GitHub 的 bash 脚本，并且你可能会注意到，遵循了一种标准的选项方案。虽然这不是强制性的，但这是推荐的做法。
- en: 'These are some of the commonly used options:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些常用的选项：
- en: '`-a`: List all items'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`: 列出所有项目'
- en: '`-c`: Get a count of all items'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`: 获取所有项目的数量'
- en: '`-d`: Output directory'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`: 输出目录'
- en: '`-e`: Expand items'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e`: 展开项目'
- en: '`-f`: Specify a file'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-f`: 指定文件'
- en: '`-h`: Show the help page'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`: 显示帮助页面'
- en: '`-i`: Ignore the character case'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i`: 忽略字符大小写'
- en: '`-l`: List a text'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l`: 列出文本'
- en: '`-o`: Send output to a file'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-o`: 将输出发送到文件'
- en: '`-q`: Keep silent; don''t ask the user'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-q`: 保持静默模式；不询问用户'
- en: '`-r`: Process something recursively'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`: 递归处理某些内容'
- en: '`-s`: Use stealth mode'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`: 使用隐身模式'
- en: '`-v`: Use verbose mode'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`: 使用详细模式'
- en: '`-x`: Specify an executable'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-x`: 指定可执行文件'
- en: '`-y`: Accept without prompting me'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-y`: 无需提示直接接受'
- en: Enhancing learning with simple scripts
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用简单脚本增强学习
- en: Our scripts are still a little trivial, and we have not looked at conditional
    statements so we can test for correct input, but let's take a look at some simple
    scripts that we can build with some functionality.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的脚本仍然有些简单，我们还没有学习如何使用条件语句来测试正确的输入，但让我们来看一些我们可以构建的具有某些功能的简单脚本。
- en: Backing-up with scripts
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脚本备份
- en: Now that we have created some scripts, we may want to back these up to a different
    location. If we create a script to prompt us, we can choose the location and the
    type of files that we want to backup.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一些脚本，可能希望将它们备份到其他位置。如果我们创建一个提示脚本，便可以选择我们想要备份的位置和文件类型。
- en: 'Consider the following script for your first practice. Create the script and
    name it `$HOME/backup.sh`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你第一次练习时可以使用的脚本。创建该脚本并命名为`$HOME/backup.sh`：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You will see that the file is commented; though, in black and white, the readability
    is a little difficult. If you have an electronic copy of this book, you should
    see the colors in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到该文件有注释；虽然是黑白显示，但可读性稍有困难。如果你有本书的电子版，你应该能看到以下截图中的彩色内容：
- en: '![](img/eae4e9df-999d-4a0a-b469-d3de9048748d.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eae4e9df-999d-4a0a-b469-d3de9048748d.png)'
- en: 'As the script runs, you may choose `.sh` for the files to backup and backup
    as the directory. The script execution is shown in the following screenshot, along
    with a listing of the directory:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本运行时，你可以选择`.sh`作为备份的文件类型，`backup`作为备份目录。脚本执行过程如下截图所示，并列出了目录：
- en: '![](img/3c16ef07-c383-425a-8264-3c39feca6afe.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c16ef07-c383-425a-8264-3c39feca6afe.png)'
- en: Now you can see that we can start to create meaningful scripts with trivial
    scripting; although we strongly urge adding error checking of the user input if
    this script is for something other than personal use. As we progress into the
    book, we will cover this.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到，我们可以开始使用简单的脚本创建有意义的脚本；尽管我们强烈建议，如果这个脚本用于个人以外的用途，应该添加用户输入的错误检查。随着我们继续深入书籍内容，我们将涉及到这一点。
- en: Connecting to a server
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到服务器
- en: Let's look at some practical scripts that we can use to connect to servers.
    Firstly, we will look at ping, and in the second script we will look at prompting
    for SSH credentials.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些可以用来连接到服务器的实用脚本。首先，我们将查看 ping 命令，接下来的脚本则会提示输入 SSH 凭证。
- en: Version 1 – ping
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本 1 – ping
- en: 'This is something we can all do, as no special services are required. This
    will simplify the `ping` command for console users who may not know the details
    of the command. This will ping the server for just three counts rather than the
    normal infinite amount. There is no output if the server is alive, but a failed
    server reports `sever dead`. Create the following script as `$HOME/bin/ping_server.sh`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们都能做的事情，因为不需要特殊服务。这将简化`ping`命令，尤其对于那些可能不熟悉该命令细节的控制台用户。该命令会对服务器进行三次 ping，而不是通常的无限次。如果服务器正常，则没有输出；如果服务器失败，则显示`server
    dead`。请创建以下脚本并命名为`$HOME/bin/ping_server.sh`：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows successful and failed outputs:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了成功和失败的输出：
- en: '![](img/6c3d2840-0f52-4c10-8c79-d168635d5c25.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c3d2840-0f52-4c10-8c79-d168635d5c25.png)'
- en: Version 2 – SSH
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本 2 – SSH
- en: 'Often SSH is installed and running on servers, so you may be able to run this
    script if your system is running SSH or you have access to an SSH server. In this
    script, we prompt for the server address and username, and pass them through to
    the SSH client. Create the following script as `$HOME/bin/connect_server.sh`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通常 SSH 已经在服务器上安装并运行，所以如果你的系统运行 SSH 或你可以访问 SSH 服务器，你可能能够运行此脚本。在这个脚本中，我们提示输入服务器地址和用户名，并将它们传递给
    SSH 客户端。将以下脚本创建为 `$HOME/bin/connect_server.sh`：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Use of the brace bracket is to delimit the variable from the `@` symbol in the
    last line of the script.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大括号的目的是为了将变量与脚本最后一行中的 `@` 符号分隔开。
- en: Version 3 – MySQL/MariaDB
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本 3 – MySQL/MariaDB
- en: 'In the next script, we will provide the detail for a database connection along
    with the SQL query to execute. You will be able to run this if you have a MariaDB
    or MySQL database server on your system, or one that you can connect to. For this
    demonstration, we will use Linux Mint 18.3 and MariaDB version 10; however, this
    should work for any MySQL server or MariaDB, from version 5 onwards. The script
    collects user and password information as well as the SQL command to execute.
    Create the following script as `$HOME/bin/run_mysql.sh`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们将提供有关数据库连接的详细信息，以及要执行的 SQL 查询。如果你的系统上有 MariaDB 或 MySQL 数据库服务器，或者你能够连接到一个数据库服务器，你将能够运行此脚本。为了演示，我们将使用
    Linux Mint 18.3 和 MariaDB 版本 10；然而，这应该适用于任何 MySQL 或 MariaDB 服务器，从 5 版本起。该脚本收集用户和密码信息以及要执行的
    SQL 命令。将以下脚本创建为 `$HOME/bin/run_mysql.sh`：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this script, we can see that we suppress the display of the MySQL password
    when we input it into the `read` command using the `-s` option. Again, we use
    `echo` directly to ensure that the next prompt starts on a new line.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们可以看到，在使用 `-s` 选项将 MySQL 密码输入到 `read` 命令时，我们抑制了密码的显示。同样，我们直接使用 `echo`
    以确保下一个提示符从新的一行开始。
- en: 'The script input is shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输入如下截图所示：
- en: '![](img/356f2b3d-3ee9-43f8-a629-81b7c1c4e83a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/356f2b3d-3ee9-43f8-a629-81b7c1c4e83a.png)'
- en: Now we can easily see the password suppression working and the ease of adding
    to the MySQL commands.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以轻松看到密码抑制功能的工作效果，以及向 MySQL 命令添加选项的简便性。
- en: Reading files
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文件
- en: The `read` command is not only used to read inputs from the user; you can use
    the `read` command to read files for further processing.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`read` 命令不仅用于从用户读取输入；你还可以使用 `read` 命令读取文件以供进一步处理。'
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We redirect the file content to the `while` command to read the content using
    the `read` command, line by line.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件内容重定向到 `while` 命令，使用 `read` 命令逐行读取内容。
- en: Finally, we print the line using the `echo` command.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `echo` 命令打印该行。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Feel proud that you now have your *I can read* badge for shell scripting. We
    have developed our scripts to be interactive and to prompt users for input during
    the script execution. These prompts can be used to simplify user operations on
    the command line. In this way, they do not need to remember the command-line options
    or have passwords that end up stored in the command-line history. When using passwords,
    we can simply store the value using the read `-sp` options.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为自己感到骄傲，因为你现在已经获得了 *我会读* 的 shell 脚本徽章。我们已经将脚本开发得具有互动性，并在脚本执行过程中提示用户输入。这些提示可以简化用户在命令行上的操作。通过这种方式，用户不需要记住命令行选项，也不需要存储最终出现在命令行历史记录中的密码。在使用密码时，我们可以简单地使用
    `-sp` 选项将值存储。
- en: Also, we saw how to pass options with and without values, and how to identify
    values correctly. We saw how to pass options and parameters at the same time,
    thanks to the double dash.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何传递带有和不带有值的选项，并正确识别值。我们看到了如何同时传递选项和参数，感谢双破折号。
- en: In the next chapter, we will take our time to look at the conditional statements
    in bash.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将花时间研究 bash 中的条件语句。
- en: Questions
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How many comments are in the following code?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码中有多少个注释？
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we have the following code:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有以下代码：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And we run the script with these options:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用这些选项运行脚本：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What is the result of running this code?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码的结果是什么？
- en: 'Check the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下代码：
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we run it with these options:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用这些选项运行它：
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What is the result?
  id: totrans-182
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果是什么？
- en: What is the dropped parameter?
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被丢弃的参数是什么？
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下内容，以获取与本章相关的更多阅读材料：
- en: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html)'
- en: '[https://ss64.com/bash/read.html](https://ss64.com/bash/read.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ss64.com/bash/read.html](https://ss64.com/bash/read.html)'
- en: '[http://www.manpagez.com/man/1/getopt/](http://www.manpagez.com/man/1/getopt/)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.manpagez.com/man/1/getopt/](http://www.manpagez.com/man/1/getopt/)'
- en: '[https://ss64.com/bash/getopts.html](https://ss64.com/bash/getopts.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ss64.com/bash/getopts.html](https://ss64.com/bash/getopts.html)'
