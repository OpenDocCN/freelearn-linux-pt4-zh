["```\n$Date = Get-Date\n\nif ($Date.DayOfWeek -in 'Saturday', 'Sunday') {\n    Write-Host 'We party on weekends!' -BackgroundColor Yellow -ForegroundColor Black\n}\n```", "```\n$Date = Get-Date\nif ($Date.DayOfWeek -in 'Saturday', 'Sunday') {\n    Write-Host 'It is a weekend!'\n}\nelse {\n    Write-Host 'It is a weekday.'\n}\n\n```", "```\n$Date = Get-Date\n\nif ($Date.DayOfWeek -in 'Saturday', 'Sunday') {\n    Write-Host 'We party on weekends!' -BackgroundColor Yellow -ForegroundColor Black\n}\nelseif ($Date.DayOfWeek -eq 'Wednesday') {\n    Write-Host 'Half the week is over, and I want to do so much more!'\n}\nelse {\n    Write-Host 'Work is worship. Ahem!'\n}\n```", "```\n$Date = Get-Date\n\nswitch ($Date.DayOfWeek) {\n    'Monday' { Write-Output 'Red' }\n    'Tuesday' { Write-Output 'Violet' }\n    'Wednesday' { Write-Output 'Indigo' }\n    'Thursday' { Write-Output 'Blue' }\n    'Friday' { Write-Output 'Green' }\n    Default { Write-Output 'Orange' }\n}\n```", "```\n$Date = Get-Date\n\nswitch -Wildcard ($Date.DayOfWeek) {\n    'Monday' { Write-Output 'Red' }\n    'Tuesday' { Write-Output 'Violet' }\n    'Wednesday' { Write-Output 'Indigo' }\n    'Thursday' { Write-Output 'Blue' }\n    'Friday' { Write-Output 'Green' }\n    'S*' { Write-Output 'Orange' }\n}\n```", "```\n...\n    'Monday' {\n        Write-Output 'Red'\n        break\n    }\n...\n```", "```\n$Date = Get-Date\n\nif ($Date.DayOfWeek -in 'Saturday', 'Sunday') {\n    Write-Host 'We party on weekends!' -BackgroundColor Yellow -ForegroundColor Black\n}\nelseif ($Date.DayOfWeek -eq 'Wednesday') {\n    Write-Host 'Half the week is over, and I want to do so much more!'\n}\nelse {\n    Write-Host 'Work is worship. Ahem!'\n}\n\nStart-Sleep -Seconds 5\n\n$Date = Get-Date\n\nswitch ($Date.DayOfWeek) {\n    'Monday' { Write-Output 'Wear red.'; break }\n    'Tuesday' { Write-Output 'Wear violet.'; break }\n    'Wednesday' { Write-Output 'Wear indigo.'; break }\n    'Thursday' { Write-Output 'Wear blue.'; break }\n    'Friday' { Write-Output 'Wear green.'; break }\n    Default { Write-Output 'Poor you, working today. Wear orange.'; break }\n}\n```", "```\n$GuestsRaw = Read-Host \"Enter the guest names, separated by commas\"\n$Guests = $GuestsRaw -split \",$([regex]'[\\s]*')\"\n\n$Guests | ForEach-Object { Write-Output \"Welcome, $PSItem!\" }\n```", "```\nPS> Mr Jain, Mr Jacobs, Ms Sanders, Mr Shah, Mr Hugo\n```", "```\nPS> @'\nName,Seat\nMr Jain,A-12\nMr Jacobs,C-28\nMs Sanders,B-17\nMr Shah,M-22\nMr Hugo,E-08\n'@ | Out-File -Path './chapter-08/05-Write-GuestSeatDetails.csv'\n```", "```\n$Guests = Import-Csv './chapter-08/05-Write-GuestSeatDetails.csv'\n\nforeach ($Guest in $Guests) {\n    $RowIdentifier = [byte][char](($Guest.Seat -split '-')[0].ToUpper())\n    $RowNumber = ($RowIdentifier - 64).ToString()\n\n    switch -Regex ($RowNumber) {\n        '1(1|2|3)$' { $RowNumber += 'th'; break }\n        '.?1$'      { $RowNumber += 'st'; break }\n        '.?2$'      { $RowNumber += 'nd'; break }\n        '.?3$'      { $RowNumber += 'rd'; break }\n        Default     { $RowNumber += 'th'; break }\n    }\n\n    $SeatNumber = ($Guest.Seat -split \"-\")[1]\n\n    if ($SeatNumber -gt 20) {\n        $Side = 'right'\n    }\n    else {\n        $Side = 'left'\n    }\n\n    Start-Sleep -Seconds 1\n    Write-Host \"Welcome, $($Guest.Name)! \" -NoNewline\n    Start-Sleep -Seconds 1\n    Write-Host \"Your seat is in the $RowNumber row, to the $Side the aisle.\"\n}\n```", "```\n$Guests = Import-Csv './chapter-08/05-Write-GuestSeatDetails.csv'\n\nfor ($CurrentGuest = 0; $CurrentGuest -lt $Guests.Length; $CurrentGuest++) {\n    $Guest = $Guests[$CurrentGuest]\n\n    $RowIdentifier = [byte][char](($Guest.Seat -split '-')[0].ToUpper())\n\n    $RowNumber = ($RowIdentifier - 64).ToString()\n\n    switch -Regex ($RowNumber) {\n        '1(1|2|3)$' { $RowNumber += 'th'; break }\n        '.?1$'      { $RowNumber += 'st'; break }\n        '.?2$'      { $RowNumber += 'nd'; break }\n        '.?3$'      { $RowNumber += 'rd'; break }\n        Default     { $RowNumber += 'th'; break }\n    }\n\n    $SeatNumber = ($Guest.Seat -split \"-\")[1]\n\n    if ($SeatNumber -gt 20) {\n        $Side = 'right'\n    }\n    else {\n        $Side = 'left'\n    }\n\n    Start-Sleep -Seconds 1\n    Write-Host \"Welcome, $($Guest.Name)! \" -NoNewline # Subexpression `$Guest.Name` to be computed first.\n    Start-Sleep -Seconds 1\n    Write-Host \"Your seat is in the $RowNumber row, to the $Side the aisle.\"\n}\n```", "```\n$Guests = Import-Csv './chapter-08/05-Write-GuestSeatDetails.csv'\n$CurrentGuest = 0\n\nwhile ($CurrentGuest -lt $Guests.Length) {\n    $Guest = $Guests[$CurrentGuest]\n\n    $RowIdentifier = [byte][char](($Guest.Seat -split '-')[0].ToUpper())\n    $RowNumber = ($RowIdentifier - 64).ToString()\n\n    switch -Regex ($RowNumber) {\n        '1(1|2|3)$' { $RowNumber += 'th'; break }\n        '.?1$'      { $RowNumber += 'st'; break }\n        '.?2$'      { $RowNumber += 'nd'; break }\n        '.?3$'      { $RowNumber += 'rd'; break }\n        Default     { $RowNumber += 'th'; break }\n    }\n\n    $SeatNumber = ($Guest.Seat -split \"-\")[1]\n\n    if ($SeatNumber -gt 20) { $Side = 'right' }\n    else { $Side = 'left' }\n\n    Start-Sleep -Seconds 1\n    Write-Host \"Welcome, $($Guest.Name)! \" -NoNewline\n    Start-Sleep -Seconds 1\n    Write-Host \"Your seat is in the $RowNumber row, to the $Side the aisle.\"\n\n    $CurrentGuest++\n}\n```", "```\n$Year = Read-Host \"Enter the year (YYYY) you would like to find Mothers’ Day for\"\n\n$CurrentDay = Get-Date \"01 May $Year\"\n\nwhile ($CurrentDay.DayOfWeek -ne 'Sunday') {\n    $CurrentDay = $CurrentDay.AddDays(1)\n}\n$MothersDay = $CurrentDay.AddDays(7)\n\nWrite-Output \"Mothers’ Day falls on $($MothersDay.ToLongDateString()).\"\n```", "```\nPS> Get-Content ./chapter-08/08-input-file.txt | ForEach-Object { New-Item $($PSItem -replace '\\.', \"$HOME/random\") -ItemType Directory }\n```", "```\ndo {\n    $AllDirectories = (Get-ChildItem -Path $HOME/random -Recurse -Directory).FullName\n    $EmptyDirectories = $AllDirectories | Where-Object {(Get-ChildItem $PSItem).Count -eq 0}\n    $EmptyDirectories | Remove-Item\n} while ($EmptyDirectories.Count -gt 0)\n```", "```\n$Iteration = 0\ndo {\n    $AllDirectories = (Get-ChildItem -Path $HOME/random -Recurse -Directory).FullName\n    $EmptyDirectories = $AllDirectories | Where-Object {(Get-ChildItem $PSItem).Count -eq 0}\n    $EmptyDirectories | Remove-Item\n\n    \"Iteration $Iteration. Removed the following $($EmptyDirectories.Count) directories.\"\n    $EmptyDirectories\n    $Iteration++\n} while ($EmptyDirectories.Count -gt 0)\n```", "```\n$Iteration = 0\ndo {\n    $AllDirectories = (Get-ChildItem -Path $HOME/random -Recurse -Directory).FullName\n    $EmptyDirectories = $AllDirectories | Where-Object {(Get-ChildItem $PSItem).Count -eq 0}\n    $EmptyDirectories | Remove-Item\n    $Count = $EmptyDirectories.Count\n\n    \"Iteration $Iteration`nRemoved the following $Count directories. '$Count = 0' is $($Count -eq 0)\"\n    $EmptyDirectories\n    $Iteration++\n} until ($Count -eq 0)\n```"]