- en: Chapter 7. Working with Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring a MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring MySQL replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a MySQL cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a MongoDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring a MongoDB database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a MongoDB replica set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an OpenLDAP directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring an OpenLDAP directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on three databases. First, you'll learn how to install
    one of the most widely used relational database servers, MySQL. You'll also learn
    how to set up master-slave replication to maintain mirror copies of your MySQL
    databases, and how to stand up a MySQL cluster to provide scalable, high-availability
    data storage. Next, we'll move to the world of NoSQL databases. You'll learn how
    to install the popular document-oriented database server MongoDB, and how to configure
    a MongoDB replica set (replication). Then you'll learn how to set up an LDAP directory
    server using OpenLDAP. For each of these databases, the chapter also has recipes
    to show you how to perform basic backup and restore tasks to keep your data safe.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to perform a basic installation of the popular MySQL
    database server on CentOS. MySQL is the second most widely used database system
    today, which is found across many different industries providing data storage
    for everything from dynamic websites to large-scale data warehouses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and administrative
    privileges either using the `root` account or `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install MySQL and create a new database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the repository configuration package for the Oracle-maintained MySQL
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the downloaded package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the MySQL repository is registered, install the `mysql-community-server`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the MySQL server and enable it to start automatically whenever the system
    reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `3306` in the system''s firewall to allow outside connections to
    MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the temporary password for MySQL''s `root` user from the server''s
    log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a new password for `root` using `mysqladmin`. When the program prompts
    for the current password, enter the temporary password found in the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `mysql` to connect to the MySQL server using the `root` account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a new database, execute a `CREATE DATABASE` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute a `CREATE USER` statement to create a MySQL user account for working
    with the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute a `GRANT` statement to assign the appropriate privileges to the account
    for the new database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute `FLUSH PRIVILEGES` to instruct MySQL to rebuild its privileges cache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Exit the MySQL client and return to the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We began by downloading the package that registers the Oracle-maintained MySQL
    repository on our system. MySQL is installed from the Oracle repository, because
    the CentOS repositories install MariaDB instead. After a series of acquisitions
    between 2008 and 2010, the MySQL codebase and trademark became the property of
    Oracle. Widespread concern over Oracle's stewardship and the future of MySQL prompted
    one of the original developers of MySQL to fork the project and start MariaDB.
    In 2014, the Red Hat and CentOS repositories replaced MySQL as the default database
    with MariaDB (welcome to the world of open-source politics).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MariaDB's goal is to remain a free, open-source project under the GNU GPL license
    and to be an "enhanced, drop-in replacement" for MySQL. For now, differences between
    the two are negligible to the casual user. But in the world of forked replacements,
    it's mainly the programming interfaces and communication protocols that remain
    compatible. Core functionality may remain the same initially, but new features
    are added independently as time goes on and the products' feature sets begin to
    diverge. MariaDB acknowledges this with a jump in versioning numbers. MariaDB
    5.1 offers the same features as MySQL 5.1, as does MariaDB 5.5 for MySQL 5.5\.
    However, MariaDB doesn't plan to implement all of MySQL 5.6's features and changed
    their version number to 10.0\. For those keeping score at home, the Oracle-maintained
    repository hosts MySQL 5.7 at the time of this writing. The CentOS repositories
    currently offer MariaDB 5.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The server that hosts the package assumes that people download the file using
    a web browser and issues a redirect to begin the download. Since we''re using
    `curl`, we supplied the `-L` argument to follow the redirects to reach the actual
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we installed the downloaded package. Once the repository is registered,
    we''re able to install MySQL with the `mysql-community-server` package. The package
    installs the server binaries, and the client utilities to work with MySQL are
    installed as dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL maintains its own user accounts and its administrative user is named
    `root`. Just like CentOS''s `root` user, you shouldn''t use the account for regular
    activities; it should be reserved for administrative tasks such as creating new
    users, granting privileges, and flushing the server''s caches. Other less-privileged
    accounts should be used for everyday activities. To protect the `root` account,
    its password is randomly generated the first time we start the MySQL server. We
    needed to search the log file where MySQL recorded the password so that we can
    set a new password of our own choosing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Knowing the temporary password, we used `mysqladmin` to change it. The `-u`
    option gives the username of the MySQL account, `-p` prompts us for the account''s
    password, and `password` is the utility''s subcommand used to change passwords.
    We entered the temporary password when prompted for the original and then we were
    asked to enter and confirm the new password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A random default password for `root` is a new behavior starting with MySQL 5.6,
    which writes the password to `/root/.mysql_secret`, whereas 5.7 writes it to the
    log file. In older versions, and thus MariaDB since 5.5 is installed by the CentOS
    repositories, the password is empty. The `validate_password` plugin is also activated
    in MySQL 5.7\. It requires the password to be eight characters or more with at
    least one number, one upper and one lowercase character, and one special character
    (that is, punctuation). Consider these requirements when choosing root's new password.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The temporary password is needed to set root's permanent password
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several clients that we can use to connect to MySQL and interact
    with our databases. This recipe used `mysql` since it will have been installed
    by default as a dependency. Again, `-u` identifies the account''s username and
    `-p` prompts us for its password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When running in interactive mode, the client displays the prompt `mysql>` at
    which we submit our SQL statements. After each query, the client displays the
    server's response, how long the statement took to execute, and if the server reported
    any errors or warnings.
  prefs: []
  type: TYPE_NORMAL
- en: 'We issued a `CREATE DATABASE` statement at the prompt to create the new database
    named `packt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we created a new user account with `CREATE USER` to avoid using `root`
    for our day-to-day work. The account is named `tboronczyk` and is allowed to authenticate
    from the localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: A system's hostname or IP address can replace `localhost` if the account will
    connect to the server from a different system. MySQL treats each username and
    hostname pair to be separate accounts though, for example `tboronczyk@localhost`
    and `tboronczyk@ 192.168.56.100` are different accounts and can have different
    privileges assigned to them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use wildcards in the hostname to create an account that can connect
    from multiple systems. The `%` wildcard matches zero or more characters, so it
    can be used to represent any system:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**CREATE USER "tboronczyk"@"%" IDENTIFIED BY "P@$$w0rd";**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'New accounts are created without any privileges, so we must assign them by
    executing a `GRANT` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The statement assigns the following privileges to the user for all tables (denoted
    by `*`) in the `packt` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE`: This allows the user to create databases and tables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DROP`: This allows the user to delete entire tables and databases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALTER`: This allows the user to change the definition of an existing table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOCK TABLES`: This allows the user to lock a table for exclusive read or write
    access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INDEX`: This allows the user to create table indexes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT`: This allows the user to add records to a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPDATE`: This allows the user to update records in a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SELECT`: This allows the user to retrieve records from a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: This allows the user to delete records from a table'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full list of privileges and what they permit a user to do can be found in
    the official MySQL documentation online at [http://dev.mysql.com/doc/refman/5.7/en/grant.html](http://dev.mysql.com/doc/refman/5.7/en/grant.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we instructed MySQL to rebuild its privileges cache using `FLUSH PRIVILEGES`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When MySQL starts up, it caches the user and permissions information in memory
    (you'll recall from [Chapter 5](ch05.html "Chapter 5. Managing Filesystems and
    Storage"), *Managing Filesystems and Storage*, that reading from memory is much
    faster than reading from disk) and then checks the cache every time a user performs
    an action to verify if they have sufficient privileges. We need to tell MySQL
    to update its cache whenever we create or delete a user account or grant or revoke
    an account's privileges, or else our changes will go unnoticed until the next
    time MySQL starts.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using `mysql` to connect to MySQL, you may frequently invoke it with additional
    options. A common option is `-h`, which identifies the hostname or IP address
    of the remote server if MySQL is running on a different system. `-e` executes
    a statement directly instead of launching `mysql` in interactive mode. Also, to
    work with a specific database, the name can be given either after the rest of
    the command or you can use `-D` to specify it. The following example demonstrates
    all of these by connecting to the MySQL server on `192.168.56.100` and executing
    a `SELECT` statement against its `sakila` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql` manual page (`man 1 mysql`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 5.7 reference manual ([http://dev.mysql.com/doc/refman/5.7/en](http://dev.mysql.com/doc/refman/5.7/en))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jump Start MySQL ([http://www.amazon.com/Jump-Start-MySQL-Timothy-Boronczyk/dp/0992461286](http://www.amazon.com/Jump-Start-MySQL-Timothy-Boronczyk/dp/0992461286))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL Tutorial ([http://www.mysqltutorial.org/](http://www.mysqltutorial.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring a MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to back up your MySQL databases using `mysqldump`.
    The utility connects to the MySQL server, queries the structure of the database
    and its data, and outputs the data in the form of SQL statements. The backup can
    then be used to restore the database or populate a new database with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a running MySQL server and access to either MySQL's `root`
    user or another user with the necessary privileges to perform the backup.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to make a backup of a MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the MySQL database you want to back up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute a `FLUSH TABLES` statement to set the database''s tables read-only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open a second terminal, leaving the first one active with the `mysql` client
    still running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the new terminal, use `mysqldump` to export the table definitions and data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Return to the first terminal once the backup is complete and exit `mysql` to
    unlock the tables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because the backup consists of SQL statements, you can recreate the database
    by importing the statements with `mysql`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The consequences of lost data can range from mild irritation to serious economic
    repercussions, so it's important to protect yourself with backups. Just think
    what would happen if your bank lost all of your financial records! The more important
    your data is to you and the more difficult it is to be recreated if it were to
    be lost, the more important it is to have backups in case something bad happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to making the backup, we connected to the server and executed `FLUSH
    TABLES`. The statement forces MySQL to finalize any data updates that may be pending
    and then sets the tables read-only to prevent modifications to the data while
    the backup is in progress. This ensures that the data in our backup is consistent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The tables remain read-only until we release the lock, either by executing an
    `UNLOCK TABLES` statement or by terminating the connection to the MySQL server,
    so we left the current session running and opened a second terminal to perform
    the backup. While the tables are read-only, any queries that retrieve data will
    execute, but those that update or insert data will be blocked.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Consider setting up MySQL replication as described in the *Configuring MySQL
    replication* recipe and then back up the slave's copy of the database to avoid
    any downtime. Stop replication on the slave, use `mysqldump` to export the data,
    and then resume replication. The master's tables don't need to be locked and any
    changes made on the master while replication is suspended will be replicated once
    the slave comes back online.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we used `mysqldump` to export all of the table definitions and data from
    the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep yourself organized by including the date in your backup filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqldump` queries the database to retrieve the data, so whichever account
    we use to perform the backup, it must have the necessary privileges. What exactly
    those permissions are, ultimately depends on your database''s schema. For example,
    the account needs the `SHOW VIEW` privilege if your database uses views. The same
    holds true for the account used to restore the database. You should keep this
    in mind if you want to use dedicated accounts for your backup and restore activities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To back up only certain tables, you can list them after the database. For example,
    the following backs up the `customers` and `addresses` tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also several options you can provide to `mysqldump` that affect what
    it includes in the backup. Here''s a list of some of the more commonly used ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-add-drop-table`: This does not include a `DROP TABLE` statement before
    any `CREATE TABLE` statements in the output. Without dropping a table first, the
    import process may fail on the `CREATE TABLE` statement when the backup is restored
    on a system that already has the tables defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--events`: This exports the definitions for any stored events associated with
    the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--hex-blob`: This outputs binary values using the hexadecimal notation. This
    can help protect against certain byte sequences being incorrectly interpreted,
    causing a restore to fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tables`: This backs up only the specific tables. This is an alternate way
    of specifying tables instead of listing them after the database name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--routines`: This exports the definitions for any stored procedures associated
    with the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--where`: This is a `WHERE` condition used to return only specific rows. For
    example, `--tables customers --where "last_name LIKE ''B%''"` will only export
    rows from the `customers` table for customers whose last name starts with B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find a complete list of options in the online documentation at [http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html](http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on making backups with
    `mysqldump`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mysqldump` manual page (`man 1 mysqldump`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL 5.7 Reference Manual: `mysqldump` ([http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html](http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backup and Restore MySQL Database Using `mysqldump` ([http://www.thegeekstuff.com/2008/09/backup-and-restore-mysql-database-using-mysqldump](http://www.thegeekstuff.com/2008/09/backup-and-restore-mysql-database-using-mysqldump))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring MySQL replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to configure MySQL's master-slave replication to
    maintain mirror copies of your databases in near real time.
  prefs: []
  type: TYPE_NORMAL
- en: To replicate data, the master MySQL server records details about any changes
    that take place (inserts, updates, and so on) to a file known as the binary log.
    Each slave server connects to the master's system, reads the information from
    the log file, and then duplicates the change to maintain their own local copy
    of the database. Each slave server is responsible for itself, which means we can
    bring a slave down for maintenance without affecting the availability of the master.
    Once it comes back online, the slave resumes replication from where it left off.
  prefs: []
  type: TYPE_NORMAL
- en: Replication can be useful in many situations. For example, if a full copy of
    the database is maintained on a slave, you can swap out the master server with
    little effort for a failover or disaster-recovery situation. For environments
    where scalability and performance are a concern, write operations can be performed
    by the master while intensive read operations can be handled by a collection of
    read-only slaves behind a load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe demonstrates how to configure MySQL replication using two systems.
    The first system is the master MySQL server, which we'll assume has the IP address
    `192.168.56.100`. The second system is the slave server and has the address `192.168.56.101`.
    You'll need administrative access on both systems either using the `root` account
    or `sudo` to complete the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Both systems should have MySQL installed as discussed by the earlier *Setting
    up a MySQL database* recipe. If you're setting up replication after one or more
    databases have already been created on the master, follow the *Backing up and
    restoring a MySQL database* recipe to back them up and import them to the slave
    before configuring replication. This ensures that replication starts with all
    databases in sync.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure master-slave replication for MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your text editor to open the master MySQL server''s configuration file
    at `/etc/my.cnf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `[mysqld]` section, add a new entry for the `server-id` option and set
    its value to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `log_bin` option and uncomment it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the server so that the changes will take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the master server using `mysql` and create a new account for slaves
    to use. The account requires the `REPLICATION SLAVE` privilege:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute `SHOW MASTER STATUS` to determine the master''s current position in
    writing to the binary log. Note the values returned for `File` and `Position`,
    as the information will be required to configure the slave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/image_07_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The master's status includes the name of the log file and the server's write
    position
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use your editor to open the slave''s configuration file. Add a new entry for
    the `server-id` option and set its value to `2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an entry for the `read-only` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the slave for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To configure communication with the master, connect to the slave using `mysql`,
    and execute a `CHANGE MASTER` statement. The values should reflect those returned
    by `SHOW MASTER STATUS` in step 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the replication process by executing `START SLAVE` on the slave system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute `SHOW SLAVE STATUS` to verify replication is running. The values returned
    for `Slave_IO_Running` and `Slave_SQL_Running` should both be `Yes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`SHOW SLAVE STATUS` returns a fair amount of information-listed as a table,
    column wrapping makes the output impossible to read. Using `\G` to execute the
    statement (as opposed to the semicolon) will make `mysql` display the results
    vertically which, in this case, is much more readable.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To stop replication, execute `STOP SLAVE` on the slave system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration began in the master's `/etc/my.cnf` file, where we added the `server-id`
    option to give the server a numeric identifier. Each server in the replication
    setup uses this value to identify itself to the others, so it must be unique across
    the environment. Then, we uncommented the `log_bin` option to instruct the server
    to record the details of each change to the binary log.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_07_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The master server's configuration file sets the server identifier and enables
    logging
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we created a dedicated account on the master server and granted it the
    `REPLICATION SLAVE` privilege. The slave will use this account to connect to the
    master and read from the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we executed `SHOW MASTER STATUS` command. The values of `File` and
    `Position` in the result identify the name of the binary log file and the server's
    current position in it. As the master writes to the log, the position increases
    and the suffix attached to the log's filename changes when the log files are rotated.
    We need to know the current position so we can configure the slave to begin reading/replicating
    from that point onward.
  prefs: []
  type: TYPE_NORMAL
- en: On the slave, we set the server's unique identifier and added the `read-only`
    option in the configuration file. If someone were to make a change in the slave's
    database that conflicts with an incoming update from the binary log, then replication
    would break. The `read-only` option is a safeguard that prevents users from updating
    the slave databases directly, ensuring all updates come from the master.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we set up the slave''s replication process using `CHANGE MASTER` statement.
    The `CHANGE MASTER` statement identifies the master, sets the username and password
    the slave will use to connect, and identifies the name of the log and the current
    position to start replicating from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Replication is started with `START SLAVE` and stopped with `STOP SLAVE`. The
    `SHOW SLAVE STATUS` returns information about the current state of replication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_07_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can check the slave's status to see whether replication is running without
    any issues
  prefs: []
  type: TYPE_NORMAL
- en: MySQL creates two background processes when replication is running-one communicates
    with the master (the IO process) and the other executes the SQL statements to
    maintain the local database (the SQL process). The `Slave_IO_Running` value shows
    whether the communication process is running or not, while the value of `Slave_SQL_Running`
    reflects whether or not the execution process is running. Both values should be
    `Yes` when replication is running.
  prefs: []
  type: TYPE_NORMAL
- en: If there's a problem with replication, the `Last_IO_Error` and `Last_SQL_Error`
    entries will report any errors thrown for their respective processes. You can
    also tell how far behind the slave is from the master by comparing the values
    of the `Master_Log_File` and `Read_Master_Log_Pos` fields with what the `SHOW
    MASTER STATUS` returns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current configuration enables the slave to replicate every database from
    the master, but we can also restrict replication to certain databases by adding
    the `replicate-do-db` entries in the slave''s `my.cnf` file. Multiple entries
    may be given, which will have one entry per database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use the `replicate-ignore-db` option to replicate everything
    except specific databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Replication can be filtered at the table-level as well, targeting and ignoring
    specific tables in a database using the `replicate-do-table` and `replicate-ignore-table`
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on replicating MySQL
    databases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL 5.7 Reference Manual: Replication ([http://dev.mysql.com/doc/refman/5.7/en/replication.html](http://dev.mysql.com/doc/refman/5.7/en/replication.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL Replication on RHEL 7 ([https://www.youtube.com/watch?v=kIfRXshR2zc](https://www.youtube.com/watch?v=kIfRXshR2zc))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL High Availability Architectures ([http://skillachie.com/2014/07/25/mysql-high-availability-architectures](http://skillachie.com/2014/07/25/mysql-high-availability-architectures))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replication Tips and Tricks in MySQL ([http://www.linux-mag.com/id/1661/](http://www.linux-mag.com/id/1661/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing up a MySQL cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe guides you through the process of setting up a MySQL cluster. Clustered
    databases meet the challenges of scalability and high-availability by partitioning
    the data across multiple systems and maintaining replicas to avoid single points
    of failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The members of a cluster are referred to as nodes. There are three node types
    in a MySQL cluster: data nodes, API nodes, and the management node. Data nodes
    are responsible for storing data. Users and processes then connect to an API node
    to access the database. The management node manages the cluster as a whole. Although
    multiple nodes can be installed on the same system, for example, both an API node
    and a data node may be hosted on the same system. However, hosting multiple data
    nodes on the same system is obviously not a good idea because it negates MySQL''s
    efforts to distribute the data.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe demonstrates how to deploy a MySQL cluster using four systems. The
    first system will host the management node and we'll assume that it has the IP
    address `192.168.56.100`. The second system will host the API node and have the
    address `192.168.56.101`. The remaining systems will be configured with data nodes
    and use the addresses `192.168.56.102` and `192.168.56.103`. You'll need administrative
    access on all four systems either using the `root` account or `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up a clustered MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the cluster archive from the MySQL website and extract its packages
    using `tar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On each system, install `perl-Data-Dumper` and replace the installed `mariadb-libs`
    package with the downloaded `MySQL-Cluster-shared` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `MySQL-Cluster-server` and `MySQL-Cluster-client` packages on each
    system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the system hosting the management node, create the `/var/lib/mysql-cluster`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the cluster''s configuration file for the management node at `/var/lib/mysql-cluster/config.ini`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the management node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `1186` in the management node system''s firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On each data node''s system, create the file `/etc/my.cnf` using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start each data node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `2202` in the data nodes'' systems'' firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `/etc/my.cnf` on the system hosting the API node using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start MySQL server as the API node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the `root` account''s temporary password that was created when the
    MySQL server was installed. It''s recorded in `/root/.mysql_secret`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a new password for the root account using `mysqladmin`. When prompted for
    the current password, enter the one identified in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `3306` in the API node system''s firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the status of the cluster using the `ndb_mgm` client on the system hosting
    the management node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe taught you how to set up a MySQL clustered database with two data
    nodes: one API node and one management node. The management node consists of the
    `ndb_mgmd` process that provides configuration information to the other nodes
    and monitors them. On the data nodes, the `ndbd` process handles the storage,
    partitioning, and replication of the clustered data. A MySQL server aware of the
    management node and the data nodes acts as the API node through which users can
    work with the clustered database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The packages available in the Oracle-maintained repository are built without
    support for Network Database (NDB), so we first downloaded an archive from the
    MySQL website that has packages which will install a version of MySQL that supports
    NDB/clustering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: MySQL abstracts the details of exactly how data is physically organized and
    manipulated, delegating this to its various storage engines. Different engines
    have different abilities. Since the NDB engine is the one that implements clustering,
    we need a build that supports the engine. Instead of writing curl's output to
    a file as we've done in other recipes, this time we piped the output directly
    to `tar` with the `x` argument to expand the archive on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterwards, we installed the `perl-Data-Dumper` package from the CentOS repository
    and replaced the `mariadb-libs` package already installed with the just downloaded
    `MySQL-Cluster-shared` package on each system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The `MySQL-Cluster-shared` package provides the shared libraries used by other
    programs to work with MySQL. These libraries replace the MariaDB version installed
    from the CentOS repositories by default and save us from experiencing library
    conflicts that would prevent a clean install. Since it's no longer needed afterwards,
    we uninstalled the `mariadb-libs` package.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the post-installation steps performed by Yum after it installs the `MySQL-Cluster-server`
    package are scripted in Perl and use Perl's `Data::Dumper` module. This makes
    the `Perl-Data-Dumper` package a dependency for the `MySQL-Cluster-server` package.
    However, a bug causes Yum to miss this, so we installed the package ourselves
    so that the `MySQL-Cluster-server` package's installation will proceed smoothly.
    It wouldn't prevent the package from installing, but it would have required us
    to complete some additional configuration steps manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the requirements in place, we then installed the `MySQL-Cluster-server`
    and `MySQL-Cluster-client` packages on each system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuration for the overall cluster is pretty much centralized with the management
    node in `/var/lib/mysql-cluster/config.ini`. The file is divided into several
    sections, the first being `[ndb default]`, which provides the default configuration
    values that should be used for the cluster. The values here apply to each node
    of the cluster unless overridden by a more specific directive in the respective
    node''s configuration section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `NoOfReplicas` option sets the number of replicas in the cluster. Its value
    may be set to `1` or `2`, although `2` is the recommended value. Recall that not
    only a clustered database is partitioned across the data nodes but it is also
    replicated; each node hosts a partition typically *1/n* the size of the database
    (where *n* is the number of data nodes) and also a replica of the other nodes.
    The cluster can still function if a system goes offline because its data is still
    available in the replica. A value of `1` for `NoOfReplicas` means that there would
    be only one copy of the database (no replica) and the availability of the database
    depends on all data nodes being up.
  prefs: []
  type: TYPE_NORMAL
- en: The data nodes hold their working copy of the database in RAM to reduce latency
    while periodically syncing the data to disk. The `DataMemory` option specifies
    how much RAM should be reserved for the data by the nodes and `IndexMemory` specifies
    how much memory should be reserved for primary keys and unique indexes. Whatever
    values you provide, be sure that sufficient resources are available to avoid RAM
    swapping.
  prefs: []
  type: TYPE_NORMAL
- en: The `ServerPort` option specifies the port number the nodes will use to communicate
    with one another. By default, MySQL would dynamically allocate ports to make it
    easier to run multiple nodes on the same system, but since this recipe runs each
    node on its own host system and we need to know the port to allow traffic through
    the firewall, we specified the port ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The subsequent sections in the configuration use the `hostname` option to specify
    the addresses at which the management node (via the `[ndb_mgmtd]` section), the
    API node (the `[mysqld]` section), and the data nodes (the `[ndbd]` section) are
    running. As made evident by the multiple `[ndbd]` sections, multiple sections
    of the same type will appear if there is more than one node of that type running
    in the cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'On the remaining systems, `/etc/my.cnf` is created as the configuration file
    used by the data nodes and the API node. Each includes a `[mysql_cluster]` section,
    which gives the `ndb-connectstring` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ndb-connectstring` option specifies the address of the system that hosts
    the management node. As the data and API nodes come online, they communicate with
    the manager to receive their configuration information. If your cluster has more
    than one management node, the additional nodes can be listed in the connection
    string separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the API node''s configuration includes the `[mysqld]` section.
    It includes the `ndbcluster` option to enable the NDB engine and the `default-storage-engine`
    option instructing MySQL to use NDB to manage all new tables unless otherwise
    specified in the table''s `CREATE TABLE` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user or process creates a new table with the `CREATE TABLE` statement,
    they can specify which of MySQL''s storage engines should be used to manage its
    data with the `ENGINE` directive, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The default engine is InnoDB engine. However, only data in NDB-managed tables
    make their way to the cluster. If a table is managed by another engine, the data
    resides locally on the API node and is not available to other nodes in the cluster.
    To prevent unexpected problems and any confusion this can cause, we changed the
    default engine so that tables will use the NDB engine when the `ENGINE` directive
    isn't provided.
  prefs: []
  type: TYPE_NORMAL
- en: The order in which nodes are started when bringing up the MySQL cluster is important,
    since one node may depend on the others. The management node is started first,
    followed by the data nodes, and then the API node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The password for MySQL''s root account on the API node is randomly generated
    the first time the server is started, and it is written to the `/root/.mysql_secret`
    file, just as we used `mysqladmin` to change it in the *Setting up a MySQL database*
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SHOW` command sent to the `ndb_mgm` client on the management node''s system
    allows us to view the status of the cluster and ensure everything is up and running
    as it should be. The client can be invoked in interactive mode, or commands can
    be passed to it directly using the `-e` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/image_07_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The status of the MySQL cluster can be viewed using the ndb_mgm client
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with MySQL
    clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL Reference Manual: MySQL Cluster Core Concepts ([http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-basics.html](http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-basics.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL Reference Manual: MySQL Cluster Installation ([http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-installation.htm](http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-installation.htm)l)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL Reference Manual: MySQL Cluster Nodes, Node Groups, Replicas, and Partitions
    ([http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-nodes-groups.html](http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-nodes-groups.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL Reference Manual: Online Backup of MySQL Cluster ([http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-backup.html](http://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-backup.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Up a MySQL Cluster the Easy Way ([http://youtube.com/watch?v=64jtbkuPtv](http://youtube.com/watch?v=64jtbkuPtv)c)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*High Availability MySQL Cookbook* by Alex Davies ([https://www.packtpub.com/big-data-and-business-intelligence/high-availability-mysql-cookbook](https://www.packtpub.com/big-data-and-business-intelligence/high-availability-mysql-cookbook))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a MongoDB database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although relational databases have dominated the world of data storage, there
    have always been other systems that specialize in alternative ways of working
    with data, for example document and object-oriented databases, key-value databases,
    and hierarchical databases. The popularity of these alternative databases has
    experienced a resurgence thanks to the recent *NoSQL* and *Big Data* movements.
    This recipe teaches you how to install MongoDB, a modern document-oriented database
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and administrative
    privileges by either using the `root` account or `sudo`. It also assumes you have
    registered the EPEL repository (see the *Registering the EPEL and Remi repositories*
    recipe in [Chapter 4](ch04.html "Chapter 4. Software Installation Management"),
    *Software Installation Management*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install MongoDB and create a new database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `mongodb-server` and `mongodb` packages from the EPEL repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/mongod.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `auth` entry and uncomment it, making sure its value is `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `bind-ip` option and comment it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes to the configuration file and close it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the MongoDB server and enable it to start automatically whenever the
    system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `27017` in the system''s firewall:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect to the MongoDB server with `mongo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `admin` as the active database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute `createUser()` to create a new user for managing user accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Authenticate yourself using the newly created `admin` account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `packt` as the active database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a user account for working with the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Exit the client and return to the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB is the most popular in its class of databases and is used by many high-profile
    companies, including eBay, Craigslist, SAP, and Yandex. The necessary packages
    are available in the EPEL repository; `mongodb-server` contains the MongoDB server
    application and the `mongodb` package contains the client and other utilities
    for working with the server and databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'MongoDB runs without security enabled by default and anyone may perform any
    action against any database. To prevent this, we enabled security by uncommenting
    the `auth` option in MongoDB''s configuration file (`/etc/mongod.conf`). Once
    security is enabled, users must authenticate themselves before they can work with
    a database, and the server verifies that the account has the right to perform
    the requested action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The current configuration permits MongoDB to listen for connections only on
    the loop-back interface (`127.0.0.1`), so we also commented out the `bind_ip`
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Left unbound, MongoDB will be accessible via all of the system's addresses.
    Alternatively, if the system has multiple addresses (perhaps the system has multiple
    interfaces or you've implemented the *Binding multiple addresses to a single Ethernet
    device* recipe in [Chapter 2](ch02.html "Chapter 2. Networking"), *Networking*)
    and you want MongoDB to respond on only one of them, you can leave the option
    active with the desired IP address as its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'After updating the configuration file, we started the server and opened MongoDB''s
    default port in the system''s firewall to allow remote connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we used the `mongo` client to establish a connection to the MongoDB server
    running on the localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'We set `admin` as the active database and executed the `createUser()` method
    to create an administrator account dedicated to managing MongoDB''s database users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The `createUser()` method accepts a document with properties listing the new
    account's username (`user`), password (`pwd`), and roles (`roles`) and adds it
    to the `system.users` collection in the active database (`admin`). User accounts
    are stored at the database level and the database storing a user's details is
    known as that user's authentication database. Users may work with other databases,
    but they must authenticate against their authentication database first. Even if
    their usernames are the same, accounts created in different databases are considered
    separate and may have different permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The `roles` property is an array of objects, each listing a role that the user
    is a member of when they work with the given database. In the case of `admin`,
    the user is a member of the `userAdminAnyDatabase` role. MongoDB's permission
    system is based on role-based access control (RBAC). The focus of RBAC is on users
    and what roles they play as opposed to granting individual permissions to each
    account. Permissions are assigned to a role and then user accounts are given membership
    in the role inheriting its permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '`userAdminAnyDatabase` is a built-in role configured with the necessary permissions
    to create and delete user accounts, assign membership in a role, and manage user
    passwords for any database. MongoDB ships with several predefined roles besides
    `userAdminAnyDatabase`. They include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbAdmin`: These users are responsible for administering the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`userAdmin`: These users are responsible for administering other users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read`: These are users that only read documents from the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readWrite`: These are users who read documents and also need write access
    to insert/modify them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbOwner`: These are users who own the database (combines the `dbAdmin`, `userAdmin`,
    and `readWrite` roles)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also the `backup` and `restore` roles for users responsible for performing
    database backups, roles for managing MongoDB clusters, and additional global versions
    of some of the aforementioned roles, such as `readAnyDatabase`, for users who
    need read-access to all of MongoDB's databases. A complete list of roles can be
    found in the official documentation online at [https://docs.mongodb.com/manual/reference/built-in-roles/](https://docs.mongodb.com/manual/reference/built-in-roles/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The principles of least privilege encourage us to avoid over-using the global
    roles; it''s better to create users that work with their own databases. If an
    account needs to work with a database outside its authentication database, multiple
    roles can be assigned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we used the new `admin` user to create a new user for the `packt` database
    (and to create the `packt` database itself as a side effect):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Databases and collections are implicitly created by MongoDB when the first document
    is inserted, and since MongoDB stores new users in the active database, setting
    `packt` as the active database and creating a user is enough to trigger its creation.
  prefs: []
  type: TYPE_NORMAL
- en: The `auth()` method assumes that the active database is the authentication database
    for the provided credentials. In this instance, authentication is successful because
    `admin` was already the active database; attempting to authenticate as `admin`
    after switching to `packt` would fail. However, the identity persists after authentication
    until the next time we call `auth()` or we exit the client. So, even though we
    switched databases, we're still operating within the roles and privileges of the
    `admin` database's `admin` user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the recipe connected to the server with a bare `mongo` invocation,
    the active database can be specified on the command line. `mongo` also offers
    several options, for example, to connect to a MongoDB server running on a different
    system and provide authentication credentials. `--host` identifies the remote
    hostname or IP address where MongoDB is running, and the `--username` and `--password`
    options allow you to provide your account''s authentication details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'If the database is given in the invocation when `--username` and `--password`
    are used as well, MongoDB assumes that the database is the account''s authentication
    database. If the account belongs to another database, its authentication database
    can be given using the `--authenticationDatabase` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The `--password` option expects a value, but MongoDB will prompt you for a password
    when its value is empty. I suggest that you use an empty string (`""`) for the
    value, as I have done here, to force the password prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Never enter a password as part of a command's invocation for security reasons.
    The password may appear in the output of `ps` while the command is running and
    will also appear in your shell's history.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB manual ([http://docs.mongodb.org/manual](http://docs.mongodb.org/manual))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MongoDB Manual: Role-Based Access Control ([http://docs.mongodb.org/manual/core/authorization](http://docs.mongodb.org/manual/core/authorization))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Tutorial for Beginners ([http://www.youtube.com/watch?v=W-WihPoEbR4](http://www.youtube.com/watch?v=W-WihPoEbR4))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wikipedia: Role-based access control ([https://en.wikipedia.org/wiki/Role-based_access_control](https://en.wikipedia.org/wiki/Role-based_access_control))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring a MongoDB database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to back up a MongoDB database using the `mongodump`
    utility and restore it using `mongorestore`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a running MongoDB server and access to a user account with
    membership in the `userAdmin` role.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to back up a MongoDB database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to MongoDB as a user with membership in the `userAdmin` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an account with membership in the `backup` and `restore` roles to be
    used for creating and restoring backups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `mongodump` on the command-line to export a MongoDB database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restore a database from the backup made by `mongodump`, use the `mongorestore`
    program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The account used to make a backup must have the privileges assigned to the
    `backup` role and the restore account must have those assigned to the `restore`
    role. So, we connected to the MongoDB server and created an account with membership
    in both roles prior to using the utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The new account is then used with `mongodump` to back up our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding invocation exports everything in the `packt` database as specified
    by the `--db` argument. If `--db` is not given, `mongodump` exports all of the
    available databases except for the server''s `local` database. It''s possible
    to export just a specific collection from the database using the `--collection`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: By default, `mongodump` creates a local directory named `dump` to organize the
    exported data. Within `dump` exists a directory for each exported database and
    within that are two files for each collection. The first file is a BSON file,
    a binary JSON-like format used because it offers a richer set of data types than
    JSON does. For example, JSON doesn't define a date type. Whereas JSON offers only
    a single numeric type, BSON supports 32 and 64-bit integers and doubles. The second
    file is a metadata JSON file that stores details about the collection, such as
    any collection options or index definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`mongodump` will overwrite any existing files if the `dump` directory already
    exists. To avoid problems, you can specify a different location with the    `--out`
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**mongodump --db packt --out dump-$(date +%F)**`'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_07_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The exported collection data is organized by database in the dump directory
  prefs: []
  type: TYPE_NORMAL
- en: 'The path to the collection files is then given to `mongorestore` to import
    the data dumped by `mongodump`. The database to which the collections will be
    inserted is named using the `--db` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`mongorestore` only inserts the data; if documents with the same `_id` field
    already exist in a collection then those records are skipped, not updated. This
    may or may not be desired depending on the circumstances. So to be sure that the
    restored data matches what was exported, the `--drop` argument is used, which
    instructs `mongorestore` to drop the existing collection first before importing
    the backup.'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from `mongodump` and `mongorestore`, there is also `mongoexport` and `mongoimport`.
    `mongoexport` exports a collection's data to either a JSON or CSV file and `mongoimport`
    imports data from these formats. Keep in mind however that JSON's type system
    (and certainly "types" in CSV) is less granular than BSON's and some fidelity
    can be lost. For reliable backups, `mongodump` and `mongorestore` are preferred.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default export format of `mongoexport` is JSON. To export a collection''s
    data to CSV instead, use the `--csv` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Specific fields can be targeted for export as well by providing a comma-separated
    list of names using the `--fields` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Some arguments worth noting when importing data with `mongoimport` are `--type`,
    which specifies the import file''s type (either JSON for CSV), `--headerline`
    - to skip the first row of data in the case of column headers in a CSV file, `--fields`
    - to import only specific fields from the file, and `--upsert`, which performs
    an upsert action on existing documents instead of skipping them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on backing up and restoring
    MongoDB databases:'
  prefs: []
  type: TYPE_NORMAL
- en: The `mongodump` manual page (`man 1 mongodump`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mongorestore` manual page (`man 1 mongorestore`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mongoexport` manual page (`man 1 mongoexport`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mongoimport` manual page (`man 1 mongoimport`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MongoDB Manual: MongoDB Backup Methods ([http://docs.mongodb.org/manual/core/backups](http://docs.mongodb.org/manual/core/backups))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BSON: Binary JSON ([http://bsonspec.org/](http://bsonspec.org/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a MongoDB replica set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to configure replication using MongoDB replica sets.
  prefs: []
  type: TYPE_NORMAL
- en: When replication is performed using replica sets, one installation of MongoDB
    identifies as the primary server while others in the cluster are secondaries.
    The primary server accepts writes, which are replicated to the secondaries, while
    the secondaries service read requests. If the primary server goes down, the secondary
    servers automatically call a quorum and promote one of the secondaries to fill
    the primary's role. The old primary rejoins the cluster when it comes back on
    line. This configuration provides redundancy, distributed read/write access, and
    automatic failover for high-availability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe demonstrates configuring replica sets using three systems. The first
    system will be the cluster's primary server and we assume that its IP address
    is `192.168.56.100`. The other two systems will be secondary servers using the
    addresses `192.168.56.102` and `192.168.56.103`. MongoDB should be installed on
    all three systems. You'll also need administrative access to complete the configuration
    and access to a user account with membership in the `userAdmin` role.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB replication relies on hostnames. Before you begin this recipe, make
    sure that the systems are accessible to one another by the hostname. If the systems
    are inaccessible and you are unable to add the necessary records to your network''s
    DNS, you can override local resolution for the hosts in question by adding entries
    to `/etc/hosts`, similarly to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure replication using MongoDB replica sets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the primary system, navigate to `/var/lib/mongodb` and use `openssl` to
    create a shared secret. This secret serves as the password each server will use
    to authenticate itself as a member of the replication cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Secure the file''s permissions; it should be owned by `mongodb` and only readable
    by its owner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `/etc/mongod.conf` with your text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the `replSet` option, uncomment it, and assign it the value `rs0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uncomment the `keyFile` option and provide the path to the file containing
    the shared password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the MongoDB server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the shared secret to each of the secondary systems:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat steps 2-7 on each of the other secondary systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect to the primary MongoDB server and create an account with membership
    in the `clusterManager` role to be used for configuring and managing the replica
    cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Authenticating yourself using the `repladmin` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `rs.initiate()` method to initialize the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the secondary members using `rs.add()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clusters must contain an odd number of servers because there has to be a majority
    vote to approve a secondary's proposal to take on the role of primary if the primary
    server becomes unavailable. Three servers were used, which is the minimum number
    for a cluster that provides proper redundancy and availability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cluster members identify themselves to one another using a shared replica set
    name and password, which we provide in each server''s `mongod.conf` configuration
    file. The name is specified using the `replSet` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'The password value can be anything up to 1,024 characters. For security reasons,
    a long random string is preferred for resistance against brute force and dictionary
    attacks. We can generate such values using `openssl rand`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '`rand` generates the number of random bytes we request, in this case 756 bytes.
    `-base64` encodes them using the Base64 encoding scheme to represent the bytes
    safely as plain text. Encoding incurs some overhead, and Base64 encodes three
    bytes as four characters and pads the result when less than three bytes are available.
    So, Base64-encoding the 765 random bytes results in 1,024 characters of text suitable
    for our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting key file containing the password is copied to each system. Its
    ownership is set to the system''s `mongodb` user and access permissions to the
    file are revoked for everyone except that user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'The file is specified in the configuration file using the `keyFile` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Management of the cluster requires permissions assigned to the `clusterManager`
    role, so we then created an account with membership in that role, and then we
    authenticated ourselves using the new account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'We started the cluster using `rs.initiate()` on the primary server and then
    registered the secondary servers using `rs.add()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: After `rs.initiate()` is invoked, you'll notice the mongo client's prompt changes
    to `rs0:primary` to notify us that we're connected to the primary server in the
    `rs0` replication group. If you were to log in to a secondary server, the prompt
    would read `rs0:secondary`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the cluster can be configured by passing an object that specifies
    the secondary servers as an argument to `rs.initiate()`. The object''s `_id` property
    is the name of the set and the `members` property is an array of secondary hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with MongoDB
    replica sets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB Manual: Replication ([http://docs.mongodb.org/manual/core/replication-introduction](http://docs.mongodb.org/manual/core/replication-introduction))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB Replication and Replica Sets ([http://www.youtube.com/watch?v=CsvbG9tykC4](http://www.youtube.com/watch?v=CsvbG9tykC4))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an OpenLDAP directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to install OpenLDAP, an open-source implementation
    of an X.500 directory server. The X.500 series of protocols was developed in the
    late 1980s to support the storage and lookup of names, e-mail addresses, computer
    systems, and other entities in a hierarchical fashion. Each entry is a node in
    a directory information tree (DIT) and is identified by its distinguished name
    (DN). Information about the entry is represented as key/value pairs known as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and administrative
    privileges either by using the `root` account or `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up an OpenLDAP directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `openldap-server` and `openldap-clients` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the database configuration file included with OpenLDAP to the server''s
    data directory. Ensure the file is owned by the `ldap` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `slappasswd` to generate a password hash for OpenLDAP''s `Manager` account.
    Enter the desired password when prompted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the LDAP server and optionally enable it to start automatically whenever
    the system reboots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open port `389` in the system''s firewall to allow outside connections to the
    server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `config.ldif` using the following content. The DIT''s suffix
    is based on the domain `ldap.example.com` and the value for `olcRootPW` is the
    password hash obtained in step 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke `ldapmodify` to execute the operations in `config.ldif`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `ldapadd` to import the `cosine`, `inetorgperson`, and `nis` schemas found
    in `/etc/openldap/schema`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the file `root.ldif` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `ldapadd` to import `root.ldif`, authenticating yourself with the `Manager`
    account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first installed the `openldap-server` package, which contains the LDAP server
    (`slapd`) and some supporting utilities, and the `openldap-clients` package, which
    installed the basic utilities used for working with the directory server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'OpenLDAP uses the Berkeley DB (BDB/HDB) database for backend data storage,
    indexing, and caching. The database is configured separately from the directory
    server and an example configuration file is installed along with the server. We
    copied the example into the server''s data directory but left it with its default
    values; the defaults are fine to start with although you''ll want to review the
    settings periodically after you deploy OpenLDAP to ensure the best performance
    (`man 5 slapd-bdb` provides descriptions of the file''s configuration options):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'The directory''s administrative user `Manager` doesn''t have an assigned password
    at first. OpenLDAP expects the password to be hashed so we created a suitable
    value using `slappasswd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: The default hashing algorithm used by `slappasswd` is salted SHA (SSHA) as indicated
    by the `{SSHA}` prefix in its output. It's possible to hash the password using
    a different algorithm if required by specifying it using the `-h` argument. The
    possible values are `{CRYPT}`, `{MD5}`, `{SMD5}` (salted MD5), `{SHA}`, or `{SSHA}`.
    The salted algorithms are preferred over their nonsalted counterparts because
    the randomly generated salt `slappasswd` incorporates into the hash makes the
    hash resistant to rainbow attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenLDAP has deprecated its file-based configuration approach in favor of online
    configuration, storing parameters in a config DIT so that they can be updated
    without needing to restart the directory server for the changes to take effect.
    So after starting the server, we wrote the necessary operations to `config.ldif`
    that will make our updates and then executed them as a batch with `ldapmodify`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: The `-H` argument provides one or more URIs for the servers we want to connect
    to. We can specify the transport protocol, hostname or IP address, and port, but
    the URI is not a full RFC-4516 style LDAP URI (other components such as the base
    DN are given using other arguments). The supported protocols are `ldap`, `ldaps`
    (LDAP over SSL), and `ldapi` (LDAP over IPC/unix-socket). No hostname is required
    to access the local host, so just `ldapi://` is used.
  prefs: []
  type: TYPE_NORMAL
- en: The `-Y` argument specifying `EXTERNAL` as the authentication mechanism allows
    the use of mechanisms external to the server's SASL methods. When paired with
    `ldapi`, `EXTERNAL` uses our login session's username to authenticate us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior for `ldapmodify` is to read input from STDIN, but the
    `-f` argument can specify an input file instead. Since the statements are rather
    verbose, using an input file is a great idea because you can review them for any
    mistakes beforehand. If you do want to provide them via STDIN however, I recommend
    that you use the `-c` argument to run `ldapmodify` in "continuous mode". The program
    terminates when it encounters an error by default, but in continuous mode it will
    keep running. This will give you the opportunity to resubmit the operation if
    there''s a problem, without reconnecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Our first operation changed the DIT''s suffix from the default `dc=my-domain,dc=com`
    to something more appropriate. The recipe uses `ldap.example.com` for example
    purposes, but of course you may substitute your own domain accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: The suffix is stored in the `olcSuffix` attribute of the `olcDatabase={2}hdb,cn=
    config` entry and represents the top level of the DIT. Traditionally, the suffix
    is based on a domain name and is expressed as a series of domain components (DC),
    so the domain `ldap.example.com` becomes `dc=ldap,dc=example,dc=com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The suffix appears in a few other places, so we needed to update those as well
    - the `olcRootDN` attribute, which lists the name of the DIT''s administrative
    user, and in the permission statement in `olcAccess` that grants access to `Manager`
    and the system''s `root` account. Additionally, we added the `olcRootPW` attribute
    that stores the Manager''s password hash. We don''t have to specify the DN multiple
    times for attributes on same entry. Rather, we can separate the operations with
    a single hyphen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we imported the `cosine`, `nis`, and `inetorgperson` schemas. Creating
    new schemas from scratch can be a daunting task as a fair amount of planning is
    required to identify what types are needed and what PEN/OIDs should be allocated.
    Importing these schemas provided with OpenLDAP gives us access to various useful
    predefined types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '`cosine` defines a standard X.500 directory services schema that was originally
    developed for the COSINE PARADISE Project and is outlined in RFC-4524\. It gives
    us types such as `document` and `domain` objects and attributes such as `host`,
    `mail`, and `documentAuthor`. `inetorgperson` defines the `inetOrgPerson` class,
    a person object that attempts to "meet the requirements found in today''s Internet
    and intranet directory service deployments" as described by RFC-2798 and RFC-4524\.
    `nis` defines a Network Information Services schema with user and host attributes
    useful for setting up centralized authentication, such as `uidNumber`, `gidNumber`,
    `ipNetworkNumber`, and `ipNetmaskNumber`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the contents of these files, you'll find that object identifiers
    (OIDs) play an important role in schema definitions, providing globally unique
    identification of various object classes and attributes. OIDs are a string of
    numbers separated by dots, read left to right, with each position representing
    a level in the distributed hierarchy. Top levels of the hierarchy are maintained
    by various standards bodies and registry authorities, and Internet Assigned Numbers
    Authority (IANA) allows individuals to register for their own branch under the
    OID `1.3.6.1.4.1`. For example, `1.3.6.1.4.1.4203` is assigned to the OpenLDAP
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to define the domain component object (`dcObject`) first.
    This object is the root of our local branch of the directory under which future
    entries can be added. If your experience centers mostly on working with relational
    databases such as MySQL or with modern NoSQL databases such as MongoDB, you can
    think of `dcObject` as the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'While using `ldapadd` to import the definition, we provided the `-D` argument
    to specify the `Manager` account and `-W` to be prompted for the account''s password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with OpenLDAP:'
  prefs: []
  type: TYPE_NORMAL
- en: The `ldapmodify` manual page (`man 1 ldapmodify`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenLDAP ([http://www.openldap.org/](http://www.openldap.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the LDAP Protocol, Data Hierarchy, and Entry Components ([http://www.digitalocean.com/community/tutorials/understanding-the-ldap-protocol-data-hierarchy-and-entry-components](http://www.digitalocean.com/community/tutorials/understanding-the-ldap-protocol-data-hierarchy-and-entry-components))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Use LDIF Files to Make Changes to an OpenLDAP System ([http://www.digitalocean.com/community/tutorials/how-to-use-ldif-files-to-make-changes-to-an-openldap-system](http://www.digitalocean.com/community/tutorials/how-to-use-ldif-files-to-make-changes-to-an-openldap-system))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Get Your Own LDAP OID ([http://ldapwiki.willeke.com/wiki/How%20To%20Get%20Your%20Own%20LDAP%20OID](http://ldapwiki.willeke.com/wiki/How%20To%20Get%20Your%20Own%20LDAP%20OID))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring an OpenLDAP database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe teaches you how to back up an OpenLDAP database by exporting the
    directory to an LDIF file, which can then be imported later to restore the database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a CentOS system with a working network connection and administrative
    privileges either using the `root` account or `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To back up an LDAP directory, export the directory using the `slapcat` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'To rebuild the directory from an export, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the LDAP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the file using `slapadd`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure the data files are owned by the `ldap` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the LDAP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`slapcat` exports the LDAP database''s contents to LDIF-formatted output. The
    content is sent to STDOUT by default, so you should either capture it using the
    shell''s redirect operators (`>` or `>>`) or using the command''s `-l` (lowercase
    L) argument, which specifies the name of an output file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'The suffix of the targeted directory is given using the `-b` argument. If there
    are any subordinate directories, they''ll be exported as well by default. To eliminate
    subordinates from the export and to export only the top-level directory contents,
    use the `-g` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '`slapcat` returns entries in the order it encounters them while scanning the
    database. This means it''s possible for an object''s definition to appear in the
    export after that of an entity who''s attributes reference it. This isn''t a problem
    for `slapadd` because of how it imports data as opposed to `ldapadd`, so the former
    utility should be used to restore the directory. Otherwise you''ll have to edit
    the file to ensure the ordering won''t pose a problem; something I''m sure you''ll
    agree isn''t appealing given the format''s verbosity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: When performing exports and imports, the LDAP server should not be running.
    This makes any write actions impossible during the process to guarantee the integrity
    and consistency of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '`slapadd` writes files directly to the server''s data directory so that the
    files will be owned by `root` (the user account used to run `slapadd`), so their
    ownership needs to be set to `ldap` after the import but before the server is
    started so that the process can access them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following resources for more information on working with OpenLDAP
    backups:'
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenLDAP FAQ-O-Matic: How do I backup my directory ([http://www.openldap.org/faq/data/cache/287.html](http://www.openldap.org/faq/data/cache/287.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OpenLDAP Administrator''s Guide: Maintenance ([http://www.openldap.org/doc/admin24/maintenance.html](http://www.openldap.org/doc/admin24/maintenance.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
