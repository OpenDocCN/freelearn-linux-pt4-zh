- en: Chapter 4. Avoiding Obstacles Using Sensors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've constructed your biped robot. Now, your robot can move around. But what
    if you want the robot to sense the outside world, so you don't run into things?
    In this chapter, you'll discover how to add some sensors to help avoid barriers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, you''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to connect Raspberry Pi to an **IR** (**infrared**) sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to connect Raspberry Pi to a USB **sonar sensor** to detect the world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to connect Raspberry Pi and its GPIO to a sonar sensor to detect the world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Raspberry Pi to an infrared sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your robot can now move around, but you'll want to be able to sense a barrier
    or a target. One of the ways to do this is with an IR sensor. First, a tutorial
    on IR sensors is required. An IR sensor has both a transmitter and a sensor. The
    transmitter sends out a narrow beam of light, and the sensor receives this beam
    of light.
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference in transit ends up as an angle measurement in the sensor, as
    shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The different angles give you an indication of the distance from the object.
    The sensor turns these angle measurements into a voltage that you can sense to
    determine the distance. Unfortunately, the relationship between the output of
    the sensor and the distance is not linear, so you'll need to do some calibration
    in order to predict the actual distance and its relationship to the output of
    the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IR sensors are quite accurate, certainly with a low percentage of errors; however,
    they may not work well if the area is brightly lit. The accuracy is also affected
    by the reflective nature of the material being sensed. This can be a consideration
    when deciding which sensors to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you get started, you''ll need to get a sensor. One of the more popular
    ones is an inexpensive IR sensor by Sharp. It is available at many online electronics
    stores, and it comes in models that sense various distances. You''ll be using
    the **Sharp 2Y0A02** model, a unit that provides sensing to a distance of 150
    cm. Here is a picture of the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll also want to make sure you also get the connector cable for the device;
    it normally comes with the device. Here is a picture of the sensor with the cable
    attached:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As noted in the tutorial, the voltage out of the sensor will be a voltage that
    will be an indication of the distance. However, this is an analog signal, and
    the Raspberry Pi doesn't have an analog-to-digital converter that can convert
    this analog voltage to a number that you can read in your program. You'll need
    to add an analog to digital converter to your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two choices. If you want an analog-to-digital converter that plugs
    directly into the USB interface, there is one offered by [www.phidgets.com](http://www.phidgets.com).
    This board is really quite amazing; it takes the analog signals, turns them into
    digital numbers using an analog to digital converter, and then makes them available
    so that they can be read from the USB port. The model number of this part is **1011_0
    - PhidgetInterfaceKit 2/2/2** and it is shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, it takes a bit of programming expertise to get it up and running.
    The other choice is to use an analog-to-digital converter that connects to the
    GPIO pins of the Raspberry Pi. There is a part, the **ADC pi+** from [www.abelectronics.co.uk](http://www.abelectronics.co.uk),
    that does this. It is pictured here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This device is easier to program, so this is what you''ll use in this project.
    Now, let''s connect the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: Solder header pins to the ADC Pi+ board to connect it to the ADC, like this:![Connecting
    Raspberry Pi to an infrared sensor](img/B04591_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, plug the board into the Raspberry Pi B 2\. Here is a picture of the combination:![Connecting
    Raspberry Pi to an infrared sensor](img/B04591_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you''ll connect the IR sensor to the ADC. To connect this unit, you''ll
    connect the three pins that are available at the bottom of the sensor. Here is
    the connection list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ADC-DAC Board | Sensor Pin |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5V | Vcc |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | Gnd |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| In1 | Vo |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Unfortunately, there are no labels on the unit, but here are the pins you''ll
    connect:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'It''s easiest to connect to the three-wire cable that normally comes with the
    sensor. Once the pins are connected, you are ready to access the data from the
    sensor via a Python program on the Raspberry Pi. The entire system looks like
    this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, you are ready to add some code to read the IR sensor. You''ll need to
    follow these steps to talk to the ADC:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in enabling the ADC is to enable the I2C interface. This is done
    by running `raspi-config` and selecting **8 Advanced Options** like this:![Connecting
    Raspberry Pi to an infrared sensor](img/B04591_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once there, go to the **A7 I2C** selection to enable the I2C like this:![Connecting
    Raspberry Pi to an infrared sensor](img/B04591_04_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform all the selections to enable the I2C interface and load the library,
    and then reboot the Raspberry Pi.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll also need to edit the `/etc/modules` file and add the following two
    lines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Reboot the Raspberry Pi. You can see whether the I2C is enabled by typing `sudo
    i2cdetect -y 1`, and you should see something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The I2C device, your ADC, is available at the **68** and **69** addresses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can download the code. To do this, type `git clone https://github.com/abelectronicsuk/ABElectronics_Python_Libraries.git`
    from the home directory, and the Python libraries will be installed on your Raspberry
    Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `./ABElecttronics_Python_Libraries/ADCPi` directory; here are the
    programs for your specific hardware. Following the instructions in the `README.md`
    file, type `sudo apt-get update`, and then type `sudo apt-get install python-smbus`.
    This will install the `smbus` library, which are required for the ADC to work.
    Also, type `sudo adduser pi i2c` to add `pi` to the group that can access i2c.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to edit your `.bashrc` file in your home directory, adding the following
    lines:![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding this line will add this library to the path so that you can access the
    functionality. Reboot the Raspberry Pi.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can run one of the demo programs. Type `python demo-readvoltage.py`,
    and you should see something like this:![Connecting Raspberry Pi to an infrared
    sensor](img/B04591_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These raw readings are great, but now you''ll want to build a program that
    takes the data from the first ADC and translates it to the distance. To do this,
    you''ll need a graph of the voltage to distance readings for your sensor. Here
    is the graph for the IR sensor in this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'There are really two parts to the curve; the first is the distance up to about
    15 centimeters, and the second is the distance from 15 centimeters to 150 centimeters.
    It is easiest to build a simple mathematical model that ignores distances closer
    than 15 centimeters and models the distance from 15 centimeters. For more information
    on how to build this model, refer to [http://davstott.me.uk/index.php/2013/06/02/raspberry-pi-sharp-infrared/](http://davstott.me.uk/index.php/2013/06/02/raspberry-pi-sharp-infrared/).
    Here is the Python program using this model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The only new line of code is the distance = (1.0 / (adc.read_adc_voltage(1)
    / 13.15)) - 0.35 line. It converts your voltage to distance. You can now run your
    program and you''ll see the results in centimeters, like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to an infrared sensor](img/B04591_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, you can measure the distance to objects using your IR sensor!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting Raspberry Pi to a USB sonar sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is yet another way to sense the presence of objects: using a sonar sensor.
    But before you add this capability to your system, here''s a little tutorial on
    sonar sensors. This type of sensor uses ultrasonic sound to calculate the distance
    from an object. The sound wave travels out from the sensor, as illustrated in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The device sends out a sound wave 10 times a second. If an object is in the
    path of these waves, then the waves reflect off the object, sending waves that
    return to the sensor, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The sensor then measures any return. It uses the time difference between when
    the sound wave was sent out and when it returned to measure the distance from
    the object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sonar sensors are also quite accurate, normally with low percentage errors,
    and are not affected by the lighting or color in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several choices if you want to use a sonar sensor to sense the distance.
    The first is to use a sonar sensor that connects to the USB port. The following
    is an image of a USB sonar sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the **USB-ProxSonar-EZ** sensor, and can be purchased directly from
    MaxBotix or on Amazon. There are several models, each with a different distance
    specification; however, they all work in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also choose a sonar sensor that connects to the GPIO of the Raspberry
    Pi. Here is a picture of this sort of inexpensive sonar sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This sensor is less expensive and easy to use; it takes a bit of processing
    power to coordinate the efforts of timing the send and receive signals, but the
    Raspberry Pi B 2 has the processing power needed. Here are the steps to set up
    this sonar sensor to sense the distance:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to understand the GPIO pins of the Raspberry Pi B 2\. Here
    is a diagram of the layout of the pins:![Connecting Raspberry Pi to a USB sonar
    sensor](img/B04591_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, you'll need to connect to the 5 volt connection of the Raspberry
    Pi B2, which is pin 2\. You'll also need to connect to the GND, which is pin 6\.
    You'll use pin 16 as an output trigger pin and pin 18 (GPIO24) as an input to
    time the echo from the sonar sensor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you know the pins you'll connect to, you can connect the sonar sensor.
    There is a problem, as you can't connect the 5 volt return from the sonar sensor
    directly to the Raspberry Pi GPIO pins; they want 3.3 volts. You'll need to build
    a voltage divider that will reduce the 5 volts to 3.3 volts. This can be done
    with two resistors, which are connected as shown in this diagram:![Connecting
    Raspberry Pi to a USB sonar sensor](img/B04591_04_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you''d like more information on how the voltage divider works in this configuration,
    refer to [http://www.modmypi.com/blog/hc-sr04-ultrasonic-range-sensor-on-the-raspberry-pi](http://www.modmypi.com/blog/hc-sr04-ultrasonic-range-sensor-on-the-raspberry-pi).
    The combination of these two resistors will reduce the voltage to the desired
    levels. You may want to put all of this is in a small breadboard, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Finally, connect it to the Raspberry Pi, like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that the device is connected, you'll need a bit of code to read in the value,
    make sure it is settled (a stable measurement), and then convert it to distance.
    Here is the Python code for this program:![Connecting Raspberry Pi to a USB sonar
    sensor](img/B04591_04_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you should be able to run the program and see a result, like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting Raspberry Pi to a USB sonar sensor](img/B04591_04_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that you have your sensors up and working, you can avoid or find objects
    with your biped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You can now detect and avoid walls and other barriers to your
    robot. You can also use these sensors to detect objects that you might want to
    find. In the next chapter, you'll learn how to perform path planning to move your
    robot from point A to point B and even give your robot intelligence as to what
    to do if it encounters a barrier in its path.
  prefs: []
  type: TYPE_NORMAL
