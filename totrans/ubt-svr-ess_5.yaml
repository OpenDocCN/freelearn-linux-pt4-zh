- en: Chapter 5. Virtualization and Cloud Computing inside the Ubuntu Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：Ubuntu Server中的虚拟化与云计算
- en: Virtualization and Cloud computing are some of the hottest topics in system
    administration communities nowadays. They give system administrators the possibility
    to run more servers on the same hardware and use resources in a reliable manner.
    The Cloud concept, which is already based on virtualization, provides much more
    benefits, especially via security and new business models such as SaaS, PaaS,
    and IaaS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化和云计算是目前系统管理社区中的一些热门话题。它们为系统管理员提供了在同一硬件上运行更多服务器的可能性，并以可靠的方式使用资源。已经基于虚拟化的云概念提供了更多的好处，尤其是在安全性和新兴的商业模式，如SaaS、PaaS和IaaS方面。
- en: 'Ubuntu provides a good set of virtualization and Cloud computing platforms.
    In this chapter, we will have a look at how the Ubuntu Server handles the most
    well known platforms:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu提供了一套优秀的虚拟化和云计算平台。在本章中，我们将了解Ubuntu Server如何处理一些最知名的平台：
- en: In the first section, we will focus on virtualization. We will discover how
    to manage three big virtualization programs, namely KVM, XenServer, and Docker.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一部分，我们将重点介绍虚拟化。我们将了解如何管理三大虚拟化程序，即KVM、XenServer和Docker。
- en: In the second section, we will take a look at the Cloud capabilities provided
    by the Ubuntu Server.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二部分，我们将介绍Ubuntu Server提供的云计算功能。
- en: Virtualization
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化
- en: There are a number of different virtualization technologies available under
    the Ubuntu Server. In this section, we will discover the virtualization concept
    in general with its different technologies and approach. Then, we will study some
    of the most popular virtualization programs, such as **Kernel-based Virtual Machine**
    (**KVM**), XenServer and Docker, with one program from each technology.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu Server下有多种不同的虚拟化技术可用。在这一部分中，我们将了解虚拟化概念及其不同的技术和方法。然后，我们将学习一些最受欢迎的虚拟化程序，如**基于内核的虚拟机**（**KVM**）、XenServer和Docker，每个技术中选取一个程序进行研究。
- en: An introduction to virtualization
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟化介绍
- en: Virtualization is used to run one or more operating systems / applications as
    a simple software on one or more computers/servers instead of not being able to
    install more than one operating system per machine. These **virtual machines**
    are called **VMs**, **environments**, and even **VEs**. The virtualization of
    **operating systems** (**OS**) is a technique that allows you to run multiple
    OSes simultaneously on a single computer as if they were working on separate computers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化用于在一台或多台计算机/服务器上作为简单软件运行一个或多个操作系统/应用程序，而不是每台计算机只能安装一个操作系统。这些**虚拟机**被称为**虚拟机**、**环境**，甚至是**虚拟环境**。**操作系统**（**OS**）的虚拟化是一种技术，使你能够在单台计算机上同时运行多个操作系统，仿佛它们在独立的计算机上工作一样。
- en: The benefits of virtualization
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟化的好处
- en: 'Virtualization has several advantages. The following are some of its benefits:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化有几个优点。以下是它的一些好处：
- en: You can use a different OS without restarting your computer to use programs
    that do not natively work on Ubuntu
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在不重新启动计算机的情况下使用不同的操作系统来运行那些在Ubuntu上原生不兼容的程序。
- en: You can also use devices that don't work with Ubuntu but that can work with
    other OSs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以使用与Ubuntu不兼容但可以与其他操作系统兼容的设备。
- en: You can perform testing under the operating systems without jeopardizing a stable
    environment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在操作系统下进行测试，而不会危及稳定的环境。
- en: You can also perform software testing in controlled, isolated and secure environments
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以在受控、隔离和安全的环境中进行软件测试。
- en: You can transport OS from one computer to another using a virtual machine running
    on a computer with a compatible hypervisor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用运行在具有兼容虚拟机监控器的计算机上的虚拟机将操作系统从一台计算机传输到另一台计算机。
- en: Individuals and **Small and Medium Enterprise** (**SMEs**) / **Small and Medium
    Industries** (**SMIs**) will generally be more interested in running two different
    OSes at the same time to run software that are compatible with one hypervisor
    but not the other. Large companies are increasingly using virtualization to save
    space in server rooms, simplify installations, facilitate restarts after incidents,
    and of course, develop secure and reliable business networks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 个人和**中小型企业**（**SMEs**）/ **中小型工业**（**SMIs**）通常更关心同时运行两个不同操作系统，以便运行与一个虚拟机监控器兼容但与另一个不兼容的软件。大型公司越来越多地使用虚拟化技术来节省服务器机房空间、简化安装、便于在发生故障后重新启动，当然，还能开发安全可靠的业务网络。
- en: Different techniques of virtualization
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟化的不同技术
- en: The main aspect of the virtualization concept is an entity called **hypervisor**.
    A hypervisor is a software, firmware, or hardware that creates and runs virtual
    machines. The machine that runs a hypervisor is called the host machine, and every
    virtual machine that runs on a hypervisor is called a guest machine. There are
    two types of hypervisors that we will see in this section. Besides a hypervisor,
    there is another main piece of virtualization concept that takes more than one
    name. Some call it an **isolator**, while others call it a **container**, **virtualization
    engine**, or even an **operating-system-level virtualization**. In our case, we
    will call it an isolator. We will discover this, as well as the two hypervisor
    types, in this section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化概念的主要方面是一个叫做**虚拟机管理程序**（Hypervisor）的实体。虚拟机管理程序是用于创建和运行虚拟机的软件、固件或硬件。运行虚拟机管理程序的机器称为主机机器，每个在虚拟机管理程序上运行的虚拟机称为客户机。在本节中，我们将看到两种类型的虚拟机管理程序。除了虚拟机管理程序外，还有一个虚拟化概念的主要组成部分，它有多个名称。有些人称其为**隔离器**，而其他人则称之为**容器**、**虚拟化引擎**，甚至是**操作系统级虚拟化**。在我们的案例中，我们将其称为隔离器。我们将在本节中探讨它以及两种虚拟机管理程序类型。
- en: Type 1 hypervisor
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型1虚拟机管理程序
- en: This type of hypervisor is also called a **native** or **bare-metal hypervisor**.
    It runs directly on a host's hardware, and it handles the hardware directly and
    manages the guest OS. An example of this hypervisor type is the **XenServer**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的虚拟机管理程序也叫做**本地虚拟机管理程序**或**裸机虚拟机管理程序**。它直接运行在主机的硬件上，直接处理硬件并管理客户操作系统。这种类型的虚拟机管理程序的一个例子是**XenServer**。
- en: 'We can model it by using the following schema:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下架构来进行建模：
- en: '![Type 1 hypervisor](img/B04800_05_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![类型1虚拟机管理程序](img/B04800_05_01.jpg)'
- en: Type 2 hypervisor
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型2虚拟机管理程序
- en: This type of hypervisor is also called a **hosted hypervisor**. It runs on the
    host OS just like any other software. It provides an emulation of the hardware
    level to guest systems. An example of this hypervisor type is **Oracle VirtualBox**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的虚拟机管理程序也叫做**托管虚拟机管理程序**。它像其他任何软件一样在主机操作系统上运行。它为客户系统提供硬件级别的仿真。这种类型的虚拟机管理程序的一个例子是**Oracle
    VirtualBox**。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some virtualization programs, such as KVM, can't be easily classified into either
    of the two types. **KVM** is a kernel module that converts the host OS to a type
    1 hypervisor, but at the same time, the host OS always works as a general-purpose
    OS that runs other applications that compete for VM resources. Therefore, KVM
    can also be categorized as a type 2 hypervisor.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一些虚拟化程序，如KVM，无法轻松地归类为这两种类型之一。**KVM**是一个内核模块，它将主机操作系统转化为类型1虚拟机管理程序，但与此同时，主机操作系统始终作为通用操作系统运行，并运行其他与虚拟机资源竞争的应用程序。因此，KVM也可以归类为类型2虚拟机管理程序。
- en: 'We can model type 2 hypervisor by using the following schema:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用以下架构来建模类型2虚拟机管理程序：
- en: '![Type 2 hypervisor](img/B04800_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![类型2虚拟机管理程序](img/B04800_05_02.jpg)'
- en: An isolator
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个隔离器
- en: 'An isolator is a piece of software that is used to isolate applications'' executions
    in what are called contexts or execution areas. An isolator allows you to run
    the same application in a multi-instance mode several times (multiple execution
    instances) even if it was not designed for it. This solution is very efficient
    because of the little overhead (the time spent by a system to do more than just
    manage itself). Note that virtualized environments are not completely isolated.
    The performance is always a key factor. However, we cannot really talk about OS
    virtualization. We can model it by using the following schema:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离器是用于将应用程序的执行隔离在所谓的上下文或执行区域中的一段软件。隔离器允许你在多实例模式下多次运行相同的应用程序（多个执行实例），即使该应用程序并未为此设计。这种解决方案非常高效，因为系统开销较小（系统用于做更多事情而不仅仅是管理自身的时间）。需要注意的是，虚拟化环境并非完全隔离。性能始终是一个关键因素。然而，我们无法真正谈论操作系统虚拟化。我们可以通过使用以下架构来进行建模：
- en: '![An isolator](img/B04800_05_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![隔离器](img/B04800_05_03.jpg)'
- en: The different approaches towards virtualization
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对虚拟化的不同方法
- en: Before starting a virtualization project, it is mandatory to understand the
    two main approaches in this field—**full virtualization** and **paravirtualization**.
    Both XenServer and KVM offer these two approaches. Therefore, you need to know
    the differences between them very well, and this is what we will explain in the
    following sections.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始虚拟化项目之前，必须了解该领域的两种主要方法——**完全虚拟化**和**半虚拟化**。XenServer和KVM都提供这两种方法。因此，你需要非常清楚它们之间的区别，这也是我们将在接下来的章节中解释的内容。
- en: Paravirtualization
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 半虚拟化
- en: The paravirtualization approach requires a modified version of the guest OS,
    that generates special instructions that can be easily handled by the hypervisor,
    which simply interprets and passes them to the physical hardware.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 半虚拟化方法需要对客户操作系统进行修改，使其生成特定的指令，这些指令可以被虚拟机监控程序轻松处理，虚拟机监控程序只需解释并将其传递给物理硬件。
- en: In this case, the guest OS knows that it is virtualized. As a result, it will
    generate instructions that are best optimized for use in a VE and don't need to
    be translated first.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，客户操作系统知道自己是虚拟化的。因此，它将生成最适合在虚拟环境中使用的指令，而无需先进行翻译。
- en: Full virtualization
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全虚拟化
- en: The other approach is full virtualization, which allows you to use an unmodified
    OS as a guest. One of its disadvantages is that it requires special hardware support,
    which is something that is nowadays provided as a special feature in modern CPUs
    (both AMD and Intel processors). Thanks to this built-in support within the server's
    CPU, fully virtualized machines can work as efficiently as possible in spite of
    the fact that the instructions coming from the virtualized OS first need to be
    translated by the hypervisor.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是完全虚拟化，它允许你将未修改的操作系统作为客户操作系统。它的一个缺点是需要特殊的硬件支持，这通常是现代 CPU（包括 AMD 和 Intel
    处理器）提供的一个特性。由于服务器 CPU 中内置了这种支持，完全虚拟化的机器可以高效地运行，尽管来自虚拟化操作系统的指令首先需要被虚拟机监控程序翻译。
- en: KVM (Kernel-based Virtual Machine)
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: KVM（基于内核的虚拟机）
- en: In this section, we will discover the default virtualization technology that
    is actually supported by Ubuntu. Named **KVM** (**Kernel-based Virtual Machine**),
    this virtualization technology is a free software with support built into the
    Linux kernel. This software takes advantage of the virtualization support that
    is built into the Intel and AMD processors and allows you to run a number of different
    distributions and OSes as **VMs** (**virtual machines**) on a single host.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 Ubuntu 实际支持的默认虚拟化技术。名为 **KVM**（**基于内核的虚拟机**），这种虚拟化技术是一种免费软件，已内置于
    Linux 内核中。该软件利用了英特尔和 AMD 处理器内置的虚拟化支持，允许你在单个主机上运行多个不同的操作系统和发行版作为 **虚拟机**（**VMs**）。
- en: Prerequisites
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'Before starting the installation process, you should verify that your computer
    supports virtualization. To check this, you need to run the `kvm-ok` command,
    which is a part of the `cpu-checker` package. Therefore, you first of all need
    to install this package and then invoke the command by using the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始安装过程之前，你应该验证计算机是否支持虚拟化。要检查这一点，你需要运行 `kvm-ok` 命令，它是 `cpu-checker` 包的一部分。因此，你首先需要安装该包，然后使用以下代码调用该命令：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, check the result and verify that you got the following result:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，检查结果并验证你得到了以下结果：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This means that you should look for another computer. However, you may get
    something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你应该寻找另一台计算机。然而，你也许会看到类似这样的信息：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Alternatively, you may get something like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可能会看到类似这样的内容：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This means that you can move on to the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以继续进行到下一部分。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes your CPU supports virtualization, but you may get a message saying
    that it can't. In such cases, most of the time, virtualization is disabled in
    the BIOS. Therefore, you will have to enable it from there. All that you need
    to do is restart your computer and access the BIOS by using the appropriate function
    key (it appears on the screen for a few seconds just after the boot; most of the
    time, you need to use *F12*). From the BIOS screen that appears, look for something
    such as a CPU or performance heading and select it. Then, look for a virtualization
    selection, such as **Intel Virtualization Technology**, and enable it. Save your
    changes and reboot.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你的 CPU 支持虚拟化，但你可能会看到一条消息说它无法支持。在这种情况下，大多数时候，虚拟化在 BIOS 中被禁用。因此，你需要从 BIOS 中启用它。你所需要做的就是重启计算机并使用适当的功能键进入
    BIOS（启动后屏幕上会显示几秒钟；通常你需要按 *F12*）。在出现的 BIOS 屏幕中，寻找类似 CPU 或性能的选项并选择它。然后，寻找一个虚拟化选项，如
    **Intel 虚拟化技术**，并启用它。保存更改并重启计算机。
- en: Configuring the KVM networking
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 KVM 网络
- en: There are two main ways that can be used to set up the network for your VMs.
    The default networking setup provides a private network under *192.168.122.0/24*.
    A DHCP server will hand out the rest of the IPs. Alternatively, you can set up
    static IPs for your VM. The IP of the KVM host is *192.168.122.1*. VMs communicate
    with the outside world via this gateway by using **NAT** (**Network Address Translation**).
    This works fine, especially for VMs on a desktop, but since we are talking about
    servers here, my assumption is that you want machines outside the KVM host to
    be able to communicate with your VMs. While you can certainly set up some iptables
    DNAT rules and forward traffic back in, this solution doesn't scale very well.
    The real solution is to set up a bridged network so that your VMs appear to be
    on the same network as that of your host.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要方式可以用来为虚拟机设置网络。默认的网络设置提供一个位于 *192.168.122.0/24* 的私有网络，DHCP 服务器会分配剩余的 IP
    地址。或者，你也可以为虚拟机设置静态 IP。KVM 主机的 IP 是 *192.168.122.1*。虚拟机通过此网关使用 **NAT**（**网络地址转换**）与外界通信。这种方式很好，尤其适合桌面上的虚拟机，但既然我们在讨论服务器，我猜测你希望
    KVM 主机外的机器能够与虚拟机通信。虽然你当然可以设置一些 iptables DNAT 规则并转发流量回去，但这种解决方案扩展性较差。真正的解决方案是设置桥接网络，这样虚拟机就会显示在与主机相同的网络上。
- en: 'It is relatively simple to set up the `br0` bridge interface on Ubuntu. Essentially,
    you need to identify the interface over which you want to bridge traffic (probably
    `eth0` or possibly `bond0` if you set up bonding), transfer all of its configuration
    to `br0` along with a few extra bridge options, and change the original interface
    to the manual mode. It will make more sense when you see the examples. Consider
    an instance where I had a DHCP set up for `eth0,` and my old configuration in
    `/etc/network/interfaces` looked like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上设置 `br0` 桥接接口相对简单。本质上，你需要识别你希望桥接流量的接口（可能是 `eth0`，如果你设置了绑定，可能是 `bond0`），将其所有配置转移到
    `br0`，并添加一些额外的桥接选项，然后将原接口设置为手动模式。当你看到示例时，这会更容易理解。假设我为 `eth0` 设置了 DHCP，而我在 `/etc/network/interfaces`
    中的旧配置如下：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, my new configuration will look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我的新配置将如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about network bridging on an Ubuntu Server, you can visit
    [https://help.ubuntu.com/community/NetworkConnectionBridge](https://help.ubuntu.com/community/NetworkConnectionBridge).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Ubuntu Server 上网络桥接的信息，你可以访问 [https://help.ubuntu.com/community/NetworkConnectionBridge](https://help.ubuntu.com/community/NetworkConnectionBridge)。
- en: 'Note that I changed the `inet` mode for `eth0` from `dhcp` to `manual`. If
    `eth0` has a static IP configured, I can just transfer the configuration to `br0`
    instead. Let''s take a look at the following configuration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我将 `eth0` 的 `inet` 模式从 `dhcp` 更改为 `manual`。如果 `eth0` 配置了静态 IP，我可以直接将配置转移到
    `br0`。让我们看一下以下配置：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will go to the following configuration:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会进入以下配置：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once I have set up `/etc/network/interfaces` to have the bridge, I then restart
    the network by using the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我配置了 `/etc/network/interfaces` 文件以设置桥接，我就可以使用以下命令重启网络：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To know more about advanced network configurations for KVM on the Ubuntu Server,
    you can take a look at the community page at [https://help.ubuntu.com/community/KVM/Networking](https://help.ubuntu.com/community/KVM/Networking)
    and the official Ubuntu documentation at [https://wiki.ubuntu.com/KvmWithBridge](https://wiki.ubuntu.com/KvmWithBridge).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在 Ubuntu Server 上进行 KVM 高级网络配置的信息，你可以查看社区页面 [https://help.ubuntu.com/community/KVM/Networking](https://help.ubuntu.com/community/KVM/Networking)
    和官方的 Ubuntu 文档 [https://wiki.ubuntu.com/KvmWithBridge](https://wiki.ubuntu.com/KvmWithBridge)。
- en: The KVM installation
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KVM 安装
- en: 'To perform the KVM virtualization, you need to install some additional software
    besides KVM. The following software components need to be added:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行 KVM 虚拟化，除了 KVM 之外，还需要安装一些额外的软件。以下软件组件需要添加：
- en: '`libvirt`: This provides an interface to the virtualization hardware'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libvirt`：提供虚拟化硬件的接口'
- en: '`qemu`: This emulates the PC hardware to virtual machines'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qemu`：模拟 PC 硬件到虚拟机'
- en: '`bridge-utils`: This offers a way to bridge networking from virtual machines
    through the host'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bridge-utils`：提供一种方式通过主机桥接虚拟机的网络'
- en: 'To install the basic software needed for the KVM virtualization, run the following
    command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 KVM 虚拟化所需的基本软件，可以运行以下命令：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that to manage this set of programs, you will mainly use the **command
    language interpreter** (**CLI**) commands. In case you would like to use a GUI
    to manage your VMs, there is the famous `virt-manager` graphical software that
    does the job. Note that you need to either have a graphical environment installed,
    or connect to your server by using SSH with the `-X` option. There is another
    solution—install `virt-manager` on another desktop/laptop that has a graphical
    environment and then use it to remotely manage your VMs by using the following
    command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要管理这一组程序，你将主要使用**命令语言解释器**（**CLI**）命令。如果你想使用GUI来管理虚拟机，可以使用著名的`virt-manager`图形软件。请注意，你需要安装图形环境，或者通过使用`-X`选项的SSH连接到服务器。还有另一种解决方案——在安装有图形环境的另一台台式机/笔记本电脑上安装`virt-manager`，然后使用以下命令通过它远程管理虚拟机：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To install `virt-manager`, execute the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`virt-manager`，执行以下命令：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With `virt-manager` installed, you now have a choice of managing virtual machines
    from a graphical interface or from the command line. Next, you want to make sure
    that the user account from which you want to manage virtualization is configured
    to do so.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`virt-manager`后，你现在可以选择通过图形界面或命令行管理虚拟机。接下来，你需要确保你想用来管理虚拟化的用户帐户已配置好。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'After finishing the installation process, you should add the user whom you
    wish to manage the virtualization of the `libvirtd` group by using the following
    command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装过程后，你应该使用以下命令将希望管理`libvirtd`组虚拟化的用户添加到该组中：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, reboot your server, log in as the user, and check whether the virtualization
    services are running. At this point, you can start managing your VE.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重启你的服务器，作为用户登录，并检查虚拟化服务是否正在运行。此时，你可以开始管理虚拟环境。
- en: Managing virtual machines
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理虚拟机
- en: 'If you want to manage a VE by using the `virt-manager` graphic tool, simply
    run the `virt-manager` command, and you will get an intuitive, easy-to-use GUI.
    You can customize it by editing the **preferences** sub-menu of the **edit** menu.
    You also need to check the connection details via the **edit** menu to customize
    advanced settings, such as networks and storage, as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用`virt-manager`图形工具管理虚拟环境，只需运行`virt-manager`命令，你将获得一个直观、易用的GUI。你可以通过编辑**编辑**菜单下的**首选项**子菜单来进行自定义。你还需要通过**编辑**菜单检查连接详情，以自定义高级设置，如网络和存储，如下图所示：
- en: '![Managing virtual machines](img/B04800_05_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![管理虚拟机](img/B04800_05_04.jpg)'
- en: Then, you can start creating and managing your VMs; it is very easy and intuitive.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以开始创建和管理虚拟机；这非常简单且直观。
- en: On the other hand, if you choose to work using CLI, you should master the options
    that can be used with the main virtualization commands. To get started, you can
    use the `virt-install` command to install a virtual machine. With `virt-clone`,
    you can clone an existing virtual image. To manage VMs, you can use the `virsh`
    command to list information about VMs as well as start, stop, and reboot them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你选择使用CLI工作，你应该掌握可以与主要虚拟化命令一起使用的选项。首先，你可以使用`virt-install`命令来安装虚拟机。使用`virt-clone`，你可以克隆一个现有的虚拟镜像。要管理虚拟机，你可以使用`virsh`命令列出虚拟机的信息，并启动、停止或重启它们。
- en: 'Note that before creating a VM by using `virt-install`, you need to create
    the storage image beforehand. One way to do that is by using the `qemu-img` command.
    For example, the following command will create a 20 GB storage image named `ubuntuserver`
    of the `qcow2` type under the `/media/Data` directory:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在使用`virt-install`创建虚拟机之前，你需要先创建存储镜像。可以通过使用`qemu-img`命令来实现。例如，以下命令将在`/media/Data`目录下创建一个名为`ubuntuserver`、类型为`qcow2`的20GB存储镜像：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After performing this step, you can create a VM. Here''s an example of a `virt-install`
    command line that creates an Ubuntu virtual machine. This command incorporates
    many of the options that you would need to click on or fill in on the `virt-manager`
    window. Note that this command incorporates the image that we created earlier
    in this section by using the `qemu-img` command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，你可以创建虚拟机。下面是一个创建Ubuntu虚拟机的`virt-install`命令行示例。此命令包含了你在`virt-manager`窗口中需要点击或填写的许多选项。请注意，此命令还包含了我们在本节之前通过`qemu-img`命令创建的镜像：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To see the signification of each of these options (and much more) that can be
    used with the `virt-install` command, you need to check the `virt-install man`
    page (type man `virt-install`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可以与`virt-install`命令一起使用的每个选项的含义（以及更多内容），你需要查阅`virt-install man`页面（输入man `virt-install`）。
- en: Once the `virt-install` command starts, you can open an application from the
    desktop to see the progress of the installation. The `virt-manager` and `virt-viewer`
    commands are among those commands that you can use to view your VM's console.
    After the VM is installed, you can manage your VMs by using the `virsh` command.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`virt-install`命令开始执行，你可以打开桌面上的一个应用程序来查看安装进度。`virt-manager`和`virt-viewer`命令是你可以用来查看虚拟机控制台的命令之一。虚拟机安装完成后，你可以使用`virsh`命令来管理虚拟机。
- en: The `virsh` command provides a good way to manage your VMs after they are created.
    You can use `virsh` to see which VMs are running. Then, you can start, stop, pause,
    and otherwise manage them. There are many alternatives to the `virsh` command
    that you can use to manage VMs. Refer to the `virsh man` page (type `man virsh`)
    for details.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`virsh`命令提供了一种管理虚拟机的好方法，特别是在虚拟机创建之后。你可以使用`virsh`查看哪些虚拟机正在运行。然后，你可以启动、停止、暂停以及以其他方式管理它们。还有许多替代`virsh`命令的方式可以用来管理虚拟机。有关详细信息，请参考`virsh
    man`页面（输入`man virsh`）。'
- en: XenServer
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XenServer
- en: The second virtualization platform that we will discuss is the famous **XenServer**.
    Since version 7.10, XenServer was supported by the Ubuntu Server, but starting
    from version 8.04, Canonical made the decision to go with KVM as the default solution
    for virtualization in the Ubuntu Server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的第二个虚拟化平台是著名的**XenServer**。自7.10版本起，XenServer开始支持Ubuntu Server，但从8.04版本起，Canonical决定将KVM作为Ubuntu
    Server中的默认虚拟化解决方案。
- en: In this section, we will discuss how to set up the Ubuntu Server as a host for
    the Xen virtualization. We will also learn how to install guests in a Xen environment.
    Just before starting the hands-on part of this section, let's discover a bit of
    the Xen terminology. In Xen, there's no difference between a host and a guest
    OS. This is because the words "host" and "guest" suggest a hierarchical relation
    that doesn't exist (take a look at the type 1 hypervisor model described in the
    first section of this chapter). So, Xen talks about domains. There is the **domain
    0** OS (which can be compared to the host OS in other virtualization technologies)
    and the other OSes (which can be compared to guest OSs).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何将Ubuntu Server设置为Xen虚拟化的主机。我们还将学习如何在Xen环境中安装客户端。在开始本节的动手操作之前，让我们先了解一下Xen的术语。在Xen中，主机操作系统和客户操作系统之间没有区别。这是因为“主机”和“客户”这两个词暗示着一种层级关系，但这种关系并不存在（请参阅本章第一节中描述的类型1虚拟化管理程序模型）。因此，Xen使用“域”来表示。存在**domain
    0**操作系统（可以与其他虚拟化技术中的主机操作系统进行比较）以及其他操作系统（可以与客户操作系统进行比较）。
- en: These other OSes are referred to as **domain U** machines. The **domain 0**
    OS (or just **dom0**) is the first OS that loads on a physical machine, and it
    has specific responsibilities in the Xen environment, including driver management.
    The **domain U** (or just **domU**) machines are virtualized machines that do
    not have a special responsibility with regard to virtualization.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些其他操作系统被称为**domain U**机器。**domain 0**操作系统（或简称**dom0**）是第一个加载到物理机器上的操作系统，在Xen环境中承担着特定的职责，包括驱动程序管理。**domain
    U**（或简称**domU**）机器是虚拟化的机器，它们没有与虚拟化相关的特殊职责。
- en: Prerequisites
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'The hardware supported by Linux is available for Xen (it should just be compatible
    with the kernel). By default, Xen supports all the operating systems that are
    modified to operate within it, which is called paravirtualization. Xen supports
    unmodified operating systems as well through hardware virtualization, which is
    called full virtualization. However, here we must use a CPU that has hardware
    virtualization support (Intel VT and AMD-V). There is more than one way of verifying
    this point. For example, we can check the flags set for the CPU in `/proc/cpuinfo`.
    By using the `egrep` command, we can search that file for Intel-VT support (vmx)
    or AMD-V support (svm) by using the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Linux支持的硬件也可用于Xen（只要与内核兼容）。默认情况下，Xen支持所有经过修改以在其内运行的操作系统，这被称为半虚拟化。Xen也通过硬件虚拟化支持未经修改的操作系统，这被称为完全虚拟化。然而，在这里我们必须使用支持硬件虚拟化的CPU（Intel
    VT和AMD-V）。验证这一点有多种方法。例如，我们可以检查`/proc/cpuinfo`文件中为CPU设置的标志。通过使用`egrep`命令，我们可以搜索该文件，查找Intel-VT支持（vmx）或AMD-V支持（svm），使用以下命令：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output of this command is shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出如下图所示：
- en: '![Prerequisites](img/B04800_05_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![先决条件](img/B04800_05_05.jpg)'
- en: 'Another way of checking this point is by using the `xm dmesg` command to see
    an overview of all the features that are relevant to the Xen virtualization, as
    follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检查此点的方法是使用`xm dmesg`命令，查看与Xen虚拟化相关的所有功能概览，如下所示：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you don't get a result, your CPU doesn't support virtualization, which means
    that you can't virtualize unmodified OSes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有结果，说明你的CPU不支持虚拟化，这意味着你不能虚拟化未修改的操作系统。
- en: Installing XenServer
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装XenServer
- en: 'Installing XenServer is quite easy for Ubuntu. All that you have to do is run
    the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装XenServer非常简单。你只需要运行以下命令：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, restart your system and from **GRand Unified Bootloader** (**GRUB**),
    choose the entry containing XenServer.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重启系统并从**GRand Unified Bootloader**（**GRUB**）中选择包含XenServer的启动项。
- en: After rebooting, check whether or not you are using the good kernel. Run the
    `sudo uname -a` command and verify that `xen` is present in the result. Also,
    verify that `dom0` is launched by using the `sudo xm list` command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重启后，检查是否使用了正确的内核。运行`sudo uname -a`命令，验证结果中是否包含`xen`。同时，使用`sudo xm list`命令验证`dom0`是否已经启动。
- en: 'Verify that the network is properly configured. The `ifconfig` command must
    return at least three interfaces, namely `lo` (the loopback system), `eth0` (the
    bridge that is no longer your network interface but is the image for `domU`),
    and `peth0` (the network interface). If this is not the case, edit the `/etc/xen/xend-config.sxp`
    file and ensure that you have the following lines uncommented:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 验证网络是否配置正确。`ifconfig`命令必须至少返回三个接口，即`lo`（回环系统）、`eth0`（不再是网络接口，而是`domU`的图像的桥接）和`peth0`（网络接口）。如果不是这种情况，请编辑`/etc/xen/xend-config.sxp`文件，确保以下行未被注释：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Don''t forget to restart the Xen daemon after modifying this script by using
    the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 修改完此脚本后，别忘了使用以下命令重启Xen守护进程：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Xen` daemon is responsible for virtual network infrastructure management.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Xen`守护进程负责虚拟网络基础设施管理。'
- en: The networking concept in a XenServer environment
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XenServer环境中的网络概念
- en: Xen has a specific network environment that is different from other VEs. Every
    domain (starting from `dom0`) has its own virtual drivers that serve as a network
    card; they are simply named `eth0`, `eth1` and so on. Inside the `dom0` OS, you
    will find a logical representation (logical interfaces) for these virtual drivers,
    with the name having the `vifx.y` pattern, where `x` represents the ID of the
    virtualized OS (the **U** in **domU**) and `y` represents the number of the virtualized
    network board (starting from 0).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Xen有一个与其他虚拟环境不同的特定网络环境。每个域（从`dom0`开始）都有自己的虚拟驱动程序，作为网络卡使用；它们简单地命名为`eth0`、`eth1`等。在`dom0`操作系统中，你会发现这些虚拟驱动程序的逻辑表示（逻辑接口），其名称遵循`vifx.y`的模式，其中`x`表示虚拟化操作系统的ID（**U**代表**domU**），而`y`表示虚拟化网络板的编号（从0开始）。
- en: For example, the first network card (`eth0`) in `dom0` is represented by `vif0.0`,
    the second network card (`eth1`) in `dom3` is represented by `vif3.1`, and so
    on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`dom0`中的第一个网络卡（`eth0`）由`vif0.0`表示，`dom3`中的第二个网络卡（`eth1`）由`vif3.1`表示，依此类推。
- en: 'Continuing with the exploring of this concept, in the `dom0` system, all the
    `vif` interfaces are attached to the virtual bridge (called `xenbr0`), that behaves
    like a real switch. Next, this bridge communicates with `peth0`, which is the
    representation of the physical network card, that finally talks directly to the
    network board in your server. The following figure is a graphical representation
    of how all of this is organized:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 继续探索这个概念，在`dom0`系统中，所有的`vif`接口都连接到虚拟桥接（称为`xenbr0`），它表现得像一个真实的交换机。接下来，这个桥接与`peth0`通信，`peth0`是物理网络卡的表示，最终与服务器中的网络板直接通信。以下图像是所有这些如何组织的图形表示：
- en: '![The networking concept in a XenServer environment](img/B04800_05_06.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![XenServer环境中的网络概念](img/B04800_05_06.jpg)'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After creating the virtual network, you have to add the `max_loop=64` line loop
    in the `/etc/modules` file. This is mandatory as you need to ensure that you can
    create enough virtual disks for your virtual machines. A reboot is needed to confirm
    that this new setting works before you start creating virtual machines.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟网络后，你必须在`/etc/modules`文件中添加`max_loop=64`行。这是强制性的，因为你需要确保可以为虚拟机创建足够的虚拟磁盘。重启系统以确认这个新设置有效，然后才能开始创建虚拟机。
- en: Managing virtual machines
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理虚拟机
- en: 'Like KVM, XenServer can also be managed by using either GUI or CLI. For GUI,
    there is a multitude of tools. The following are some of these tools:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与KVM类似，XenServer也可以通过图形界面（GUI）或命令行界面（CLI）进行管理。对于GUI，有许多工具可供选择。以下是其中的一些工具：
- en: '**Virt-manager**: We had a look at this in the KVM section. This works very
    well if you wish to create and manage XenServer VMs.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Virt-manager**：我们在KVM部分已经看过了这个工具。如果您希望创建和管理XenServer虚拟机，它非常好用。'
- en: '**OpenXenManager**: This is a dedicated GUI that can be used to manage Xen.
    You can install it by using the following command:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenXenManager**：这是一个专门用于管理Xen的图形界面（GUI）。您可以使用以下命令安装它：'
- en: '[PRE20]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**XCP Project Kronos**: **XCP** stands for **Xen Cloud Platform**. To install
    this, you have to add the `ppa:ubuntu-xen-org/xcp1` PPA to your source list (see
    [Chapter 2](ch02.html "Chapter 2. Configuring and Administering Ubuntu Server"),
    *Configuring and Administering Ubuntu Server*, to learn how to do this), update
    the package list, and finally run `sudo apt-get install xcp-storage-managers`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XCP项目Kronos**：**XCP**代表**Xen Cloud Platform**。要安装此项目，您必须将`ppa:ubuntu-xen-org/xcp1`
    PPA添加到源列表中（请参见[第2章](ch02.html "第2章. 配置和管理Ubuntu服务器")，*配置和管理Ubuntu服务器*，了解如何操作），然后更新软件包列表，最后运行`sudo
    apt-get install xcp-storage-managers`。'
- en: '**xen-tools**: You can install this by using the following command:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xen-tools**：您可以使用以下命令安装此工具：'
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the following part of this section, we will concentrate on CLI tools. The
    native way of doing this is by creating a storage image by using a tool, such
    as `dd`, as discussed in the backup/restore section in [Chapter 4](ch04.html "Chapter 4. Security
    with Ubuntu"), *Security with Ubuntu*. Next, you need to create a configuration
    file for the guest system, which will contain all the settings used by the guest
    system (RAM, hard disk, and so on), and create a VM based on that `config` file
    by using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的后续部分，我们将重点讨论CLI工具。实现这一目标的原生方法是使用像`dd`这样的工具创建存储映像，如在[第4章](ch04.html "第4章.
    安全与Ubuntu")，*安全与Ubuntu*部分中讨论的那样。接下来，您需要为客户系统创建一个配置文件，其中包含客户系统使用的所有设置（如RAM、硬盘等），然后使用以下命令基于该`config`文件创建虚拟机：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `xm create` command can also be used without a `config` file, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`xm create`命令也可以在没有`config`文件的情况下使用，如下所示：'
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `xm` manual contains a lot of helpful information if you wish to use `xm`.
    Take a look at it before you start using `xm`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望使用`xm`，`xm`手册包含了许多有用的信息。在开始使用`xm`之前，可以先阅读一下。
- en: An introduction to Docker
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker简介
- en: 'Docker is a famous program that automates and simplifies the deployment of
    applications and services inside software containers. It is one of the best tools
    that is classified under the isolator category (see the first section of this
    chapter). Docker is based on an additional layer of abstraction and automation
    of an operating-system-level virtualization (also known as the isolator). It was
    supported by the Ubuntu Server from its 14.04 release. According to an industry
    analyst firm named 451 Research:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个著名的程序，它自动化并简化了在软件容器内部署应用程序和服务的过程。它是最好的工具之一，属于隔离器类别（请参见本章的第一部分）。Docker基于操作系统级虚拟化的附加抽象和自动化层（也称为隔离器）。从Ubuntu
    Server 14.04版本开始，它得到了支持。根据一家行业分析公司451 Research的说法：
- en: '*"Docker is a tool that can package an application and its dependencies in
    a virtual container that can run on any Linux server. This helps enable flexibility
    and portability on where the application can run, whether on premises, public
    cloud, private cloud, bare metal, etc."*'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“Docker是一个可以将应用程序及其依赖项打包到一个虚拟容器中的工具，这个容器可以在任何Linux服务器上运行。这有助于提高应用程序的灵活性和可移植性，无论是在本地、公共云、私有云、裸金属等环境中。”*'
- en: How Docker works
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker工作原理
- en: As discussed earlier, an isolator provides an environment (containers) to run
    processes in isolation. This is exactly what's done by Docker in a lightweight
    manner by implementing a high-level API that uses resource isolation features
    provided by the Linux kernel (such as kernel namespaces, cgroups, and so on) to
    allow separate containers to run inside a single Linux instance.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，隔离器提供了一个环境（容器）来隔离运行的进程。这正是Docker通过实现一个高级API来轻量化地完成的，API使用Linux内核提供的资源隔离功能（如内核命名空间、cgroups等），使得不同的容器可以在同一个Linux实例中运行。
- en: Unlike a virtual machine, a Docker container does not require a separate OS.
    Instead, it uses resource isolation (CPU, memory, block I/O, network, and so on)
    to isolate an application's view of the operating system. There are two ways that
    can be used by Docker to access the Linux kernel's virtualization features. The
    first way involves directly using the `libcontainer` library, which has been available
    since Docker 0.9\. The second way requires you to indirectly use a multitude of
    tools, such as `libvirt`, `systemd-nspawn`, and **LXC** (**Linux Containers**).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与虚拟机不同，Docker 容器不需要单独的操作系统。相反，它使用资源隔离（CPU、内存、块 I/O、网络等）来隔离应用程序对操作系统的视图。Docker
    可以通过两种方式访问 Linux 内核的虚拟化功能。第一种方式是直接使用 `libcontainer` 库，自 Docker 0.9 版本起就已经提供。第二种方式是间接使用一系列工具，如
    `libvirt`、`systemd-nspawn` 和 **LXC**（**Linux 容器**）。
- en: The resource isolation and service restrictions that result from the use of
    containers provide an almost completely private view of the operating system.
    Therefore, every container has its own process ID space, file system structure,
    and network interfaces. By adding a few additional constraints for each container
    to use only a defined amount of resources, such as CPU, memory, and I/O, we can
    limit the disadvantages of sharing the same kernel between multiple containers.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 容器使用带来的资源隔离和服务限制提供了几乎完全私有的操作系统视图。因此，每个容器都有自己的进程 ID 空间、文件系统结构和网络接口。通过为每个容器添加一些额外的约束，限制它们仅使用特定数量的资源（如
    CPU、内存和 I/O），我们可以限制共享相同内核的多个容器的缺点。
- en: The use of Docker for container management will simplify the setup of distributed
    systems as well as the deployment of new nodes, which can open a new era for the
    **platform as a service** (**PaaS**) mode.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 进行容器管理将简化分布式系统的设置以及新节点的部署，这为 **平台即服务**（**PaaS**）模式开辟了新的时代。
- en: Installing Docker
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: 'For Ubuntu Server 14.04 and later, Docker is part of the main Ubuntu repositories.
    Therefore, to install Docker, you just have to run the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ubuntu Server 14.04 及更高版本，Docker 已包含在主 Ubuntu 仓库中。因此，安装 Docker 只需运行以下命令：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For older releases, you have to update your source list before executing the
    installation command. This is done by performing the following steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于旧版本，你需要在执行安装命令之前更新你的源列表。这个操作可以通过以下步骤完成：
- en: 'Create a file named `/etc/apt/sources.list.d/docker.list` and put the following
    line in it:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `/etc/apt/sources.list.d/docker.list` 的文件，并在其中放入以下行：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, download the GPG key and install the `lxc-docker` package by using the
    following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令下载 GPG 密钥并安装 `lxc-docker` 包：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you want to avoid using `sudo` with every Docker command, add the user to
    the Docker group by using the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想每次 Docker 命令都使用 `sudo`，可以通过以下命令将用户添加到 Docker 组：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When the installation is finished, you have to start Docker just like any other
    ordinary service by using the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你需要像启动其他普通服务一样，通过以下命令启动 Docker：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using Docker
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Docker
- en: 'As an example, we will have a look at how to use Docker with a LAMP container.
    But first, let''s explore some terminology that we will need later to understand
    different actions:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，我们将看看如何使用 Docker 与 LAMP 容器。但首先，让我们探讨一些后续理解不同操作时所需要的术语：
- en: '**DockerFile**: This is a source file that contains instructions for a configuration
    file'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DockerFile**：这是一个源文件，包含配置文件的指令。'
- en: '**Image**: This is a compilation of `DockerFile` that is used to build a portable
    image that is ready for deployment'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Image**：这是一个 `DockerFile` 的编译，用来构建一个可以部署的便携镜像。'
- en: '**Container**: This is the execution of an image, simply a process that is
    used to run an image'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Container**：这是镜像的执行过程，简单来说，就是用来运行镜像的进程。'
- en: Now, let's move on to practical stuff.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入实际操作部分。
- en: 'First of all, for an image, you can either prepare yours or simply download
    one of the prepared images built by the community. You can search for them either
    via the Web by visiting [https://hub.docker.com/explore/](https://hub.docker.com/explore/),
    or via CLI by using the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对于镜像，你可以准备自己的镜像，或者直接下载社区构建的现成镜像。你可以通过访问 [https://hub.docker.com/explore/](https://hub.docker.com/explore/)
    网站，或通过 CLI 使用以下命令来搜索它们：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You will get a long list of images. You have to choose your own image. For
    this example, we have chosen the `reinblau/lamp` image. To install this image,
    all that you need to do is run the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到一个长列表的镜像。您需要选择自己的镜像。在此示例中，我们选择了`reinblau/lamp`镜像。要安装此镜像，您只需运行以下命令：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This command will download and install this image. After finishing this step,
    you need to run it in a container. This is done by using the `docker run` command,
    which can take some arguments such as the port NATing that was used in the LAMP
    case:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载并安装此镜像。完成此步骤后，需要在容器中运行它。可以通过使用`docker run`命令来实现，该命令可以接受一些参数，例如LAMP案例中使用的端口NAT：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, this means that port `80` of the host machine will be mapped to port `80`
    of the `docker` container. The same goes for port `3306`. We can get this information
    from the repository page of Docker.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，意味着主机的端口`80`将映射到`docker`容器的端口`80`。端口`3306`也是如此。我们可以从Docker的仓库页面获取此信息。
- en: At this step, we can start using the LAMP server that is working in this `docker`
    container.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们可以开始使用在此`docker`容器中运行的LAMP服务器。
- en: 'When working on a `docker` container, you will have a prompt that looks like
    this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker`容器中工作时，您将看到类似这样的提示：
- en: '[PRE32]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After you finish working, you need to save the changes on your image. To do
    this, you need to run the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 完成工作后，需要保存对镜像所做的更改。为此，需要运行以下代码：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To list the images installed on your machine, you need to run the following
    code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出已安装在机器上的镜像，您需要运行以下代码：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To list containers (the running images), you need to execute the following
    command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出容器（运行中的镜像），需要执行以下命令：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To get the job ID of your container, execute the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取容器的作业ID，请执行以下命令：
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This job ID is useful when you need to stop a container by using the following
    command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要通过以下命令停止容器时，此作业ID非常有用：
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When you would like to remove the job ID, use the following commands:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要移除作业ID时，使用以下命令：
- en: '[PRE38]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: One of the best advantages of Docker is the possibility of easily importing/exporting
    images.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的一个最佳优势是可以轻松地导入/导出镜像。
- en: 'To export a container in `tar.gz`, execute the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要将容器导出为`tar.gz`文件，请执行以下命令：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To import a `tar.gz` file, execute the following command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入`tar.gz`文件，请执行以下命令：
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Cloud computing for the Ubuntu Server
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu Server的云计算
- en: Cloud computing is one of the latest trends and hottest subjects in the IT world,
    and the Ubuntu Server is one of the leading OSes in this field, especially with
    its infrastructure based on OpenStack deployed by big names such as NASA, NSA,
    HP, AT&T, Alcatel-Lucen, and so on.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是IT世界中的最新趋势和热门话题，而Ubuntu Server是该领域的领先操作系统之一，尤其是其基于OpenStack的基础设施，由NASA、NSA、HP、AT&T、阿尔卡特-朗讯等大公司部署。
- en: In the following section, we will explore two of the best open source Clouds
    that we can easily deploy on the Ubuntu Server—one for file sharing and the other
    for PaaS—as well as the best part concerning OpenStack deployment on Ubuntu.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨可以轻松部署在Ubuntu Server上的两个最佳开源云服务——一个用于文件共享，另一个用于PaaS——以及关于在Ubuntu上部署OpenStack的最佳部分。
- en: The ownCloud software
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ownCloud软件
- en: The **ownCloud** software allows you to create and use a storage server and
    share files online. In the next section, we will see the technologies used in
    ownCloud software.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**ownCloud**软件允许您创建并使用存储服务器并在线共享文件。在接下来的章节中，我们将介绍ownCloud软件中使用的技术。'
- en: The technology used in ownCloud
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ownCloud使用的技术
- en: The ownCloud software uses the WebDAV protocol to seamlessly access a server
    through a network drive on Linux, Windows, or Mac. There is also sync software
    for many platforms (Linux, Mac, Windows, Android, and so on) so that you can keep
    a local copy of your files and work offline. The ownCloud software not only provides
    a file sharing service, but also can be used to manage your calendar, contacts,
    bookmarks, and even music.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: ownCloud软件使用WebDAV协议，通过Linux、Windows或Mac上的网络驱动器无缝访问服务器。还有适用于多个平台（Linux、Mac、Windows、Android等）的同步软件，您可以保持文件的本地副本并离线工作。ownCloud软件不仅提供文件共享服务，还可以用来管理日历、联系人、书签，甚至音乐。
- en: The project is developed in PHP. It is thus installed on many web servers. It
    doesn't require specific functionalities such as Java, or particular web server
    extensions.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目使用PHP开发。因此，它可以安装在许多Web服务器上。它不需要诸如Java或特定Web服务器扩展的功能。
- en: In the following section, we will cover only the installation process of the
    ownCloud server. The installation and configuration of a client is beyond the
    scope of this book.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将仅介绍 ownCloud 服务器的安装过程。本书不涉及客户端的安装和配置。
- en: The ownCloud server installation
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ownCloud 服务器的安装
- en: Since the release of version 5.0 of ownCloud, its installation is very simple.
    Packages for ownCloud are available for the supported versions of Ubuntu at [http://download.owncloud.org/download/repositories/stable/](http://download.owncloud.org/download/repositories/stable/).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 ownCloud 版本 5.0 发布以来，它的安装变得非常简单。ownCloud 的软件包已为 Ubuntu 支持的版本提供，下载地址为[http://download.owncloud.org/download/repositories/stable/](http://download.owncloud.org/download/repositories/stable/)。
- en: 'For example, to install ownCloud for Ubuntu 15.04, run the following commands:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为 Ubuntu 15.04 安装 ownCloud，请运行以下命令：
- en: '[PRE41]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can add the repository key to `apt`. Keep in mind that the owner of the
    key may distribute updates, packages, and repositories that your system will trust.
    To add the key, run the following code:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将仓库密钥添加到`apt`中。请记住，密钥的所有者可能会分发更新、软件包和仓库，你的系统将会信任这些内容。要添加密钥，请运行以下代码：
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Your server is now available at `http://<server_ip>/owncloud/`. You must create
    an account in the first connection. In case the server complains about unmet dependencies,
    restart the web server by using the `sudo service apache2 reload` command.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的服务器可以通过`http://<server_ip>/owncloud/`访问。在第一次连接时，你必须创建一个账户。如果服务器提示缺少依赖项，请使用`sudo
    service apache2 reload`命令重新启动 Web 服务器。
- en: 'To enable secure connections to the Apache server (HTTPS), run the following
    commands:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用对 Apache 服务器的安全连接（HTTPS），请运行以下命令：
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, log in to the server via `https://<server_ip>/owncloud/`. From the **Administration**
    menu, which is available at `https://<server_ip>/owncloud/index.php/settings/admin`,
    check off the **Force HTTPS** checkbox.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过`https://<server_ip>/owncloud/`登录服务器。从**管理**菜单中，在`https://<server_ip>/owncloud/index.php/settings/admin`页面，勾选**强制使用
    HTTPS**选项。
- en: CozyCloud
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CozyCloud
- en: CozyCloud is a free personal Cloud server. It focuses on applications and collaboration
    applications related to personal data. CozyCloud is a personal **PaaS** (**Platform
    as a Service**) solution that allows you to deploy personal web applications in
    a click. You can select the existing Cozy applications (Notes, Todos, Calendar,
    Contacts, Photos, and so on), adapt an existing Node.js application, or start
    your own web application `from-scratch` (documentation and tutorials related to
    this are available on the Internet).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: CozyCloud 是一个免费的个人云服务器。它专注于与个人数据相关的应用程序和协作应用程序。CozyCloud 是一个个人**PaaS**（**平台即服务**）解决方案，允许你一键部署个人
    Web 应用程序。你可以选择现有的 Cozy 应用程序（如 Notes、Todos、Calendar、Contacts、Photos 等），也可以适配现有的
    Node.js 应用程序，或者从头开始创建你自己的 Web 应用程序（相关文档和教程在网上可找到）。
- en: Installing CozyCloud on Ubuntu Server
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Ubuntu Server 上安装 CozyCloud
- en: 'First of all, start by installing Python and the `pip` tools on your machine
    by using the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的机器上使用以下命令安装 Python 和 `pip` 工具：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Once you have the `pip` tools installed on your machine, you have to install
    `fabric` and `fabtools` by using the following command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好`pip`工具后，你需要使用以下命令安装`fabric`和`fabtools`：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, download the `fabric` file (a script that will run commands on your remote
    server), as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下载`fabric`文件（这是一个将在你的远程服务器上运行命令的脚本），如下所示：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Once your system is prepared, use the `fabric` script from your local machine
    to launch the Cozy installation (run it in the same directory as that of `fabfile`
    that you downloaded before). This is done by using the following command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统准备好，使用本地机器上的`fabric`脚本启动 Cozy 安装（在你下载的`fabfile`所在的目录运行该脚本）。可以使用以下命令：
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Once you run the preceding command, you need to be patient for a few moments.
    As you may know, deployments of some commands or applications can take some time
    depending on your network and hardware capabilities. When prompted by the installer,
    you have to enter your settings.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行了上述命令，你需要耐心等待片刻。正如你所知，某些命令或应用程序的部署可能需要一些时间，具体取决于你的网络和硬件能力。当安装程序提示时，你需要输入你的设置。
- en: After the installation is complete, you can access `https://<IP_address>:443`
    to create the principal Cozy account. The use of HTTPS is mandatory. In case you
    simply use HTTP, you will just see the `nginx` welcome page.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以访问`https://<IP_address>:443`来创建主 Cozy 账户。使用 HTTPS 是强制性的。如果你仅使用 HTTP，你将只看到`nginx`欢迎页面。
- en: Using CozyCloud
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CozyCloud
- en: Once the installation is complete, you can access your platform using HTTPS,
    as explained before. Since this is your first login, you need to register your
    account (provide an e-mail and a password).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以按照之前的说明通过 HTTPS 访问你的平台。由于这是你第一次登录，你需要注册你的账户（提供电子邮件和密码）。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The password that you choose will also become the key that enables Cozy applications
    to encrypt certain information in the database.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的密码也将成为启用 Cozy 应用程序加密数据库中特定信息的密钥。
- en: You will then arrive at the Cozy home page that displays the installed applications.
    The operation is similar to that of a smartphone—you go to the marketplace (**tab
    +Apps**) and install the existing applications or the application that you built
    (if they are already on a GitHub repository).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将进入 Cozy 的主页，显示已安装的应用程序。操作类似于智能手机——你进入市场（**标签 + 应用**），并安装现有的应用程序或你构建的应用程序（如果它们已经在
    GitHub 仓库中）。
- en: An integral aspect of application development for CozyCloud that deserves a
    mention is that Cozy is a PaaS, which means that the development of an application
    does not depend on an SDK (as is the case with an Android or iPhone app). You
    can create a web application as you're used to and deploy it within Cozy or anywhere
    else!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: CozyCloud 应用开发的一个重要方面是，Cozy 是一个 PaaS，这意味着应用程序的开发不依赖于 SDK（如 Android 或 iPhone
    应用程序）。你可以像往常一样创建一个 Web 应用程序，并将其部署到 Cozy 或其他任何地方！
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A good starting point in case you wish to document about Cozy is [https://github.com/cozy/cozy-setup/wiki](https://github.com/cozy/cozy-setup/wiki).
    This page contains resources related to development.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望编写有关 Cozy 的文档，一个好的起点是 [https://github.com/cozy/cozy-setup/wiki](https://github.com/cozy/cozy-setup/wiki)。该页面包含与开发相关的资源。
- en: OpenStack
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack
- en: OpenStack is a free software that allows the construction of private and public
    Clouds. OpenStack is a community and a project in addition to the software that
    is designed to help organizations implement their own Clouds. OpenStack consists
    of a series of software and open source projects that are maintained by the community,
    which includes OpenStack Compute (named Nova), OpenStack Object Storage (named
    Swift), OpenStack Image Service (named Glance), and many more components that
    are increasing in number with every new release.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack 是一款自由软件，允许构建私有和公共云。OpenStack 不仅是软件，还是一个社区和项目，旨在帮助组织实现自己的云。OpenStack
    由一系列由社区维护的软件和开源项目组成，其中包括 OpenStack Compute（名为 Nova）、OpenStack Object Storage（名为
    Swift）、OpenStack Image Service（名为 Glance）等许多组件，且随着每次新版本发布，组件数量不断增加。
- en: Users are mainly deploying it as an **IaaS** (**Infrastructure as a Service**).
    This technology consists of a set of interconnected projects that control pools
    of processing, storage, and networking resources over a datacenter, which is managed
    by users through multiple utilities such as a web-based dashboard, command-line
    tools, or even a RESTful API.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 用户主要以**IaaS**（**基础设施即服务**）的方式进行部署。该技术由一组互联的项目组成，这些项目控制着数据中心中处理、存储和网络资源的池，这些资源通过多个工具（如基于
    Web 的仪表盘、命令行工具，甚至 RESTful API）由用户进行管理。
- en: 'Canonical provide a fully integrated and optimized combination of the latest
    release of the Ubuntu Server and the latest release of OpenStack, allowing users
    to get the best user experience with Ubuntu OpenStack. According to the OpenStack
    User Survey that was conducted in November 2014:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Canonical 提供了一个完全集成且优化的最新版本的 Ubuntu Server 和 OpenStack 的组合，允许用户通过 Ubuntu OpenStack
    获得最佳的用户体验。根据 2014 年 11 月进行的 OpenStack 用户调查：
- en: '*64% of production OpenStack clouds are run on Ubuntu.*'
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*64% 的生产 OpenStack 云运行在 Ubuntu 上。*'
- en: Canonical provides a set of useful tools. When associated with OpenStack, they
    give it more dimensions. In this section, we will start by discovering these tools.
    Then, we will move on to see how to install OpenStack in an Ubuntu Server.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Canonical 提供了一套有用的工具。当与 OpenStack 配合使用时，它们能赋予 OpenStack 更多维度。在本节中，我们将首先介绍这些工具。然后，我们将继续查看如何在
    Ubuntu Server 上安装 OpenStack。
- en: OpenStack tools
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenStack 工具
- en: As mentioned previously, Ubuntu is the most popular operating system for OpenStack
    in the world. Ubuntu offers a set of innovative tools and programs that help users
    build their enterprise-scale Cloud in the easiest and fastest way.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ubuntu 是全球最受欢迎的 OpenStack 操作系统。Ubuntu 提供了一套创新的工具和程序，帮助用户以最简单和最快的方式构建企业级云。
- en: Juju
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Juju
- en: Juju, which also means magic, is the service orchestration management tool that
    was mainly developed by Canonical for Cloud computing. Juju concentrates on services.
    It provides a new concept of software deployment in an easy and quick manner with
    possibilities of integration and scalability on a large number of Cloud infrastructures.
    One of the primary components of Juju is called Charms, which can be written in
    any programming language that can be executed from the command line.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Juju，也意味着魔法，是由Canonical主要为云计算开发的服务编排管理工具。Juju专注于服务。它以一种简单快捷的方式提供软件部署的新概念，并且可以在大量云基础设施上进行集成和扩展。Juju的主要组成部分之一称为Charms，可以用任何可以从命令行执行的编程语言编写。
- en: MAAS
  id: totrans-243
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: MAAS
- en: The concept of **Metal as a Service** (**MAAS**) was created by Canonical to
    provide a system that can simplify the task of setting up a physical hardware
    on which you can deploy complex scalable services in the same manner as that of
    Ubuntu's OpenStack Cloud infrastructure does.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**Metal as a Service**（**MAAS**）的概念是由Canonical创建的，旨在提供一个系统，可以简化设置物理硬件的任务，您可以在其中像Ubuntu的OpenStack云基础设施一样部署复杂可伸缩的服务。'
- en: MAAS takes care of preparing the new node, installing the Ubuntu image, configuring
    it, and making it functional. Besides, it checks hardware-specific tasks, such
    as burn-in tests, firmware, and the RAID upgrade.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: MAAS负责准备新节点，安装Ubuntu镜像，配置并使其功能正常。此外，它还检查硬件特定的任务，例如烧录测试、固件和RAID升级。
- en: The MAAS and Juju combination will breathe new life into old hardware by recycling
    it for use in other parts of your infrastructure.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: MAAS和Juju的组合将通过将旧硬件回收再利用，为您的基础设施的其他部分注入新的生命。
- en: Landscape
  id: totrans-247
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Landscape
- en: The official management tool for Cloud computing under the Ubuntu Server is
    Landscape. It is one of the most powerful tools of the Ubuntu OpenStack combination.
    It is a rich web-based GUI that allows users to easily build its Cloud in minutes,
    monitor it in real time, and manage it in the most efficient way.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Server下的云计算官方管理工具是Landscape。它是Ubuntu OpenStack组合中最强大的工具之一。它是一个功能丰富的基于Web的GUI，允许用户在几分钟内轻松构建其云，实时监控并以最有效的方式进行管理。
- en: LXD
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LXD
- en: Also known as the Linux container hypervisor, LXD is the next-generation hypervisor
    provided by Canonical. It combines the density of containers with the manageability
    of virtual machines. LXD simplifies deployment and the running of VMs in a connected
    and secure environment with high-scalability possibilities and the ability of
    interoperability.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: LXD，也被称为Linux容器超级监控程序，是由Canonical提供的下一代超级监控程序。它将容器的密度与虚拟机的可管理性结合在一起。LXD简化了在联网和安全环境中部署和运行虚拟机的过程，具有高扩展性和互操作性的可能性。
- en: Snappy
  id: totrans-251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Snappy
- en: Snappy is a Cloud-based operating system provided by Canonical and based on
    the Ubuntu Server. It was developed to be used with **Internet of Things** (**IoT**)
    devices. The difference between the Snappy Ubuntu core and the standard Ubuntu
    system is that applications are provided through a simpler, faster mechanism and
    most importantly, it provides a stronger security guarantee for apps, making it
    ideal for Docker and other Cloud deployment frameworks.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Snappy是由Canonical提供的基于云的操作系统，基于Ubuntu Server。它专为**物联网**（**IoT**）设备设计。Snappy
    Ubuntu Core与标准Ubuntu系统的区别在于，应用程序通过更简单、更快速的机制提供，并且最重要的是，它为应用程序提供了更强大的安全保证，使其成为Docker和其他云部署框架的理想选择。
- en: The OpenStack setup
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenStack设置
- en: Mastering OpenStack, from its setup, configuration, and administration, to troubleshooting
    and maintenance, are subjects that need to be explained in books with hundreds
    of pages. In this section, we don't have much space to elaborate on all of this.
    So, I will try to make you get a taste of it. We will discover the main lines
    steps of setting up an OpenStack Cloud on an Ubuntu Server in two ways—the manual
    installation and the DevStack-based installation.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 精通OpenStack，从其设置、配置和管理，到故障排除和维护，这些都是需要通过数百页的书籍来解释的主题。在本节中，我们没有足够的空间详细介绍所有这些内容。因此，我将尝试让您略知一二。我们将探索在Ubuntu
    Server上两种方式设置OpenStack云的主要步骤——手动安装和基于DevStack的安装。
- en: Installing OpenStack using DevStack
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用DevStack安装OpenStack
- en: DevStack is a script that can be used to quickly create an OpenStack development
    environment or demonstrate OpenStack services and provide examples of using them
    from a CLI. It changed from a simple demonstration tool to a useful, quick sanity
    check for the OpenStack installation.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: DevStack是一个脚本，可以快速创建OpenStack开发环境，或展示OpenStack服务并提供从CLI使用它们的示例。它从一个简单的演示工具发展为OpenStack安装的一个有用、快速的有效性检查工具。
- en: The mission of DevStack is to provide and maintain tools used for the installation
    of the central OpenStack services from the source (the `git` repository master
    or specific branches) suitable for development and operational testing. It also
    demonstrates and documents examples of configuring and running services as well
    as using command-line clients.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: DevStack的使命是提供并维护用于从源代码（`git` 仓库的主分支或特定分支）安装中央OpenStack服务的工具，适用于开发和操作测试。它还演示并记录了配置和运行服务以及使用命令行客户端的示例。
- en: 'The following are the steps needed to install OpenStack using DevStack:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用DevStack安装OpenStack所需的步骤：
- en: Install the selected OS. In our case, it is Ubuntu Server 15.04.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装所选操作系统。在我们的案例中，它是Ubuntu Server 15.04。
- en: 'Download DevStack by using the following command:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令下载DevStack：
- en: '[PRE48]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `devstack` repository contains a script that installs OpenStack and templates
    for configuration files.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`devstack` 仓库包含一个安装OpenStack的脚本和配置文件的模板。'
- en: Configure your environment. You can refer to [http://docs.openstack.org/developer/devstack/configuration.html](http://docs.openstack.org/developer/devstack/configuration.html)
    for more details.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置你的环境。你可以参考[http://docs.openstack.org/developer/devstack/configuration.html](http://docs.openstack.org/developer/devstack/configuration.html)获取更多细节。
- en: 'Start the installation by using the following command:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令开始安装：
- en: '[PRE49]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: It takes a few minutes to run the preceding command. We recommend that you read
    the preceding script while it is being installed.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令需要几分钟时间。我们建议你在安装过程中阅读前面的脚本。
- en: Note
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find a lot of guides at [http://docs.openstack.org/developer/devstack/](http://docs.openstack.org/developer/devstack/).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://docs.openstack.org/developer/devstack/](http://docs.openstack.org/developer/devstack/)找到许多指南。
- en: The manual installation
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装
- en: The manual installation is actually the most suitable for you if you want to
    deploy a real Cloud and not just to test the power of OpenStack. We can install
    the Cloud on only one machine, but it is recommended by Canonical that you should
    use at least seven machines, each with two hard disks, and two of them must have
    two **network interfaces** (**NICs**).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 手动安装实际上是最适合你的，如果你想部署一个真正的云而不仅仅是测试OpenStack的功能。我们可以在一台机器上安装云，但Canonical建议你至少使用七台机器，每台机器有两块硬盘，并且其中两台必须有两个**网络接口**（**NICs**）。
- en: Note
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to just set up OpenStack on a single Ubuntu Server based on the
    14.04 LTS or 15.04 releases, a good tutorial is available at [https://fosskb.wordpress.com/2015/04/18/installing-openstack-kilo-on-ubuntu-15-04-single-machine-setup/](https://fosskb.wordpress.com/2015/04/18/installing-openstack-kilo-on-ubuntu-15-04-single-machine-setup/).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想在单个Ubuntu Server上设置OpenStack，并且基于14.04 LTS或15.04版本，可以参考[https://fosskb.wordpress.com/2015/04/18/installing-openstack-kilo-on-ubuntu-15-04-single-machine-setup/](https://fosskb.wordpress.com/2015/04/18/installing-openstack-kilo-on-ubuntu-15-04-single-machine-setup/)的教程。
- en: 'However, in case you want to get a real Cloud according to the Canonical recommendations,
    the following is a summary of the steps that are required if you wish to get your
    own Cloud OpenStack running based on the Ubuntu servers:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你希望根据Canonical的建议建立一个真正的云，以下是一个简要总结，列出了如果你希望在Ubuntu服务器上运行自己的Cloud OpenStack所需的步骤：
- en: 'First of all, you have to install the Ubuntu Server on one of the machines
    that have two network interfaces. Then, you need to set up a private network with
    all the machines plugged in, with the network divided into the following three
    logical ranges:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要在一台有两个网络接口的机器上安装Ubuntu Server。然后，你需要设置一个包含所有机器的私有网络，并将网络划分为以下三个逻辑范围：
- en: The dynamic range maps an IP address to every NIC connected to the network
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态范围将一个IP地址映射到每个连接到网络的网络接口卡（NIC）。
- en: The static range maps an IP address to every machine connected to the network
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态范围将一个IP地址映射到每台连接到网络的机器。
- en: The floating IP range maps an IP address to every instance that you'll have
    in your Cloud
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮动IP范围将一个IP地址映射到你在云中将拥有的每个实例。
- en: 'Secondly, you need to add the needed repositories to your source list and update
    your package list by using the following commands:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，您需要通过以下命令将所需的仓库添加到您的源列表并更新软件包列表：
- en: '[PRE50]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, if you want to set up MAAS, you need to run the following command:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果您想设置MAAS，您需要运行以下命令：
- en: '[PRE51]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, perform the following step-by-step instructions:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下逐步指令操作：
- en: Access the MAAS UI at `http://<maas_ip_address>/MAAS/` and follow the instructions
    provided there to create a profile of an administrator. Then, log in with those
    credentials.
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问`http://<maas_ip_address>/MAAS/`并按照页面提供的指示创建管理员的配置文件。然后，使用这些凭据登录。
- en: Import disk images for Ubuntu.
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入Ubuntu的磁盘映像。
- en: Add the SSH key to your user profile by visiting `http://<maas_ip_address>/MAAS/account/prefs/`.
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过访问`http://<maas_ip_address>/MAAS/account/prefs/`将SSH密钥添加到您的用户配置文件中。
- en: Copy the MAAS key (you will need this later).
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制MAAS密钥（稍后需要）。
- en: Fill in the other details, such as the gateway and DNS, in the networks that
    were automatically created for each NIC.
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在为每个网络接口卡（NIC）自动创建的网络中，填写其他详细信息，例如网关和DNS。
- en: 'Next, you need to configure the MAAS cluster, as follows:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，您需要配置MAAS集群，具体操作如下：
- en: Click on the **Clusters** tab and select **Cluster master**.
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**集群**标签并选择**集群主节点**。
- en: You will see a list of network interfaces on the machine. Click on the edit
    symbol for the interface that is connected to the private network where all the
    nodes are visible.
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将看到机器上的网络接口列表。点击连接到显示所有节点的私有网络接口旁边的编辑图标。
- en: Set this interface to manage DHCP and DNS.
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置该接口以管理DHCP和DNS。
- en: Set the router IP to the default gateway for this private network.
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将路由器IP设置为该私有网络的默认网关。
- en: Fill in the details for the dynamic and static ranges; remember that you should
    leave gaps for the floating IPs.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写动态和静态范围的详细信息；记住您应该为浮动IP留出空隙。
- en: Save the changes.
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存更改。
- en: 'Now, you need to enlist and commission the machines, as follows:'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，您需要列出并配置机器，具体操作如下：
- en: Ensure that all the machines are set to the **Preboot Execution Environment**
    (**PXE**) boot. If possible, disable all the other boot options, including local
    disk in the BIOS.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有机器设置为**预启动执行环境**（**PXE**）启动。如果可能，请在BIOS中禁用其他所有启动选项，包括本地磁盘。
- en: Enlist the machines by powering them on. This can usually be done by some sort
    of a virtual console. They will all appear in the node list in MAAS, and they
    can be powered down again.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过启动机器来列出它们。这通常可以通过某种虚拟控制台完成。它们将全部出现在MAAS的节点列表中，之后可以再次关闭电源。
- en: Edit each machine in the node's list and fill in the power type and power parameters
    (that is, the username and password) so that MAAS can turn them on and off as
    needed.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑节点列表中的每台机器，填写电源类型和电源参数（即用户名和密码），以便MAAS可以根据需要开启或关闭它们。
- en: Select all the machines and, by using the **Bulk action** dropdown, commission
    them.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择所有机器，并通过**批量操作**下拉菜单配置它们。
- en: Wait until all the machines are commissioned (that is, in the `Ready` state).
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待直到所有机器都完成配置（即处于`Ready`状态）。
- en: 'At this point, you need to set up `Landscape` and launch the OpenStack `Autopilot`
    by using the following commands:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您需要设置`Landscape`并通过以下命令启动OpenStack的`自动化`：
- en: '[PRE52]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Choose the **Landscape OpenStack Autopilot** option.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Landscape OpenStack自动化**选项。
- en: Fill in the MAAS credentials using the MAAS key that you saved when you set
    up MAAS.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用在设置MAAS时保存的MAAS密钥填写MAAS凭据。
- en: Open the link to access the Landscape UI.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开链接以访问Landscape UI。
- en: Resolve the remaining issues on the checklist. Finally, click on the **Configure**
    button.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决清单上的剩余问题。最后，点击**配置**按钮。
- en: Go to the given URL to get to the landing page of the Landscape UI.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问指定的URL，进入Landscape UI的登录页面。
- en: The landing page contains a checklist at the bottom that shows the status of
    all your resources. Verify that all of them are green to confirm the sanity status
    of your infrastructure.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录页面底部包含一个清单，显示所有资源的状态。验证所有资源是否显示绿色，以确认您的基础设施健康状态。
- en: Click on **Configure** and enter an optional name for your region and Cloud.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**配置**并为您的区域和云输入一个可选名称。
- en: 'Select the following components (this is an initial list; more options will
    be added in the later versions as they pass the tests in the OpenStack Interoperability
    Lab):'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择以下组件（这是初步列表；更多选项将在后续版本中添加，前提是它们通过了OpenStack互操作性实验室的测试）：
- en: The hypervisor component (KVM)
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化组件（KVM）
- en: The networking component (Open vSwitch)
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络组件（Open vSwitch）
- en: 'The storage components:'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储组件：
- en: Object (Ceph, Swift)
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对象存储（Ceph, Swift）
- en: Block (Ceph, iSCSI)
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 块存储（Ceph, iSCSI）
- en: Select the hardware on which you need to deploy the Cloud and click on **Save
    selection**.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择需要部署云计算的硬件，并点击**保存选择**。
- en: Click on **Install** to build your Cloud.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**以构建你的云计算环境。
- en: Finally, start using your Cloud!
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，开始使用你的云计算！
- en: Summary
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on one of the most interesting features of the Ubuntu
    Server, namely virtualization and Cloud computing. At this point, you can define
    and easily use a good set of programs related to this subject on the Ubuntu server.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重点介绍了Ubuntu Server最有趣的功能之一——虚拟化和云计算。此时，你可以在Ubuntu服务器上定义并轻松使用与此主题相关的一整套程序。
- en: In the next chapter, we will discover some useful tips that an Ubuntu system
    administrator needs to make their life easier.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将发现一些有用的小技巧，帮助Ubuntu系统管理员简化工作。
