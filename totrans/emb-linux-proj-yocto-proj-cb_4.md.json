["```\n    $ wget http://downloads.yoctoproject.org/releases/yocto/yocto- 1.7.1/toolchain/x86_64/poky-glibc-x86_64-core-image-sato- armv7a-vfp-neon-toolchain-1.7.1.sh\n    $ chmod a+x poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon- toolchain-1.7.1.sh\n    $ ./poky-glibc-x86_64-core-image-sato-armv7a-vfp-neon- toolchain-1.7.1.sh\n\n    ```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n\n```", "```\n    $ bitbake meta-toolchain\n\n    ```", "```\n    $ cd tmp/deploy/sdk\n    $ ./poky-glibc-x86_64-meta-toolchain-cortexa9hf-vfp-neon- toolchain-1.7.1.sh\n\n    ```", "```\n    $ bitbake core-image-sato -c populate_sdk\n\n    ```", "```\n    $ cd tmp/deploy/sdk\n    $ ./poky-glibc-x86_64-core-image-sato-cortexa9hf-vfp-neon- toolchain-1.7.1.sh\n\n    ```", "```\n    IMAGE_INSTALL_append =  \" glibc-staticdev\"\n    ```", "```\n    SDKIMAGE_FEATURES_append = \" staticdev-pkgs\"\n    ```", "```\n    $ bitbake meta-toolchain-qt\n\n    ```", "```\n    $ cd tmp/deploy/sdk\n    $ ./poky-glibc-x86_64-meta-toolchain-qt-cortexa9hf-vfp-neon- toolchain-qt-1.7.1.sh\n\n    ```", "```\n    $ bitbake meta-ide-support\n\n    ```", "```\n    $ source tmp/environment-setup-cortexa9hf-vfp-neon-poky-linux- gnueabi\n\n    ```", "```\n    $ wget http://downloads.yoctoproject.org/releases/yocto/yocto- 1.7.1/adt-installer/adt_installer.tar.bz2\n\n    ```", "```\n$ cd /opt/yocto/poky\n$ source oe-init-build-env qemuarm\n$ bitbake adt-installer\n\n```", "```\n    $ cd /opt/yocto\n    $ cp /opt/yocto/poky/qemuarm/tmp/deploy/sdk/adt_installer.tar.bz2 /opt/yocto\n    $ tar xvf adt_installer.tar.bz2\n    $ cd /opt/yocto/adt-installer\n\n    ```", "```\n    $ ./adt_installer\n\n    ```", "```\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java7-set-default\n\n```", "```\n     $ wget http://download.eclipse.org/technology/epp/downloads/release/kepler/SR2/eclipse-standard-kepler-SR2-linux-gtk-x86_64.tar.gz\n\n    ```", "```\n    $ tar xvf eclipse-standard-kepler-SR2-linux-gtk-x86_64.tar.gz\n\n    ```", "```\n    $ nohup eclipse/eclipse &\n\n    ```", "```\nEXTRA_IMAGE_FEATURES += \"eclipse-debug\"\n```", "```\n    EXTRA_IMAGE_FEATURES += \"eclipse-debug\"\n    ```", "```\n    $ cd /opt/yocto/fsl-community-bsp/\n    $ source setup-environment wandboard-quad\n    $ bitbake core-image-sato\n\n    ```", "```\n    $ bitbake -c populate_sdk core-image-sato\n\n    ```", "```\n    $ cd tmp/deploy/sdk\n    $ ./poky-glibc-x86_64-core-image-sato-cortexa9hf-vfp-neon- toolchain-1.7.1.sh\n\n    ```", "```\n#include <gtk/gtk.h>\n\nint main(int argc, char *argv[])\n{\n  GtkWidget *window;\n  gtk_init (&argc, &argv);\n  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n  gtk_widget_show (window);\n  gtk_main ();\n  return 0;\n}\n```", "```\n$ source /opt/poky/1.7.1/environment-setup-cortexa9hf-vfp-neon-poky- linux-gnueabi\n$ ${CC} gtk_hello_world.c -o helloworld `pkg-config --cflags --libs gtk+-2.0`\n\n```", "```\n# DISPLAY=:0 helloworld\n\n```", "```\n# ps w | grep tcf\n735 root     11428 S    /usr/sbin/tcf-agent -d -L- -l0\n\n```", "```\n    /opt/poky/1.7.1/sysroots/x86_64-pokysdk-linux/usr/bin/arm- poky-linux-gnueabi/arm-poky-linux-gnueabi-gdb\n\n    ```", "```\n    $ wget http://download.qt.io/official_releases/qtcreator/3.3/3.3.0/qt -creator-opensource-linux-x86_64-3.3.0.run\n    $ chmod u+x qt-creator-opensource-linux-x86_64-3.3.0.run\n    $ ./qt-creator-opensource-linux-x86_64-3.3.0.run\n\n    ```", "```\n    $ cd /opt/yocto/fsl-community-bsp/\n    $ source setup-environment wandboard-quad\n    $ bitbake meta-toolchain-qt\n\n    ```", "```\n    $ cd tmp/deploy/sdk\n    $ ./poky-glibc-x86_64-meta-toolchain-qt-cortexa9hf-vfp-neon- toolchain-qt-1.7.1.sh\n\n    ```", "```\nsource /opt/poky/1.7.1/environment-setup-cortexa9hf-vfp-neon-poky- linux-gnueabi\n#! /bin/sh\n\n```", "```\n$ ./bin/qtcreator.sh &\n\n```", "```\n    /opt/poky/1.7.1/sysroots/x86_64-pokysdk-linux/usr/bin/arm- poky-linux-gnueabi/arm-poky-linux-gnueabi-g++\n\n    ```", "```\n    /opt/poky/1.7.1/sysroots/x86_64-pokysdk-linux/usr/bin/arm- poky-linux-gnueabi/arm-poky-linux-gnueabi-gdb\n\n    ```", "```\n    /opt/poky/1.7.1/sysroots/x86_64-pokysdk-linux/usr/bin/qmake\n\n    ```", "```\n        /opt/poky/1.7.1/sysroots/cortexa9hf-vfp-neon-poky-linux- gnueabi/\n\n        ```", "```\n#include <QApplication>\n#include <QPushButton>\n\n int main(int argc, char *argv[])\n {\n     QApplication app(argc, argv);\n\n     QPushButton hello(\"Hello world!\");\n\n     hello.show();\n     return app.exec();\n }\n```", "```\n$ source /opt/poky/1.7.1/environment-setup-cortexa9hf-vfp-neon-poky- linux-gnueabi\n$ qmake -project\n$ qmake\n$ make\n\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n\n```", "```\nEXTRA_IMAGE_FEATURES += \"qt4-pkgs\"\n```", "```\nIMAGE_INSTALL_append = \" icu\"\n```", "```\n$ bitbake core-image-sato\n\n```", "```\n# DISPLAY=:0 qt_hello_world\n\n```", "```\n    SOURCES += \\\n       qt_hello_world.cpp\n\n    TARGET =  qt_hello_world\n       target.files =  qt_hello_world\n       target.path = /\n\n    INSTALLS += target\n    ```", "```\n    IMAGE_INSTALL_append =  \" openssh-sftp-server\"\n    ```", "```\n    EXTRA_IMAGE_FEATURES += \"eclipse-debug\"\n    ```", "```\nDESCRIPTION = \"Simple helloworld application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://helloworld.c\"\n\nS = \"${WORKDIR}\"\n\ndo_compile() {\n             ${CC} helloworld.c -o helloworld\n}\n\ndo_install() {\n             install -d ${D}${bindir}\n             install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\n#include <stdio.h>\n\nint main(void)\n{\n   return printf(\"Hello World\");\n}\n```", "```\n    $ cd /opt/yocto/fsl-community-bsp/\n    $ source setup-environment wandboard-quad\n    $ bitbake -c cleanall helloworld\n\n    ```", "```\n    $ bitbake -c devshell helloworld\n\n    ```", "```\n    $ git init\n    $ git add helloworld.c\n    $ git commit -s -m \"Original revision\"\n\n    ```", "```\n    #include <stdio.h>\n\n    int main(void)\n    {\n     return printf(\"Howdy World\");\n    }\n\n    ```", "```\n    $ bitbake -C compile helloworld\n\n    ```", "```\n    $ bitbake -e helloworld | grep ^WORKDIR=\n    WORKDIR=\"/opt/yocto/fsl-community-bsp/wandboard- quad/tmp/work/cortexa9hf-vfp-neon-poky-linux- gnueabi/helloworld/1.0-r0\"\n    $ scp ${WORKDIR_PATH}/deploy-rpms/deploy- rpms/cortexa9hf_vfp_neon/helloworld-1.0- r0.cortexa9hf_vfp_neon.rpm root@<target_ip_address>:/\n    $ rpm -i /helloworld-1.0-r0.cortexa9hf_vfp_neon.rpm\n\n    ```", "```\n    $ bitbake -c devshell helloworld\n    $ git add  helloworld.c\n    $ git commit -s -m \"Change greeting message\"\n\n    ```", "```\n    $ git format-patch -1 -o /opt/yocto/fsl-community- bsp/sources/meta-custom/recipes- example/helloworld/helloworld-1.0\n\n    ```", "```\n    SRC_URI  =  \"file://helloworld.c \\\n               file://0001-Change-greeting-message.patch\"\n    ```", "```\nDESCRIPTION = \"Simple helloworld application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"git://github.com/yoctocookbook/helloworld\"\n\nS = \"${WORKDIR}/git\"\n\ndo_compile() {\n             ${CC} helloworld.c -o helloworld\n}\n\ndo_install() {\n             install -d ${D}${bindir}\n             install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\n$ cd /opt/yocto/\n$ git clone git://github.com/yoctocookbook/helloworld\n\n```", "```\n    $ mkdir -p /opt/yocto/helloworld\n    $ cd /opt/yocto/helloworld\n    $ git init\n\n    ```", "```\n    $ git add helloworld.c\n\n    ```", "```\n    $ git commit -s -m \"Original revision\"\n\n    ```", "```\nINHERIT += \"externalsrc\"\nEXTERNALSRC_pn-helloworld = \"/opt/yocto/helloworld\"\nEXTERNALSRC_BUILD_pn-helloworld = \"/opt/yocto/helloworld\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake helloworld\n\n```", "```\nSUMMARY = \"Rotates, compresses, removes and mails system log files\"\nSECTION = \"console/utils\"\nHOMEPAGE = \"https://fedorahosted.org/logrotate/\"\nLICENSE = \"GPLv2\"\n\nDEPENDS=\"coreutils popt\"\n\nLIC_FILES_CHKSUM = \"file://COPYING;md5=18810669f13b87348459e611d31ab760\"\n\nSRC_URI = \"https://fedorahosted.org/releases/l/o/logrotate/logrotate- ${PV}.tar.gz \\\"\nSRC_URI[md5sum] = \"99e08503ef24c3e2e3ff74cc5f3be213\"\nSRC_URI[sha256sum] = \"f6ba691f40e30e640efa2752c1f9499a3f9738257660994de70a45fe00d12b64\"\n\nEXTRA_OEMAKE = \"\"\n\ndo_install(){\n    oe_runmake install DESTDIR=${D} PREFIX=${D} MANDIR=${mandir}\n    mkdir -p ${D}${sysconfdir}/logrotate.d\n    mkdir -p ${D}${sysconfdir}/cron.daily\n    mkdir -p ${D}${localstatedir}/lib\n    install -p -m 644 examples/logrotate-default ${D}${sysconfdir}/logrotate.conf\n    install -p -m 755 examples/logrotate.cron ${D}${sysconfdir}/cron.daily/logrotate\n    touch ${D}${localstatedir}/lib/logrotate.status\n}\n```", "```\nDESCRIPTION = \"GNU helloworld autotools recipe\"\nSECTION = \"examples\"\n\nLICENSE = \"GPLv3\"\nLIC_FILES_CHKSUM = \"file://${COREBASE}/meta/files/common- licenses/GPL-3.0;md5=c79ff39f19dfec6d293b95dea7b07891\"\n\nSRC_URI = \"${GNU_MIRROR}/hello/hello-${PV}.tar.gz\"\nSRC_URI[md5sum] = \"67607d2616a0faaf5bc94c59dca7c3cb\"\nSRC_URI[sha256sum] = \"ecbb7a2214196c57ff9340aa71458e1559abd38f6d8d169666846935df191ea7\"\n\ninherit autotools gettext\n```", "```\ncmake_minimum_required(VERSION 2.8.10)\nproject(helloworld)\nadd_executable(helloworld helloworld.c)\ninstall(TARGETS helloworld RUNTIME DESTINATION bin)\n```", "```\nDESCRIPTION = \"Simple helloworld cmake application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://CMakeLists.txt \\\n           file://helloworld.c\"\nS = \"${WORKDIR}\"\n\ninherit cmake\n\nEXTRA_OECMAKE = \"\"\n```", "```\nimport os\nenv = Environment(CC = os.environ['CC'],\n                  ENV = {'PATH': os.environ['PATH']})\nenv.Program(\"helloworld\", \"helloworld.c\")\n```", "```\nDESCRIPTION = \"Simple helloworld scons application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://SConstruct \\\n           file://helloworld.c\"\n\nS = \"${WORKDIR}\"\n\ninherit scons\n\nEXTRA_OESCONS = \"\"\n\ndo_install() {\n    install -d ${D}/${bindir}\n    install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\nchar * hello (void)\n{\n  return \"Hello\";\n}\n```", "```\nchar * world (void)\n{\n  return \"World\";\n}\n```", "```\n    $ source /opt/poky/1.7.1/environment-setup-cortexa9hf-vfp- neon-poky-linux-gnueabi\n\n    ```", "```\n    ${CC} -c hello.c world.c\n    ${AR} -cvq libhelloworld.a hello.o world.o\n\n    ```", "```\n    ${AR} -t libhelloworld.a\n\n    ```", "```\n    #include <stdio.h>\n    int main (void)\n    {\n      return printf(\"%s %s\\n\",hello(),world());\n    }\n    ```", "```\n    ${CC} -o helloworld helloworld.c libhelloworld.a\n\n    ```", "```\n    $ readelf -d helloworld\n    Dynamic section at offset 0x534 contains 24 entries:\n     Tag        Type                         Name/Value\n     0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n\n    ```", "```\n${CC} -fPIC -g -c hello.c world.c\n${CC} -shared -Wl,-soname,libhelloworld.so.1 -o libhelloworld.so.1.0 hello.o world.o\n\n```", "```\n${CC} helloworld.c libhelloworld.so.1.0 -o helloworld\n\n```", "```\n$ readelf -d helloworld\nDynamic section at offset 0x6ec contains 25 entries:\n Tag        Type                         Name/Value\n 0x00000001 (NEEDED)                     Shared library: [libhelloworld.so.1]\n 0x00000001 (NEEDED)                     Shared library: [libc.so.6]\n\n```", "```\nDESCRIPTION = \"Simple helloworld example static library\"\nSECTION = \"libs\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://hello.c \\\n           file://world.c \\\n           file://helloworld.pc\"\nS = \"${WORKDIR}\"\n\ndo_compile() {\n        ${CC} -c hello.c world.c\n        ${AR} -cvq libhelloworld.a hello.o world.o\n}\n\ndo_install() {\n        install -d ${D}${libdir}\n        install -m 0755 libhelloworld.a ${D}${libdir}\n}\n```", "```\nmeta-custom/recipes-example/libhelloworld-dyn/libhelloworlddyn_1.0.bb\nDESCRIPTION = \"Simple helloworld example dynamic library\"\nSECTION = \"libs\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://hello.c \\\n           file://world.c \\\n           file://helloworld.pc\"\n\nS = \"${WORKDIR}\"\n\ndo_compile() {\n       ${CC} -fPIC -g -c hello.c world.c\n       ${CC} -shared -Wl,-soname,libhelloworld.so.1 -o libhelloworld.so.1.0 hello.o world.o\n}\n\ndo_install() {\n       install -d ${D}${libdir}\n       install -m 0755 libhelloworld.so.1.0 ${D}${libdir}\n       ln -s libhelloworld.so.1.0 ${D}/${libdir}/libhelloworld.so.1\n       ln -s libhelloworld.so.1 ${D}/${libdir}/libhelloworld.so\n}\n```", "```\nDESCRIPTION = \"Simple helloworld example\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nDEPENDS = \"libhelloworld-static\"\n\nSRC_URI = \"file://helloworld.c\"\n\nS = \"${WORKDIR}\"\n\ndo_compile() {\n        ${CC} -o helloworld helloworld.c ${STAGING_LIBDIR}/libhelloworld.a\n}\n\ndo_install() {\n        install -d ${D}${bindir}\n        install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\nmeta-custom/recipes-example/helloworld-shared/helloworldshared_1.0.bb\nDESCRIPTION = \"Simple helloworld example\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nDEPENDS = \"libhelloworld-dyn\"\n\nSRC_URI = \"file://helloworld.c\"\n\nS = \"${WORKDIR}\"\n\ndo_compile() {\n        ${CC} -o helloworld helloworld.c -lhelloworld\n}\n\ndo_install() {\n        install -d ${D}${bindir}\n        install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\nprefix=/usr/local\nexec_prefix=${prefix}\nincludedir=${prefix}/include\nlibdir=${exec_prefix}/lib\n\nName: helloworld\nDescription: The helloworld library\nVersion: 1.0.0\nCflags: -I${includedir}/helloworld\nLibs: -L${libdir} -lhelloworld\n```", "```\nLibs: -L${libdir} libhelloworld.a\n```", "```\nDESCRIPTION = \"Simple QT helloworld example\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nRDEPENDS_${PN} += \"icu\"\n\nSRC_URI = \"file://qt_hello_world.cpp \\\n           file://qt_hello_world.pro\"\n\nS = \"${WORKDIR}\"\n\ninherit qt4e\n\ndo_install() {\n         install -d ${D}${bindir}\n         install -m 0755 qt_hello_world ${D}${bindir}\n}\n```", "```\n#include <QApplication>\n#include <QPushButton>\n\n int main(int argc, char *argv[])\n {\n     QApplication app(argc, argv);\n\n     QPushButton hello(\"Hello world!\");\n\n     hello.show();\n     return app.exec();\n }\n```", "```\nSOURCES += \\\n   qt_hello_world.cpp\n```", "```\nIMAGE_INSTALL_append = \" qt-helloworld\"\n```", "```\n$ bitbake qt4e-demo-image\n\n```", "```\n# qt_hello_world -qws\n\n```", "```\n# export FRAMEBUFFER=/dev/fb1\n\n```", "```\n# cat /dev/zero > /dev/fb0\n\n```", "```\n# cat /dev/fb0 > fb.raw\n\n```", "```\n# cat fb.raw > /dev/fb0\n\n```", "```\n# fbset -fb /dev/fb0\nmode \"1920x1080-60\"\n # D: 148.500 MHz, H: 67.500 kHz, V: 60.000 Hz\n geometry 1920 1080 1920 1080 24\n timings 6734 148 88 36 4 44 5\n accel false\n rgba 8/16,8/8,8/0,0/0\nendmode\n\n```", "```\nvideo=mxcfbn:dev=hdmi,<xres>x<yres>M[@rate]\n```", "```\nvideo=mxcfb0:dev=hdmi,1920x1080M@60\n```", "```\n# echo 0 > /sys/class/graphics/fb0/blank\n```", "```\nDISTRO_FEATURES_remove = \"x11 directfb wayland\"\n```", "```\n$ bitbake fsl-image-multimedia\n\n```", "```\n       mxcfb1: fb@0 {\n                compatible = \"fsl,mxc_sdc_fb\";\n                disp_dev = \"hdmi\";\n                interface_pix_fmt = \"RGB24\";\n                mode_str =\"1920x1080M@60\";\n                default_bpp = <24>;\n                int_clk = <0>;\n                late_init = <0>;\n        };\n```", "```\n# cd /home/root\n# wget http://video.blendertestbuilds.de/download.blender.org/peach/trailer_ 1080p.mov\n# gst-launch playbin2 uri=file:///home/root/trailer_1080p.mov\n\n```", "```\n# gst-inspect | grep imx\nh264.imx:  mfw_h264decoder: h264 video decoder\naudiopeq.imx:  mfw_audio_pp: audio post equalizer\naiur.imx: webm: webm\naiur.imx:  aiurdemux: aiur universal demuxer\nmpeg2dec.imx:  mfw_mpeg2decoder: mpeg2 video decoder\ntvsrc.imx:  tvsrc: v4l2 based tv src\nipucsc.imx:  mfw_ipucsc: IPU-based video converter\nmpeg4dec.imx:  mfw_mpeg4aspdecoder: mpeg4 video decoder\nvpu.imx:  vpudec: VPU-based video decoder\nvpu.imx:  vpuenc: VPU-based video encoder\nmp3enc.imx:  mfw_mp3encoder: mp3 audio encoder\nbeep.imx: ac3: ac3\nbeep.imx: 3ca: ac3\nbeep.imx:  beepdec: beep audio decoder\nbeep.imx:  beepdec.vorbis: Vorbis decoder\nbeep.imx:  beepdec.mp3: MP3 decoder\nbeep.imx:  beepdec.aac: AAC LC decoder\nisink.imx:  mfw_isink: IPU-based video sink\nv4lsink.imx:  mfw_v4lsink: v4l2 video sink\nv4lsrc.imx:  mfw_v4lsrc: v4l2 based camera src\namrdec.imx:  mfw_amrdecoder: amr audio decoder\n\n```", "```\nSection \"Device\"\n    Identifier  \"i.MX Accelerated Framebuffer Device\"\n    Driver      \"vivante\"\n    Option      \"fbdev\"     \"/dev/fb0\"\n    Option      \"vivante_fbdev\" \"/dev/fb0\"\n    Option      \"HWcursor\"  \"false\"\nEndSection\n```", "```\n#include <gtk/gtk.h>\n\nint main(int argc, char *argv[])\n{\n    GtkWidget *window;\n    gtk_init (&argc, &argv);\n    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n    gtk_widget_show (window);\n    gtk_main ();\n    return 0;\n}\n```", "```\nDESCRIPTION = \"Simple GTK helloworld application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://gtk_hello_world.c\"\n\nS = \"${WORKDIR}\"\n\nDEPENDS = \"gtk+\"\n\ninherit pkgconfig\n\ndo_compile() {\n    ${CC} gtk_hello_world.c -o helloworld `pkg-config --cflags -- libs gtk+-2.0`\n}\n\ndo_install() {\n    install -d ${D}${bindir}\n    install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\nIMAGE_INSTALL_append = \" gtk-helloworld\"\n```", "```\n# export DISPLAY=:0\n# helloworld\n\n```", "```\nDESCRIPTION = \"Simple QT over X11 helloworld example\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nRDEPENDS_${PN} += \"icu\"\n\nSRC_URI = \"file://qt_hello_world.cpp \\\n           file://qt_hello_world.pro\"\n\nS = \"${WORKDIR}\"\n\ninherit qt4x11\n\ndo_install() {\n         install -d ${D}${bindir}\n         install -m 0755 qt_hello_world ${D}${bindir}\n}\n```", "```\nEXTRA_IMAGE_FEATURES += \"qt4-pkgs\"\nIMAGE_INSTALL_append = \" qtx11-helloworld\"\n```", "```\n$ bitbake core-image-sato\n\n```", "```\n# export DISPLAY=:0\n# qt_hello_world\n\n```", "```\nDESCRIPTION = \"Simple GTK3 helloworld application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://gtk_hello_world.c\"\n\nS = \"${WORKDIR}\"\n\nDEPENDS = \"gtk+3\"\n\ninherit pkgconfig\n\ndo_compile() {\n    ${CC} gtk_hello_world.c -o helloworld `pkg-config --cflags -- libs gtk+-3.0`\n}\n\ndo_install() {\n    install -d ${D}${bindir}\n    install -m 0755 helloworld ${D}${bindir}\n}\n```", "```\nDISTRO_FEATURES_remove = \"x11\"\n```", "```\nIMAGE_INSTALL_append = \" gtk3-helloworld\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-weston\n\n```", "```\n# export XDG_RUNTIME_DIR=/var/run/user/root\n# helloworld\n\n```", "```\nSUMMARY = \"PyUSB provides USB access on the Python language\"\nHOMEPAGE = \"http://pyusb.sourceforge.net/\"\nSECTION = \"devel/python\"\nLICENSE = \"BSD\"\nLIC_FILES_CHKSUM = \"file://LICENSE;md5=a53a9c39efcfb812e2464af14afab013\"\nDEPENDS = \"libusb1\"\nPR = \"r1\"\n\nSRC_URI = \"\\\n    ${SOURCEFORGE_MIRROR}/pyusb/${SRCNAME}-${PV}.tar.gz \\\n\"\nSRC_URI[md5sum] = \"9136b3dc019272c62a5b6d4eb624f89f\"\nSRC_URI[sha256sum] = \"dacbf7d568c0bb09a974d56da66d165351f1ba3c4d5169ab5b734266623e1736\"\n\nSRCNAME = \"pyusb\"\nS = \"${WORKDIR}/${SRCNAME}-${PV}\"\n\ninherit distutils\n```", "```\nDESCRIPTION = \"Simple Python setuptools hello world application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nSRC_URI = \"file://setup.py \\\n      file://python-helloworld.py \\\n      file://helloworld/__init__.py \\\n              file://helloworld/main.py\"\n\nS = \"${WORKDIR}\"\n\ninherit setuptools\n\ndo_install_append () {\n    install -d ${D}${bindir}\n    install -m 0755 python-helloworld.py ${D}${bindir}\n}\n```", "```\n$ mkdir -p meta-custom/recipes-python/python-helloworld/python- helloworld-1.0/helloworld/\n$ touch meta-custom/recipes-python/python-helloworld/python- helloworld-1.0/helloworld/__init__.py\n\n```", "```\nimport sys\nfrom setuptools import setup\n\nsetup(\n    name = \"helloworld\",\n    version = \"0.1\",\n    packages=[\"helloworld\"],\n    author=\"Alex Gonzalez\",\n    author_email = \"alex@example.com\",\n    description = \"Hello World packaging example\",\n    license = \"MIT\",\n    keywords= \"example\",\n    url = \"\",\n)\n```", "```\nimport sys\n\ndef main(argv=None):\n    if argv is None:\n        argv = sys.argv\n    print \"Hello world!\"\n    return 0\n```", "```\n#!/usr/bin/env python\nimport sys\nimport helloworld.main\n\nif __name__ == '__main__':\n       sys.exit(helloworld.main.main())\n```", "```\nIMAGE_INSTALL_append = \" python-helloworld\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-minimal\n\n```", "```\n# /usr/bin/python-helloworld.py\nHello world!\n\n```", "```\nIMAGE_INSTALL_append  = \" python-pip python-distribute\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-minimal\n\n```", "```\n# pip search <package_name>\n# pip install <package_name>\n\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/sources\n$ git clone git://git.yoctoproject.org/meta-oracle-java\n\n```", "```\nLICENSE_FLAGS_WHITELIST += \"oracle_java\"\n```", "```\nSUMMARY = \"Oracle Java SE runtime environment binaries\"\n\nJDK_JRE = \"ejre\"\nrequire recipes-devtools/oracle-java/oracle-jse.inc\n\nPV_UPDATE = \"75\"\nBUILD_NUMBER = \"13\"\n\nLIC_FILES_CHKSUM = \"\\\n       file://${WORKDIR}/${JDK_JRE}${PV}_${PV_UPDATE}/COPYRIGHT;md5=0b204 bd2921accd6ef4a02f9c0001823 \\\n       file://${WORKDIR}/${JDK_JRE}${PV}_${PV_UPDATE}/THIRDPARTYLICENSERE ADME.txt;md5=f3a388961d24b8b72d412a079a878cdb \\\n       \"\n\nSRC_URI = \"http://download.oracle.com/otn/java/ejre/7u${PV_UPDATE}- b${BUILD_NUMBER}/ejre-7u${PV_UPDATE}-fcs-b${BUILD_NUMBER}-linux- arm-vfp-hflt-client_headless-18_dec_2014.tar.gz\"\nSRC_URI[md5sum] = \"759ca6735d77778a573465b1e84b16ec\"\nSRC_URI[sha256sum] = \"ebb6499c62fc12e1471cff7431fec5407ace59477abd0f48347bf6e89c6bff3b\"\n\nRPROVIDES_${PN} += \"java2-runtime\"\n```", "```\n$ bitbake oracle-jse-ejre-arm-vfp-hflt-client-headless\n\n```", "```\nIMAGE_INSTALL_append = \" oracle-jse-ejre-arm-vfp-hflt-client- headless\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-minimal\n\n```", "```\n# /usr/bin/java -version\njava version \"1.7.0_75\"\nJava(TM) SE Embedded Runtime Environment (build 1.7.0_75-b13, headless)\nJava HotSpot(TM) Embedded Client VM (build 24.75-b04, mixed mode)\n\n```", "```\nSUMMARY = \"Oracle Java SE runtime environment binaries\"\n\nJDK_JRE = \"ejre\"\nrequire recipes-devtools/oracle-java/oracle-jse.inc\n\nPV_UPDATE = \"75\"\nBUILD_NUMBER = \"13\"\n\nLIC_FILES_CHKSUM = \"\\\n       file://${WORKDIR}/${JDK_JRE}${PV}_${PV_UPDATE}/COPYRIGHT;md5=0b204 bd2921accd6ef4a02f9c0001823 \\\n       file://${WORKDIR}/${JDK_JRE}${PV}_${PV_UPDATE}/THIRDPARTYLICENSERE ADME.txt;md5=f3a388961d24b8b72d412a079a878cdb \\\n       \"\n\nSRC_URI = \"http://download.oracle.com/otn/java/ejre/7u${PV_UPDATE}- b${BUILD_NUMBER}/ejre-7u${PV_UPDATE}-fcs-b${BUILD_NUMBER}-linux- arm-vfp-hflt-client_headful-18_dec_2014.tar.gz\"\n\nSRC_URI[md5sum] = \"84dba4ffb47285b18e6382de2991edfc\"\nSRC_URI[sha256sum] = \"5738ffb8ce2582b6d7b39a3cbe16137d205961224899f8380eebe3922bae5c61\"\n\nRPROVIDES_${PN} += \"java2-runtime\"\n```", "```\nIMAGE_INSTALL_append =  \" oracle-jse-ejre-arm-vfp-hflt-client- headful\"\n```", "```\n$ cd cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-sato\n\n```", "```\n# /usr/bin/java -version\njava version \"1.7.0_75\"\nJava(TM) SE Embedded Runtime Environment (build 1.7.0_75-b13)\nJava HotSpot(TM) Embedded Client VM (build 24.75-b04, mixed mode)\n\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/sources/\n$ git clone http://git.yoctoproject.org/cgit/cgit.cgi/meta-java/\n\n```", "```\n+ ${BSPDIR}/sources/meta-java \\\n \"\n```", "```\nPREFERRED_PROVIDER_virtual/java-initial = \"cacao-initial\"\nPREFERRED_PROVIDER_virtual/java-native = \"jamvm-native\"\nPREFERRED_PROVIDER_virtual/javac-native = \"ecj-bootstrap-native\"\nPREFERRED_VERSION_openjdk-7-jre = \"25b30-2.3.12\"\nPREFERRED_VERSION_icedtea7-native = \"2.1.3\"\n```", "```\nIMAGE_INSTALL_append = \" openjdk-7-jre\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-sato\n\n```", "```\n# java -version\njava version \"1.7.0_25\"\nOpenJDK Runtime Environment (IcedTea 2.3.12) (25b30-2.3.12)\nOpenJDK Zero VM (build 23.7-b01, mixed mode)\n\n```", "```\nclass HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n  }\n}\n```", "```\n$ sudo apt-get install openjdk-7-jdk\n\n```", "```\n$ javac HelloWorld.java\n\n```", "```\n# java HelloWorld\n\n```", "```\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\npublic class HelloWorldSwing {\n    private static void createAndShowGUI() {\n        JFrame frame = new JFrame(\"Hello World!\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        JLabel label = new JLabel(\"Hello World!\");\n        frame.getContentPane().add(label);\n\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    public static void main(String[] args) {\n        javax.swing.SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                createAndShowGUI();\n            }\n        });\n    }\n}\n```", "```\nDESCRIPTION = \"Simple Java Swing hello world application\"\nSECTION = \"examples\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4 f302\"\n\nRDEPENDS_${PN} = \"java2-runtime\"\n\nSRC_URI = \"file://HelloWorldSwing.java\"\n\nS = \"${WORKDIR}\"\n\ninherit java-library\n\ndo_compile() {\n        mkdir -p build\n        javac -d build `find . -name \"*.java\"`\n        fastjar cf ${JARFILENAME} -C build .\n}\n\nBBCLASSEXTEND = \"native\"\n```", "```\nIMAGE_INSTALL_append = \" libjava-helloworld-java\"\n```", "```\nIMAGE_INSTALL_append = \" openjdk-7-jre openjdk-7-common\"\n```", "```\nIMAGE_INSTALL_append = \" oracle-jse-ejre-arm-vfp-hflt-client- headful\"\n```", "```\n$ cd /opt/yocto/fsl-community-bsp/\n$ source setup-environment wandboard-quad\n$ bitbake core-image-sato\n\n```", "```\n# export DISPLAY=:0\n# java -cp /usr/share/java/java-helloworld.jar HelloWorldSwing\n\n```", "```\nException in thread \"main\" java.awt.AWTError: Toolkit not found: sun.awt.X11.XToolkit\n        at java.awt.Toolkit$2.run(Toolkit.java:875)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.awt.Toolkit.getDefaultToolkit(Toolkit.java:860)\n        at java.awt.Toolkit.getEventQueue(Toolkit.java:1730)\n        at java.awt.EventQueue.invokeLater(EventQueue.java:1217)\n        at javax.swing.SwingUtilities.invokeLater(SwingUtilities.java:1287)\n        at HelloWorldSwing.main(HelloWorldSwing.java:17)\n```", "```\n# export DISPLAY=:0\n# /usr/bin/java -cp /usr/share/java/java-helloworld.jar HelloWorldSwing\n\n```", "```\nPACKAGE_CLASSES = \"package_ipk\"\n```"]