- en: Chapter 4. Adding a Magnetic Contact Sensor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 添加磁性接触传感器
- en: Now that we have built our port expander hardware, we need to learn how to program
    it so that our Raspberry Pi can detect the things that we connect to it as part
    of our home security system. We will begin by connecting switches to our system
    in the form of magnetic sensors—the most common component used in home security
    systems to detect intrusions through doors and windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经搭建了端口扩展器硬件，我们需要学习如何编程，使我们的树莓派能够检测到连接到它的设备，作为我们家庭安全系统的一部分。我们将首先通过连接开关，以磁性传感器的形式将其接入系统——这是家庭安全系统中最常见的组件，用于通过门窗检测入侵。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning about reed switches and how they work as door sensors
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解簧片开关及其作为门传感器的工作原理
- en: Enabling and setting up the I2C bus on the Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在树莓派上启用并设置I2C总线
- en: Connecting our sensor to an input on our port expander
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的传感器连接到端口扩展器的输入端
- en: Learning how to access our I2C port expander from a Bash script
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何通过Bash脚本访问我们的I2C端口扩展器
- en: Writing a script that will detect the state of our door sensor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个脚本，检测我们门传感器的状态
- en: Looking at other types of contact sensors that can be connected and programmed
    in the same way
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看其他类型的接触传感器，这些传感器也可以以相同的方式连接和编程
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'You''ll need the following parts for the exercises in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章练习所需的部件如下：
- en: Our Raspberry Pi and Port Expander board
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的树莓派和端口扩展器板
- en: 8 x 10K ohm resistors
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8个10K欧姆电阻
- en: A magnetic door sensor and magnet
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁性门传感器和磁铁
- en: A hook-up wire
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根连接线
- en: A 4-core alarm wire
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根4芯报警线
- en: The working of magnetic contact sensors
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 磁性接触传感器的工作原理
- en: A **reed switch** is essentially what makes up our **magnetic contact sensor**.
    A reed switch comprises two metal contacts made of magnetic material (called reeds)
    placed inside a glass envelope. When the contacts touch, the switch is on, and
    when they spring apart, the switch is off and the circuit is broken. The way to
    control these contacts is by means of a **magnetic field** that makes or breaks
    the circuit when it is near to the switch.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**簧片开关**本质上构成了我们的**磁性接触传感器**。簧片开关由两根金属触点组成，这些触点是由磁性材料（称为簧片）制成的，并置于一个玻璃外壳内。当触点接触时，开关处于开启状态；当触点弹开时，开关关闭，电路断开。控制这些触点的方式是通过**磁场**，当磁场靠近开关时，能够接通或断开电路。'
- en: A normally open (NO) type of reed switch is normally switched off until a magnet
    comes close to the switch, which then pulls the contacts together.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常开（NO）类型的簧片开关通常处于关闭状态，直到磁铁靠近开关，将触点拉在一起。
- en: A normally closed (NC) variety works the other way with the switch being normally
    on until the magnet comes close to the switch, pulling the two contacts apart.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 常闭（NC）类型的簧片开关工作原理则与此相反，开关通常处于开启状态，直到磁铁靠近开关，将两个触点拉开。
- en: '![The working of magnetic contact sensors](img/B04579_04_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![磁性接触传感器的工作原理](img/B04579_04_01.jpg)'
- en: A typical type of reed switch
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种典型的簧片开关
- en: You can now see how a magnetic reed switch can be a useful sensor in security
    applications, and in particular for our home security system, to detect when **doors**
    and **windows** are opened and closed. We simply put a reed switch on the door
    frame and connect it to our security system, with the magnet placed opposite the
    switch on the actual door. When the door opens and closes, it makes or breaks
    the contacts in our reed switch.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到，磁性簧片开关如何在安全应用中发挥作用，特别是在我们的家庭安全系统中，用于检测**门**和**窗户**的开关状态。我们只需要将一个簧片开关安装在门框上，并将其连接到我们的安全系统，磁铁则安装在实际门的开关对面。当门开关时，它就会接通或断开簧片开关的触点。
- en: Reed switches and their magnets, which are designed for security systems, usually
    come enclosed in little plastic housings, making them easy to screw onto the door
    and frame.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用于安全系统的簧片开关及其磁铁，通常被封装在小塑料外壳中，便于将其固定到门和门框上。
- en: '![The working of magnetic contact sensors](img/B04579_04_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![磁性接触传感器的工作原理](img/B04579_04_02.jpg)'
- en: 'A door-frame-mounted magnetic sensor containing a reed switch (Type: Cherry
    MP201801)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个门框安装的磁性传感器，包含一个簧片开关（型号：Cherry MP201801）
- en: The magnetic sensor is mounted on the door frame (obviously, so it can connect
    to the alarm circuit wires), while the respective magnet will be attached to the
    door, close enough to the edge such that the sensor contacts connect (or break,
    depending on the type) when the magnet is directly opposite it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 磁性传感器安装在门框上（显然是为了能够连接到报警电路的电线），而对应的磁铁将被附在门上，位置足够接近边缘，以便当磁铁直接对着传感器时，传感器的接触会连接（或断开，取决于类型）。
- en: '![The working of magnetic contact sensors](img/B04579_04_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![磁性接触传感器的工作原理](img/B04579_04_03.jpg)'
- en: 'A respective door-mounted magnetic actuator (Type: Cherry AS201801)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的门装磁性驱动器（型号：Cherry AS201801）
- en: Setting up the I2C port expander
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 I2C 端口扩展器
- en: Now that we have built our port expander, we need to get it ready to connect
    our sensors to. First, we need to install the tools on the Raspberry Pi to allow
    us to use the I2C bus and program devices connected to it, including the MCP23017
    chip that makes up our port expander.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经构建了端口扩展器，接下来需要将其准备好，以便连接传感器。首先，我们需要在树莓派上安装工具，使我们能够使用 I2C 总线并编程连接到总线的设备，包括构成我们端口扩展器的
    MCP23017 芯片。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't connect your port expander to the Raspberry Pi until after you've set
    up the I2C bus on your system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好 I2C 总线之前，请不要将端口扩展器连接到树莓派。
- en: Enabling the I2C Bus
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 I2C 总线
- en: 'It''s highly likely that the module for using the I2C bus hasn''t been loaded
    by default. Fortunately, doing this is fairly straightforward and can be done
    using the Raspberry Pi configuration tool. Perform the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能默认情况下并没有加载用于使用 I2C 总线的模块。幸运的是，这个过程相当简单，可以通过树莓派配置工具完成。请按照以下步骤操作：
- en: 'Launch the Raspberry Pi configuration tool with the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动树莓派配置工具：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Enabling the I2C Bus](img/B04579_04_04.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![启用 I2C 总线](img/B04579_04_04.jpg)'
- en: 'Select option 8: `Advanced Options`.![Enabling the I2C Bus](img/B04579_04_05.jpg)'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项 8：`高级选项`。![启用 I2C 总线](img/B04579_04_05.jpg)
- en: 'Select Option A7: `I2C`.![Enabling the I2C Bus](img/B04579_04_06.jpg)'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项 A7：`I2C`。![启用 I2C 总线](img/B04579_04_06.jpg)
- en: Select `<Yes>`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`<Yes>`。
- en: Reboot your Raspberry Pi for the setting to take effect.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启树莓派以使设置生效。
- en: 'Now that the I2C bus has been enabled, we need to set up the operating system
    so that the required modules are loaded each time the system boots. To do this,
    perform the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 I2C 总线已经启用，我们需要设置操作系统，使其每次启动时加载所需的模块。请按照以下步骤操作：
- en: 'Edit the **Modules file** using the following line:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令编辑 **Modules 文件**：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following lines to the file:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到文件中：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file and exit Nano.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并退出 Nano。
- en: Installing the I2C tools package
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 I2C 工具软件包
- en: 'So that we can easily access the I2C bus using Bash scripts, we need to install
    the `i2c-tools` package:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便我们使用 Bash 脚本访问 I2C 总线，我们需要安装 `i2c-tools` 软件包：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once installed, we should shutdown our system:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要关闭系统：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After activity has stopped, switch off your Raspberry Pi, connect your port
    expander to the GPIO port, and power it back up so that we can start using it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动停止后，关闭树莓派电源，连接端口扩展器到 GPIO 端口，再重新开机，以便开始使用它。
- en: 'As a quick sanity check, you can see if I2C support has been loaded by typing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个快速的检查，您可以通过输入以下命令来查看是否加载了 I2C 支持：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This should give you a list of at least one bus—for example, `/dev/i2c-1`—if
    the module is loaded. If it''s not, you''ll probably get the following response:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块已经加载，这应该会给出至少一个总线的列表，例如 `/dev/i2c-1`。如果没有，您可能会得到以下响应：
- en: '**ls: cannot access /dev/i2c-*: No such file or directory**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**ls: 无法访问 /dev/i2c-*：没有此类文件或目录**'
- en: '*In this case, you''ll need to check back through the previous steps as something
    hasn''t happened properly.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这种情况下，您需要回头检查之前的步骤，因为某些步骤没有正确完成。*'
- en: Finding our devices
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找我们的设备
- en: The `i2c-tools` package installs several different tools to help us use our
    port expander attached to the bus. The `i2cdetect` tool allows us to find I2C
    buses and devices attached to the busses.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`i2c-tools` 软件包安装了几种不同的工具，帮助我们使用连接到总线的端口扩展器。`i2cdetect` 工具让我们能够查找 I2C 总线和附加到总线上的设备。'
- en: 'To get a list of I2C busses on our system, type the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取系统上 I2C 总线的列表，请输入以下命令：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get the following response:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下响应：
- en: '**pi@raspberrypi ~ $ sudo i2cdetect -l**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**pi@raspberrypi ~ $ sudo i2cdetect -l**'
- en: '**i2c-1 i2c 20804000.i2c I2C adapter**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**i2c-1 i2c 20804000.i2c I2C 适配器**'
- en: The preceding output shows that we have one I2C bus, and this will be the one
    connected to our GPIO. *Note that earlier models of the Raspberry Pi may return
    the device ID as being i2c-0*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示我们有一个I2C总线，它将连接到我们的GPIO。*注意，早期型号的树莓派可能会返回设备ID为i2c-0*。
- en: 'We can now use the tool to scan for all of the devices attached to our bus.
    We do this by specifying the bus ID, as in the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用工具扫描所有连接到总线的设备。我们通过指定总线ID来实现这一点，如下命令所示：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With nothing attached to the I2C bus (that is, without our port expander attached)
    we''d expect to see the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果I2C总线上没有连接任何设备（即没有连接我们的端口扩展器），我们预计会看到以下输出：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Nothing found on the I2C bus*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*I2C总线上未发现任何设备*'
- en: 'With our port expander attached, we should see the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 连接了我们的端口扩展器后，我们应该会看到以下输出：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Our I2C port expander slave device can be found at the address, 0x20 (32 decimal).*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们的I2C端口扩展器从设备可以在地址0x20（十进制32）处找到。*'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding address is the location of our MCP23017 chip connected to the
    I2C bus. If you don't see this, then there's probably a wiring issue and you'll
    need to go back and check.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述地址是我们连接到I2C总线的MCP23017芯片的位置。如果没有看到这个地址，可能是接线有问题，需要重新检查。
- en: You'll recall that we can add up to 8 of these devices to the I2C bus by setting
    the A0-A2 pins to a unique address. If A0 is set to `high`, then the address of
    the device will be shown as 0x21 (33 decimal)—and up to 0x27 (39 decimal), if
    all pins are high.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得，我们可以通过将A0-A2引脚设置为唯一的地址，在I2C总线上最多添加8个此类设备。如果A0设置为`high`，则设备的地址将显示为0x21（十进制33）——如果所有引脚都是高电平，则最多为0x27（十进制39）。
- en: Setting up the port expander
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置端口扩展器
- en: As discussed in the previous chapter, we can have 2 x 8-bit busses on our port
    expander, with each pin being defined as an input or output. On the expander board
    we built, we called them I/O BUS A and I/O BUS B.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所讨论的，我们可以在端口扩展器上拥有2个8位总线，每个引脚都可以定义为输入或输出。在我们构建的扩展板上，我们将它们称为I/O总线A和I/O总线B。
- en: To configure the MCP23017 chip on the I2C bus, we can send it the appropriate
    commands using the **i2cset** tool we installed earlier.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置I2C总线上的MCP23017芯片，我们可以使用我们之前安装的**i2cset**工具发送适当的命令。
- en: 'On our home security system, we are going to assign all of the pins on BUS
    A as inputs for connecting our sensors to it. To do this, we use the following
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的家庭安防系统中，我们将把总线A上的所有引脚分配为输入，用于连接传感器。为此，我们使用以下命令：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What does this command mean?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是什么意思？
- en: '-y: This runs the command without user interaction.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '-y: 这将在不与用户交互的情况下运行命令。'
- en: '1: This is the ID of the bus (for example, `i2c-1`).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '1: 这是总线的ID（例如，`i2c-1`）。'
- en: '0x20: This is the address of the chip.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x20: 这是芯片的地址。'
- en: '0x00: This is the data register on the chip (in this case, the PORT A pin assignment).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0x00: 这是芯片上的数据寄存器（在此情况下为PORT A引脚分配）。'
- en: '0xFF: This is the Value loaded into the data register (in this case, all pins
    as inputs—binary %11111111).'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '0xFF: 这是加载到数据寄存器中的值（在此情况下，所有引脚都作为输入——二进制%11111111）。'
- en: 'You can check that the data register has been set correctly by reading it using
    the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式检查数据寄存器是否已正确设置：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should return a value of `0xFF`, which is the value we set earlier.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回一个值`0xFF`，即我们之前设置的值。
- en: Connecting our magnetic contact sensor
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接我们的磁性接触传感器
- en: Now that we've got our port expander working with the Raspberry Pi, we can start
    connecting things to it and create the scripts that will monitor the sensors on
    the input pins.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让端口扩展器与树莓派一起工作，我们可以开始将设备连接到它，并创建脚本来监控输入引脚上的传感器。
- en: Let's go back to our port expander stripboard that was built in the previous
    chapter and connect our magnetic sensor. But first, we need to ensure that all
    of our inputs are pulled low by default using 10Kohm resistors. This prevents
    them from being in a *floating* state and giving us spurious data when we read
    the port's data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到上一章中构建的端口扩展器条形电路板并连接我们的磁性传感器。但首先，我们需要确保所有输入默认都被拉低，并使用10KΩ的电阻。这可以防止它们处于*悬空*状态，从而在读取端口数据时产生无效数据。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the following diagram, I've connected the pull-down resistors externally,
    but you may want to include them directly on the stripboard. Toward the end of
    this book, we'll have a new board layout that brings everything that we've been
    prototyping so far together in a single solution.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示意图中，我将下拉电阻外接，但你也可以直接将它们放在条形电路板上。书的最后部分，我们将提供一个新的电路板布局，将我们到目前为止所有的原型工作整合成一个完整的解决方案。
- en: 'To check the port''s input value, we use the `i2cget` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查端口的输入值，我们使用`i2cget`命令：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This should return `0x00`, which means all inputs are off (binary %00000000).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回`0x00`，表示所有输入都关闭（二进制 %00000000）。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: What does this command mean?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是什么意思？
- en: '-y: This runs the command without user interaction.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -y：此命令在无需用户交互的情况下运行。
- en: '1: This is the ID of the bus (for example i2c-1).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1：这是总线的ID（例如 i2c-1）。
- en: '0x20: This is the address of the chip.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x20：这是芯片的地址。
- en: '0x12: This is the data register on the chip (in this case, the PORT A read
    value).'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0x12：这是芯片上的数据寄存器（在此案例中为PORT A读取值）。
- en: Now let's connect one side of our magnetic sensor's reed switch to data pin
    0 of BUS A (which we'll call GPA0 for reference), and the other side to our +3.3V
    line. By default, the switch is normally open (NO), which means that the input
    is still pulled low by the resistor.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将磁性传感器的簧片开关的一端连接到BUS A的数据引脚0（我们将其称为GPA0），另一端连接到+3.3V电源线。默认情况下，开关是常开的（NO），这意味着输入仍然通过电阻拉低。
- en: But when you move the accompanying magnet near to the sensor switch (for example,
    if the door is closed), the switch will close, pulling the input high to the +3.3V
    line. If you read the port's input value now, by running the same command, you
    should see that it returns 0x01, indicating that the first bit is high (binary
    %00000001).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当你将配套的磁铁靠近传感器开关时（例如，当门关闭时），开关将闭合，将输入拉高至+3.3V电源线。如果你现在运行相同的命令读取端口的输入值，你应该会看到返回值是0x01，表示第一个位是高电平（二进制
    %00000001）。
- en: '![Connecting our magnetic contact sensor](img/B04579_04_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![连接我们的磁性接触传感器](img/B04579_04_07.jpg)'
- en: Monitoring the sensor
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控传感器
- en: Now that we have everything in place and our magnetic sensor is detecting whether
    the door is closed, we can monitor this sensor with a simple Bash script that
    uses the I2C tool commands that we installed earlier.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪，我们的磁性传感器能够检测门是否关闭，我们可以通过一个简单的Bash脚本来监控这个传感器，脚本将使用我们之前安装的I2C工具命令。
- en: 'The code listing for `poll-magnetic-switch.sh` is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`poll-magnetic-switch.sh`的代码列表示如下：'
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When you run the script and then push the button, you should see "**The door
    is open!**" scrolling up the console screen until you stop pressing it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行脚本并按下按钮时，你应该会看到“**门是开的！**”在控制台屏幕上滚动，直到你停止按压按钮。
- en: 'By combining this with our elaborate light switch project in chapter 2, we
    can switch on the LED connected to GPIO17 when the door is opened:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将此与我们在第2章中的复杂开关项目结合，我们可以在门打开时打开连接到GPIO17的LED：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Later, as we add more sensors to different input pins, we will need to be able
    to detect which one has been triggered. We'll look at writing a Bash function
    later in the book, which will parse the returned hex value from the i2cget command,
    and tell us exactly which of the 8 inputs is high.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，随着我们将更多传感器连接到不同的输入引脚，我们需要能够检测到哪个传感器被触发。我们将在本书稍后的章节中编写一个Bash函数，它将解析从`i2cget`命令返回的十六进制值，并告诉我们到底是哪一个输入是高电平。
- en: Anti-tamper circuits
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防篡改电路
- en: If you take a closer look at our system, you might realize that depending on
    whether you are detecting normally open or normally closed sensor switches, it
    is possible to tamper with the sensor channel by simply cutting the wire. So,
    in the case of a normally open switch, it wouldn't activate the monitoring system
    if the wires were cut, as it would always appear to be open, even if the switch
    was closed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察我们的系统，可能会发现，根据你是检测常开还是常闭传感器开关，通过简单地切断电线是可能篡改传感器通道的。所以，在常开开关的情况下，如果电线被切断，监控系统不会激活，因为它始终显示为打开状态，即使开关已经关闭。
- en: To mitigate this, most alarm systems feature a 4-core wiring system to connect
    the sensor devices to the main control board—two cores are used to connect the
    sensor and two are used to create an **anti-tamper loop**, which then itself forms
    a sensor input for monitoring.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少这种情况的发生，大多数报警系统采用4芯电缆系统，将传感器设备连接到主控板——其中两根线用于连接传感器，另外两根用于创建一个**防篡改回路**，该回路本身形成一个用于监控的传感器输入。
- en: '![Anti-tamper circuits](img/B04579_04_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![防篡改电路](img/B04579_04_10.jpg)'
- en: 4-core alarm cable
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 4芯报警电缆
- en: 'Take a look at the following circuit so that you see what I mean:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下电路，以便更好地理解我的意思：
- en: '![Anti-tamper circuits](img/B04579_04_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![防篡改电路](img/B04579_04_08.jpg)'
- en: 'In this circuit, we have two sensors: one for monitoring a window and one for
    monitoring a door. These are connected to the I/O BUS A inputs, 0 and 1 (or GPA0
    and GPA1, as we like to call them). As before, they are pulled down to 0V by resistors
    but, when switches are closed, the positive voltage rail takes the inputs high.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电路中，我们有两个传感器：一个用于监控窗户，另一个用于监控门。这些传感器连接到I/O总线A的输入端口，分别为0和1（或我们喜欢称之为GPA0和GPA1）。如前所述，它们通过电阻下拉至0V，但当开关闭合时，正电压轨会使输入端口变高。
- en: However, we've also added an anti-tamper loop throughout the whole system, which
    is connected to GPA7 for monitoring. The loop is daisy-chained through each of
    the cables connecting the sensors to the controller board. All the time the loop
    is intact, the input GPA7 is kept high, but if the cable is cut anywhere, the
    current will stop flowing through it and the resistor, R3, will pull the input
    low. This will then be detected by the monitoring script.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们在整个系统中还增加了一个防篡改回路，并将其连接到GPA7进行监控。这个回路通过连接传感器与控制板的每一条电缆进行菊花链连接。只要回路保持完整，输入端口GPA7将保持高电平，但如果电缆在任何地方被切断，电流就会停止流动，电阻R3将把输入端拉低。这将被监控脚本检测到。
- en: Many security sensor products provide a facility to terminate anti-tamper loop
    wires within them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 许多安全传感器产品提供在其中终止防篡改回路电线的功能。
- en: So, in our home security system, we're going to assign GPA7 as our anti-tamper
    loop.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在我们的家庭安全系统中，我们将分配GPA7作为我们的防篡改回路。
- en: Getting into the zone
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入区域
- en: It may have occurred to you by now that even a modest-sized property could require
    plenty of door and window sensors; thus, if we used one input for each sensor,
    we'd soon run out unless we put more and more port expanders onto the system.
    The same is true for commercially available security systems.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能已经意识到，即使是一个适度大小的物业也可能需要大量的门窗传感器；因此，如果我们为每个传感器使用一个输入端口，我们很快就会用尽端口，除非我们在系统中加入越来越多的端口扩展器。市面上销售的安全系统也是如此。
- en: So, the way this is dealt with is by creating **zones**, with each zone containing
    a group of sensors. A bedroom, for example, may be defined as one zone with a
    window sensor, a door sensor, and movement detector forming that zone. In this
    scenario, each sensor is connected to the next in a series (or daisy-chained);
    if one of them triggers, it will alert the monitoring system that there was a
    trigger in the zone. Obviously, though, it may not necessarily be the actual detector,
    which in most applications isn't really an issue.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，解决这个问题的方法是通过创建**区域**，每个区域包含一组传感器。例如，卧室可以定义为一个区域，其中有一个窗户传感器、一个门传感器和一个运动探测器组成该区域。在这种情况下，每个传感器通过串联（或菊花链）连接；如果其中一个被触发，它会通知监控系统该区域发生了触发。当然，触发源不一定是实际的探测器，这在大多数应用中并不会造成问题。
- en: However, this can introduce some challenges when we're considering mixing normally
    open and normally closed type sensors within a zone, but this is something we
    will explore later on in this book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们考虑在一个区域内混合使用常开和常闭类型传感器时，这可能会引入一些挑战，但这是我们将在本书后面探讨的问题。
- en: 'The other sensors you can use are listed as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用的其他传感器如下所示：
- en: '**Hall Effect Sensor**: Hall-effect sensors are simple electronic chips that
    are used to detect magnetic fields placed near them. They are not dissimilar to
    the reed switch we''ve been using; however, because they are electronic devices,
    they are able to measure the degree of proximity in relation to the magnet (or
    the strength of magnetism), rather than being just on or off, as is the case with
    the reed switch. Also, because they are solid-state, they could be seen as being
    more reliable than mechanical switches.![Getting into the zone](img/B04579_04_11.jpg)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**霍尔效应传感器**：霍尔效应传感器是用于检测附近磁场的简单电子芯片。它们与我们一直使用的簧片开关相似；然而，由于它们是电子设备，它们能够测量与磁铁的接近程度（或磁场强度），而不仅仅是像簧片开关那样处于开或关状态。而且，由于它们是固态的，可以看作比机械开关更可靠。![进入区域](img/B04579_04_11.jpg)'
- en: A low-cost hall effect sensor—Allegro Microsystems A1302KUA-T
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一种低成本的霍尔效应传感器—Allegro Microsystems A1302KUA-T
- en: 'Pressure Mat Sensors: Pressure mats are used to detect a person standing or
    walking on them, and can be placed under a floor mat to hide them from sight.
    They can even be used in a chair to detect people sitting on it. Essentially,
    they are switches, just like the reed switch, except that they are activated by
    the pressure of walking on them, and so, can be wired and used in exactly the
    same way as for our magnetic sensor circuits.![Getting into the zone](img/B04579_04_09.jpg)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压力垫传感器：压力垫用于检测站立或行走在其上的人，并可以放置在地垫下以隐藏它们。它们甚至可以放置在椅子上，用于检测坐在椅子上的人。从本质上讲，它们是开关，就像簧片开关一样，只不过它们是通过踩踏产生的压力来激活的，因此可以与我们的磁性传感器电路以相同的方式接线和使用。![进入区域](img/B04579_04_09.jpg)
- en: A pressure switch can be used under a front-door mat
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 压力开关可以放置在前门垫下
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we got our I2C-based port expander configured and working,
    and we experimented with it by connecting a magnetic sensor—one of the most commonly
    used sensors in security systems. We've also learned how to interact with I2C
    devices using Bash scripts, and how to read and write data to and from these devices.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们配置并使基于 I2C 的端口扩展器正常工作，并通过连接磁性传感器——安全系统中最常用的传感器之一——进行了实验。我们还学习了如何使用 Bash
    脚本与 I2C 设备进行交互，以及如何读写这些设备的数据。
- en: In addition, we should now be beginning to understand the various elements and
    building blocks of a security system, including anti-tamper loops and zones. These
    are concepts that will prepare us for later on in the book, when we start to piece
    all of this together and build our final, all-encompassing system.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们现在应该开始理解安全系统的各个组成部分和基本构建块，包括防篡改环路和区域。这些概念将为我们后续章节做准备，届时我们将开始将这些元素组合在一起，构建最终的全面系统。
- en: In the next chapter, we will look at passive infra-red motion detectors, how
    they work, and how we can connect the wired and wireless types to our home security
    system. We'll also learn how to create log files based on events using Bash scripts
    so that we can maintain a history of detector states as they change.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解被动红外运动探测器的工作原理，如何将有线和无线类型的探测器连接到我们的家庭安全系统。我们还将学习如何使用 Bash 脚本根据事件创建日志文件，从而记录探测器状态的变化历史。
