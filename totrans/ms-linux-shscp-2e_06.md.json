["```\n$ type for for is a shell keyword \n```", "```\n# for u in bob joe ; do \nuseradd $u \necho '$u:Password1' | chpasswd  #pipe the created user to chpasswd \npasswd -e $u \ndone \n```", "```\nfor f in * ; do \nstat \"$f\" \ndone \n```", "```\n$ for user in $(who | cut -f1 -d\" \") ; do\nlsof -u \"$user\" -a -c bash | grep cwd\ndone \n```", "```\n#!/bin/bash \necho \"You are using $(basename $0)\" \nfor n in $* \ndo \n    echo \"Hello $n\" \ndone \nexit 0 \n```", "```\n#!/bin/bash \nfor var in one \"This is two\" \"Now three\" \"We'll check four\" \ndo \necho \"Value: $var\" \ndone \n```", "```\nHello, this is a test \nThis is the second line \nAnd this is the last line \n```", "```\n#!/bin/bash \nfile=\"file1.txt\" \nfor var in $(cat $file) \ndo \necho \" $var\" \ndone \n```", "```\n#!/bin/bash \nfile=\"file1.txt\" \nIFS=$'\\n'   #Here we change the default IFS to be a newline \nfor var in $(cat $file) \ndo \necho \" $var\" \ndone \n```", "```\n#!/bin/bash \nfor path in /home/likegeeks/* \ndo \n   if [ -d \"$path\" ] \n   then \n         echo \"$path is a directory\" \n   elif [ -f \"$path\" ] \n   then \n         echo \"$path is a file\" \n   fi \ndone \n```", "```\nfor (v= 0; v < 5; v++) \n{ \n printf(Value is %d\\n\", v); \n} \n```", "```\n#!/bin/bash \nfor (( v=1; v <= 10; v++ )) \ndo \n   echo \"value is $v\" \ndone \n```", "```\n#!/bin/bash \nfor (( v1 = 1; v1 <= 3; v1++ )) \ndo \n   echo \"First loop $v1:\" \n   for (( v2 = 1; v2 <= 3; v2++ )) \n   do \n         echo \" Second loop: $v2\" \n   done \ndone \n```", "```\n#!/bin/bash \nfor (( v1 = 1; v1 <= 5; v1++ )) \ndo \n   echo \"$v1\" \ndone > file \n```", "```\n$ for f in * ; do\n[ -d \"$f\" ] || continue\nchmod 3777 \"$f\"\ndone\n```", "```\n$ for f in * ; do\n[ -d \"$f\" ] && break\ndone\necho \"We have found a directory $f\"  \n```", "```\nfor f in * ; do\n[ -d \"$f\" ] || continue\ndir_name=\"$dir_name $f\"\ndone\necho \"$dir_name\"  \n```", "```\n$ COUNT=10\n$ while (( COUNT >= 0 )) ; do\necho -e \"$COUNT \\c\"\n(( COUNT-- ))\ndone ; echo  \n```", "```\n$ COUNT=10\n$ until (( COUNT < 0 )) ; do\necho -e \"$COUNT \\c\"\n(( COUNT-- ))\ndone ; echo  \n```", "```\n$ cat servers.txt\n8.8.8.8\n8.8.4.4  \n```", "```\n$ while read server ; do\nping -c1 $server && servers_up=\"$servers_up $server\"\ndone < servers.txt\necho \"The following servers are up: $servers_up\"\n```", "```\n#!/bin/bash \n# Author: @theurbanpenguin \n# Web: www.theurbapenguin.com \n# Script to ping servers from file \n# Last Edited: August 2015 \nif [ ! -f\"$1 ] ; then \n  echo \"The input to $0 should be a filename\" \n  exit 1 \nfi \necho \"The following servers are up on $(date +%x)\"> server.out \ndone \nwhile read server \ndo \n  ping -c1 \"$server\"&& echo \"Server up: $server\">> server.out \ndone \ncat server.out \n```", "```\n$ ping_server_from_file.sh servers.txt  \n```", "```\nwhile true \ndo \n...... \ndone \n```", "```\n#!/bin/bash \n# Author: @theurbanpenguin \n# Web: www.theurbapenguin.com \n# Sample menu \n# Last Edited: August 2015 \n\nwhile true \ndo \n  clear \n  echo \"Choose an item: a,b or c\" \n  echo \"a: Backup\" \n  echo \"b: Display Calendar\" \n  echo \"c: Exit\" \n  read -sn1 \n  read -n1 -p \"Press any key to continue\" \ndone \n```", "```\nread -sn1\n  case \"$REPLY\" in\n    a) tar -czvf $HOME/backup.tgz ${HOME}/bin;;\n    b) cal;;\n    c) exit 0;;\n  esac\n  read -n1 -p \"Press any key to continue\"\n```", "```\nexec menu.sh\n```", "```\n#!/bin/bash \nfor (( v1 = 12; v1 <= 34; v1++ )) \ndo \necho \"$v1\" \ndone > output \n```", "```\n#!/bin/bash \nfor (( v=8; v <= 12; v++ )) \ndo \nif [ $v -ge 12 ] \nthen \nbreak \nfi \necho \"$v\" \ndone \n```", "```\n#!/bin/bash \nfor (( v=1, v <= 10, v++ )) \ndo \necho \"value is $v\" \ndone \n```", "```\n#!/bin/bash \ncount=10 \nwhile (( count >= 0 )) ; do \necho $count \ndone \n$((count--)) \nexit 0 \n```"]