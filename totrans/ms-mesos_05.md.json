["```\n# Install python pip\n$ sudo easy_install pip\n\n# Install the following python modules for ansible\n$ sudo pip install paramiko PyYAML Jinja2 httplib2 six\n\n# Clone the repository\n$ git clone git://github.com/ansible/ansible.git --recursive\n\n# Change the directory\n$ cd ansible\n\n# Installation\n$ source ./hacking/env-setup\n\n```", "```\nmail.xyz.com\n\n[webservers]\nfoo.xyz.com\nbar.xyz.com\n\n[dbservers]\none.xyz.com\ntwo.xyz.com\nthree.xyz.com\n```", "```\n$ cat hosts\n[mesos_masters]\nec2-….compute-1.amazonaws.com zoo_id=1 ec2-….compute-1.amazonaws.com zoo_id=2\nec2-….compute-1.amazonaws.com zoo_id=3\n\n[mesos_workers]\nec2-….compute-1.amazonaws.com\nec2-….compute-1.amazonaws.com \n```", "```\n    --\n    # This playbook deploys the entire Mesos cluster infrastructure.\n    # RUN: ansible-playbook --ask-sudo-pass -i hosts site.yml\n\n    - name: deploy and configure the mesos masters\n      hosts: mesos_masters\n      sudo: True\n\n      roles:\n        - {role: mesos, mesos_install_mode: \"master\", tags: [\"mesos-master\"]}\n\n    - name: deploy and configure the mesos slaves\n      hosts: mesos_workers\n      sudo: True\n\n      roles:\n        - {role: mesos, mesos_install_mode: \"slave\", tags: [\"mesos-slave\"]}\n    ```", "```\n    $ mkdir group_vars\n    $ vim all\n\n    ```", "```\n    ---\n    # Variables here are applicable to all host groups\n\n    mesos_version: 0.20.0-1.0.ubuntu1404\n    mesos_local_address: \"{{ansible_eth0.ipv4.address}}\"\n    mesos_cluster_name: \"XYZ\"\n    mesos_quorum_count: \"2\"\n    zookeeper_client_port: \"2181\"\n    zookeeper_leader_port: \"2888\"\n    zookeeper_election_port: \"3888\"\n    zookeeper_url: \"zk://{{ groups.mesos_masters | join(':' + zookeeper_client_port + ',') }}:{{ zookeeper_client_port }}/mesos\"\n    ```", "```\n    $ mkdir roles; cd roles\n\n    ```", "```\n    $ ansible-galaxy init mesos\n\n    ```", "```\n    ---\n    # handlers file for mesos\n    - name: Start mesos-master\n      shell: start mesos-master\n      sudo: yes\n\n    - name: Stop mesos-master\n      shell: stop mesos-master\n      sudo: yes\n\n    - name: Start mesos-slave\n      shell: start mesos-slave\n      sudo: yes\n\n    - name: Stop mesos-slave\n      shell: stop mesos-slave\n      sudo: yes\n\n    - name: Restart zookeeper\n      shell: restart zookeeper\n      sudo: yes\n\n    - name: Stop zookeeper\n      shell: stop zookeeper\n      sudo: yes\n    ```", "```\n    ---\n    # tasks file for mesos\n\n    # Common tasks for all Mesos nodes\n    - name: Add key for Mesosphere repository\n      apt_key: url=http://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0xE56151BF state=present\n      sudo: yes\n\n    - name: Determine Linux distribution distributor\n      shell: lsb_release -is | tr '[:upper:]' '[:lower:]'\n      register: release_distributor\n\n    - name: Determine Linux distribution codename\n      command: lsb_release -cs\n      register: release_codename\n\n    - name: Add Mesosphere repository to sources list\n      copy:\n        content: \"deb http://repos.mesosphere.io/{{release_distributor.stdout}} {{release_codename.stdout}} main\"\n        dest: /etc/apt/sources.list.d/mesosphere.list\n        mode: 0644\n      sudo: yes\n\n     # Tasks for Master, Slave, and ZooKeeper nodes\n\n    - name: Install mesos package\n      apt: pkg={{item}} state=present update_cache=yes\n      with_items:\n        - mesos={{ mesos_pkg_version }}\n      sudo: yes\n      when: mesos_install_mode == \"master\" or mesos_install_mode == \"slave\"\n\n    - name: Set ZooKeeper URL # used for leader election amongst masters\n      copy:\n        content: \"{{zookeeper_url}}\"\n        dest: /etc/mesos/zk\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\" or mesos_install_mode == \"slave\"\n\n    # Tasks for Master nodes\n    - name: Disable the Mesos Slave service\n      copy:\n        content: \"manual\"\n        dest: /etc/init/mesos-slave.override\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    - name: Set Mesos Master hostname\n      copy:\n        content: \"{{mesos_local_address}}\"\n        dest: /etc/mesos-master/hostname\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    - name: Set Mesos Master ip\n      copy:\n        content: \"{{mesos_local_address}}\"\n        dest: /etc/mesos-master/ip\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    - name: Set Mesos Master Cluster name\n      copy:\n        content: \"{{mesos_cluster_name}}\"\n        dest: /etc/mesos-master/cluster\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    - name: Set Mesos Master quorum count\n      copy:\n        content: \"{{mesos_quorum_count}}\"\n        dest: /etc/mesos-master/quorum\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    # Tasks for Slave nodes\n    - name: Disable the Mesos Master service\n      copy:\n        content: \"manual\"\n        dest: /etc/init/mesos-master.override\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"slave\"\n\n    - name: Disable the ZooKeeper service\n      copy:\n        content: \"manual\"\n        dest: /etc/init/zookeeper.override\n        mode: 0644\n      sudo: yes\n      notify:\n        - Stop zookeeper\n      when: mesos_install_mode == \"slave\"\n\n    - name: Set Mesos Slave hostname\n      copy:\n        content: \"{{mesos_local_address}}\"\n        dest: /etc/mesos-slave/hostname\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"slave\"\n\n    - name: Set Mesos Slave ip\n      copy:\n        content: \"{{mesos_local_address}}\"\n        dest: /etc/mesos-slave/ip\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"slave\"\n\n    - name: Set Mesos Slave ip\n      copy:\n        content: \"{{mesos_local_address}}\"\n        dest: /etc/mesos-slave/ip\n        mode: 0644\n      sudo: yes\n      when: mesos_install_mode == \"slave\"\n\n    - name: Set Mesos Slave isolation\n      copy:\n        content: \"cgroups/cpu,cgroups/mem\"\n        dest: /etc/mesos-slave/isolation\n        mode: 0644\n      sudo: yes\n      notify:\n        - Start mesos-slave\n      when: mesos_install_mode == \"slave\"\n\n    # Tasks for ZooKeeper nodes only\n    - name: Create zookeeper config file\n      template: src=zoo.cfg.j2 dest=/etc/zookeeper/conf/zoo.cfg\n      sudo: yes\n      when: mesos_install_mode == \"master\"\n\n    - name: Create zookeeper myid file\n      template: src=zoo_id.j2 dest=/etc/zookeeper/conf/myid\n      sudo: yes\n      notify:\n        - Restart zookeeper\n        - Start mesos-master\n      when: mesos_install_mode == \"master\"\n    ```", "```\n    $ vim mesos/templates/zoo.cfg.j2\n\n    ```", "```\n      tickTime=2000\n      dataDir=/var/lib/zookeeper/\n      clientPort={{ zookeeper_client_port }}\n      initLimit=5\n      syncLimit=2\n      {% for host in groups['mesos_masters'] %}\n      server.{{ hostvars[host].zoo_id }}={{ host }}:{{ zookeeper_leader_port }}:{{ zookeeper_election_port }}\n      {% endfor %}\n    ```", "```\n    $ vim mesos/templates/zoo_id.j2\n\n    ```", "```\n    {{ zoo_id }}\n    ```", "```\n    forge 'http://forge.puppetlabs.com'\n    mod 'apt',\n      :git => 'git://github.com/puppetlabs/puppetlabs-apt.git', :ref => '1.7.0'\n\n    mod 'concat',\n      :git => 'https://github.com/puppetlabs/puppetlabs-concat', :ref => '1.1.2'\n\n    mod 'datacat',\n      :git => 'https://github.com/richardc/puppet-datacat', :ref => '0.6.1'\n\n    mod 'java',\n      :git => 'https://github.com/puppetlabs/puppetlabs-java', :ref => '1.2.0'\n\n    mod 'mesos',\n      :git => 'https://github.com/deric/puppet-mesos', :ref => 'v0.5.2'\n\n    mod 'stdlib',\n      :git => 'https://github.com/puppetlabs/puppetlabs-stdlib', :ref => '4.5.1'\n\n    mod 'zookeeper',\n      :git => 'https://github.com/deric/puppet-zookeeper', :ref => 'v0.3.5'\n    ```", "```\n    class role::mesos::master {\n      include profile::zookeeper\n      include profile::mesos::master\n\n      # Mesos frameworks\n      include profile::mesos::master::chronos\n      include profile::mesos::master::marathon\n    }\n    ```", "```\n    class role::mesos::slave {\n      include profile::mesos::slave\n    }\n    ```", "```\n    class profile::zookeeper {\n      include ::java\n      class { '::zookeeper':\n        require => Class['java'],\n      }\n    }\n    ```", "```\n    class profile::mesos::master {\n      class { '::mesos':\n        repo => 'mesosphere',\n      }\n\n      class { '::mesos::master':\n        env_var => {\n          'MESOS_LOG_DIR' => '/var/log/mesos',\n        },\n        require => Class['profile::zookeeper'],\n      }\n    }\n    ```", "```\n    class profile::mesos::slave {\n      class { '::mesos':\n        repo => 'mesosphere',\n      }\n      class { '::mesos::slave':\n        env_var => {\n          'MESOS_LOG_DIR' => '/var/log/mesos',\n        },\n      }\n    }\n    ```", "```\n    class profile::mesos::master::chronos {\n      package { 'chronos':\n        ensure  => '2.3.2-0.1.20150207000917.debian77',\n        require => Class['profile::mesos::master'],\n      }\n\n      service { 'chronos':\n        ensure  => running,\n        enable  => true,\n        require => Package['chronos'],\n      }\n    }\n    ```", "```\n    class profile::mesos::master::marathon {\n      package { 'marathon':\n        ensure  => '0.7.6-1.0',\n        require => Class['profile::mesos::master'],\n      }\n\n      service { 'marathon':\n        ensure  => running,\n        enable  => true,\n        require => Package['marathon'],\n      }\n    }\n    ```", "```\n    ---\n    classes:\n      - role::mesos::master\n\n    mesos::master::options:\n      quorum: '2'\n    mesos::zookeeper: 'zk://master1:2181,master2:2181,master3:2181/mesos'\n    zookeeper::id: 1\n    zookeeper::servers: ['master1:2888:3888', 'master2:2888:3888', 'master3:2888:3888']\n    ```", "```\n    ---\n    classes:\n      - role::mesos::slave\n\n    mesos::slave::checkpoint: true\n    mesos::zookeeper: 'zk://master1:2181,master2:2181,master3:2181/mesos'\n    ```", "```\n$ puppet module install deric-mesos\n\n```", "```\n    $ curl -L https://bootstrap.saltstack.com -o install_salt.sh\n    $ sudo sh install_salt.sh -U -M -P -A localhost\n    #Clone the repository to /srv/salt this is where the configurations are kept.\n    $ sudo git clone https://github.com/Marmelatze/saltstack-mesos-test /srv/salt\n\n    ```", "```\n    file_roots:\n      base:\n        - /srv/salt/salt\n\n    # ...\n    pillar_roots:\n      base:\n        - /srv/salt/pillar\n    ```", "```\n    $ sudo service salt-master restart\n\n    ```", "```\n    # ...\n    mine_interval: 5\n    mine_functions:\n      network.ip_addrs:\n        interface: eth0\n      zookeeper:\n        - mine_function: pillar.get\n        - zookeeper\n    ```", "```\n    # /etc/salt/grains\n    # Customer-Id this host is assigned to (numeric)-\n    customer_id: 0\n    # ID of this host.\n    host_id: ID\n\n     # ID for zookeeper, only needed for masters.\n    zk_id: ID\n\n    # Available roles are master & slave. Node can use both.\n    roles:\n    - master\n    - slave\n    ```", "```\n    $ sudo service salt-minion restart\n\n    ```", "```\n    $ sudo salt-key -A\n\n    ```", "```\n    $ sudo salt '*' state.highstate\n\n    ```", "```\nnode[:mesos][:type]\n```", "```\nnode[:mesos][:master] = {\n  :port    => \"5050\",\n  :log_dir => \"/var/log/mesos\",\n  :zk      => \"zk://localhost:2181/mesos\",\n  :cluster => \"MesosCluster\",\n  :quorum  => \"1\"\n}\n```", "```\nmesos-master --zk=zk://localhost:2181/mesos --port=5050 --log_dir=/var/log/mesos --cluster=MesosCluster\n```", "```\nnode[:mesos][:slave] = {\n  :master    => \"zk://localhost:2181/mesos\",\n  :log_dir   => \"/var/log/mesos\",\n  :containerizers => \"docker,mesos\",\n  :isolation => \"cgroups/cpu,cgroups/mem\",\n  :work_dir  => \"/var/run/work\"\n}\n```", "```\nmesos-slave --master=zk://localhost:2181/mesos --log_dir=/var/log/mesos --containerizers=docker,mesos --isolation=cgroups/cpu,cgroups/mem --work_dir=/var/run/work\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby:\n# vagrant plugins required:\n# vagrant-berkshelf, vagrant-omnibus, vagrant-hosts\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"Official Ubuntu 14.04 daily Cloud Image amd64 (Development release,  No Guest Additions)\"\n  config.vm.box_url = \"https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box\"\n\n#  config.vm.box = \"chef/centos-6.5\"\n\n  # enable plugins\n  config.berkshelf.enabled = true\n  config.omnibus.chef_version = :latest\n  # if you want to use vagrant-cachier,\n  # please activate below.\n  config.cache.auto_detect = true\n\n  # please customize hostname and private ip configuration if you need it.\n  config.vm.hostname = \"mesos\"\n  private_ip = \"192.168.1.10\"\n  config.vm.network :private_network, ip: private_ip\n  config.vm.provision :hosts do |provisioner|\n    provisioner.add_host private_ip , [ config.vm.hostname ]\n  end\n  # for mesos web UI.\n  config.vm.network :forwarded_port, guest: 5050, host: 5050\n  config.vm.provider :virtualbox do |vb|\n    vb.name = 'cookbook-mesos-sample-source'\n    # Use VBoxManage to customize the VM. For example, to change memory:\n    vb.customize [\"modifyvm\", :id, \"--memory\", \"#{1024*4}\"]\n    vb.customize [\"modifyvm\", :id,  \"--cpus\",  \"2\"]\n  end\n\n  config.vm.provision :shell do |s|\n        s.path = \"scripts/populate_sshkey.sh\"\n        s.args = \"/home/vagrant vagrant\"\n  end\n\n  # mesos-master doesn't create its work_dir.\n  config.vm.provision :shell, :inline => \"mkdir -p /tmp/mesos\"\n\n  # Mesos master depends on zookeeper emsamble since 0.19.0\n  # for Ubuntu\n  config.vm.provision :shell, :inline => \"apt-get update && apt-get install -y zookeeper zookeeperd zookeeper-bin\"\n  # For CentOS\n  # config.vm.provision :shell, :inline => <<-EOH\n  #   rpm -Uvh http://archive.cloudera.com/cdh4/one-click-install/redhat/6/x86_64/cloudera-cdh-4-0.x86_64.rpm\n  #   yum install -y -q curl\n  #   curl -sSfL http://archive.cloudera.com/cdh4/redhat/6/x86_64/cdh/RPM-GPG-KEY-cloudera --output /tmp/cdh.key\n  #   rpm --import /tmp/cdh.key\n  #   yum install -y -q java-1.7.0-openjdk zookeeper zookeeper-server\n  #   service zookeeper-server init\n  #   service zookeeper-server start\n  # EOH\n\n  config.vm.provision :chef_solo do |chef|\n#    chef.log_level = :debug\n    chef.add_recipe \"mesos\"\n    chef.add_recipe \"mesos::master\"\n    chef.add_recipe \"mesos::slave\"\n\n    # You may also specify custom JSON attributes:\n    chef.json = {\n      :java => {\n        'install_flavor' => \"openjdk\",\n        'jdk_version' => \"7\",\n      },\n      :maven => {\n        :version => \"3\",\n        \"3\" => {\n          :version => \"3.0.5\"\n        },\n        :mavenrc => {\n          :opts => \"-Dmaven.repo.local=$HOME/.m2/repository -Xmx384m -XX:MaxPermSize=192m\"\n        }\n      },\n      :mesos => {\n        :home         => \"/home/vagrant\",\n        # command line options for mesos-master\n        :master => {\n          :zk => \"zk://localhost:2181/mesos\",\n          :log_dir => \"/var/log/mesos\",\n          :cluster => \"MesosCluster\",\n          :quorum  => \"1\"\n        },\n        # command line options for mesos-slave\n        :slave =>{\n          :master => \"zk://localhost:2181/mesos\",\n          :isolation => \"posix/cpu,posix/mem\",\n          :log_dir => \"/var/log/mesos\",\n          :work_dir => \"/var/run/work\"\n        },\n        # below ip lists are for mesos-[start|stop]-cluster.sh\n        :master_ips => [\"localhost\"],\n        :slave_ips  => [\"localhost\"]\n      }\n    }\n  end\nend\n```", "```\n$ vagrant up\n\n```", "```\n$ wget https://releases.hashicorp.com/terraform/0.6.9/terraform_0.6.9_linux_amd64.zip\n\n$ unzip terraform_0.6.9_linux_amd64.zip\n```", "```\nmodule \"mesos\" {\n  source = \"github.com/ContainerSolutions/terraform-mesos\"\n  account_file = \"/path/to/your/downloaded/key.json\"\n  project = \"your google project\"\n  region = \"europe-west1\"\n  zone = \"europe-west1-d\"\n  gce_ssh_user = \"user\"\n  gce_ssh_private_key_file = \"/path/to/private.key\"\n  name = \"mymesoscluster\"\n  masters = \"3\"\n  slaves = \"5\"\n  network = \"10.20.30.0/24\"\n  domain = \"example.com\"\n  image = \"ubuntu-1404-trusty-v20150316\"\n  mesos_version = \"0.22.1\"\n}\n```", "```\n# Download the modules\n$ terraform get\n\n# Create a terraform plan and save it to a file\n$ terraform plan -out my.plan -module-depth=1\n\n# Create the cluster\n$ terraform apply my.plan\n\n```", "```\n$ terraform destroy\n\n```", "```\n$ git clone https://github.com/mbabineau/cloudformation-zookeeper\n\n```", "```\naws cloudformation create-stack \\\n  --template-body file://cloudformation-zookeeper/zookeeper.json \\\n  --stack-name <stack> \\\n  --capabilities CAPABILITY_IAM \\\n  --parameters \\\n    ParameterKey=KeyName,ParameterValue=<key> \\\n    ParameterKey=ExhibitorS3Bucket,ParameterValue=<bucket> \\\n    ParameterKey=ExhibitorS3Region,ParameterValue=<region> \\\n    ParameterKey=ExhibitorS3Prefix,ParameterValue=<cluster_name> \\\n    ParameterKey=VpcId,ParameterValue=<vpc_id> \\\n    ParameterKey=Subnets,ParameterValue='<subnet_id_1>\\,<subnet_id_2>' \\\n    ParameterKey=AdminSecurityGroup,ParameterValue=<sg_id>\n```", "```\n$ git clone https://github.com/mbabineau/cloudformation-mesos\n\n```", "```\n\"MasterInstanceCount\" : {\n    \"Description\" : \"Number of master nodes to launch\",\n    \"Type\" : \"Number\",\n    \"Default\" : \"1\"\n  },\n  \"MasterQuorumCount\" : {\n    \"Description\" : \"Number of masters needed for Mesos replicated log registry quorum (should be ceiling(<MasterInstanceCount>/2))\",\n    \"Type\" : \"Number\",\n    \"Default\" : \"1\"\n  },\n```", "```\n\"SlaveInstanceCount\" : {\n    \"Description\" : \"Number of slave nodes to launch\",\n    \"Type\" : \"Number\",\n    \"Default\" : \"1\"\n  },\n```", "```\n\"SlaveInstanceType\" : {\n  \"Description\" : \"EC2 instance type\",\n  \"Type\" : \"String\",\n  \"Default\" : \"t2.micro\",\n  \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\",\n    \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\",\"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\",\"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\",\"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\",\"hs1.8xlarge\", \"g2.2xlarge\"],\n  \"ConstraintDescription\" : \"must be a valid, HVM-compatible EC2 instance type.\"\n  },\n```", "```\n$ aws s3 cp mesos-master.json s3://cloudformationbucket/\n$ aws s3 cp mesos-slave.json s3://cloudformationbucket/\n\n```", "```\naws cloudformation create-stack \\\n  --template-body file://mesos.json \\\n  --stack-name <stack> \\\n  --capabilities CAPABILITY_IAM \\\n  --parameters \\\n    ParameterKey=KeyName,ParameterValue=<key> \\\n    ParameterKey=ExhibitorDiscoveryUrl,ParameterValue=<url> \\\n    ParameterKey=ZkClientSecurityGroup,ParameterValue=<sg_id> \\\n    ParameterKey=VpcId,ParameterValue=<vpc_id> \\\n    ParameterKey=Subnets,ParameterValue='<subnet_id_1>\\,<subnet_id_2>' \\\n    ParameterKey=AdminSecurityGroup,ParameterValue=<sg_id> \\\n    ParameterKey=MesosMasterTemplateUrl,ParameterValue=https://s3.amazonaws.com/cloudformationbucket/mesos-master.json \\\n    ParameterKey=MesosSlaveTemplateUrl,ParameterValue=https://s3.amazonaws.com/cloudformationbucket/mesos-slave.json\n```", "```\n    $ git clone https://github.com/mesosphere/playa-mesos\n    # Make sure the tests are passed\n    $ cd playa-mesos\n    $ bin/test\n    # Start the environment\n    $ vagrant up\n\n    ```", "```\n$ vagrant ssh\n\n```", "```\n# Halting the machine\n$ vagrant halt\n\n#Destroying the VM\n$ vagrant destroy\n\n```", "```\n{\n\n  \"platform\": \"virtualbox\",\n\n  \"box_name\": \"playa_mesos_ubuntu_14.04_201601041324\",\n\n  \"base_url\": \"http://downloads.mesosphere.io/playa-mesos\",\n\n  \"ip_address\": \"10.141.141.10\",\n\n  \"vm_ram\": \"2048\",\n\n  \"vm_cpus\": \"2\"\n\n}\n```", "```\n$ sudo useradd nagios\n$ sudo groupadd nagcmd\n$ sudo usermod -a -G nagcmd nagios\n\n```", "```\n$ sudo apt-get install build-essential libgd2-xpm-dev openssl libssl-dev xinetd apache2-utils unzip\n\n```", "```\n#Download the nagios archive.\n$ wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.1.1.tar.gz\n# Extract the archive.\n$ tar xvf nagios-*.tar.gz\n# Change the working directory to nagios\n$ cd nagios*\n\n# Configure and build nagios\n$ ./configure --with-nagios-group=nagios --with-command-group=nagcmd --with-mail=/usr/sbin/sendmail\n$ make all\n\n# Install nagios, init scripts and sample configuration file\n$ sudo make install\n$ sudo make install-commandmode\n$ sudo make install-init\n$ sudo make install-config\n$ sudo /usr/bin/install -c -m 644 sample-config/httpd.conf /etc/apache2/sites-available/nagios.conf\n\n```", "```\n$ wget http://nagios-plugins.org/download/nagios-plugins-2.1.1.tar.gz\n\n$ tar xvf nagios-plugins-*.tar.gz\n\n$ cd nagios-plugins-*\n\n$ ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl\n\n$ make\n\n$ sudo make install\n```", "```\n$ wget http://downloads.sourceforge.net/project/nagios/nrpe-2.x/nrpe-2.15/nrpe-2.15.tar.gz\n\n$ tar xf nrpe*.tar.gz\n$ cd nrpe*\n\n$ ./configure --enable-command-args --with-nagios-user=nagios --with-nagios-group=nagios --with-ssl=/usr/bin/openssl --with-ssl-lib=/usr/lib/x86_64-linux-gnu\n\n$ make all\n$ sudo make install\n$ sudo make install-xinetd\n$ sudo make install-daemon-config\n\n```", "```\nonly_from = 127.0.0.1 10.132.224.168\n```", "```\n$ sudo service xinetd restart\n\n```", "```\n$ sudo vi /usr/local/nagios/etc/objects/contacts.cfg\n\n```", "```\nemail nagios@localhost ; << ** Change this to your email address **\n```", "```\n$ sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin\n\n```", "```\n$ sudo service nagios restart\n\n```", "```\n$ sudo apt-get install nagios-plugins nagios-nrpe-server\n\n```", "```\n$ sudo vi /etc/nagios/nrpe.cfg\n\n```", "```\nserver_address=client_private_IP\nallowed_hosts=nagios_server_private_IP\ncommand[check_hda1]=/usr/lib/nagios/plugins/check_disk -w 20% -c 10% -p /dev/vda\n```", "```\n$ sudo service nagios-nrpe-server restart\n\n```", "```\n$ sudo vi /usr/local/nagios/etc/servers/mesos-master.cfg\n\n```", "```\n    define host {\n            use                             linux-server\n            host_name                       mesos-master\n            alias                           Mesos master server\n            address                         10.132.234.52\n            max_check_attempts              5\n            check_period                    24x7\n            notification_interval           30\n            notification_period             24x7\n    }\n```", "```\n    define service {\n            use                             generic-service\n            host_name                       mesos-master\n            service_description             PING\n            check_command                   check_ping!100.0,20%!500.0,60%\n\n    }\n```", "```\n$ sudo service nagios reload\n\n```", "```\n# Install lein on all the machines\n$ wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein\n$ chmod +x lein\n$ export PATH=$PATH:/path/to/lein\n\n# Clone the satellite repository\n$ git clone https://github.com/twosigma/satellite\n\n# Compile the satellite-master jar\n$ cd satellite/satellite-master\n$ lein release-jar\n\n```", "```\n$ java -jar ./target/satellite.jar ./config/satellite-config.clj\n\n```", "```\n    $ sudo pip install setuptools\n\n    ```", "```\n    SERVICE ALERT: localhost;SSH;CRITICAL;HARD;4;Connection refused\n    ```", "```\n    # check that ssh services are running\n    define service {\n      hostgroup_name          ssh-servers\n      service_description     SSH\n      check_command           check_ssh_port!6666!server\n      use                     generic-service\n      notification_interval   0 ; set > 0 if you want to be renotified\n    ```", "```\n            ==> master1: [2015-12-25T22:28:39+00:00] INFO: Running queued delayed notifications before re-raising exception\n            ==> master1: [2015-12-25T22:28:39+00:00] ERROR: Running exception handlers\n            ==> master1: [2015-12-25T22:28:39+00:00] ERROR: Exception handlers complete\n            ==> master1: [2015-12-25T22:28:39+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out\n            ==> master1: [2015-12-25T22:28:39+00:00] ERROR: packageunzip had an error: Mixlib::ShellOut::ShellCommandFailed: Expected process to exit with [0], but received '100'\n            ==> master1: ---- Begin output of apt-get -q -y install unzip=6.0-8ubuntu2 ----\n            ==> master1: STDOUT: Reading package lists...\n            ==> master1: Building dependency tree...\n            ==> master1: Reading state information...\n            ==> master1: The following packages were automatically installed and are no longer required:\n            ==> master1: erubis ohai ruby-bunny ruby-erubis ruby-highline ruby-i18n ruby-ipaddress\n            ==> master1: ruby-mime-types ruby-mixlib-authentication ruby-mixlib-cli\n            ==> master1: ruby-mixlib-config ruby-mixlib-log ruby-mixlib-shellout ruby-moneta\n            ==> master1: ruby-net-ssh ruby-net-ssh-gateway ruby-net-ssh-multi ruby-polyglot\n            ==> master1: ruby-rest-client ruby-sigar ruby-systemu ruby-treetop ruby-uuidtools\n            ==> master1: ruby-yajl\n            ==> master1: Use 'apt-get autoremove' to remove them.\n            ==> master1: Suggested packages:\n            ==> master1: zip\n            ==> master1: The following NEW packages will be installed:\n            ==> master1: unzip\n            ==> master1: 0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\n            ==> master1: Need to get 192 kB of archives.\n            ==> master1: After this operation, 394 kB of additional disk space will be used.\n            ==> master1: WARNING: The following packages cannot be authenticated!\n            ==> master1: unzip\n            ==> master1: STDERR: E: There are problems and -y was used without --force-yes\n            ==> master1: ---- End output of apt-get -q -y install unzip=6.0-8ubuntu2 ----\n            ==> master1: Ran apt-get -q -y install unzip=6.0-8ubuntu2 returned 100\n            ==> master1: [2015-12-25T22:28:40+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)\n            Chef never successfully completed! Any errors should be visible in the\n            output above. Please fix your recipes so that they properly complete.\n    ```", "```\n    $ sudo apt-key update\n\n    ```", "```\n    tickTime=2000\n    dataDir=/var/zookeeper\n    clientPort=2181\n    ```"]