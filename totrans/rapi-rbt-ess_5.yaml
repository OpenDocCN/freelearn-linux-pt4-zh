- en: Chapter 5. Path Planning and Your Biped
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：路径规划与双足机器人
- en: Now that your biped is up and mobile and able to find barriers, you can now
    start to have it move around autonomously. However, you'll want to have your robot
    planed his path, that is, if it knows where it has started and the desired end
    point, it can move from the starting point to the end point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的双足机器人已经可以移动，并能发现障碍物，你可以开始让它自动地移动了。不过，你需要让你的机器人规划它的路径，也就是说，如果它知道自己从哪里出发以及目标终点在哪，它就能从起点移动到终点。
- en: 'In this chapter, you will be learning about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: How to add a compass to your biped, so you'll have a sense of direction
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将指南针添加到你的双足机器人上，这样你就能让它有方向感
- en: Learning some basic path planning techniques for your robot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习一些基本的路径规划技术，以便你的机器人能更好地执行任务
- en: Connecting a digital compass to the Raspberry Pi
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数字指南针连接到树莓派
- en: One of the important pieces of information that might be useful for your robot,
    it if is going to plan its own path, is its direction of travel. So, let's learn
    how to hook up a digital compass to the Raspberry Pi.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的机器人来说，一个重要的信息是它的行进方向，这对于它规划自己的路径至关重要。那么，让我们学习如何将数字指南针连接到树莓派。
- en: 'There are several chips that provide digital compass capability; one of the
    most common is the **HMC5883L 3-Axis Digital Compass chip**. This chip is packaged
    onto a module by several companies, but almost all of them result in a similar
    interface. The following is a picture of one the **GY-271 HMC5883L Triple Axis
    Compass Magnetometer Sensor Module**, which is available from a number of online
    retailers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种芯片提供数字指南针功能，其中最常见的是**HMC5883L三轴数字指南针芯片**。该芯片被多家公司封装到模块中，几乎所有这些模块都提供类似的接口。以下是**GY-271
    HMC5883L三轴指南针磁力计传感器模块**的图片，该模块可以通过许多在线零售商购买：
- en: '![Connecting a digital compass to the Raspberry Pi](img/B04591_05_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![将数字指南针连接到树莓派](img/B04591_05_01.jpg)'
- en: This type of digital compass uses magnetic sensors to discover the earth's magnetic
    field. The output of these sensors is then made accessible to the outside world
    through a set of registers that allow the user to set things such as the sample
    rate, and continuous or single sampling. The *x*, *y*, and *z* directions are
    output-using registers as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的数字指南针利用磁传感器来探测地球的磁场。传感器的输出通过一组寄存器提供给外界，这些寄存器允许用户设置采样率、连续或单次采样等参数。*x*、*y*和*z*方向的输出也使用寄存器进行访问。
- en: 'The connections to this chip are straightforward and the device communicates
    with the Raspberry Pi by using the I2C bus, a standard serial communications bus.
    The I2C interface is a synchronous serial interface and provides more performance
    than an asynchronous Rx/Tx serial interface. The SCL data line provides a clock,
    while the data flows on the SDA line. The bus also provides addressing so that
    more than one device can be connected to the master device at the same time. On
    the back of the module, the connections are labeled, as shown in the following
    image:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片的连接方式非常简单，设备通过使用I2C总线与树莓派进行通信，I2C总线是一种标准的串行通信总线。I2C接口是一个同步串行接口，提供的性能比异步的Rx/Tx串行接口更高。SCL数据线提供时钟信号，而数据则通过SDA线传输。该总线还提供寻址功能，因此可以同时将多个设备连接到主设备上。在模块的背面，连接端口已标明，如下图所示：
- en: '![Connecting a digital compass to the Raspberry Pi](img/B04591_05_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![将数字指南针连接到树莓派](img/B04591_05_02.jpg)'
- en: 'You''ll then connect the device to the GPIO pins on Raspberry Pi. The following
    is the pin out of Raspberry Pi:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将把设备连接到树莓派的GPIO引脚。以下是树莓派的引脚分布图：
- en: '![Connecting a digital compass to the Raspberry Pi](img/B04591_05_03.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![将数字指南针连接到树莓派](img/B04591_05_03.jpg)'
- en: Connect your device to the VCC on the device to Pin 1 (3.3 V) on Raspberry Pi.
    Connect GND to Pin 9 (GND). Connect SCL on the device to Pin 5 (GPIO 3) and SDA
    to Pin 3 (GPIO 2) on the device. Notice that you will not connect the **Data Ready**
    (**DRDY**) line. Now, you are ready to communicate with the device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将设备的VCC连接到树莓派的引脚1（3.3V），将GND连接到引脚9（GND）。将设备的SCL连接到引脚5（GPIO 3），将SDA连接到引脚3（GPIO
    2）。注意，你无需连接**数据准备好**（**DRDY**）线。现在，你就可以与设备进行通信了。
- en: Accessing the compass programmatically
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过编程访问指南针
- en: 'In order to access the compass capability, you''ll need to enable the I2C library
    on Raspberry. If you used the IR sensor and ADC additional hardware in [Chapter
    4](ch04.html "Chapter 4. Avoiding Obstacles Using Sensors"), *Avoiding Obstacles
    Using Sensors*, you will have already done this. If not, follow these instructions
    to enable the I2C interface:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问指南针功能，你需要在树莓派上启用I2C库。如果你在[第4章](ch04.html "第4章 避免使用传感器的障碍物")《避免使用传感器的障碍物》中使用了IR传感器和ADC附加硬件，你已经完成了这一步。如果没有，按照以下说明启用I2C接口：
- en: Run `raspi-config`. Select the **Configure advanced settings**, as shown in
    the following screenshot:![Accessing the compass programmatically](img/B04591_05_04.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`raspi-config`。选择**配置高级设置**，如下面的截图所示：![通过编程访问指南针](img/B04591_05_04.jpg)
- en: 'From the next selection page, select the Enable/disable automatic loading of
    the I2C interface, as shown in the following screenshot:'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的选择页面，选择启用/禁用I2C接口的自动加载，如下截图所示：
- en: '![Accessing the compass programmatically](img/B04591_05_05.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![通过编程访问指南针](img/B04591_05_05.jpg)'
- en: 'Then select **yes**, as shown in the following screenshot:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后选择**yes**，如下面的截图所示：
- en: '![Accessing the compass programmatically](img/B04591_05_06.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![通过编程访问指南针](img/B04591_05_06.jpg)'
- en: 'You''ll also want to edit the file `/etc/modules` and add the lines `i2c-bcm2708`
    and `i2c-dev`, as shown in the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还需要编辑`/etc/modules`文件，添加以下两行`i2c-bcm2708`和`i2c-dev`，如下截图所示：
- en: '![Accessing the compass programmatically](img/B04591_05_07.jpg)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![通过编程访问指南针](img/B04591_05_07.jpg)'
- en: 'And one final edit, change the last line in `/boot/config.txt`, as shown in
    the following screenshot:'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一次编辑，修改`/boot/config.txt`中的最后一行，如下截图所示：
- en: '![Accessing the compass programmatically](img/B04591_05_08.jpg)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![通过编程访问指南针](img/B04591_05_08.jpg)'
- en: Now, reboot Raspberry Pi.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，重新启动树莓派。
- en: With the device connected, you can see if the system knows about your device.
    To do this, type the following command:![Accessing the compass programmatically](img/B04591_05_09.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接设备后，你可以查看系统是否识别到你的设备。为此，输入以下命令：![通过编程访问指南针](img/B04591_05_09.jpg)
- en: You can see the device at **1e**.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以看到设备的地址是**1e**。
- en: Now you communicate with your digital compass. To do this, you'll need to create
    a Python program. But before you create your Python code, you'll want to download
    a library that will make this all much easier. To do this, first create a directory
    a directory called `compass` and `cd` to that directory. Then, type `git clone
    https://github.com/quick2wire/quick2wire-python-api.git` to download the `quick2wire-python-api`
    library. Finally, type `git clone https://bitbucket.org/thinkbowl/i2clibraries.git`
    to get the i2clibraries.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以与数字指南针进行通信了。为此，你需要创建一个Python程序。但在创建Python代码之前，你需要下载一个库，这将使这一切变得更加容易。首先，创建一个名为`compass`的目录并进入该目录。然后，输入`git
    clone https://github.com/quick2wire/quick2wire-python-api.git`来下载`quick2wire-python-api`库。最后，输入`git
    clone https://bitbucket.org/thinkbowl/i2clibraries.git`来获取i2clibraries。
- en: 'You''ll also need to set some environment variables. Do this by going to your
    home directory and editing the `.bashrc` file, adding these two lines at the end:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还需要设置一些环境变量。通过进入你的主目录并编辑`.bashrc`文件，在文件末尾添加以下两行：
- en: '![Accessing the compass programmatically](img/B04591_05_10.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![通过编程访问指南针](img/B04591_05_10.jpg)'
- en: Now, you can create the following Python code:![Accessing the compass programmatically](img/B04591_05_11.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以创建以下的Python代码：![通过编程访问指南针](img/B04591_05_11.jpg)
- en: Now, run the code by typing `python3 compass.py` command and you should see:![Accessing
    the compass programmatically](img/B04591_05_12.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行代码，输入`python3 compass.py`命令，你应该会看到：![通过编程访问指南针](img/B04591_05_12.jpg)
- en: Now, you can add direction to your project! As you move the device around, you
    should see the **Heading** value change.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你可以为你的项目添加方向功能了！当你移动设备时，应该能看到**方向**值发生变化。
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a basic program; you can find out more about other features that are
    available with this library at [http://think-bowl.com/raspberry-pi/i2c-python-library-3-axis-digital-compass-hmc5883l-with-the-raspberry-pi/](http://think-bowl.com/raspberry-pi/i2c-python-library-3-axis-digital-compass-hmc5883l-with-the-raspberry-pi/).
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个基础程序；你可以在[http://think-bowl.com/raspberry-pi/i2c-python-library-3-axis-digital-compass-hmc5883l-with-the-raspberry-pi/](http://think-bowl.com/raspberry-pi/i2c-python-library-3-axis-digital-compass-hmc5883l-with-the-raspberry-pi/)找到有关此库的更多其他功能。
- en: 'One final step in developing your compass code is to make it a file where the
    functions can then be imported to a different Python program. To do this, edit
    the file so that all of the code is in functions, as shown by the following:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 开发指南针代码的最后一步是将其制作成一个文件，这样函数就可以被导入到其他Python程序中。为此，编辑文件，使所有代码都包含在函数中，如下所示：
- en: '![Accessing the compass programmatically](img/B04591_05_13.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![程序化访问指南针](img/B04591_05_13.jpg)'
- en: Then you'll be able to use the import capability of Python to import this functionality
    into a different Python file.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，你就可以使用Python的导入功能将这个功能导入到另一个Python文件中。
- en: Dynamic path planning for your robot
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人动态路径规划
- en: Now that you can see barriers and also know direction, you'll want to do dynamic
    path planning. Dynamic path planning simply means that you don't have a knowledge
    of the entire world with all the possible barriers before you encounter them.
    Your robot will have to decide how to proceed while it is in the middle and actually
    moving. This can be a complex topic, but there are some basics that you can start
    to understand and apply as you ask your robot to move around its environment.
    Let's first address the problem of knowing where you want to go and needing to
    execute a path without barriers, and then adding in barriers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到障碍物，并且知道方向，你就可以进行动态路径规划了。动态路径规划意味着你在遇到障碍物之前，无法知道整个环境的所有障碍物。你的机器人必须在移动的过程中决定如何前进。这是一个复杂的话题，但有一些基本概念你可以开始理解并应用，当你让机器人在环境中移动时。首先，我们解决目标位置的识别问题，并需要执行一条没有障碍物的路径，然后再加入障碍物。
- en: Basic path planning
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本路径规划
- en: 'In order to talk about dynamic path planning, that is, planning a path where
    you don''t know what barriers you might encounter, you''ll need a framework to
    understand where your robot is as well as to determine the location of the goal.
    One common framework is an *x*-*y* grid. The following is a drawing of such a
    grid:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了讨论动态路径规划，即规划一条你不知道可能遇到哪些障碍物的路径，你需要一个框架来理解你机器人所在的位置，并确定目标的位置。一个常见的框架是*x*和*y*网格。下面是这样一个网格的示意图：
- en: '![Basic path planning](img/B04591_05_14.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![基本路径规划](img/B04591_05_14.jpg)'
- en: 'There are three key points:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个关键点：
- en: The lower left point is a fixed reference position. The directions *x* and *y*
    are also fixed, and all other positions will be measured with respect to this
    position and these directions.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左下角是固定参考位置。*x*和*y*方向也是固定的，所有其他位置都将相对于这个位置和这些方向进行测量。
- en: Another important point is the starting location of your robot. Your robot will
    then keep track of its location by using its *x* coordinate, or position itself
    with respect to some fixed reference position in the *x* direction, and its *y*
    coordinate, its position with respect to some fixed reference position in the
    *y* direction to the goal. It will use the compass to keep track of these directions.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个重要点是机器人起始位置。机器人将通过使用其*x*坐标（相对于某个固定参考位置的* x*方向上的位置）以及*y*坐标（相对于某个固定参考位置的*y*方向上的位置）来跟踪其位置，直到目标。它将使用指南针来保持这些方向。
- en: The third important point is the position of the goal, also given in *x* and
    *y* coordinates with respect to the fixed reference position. If you know the
    starting location and the starting angle of your robot ,you can plan an optimum
    (shortest distance) path to this goal. To do this, you can use the goal location
    and the robot location, and some fairly simple math to calculate the distance
    and angle from the robot to the goal.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个重要点是目标的位置，也可以用相对于固定参考位置的*x*和*y*坐标表示。如果你知道机器人起始位置和起始角度，就可以规划一条最优（最短距离）路径到达目标。为此，你可以使用目标位置和机器人位置，并通过一些相对简单的数学计算来得出从机器人到目标的距离和角度。
- en: 'To calculate the distance, use the following equation:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要计算距离，使用以下公式：
- en: '![Basic path planning](img/B04591_05_24.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![基本路径规划](img/B04591_05_24.jpg)'
- en: 'Use the following equation to tell your robot how far to travel to the goal.
    A second equation will tell your robot the angle it needs to travel:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用以下公式告诉你的机器人到达目标的旅行距离。第二个公式将告诉你的机器人需要行进的角度：
- en: '![Basic path planning](img/B04591_05_26.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![基本路径规划](img/B04591_05_26.jpg)'
- en: 'The following is a graphical representation of these two pieces of information:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是这两条信息的图形表示：
- en: '![Basic path planning](img/B04591_05_17.jpg)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![基本路径规划](img/B04591_05_17.jpg)'
- en: Now that you have a goal angle and distance, you can program your robot to move.
    To do this, you will write a program to do path planning and call the movement
    functions that you created in [Chapter 3](ch03.html "Chapter 3. Motion for the
    Biped"), *Motion for the Biped*. You will, however, need to know the distance
    that your robot travels in a step so that you can tell your robot how far to travel
    in steps, not distance units.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了目标角度和距离，你可以编程让你的机器人移动。为此，你需要编写一个程序来进行路径规划，并调用在 [第 3 章](ch03.html "第 3
    章. 双足机器人的运动")，*双足机器人的运动* 中创建的运动函数。不过，你需要知道机器人每步行进的距离，以便你告诉机器人应该走多少步，而不是直接告诉它行进的距离单位。
- en: You'll also need to be able to translate the distance that might be covered
    by your robot in a turn; however, this distance may be too small to be of any
    importance. If you then know the angle and the distance, you can move your robot
    to the goal.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要能够计算机器人转向时可能覆盖的距离；然而，这个距离可能太小，几乎不重要。如果你知道了角度和距离，你就可以让机器人朝着目标前进。
- en: 'The following are the steps you will program:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你将要编写的程序步骤：
- en: Calculate the distance in units that your robot will need to travel in order
    to reach the goal. Convert this to number of steps to achieve this distance.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算你的机器人需要行进的距离，以到达目标。将这个距离转换成所需的步数。
- en: Calculate the angle that your robot will need to travel to reach the goal. You'll
    use the compass and your robot turn functions in order to achieve this angle.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算你的机器人需要行进的角度以到达目标。你将使用指南针和机器人转向函数来实现这个角度。
- en: Now, call the step functions the proper number of times required to move your
    robot the correct distance.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，调用适当次数的步进函数，以使机器人走到正确的距离。
- en: That's it. Now, we will use some very simple Python code that executes this
    by using functions to move the robot forward and turn the robot. In this case,
    it makes sense to create a file called `robotLib.py` with all of the functions
    that do the actual servo settings to step the biped robot forward and turn the
    robot. You'll then import these functions using the `from robotLib import *` statement,
    and your Python program can call these functions. This makes the path planning
    Python program much smaller and more manageable. You'll do the same thing with
    the `compass` program, using the `from compass import *` command.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在，我们将使用一些非常简单的 Python 代码，通过使用函数来让机器人前进和转向。这样做时，创建一个名为 `robotLib.py` 的文件，其中包含所有执行实际伺服设置的函数，以便让双足机器人前进和转向是很有意义的。然后，你可以使用
    `from robotLib import *` 语句导入这些函数，之后你的 Python 程序就可以调用这些函数了。这样，路径规划的 Python 程序会变得更小、更易于管理。你将对
    `compass` 程序做同样的操作，使用 `from compass import *` 命令。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on how to import the functions from one Python file to
    another, refer to [http://www.tutorialspoint.com/python/python_modules.htm](http://www.tutorialspoint.com/python/python_modules.htm).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何将函数从一个 Python 文件导入到另一个文件的更多信息，请参考 [http://www.tutorialspoint.com/python/python_modules.htm](http://www.tutorialspoint.com/python/python_modules.htm)。
- en: 'The following is a listing of the program:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是程序的代码列表：
- en: '![Basic path planning](img/B04591_05_18.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![基本路径规划](img/B04591_05_18.jpg)'
- en: In this program, the user enters the goal location and the robot first decides
    the shortest direction to the desired angle by reading the angle. To make it simple,
    the robot is placed in the grid with it heading in the direction of angle 0\.
    If the goal angle is less than 180 degrees, the robot will turn right. If it is
    greater than 180 degrees, the robot will turn left. The robot turns until the
    desired angle and its measured angle are within a few degrees. Then, the robot
    takes the number of steps to reach the goal.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，用户输入目标位置，然后机器人首先通过读取角度来决定到达目标角度的最短方向。为了简单起见，机器人被放置在网格中，并朝着角度 0 的方向前进。如果目标角度小于
    180 度，机器人将向右转；如果大于 180 度，机器人将向左转。机器人会一直转直到目标角度和实际测得的角度相差很小。然后，机器人就会按步数前进直到到达目标。
- en: Avoiding obstacles
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免障碍物
- en: 'Planning paths without obstacles, as has been shown, is quite easy. However,
    it becomes a bit more challenging when your robot needs to walk around obstacles.
    Let''s look at an instance where there is an obstacle in the path that you calculated
    previously. It might look like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，规划没有障碍物的路径是非常简单的。然而，当你的机器人需要绕过障碍物时，就会变得有些挑战。让我们看一个实例，其中在你之前计算的路径中有一个障碍物。它可能看起来像下面这样：
- en: '![Avoiding obstacles](img/B04591_05_19.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![避免障碍物](img/B04591_05_19.jpg)'
- en: You can still use the same path planning algorithm to find the starting angle;
    however, you'll now need to use your sonar sensor to detect the obstacle. When
    your sonar sensor detects the obstacle, you'll need to stop and recalculate a
    path to avoid the barrier, and then recalculate the desired path to the goal.
    One very simple way to do this, when your robot senses a barrier, is to turn right
    90 degrees, go a fixed distance, and then recalculate the optimum path. When you
    turn back to move toward the target, if you sense no barrier, you will be able
    to move along the optimum path.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然可以使用相同的路径规划算法来找到起始角度；然而，现在你需要使用声呐传感器来检测障碍物。当声呐传感器检测到障碍物时，你需要停止并重新计算路径以避开障碍物，然后重新计算通向目标的理想路径。实现这一点的一种非常简单的方法是，当你的机器人感知到障碍物时，向右转90度，行进一段固定距离，然后重新计算最佳路径。当你转回来朝着目标移动时，如果没有检测到障碍物，你将能够沿着最佳路径继续前进。
- en: 'However, if your robot encounters the obstacle again, it will repeat the process,
    until it reaches the goal. In this case, using these rules, the robot will travel
    the following path:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你的机器人再次遇到障碍物，它将重复这个过程，直到到达目标。在这种情况下，按照这些规则，机器人将沿着以下路径行驶：
- en: '![Avoiding obstacles](img/B04591_05_20.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![避障](img/B04591_05_20.jpg)'
- en: 'There is one more step you''ll need to take before adding the sonar sensor''s
    capability to your robot. You''ll need to change the sonar sensor code so that
    it can be added to the Python code as a library. The following is that code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在将声呐传感器的功能添加到你的机器人之前，还有一步需要完成。你需要修改声呐传感器代码，以便它可以作为库添加到Python代码中。以下是这段代码：
- en: '![Avoiding obstacles](img/B04591_05_21.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![避障](img/B04591_05_21.jpg)'
- en: 'You''ll also import this code using the `from compass import *` statement.
    You''ll also be using the time library and the `time.sleep` command to add delay
    between different statements in the code. And the following is the first part
    of the code that uses all of this to detect the barrier, turn to the right, then
    first part of the Python code that utilizes the sonar sensor:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要通过`from compass import *`语句导入此代码。你还将使用time库和`time.sleep`命令来在代码中的不同语句之间添加延迟。以下是代码的第一部分，利用这些内容来检测障碍物，向右转，然后是利用声呐传感器的第一部分Python代码：
- en: '![Avoiding obstacles](img/B04591_05_22.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![避障](img/B04591_05_22.jpg)'
- en: 'And the following is the final piece of the code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的最后一部分：
- en: '![Avoiding obstacles](img/B04591_05_22.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![避障](img/B04591_05_22.jpg)'
- en: Now, this algorithm is quite simple; there are others that have much more complex
    responses to barriers. You can also see that by adding sonar sensors to the sides
    your robot could actually sense when the barrier has ended. You could also provide
    more complex decision processes about which way to turn to avoid an object. Again,
    there are many different path finding algorithms. See [http://www.academia.edu/837604/A_Simple_Local_Path_Planning_Algorithm_for_Autonomous_Mobile_Robots](http://www.academia.edu/837604/A_Simple_Local_Path_Planning_Algorithm_for_Autonomous_Mobile_Robots)
    for an example of this. These more complex algorithms can be explored by using
    the basic functionality that you have built in this chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个算法相当简单；还有一些算法对障碍物有更复杂的响应。你还可以看到，通过在机器人两侧添加声呐传感器，机器人实际上能够感知障碍物是否已结束。你还可以提供更复杂的决策过程，来判断该如何转向以避开物体。同样，有许多不同的路径寻找算法。请参见[http://www.academia.edu/837604/A_Simple_Local_Path_Planning_Algorithm_for_Autonomous_Mobile_Robots](http://www.academia.edu/837604/A_Simple_Local_Path_Planning_Algorithm_for_Autonomous_Mobile_Robots)以获取相关示例。这些更复杂的算法可以通过使用本章中建立的基本功能进行探索。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You've now added path planning to your robot's capability. Your robot can now
    not only move from point A to point B, but can also avoid barriers that might
    be in the way. In the next chapter, you'll learn how to add a webcam to your biped.
    This will introduce a whole new set of ways for your robot to experience the world
    around it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经为机器人添加了路径规划功能。你的机器人不仅能够从A点移动到B点，还能够避开可能存在的障碍物。在下一章，你将学习如何为你的双足机器人添加摄像头。这将为你的机器人提供一整套新的方式来感知周围的世界。
