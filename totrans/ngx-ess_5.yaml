- en: Chapter 5. Managing Inbound and Outbound Traffic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 管理入站和出站流量
- en: The Internet is an open medium where it is easy and cheap to use someone else's
    resources. The low cost of usage makes systems vulnerable to intended and unintended
    abuses and resource usage spikes. The modern Internet is full of dangers such
    as bots, abusive crawlers, denial of service, and distributed denial of service
    attacks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网是一个开放的媒介，使用他人资源既容易又便宜。低成本的使用使得系统容易受到有意或无意的滥用和资源使用激增的影响。现代互联网充满了各种危险，如机器人、恶意爬虫、拒绝服务攻击（DoS）和分布式拒绝服务攻击（DDoS）。
- en: This is where Nginx comes in handy, with a range of features for inbound and
    outbound traffic management that allows you to stay in control of the quality
    of your web service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Nginx发挥了作用，提供了多种入站和出站流量管理功能，帮助你保持对网页服务质量的控制。
- en: 'In this chapter, you will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习：
- en: How to apply various limitation to inbound traffic
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何对入站流量应用各种限制
- en: How to configure upstreams
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置上游服务器
- en: How to use various options for outbound connection management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用各种选项进行出站连接管理
- en: Managing inbound traffic
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理入站流量
- en: 'Nginx has various options for managing inbound traffic. This includes the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 提供了多种管理入站流量的选项。包括以下内容：
- en: Limiting the request rate
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制请求速率
- en: Limiting the number of simultaneous connections
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制同时连接的数量
- en: Limiting the transfer rate of a connection
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制连接的传输速率
- en: These features are very useful for managing the quality of your web service
    and to prevent and mitigate abuses.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能对于管理网页服务的质量，以及防止和缓解滥用行为非常有用。
- en: Limiting the request rate
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制请求速率
- en: 'Nginx has a built-in module for limiting the request rate. Before you can enable
    it, you need to configure a shared memory segment (also known as a *zone*) in
    the `http` section using the `limit_req_zone` directive. This directive has the
    following format:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 有一个内建的模块用于限制请求速率。在启用它之前，您需要在 `http` 部分使用 `limit_req_zone` 指令配置一个共享内存段（也称为
    *zone*）。该指令的格式如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `<key>` argument specifies a single variable or a script (since version
    1.7.6) to which the rate limiting state is bound. In simple terms, by specifying
    the `<key>` argument, you are creating a number of small pipes for each value
    of the `<key>` argument evaluated at runtime, each of them with its request rate
    limited with `<rate>`. Each request for a location where this zone is used will
    be submitted to the corresponding pipe and if the rate limit is reached, the request
    will be delayed so that the rate limit within the pipe is satisfied.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`<key>` 参数指定一个单一变量或脚本（自 1.7.6 版本以来）来绑定速率限制状态。简单来说，通过指定 `<key>` 参数，你是在为 `<key>`
    参数在运行时计算出的每个值创建多个小管道，每个管道的请求速率都受到 `<rate>` 限制。每个使用此区域的位置的请求将被提交到对应的管道中，如果达到速率限制，请求将被延迟，以确保管道中的速率限制得到满足。'
- en: 'The `<name>` argument defines the name of the zone and the `<size>` argument
    defines the size of the zone. Consider the following example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`<name>` 参数定义了区域的名称，`<size>` 参数定义了区域的大小。考虑以下示例：'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we define a zone named `primary` that is 12 MB in size
    and has a rate limit of 30 requests per minute (0.5 request per second). We use
    the `$remote_addr` variable as a key. This variable evaluates into a symbolic
    value of the IP address the request came from, which can take up to 15 bytes per
    IPv4 address and even more per IPv6 address.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个名为 `primary` 的区域，大小为 12MB，且请求速率限制为每分钟 30 次请求（每秒 0.5 次请求）。我们使用
    `$remote_addr` 变量作为键。该变量评估为请求来源 IP 地址的符号值，每个 IPv4 地址最多占用 15 字节，IPv6 地址则可能占用更多字节。
- en: 'To conserve space occupied by the key, we can use the variable `$binary_remote_addr`
    that evaluates into a binary value of the remote IP address:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省占用的键空间，我们可以使用变量 `$binary_remote_addr`，该变量将评估为远程 IP 地址的二进制值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To enable request rate limiting in a location, use the `limit_req` directive:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在某个位置启用请求速率限制，请使用 `limit_req` 指令：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once a request is routed to `location /`, a rate-limiting state will be retrieved
    from the specified shared memory segment and Nginx will apply the *Leaky Bucket*
    algorithm to manage the request rate, as shown in the following figure:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦请求被路由到 `location /`，将从指定的共享内存段中检索到限速状态，Nginx 将应用 *漏桶算法* 来管理请求速率，如下图所示：
- en: '![Limiting the request rate](img/B04282_05_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![限制请求速率](img/B04282_05_01.jpg)'
- en: The Leaky Bucket algorithm
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 漏桶算法
- en: According to this algorithm, incoming requests can arrive at an arbitrary rate,
    but the outbound request rate will never be higher than the specified one. Incoming
    requests "fill the bucket" and if the "bucket" overflows, excessive requests will
    get the HTTP status `503` (Service Temporarily Unavailable) response.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此算法，入站请求可以以任意速率到达，但出站请求的速率永远不会高于指定的速率。入站请求“填充桶”，如果“桶”溢出，过量的请求将收到HTTP状态`503`（服务暂时不可用）响应。
- en: Limiting the number of simultaneous connections
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制同时连接数
- en: Although very practical, request rate limiting cannot help mitigate abuses in
    case of long-running requests, such as long uploads and downloads.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管请求速率限制非常实用，但对于长期运行的请求（如大文件上传和下载），它无法有效防止滥用。
- en: In this situation, limiting the number of simultaneous connections comes in
    handy. In particular, it is advantageous to limit the number of simultaneous connections
    from a single IP address.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，限制同时连接数非常有用。特别是，限制来自单个IP地址的同时连接数是有优势的。
- en: 'Enabling the simultaneous connections limit starts from configuring a shared
    memory segment (a zone) for storing state information, just like when limiting
    the request rate. This is done in the `http` section using the `limit_conn_zone`
    directive. This directive is similar to the `limit_req_zone` directive and has
    the following format:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启用同时连接限制需要首先配置一个共享内存区域（一个zone）来存储状态信息，就像限制请求速率时一样。这个配置是在`http`部分通过`limit_conn_zone`指令完成的。该指令类似于`limit_req_zone`指令，其格式如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding command, the `<key>` argument specifies a single variable
    or a script (since version 1.7.6) to which the connection limiting state is bound.
    The `<name>` argument defines the name of the zone and the `<size>` argument defines
    the size of the zone. Consider the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`<key>`参数指定了一个单一变量或脚本（自1.7.6版本起），该变量或脚本绑定连接限制状态。`<name>`参数定义了区域的名称，`<size>`参数定义了区域的大小。参考以下示例：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To conserve the space occupied by the key, we can again use the variable `$binary_remote_addr`.
    It evaluates into a binary value of the remote IP address:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省键所占的空间，我们可以再次使用变量`$binary_remote_addr`。它将计算为远程IP地址的二进制值：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To enable simultaneous connection limiting in a location, use the `limit_conn`
    directive:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在某个位置启用同时连接限制，使用`limit_conn`指令：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first argument of the `limit_conn` directive specifies the zone used to
    store connection limiting state information, and the second argument is the maximum
    number of simultaneous connections.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`limit_conn`指令的第一个参数指定用于存储连接限制状态信息的区域，第二个参数是最大同时连接数。'
- en: For each connection with an active request routed to `location /download`, the
    `<key>` argument is evaluated. If the number of simultaneous connections sharing
    the same value of the key surpasses `5`, the server will reply with HTTP status
    `503` (Service Temporarily Unavailable).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接到`location /download`的活跃请求都会对`<key>`参数进行评估。如果共享相同键值的同时连接数超过`5`，服务器将返回HTTP状态`503`（服务暂时不可用）。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the size of the shared memory segment that the `limit_conn_zone` directive
    allocates is fixed. When the allocated shared memory segment gets filled, Nginx
    returns HTTP status `503` (Service Temporarily Unavailable). Therefore, you have
    to adjust the size of the shared memory segment to account for the potential inbound
    traffic of your server.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`limit_conn_zone`指令分配的共享内存区域大小是固定的。当分配的共享内存区域被填满时，Nginx会返回HTTP状态`503`（服务暂时不可用）。因此，您必须调整共享内存区域的大小，以适应服务器可能的入站流量。
- en: Limiting the transfer rate of a connection
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制连接的传输速率
- en: 'The transfer rate of a connection can also be limited. Nginx has a number of
    options for this purpose. The `limit_rate` directive limits the transfer rate
    of a connection in a location to the value specified in the first argument:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的传输速率也可以被限制。Nginx为此提供了多个选项。`limit_rate`指令将某个位置的连接传输速率限制为第一个参数指定的值：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding configuration will limit the download rate of any request for
    `location /download` to 100 KBps. The rate limit is set per request. Therefore,
    if a client opens multiple connections, the total download rate will be higher.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置会将`location /download`的任何请求的下载速率限制为100 KBps。该速率限制是针对每个请求设置的。因此，如果客户端打开多个连接，整体下载速率会更高。
- en: 'Setting the rate limit to `0` switches off transfer rate limiting. This is
    helpful when a certain location needs to be excluded from the rate limit restriction:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将速率限制设置为`0`会关闭传输速率限制。当需要排除某个位置不受速率限制时，这非常有用：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding configuration limits the transfer rate of each request to a given
    virtual host to 1 MBps, except for `location /fast`, where the rate is unlimited.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将每个请求在指定虚拟主机上的传输速率限制为1 MBps，除了`location /fast`，该位置的速率没有限制。
- en: 'The transfer rate can also be limited by setting the value of the variable
    `$limit_rate`. This option can be elegantly used when rate-limiting needs to be
    enabled upon a particular condition:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置变量`$limit_rate`的值，也可以限制传输速率。当需要在特定条件下启用速率限制时，可以优雅地使用此选项：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is also an option to postpone the rate restriction until a certain amount
    of data has been transferred. This can be achieved by using the `limit_rate_after`
    directive:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个选项可以推迟速率限制，直到传输一定量的数据后才开始生效。可以通过使用`limit_rate_after`指令来实现：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding configuration will enforce the rate limit only after the first
    megabyte of request data has been sent. Such behavior is useful, for example,
    when streaming video, as the initial part of the stream is usually prebuffered
    by the video player. Returning the initial part faster improves video startup
    time without clogging the disk I/O bandwidth of the server.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的配置将在发送完第一个兆字节的请求数据后才会执行速率限制。这种行为非常有用，例如在视频流媒体传输时，因为视频播放器通常会提前缓存流的初始部分。更快地返回初始部分有助于提高视频启动速度，而不会堵塞服务器的磁盘
    I/O 带宽。
- en: Applying multiple limitations
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用多个限制
- en: 'The limitations described in the previous section can be combined to produce
    more sophisticated traffic management strategies. For example, you can create
    two zones for limiting the number of simultaneous connections with different variables
    and apply multiple limits at once:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面部分描述的限制可以结合使用，以制定更复杂的流量管理策略。例如，可以为限制同时连接数创建两个区域，使用不同的变量，并一次应用多个限制：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding configuration will limit the number of simultaneous connections
    per IP address to five; at the same time the total number of simultaneous connections
    per virtual host will not exceed 200.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将每个IP地址的同时连接数限制为五个；同时，每个虚拟主机的同时连接总数将不会超过200个。
- en: Managing outbound traffic
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理出站流量
- en: 'Nginx also has a variety of options for outbound traffic management:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 还提供了多种出站流量管理选项：
- en: Distributing outbound connections among multiple servers
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个服务器之间分配出站连接
- en: Configuring backup servers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置备份服务器
- en: Enabling persistent connections with backend servers
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用与后台服务器的持久连接
- en: Limiting transfer rate while reading from backend servers
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在从后台服务器读取时限制传输速率
- en: To enable most of these functions, the first thing you need is to declare your
    upstream servers explicitly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用这些功能，大多数情况下你首先需要明确声明你的上游服务器。
- en: Declaring upstream servers
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明上游服务器
- en: Nginx allows you to declare upstream servers explicitly. You can then refer
    to them multiple times as a single entity from any part of the `http` configuration.
    If the location of your server or servers changes, there is no need to go over
    the entire configuration and adjust it. If new servers join a group, or existing
    servers leave a group, it's only necessary to adjust the declaration and not the
    usage.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 允许显式声明上游服务器。然后，你可以在`http`配置的任何部分多次引用它们作为一个整体。如果服务器的位置发生变化，则无需遍历整个配置并进行调整。如果新的服务器加入一个组，或者现有的服务器离开一个组，只需要调整声明而不是使用方式。
- en: 'An upstream server is declared in the `upstream` section:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上游服务器在`upstream`部分声明：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `upstream` section can only be specified inside the `http` section. The
    preceding configuration declares a logical upstream named `backend` with three
    physical servers. Each server is specified using the `server` directive. The server
    directive has the following syntax:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`upstream`部分只能在`http`部分内指定。前面的配置声明了一个名为`backend`的逻辑上游，并包含三个物理服务器。每个服务器通过`server`指令指定。`server`指令的语法如下：'
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `<address>` parameter specifies an IP address or a domain name of a physical
    server. If a domain name is specified, it is resolved at the startup time and
    the resolved IP address is used as the address of a physical server. If the domain
    name resolves into multiple IP addresses, a separate entry is created for each
    of the resolved IP addresses. This is equivalent to specifying a `server` directive
    for each of these addresses.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`<address>`参数指定物理服务器的 IP 地址或域名。如果指定了域名，则在启动时解析该域名，并将解析后的 IP 地址作为物理服务器的地址。如果域名解析为多个
    IP 地址，则为每个解析出的 IP 地址创建一个单独的条目。这相当于为这些地址分别指定一个`server`指令。'
- en: 'The address can contain optional port specification, for example, `server1.example.com:8080`.
    If this specification is omitted, port 80 is used. Let''s look at an example of
    upstream declaration:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 地址可以包含可选的端口说明，例如`server1.example.com:8080`。如果省略此说明，则使用端口80。以下是一个上游声明的示例：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding configuration declares an upstream named `numeric-and-symbolic`.
    The first server in the server list has a symbolic name and its port changed to
    `8080`. The second server has the numerical address `127.0.0.1` that corresponds
    to the local host and the port is `80`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置声明了一个名为`numeric-and-symbolic`的上游。服务器列表中的第一个服务器具有符号名称，并且其端口已更改为`8080`。第二个服务器的地址为`127.0.0.1`，对应本地主机，端口为`80`。
- en: 'Let''s look at another example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请看另一个示例：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding configuration declares an upstream named `numeric-only`, which
    consists of three servers with three different numerical IP addresses listening
    on the default port.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置声明了一个名为`numeric-only`的上游，其中包含三个服务器，这些服务器具有三个不同的数字 IP 地址，且都监听默认端口。
- en: 'Consider the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下示例：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding configuration declares an upstream named `same-host`, which consists
    of two servers with the same address (`127.0.0.1`) that listen on different ports.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置声明了一个名为`same-host`的上游，其中包含两个地址相同（`127.0.0.1`）的服务器，但监听不同的端口。
- en: 'Let''s look at the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下示例：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding configuration declares an upstream named `single-server`, which
    consists of only one server.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置声明了一个名为`single-server`的上游，其中只有一个服务器。
- en: 'The following table lists the optional parameters of the `server` directive
    and their description:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了`server`指令的可选参数及其描述：
- en: '| Syntax | Description |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 语法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `weight`=<number> | This specifies the numerical weight of the server. It
    is used for distributing connections among the servers. The default value is `1`.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `weight`=<number> | 该参数指定服务器的数值权重，用于在服务器之间分配连接。默认值为`1`。 |'
- en: '| `max_fails`=<number> | This specifies the maximum number of connection attempts
    after which the server is considered as unavailable. The default value is `1`.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `max_fails`=<number> | 该参数指定最大连接尝试次数，超过此次数后服务器将被视为不可用。默认值为`1`。 |'
- en: '| `fail_timeout`=<number> | This specifies the time after which a failing server
    will be marked as unavailable. The default value is `10` seconds. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `fail_timeout`=<number> | 该参数指定失败的服务器将被标记为不可用的时间，默认值为`10`秒。 |'
- en: '| `backup` | This labels a server as a backup server. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `backup` | 该标签将服务器标记为备份服务器。 |'
- en: '| `down` | This labels a server as unavailable. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `down` | 该标签将服务器标记为不可用。 |'
- en: '| `max_conns`=<number> | This limits the number of simultaneous connections
    to the server. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `max_conns`=<number> | 该参数限制了到服务器的最大并发连接数。 |'
- en: '| `resolve` | This instructs Nginx to automatically update the P addresses
    of a server specified using a symbolic name and apply these addresses without
    restarting Nginx. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `resolve` | 该指令告诉 Nginx 自动更新使用符号名称指定的服务器的 P 地址，并在不重启 Nginx 的情况下应用这些地址。 |'
- en: Using upstream servers
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用上游服务器
- en: 'Once an upstream server is declared, it can be used in the `proxy_pass` directive:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦声明了上游服务器，它可以在`proxy_pass`指令中使用：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The upstream can be referred multiple times from the configuration. With the
    preceding configuration, once the location `@proxy` is requested, Nginx will pass
    the request to one of the servers in the server list of the upstream.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上游可以在配置中被多次引用。根据上述配置，一旦请求位置`@proxy`，Nginx 将把请求转发到上游中服务器列表的其中一台服务器。
- en: 'The algorithm for resolving the final address of an upstream server is shown
    in the following figure:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 解析上游服务器最终地址的算法如下图所示：
- en: '![Using upstream servers](img/B04282_05_05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用上游服务器](img/B04282_05_05.jpg)'
- en: An algorithm for resolving the address of an upstream server
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 解析上游服务器地址的算法
- en: Because a destination URL can contain variables, it is evaluated at runtime
    and parsed as HTTP URL. The server name is extracted from the evaluated destination
    URL. Nginx looks up an upstream section that matches the server name and if such
    exists, forwards the request to one of the servers from the upstream server list
    according to a request distribution strategy.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于目标 URL 可能包含变量，因此它会在运行时进行评估，并解析为 HTTP URL。服务器名称从评估后的目标 URL 中提取。Nginx 查找与服务器名称匹配的上游部分，如果找到，则根据请求分发策略将请求转发到上游服务器列表中的其中一台服务器。
- en: If an upstream section that matches the server name exists, Nginx checks if
    the server name is an IP address. If so, Nginx uses the IP address as the final
    address of the upstream server. If the server name is symbolic, Nginx resolves
    the server name in DNS into an IP address. If successful, the resolved IP address
    is used as the final address of the upstream server.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在与服务器名称匹配的上游部分，Nginx 会检查该服务器名称是否为 IP 地址。如果是，Nginx 会将该 IP 地址作为上游服务器的最终地址。如果服务器名称是符号性的，Nginx
    会在 DNS 中解析服务器名称为 IP 地址。如果解析成功，解析后的 IP 地址将作为上游服务器的最终地址。
- en: 'The address of the DNS server or servers can be configured using the `resolver`
    directive:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: DNS 服务器的地址可以通过 `resolver` 指令进行配置：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding directive takes a list of IP addresses of the DNS servers as its
    arguments. If a server name cannot be successfully resolved using the configured
    resolver, Nginx returns HTTP status `502` (Bad Gateway).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述指令将 DNS 服务器的 IP 地址列表作为参数。如果无法通过配置的解析器成功解析服务器名称，Nginx 将返回 HTTP 状态 `502`（错误网关）。
- en: When an upstream contains more than one server in the server list, Nginx distributes
    requests among these servers in an attempt to split the load among the available
    servers. This is also called clustering, as multiple servers act as one—altogether
    they are called a cluster.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当上游包含多个服务器时，Nginx 会在这些服务器之间分发请求，尝试将负载均衡分配到可用的服务器上。这也被称为集群，因为多个服务器作为一个整体工作——它们被称为一个集群。
- en: Choosing a request distribution strategy
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择请求分发策略
- en: 'By default, Nginx uses Round-robin algorithm while distributing requests among
    available upstream servers, as shown in the following figure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nginx 在将请求分发到可用的上游服务器时使用轮询算法，如下图所示：
- en: '![Choosing a request distribution strategy](img/B04282_05_02.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![选择请求分发策略](img/B04282_05_02.jpg)'
- en: Round-robin cyclic distribution algorithm
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询循环分发算法
- en: According to this algorithm, incoming requests are assigned to servers from
    the upstream server list in equal proportions and cyclic order. This ensures equal
    distribution of incoming requests among available servers, but does not ensure
    equal distribution of the load among servers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此算法，传入的请求会按相等比例和循环顺序分配给上游服务器列表中的服务器。这确保了传入请求在可用服务器之间的均匀分配，但并不能确保负载在服务器之间的均等分配。
- en: 'If servers in the upstream server list have varying capacities, the distribution
    algorithm can be changed to account for that. This is what the parameter `weight`
    is used for. This parameter specifies the relative weight of a server in comparison
    to other servers. Consider an installation where one of the servers is twice as
    capable as the other two. We can configure Nginx for this installation as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上游服务器列表中的服务器具有不同的处理能力，分发算法可以进行调整以考虑这些差异。这就是参数 `weight` 的用途。该参数指定一个服务器相对于其他服务器的权重。例如，假设某一台服务器的能力是其他两台的两倍，我们可以按如下方式配置
    Nginx：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The first server is configured to have twice as high a weight as the other
    servers and the request distribution strategy changes accordingly. This is shown
    in the following figure:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一台服务器的权重设置为其他服务器的两倍，因此请求分发策略相应变化。如下图所示：
- en: '![Choosing a request distribution strategy](img/B04282_05_03.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![选择请求分发策略](img/B04282_05_03.jpg)'
- en: Weighted round-robin
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 加权轮询
- en: In the preceding figure, we can see that two out of four incoming requests will
    go to server 1, one will go to server 2, and another one will be going to server
    3.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图中，我们可以看到，四个传入请求中有两个将被分配到服务器 1，一个分配到服务器 2，另一个分配到服务器 3。
- en: The round-robin strategy does not guarantee that requests from the same client
    will be always forwarded to the same server. The latter might be a challenge for
    web applications that expect the same client to be served by the same server or
    at least need some affinity of users to servers to perform efficiently.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询策略并不能保证来自同一客户端的请求始终转发到相同的服务器。对于那些期望同一客户端始终由同一服务器处理的Web应用程序来说，或者至少需要一定程度的用户与服务器之间的亲和性的应用程序，这可能会是一个挑战。
- en: 'With Nginx, you can solve this by using the IP hash request distribution strategy.
    With the IP hash distribution strategy, each request from a given IP address will
    be forwarded to the same backend server. This is achieved by hashing the client''s
    IP address and using the numerical value of the hash to choose the server from
    the upstream server list. To enable the IP hash request distribution strategy,
    use the `ip_hash` directive in the `upstream` section:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Nginx，你可以通过使用IP哈希请求分发策略来解决这个问题。在IP哈希分发策略中，来自特定IP地址的每个请求将被转发到相同的后端服务器。这是通过哈希客户端的IP地址，并使用哈希值的数值来选择上游服务器列表中的服务器来实现的。要启用IP哈希请求分发策略，可以在`upstream`部分使用`ip_hash`指令：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding configuration declares an upstream with three underlying servers
    and enables the IP hash request distribution strategy for each of them. A request
    from a remote client will be forwarded to one of the servers from this list and
    it is always the same for all requests from the client.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置声明了一个包含三个底层服务器的上游，并为每个服务器启用了IP哈希请求分发策略。来自远程客户端的请求将被转发到该列表中的某一服务器，并且该服务器对于该客户端的所有请求都是相同的。
- en: 'If you add or remove a server from the list, the correspondence between IP
    addresses and servers will change and your web application will have to deal with
    this situation. To make this problem somehow easier to handle, you can mark a
    server as unavailable using the `down` parameter. Requests to this server will
    be forwarded to the next available server:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从列表中添加或删除服务器，IP地址与服务器之间的对应关系会发生变化，且你的Web应用程序必须应对这种情况。为了让这个问题更容易处理，你可以使用`down`参数将服务器标记为不可用。请求到该服务器将被转发到下一个可用服务器：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding configuration declares the `server2.example.com` server unavailable
    and once a request is targeted to this server, the next available server will
    be chosen (`server1.example.com` or `server3.example.com`).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置声明了`server2.example.com`服务器不可用，一旦请求指向该服务器，系统将选择下一个可用的服务器（`server1.example.com`或`server3.example.com`）。
- en: 'If an IP address is not a convenient input for the hash function, you can use
    the `hash` directive instead of `ip_hash` to choose an input that is more convenient.
    The only argument of this directive is a script, which is evaluated at runtime
    and produces a value used as the input for the hash function. This script can
    contain, for example, a cookie, an HTTP header, a combination of an IP address
    and a user agent, an IP address and a proxied IP address, and so on. Take a look
    at the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果IP地址对哈希函数来说不是一个便捷的输入，你可以使用`hash`指令替代`ip_hash`来选择一个更合适的输入。该指令的唯一参数是一个脚本，脚本在运行时被评估并生成一个值作为哈希函数的输入。这个脚本可以包含，例如，一个cookie，一个HTTP头部，一个IP地址和用户代理的组合，或者一个IP地址和代理IP地址的组合，等等。请看下面的示例：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding configuration uses a cookie named `uid` as input for the hash
    function. If the cookie stores a unique ID of a user, each user's requests will
    be forwarded to a fixed server in the upstream server list. If a user does not
    have a cookie yet, the variable `$cookie_uid` evaluates to an empty string and
    produces a fixed hash value. Therefore, all requests from users without the `uid`
    cookie are forwarded to a fixed server from the preceding list.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置使用名为`uid`的cookie作为哈希函数的输入。如果该cookie存储了用户的唯一ID，则每个用户的请求将被转发到上游服务器列表中的固定服务器。如果用户还没有cookie，则变量`$cookie_uid`的值为空字符串，从而生成一个固定的哈希值。因此，所有没有`uid`
    cookie的用户请求都会被转发到前面列表中的固定服务器。
- en: 'In the next example, we will use a combination of a remote IP address and the
    user agent field as input for the hash function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将使用远程IP地址和用户代理字段的组合作为哈希函数的输入：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding configuration relies on the diversity of user agent field and
    prevents a concentration of users from proxied IP addresses on a single server.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的配置依赖于用户代理字段的多样性，防止来自代理IP地址的用户集中在单个服务器上。
- en: Configuring backup servers
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置备用服务器
- en: Some servers in the server list can be marked as *backup*. By doing so, you
    tell Nginx that these servers should not be normally used and used only when all
    non-backup servers do not respond.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器列表中的一些服务器可以被标记为 *备用*。通过这样做，你告诉 Nginx 这些服务器通常不应被使用，仅在所有非备用服务器未响应时使用。
- en: To illustrate the use of backup servers, imagine that you run a **Content Distribution
    Network** (**CDN**) where a number of geographically distributed edge servers
    handle user traffic and a set of centralized content servers generate and distribute
    content to the edge servers. This is shown in the following figure.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明备用服务器的使用，假设你运行一个 **内容分发网络**（**CDN**），其中若干地理上分布的边缘服务器处理用户流量，而一组集中式内容服务器生成并将内容分发给边缘服务器。如下图所示。
- en: '![Configuring backup servers](img/B04282_05_04.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![配置备用服务器](img/B04282_05_04.jpg)'
- en: A Content Distribution Network
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 内容分发网络
- en: The edge servers are co-located with a set of highly-available caches that do
    not alter the content obtained from the content servers, but simply store it.
    The caches have to be used as long as any of them is available.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘服务器与一组高可用缓存共同部署，这些缓存不会改变从内容服务器获取的内容，而只是将其存储。只要任何缓存可用，就必须使用它们。
- en: However, when none of the caches are available for some reason, the edge server
    can contact the content servers—although it is not desirable. Such behavior (called
    degradation) can remedy the situation until the outage of caches is resolved,
    while keeping the service available.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当由于某种原因没有缓存可用时，边缘服务器可以联系内容服务器——尽管这并不理想。这种行为（称为降级）可以暂时解决问题，直到缓存故障被解决，同时保持服务可用。
- en: 'Then, the upstream on the edge server can be configured as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，边缘服务器上的上游可以配置如下：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding configuration declares the servers `cache1.mycdn.com`, `cache2.mycdn.com`
    and `cache3.mycdn.com` as primary servers to contact. They will be used as long
    as any of them is available.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置声明了 `cache1.mycdn.com`、`cache2.mycdn.com` 和 `cache3.mycdn.com` 服务器为主服务器，进行连接时将使用它们，只要其中任何一台服务器可用。
- en: We then list the `content1.mycdn.com` and `content2.mycdn.com` servers as backup
    by specifying the `backup` parameter. These servers will be contacted only if
    none of the primary servers are available. This feature of Nginx provides flexibility
    in the way the availability of your system is managed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过指定 `backup` 参数将 `content1.mycdn.com` 和 `content2.mycdn.com` 服务器列为备用服务器。仅当所有主服务器不可用时，这些服务器才会被联系。Nginx
    的这一特性提供了灵活的方式来管理系统的可用性。
- en: Determining whether a server is available
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定服务器是否可用
- en: How do you define that a server is available? For most applications, connectivity
    errors are hard signs of an unavailable server, but what if an error is software
    generated? It might be worth trying the next server if a server is available on
    the transport layer (over TCP/IP) but returns HTTP errors such as `500` (Internal
    Server Error) and `503` (Service Unavailable) or even softer errors such as `403`
    (Forbidden) or `404` (Not found). If the upstream server is a proxy itself, it
    might be necessary to handle HTTP errors `502` (Bad Gateway) and `504` (Gateway
    Timeout).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如何定义服务器是否可用？对于大多数应用程序，连接错误通常是不可用服务器的明显信号，但如果是软件生成的错误呢？如果服务器在传输层（通过 TCP/IP）是可用的，但返回
    HTTP 错误，如 `500`（内部服务器错误）和 `503`（服务不可用），甚至是一些较软的错误，如 `403`（禁止访问）或 `404`（未找到），那么是否值得尝试下一个服务器？如果上游服务器本身是代理，则可能需要处理
    HTTP 错误 `502`（错误网关）和 `504`（网关超时）。
- en: Nginx allows you to specify availability and retrial conditions using the directives
    `proxy_next_upstream`, `fastcgi_next_upstream`, `uwsgi_next_upstream`, `scgi_next_upstream`,
    and `memcached_next_upstream`. Each of these directives receives a list of conditions
    that will be treated as errors while communicating with an upstream server, and
    make Nginx retry with another server. In addition to that, if the number of unsuccessful
    interaction attempts with a server is larger than the value of the `max_fails`
    parameter for the server (the default value is `1`), the server will be marked
    as unavailable for a period specified by the `fail_timeout` directive (the default
    value is `10` seconds).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 允许你使用指令 `proxy_next_upstream`、`fastcgi_next_upstream`、`uwsgi_next_upstream`、`scgi_next_upstream`
    和 `memcached_next_upstream` 来指定可用性和重试条件。每个指令都会接收一个条件列表，这些条件会在与上游服务器通信时被视为错误，从而促使
    Nginx 尝试连接另一个服务器。除此之外，如果与某个服务器的失败交互尝试次数超过该服务器的 `max_fails` 参数值（默认值为 `1`），该服务器将在
    `fail_timeout` 指令指定的时间段内被标记为不可用（默认值为 `10` 秒）。
- en: 'The following table lists all possible values for the arguments of the directives
    `proxy_next_upstream`, `fastcgi_next_upstream`, `uwsgi_next_upstream`, `scgi_next_upstream`,
    and `memcached_next_upstream`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了`proxy_next_upstream`、`fastcgi_next_upstream`、`uwsgi_next_upstream`、`scgi_next_upstream`和`memcached_next_upstream`指令的所有可能值：
- en: '| Value | Meaning |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 含义 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `error` | A connection error has occurred or an error during sending a request
    or receiving a reply has occurred |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `error` | 发生了连接错误，或在发送请求或接收回复过程中发生了错误 |'
- en: '| `timeout` | A connection timed out during setup, sending a request or receiving
    a reply |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `timeout` | 在建立连接、发送请求或接收回复过程中发生了超时 |'
- en: '| `invalid_header` | The upstream server has returned an empty or invalid reply
    |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `invalid_header` | 上游服务器返回了一个空的或无效的回复 |'
- en: '| `http_500` | The upstream server returned a reply with HTTP status code `500`
    (Internal Server Error) |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `http_500` | 上游服务器返回了一个HTTP状态码为`500`（内部服务器错误）的回复 |'
- en: '| `http_502` | The upstream server returned a reply with HTTP status code `502`
    (Bad Gateway) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `http_502` | 上游服务器返回了一个HTTP状态码为`502`（错误网关）的回复 |'
- en: '| `http_503` | The upstream server returned a reply with HTTP status code `503`
    (Service Unavailable) |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `http_503` | 上游服务器返回了一个HTTP状态码为`503`（服务不可用）的回复 |'
- en: '| `http_504` | The upstream server returned a reply with HTTP status code `504`
    (Gateway Timeout) |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `http_504` | 上游服务器返回了一个HTTP状态码为`504`（网关超时）的回复 |'
- en: '| `http_403` | The upstream server returned a reply with HTTP status code `403`
    (Forbidden) |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `http_403` | 上游服务器返回了一个HTTP状态码为`403`（禁止访问）的回复 |'
- en: '| `http_404` | The upstream server returned a reply with HTTP status code `404`
    (Not Found) |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `http_404` | 上游服务器返回了一个HTTP状态码为`404`（未找到）的回复 |'
- en: '| `off` | Disables passing requests to the next server |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `off` | 禁用将请求传递给下一个服务器 |'
- en: The default value for the preceding directives is `error timeout`. This makes
    Nginx retry a request with another server only if a connectivity error or a timeout
    has occurred.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前述指令的默认值为`error timeout`。这意味着，只有在发生连接错误或超时的情况下，Nginx才会尝试使用其他服务器重试请求。
- en: 'Here is an example of a configuration that uses the `proxy_next_upstream` directive:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`proxy_next_upstream`指令的配置示例：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding configuration extends the default retrial and availability option
    and enables retrying with the next server in case of connectivity error, upstream
    error (`502`, `503`, or `504`) or a connection timeout.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置扩展了默认的重试和可用性选项，并在发生连接错误、上游错误（`502`、`503`或`504`）或连接超时的情况下启用与下一个服务器的重试。
- en: Enabling persistent connections
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用持久连接
- en: By default, Nginx does not keep connections with upstream servers open. Keeping
    the connections open can significantly improve the performance of your system.
    This is because persistent connections eliminate the connection setup overhead
    every time a request is made to a given upstream server.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Nginx不会保持与上游服务器的连接打开。保持连接开启可以显著提高系统性能。这是因为持久连接消除了每次请求到达上游服务器时的连接建立开销。
- en: 'To enable persistent connections for an upstream, use the `keepalive` directive
    in the `upstream` section:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要为上游启用持久连接，请在`upstream`部分使用`keepalive`指令：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The only argument of the `keepalive` directive specifies the minimum number
    of inactive persistent connections in the connection pool of this upstream. If
    the number of inactive persistent connections grows beyond this number, Nginx
    closes as many connections as needed to stay within this number. This guarantees
    that a specified number of hot and ready-to-go connections are always available
    for use. At the same time, these connections consume the resources of backend
    servers, so this number must be chosen cautiously.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`keepalive`指令的唯一参数指定了此上游连接池中非活动持久连接的最小数量。如果非活动持久连接的数量超过此数值，Nginx将关闭足够多的连接，以保持在该数量之内。这保证了始终有指定数量的“热”连接可供使用。同时，这些连接会消耗后台服务器的资源，因此此数量必须谨慎选择。'
- en: 'To use persistent connections with HTTP proxying, further tweaks are required:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要在HTTP代理中使用持久连接，还需要进行进一步的调整：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding configuration, we change the HTTP version to 1.1 so that persistent
    connections are expected by default. We also clear the Connection header so that
    the Connection header from the original request does not influence the proxied
    request.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述配置中，我们将HTTP版本更改为1.1，以便默认期望使用持久连接。同时，我们清除了Connection头，以防止原始请求中的Connection头影响代理请求。
- en: Limiting the transfer rate of an upstream connection
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 限制上游连接的传输速率
- en: 'The transfer rate of a connection with an upstream can be limited. This feature
    can be used to reduce stress on the upstream server. The `proxy_limit_rate` directive
    limits the transfer rate of an upstream connection in a location to the value
    specified in the first argument:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 可以限制与上游连接的传输速率。此功能可用于减少上游服务器的压力。`proxy_limit_rate` 指令将上游连接的传输速率限制为第一个参数中指定的值：
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding configuration will limit the rate of connections with the specified
    backend to 200 KBps. The rate limit is set per request. If Nginx opens multiple
    connections to the upstream server, the total rate will be higher.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置将限制与指定后端的连接速率为 200 KBps。速率限制是按请求设置的。如果 Nginx 向上游服务器打开多个连接，总速率将更高。
- en: Note
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Rate limiting works only if proxy response buffering is switched on using the
    `proxy_buffering` directive.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 限速仅在使用 `proxy_buffering` 指令开启代理响应缓冲时生效。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about a number of tools for inbound and outbound
    traffic management. These tools will help you to ensure the reliability of your
    web service and implement complex caching schemes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了用于入站和出站流量管理的多种工具。这些工具将帮助你确保 web 服务的可靠性并实现复杂的缓存方案。
- en: In the next chapter, you'll learn how to squeeze the most performance out of
    your web server and optimize resource usage—performance tuning.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何从 web 服务器中挤出最好的性能，并优化资源使用——性能调优。
