- en: Chapter 7. Accessing Your Biped Remotely
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that your biped is up and running, you'll want to able to send it on its
    way into the world, but still be able to monitor and control it remotely. This
    will help you in development as well as deployment and will open up all sorts
    of new scenarios and applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to add a wireless LAN dongle to your biped robot and set it up as a wireless
    access point
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to control your biped robot using this access and a joystick
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the wireless LAN connection to get **First Person Video** (**FPV**)
    back so that you can see what your biped robot is seeing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a wireless dongle and creating an access point
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Configuring and Programming Raspberry Pi"),
    *Configuring and Programming Raspberry Pi*, you learned how to add a wireless
    dongle and have the Raspberry Pi connect to your wireless network. This is a useful
    way to access the Raspberry Pi, but if you want to take your robot outside the
    coverage of your wireless LAN, you'll want to set it up as an access point.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in doing this is to install the wireless LAN device. One device
    that is inexpensive and easy to configure is the Edimax Wifi Adapter device (the
    product information is available at [http://www.edimax.com/edimax/merchandise/merchandise_detail/data/edimax/global/wireless_adapters_n150/ew-7811un](http://www.edimax.com/edimax/merchandise/merchandise_detail/data/edimax/global/wireless_adapters_n150/ew-7811un)).
    It is available at most online electronic outlets:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a wireless dongle and creating an access point](img/B04591_07_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: 'Once you have installed the device and booted Raspberry Pi, type `lsusb` command.
    This should display something like the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a wireless dongle and creating an access point](img/B04591_07_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'The Edimax device is listed in the set of devices connected to the USB port.
    Now, execute the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have `hostapd` installed by typing `sudo apt-get install
    hostapd`. This application is a background application that controls the configuration
    of wireless on Raspberry Pi.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default version of `hostapd` unfortunately does not support the Edimax chipset
    by default. So, you'll need to download a version that does by typing `wget http://www.daveconroy.com/wp3/wp-content/uploads/2013/07/hostapd.zip`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, unzip this file by typing `unzip hostapd.zip`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a backup of your original `hostapd` application by typing `sudo mv /usr/sbin/hostapd
    /usr/sbin/hostapd.bak`. This way, you'll have it if you want to restore it later.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, move the new version of `hostapd` to the proper directory by typing `sudo
    mv hostapd /usr/sbin/hostapd.edimax`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the next step, type `sudo ln -sf /usr/sbin/hostapd.edimax /usr/sbin/hostapd`;
    this will create a soft link to the new file so that it will be executed as the
    `hostapd` application.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `sudo chown root.root /usr/sbin/hostapd`, and this will change the owner
    and the group of this file to `root`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `sudo chown root.root /usr/sbin/hostapd`，这将把该文件的所有者和组更改为 `root`。
- en: Type `sudo chmod 755 /usr/sbin/hostapd` to make this file executable to the
    owner.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `sudo chmod 755 /usr/sbin/hostapd` 使得该文件对所有者可执行。
- en: Now you will want to configure your wireless access point. Edit the file by
    typing `sudo emacs /etc/hostapd/hostapd.conf` so that it looks like the following
    screenshot:![Adding a wireless dongle and creating an access point](img/B04591_07_03.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你将配置你的无线接入点。通过输入 `sudo emacs /etc/hostapd/hostapd.conf` 编辑该文件，使其像以下截图一样：![添加无线适配器并创建接入点](img/B04591_07_03.jpg)
- en: You'll now want to edit the `/etc/network/interfaces` file, as shown in the
    following screenshot:![Adding a wireless dongle and creating an access point](img/B04591_07_04.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在需要编辑 `/etc/network/interfaces` 文件，如下截图所示：![添加无线适配器并创建接入点](img/B04591_07_04.jpg)
- en: This will set the address of the access point to **10.10.0.1**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把接入点的地址设置为 **10.10.0.1**。
- en: Now, type `sudo apt-get install isc-dhcp-server` to install a `dhcp` server
    so that devices that connect to it will be able to get a dynamic address.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入 `sudo apt-get install isc-dhcp-server` 来安装 `dhcp` 服务器，以便连接到它的设备能够获得动态地址。
- en: Now, edit the `/etc/dhcp/dhcpd.conf` and add these lines:![Adding a wireless
    dongle and creating an access point](img/B04591_07_05.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑 `/etc/dhcp/dhcpd.conf` 并添加以下几行：![添加无线适配器并创建接入点](img/B04591_07_05.jpg)
- en: The next step is to edit the `/etc/default/hostapd` so that this will all start
    at power up by adding this line:![Adding a wireless dongle and creating an access
    point](img/B04591_07_06.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是编辑 `/etc/default/hostapd` 文件，以便在启动时自动启动这一切，只需添加这一行：![添加无线适配器并创建接入点](img/B04591_07_06.jpg)
- en: Now type the following two commands; `sudo update-rc.d hostapd enable` and `sudo
    update-rc.d isc-dhcp-server enable` and then reboot the Raspberry Pi.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入以下两条命令：`sudo update-rc.d hostapd enable` 和 `sudo update-rc.d isc-dhcp-server
    enable`，然后重启树莓派。
- en: You should now be able to connect to your Raspberry Pi as a wireless access
    point.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够将你的树莓派连接为无线接入点。
- en: Adding a joystick remote control
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加操纵杆遥控
- en: Now that you can access your Raspberry Pi from a remote computer, you can SSH,
    just like you may have been doing with a wired connection, issue commands, and
    even control the biped using the remote computer. This introduces a number of
    different possibilities, one of which is to control your project with a joystick
    connected to the remote computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以从远程计算机访问树莓派，你可以像使用有线连接时一样进行 SSH 操作，发出命令，甚至使用远程计算机控制双足机器人。这为你提供了许多不同的可能性，其中之一就是通过连接到远程计算机的操纵杆来控制你的项目。
- en: To add the game controller, you'll need to first find a game controller that
    can connect to your computer. If you are using Microsoft Windows as the OS on
    the host computer, pretty much any USB controller that can connect to a PC will
    work. The same type of controller also works if you are using Linux for the remote
    computer. In fact, you can use another Raspberry Pi as the remote computer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加游戏控制器，你需要首先找到一个能够连接到计算机的游戏控制器。如果你在主机计算机上使用的是 Microsoft Windows 操作系统，那么几乎任何可以连接到
    PC 的 USB 控制器都可以使用。如果你在远程计算机上使用的是 Linux 操作系统，同样类型的控制器也适用。事实上，你可以使用另一个树莓派作为远程计算机。
- en: 'Since the joystick will be connected to the remote computer, you''ll need to
    run two programs: one on the remote computer and one on the Raspberry Pi on the
    biped robot. You''ll also need a way to communicate between them. In the following
    example, you''ll use the wireless LAN interface and a client-server model of communication.
    You''ll run the server program on the remote computer, and the client program
    on the Raspberry Pi on the biped robot.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操纵杆将连接到远程计算机，你需要运行两个程序：一个在远程计算机上，另一个在双足机器人上的树莓派上。你还需要一种通信方式。在以下示例中，你将使用无线局域网接口和客户端-服务器通信模型。你将在远程计算机上运行服务器程序，在树莓派上运行客户端程序。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For an excellent tutorial of this type of model and how it is used in a gaming
    application, see [http://www.raywenderlich.com/38732/multiplayer-game-programming-for-teens-with-python](http://www.raywenderlich.com/38732/multiplayer-game-programming-for-teens-with-python).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在游戏应用中使用这种类型的模型，参考这个优秀的教程：[http://www.raywenderlich.com/38732/multiplayer-game-programming-for-teens-with-python](http://www.raywenderlich.com/38732/multiplayer-game-programming-for-teens-with-python)。
- en: The first step is to simply plug in your USB game controller to the remote computer.
    Once you have the controller connected to the remote computer, you'll need to
    create a Python program on the Raspberry Pi that will take the signals sent from
    the remote computer client and send the control to the server running on Raspberry
    Pi so that you can send the correct signals to the servos on your biped.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Before you do this, you'll need to install the libraries on Raspberry Pi that
    will allow this to work. The first is a library called `pygame`. Install this
    by typing `sudo apt-get install python-pygame`. You'll also need to install a
    set of Python install tools by typing `sudo apt-get install python-setuptools`.
    Then, you'll need a LAN communication layer library called `PodSixNet`. This will
    allow the two applications, the client on the remote computer and the server running
    on Raspberry Pi, to communicate. To install this, follow the instructions at [http://mccormick.cx/projects/PodSixNet/](http://mccormick.cx/projects/PodSixNet/).
    Now you are ready to create the program on Raspberry Pi on the biped. The first
    part of the program is the Python functions from the program you created in [Chapter
    3](ch03.html "Chapter 3. Motion for the Biped"), *Motion for the Biped*. In this
    section, you'll create a class called `QuadGame`. This class will take the inputs
    from the game controller connected to the server and turn them into commands that
    will be sent to the servo controller for your biped robot.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a table of those controls:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '| Joystick control | Biped control |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| Button 2 | Robot home position |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| Button 1 | Robot turn right |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| Button 3 | Robot turn left |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| Joystick Up | Robot walk forward |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: 'Now, the following is the initial part of the code, the Python import statements:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a joystick remote control](img/B04591_07_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'And the following is the `BoxesGame` class, the code that will respond to the
    joystick:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a joystick remote control](img/B04591_07_08.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: This is the interesting part of the code. This code takes the input from the
    remote computer and translates it into action. The first `if` statement determines
    what type of data is being sent from the remote computer with the joystick attached.
    It can be a button press, where `data["type"] == 10`, and then the statement `data["info"]["button"]
    == 2` determines that **button 2** has been pressed. In this case, this will send
    commands that will cause the robot to go to the home position. If the `if data["type"]
    == 7:`, then this is a joystick event, and the `if data["info"]["value"] < - 0.9`,
    then this will determine that the joystick is in the up position and the robot
    should move forward.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the final part of the joystick controller aspect of the client
    program for completeness:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a joystick remote control](img/B04591_07_09.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: This final piece of code initializes the game loop, which loops while taking
    the inputs, sends them to the servo controller, and on to the flight controller.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这段最终的代码初始化了游戏循环，循环中接收输入、将其发送到伺服控制器，再传送到飞行控制器。
- en: You'll also need a server program running on the remote computer that will take
    the signals from the game controller and send them to the client. You'll be writing
    this code in Python using Python version 2.7, which can be installed from here.
    Additionally, you'll need to install the `pygame` library. If you are using Linux
    on the remote computer, then type `sudo apt-get install python-pygame`. If you
    are using Microsoft Windows on the remote machine, then follow the instructions
    at [http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在远程计算机上运行一个服务器程序，接收来自游戏控制器的信号并将其发送到客户端。你将使用Python 2.7编写此代码，可以从这里安装。此外，你还需要安装`pygame`库。如果你在远程计算机上使用Linux，则输入`sudo
    apt-get install python-pygame`。如果你在远程计算机上使用Microsoft Windows，则按照[http://www.pygame.org/download.shtml](http://www.pygame.org/download.shtml)上的说明进行操作。
- en: 'You''ll also need the LAN communication layer described previously. You can
    find a version that will run on Microsoft Windows or Linux at [http://mccormick.cx/projects/PodSixNet/](http://mccormick.cx/projects/PodSixNet/).
    The following is a listing of the server code in two parts:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要之前描述的局域网通信层。你可以在[http://mccormick.cx/projects/PodSixNet/](http://mccormick.cx/projects/PodSixNet/)找到适用于Microsoft
    Windows或Linux的版本。以下是服务器代码的两部分：
- en: '![Adding a joystick remote control](img/B04591_07_10.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![添加摇杆遥控](img/B04591_07_10.jpg)'
- en: 'This first part creates three classes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分创建了三个类：
- en: The first, class `ClientChannel`, establishes a communication channel for your
    project.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个类`ClientChannel`为你的项目建立了一个通信通道。
- en: The second, class `BoxServer`, sets up a server so that you can communicate
    the joystick action to the Raspberry Pi on the biped.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个类`BoxServer`设置一个服务器，以便你可以将摇杆操作传送到双足机器人的Raspberry Pi上。
- en: Finally, the third class, `Game` , just initializes a game that contains everything
    you'll need.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，第三个类`Game`只是初始化一个游戏，其中包含你需要的所有内容。
- en: 'The following is the latter part of the code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码的后半部分：
- en: '![Adding a joystick remote control](img/B04591_07_11.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![添加摇杆遥控](img/B04591_07_11.jpg)'
- en: This part of the code initializes the joystick so that all the controls can
    be sent to the biped's Raspberry Pi.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分代码初始化摇杆，以便将所有控制信号发送到双足机器人的Raspberry Pi上。
- en: 'You''ll need to run these programs on both computers, entering the Internet
    address of the remote computer connected to the joystick. The following is what
    running the program on that computer will look like, before running the program
    on the remote computer:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在两台计算机上运行这些程序，并输入连接到摇杆的远程计算机的互联网地址。以下是运行该程序时的界面，在运行远程计算机上的程序之前：
- en: '![Adding a joystick remote control](img/B04591_07_12.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![添加摇杆遥控](img/B04591_07_12.jpg)'
- en: 'And the following is what the program will look like when run on the Raspberry
    Pi and connected to the robot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是当在Raspberry Pi上运行并连接到机器人时，程序的界面：
- en: '![Adding a joystick remote control](img/B04591_07_13.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![添加摇杆遥控](img/B04591_07_13.jpg)'
- en: 'Finally, the following is what the program will look like on the remote computer
    when the robot''s Raspberry Pi is up and connected:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是当机器人的Raspberry Pi启动并连接时，远程计算机上程序的界面：
- en: '![Adding a joystick remote control](img/B04591_07_14.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![添加摇杆遥控](img/B04591_07_14.jpg)'
- en: Now you can control you robot remotely using the joystick!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用摇杆远程控制你的机器人！
- en: Adding the capability to see remotely
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加远程查看功能
- en: 'Your biped can now get information from your remote computer and respond to
    joystick key presses, but you may want to be able to see what the biped sees from
    its webcam. This is straightforward to configure with a webcam, vncserver, and
    the capability you used in [Chapter 6](ch06.html "Chapter 6. Adding Vision to
    Your Biped"), *Adding Vision to Your Biped*. Using this method, you can easily
    get a picture of what your biped is seeing, and it should be something like the
    following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的双足机器人可以从远程计算机获取信息并响应摇杆按键，但你可能希望能够查看双足机器人通过其摄像头所看到的内容。这可以通过配置摄像头、vncserver，以及你在[第6章](ch06.html
    "第6章：为双足机器人添加视觉")中使用的能力——*为双足机器人添加视觉*——来轻松实现。使用这种方法，你可以轻松获取双足机器人所看到的画面，应该类似于以下内容：
- en: '![Adding the capability to see remotely](img/B04591_07_15.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![添加远程查看功能](img/B04591_07_15.jpg)'
- en: Now you can both see where your robot is going and control it via a joystick.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你既可以看到你的机器人正在前进的方向，也可以通过操纵杆来控制它。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That's it, but really it is only the beginning. Your robot has some basic motions
    and some basic control capability, but now you should also have the knowledge
    and skills to take your biped robot much further. You can teach it how to dance,
    follow gestures, and almost anything that you can imagine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，但实际上这只是开始。你的机器人已经具备了一些基本的运动和控制能力，但现在你应该也掌握了知识和技能，让你的双足机器人走得更远。你可以教它跳舞、跟随手势，几乎任何你能想象的事情。
