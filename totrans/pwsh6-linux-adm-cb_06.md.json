["```\n$Processes = Get-Process\n```", "```\nPS> Get-ChildItem env:\nPS> Get-Item env:\n```", "```\nPS> Get-ChildItem Env:/PATH | Select-Object value | Format-Table -Wrap\n```", "```\nPS> $env:PATH = $env:PATH + ':/opt/mssql-tools/bin'\nPS /root> sqlcmd\n```", "```\nPS> sqlcmd \n\nsqlcmd : The term 'sqlcmd' is not recognized as the name of a cmdlet, function, script file, or operable program.\n```", "```\nPS> [environment]::GetEnvironmentVariable(\"PATH\")\n```", "```\nclass Person {\n    [string]$Name\n    [Int32]$Age\n    [int32]$Salary\n\n    Person () {}\n\n    Person ([string]$Name, [int32]$Age) {\n        $this.Name = $Name\n        $this.Age = $Age\n    }\n\n    [int32] sal ([int32]$Salary, [int32]$Comm) {\n        return $Salary * $Comm\n    }\n}\n```", "```\nPS> [Person]::New\n```", "```\nPS> [Person]::New('Prashanth',34) \n```", "```\nPS> $Person = New-Object -TypeName Person -ArgumentList 'Prashanth', 34\n```", "```\nPS> $Person | Get-Member \n\nPS> $Person | Select-Object Name, Age, Salary | Format-Table -AutoSize \n\nPS> $Person.sal(200,2)\n```", "```\nPS> $MailClient = New-Object -TypeName System.Net.Mail.SmtpClient 'packtpub.smtpdomain.com'\nPS> $Message = New-Object System.Net.Mail.MailMessage('pjayaram@packtpub.com', 'pjayaram@packtpub.com', 'Subject', 'Welcome to Packt!')\nPS> $MailClient.Send($Message)\n```", "```\nPS> $User = 'Prashanth' \nPS> $Password = 'Y94b^E$85CBLU%at' \nPS> $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force \nPS> $Credentials = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $SecurePassword \nPS> $Credentials | Get-Member\n```", "```\nPS /home/PacktPub> New-Object -TypeName PSCustomObject\n```", "```\nPS> $MyCustomObject = [pscustomobject]@{ \n  Name = 'Prashanth Jayaram'\n  Title = 'PowerShell'\n  Publisher = 'Packt' \n}\n\nPS> $MyCustomObject\n```", "```\nPS> $MyCustomObject | Add-Member -MemberType NoteProperty -Name 'Location' -Value 'United States'\nPS> $MyCustomObject\n```", "```\nPS> $MyCustomObject.PsObject.Properties.Remove('Location')\n\nPS> # To see if the property is still available, run:\nPS> $MyCustomObject.Location\n```", "```\nPS> $MyCustomObject.Name \nPrashanth Jayaram\n\nPS> $MyCustomObject.Title \nPowerShell\n\nPS> $MyCustomObject.Publication \nPackt\n```", "```\nPS> $Process = (Get-Process | Select-Object Name, Id, WS, StartTime)[4]\n```", "```\nPS> $CustomProcess = New-Object -TypeName PSObject -Property @{\n  ProcessName = $Process.Name\n  ProcessId = $Process.Id\n  WorkingSet = $Process.WS\n  StartedAt = $Process.StartTime\n}\nPS> $CustomProcess\n```", "```\nPS> $CustomProcess = [ordered]@{\n  ProcessName = $Process.Name\n  ProcessId = $Process.Id\n  WorkingSet = $Process.WS\n  StartedAt = $Process.StartTime\n} \nPS> New-Object -TypeName PSObject -Property $CustomProcess\n```", "```\nPS> $CustomProcess = [ordered]@{\n  ProcessName = $Process.Name\n  ProcessId = $Process.Id\n  WorkingSet = $Process.WS\n  RunningMins = [math]::Floor(((Get-Date) - $Process.StartTime).TotalMinutes)\n}\nPS> New-Object -TypeName PsObject -Property $CustomProcess\n```", "```\nPS> Get-ChildItem -Path . | select Name, Length, @{Name='Age'; Expression={[math]::Round(((Get-Date) - $_.LastWriteTime).TotalDays)}}\n```", "```\nPS> Get-ChildItem -Path . | select Name, Length, Age\n```", "```\nPS> $FilesWithAge = Get-ChildItem . | Select-Object Name, Length, LastWriteTime\n```", "```\nPS> $FilesWithAge | Add-Member -MemberType ScriptProperty -Name Age -Value { [math]::Round(((Get-Date) - $this.LastWriteTime).TotalDays) }\n```", "```\nPS> $ComputerName = hostname\nPS> $FilesWithAge | Add-Member -MemberType NoteProperty -Name ComputerName -Value $ComputerName\n```", "```\nPS> $FilesWithAge | Add-Member -MemberType AliasProperty -Name Modified -Value LastWriteTime\n```", "```\nPS> $FilesWithAge | Format-Table -AutoSize\n```", "```\nPS> Remove-Variable FilesWithAge\nPS> Get-ChildItem .\n```", "```\nPS> Get-ChildItem | Get-Member\n```", "```\nPS> $ComputerName = hostname \n\nPS> Update-TypeData -TypeName System.IO.FileInfo -MemberType NoteProperty -MemberName ComputerName -Value $ComputerName\n\nPS> Update-TypeData -TypeName System.IO.FileInfo -MemberType AliasProperty -MemberName Modified -Value LastWriteTime\n\nPS> Update-TypeData -TypeName System.IO.FileInfo -MemberType ScriptProperty -MemberName Age -Value { [math]::Round(((Get-Date) - $this.LastWriteTime).TotalDays) } \n```", "```\nPS> Get-ChildItem . | Select-Object Name, Length, ComputerName, Age, Modified | Format-Table -AutoSize\n```", "```\nPS> Get-ChildItem ./cities/ | Select-Object Name, Length, ComputerName, Age, Modified | Format-Table -AutoSize\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Types>\n <Type>\n   <Name>System.IO.FileInfo</Name>\n   <Members>\n     <AliasProperty>\n       <Name>Modified</Name>\n       <ReferencedMemberName>LastWriteTime</ReferencedMemberName>\n     </AliasProperty>\n     <ScriptProperty>\n       <Name>Age</Name>\n       <GetScriptBlock>[math]::Round(((Get-Date) - $this.LastWriteTime).TotalDays)</GetScriptBlock>\n     </ScriptProperty>\n     <NoteProperty>\n       <Name>ItemType</Name>\n       <Value>File</Value>\n     </NoteProperty>\n   </Members>\n </Type>\n</Types>\n```", "```\nPS> Update-TypeData -PrependPath ~/Documents/code/github/powershell/chapter-06/CustomTypes.ps1xml\n```", "```\nGet-ChildItem . -File | Select-Object Name, Length, Age, Modified\n```", "```\nTypes\n-- Type\n---- Members\n------ [The custom properties and methods you define]\n```", "```\n<AliasProperty>\n   <Name>Modified</Name>\n   <ReferencedMemberName>LastWriteTime</ReferencedMemberName>\n</AliasProperty>\n```", "```\n<GetScriptBlock>\n [math]::Round(((Get-Date) - $this.LastWriteTime).TotalDays)\n</GetScriptBlock>\n```", "```\n<GetScriptBlock>\n { [math]::Round(((Get-Date) - $this.LastWriteTime).TotalDays) }\n</GetScriptBlock>\n```", "```\nPS> Get-ChildItem | Get-Member | Select-Object TypeName -Unique\n```", "```\nPS> $TypeData = Get-ChildItem | Get-Member | Select-Object -ExpandProperty TypeName -Unique -Last 1\n```", "```\nPS> Get-TypeData -TypeName $TypeData | Select-Object -ExpandProperty Members\n```", "```\nPS> Remove-TypeData -TypeName $TypeData\n```"]