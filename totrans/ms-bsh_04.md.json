["```\nzarrelli:~$ ls\n\n```", "```\nzarrelli:~$ touch *\n\n```", "```\nzarrelli:~$ ls *\n*\n\n```", "```\nzarrelli:~$ ls\n*\n\n```", "```\nzarrelli:~$ touch 1 2 3\n\n```", "```\nzarrelli:~$ ls *\n* 1 2 3\n\n```", "```\nzarrelli:~$ ls \"*\"\n*\n\n```", "```\n#!/bin/bash\n# I am a comment at the beginning of a line'\nls # I am a comment after a command\n#I am a comment preceeding a command and so it is not interpreted ps\n\n```", "```\nzarrelli:~$ ./comment.sh\n* 1 2 3 comment.sh\n\n```", "```\necho # I am a comment but you cannot see me\necho \\# I am a comment but you can see me\n\n```", "```\nzarrelli:~$ ./comment.sh\n* 1 2 3 comment.sh\n# I am a comment but you can see me\nzarrelli:~$\n\n```", "```\nzarrelli:~$ echo TEST > test.txt ; cat test.txt\nTEST\n\n```", "```\nzarrelli:~$ echo TEST > test_1.txt ; ls test_1.txt ; find -name test_1.txt \n-exec rm {} \n\\; ; ls\ntest_1.txt\n* 1 2 3 comment.sh test.txt\n\n```", "```\n#!/bin/sh\nclear\necho \"Please choose between these options:\"\necho \"ls for listing files\"\necho \"procs for listing processes\"\necho \"x for exit\"\nread input\ncase \"$input\" in\n \"ls\" | \"LS\" )\n   echo \"Listing files:\"\n   ls\n   exit 0\n   ;;\n\"procs\" | \"PROCS\")\n   echo \"Listing processes:\"\n   ps\n   exit 0\n   ;;\n   \"x\" | \"X\" )\n   echo \"exiting\"\n   exit 0\n   ;;\n   * )\n   # Default catchall option\n   echo \"exiting\"\n   exit 0\n   ;;\n esac\n\n```", "```\nPlease choose between these options:\nls for listing files\nprocs for listing processes\nx for exit\nls\nListing files:\n* 1 2 3 comment.sh menu.sh test.txt\n\n```", "```\nPlease choose between these options:\nls for listing files\nprocs for listing processes\nx for exit\naahadie\nexiting\n\n```", "```\nzarrelli:~$ comment.sh\nbash: comment.sh: command not found\nzarrelli:~$ . comment.sh\n* 1 2 3 comment.sh menu.sh test.txt # I am a comment but you can see me\n\n```", "```\nzarrelli:~$ cat external-data\nvar1=\"Hello\"\nvar2=\"Nice to see you\"\n\n```", "```\n#!/bin/bash\necho \"We now source external-data file and get the variables content\"\necho \". external-data\"\n . external-data\necho \"Now that we sourced the external file, we have access to variables content\"\necho \"The content of var1 is: ${var1}\"\necho \"The content of var2 is: ${var2}\"\n\n```", "```\nzarrelli:~$ ./sourcing.sh We now source external-data file and get the variables content\n. external-data\nNow that we sourced the external file, we have access to variables content\nThe content of var1 is: Hello\nThe content of var2 is: Nice to see you\n\n```", "```\n#!/bin/bash\necho \"Hello from the inner script, can you give me a number?\"\nread number\ncase \"$number\" in\n        [[:digit:]] )\n          echo \"$number is a digit!\"\n          exit 0\n          ;;\n          * )\n          # Default catchall option\n          echo \"Sorry, $number is not a digit\"\n          exit 1\n          ;;\nesac\n\n```", "```\nzarrelli:~$ ./external-script.sh\nHello from the inner script, can you give me a number?\n1\n1 is a digit!\nzarrelli:~$ ./external-script.sh\nHello from the inner script, can you give me a number?\nd\nSorry, d is not a digit\n\n```", "```\n#!/bin/bash\necho \"Hello from the inner script, can you give me an integer between 0 and 9?\"\nread number\ncase \"$number\" in\n        [[:digit:]] )\n          return 0\n          ;;\n          * )\n          # Default catchall option\n          return 1\n          ;;\nesac\n\n```", "```\n#!/bin/bash\necho \"We now source external-script-return.sh file and ask the customer for a digit between 0 and 9\"\necho \". external-script-return.sh\"\n. external-script-return.sh\nreturn=$?\nif [ \"$return\" -eq 0 ]\n        then\n        echo \"The value returned is a digit between 0 and 9, the exit code was $return\"\n        else\n        echo \"The value returned is not a digit between 0 and 9, the exit code was $return\"\nfi\n\n```", "```\nzarrelli:~$ ./sourcing-return.sh\n\n```", "```\n. external-script-return.sh\n Hello from the inner script, can you give me an integer between 0 and 9?\n6\nThe value returned is a digit between 0 and 9, the exit code was 0\nzarrelli:~$ ./sourcing-return.sh\n\n```", "```\n. external-script-return.sh\nHello from the inner script, can you give me an integer between 0 and 9?\n25\nThe value returned is not a digit between 0 and 9, the exit code was 1\nzarrelli:~$ ./sourcing-return.sh\n\n```", "```\n. external-script-return.sh\nHello from the inner script, can you give me an integer between 0 and 9?\nasry\nThe value returned is not a digit between 0 and 9, the exit code was 1\n\n```", "```\n#!/bin/bash\necho \"Hello from the inner script, can you give me an integer between 0 and 9?\"\nread number\ncase \"$number\" in\n        [[:digit:]] )\n          echo \"This is the integer the user gave us: $number\"\n          exit\n          ;;\n          * )\n          # Default catchall option\n          echo \"The user did not give us an integer between 0 and 9 but this: $number\"\n          exit\n          ;;\nesac\n\n```", "```\n#!/bin/bash\necho \"We now source external-script-return-whatever.sh file and ask the customer for a digit between 0 and 9\"\necho \". external-script-return-whatever.sh\"\nreturning=$(. external-script-return-whatever.sh)\necho \"The value of returning is: $returning\"\n\n```", "```\nzarrelli:~$ ./sourcing-return-whatever.sh\nWe now source external-script-return-whatever.sh file and ask the customer for a digit between 0 and 9\n. external-script-return-whatever.sh\n3\nThe value of returning is: Hello from the inner script, can you give me an integer between 0 and 9?\nThis is the integer the user gave us: 3\n\n```", "```\n>&2 echo \"Hello from the inner script, can you give me an integer between 0 and 9?\"\nread -s number\n\n```", "```\necho \"$returning\"\n\n```", "```\nzarrelli:~$ ./sourcing-return-whatever.sh\nWe now source external-script-return-whatever.sh file and ask the customer for a digit between 0 and 9\n. external-script-return-whatever.sh\nHello from the inner script, can you give me an integer between 0 and 9?\nThis is the integer the user gave us: 4\nzarrelli:~$ ./sourcing-return-whatever.sh\nWe now source external-script-return-whatever.sh file and ask the customer for a digit between 0 and 9\n. external-script-return-whatever.sh\nHello from the inner script, can you give me an integer between 0 and 9?\nThe user did not give us an integer between 0 and 9 but this: dirthe\n\n```", "```\n. file arg1 arg2 argn\n\n```", "```\nzarrelli:~$ x=$((5 + 10)) ; echo $x\n15\nzarrelli:~$ x=$((5 + 10, 6-1)) ; echo $x\n5\nzarrelli@moveaway:~$ x=$((y=25, 6-1)) ; echo \"The value of x is $x and the value of y is $y\"\nThe value of x is 5 and the value of y is 25\n\n```", "```\nzarrelli@moveaway:~$ for i in {,1}1 ; do echo $i ; done\n1\n11\nzarrelli@moveaway:~$ for i in {,1}2 ; do echo $i ; done\n2\n12\nzarrelli@moveaway:~$ for i in {,1,}2 ; do echo $i ; done\n2\n12\n2\nzarrelli@moveaway:~$ for i in {,1,,}2 ; do echo $i ; done\n2\n12\n2\n2\nzarrelli@moveaway:~$ for i in {,1,3,}2 ; do echo $i ; done\n2\n12\n32\n2\n\n```", "```\nzarrelli:~$ for i in {\"Hello \",\"Maybe hello \",\"Ok, I decided, hello \"}world ; do echo $i ; done\nHello world\nMaybe hello world\nOk, I decided, hello world\n\n```", "```\nzarrelli:~$ cat parm-sub.sh\n #!/bin/bash echo \"Hello, can you give me a string of characters?\"\nread my_string\nif [[ \"$my_string\" =~ ^[[:alpha:]]*$ ]]\n then\n echo \"Printing the variable \\$my_string as \\${my_string}: ${my_string}\" \"| No modifications\"\n echo \"Printing the variable \\$my_string as \\${my_string^}: ${my_string^}\" \"| The first char is uppercase\"\n echo \"Printing the variable \\$my_string as \\${my_string^^}: ${my_string^^}\" \"| All chars are uppercase\"\n echo \"Printing the variable \\$my_string as \\${my_string,}: ${my_string,}\" \"| The first char is lowercase\"\n echo \"Printing the variable \\$my_string as \\${my_string,,}: ${my_string,,}\" \"| All chars are lowercase\"\n else\n echo \"Please, input characters only\"\nfi\n\n```", "```\nzarrelli:~$ ./parm-sub.sh\nHello, can you give me a string of characters?\nsdoijweoi\nPrinting the variable $my_string as ${my_string}: sdoijweoi | No modifications\nPrinting the variable $my_string as ${my_string^}: Sdoijweoi | The first char is uppercase\nPrinting the variable $my_string as ${my_string^^}: SDOIJWEOI | All chars are uppercase\nPrinting the variable $my_string as ${my_string,}: sdoijweoi | The first char is lowercase\nPrinting the variable $my_string as ${my_string,,}: sdoijweoi | All chars are lowercase\n\n```", "```\nzarrelli:~$ ./parm-sub.sh\nHello, can you give me a string of characters?\nCSEPTKAS\nPrinting the variable $my_string as ${my_string}: CSEPTKAS | No modifications\nPrinting the variable $my_string as ${my_string^}: CSEPTKAS | The first char is uppercase\nPrinting the variable $my_string as ${my_string^^}: CSEPTKAS | All chars are uppercase\nPrinting the variable $my_string as ${my_string,}: cSEPTKAS | The first char is lowercase\nPrinting the variable $my_string as ${my_string,,}: cseptkas | All chars are lowercase\n\n```", "```\n#!/bin/bash\nx=32\ny=5\n: ${x?} ${y?} ${z?}\nAnd now let's execute it:\nzarrelli:~$ ./test-variable.sh\n./test-variable.sh: line 5: z: parameter null or not set\n\n```", "```\nzarrelli:~$ echo \"012345679\" > test.colon.2\nzarrelli:~$ ls -lah test.colon.2\n-rw-r--r-- 1 zarrelli zarrelli 10 Feb 19 14:18 test.colon.2\nzarrelli:~$ : > test.colon.2\nzarrelli:~$ ls -lah test.colon.2\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 19 14:18 test.colon.2\n\n```", "```\nzarrelli:~$ ls -lah test.colon.2 ; echo $?\n-rw-r--r-- 1 zarrelli zarrelli 10 Feb 19 14:22 test.colon.2\n0\n\n```", "```\nzarrelli:~$ ! ls -lah test.colon.2 ; echo $?\n-rw-r--r-- 1 zarrelli zarrelli 10 Feb 19 14:22 test.colon.2\n1\n\n```", "```\nzarrelli:~$ ls -lah [es]*\n-rw-r--r-- 1 zarrelli zarrelli 36 Feb 17 07:50 external-data\n-rwxr--r-- 1 zarrelli zarrelli 211 Feb 17 17:40 external-script-return.sh\n-rwxr--r-- 1 zarrelli zarrelli 373 Feb 18 11:58 external-script-return-whatever.sh\n-rwxr--r-- 1 zarrelli zarrelli 257 Feb 17 08:22 external-script.sh\n-rwxr--r-- 1 zarrelli zarrelli 391 Feb 17 17:37 sourcing-return.sh\n-rwxr--r-- 1 zarrelli zarrelli 235 Feb 19 10:40 sourcing-return-whatever.sh\n-rwxr--r-- 1 zarrelli zarrelli 284 Feb 17 07:53 sourcing.sh\n\n```", "```\nzarrelli@moveaway:~/Documents/My books/Mastering bash/Chapter 4/Scripts$ ls -lah [^es]*\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 16 08:35 *\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 16 08:35 1\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 16 08:35 2\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 16 08:35 3\n-rwxr--r-- 1 zarrelli zarrelli 249 Feb 16 13:24 comment.sh\n-rwxr-xr-x 1 zarrelli zarrelli 409 Feb 16 14:59 menu.sh\n-rwxr--r-- 1 zarrelli zarrelli 700 Feb 19 11:22 parm-sub.sh\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 19 14:16 test.colon\n-rw-r--r-- 1 zarrelli zarrelli 10 Feb 19 14:22 test.colon.2\n-rw-r--r-- 1 zarrelli zarrelli 5 Feb 16 14:07 test.txt\n-rwxr-xr-x 1 zarrelli zarrelli 42 Feb 19 14:14 test-variable.sh\n\n```", "```\nzarrelli:~$ mkdir test\nzarrelli:~$ cd test/\nzarrelli:~$ touch file\nzarrelli:~$ touch .another_file\nzarrelli:~$ ls -l *\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 19 15:08 file\n\n```", "```\nzarrelli:~$ ls -lah\ntotal 8.0K\ndrwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 19 15:08 .\ndrwxr-xr-x 3 zarrelli zarrelli 4.0K Feb 19 15:08 ..\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 19 15:08 .another_file\n-rw-r--r-- 1 zarrelli zarrelli 0 Feb 19 15:08 file\n\n```", "```\nls -l .*\n\n```", "```\nzarrelli:~$ for i in * ; do echo \"$i\" ; done\nfile\ntest2\n\n```", "```\nzarrelli:~$ for i in ** ; do echo \"$i\" ; done\nfile\ntest2\ntest2/file2\n\n```", "```\nzarrelli:~$ for i in **/ ; do echo \"$i\" ; done\ntest2/\n\n```", "```\n#!/bin/bash\nx=20\ny=30\nw=40\nz=50\nk=100\necho 'Usually you would write a control loop in the following way:'\necho 'if [[ $x -gt $y ]]'\necho '     then'\necho '       z=\"$w\"'\necho '       echo \"The value for z is: $z\"'\necho '     else'\necho '       z=\"$k\"'\necho ' echo \"The value for z is: $z\"'\necho 'fi'\nif [[ $x -gt $y ]]\n   then\n      z=\"$w\"\n      echo \"The value for z is: $z\"\n   else\n      z=\"$k\"\n      echo \"The value for z is: $z\"\nfi\necho 'But you can also use the C-style trinary operator to achieve the same result:'\necho '(( z = x>y?w:k ))'\necho 'echo \"The value for z is: $z\"'\n(( z = x>y?w:k ))\necho \"The value for z is: $z\"\n\n```", "```\nzarrelli:~$ ./c-style.sh\n\n```", "```\nif [[ $x -gt $y ]]\n   then\n      z=\"$w\"\n      echo \"The value for z is: \"$z\"\"\n   else\n      z=\"$k\"\n      echo \"The value for z is: \"$z\"\"\nfi\nThe value for z is: 100\n\n```", "```\n(( z = x>y?w:k ))\necho \"The value for z is: $z\"\nThe value for z is: 100\n\n```", "```\n#!/bin/bash\nfor ((i = 0 ; i < 3 ; i++)); do\n  echo \"Counting loop number $i\"\ndone\n\n```", "```\nzarrelli:~$ ./c-style-counter.sh\nCounting loop number 0\nCounting loop number 1\nCounting loop number 2\n\n```", "```\nzarrelli:~$ x=10 ; echo $x\n10\n\n```", "```\nls | grep [[:digit:]]$\n1\n2\n3\ntest.colon.2\n\n```", "```\nzarrelli:~$ x=$'\\110\\145\\154\\154\\157' ; echo \"$x\"\nHello\n\n```", "```\n#!/bin/bash\ncounter=0\necho \"First trying the \\$*\"\nfor i in \"$*\"\ndo\n(( counter+=1 ))\necho $counter\ndone\ncounter=0\necho \"And now \\$@\"\nfor i in \"$@\"\ndo\n(( counter+=1 ))\necho $counter\ndone\n\n```", "```\nzarrelli$ ./positional-single.sh 1 2 3 4 5\nFirst trying the $*\n1\nAnd now $@\n1\n2\n3\n4\n5\n\n```", "```\nzarrelli:~$ ls 2&>1 ; echo $?\n0\n\n```", "```\n#!/bin/bash\necho $$\n\n```", "```\nzarrelli:~$ ./pid.sh\n4772\n\n```", "```\n#!/bin/bash\nx=10\necho \"The initial value of x is: $x\"\n(x=$(( x*x )) ; echo \"The value of x is: $x\")\necho \"But outside the subshell the value of x is untouched: $x\" \n\n```", "```\nzarrelli:~$ ./subshell.sh The initial value of x is: 10 The value of x is: 100 But outside the subshell the value of x is untouched: 10\n\n```", "```\narray= (element1 element2 elementn) {a,b,c}\n\n```", "```\nzarrelli:~$ ls *.{[[:digit:]],txt} test.colon.2 test.txt\n\n```", "```\nzarrelli:~$ wc -l {test.txt,test.colon.2,*-data} 1 test.txt 1 test.colon.2 2 external-data 4 total \n\n```", "```\nzarrelli:~$ echo {1,2,3} 1 2 3\n\n```", "```\n{element1..elementn}\n\n```", "```\nzarrelli:~$ for i in {0..5} ; do echo $i ; done 0 1 2 3 4 5\n\n```", "```\nzarrelli:~$ for i in {1..3} ; do for k in {a..c} ; do echo $i,$k ; done ; done 1,a 1,b 1,c 2,a 2,b 2,c 3,a 3,b 3,c { command1 ; command2 ; commandn ;}\n\n```", "```\n#!/bin/bash\nx=10\necho \"The initial value of x is: $x\"\nmultiplier () {\nlocal y=$(( x*x ))\necho \"The value of y in the function is: $y\"\n}\necho \"We now trigger the function...\"\nmultiplier\necho \"The value of y right after the function execution is: $y\"\n{ z=$(( x*x )) ;\necho \"The value of z in the function is: $z\" ; }\necho \"The value of z right after the function execution is: $z\"\n\n```", "```\nzarrelli:~$ ./curly.sh The initial value of x is: 10 We now trigger the function... The value of y in the function is: 100 The value of y right after the function execution is: The value of z in the function is: 100 The value of z right after the function execution is: 100\n\n```", "```\nzarrelli:~$ ls *.{[[:digit:]],txt} | xargs -i echo \"Found file: {}\" Found file: test.colon.2 Found file: test.txt\n\n```", "```\nfind . -name *.txt -exec cp {} copy.txt \\; zarrelli:~$ ls -lah test.txt copy.txt -rw-r--r-- 1 zarrelli zarrelli 5 Feb 21 16:12 copy.txt -rw-r--r-- 1 zarrelli zarrelli 5 Feb 16 14:07 test.txt\n\n```", "```\nfruit=(apple banana lemon) ; echo ${fruit[1]} banana\n\n```", "```\nzarrelli:~$ ls | grep ^[c-m] comment.sh copy.txt c-style-counter.sh c-style.sh curly.sh external-data external-script-return.sh external-script-return-whatever.sh external-script.sh menu.sh\n\n```", "```\n#!/bin/bash\ncat << DELIMITER\nThis is a string\nfollowed by another\ndate $(date +%Y.%m.%d)\nuntil the \nDELIMITER\n\n```", "```\nzarrelli:~$ ./here-date.sh This is a string followed by another date 2017.02.21 until the \n\n```", "```\n#!/bin/bash\ncat << DELIMITER\nThis is a string\n        followed by an indented one\n            with an indented date: $(date +%Y.%m.%d)\nuntil the\nDELIMITER\n\n```", "```\nzarrelli:~$ ./here-date-indented.sh This is a string\n followed by an indented one with an indented date: 2017.02.21 until the \n\n```", "```\nzarrelli:~$ ./here-date-indented.sh This is a string followed by an indented one with an indented date: 2017.02.21 until the \n\n```", "```\n#!/bin/bash\ntoday=$(date +%Y.%m.%d)\ncat <<< $today\n\n```", "```\nzarrelli:~$ ./here-date-string.sh 2017.02.21\n\n```", "```\nzarrelli:~$ echo \"barnaby went to the bar to see the barnum musical\" > text.file \n\n```", "```\ngrep -o '\\<bar\\>' text.file bar\n\n```", "```\nzarrelli:~$ grep -o bar text.file bar bar bar\n\n```", "```\nzarrelli:~$ ls -lah | wc -l 35\n\n```", "```\nzarrelli:~$ echo \"123\" > override.txt zarrelli:~$ cat override.txt 123 zarrelli:~$ echo \"456\" > override.txt zarrelli:~$ cat override.txt 456\n\n```", "```\nzarrelli:~$ set -o noclobber\n\n```", "```\nzarrelli:~$ echo \"789\" > override.txt bash: override.txt: cannot overwrite existing file\n\n```", "```\nzarrelli:~$ cat override.txt 456\n\n```", "```\nzarrelli:~$ echo \"789\" >| override.txt zarrelli:~/$ cat override.txt 789\n\n```", "```\nzarrelli:~$ set +o noclobber\n\n```", "```\nzarrelli:~$ echo \"Hello, see you in 5 seconds\" ; sleep 5 Hello, see you in 5 seconds\n\n```", "```\nzarrelli:~$ echo \"Hello, see you in 5 seconds\" ; sleep 5 & Hello, see you in 5 seconds [1] 8163\n\n```", "```\nzarrelli:~$ echo \"Hello, see you in 50 seconds\" ; sleep 50 Hello, see you in 50 seconds ^Z [6]+ Stopped sleep 50 zarrelli:~$ fg sleep 50\n\n```", "```\nps -ax\n\n```", "```\nzarrelli:~$ cat - 1 1 2 2 3 3 ^C \n\n```", "```\nzarrelli:~$ tar cvzf - $(ls text.file) > zipped.tgz zarrelli:~$ tar -tf zipped.tgz text.file\n\n```", "```\nzarrelli:~$ mkdir -p dir1/dir2 zarrelli:~$ cd dir1/ zarrelli:~$ cd dir2/ zarrelli:~$ cd - zarrelli:~$ pwd dir1\n\n```", "```\nzarrelli:~$ ls -a . .. dir2 zarrelli:~$ ls --all . .. dir2\n\n```", "```\nzarrelli:~$ x=10 ; echo $x 10\n\n```", "```\nzarrelli:~$ x=10 ; y=10 ; if [[ \"$x\" = \"$y\" ]] ; then echo \"Success\" ; fi Success \n\n```", "```\nzarrelli:~$ echo \"Hello\" | grep 'Hel\\+o' Hello\n\n```", "```\nzarrelli:~$ x=10 ; y=${x+20} ; echo $y 20\n\n```", "```\nzarrelli:~$ x=\"highland\" ; y=${x%land} ; echo $y high\n\n```", "```\nzarrelli:~$ echo ~ /home/zarrelli zarrelli:~$ ls /home/zarrelli/ Desktop Documents Downloads Music Pictures Public Templates test.file test.sh tmp Videos zarrelli:~$ ls ~/tmp/ setting.sh zarrelli:~$ cd ~ zarrelli:~$ pwd /home/zarrelli\n\n```", "```\nzarrelli:~$ mkdir this is a directory with spaces in the name total 44K drwxr-xr-x 11 zarrelli zarrelli 4.0K Feb 23 09:50 . drwxr-xr-x 3 zarrelli zarrelli 4.0K Feb 23 09:44 .. drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 a drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 directory drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 in drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 is drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 name drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 spaces drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 the drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 this drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 with\n\n```", "```\nzarrelli:~$ mkdir this\\ is\\ a\\ directory\\ with\\ spaces\\ in\\ the\\ name zarrelli:~$ ls -lah total 48K drwxr-xr-x 12 zarrelli zarrelli 4.0K Feb 23 09:52 . drwxr-xr-x 3 zarrelli zarrelli 4.0K Feb 23 09:44 .. drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 a drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 directory drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 in drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 is drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 name drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 spaces drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 the drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 this drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:52 this is a directory with spaces in the name drwxr-xr-x 2 zarrelli zarrelli 4.0K Feb 23 09:48 with\n\n```", "```\nzarrelli@moveaway:~$ var=\"This can become a bit too long \\ > so better to go on a new line and print on the next\" ;\\ > echo \\ > $var This can become a bit too long so better to go on a new line and print on the next\n\n```", "```\nzarrelli:~$ x=10 ; echo \"$x\" 10\n\n```", "```\nzarrelli:~$ x=10 ; echo \"\\$x\" $x\n\n```", "```\nzarrelli:~$ x=10 ; echo '$x' $x\n\n```"]