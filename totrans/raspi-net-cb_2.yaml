- en: Chapter 2. Administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Executing commands with privileges (`sudo`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding the size of a filesystem (`raspi-config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring memory usage (`raspi-config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring remote access (`raspi-config`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining remote access by using SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining remote access by using PuTTY
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the login password (`passwd`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a user (`adduser`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving a user sudo privileges (`id` and `usermod`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes in this chapter are for the basic administration of the Raspberry
    Pi. This chapter starts with a recipe that shows how you can use the `sudo` command
    to execute other commands that require superuser privileges. The next three recipes
    use the `raspi-config` command-line tool to complete the following three initial
    configuration tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Expanding the filesystem to use all the space on an SD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the memory allocation for better performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling remote access to the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following two recipes show how the Raspberry Pi can be accessed remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `SSH` command-line client from Linux or Mac OS X computers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the PuTTY client from Windows computers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final three recipes in this chapter, which are as follows, are for user
    administration:'
  prefs: []
  type: TYPE_NORMAL
- en: How to change the password of the default user whose username is `pi`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a new user login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add a user to the privileged `sudo` user group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've completed this chapter, you will be able to administer the Raspberry
    Pi remotely via a network connection without a keyboard or display.
  prefs: []
  type: TYPE_NORMAL
- en: Executing commands with privileges (sudo)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how you can execute privileged commands using `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: The default Raspberry Pi user (`pi`) is an ordinary user and not a super-user.
    The `sudo` command is used to temporarily grant an ordinary user the privileges
    of a super-user.
  prefs: []
  type: TYPE_NORMAL
- en: After you've completed this recipe, you will be able to execute commands with
    super-user privileges by using `sudo` as a command prefix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are required for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You need an initial setup or a basic networking setup for the Raspberry Pi that
    has been powered on. You also need to be logged in as the user whose username
    is `pi` (refer to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*, for instructions on how to boot and log
    in and the recipes given later in this chapter for instructions on how to log
    in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote access
    (PuTTY)* recipes that are given later in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe executes a privileged command, first without and then with privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, try executing a privileged command, such as `reboot`, as an ordinary
    user, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, try executing the command again with super-user privileges, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sudo` command is for nonprivileged users who wish to temporarily grant
    another command super-user privileges (as a super-user would do something).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the privileged command, `reboot`, was first executed without
    super-user privileges by the ordinary user `pi`. The `reboot` command then reported
    an error by stating that `must be superuser`. An ordinary user cannot execute
    the `reboot` command.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `sudo` command was used like a super-user prefix to temporarily
    give the ordinary user, `pi`, super-user privileges. Then, the system was rebooted
    as requested.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are a few more commands that can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Switch user (sudo –u)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `sudo` command is really a *switch user* and *do something* command.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `sudo` command temporarily switches to the `root user`, who's
    the superuser. When a command is run as the `root` user, the command has all the
    privileges that the `root` user enjoys.
  prefs: []
  type: TYPE_NORMAL
- en: When executed with the `–u` command-line argument, `sudo` can be used to impersonate
    any user on the system, temporarily giving one command all the privileges of another
    user.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on creating additional users for the Raspberry Pi, refer
    to the *Adding a user* recipe at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using the `sudo` command to switch to another user that
    already exists on your Raspberry Pi, the user whose username is `nobody`. The
    user `nobody` has no privileges (that is its purpose – to have no privileges;
    it is a security feature), but we can use `nobody` to show how the `sudo` command
    works. This example creates and deletes two files – a file that belongs to the
    user `pi` and another that belongs to the user `nobody`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that there is now one file in the temporary directory and this file is
    owned by the user `pi` (the third column of the `ls –l` command''s output contains
    the file''s owner):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are now two files in the `/tmp` directory. One file, `i-belong-to-pi`,
    belongs to the user `pi` and the other file, `i-belong-to-nobody`, belongs to
    the user `nobody`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try to remove the two files that we created from the temporary
    directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing the `i-belong-to-pi` file worked. There is only file left in the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Removing the `i-belong-to-nobody` file does not work because the file is owned
    by the user `nobody`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to delete the `i-belong-nobody` file, you will first have to switch
    to the user `nobody` using the `sudo` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using `sudo –u` `nobody` worked! There are no files left in the `/tmp` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Raspbian Linux distribution's default configuration requires no password
    when using `sudo` for users in the `sudo` group.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using another Linux distribution, you may be required to enter a
    password when using `sudo`. If you are required to enter a password, use the same
    password as the one that you used when logging in to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The sudo group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have added additional users to the Raspberry Pi, you will also need to
    add them to the `sudo` user group if you wish those users to use privileged commands,
    such as `shutdown` and `reboot`, or change files in the configuration directory
    (`/etc`). Users that are not in the `sudo` group will not be able to execute privileged
    commands or change privileged files.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes at the end of this chapter have more information about user administration,
    including how to add users to the `sudo` user group.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**sudo, sudoedit – execute a command as another user** ([http://manpages.debian.net/cgi-bin/man.cgi?query=sudo](http://manpages.debian.net/cgi-bin/man.cgi?query=sudo)):
    The switch user command temporarily executes a command as another user. The Debian
    manual page for the `sudo` command describes all of its features and options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**touch – change file timestamps** ([http://manpages.debian.net/cgi-bin/man.cgi?query=touch](http://manpages.debian.net/cgi-bin/man.cgi?query=touch)):
    The `touch` command will create a file if it does not exist. The Debian man page
    for the touch command describes all of its features and options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding the size of a filesystem (raspi-config)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how you can use the `raspi-config` command to expand the Raspberry
    Pi's filesystem so that it uses all the available disk space on an SD card.
  prefs: []
  type: TYPE_NORMAL
- en: The operating system images for the Raspberry Pi are compacted and compressed
    to use as little disk space as possible. This reduction in the size of an operating
    system image helps improve the speed of downloading the image. When these reduced
    images are copied to an SD card, it is very likely that the SD card will still
    have space left over. Larger SD Cards (greater than 8 GB) will be mostly empty!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you used NOOBS to install the Raspberry Pi, you do not need to expand the
    filesystem. NOOBS has already expanded the filesystem for you.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the `raspi-config` command-line utility to expand the filesystem
    of the operating system image so that it includes all the available space on an
    SD card.
  prefs: []
  type: TYPE_NORMAL
- en: After you've completed this recipe, the filesystem that your Raspberry Pi uses
    for storage will be expanded to include all the available space on the SD card.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are required for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You need an initial setup or a basic networking setup for the Raspberry Pi that
    has been powered on. You also need to be logged in as the user `pi` (refer to
    the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"), *Installation
    and Setup*, for instructions on how to boot and log in and the recipes later in
    this chapter for instructions on how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote access
    (PuTTY)* recipes provided later in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The SD card used in the examples for this recipe has a storage of 32 GB.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to expand the Raspberry Pi''s filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `df` command to see how much disk space is available, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the **Size** (column 2) of the root filesystem (`/dev/root`) is only
    `3.9 G`, even though the actual disk size is much larger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `raspi-config` command to expand the size of the root file system,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `raspi-config` main menu is then displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key to select the first menu item, `Expand Filesystem`. Use
    the up and down arrow keys to change the selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a brief moment, the screen displays this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key; you will return to the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *Tab* key to select **Finish** and then press the *Enter* key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key to select **Yes**. The Raspberry Pi will reboot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After logging back in, use the `df –h` command to check out the available disk
    space on the root filesystem (`/`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe begins by displaying the amount of disk space that is available
    on the Raspberry Pi. The `df` command displays how much disk space is free (df
    is short for disk free). The `–h` command-line argument asks `df` to display the
    result in a human-readable format. The output of the command shows that the `/dev/root`
    filesystem has a total of 3.9 GB and 84% of the filesystem is in use, leaving
    only 596 MB available.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `raspi-config` command is run to expand the root filesystem. The first
    command in the `raspi-config` command's main menu, `Expand Filesystem`, is selected
    to resize the Raspberry Pi's root partition (`/dev/root`).
  prefs: []
  type: TYPE_NORMAL
- en: After resizing the root filesystem, the Raspberry Pi needs to be rebooted. Once
    rebooted, the size of the root filesystem is checked once again. The amount of
    available disk space is now 24 GB!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best time to expand the root filesystem is right after the installation
    – before you install new software or require additional disk space.
  prefs: []
  type: TYPE_NORMAL
- en: The `raspi-config` utility is used to configure many basic components of the
    Raspberry Pi. Examples of its use can be found in the recipes named *Configuring
    remote access* and *Configuring memory usage*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Raspi-config` ([https://www.raspberrypi.org/documentation/configuration/raspi-config.md](https://www.raspberrypi.org/documentation/configuration/raspi-config.md)):
    A reference page for the `raspi-config` command can be found in the Raspberry
    Pi Foundations documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RPi raspi-config` ([http://elinux.org/RPi_raspi-config](http://elinux.org/RPi_raspi-config)):
    This documentation at the Embedded Linux website shows how the `raspi-config`
    script helps you configure the Raspberry Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring memory usage (raspi-config)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how the `raspi-config` utility is used to change the Raspberry
    Pi's memory split to maximize the amount of memory available for the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: This book features solutions that do not require a display. Many of these solutions
    will benefit from having the additional memory that the display is using.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you are using the Raspberry Pi as a desktop computer, you may want
    to maximize the amount of video memory. Internet content displayed in web browsers,
    such as images and video, as well as computer games will benefit from a high video
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: After you have completed this recipe, you can choose your own balance between
    memory dedicated for the video core and the memory available for the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ingredients required for this recipe are an initial setup or a basic networking
    setup for the Raspberry Pi that has been powered on. You also need to be logged
    in as the user `pi` (refer to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup*, for instructions on how to boot and log
    in).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to configure the Raspberry Pi''s memory usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `raspi-config` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `raspi-config` main menu is then displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the up and down arrow keys to change the selection. Then, press the *Enter*
    key to select **Advanced Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Advanced Options** menu is displayed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select **Memory Split** from the menu to change the memory split.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are prompted to enter an amount of memory for the GPU:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter `16` and press the *Enter* key to give the Raspberry Pi's GPU the minimum
    amount of memory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are returned to the main menu of `raspi-config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Finish** from the main menu and reboot the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the selections available from the **Advanced Options** menu of the `raspi-config`
    configuration tool is to specify the memory split between the **Graphics Processing
    Unit** (**GPU**) used for video processing and the CPU used for general processing.
    In this recipe, you entered 16 MB, the minimum value for the GPU.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Raspberry Pi shares 256 MB of its total memory (1 GB for the Raspberry
    Pi 2) between its CPU and GPU. The memory can be split in the following five different
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 16 MB for the GPU and 1008 MB for the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 32 MB for the GPU and 992 MB for the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64 MB for the GPU and 960 MB for the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 128 MB for the GPU and 896 MB for the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB for the GPU and 768 MB for the CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For many of the recipes in this book, the GPU only needs a minimum of 16 MB
    of memory. These recipes don't require a display and will benefit if the maximum
    amount of memory is assigned to the CPU (1008 MB). This will improve the CPU's
    overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: For solutions that require a display, more memory should be allocated to the
    GPU. Multimedia solutions, such as OMXPlayer or XBMC distributions, will benefit
    from having a maximum of 256 MB of Video Core memory.
  prefs: []
  type: TYPE_NORMAL
- en: Even when the maximum amount of memory is assigned to the GPU, the Raspberry
    Pi 2 will still have 768 MB of memory left for use by the CPU. To experiment with
    the recipes in this book, 768 MB is more than enough memory. However, for higher
    performance or long-term use, the recipes that do not require a display will benefit
    from having the full 1008 MB available for the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `raspi-config` utility is used to configure many basic components of the
    Raspberry Pi. Examples of its use can be found in the recipes in this chapter
    that are named *Expanding the size of the filesystem* and *Configuring remote
    access*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring remote access (raspi-config)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use the `raspi-config` utility to configure remote
    access to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: For most network applications, a graphical user interface (a GUI desktop) is
    not needed. The memory and processing power spent creating a GUI desktop can be
    invested in a better in the network application. The majority of the recipes in
    this book are written so that they can be used remotely without a graphical user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have installed a Raspbian Linux distribution (as recommended in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup*),
    secure remote access via the SSH protocol is already enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Raspbian Linux has remote access via SSH enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: After you've completed this recipe, your Raspberry Pi will be securely accessible
    on your local network from another PC using the **Secure Shell** (**SSH**) protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are needed for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: An initial setup or a basic networking setup for the Raspberry Pi that has been
    powered on. You also need to be logged in as the user `pi` (refer to the recipes
    in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"), *Installation and
    Setup*, for instructions on how to boot and log in and the recipes later in this
    chapter for instructions on how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote access
    (PuTTY)* recipes that are given in the later parts of this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to configure remote access to the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `raspi-config` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `raspi-config` main menu is then displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the up and down arrow keys to change the selection and then press the *Enter*
    key to select **Advanced Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Advanced Options** menu is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select **SSH** from the **Advanced Options** menu to enable remote access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screen appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the *Tab* key to select the option and then press the *Enter* key or choose
    **Enable**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a brief moment, the SSH server is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on **Ok** to return to the main menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish** from the main menu and then click on **Yes** to reboot the
    Raspberry Pi and enable remote access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the selections available in the `raspi-config` main menu is to enable
    the Open SSH Secure Shell server. The Open SSH server enables secure access to
    the Raspberry Pi over a network connection. Once enabled, the SSH server will
    be started automatically each time the Raspberry Pi boots.
  prefs: []
  type: TYPE_NORMAL
- en: To disable remote access, disable the Open SSH server. The server can be disabled
    from the `raspi-config` utility using the same steps in this recipe, except that
    **Disable** should be selected when the utility asks, "Would you like the SSH
    server enabled or disabled?".
  prefs: []
  type: TYPE_NORMAL
- en: The Secure Shell server runs on the Raspberry Pi. A client program – such as
    SSH on Mac OS X or Linux, or PuTTY on Windows – can be used to connect to the
    Secure Shell server. The client program is a virtual terminal that, once connected,
    permits a user to interact remotely with the Raspberry Pi as though it is connected
    directly with a keyboard and display. The virtual terminal cannot run X Windows
    directly. Therefore, you will need another tool to view the Raspberry Pi's GUI
    desktop remotely.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This `raspi-config` utility is used to configure many of the basic components
    of the Raspberry Pi. More examples of its use can be found in the recipes named
    *Expanding the size of the filesystem* and *Configuring memory usage*.
  prefs: []
  type: TYPE_NORMAL
- en: The *Remote access (SSH)* and *Remote access (PuTTY)* recipes in this chapter
    have instructions on how to connect remotely from Mac OS X, Linux, and Windows
    using an SSH client.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. Advanced Networking"), *Advanced Networking*,
    the *Connecting to the desktop remotely* recipe shows how to access the Raspberry
    Pi's GUI desktop remotely.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Secure Shell** ([http://en.wikipedia.org/wiki/Secure_Shell](http://en.wikipedia.org/wiki/Secure_Shell)):
    This Wikipedia article about the Secure Shell shows how it is a network protocol
    for secure data communication. The article highlights the history of the protocol,
    explains its architecture and vulnerabilities, and contains links to the current
    implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenSSH** ([http://www.openssh.org/](http://www.openssh.org/)): Open SSH
    was a SSH1 and SSH2 implementation that was originally designed as a part of the
    FreeBSD project. It is now a part of most Linux distributions, including Raspbian
    Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining remote access by using SSH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to access the Raspberry Pi remotely using the `ssh` command.
  prefs: []
  type: TYPE_NORMAL
- en: After the Raspberry Pi has been configured to automatically start the Secure
    Shell server when it boots (see the previous recipe named *Configuring remote
    access* in this chapter), it is possible to access the Raspberry Pi remotely using
    the Secure Shell client, `ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ssh` command is built into the current version of the Mac OS X operating
    systems and is also available for most Linux distributions. For Microsoft Windows
    operating systems, another utility will be required (refer to the recipe named
    *Remote Access (PuTTY)*.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe starts by logging directly into the Raspberry Pi using an attached
    keyboard and display to discover the IP address of the Raspberry Pi. Once the
    IP address is known, the recipe shows how to log in to the Raspberry Pi from another
    computer using SSH.
  prefs: []
  type: TYPE_NORMAL
- en: After you've completed this recipe, you will no longer be required to log in
    directly to the Raspberry Pi with an attached keyboard. You will also not need
    a display. You will be able to remotely administer your Raspberry Pi from another
    PC on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are needed for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You need an initial setup for the Raspberry Pi that has been powered on. You
    also need to be logged in as the user `pi` (refer to the recipes in [Chapter 1](ch01.html
    "Chapter 1. Installation and Setup"), *Installation and Setup*, for instructions
    on how to boot and log in).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PC that runs on Mac OS X, Linux, or other Unix-based operating system is also
    required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to remotely access the Raspberry Pi using the `ssh`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Max OS X or Linux PC, use the `ssh` command to log in as the user `pi`
    on the host named `raspberrypi.local`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since this is the first time you have connected to your Raspberry Pi remotely
    using a secure shell, the Raspberry Pi shares its security fingerprint for future
    identification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When prompted, answer `yes` to `Are you sure you want to continue connecting
    (yes/no)?`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After entering `yes`, you are told that your Raspberry Pi''s security fingerprint
    is being permanently added to the list of known hosts. Then, you are prompted
    for a password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the password for the user `pi` on the Raspberry Pi (if you have not yet
    changed it, the default password is `raspberry`). You will then be shown a logon
    message and a command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type `exit` to log out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe starts by using the `ssh` command to log in to the Raspberry Pi
    using its default username, `pi`, and its default hostname, `raspberrypi.local`.
    The default password is `raspberry`.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the login parameter to the `ssh` command is `user@hostname`. The
    example shows `pi@raspberrypi.local` because we want to log in to the `raspberrypi`
    host on the local network as the user `pi`.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is the first time that we are logging in to the Raspberry Pi from
    the golden-macbook computer, the golden-macbook computer says that it cannot establish
    the authenticity of the Raspberry Pi. So, the Raspberry Pi shares its secure digital
    fingerprint (`f3:de:d3:58:eb:66:1e:23:2c:6e:cf:c9:12:0c:e3:e2`). Once we agree
    to accepting a connection from this new computer, the golden-macbook computer
    says that it will store the fingerprint permanently.
  prefs: []
  type: TYPE_NORMAL
- en: Digital fingerprints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Secure digital fingerprints are one part of the SSH protocol. Each computer
    has its own digital fingerprints that are as unique to the computer as human fingerprints
    are to humans. The golden-macbook computer stores the Raspberry Pi's fingerprints
    for reference to prevent *spoofing* that can be done by another computer. The
    other computer should not have the same digital fingerprints as those in the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: After the Raspberry Pi's fingerprint has been accepted and stored, we are prompted
    for the password of the user `pi` at the `raspberrypi.local` host. After entering
    the password, we are presented with the Raspberry Pi's login message, the date
    of the last login, and a command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, there is nothing more left to do. So, we will enter `exit`
    at the command prompt, and the remote connection to the Raspberry Pi is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Hostname
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is not always possible to log in using the default hostname, which is `raspberrypi.local`.
    Sometimes, you will need to discover the IP address of the Raspberry Pi before
    you can log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have connected the Raspberry Pi to a keyboard and display, you can use
    the `hostname` command to discover the IP address of the Raspberry Pi. The `–I`
    option asks the command to display all the IP addresses for the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After the IP address is discovered (192.168.2.12), it can be used to log in
    remotely to the Raspberry Pi, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at some other requirements for a remote login.
  prefs: []
  type: TYPE_NORMAL
- en: Finding out the IP address of the Raspberry Pi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before the remote login is possible, the network address of the Raspberry Pi
    must be known. The `hostname` command can be used to directly discover the IP
    address from the Raspberry Pi via an attached keyboard and display. It is also
    possible to discover the IP address from the configuration interface of the local
    network gateway or DSL router. The following screenshot shows how the IP Address
    of a device named `raspberrypi` is displayed in a DSL router''s configuration
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding out the IP address of the Raspberry Pi](img/B04745_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The IP address of a device, such as the Raspberry Pi, is a mapping between the
    permanent hardware address of the device's network interface (`b8:27:eb:29:aa:5a`)
    and its current address in the topology of the local network (192.168.1.79). In
    the previous example, the network ID that was assigned is `79` for the device
    named `raspberrypi` in the 192.168.1 subnet of the local network.
  prefs: []
  type: TYPE_NORMAL
- en: Most home and small office networks attempt to assign network IDs semi-permanently
    to the same device (the hardware address). So, once discovered, it is not likely
    that the Raspberry Pi's IP address will change.
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing the secure fingerprint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SSH, the Secure Shell utility, uses encryption to ensure that communication
    between the Raspberry Pi and other computers on the network remains secure. On
    the first launch, the Secure Shell server creates a unique security key that,
    like a fingerprint, can be used to uniquely identify that particular Secure Shell
    server. The first time a Secure Shell client connects to a Secure Shell server
    at a specific IP address, the client prompts the user to verify that the server
    has the correct fingerprint. Then, it stores the key to identify the server during
    the next connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Secure Shell client will prevent logins to a machine with the same IP address
    but a different security key. This helps prevent a hacker from spoofing a device
    by stealing its IP address. The following example shows what happens when SSH
    suspects a hacker. In this case, it is only a new installation of the Raspberry
    Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Each new install creates new digital fingerprints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each new installation of a computer generates new digital fingerprints. Therefore,
    the Raspberry Pi's digital fingerprints will change. The digital fingerprint that
    the golden-macbook just received no longer matches the one that it has stored.
    Hence, access to the Raspberry Pi is denied. The same safety check that prevents
    a hacker from completing a successful man-in-the-middle attack also prevents a
    login to a newly reinstalled Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'The old, invalid digital fingerprint of the Raspberry Pi is still stored on
    the golden-macbook and can be removed using the `–R` option of the `ssh-keygen`
    command, as shown in the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Once the old invalid digital fingerprint has been removed, `ssh` will no longer
    block access to that IP address. The next login using `ssh` works the same as
    the first time. The Raspberry Pi will share its new digital fingerprint, and it
    will be stored to prevent future *attacks*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**hostname – show or set the system''s host name** ([http://manpages.debian.net/cgi-bin/man.cgi?query=hostname](http://manpages.debian.net/cgi-bin/man.cgi?query=hostname)):
    The `hostname` command can be used to display the IP address of the Raspberry
    Pi. The Debian manual page for hostname describes all the command''s options and
    also has notes on how to change the hostname of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ssh – OpenSSH SSH client (remote login program)** ([http://manpages.debian.net/cgi-bin/man.cgi?query=ssh](http://manpages.debian.net/cgi-bin/man.cgi?query=ssh)):
    The Debian manual page for SSH gives details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ssh-keygen – key generation, management and conversion** ([http://manpages.debian.net/cgi-bin/man.cgi?query=ssh-keygen](http://manpages.debian.net/cgi-bin/man.cgi?query=ssh-keygen)):
    By using the `–R` option, `ssh-keygen` can be used to remove old digital fingerprints
    from the `known_hosts` file. The Debian manual page for `ssh-keygen` has information
    about the command and how it supports the secure shell (SSH) protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining remote access by using PuTTY
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to create a secure connection to the Raspberry Pi by using
    PuTTY, one of the most commonly used Windows Secure Shell clients.
  prefs: []
  type: TYPE_NORMAL
- en: PuTTY, the Windows Secure Shell client, is not built into the Windows operating
    system. However, it is a commonly used third-party utility for secure communication.
    Before you can begin this recipe, you will need to download PuTTY from the Internet
    and install it on the Windows PC (the download URL is in the next section).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are also versions of PuTTY that are available for Mac OS X and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've completed this recipe, you will be able to remotely administer the
    Raspberry Pi from a Windows PC.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You will require an initial setup or a basic networking setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user `pi` (refer
    to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*, for instructions on how to boot and log in).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to have a Windows PC with PuTTY installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find a download link for PuTTY with instructions for its installation
    at [http://www.chiark.greenend.org.uk/~sgtatham/putty/](http://www.chiark.greenend.org.uk/~sgtatham/putty/)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to access the Raspberry Pi remotely by using the
    PuTTY command:'
  prefs: []
  type: TYPE_NORMAL
- en: Start PuTTY on the Windows PC by double-clicking on `PuTTY.exe`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When PuTTY is started, the PuTTY Configuration screen is displayed, as shown
    in the following screenshot:![How to do it...](img/B04745_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the screenshot, the configuration window for PuTTY is being configured to
    connect to a Raspberry Pi whose IP address is 192.168.1.79.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the Raspberry Pi's IP address in the **Host Name** field and click on
    **Open** to connect to the Raspberry Pi.![How to do it...](img/B04745_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you connect remotely to the Raspberry Pi, PuTTY will display
    a warning message that says that the Raspberry Pi's digital fingerprint (or the
    host key) has not been registered with PuTTY because this is the first time that
    PuTTY has seen the digital fingerprint of the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Yes** button to accept the Raspberry Pi's digital fingerprint
    and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you've accepted the security warning, you will be asked for a username
    and password. Enter `pi` as the username and then enter the password that you
    configured during installation for the user whose username is `pi` (`raspberry`
    is the default password). The following screenshot shows a successful login using
    PuTTY:![How to do it...](img/B04745_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `exit` to log out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe begins by starting the PuTTY client.
  prefs: []
  type: TYPE_NORMAL
- en: The IP address of the Raspberry Pi is entered into the **Host Name** field and
    the **Open** button is clicked to establish a secure connection to the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Before the connection is established, PuTTY displays a **Security Alert** dialog
    box warning that states that the Raspberry Pi's digital fingerprint (or host key)
    has not been registered and there is *no guarantee that the server is the computer
    you think it is*. The alert is normal and expected for the first connection to
    a new computer. Clicking on **Yes** clears the alert and adds the Raspberry Pi
    to PuTTY's list of known hosts.
  prefs: []
  type: TYPE_NORMAL
- en: After the security warning has been cleared, the PuTTY Terminal window is opened
    and we are prompted for the username (`login as:`) and password to use when logging
    in to the Raspberry Pi. After entering the username and password, a welcome message
    and the time of last login are displayed, which is followed by a command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: There's nothing more that needs to be done in this recipe. Therefore, we will
    use the `exit` command to close the connection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever the Raspberry Pi is reinstalled, it will create a new digital fingerprint.
    This new fingerprint will not be recognized by PuTTY the first time it is used.
    When PuTTY tries to connect to the newly reinstalled Raspberry Pi, PuTTY will
    display a warning that states that there has been a **POTENTIAL SECURITY BREACH**
    (see the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: If you have just reinstalled your Raspberry Pi, do not panic. The Raspberry
    Pi's new digital fingerprint has not yet been recognized by PuTTY. Simply click
    on the **Yes** button to accept the new fingerprint.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you didn''t just reinstall your Raspberry Pi and this warning pops up, you
    may very well have a security breach. Therefore, check your network connections
    and ensure that there is no possibility of a man-in-the-middle attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B04745_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PuTTY** ([http://www.chiark.greenend.org.uk/~sgtatham/putty/](http://www.chiark.greenend.org.uk/~sgtatham/putty/)):
    PuTTY is a free SSH client for Windows. It is also a telnet client and an xterm
    emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Man-in-the-middle attack** ([https://en.wikipedia.org/wiki/Man-in-the-middle_attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)):
    Wikipedia has more information about the man-in-the-middle attack, where the attacker
    secretly relays and possibly alters the communication between two parties who
    believe that they are directly communicating with each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the login password (passwd)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to change the login password.
  prefs: []
  type: TYPE_NORMAL
- en: Once remote access to the Raspberry Pi has been enabled, anyone on the local
    network who knows the correct username and password will be able to log in remotely.
    To prevent unauthorized access to the Raspberry Pi, the default installation password
    should be changed immediately after the installation is complete.
  prefs: []
  type: TYPE_NORMAL
- en: The `raspi-config` utility can be used to change the login password. However,
    this recipe uses the `passwd` command. The `passwd` command is a standard GNU
    utility that is available with most Linux distributions and can generally be used
    even when `raspi-config` is not available.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the login password frequently will inhibit unauthorized access to the
    Raspberry Pi. You should use this recipe on a regular basis to protect access
    to your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to change your login password.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are required for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You will require an initial setup or a basic networking setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user `pi` (refer
    to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*, for instructions for how to boot and log in and the
    previous recipes in this chapter for instructions for how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote access
    (PuTTY)* recipes).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to change the login password:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `passwd` command to change the password for the user `pi`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter the (current) Unix password, which is the password that was used during
    the login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The passwords will not be displayed when they are entered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the new password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the new password a second time for verification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command responds with `passwd: password updated correctly`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The login password has been changed successfully!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `passwd` command first prompts for the current login password to ensure
    that the user who's attempting to change the password is really authorized to
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: The password is not displayed as it is typed to protect the password from being
    overseen. If the current password is not entered correctly, the user will be asked
    to retype the password.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has been authorized, the command prompts for a new Unix password.
    Again, the new password is not displayed. The command prompts you to retype the
    new Unix password to ensure that the password was entered correctly. If the two
    password entries differ, you will be asked to type them again.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the new password has been entered correctly, you are notified with a
    message that states this: `password updated successfully`. Changing the login
    password on a regular basis will help prevent unauthorized access to the Raspberry
    Pi.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**passwd - change user password** ([http://manpages.debian.net/cgi-bin/man.cgi?query=passwd](http://manpages.debian.net/cgi-bin/man.cgi?query=passwd)):
    The Debian manual page for `passwd` has details about the command and its use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a user (useradd)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to add a new user login to your Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Creating separate logins for different users (or for different purposes) helps
    improve the security of the Raspberry Pi and organize the use of the Raspberry
    Pi's filesystem by giving each user a home directory in which they can organize
    their files.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to add a new user to the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are required for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need an initial setup or a basic networking setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user `pi` (refer
    to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*, to learn how to boot and log in and the previous recipes
    in this chapter to understand how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote access
    (PuTTY)* recipes).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a new user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `ls` to display the users who already have home directories, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `adduser` command to add the user whose username is `golden`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `adduser` command prompts for a new Unix password, but it does not display
    it as it is being typed. Therefore, it asks you to retype the new UNIX password
    so that the hidden password can be verified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the password is entered, you are prompted for the new user's full name,
    room number, work phone, and other information. None of these entries is mandatory.
    All of them can be left blank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user information for the new user has been completely entered, the
    command asks `Is the information correct? [Y/n]`. Type *Y* and then press the
    *Enter* key to add the new user to the Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use `ls` to show the new user''s home directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, log out and log back in as the new user!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, the current users' home directories are listed. There is only one user
    home directory in the list, namely the home directory of the user whose username
    is `pi`.
  prefs: []
  type: TYPE_NORMAL
- en: The new user, `golden`, is added to the system. The new user is given a password
    and user information. When all the new user information is entered, the information
    is accepted and considered to be correct and the new user with `golden` as the
    username is created.
  prefs: []
  type: TYPE_NORMAL
- en: After the new user is added, the users' home directories are listed again. This
    time, there are two user home directories listed, namely `golden` and `pi`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can log out and log back in as `golden`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**useradd - create a new user or update default new user information**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '([http://manpages.debian.net/cgi-bin/man.cgi?query=useradd](http://manpages.debian.net/cgi-bin/man.cgi?query=useradd)):
    The Debian manual page for `useradd` lists in detail the features and options
    of the `useradd` command as well as provides background information about how
    users and groups are managed on the Raspbian Linux distribution.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Giving a user sudo privileges (id and usermod)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to add a user to the privileged `sudo` group.
  prefs: []
  type: TYPE_NORMAL
- en: When users are created, they are given an ordinary set of user privileges by
    default. The user can log in to the Raspberry Pi, create and delete files in their
    own user directory, and execute any command that does not require super-user privileges.
    If you'd like a new user to execute special commands such as `shutdown`, `reboot`,
    and `raspi-config`, you'll need to add the user to the `sudo` user group.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you'll be able to give an ordinary user super-user
    privileges by adding the user to the `sudo` user group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following ingredients are used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: You will require an initial setup or a basic networking setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user `pi` (refer
    to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and Setup"),
    *Installation and Setup*, to learn how to boot and log in and the previous recipes
    in this chapter to understand how to log in remotely)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely by using SSH or PuTTY (refer to the *Remote access (SSH)* and *Remote
    access (PuTTY)* recipes).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a user to the `sudo` group:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `id` command to see the groups to which the user whose username is
    `golden` currently belongs, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use the `usermod –a -G` command to add the user whose username is `golden`
    to the `sudo` user group, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `id` command to validate that the user has indeed been added to the
    `sudo` group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the user whose username is `golden` is a member of the `27`(`sudo`) group
    and can execute commands and modify files that require super-user privileges!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, the `id` command lists the groups for which the uses – chose username
    is `golden` – is currently a member.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the `usermod` command is used to add (`-a`) the `sudo` group (`-G sudo`)
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `id` command is used once again to see which groups `golden` is
    a member of.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the user whose username is `golden` can execute commands that require super-user
    privileges by using the `sudo` command as a prefix. The first recipe in this chapter,
    *Executing command with privileges*, has more information on the `sudo` command
    and its use.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**id - print real and effective user and group IDs** ([http://manpages.debian.net/cgi-bin/man.cgi?query=id](http://manpages.debian.net/cgi-bin/man.cgi?query=id)):
    The Debian manual page for `id` lists the command options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**usermod - change user password** ([http://manpages.debian.net/cgi-bin/man.cgi?query=usermod](http://manpages.debian.net/cgi-bin/man.cgi?query=usermod)):
    The Debian manual page for `usermod` has details about this command and its use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
