- en: Automating Apache Virtual Hosts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化 Apache 虚拟主机
- en: Now that we have seen a little of the **stream editor** (**sed**), we can put
    this knowledge into practice. In [Chapter 8](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml),
    *Introducing the Stream Editor*, we familiarized ourselves with some of the capabilities
    of `sed`; however, this represented just a small amount of the power enclosed
    in the editor. In this chapter, we are going to exercise `sed` a little more and
    expose ourselves to some practical uses of the tool, especially when using our
    bash scripts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了一些 **流编辑器**（**sed**）的内容，可以将这些知识付诸实践。在[第8章](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml)，*介绍流编辑器*，我们熟悉了`sed`的一些功能；然而，这只是编辑器所包含功能的一小部分。在本章中，我们将进一步练习`sed`，并接触一些工具的实际用途，尤其是在使用
    bash 脚本时。
- en: In this journey, we will use `sed` to help us automate the creation of Apache
    name-based Virtual Hosts. The Apache hosts are practical users of the `sed` that
    we demonstrated but, more importantly, we will use `sed` to search for selected
    lines in the main configuration. We will then uncomment those lines and save them
    as a template. Having created the template, we will create new configurations
    from it. The concept that we demonstrate with Apache can be applied in many different
    situations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次旅程中，我们将使用`sed`帮助我们自动化创建基于名称的 Apache 虚拟主机。Apache 主机是我们展示过的`sed`的实际应用，但更重要的是，我们将使用`sed`在主配置文件中搜索选定的行。然后，我们会取消注释这些行并将其保存为模板。创建好模板后，我们将基于它创建新的配置文件。我们在
    Apache 上展示的概念可以应用于许多不同的情况。
- en: 'We will find that using `sed` in our shell scripts will allow us to easily
    extract template data from the main configuration and adjust to the needs of the
    virtual host. In this way, we will be able to extend the knowledge of both `sed`
    and shell scripting. In this chapter, we are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发现，在 shell 脚本中使用`sed`将使我们能够轻松地从主配置中提取模板数据，并根据虚拟主机的需求进行调整。通过这种方式，我们将能够扩展对`sed`和
    shell 脚本的理解。本章中，我们将涵盖以下主题：
- en: Apache name-based Virtual Hosts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于名称的 Apache 虚拟主机
- en: Automating virtual host creation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化虚拟主机创建
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下内容：
- en: CentOS 7.x machine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 7.x 机器
- en: Apache 2.4.x web server installed
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Apache 2.4.x web 服务器
- en: 'You can install Apache as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下步骤安装 Apache：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then you can start the web server:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以启动 web 服务器：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can ensure that the service is already running by checking the status as
    follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令检查服务的状态，确保它已经在运行：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09)'
- en: Apache name-based Virtual Hosts
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于名称的 Apache 虚拟主机
- en: For this demonstration, we will be working with the `httpd.conf` file from an
    Apache 2.4 HTTPD server taken from a CentOS 7.x host. To be perfectly honest,
    we are far more interested in the configuration file, as Red Hat or CentOS supply
    it, than the actual configuration changes that we will make. The file will be
    available for download from the code bundle of the chapter. Our purpose is to
    learn how we can extract data from the system-supplied file and create a template
    from it. We can apply this to Apache configuration files or any other text data
    file. It is the methodology we are looking at, not the actual result.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次演示中，我们将使用来自 CentOS 7.x 主机的 Apache 2.4 HTTPD 服务器中的 `httpd.conf` 文件。坦率地说，我们更关心的是配置文件本身，因为它是由
    Red Hat 或 CentOS 提供的，而不是我们将做的实际配置更改。该文件可以从本章的代码包中下载。我们的目的是学习如何从系统提供的文件中提取数据并创建一个模板。我们可以将这种方法应用于
    Apache 配置文件或任何其他文本数据文件。我们关注的是方法论，而不是实际的结果。
- en: 'To have some understanding of what we are trying to do, we must first look
    at the `/etc/httpd/conf/httpd.conf` file, that is, CentOS, Red Hat Enterprise
    Linux, or Scientific Linux. The following screenshot shows the virtual host section
    of the file that we are interested in:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解我们要做的事情，我们必须首先查看 `/etc/httpd/conf/httpd.conf` 文件，这在 CentOS、Red Hat Enterprise
    Linux 或 Scientific Linux 中是相同的。以下截图显示了我们感兴趣的文件中的虚拟主机部分：
- en: '![](img/f9a17c54-dd2e-4899-8560-4800a72360e6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9a17c54-dd2e-4899-8560-4800a72360e6.png)'
- en: Looking at these lines, we can see that they are commented and this is all a
    part of a monolithic `httpd.conf`. While creating virtual hosts, we normally prefer
    separate configurations for each of our potential virtual hosts. We need to be
    able to extract this data from the main file and at the same time uncomment it.
    We can then save this uncommented data as a template.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些行中可以看出，它们是注释的，而且这全部是一个单体的 `httpd.conf` 文件的一部分。在创建虚拟主机时，我们通常会为每个潜在的虚拟主机提供单独的配置。我们需要能够从主文件中提取这些数据，并同时去除注释。然后，我们可以将这些未注释的数据保存为模板。
- en: Using this template, we will create new configuration files that represent different
    named `hosts` that we need to have running on one instance of Apache. This enables
    us to host `sales.example.com` and `marketing.example.com` on a single server.
    Both sales and marketing will have their own configuration and websites, independent
    from each other. Additionally, it will also be very easy to add additional sites
    that we need with the template we create. It becomes the task of the main web
    server to read the incoming HTTP header requests to the server and direct them
    to the correct site based on the domain name used.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模板，我们将创建新的配置文件，代表我们需要在同一实例的 Apache 上运行的不同命名 `hosts`。这使得我们可以在单个服务器上托管 `sales.example.com`
    和 `marketing.example.com`。销售和营销将拥有各自独立的配置和网站，互不干扰。此外，使用我们创建的模板，还可以轻松地添加我们需要的额外站点。主
    Web 服务器的任务是读取传入的 HTTP 头请求，并根据使用的域名将其定向到正确的站点。
- en: Our first task then will be to extract the data present between the opening
    and closing `VirtualHost` tags, uncomment it, and save it to a template. This
    will only need to be done once and will not be a part of our main script to create
    the virtual hosts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务将是提取出 `VirtualHost` 开闭标签之间的内容，去除注释，并将其保存为模板。这只需要做一次，并且不会成为我们创建虚拟主机的主要脚本的一部分。
- en: Creating the virtual host template
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟主机模板
- en: As we are not going to test the virtual hosts we create, we will make a copy
    of the `httpd.conf` file and work with that locally in our `home` directory. This
    is good practice while developing the scripts so as not to impact the working
    configuration. The `httpd.conf` file that I am working with should be able to
    be downloaded with other script resources referred to in the script from the publisher.
    Alternatively, you can copy it from your CentOS host with Apache installed. Make
    sure that the `httpd.conf` file is copied to your `home` directory and that you
    are working in your `home` directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不会测试所创建的虚拟主机，我们将复制一份 `httpd.conf` 文件，并在 `home` 目录下本地处理它。在开发脚本时，这是一个良好的实践，以避免影响正在使用的配置。我正在使用的
    `httpd.conf` 文件应能够与脚本中的其他资源一起从发布者处下载。或者，你也可以从已安装 Apache 的 CentOS 主机复制它。确保将 `httpd.conf`
    文件复制到你的 `home` 目录，并在 `home` 目录中进行操作。
- en: First steps
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步骤
- en: The very first step in creating the template is to isolate the lines that we
    need. In our case, this will be the lines included in the sample virtual host
    definition that we saw in the earlier screenshot. This includes the opening and
    closing tag for the `VirtualHost` and everything in between. We can use line numbers
    for this; however, this will probably not be reliable, as we will need to assume
    that nothing has changed in the file for the line numbers to be consistent. For
    completeness, we will show this before moving onto a more reliable mechanism.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板的第一步是隔离出我们需要的行。在我们的例子中，这将是我们在前面截图中看到的示例虚拟主机定义中的行。这包括 `VirtualHost` 的开闭标签以及其中的所有内容。我们可以使用行号来实现这一点；然而，这可能不可靠，因为我们需要假设文件中没有任何更改，以保证行号一致。为了完整起见，我们将在介绍更可靠的机制之前先展示这一方法。
- en: 'First, we will remind ourselves of how we can print the whole file with `sed`.
    This is important, as in the next step we will filter the display and show only
    the lines that we want:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们会回顾一下如何使用 `sed` 打印整个文件。这很重要，因为在下一步中，我们将过滤显示，并只显示我们需要的行：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `-n` option is used to suppress the standard output and the `sed` command
    within the quotes is `p`; it is used to display the pattern match. As we have
    not filtered anything here, the matched pattern is the complete file. If we were
    to use line numbers to filter, we could add line numbers easily with `sed`, as
    shown in the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`-n` 选项用于抑制标准输出，引用中的 `sed` 命令是 `p`；它用于显示模式匹配。由于我们在这里没有过滤任何内容，因此匹配的模式就是整个文件。如果我们要使用行号进行过滤，可以通过
    `sed` 容易地添加行号，如以下命令所示：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From the following screenshot, we can see that, in this system, we need to
    work with just lines `355` to `361`; however, I do stress again that these numbers
    may vary from file to file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下截图中，我们可以看到，在此系统中，我们只需要处理`355`到`361`行；不过，我再次强调，这些行号可能会因文件不同而有所变化：
- en: '![](img/f785771f-f921-41b5-9f00-db71ec14fc7e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f785771f-f921-41b5-9f00-db71ec14fc7e.png)'
- en: Isolating lines
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离行
- en: 'To display these lines encased with the tags, we can add a number range to `sed`.
    This is easily achieved by adding those numbers to `sed`, as shown in the following
    command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示这些包含在标签中的行，我们可以为`sed`添加一个行范围。这可以通过将这些行号添加到`sed`命令中来轻松实现，如下所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the range of lines specified, we have been able to easily isolate the
    lines that we required, and the only lines that are now displayed are those of
    the virtual host definition. We can see this in the following screenshot, which
    displays both the command and the output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定的行范围后，我们能够轻松地隔离出所需的行，现在显示的仅是虚拟主机定义的相关行。我们可以在以下截图中看到这一点，截图展示了命令和输出结果：
- en: '![](img/bbce939a-ad7b-4f6c-9054-1d41b9bf7d01.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbce939a-ad7b-4f6c-9054-1d41b9bf7d01.png)'
- en: 'The issue that we face while hardcoding in the line numbers is that we lose
    flexibility. These line numbers relate to this file and maybe only this file.
    We will always need to check the correct line numbers in the file that relate
    to the file we are working with. This could be an issue if the lines are not conveniently
    at the end of the file and we have to scroll back to try and locate the correct
    line numbers. To overcome these issues, instead of using line numbers, we can
    implement a search for the opening and closing tags directly:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在硬编码行号时遇到的问题是，失去了灵活性。这些行号与此文件相关，可能仅与此文件相关。我们总是需要检查与我们正在处理的文件相关的正确行号。如果这些行不方便地位于文件的末尾，我们可能需要向后滚动才能找到正确的行号，这会是一个问题。为了解决这些问题，我们可以直接实现对开闭标签的搜索，而不是使用行号：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We are no longer using the starting number and ending number but the more reliable
    starting regular expression and closing regular expression. The opening regular
    expression looks for the line that begins with `#<VirtualHost`. The ending regular
    expression is searching for the closing tag. However, we need to protect the `/VirtualHost`
    with an escape character. By looking at the end of the regular expression, we
    see that it translates to lines that begin with `#\/VirtualHost`, with the escaped
    forward slash.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再使用起始和结束的行号，而是使用更可靠的起始正则表达式和结束正则表达式。起始正则表达式用于查找以`#<VirtualHost`开头的行。结束正则表达式则用来查找结束标签。然而，我们需要用转义字符保护`/VirtualHost`。通过查看正则表达式的结尾部分，我们可以看到它转换为查找以`#\/VirtualHost`开头的行，其中斜杠被转义。
- en: If you recall from [Chapter 8](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml), *Introducing
    the Stream Editor*, we specify the lines that begin with a specified character
    by using the carat (`^`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得在[第8章](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml)《流编辑器介绍》中提到的内容，我们通过使用插入符号（`^`）来指定以特定字符开头的行。
- en: 'By looking at the following screenshot, we can now isolate the required lines
    more reliably and without knowing the line numbers. This is more desirable across
    edited files, which will differ in their line numbering:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看以下截图，我们现在可以更加可靠地隔离所需的行，而无需知道行号。这对于编辑过的文件尤为重要，因为它们的行号会有所不同：
- en: '![](img/05b1cee3-913c-49fe-b421-b118d3f1c8a4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05b1cee3-913c-49fe-b421-b118d3f1c8a4.png)'
- en: sed script files
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sed脚本文件
- en: Isolating the lines was only the first step! We still have to uncomment the
    lines and then save the result as a template. Although we can write this as one
    single `sed` command string, we can already see that it will be awkwardly long
    and difficult to read and edit. Thankfully, the `sed` command does have the option
    to read its commands from an input file, often known as a script. We use the `-f`
    option with `sed` to specify the file we want to read as our control.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离行只是第一步！我们还需要取消注释这些行，然后将结果保存为模板。尽管我们可以将这些操作写成一个单独的`sed`命令，但我们可以看到这将会非常冗长，不易阅读和编辑。幸运的是，`sed`命令确实提供了从输入文件读取命令的选项，这个文件通常称为脚本。我们使用`-f`选项和`sed`一起，指定我们想要作为控制的文件。
- en: We have already seen that we can isolate the correct lines from the file. So,
    the first line of the script configures the lines that we will work with. We implement
    the brace brackets `{}` to define a code block immediately after the selected
    lines.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，能够从文件中提取出正确的行。因此，脚本的第一行配置了我们将要处理的行。我们使用大括号`{}`来定义一个代码块，这个代码块会立即在选定的行之后启动。
- en: A code block is one or more commands that we want to run on a given selection.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块是我们希望在给定选择上运行的一个或多个命令。
- en: 'In our case, the first command will be to remove the comment and the second
    command will be to write the pattern space to a new file. The `sed` script should
    look like the following example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，第一个命令将删除注释，第二个命令将把模式空间写入到新文件中。`sed`脚本应该如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can save this file as `$HOME/vh.sed`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此文件保存为`$HOME/vh.sed`。
- en: 'In the first line, we select the lines to work with, as we have previously
    seen, and then open the code block with the left brace. In line 2, we use the
    `substitute` command, `s`. This looks for lines that start with a comment or `#`.
    We replace the comment with an empty string. There are no characters or spaces
    between the middle and end forward slash. In English, we are uncommenting the
    line but, to the code, this is replacing the `#` with an empty string. The final
    line of code uses the write command, `w`, to save this to `template.txt`. To help
    you see this, we have included the following screenshot of the `vh.sed` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，我们选择了要处理的行，正如我们之前所见，然后用左大括号开启了代码块。在第二行中，我们使用了`substitute`命令`（s）`。它会查找以注释或`#`开头的行。我们将注释替换为空字符串。中间和末尾的斜杠之间没有任何字符或空格。在英语中，我们是在取消注释这行，但对代码而言，这只是将`#`替换为空字符串。代码的最后一行使用`w`命令将其保存到`template.txt`文件中。为了帮助你理解，我们附上了`vh.sed`文件的截图：
- en: '![](img/031db5bb-0f0c-4dd9-b5a7-af6db24f876c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/031db5bb-0f0c-4dd9-b5a7-af6db24f876c.png)'
- en: 'We can see all of our efforts come to fruition now by ensuring that we are
    in the same directory as the `httpd.conf` and `vh.sed` files that are executing
    the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到我们的所有努力取得了成果，确保我们处在与`httpd.conf`和`vh.sed`文件相同的目录中，并执行以下命令：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have now created the `template.txt` file within our working directory. This
    is the isolated uncommented text from the `httpd.conf` file. In simple terms,
    we have extracted the seven correct lines from over 350 lines of text in milliseconds,
    removed the comment, and saved the result as a new file. The `template.txt` file
    is displayed in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在工作目录中创建了`template.txt`文件。这是从`httpd.conf`文件中提取出的未注释文本。简而言之，我们在毫秒级的时间内从超过350行的文本中提取了七行正确的内容，去除了注释，并将结果保存为一个新文件。`template.txt`文件如下面的截图所示：
- en: '![](img/811b11f3-8a1a-4c29-a560-9ff3cde9a039.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/811b11f3-8a1a-4c29-a560-9ff3cde9a039.png)'
- en: Now we have a template file that we can begin to work with to create virtual
    host definitions. Even though it's Apache that we have been looking at, the same
    idea of uncommenting the text or removing the first character of selected lines
    can apply to many situations, so take this as an idea of what `sed` can do.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个模板文件，可以开始使用它来创建虚拟主机定义。即使我们看到的是Apache的配置，去除文本注释或删除选定行的第一个字符的相同思路也可以应用到许多情境中，因此请将其作为`sed`功能的一个例子。
- en: Automating virtual host creation
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化虚拟主机创建
- en: 'After having created the template, we can now use this to create virtual host
    configurations. In the simplest terms, we need to replace the `dummy-host.example.com`
    URL with the `sales.example.com` or `marketing.example.com` URL. Of course, we
    have to also create the `DocumentRoot` directory, the directory where the web
    pages will be, and also add some basic content. When we use a script to run through
    the process, nothing will be forgotten and the edits will be accurate every time.
    The basics of the script will be as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了模板后，我们现在可以利用它来创建虚拟主机配置。简单来说，我们需要将`dummy-host.example.com`的URL替换为`sales.example.com`或`marketing.example.com`的URL。当然，我们还必须创建`DocumentRoot`目录，也就是存放网页的目录，并且添加一些基本内容。当我们使用脚本执行整个过程时，什么都不会被遗漏，每次编辑都会很准确。脚本的基础如下：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can ignore the shebang in the first line; we should know this by now. We
    can start our explanation on line 2 of the script:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以忽略第一行的shebang；我们现在应该已经知道了。我们可以从脚本的第二行开始解释：
- en: '| **Line** | **Meaning** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **行号** | **含义** |'
- en: '| `WEBDIR=/www/docs/` | We initialize the `WEDIR` variable that we store in
    the path to the directory that will hold the different websites. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `WEBDIR=/www/docs/` | 我们初始化`WEBDIR`变量，并将其存储在指向存放不同网站的目录路径中。 |'
- en: '| `CONFDIR=/etc/httpd/conf.d` | We initialize the `CONFDIR` variable that we
    will use to store the newly created virtual host configuration file. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `CONFDIR=/etc/httpd/conf.d` | 我们初始化`CONFDIR`变量，用于存储新创建的虚拟主机配置文件。 |'
- en: '| `TEMPLATE=$HOME/template.txt` | We initialize the variable that we will use
    for the template. This should point to the path of our template. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `TEMPLATE=$HOME/template.txt` | 我们初始化将用于模板的变量。这应指向我们的模板文件路径。 |'
- en: '| `[ -d $CONFDIR ] &#124;&#124; mkdir -p "$CONFDIR"` | On a working `EL6` host,
    this directory will exist and is included in the main configuration. If we are
    running this as a pure test, then we can create a directory to prove that we can
    create the correct configuration within the target directory. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `[ -d $CONFDIR ] &#124;&#124; mkdir -p "$CONFDIR"` | 在一个工作的`EL6`主机上，该目录将存在并包含在主配置中。如果我们将其作为纯粹的测试运行，则可以创建一个目录来证明我们可以在目标目录中创建正确的配置。
    |'
- en: '| `sed s/dummy-host.example.com/$1/ $TEMPLATE >$CONFDIR/$1.conf` | The `sed`
    command works as an engine in the script, running the search and replace operations.
    Using the substitute command in `sed`, we search for the dummy text and replace
    it with the argument passed to the script. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `sed s/dummy-host.example.com/$1/ $TEMPLATE >$CONFDIR/$1.conf` | `sed`命令作为脚本中的引擎，执行搜索和替换操作。使用`sed`中的替换命令，我们搜索虚拟文本并将其替换为传递给脚本的参数。
    |'
- en: '| `mkdir -p $WEBDIR/$1` | Here, we create the correct subdirectory to house
    the websites for the new virtual host. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `mkdir -p $WEBDIR/$1` | 在这里，我们创建正确的子目录来存放新虚拟主机的网站。 |'
- en: '| `echo "New site for $1" > $WEBDIR/$1/index.html` | In this final step, we
    create a basic holding page for the website. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `echo "New site for $1" > $WEBDIR/$1/index.html` | 在这最后一步，我们为网站创建一个基础的占位页面。
    |'
- en: 'We can create this script as `$HOME/bin/vhost.sh`. Don''t forget to add the
    execute permission. This is illustrated in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将此脚本创建为`$HOME/bin/vhost.sh`。别忘了添加执行权限。这在以下截图中有示例：
- en: '![](img/4cd77cda-d45d-4a9b-8cf4-6ead4cf50293.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cd77cda-d45d-4a9b-8cf4-6ead4cf50293.png)'
- en: 'To create the sales virtual host and web page, we can run the script as shown
    in the following example. We will be running the script directly as the root user.
    Alternatively, you may choose to make use of the `sudo` command within the script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建销售虚拟主机和网页，我们可以按照以下示例运行脚本。我们将直接以 root 用户身份运行脚本。或者，您也可以选择在脚本中使用`sudo`命令：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now see how easily we can create virtual hosts using a well-crafted
    script. The configuration file for the virtual host will be created in the `/etc/httpd/conf.d/`
    directory and will be named `sales.example.com.conf`. The file will look similar
    to the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，使用精心设计的脚本，我们可以多么轻松地创建虚拟主机。虚拟主机的配置文件将创建在`/etc/httpd/conf.d/`目录中，文件名将为`sales.example.com.conf`。该文件将类似于以下截图所示：
- en: '![](img/7b748709-5d4d-49e9-aef9-bf0a8e98ef37.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b748709-5d4d-49e9-aef9-bf0a8e98ef37.png)'
- en: 'The website content must have been created in the `/www/docs/sales.example.com`
    directory. This will be a simple holding page that proves the point that we can
    do this from the script. Using the following command, we can list the content
    or the base directory that we use to house each site:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 网站内容必须已经创建在`/www/docs/sales.example.com`目录中。这将是一个简单的占位页面，证明我们可以通过脚本实现这一点。使用以下命令，我们可以列出网站内容或我们用来存放每个站点的基础目录：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-R` option allows for the recursive listing. We have used the `/www/docs`
    directory purely as this is set in the original virtual host definition that we
    extracted. You may prefer to use `/var/www` or something similar if working in
    a live environment rather than creating the new directory at the root of your
    filesystem. It would be a simple matter of editing the template that we created
    and that too could be done with `sed` at the time of template creation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`-R`选项允许递归列出。我们使用`/www/docs`目录纯粹是因为它在我们提取的原始虚拟主机定义中已设置。如果在实际环境中工作，您可能更愿意使用`/var/www`或类似目录，而不是在文件系统的根目录下创建新目录。编辑我们创建的模板非常简单，您也可以在模板创建时使用`sed`来实现。'
- en: Prompting for data during site creation
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网站时提示输入数据
- en: We can now use the script to create the virtual hosts and the content but we
    have not allowed for any customization other than the virtual hostname. Of course,
    this is important. After all, it is this virtual hostname that is used in the
    configuration itself as well as in setting the website directory and the configuration
    file name.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用脚本来创建虚拟主机和内容，但除了虚拟主机名之外，我们没有允许任何自定义。当然，这是很重要的。毕竟，正是这个虚拟主机名在配置文件中使用，并且在设置网站目录和配置文件名时也会用到。
- en: It is possible that we could allow additional options to be specified during
    the virtual host creation. We will use `sed` to insert the data as required. The
    `sed` command `i` is used to insert data before the selection and `a` to append
    after the selection.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有可能允许在虚拟主机创建过程中指定额外的选项。我们将使用 `sed` 根据需要插入数据。`sed` 命令中的 `i` 用于在选择前插入数据，`a`
    用于在选择后追加数据。
- en: For our example, we will add a host restriction to allow only the local network
    access to the website. We are more interested in inserting data into the file
    rather than what we are doing with the specific HTTP configuration file. Within
    the script, we will be adding `read` prompts and inserting a `Directory` block
    into the configuration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将添加一个主机限制，只允许本地网络访问该网站。我们更关心的是将数据插入文件，而不是我们对特定的 HTTP 配置文件所做的事情。在脚本中，我们将添加
    `read` 提示并在配置中插入一个 `Directory` 块。
- en: 'To try and explain what we are trying to do, we should see something similar
    to the following when executing the script. You can see from the text that we
    are creating this for the marketing site and adding in restrictions as to who
    can access the site:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试解释我们想要做的事情，在执行脚本时，我们应该看到类似以下内容的输出。您可以从文本中看到，我们正在为营销网站创建它，并添加了访问限制，指定谁可以访问该网站：
- en: '![](img/9f7eb3a4-1c5c-42b3-af9b-2428ce966267.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f7eb3a4-1c5c-42b3-af9b-2428ce966267.png)'
- en: As you can see, we can ask two questions but, if needed, more of them can be
    added to support customization, the idea being that the additional customization
    should be accurate and reliable in the same way as the script creation was. You
    may also choose to elaborate the questions with sample answers, so that the user
    knows how the network address should be formatted.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们可以问两个问题，但如果需要，可以添加更多问题以支持自定义，目的是确保额外的自定义像脚本创建一样准确可靠。您也可以选择通过示例答案来详细阐述问题，以便用户了解网络地址应该如何格式化。
- en: 'To aide script creation, we will copy the original `vhost.sh` to `vhost2.sh`.
    We can tidy up a few items in the script to allow for easier expansion and then
    add in the additional prompts. The new script will look similar to the following
    code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助脚本创建，我们将原始的 `vhost.sh` 复制到 `vhost2.sh`。我们可以整理脚本中的一些项目，以便更容易扩展，然后添加额外的提示。新脚本将类似于以下代码：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Please note that we are not running too many checks in the script. This is to
    keep our focus on the elements that we are adding rather than a robust script.
    In your own environment, once you have the script working the way you want, you
    may need to implement more checks to ensure script reliability.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在脚本中没有运行太多的检查。这是为了保持我们对所添加元素的关注，而不是一个健壮的脚本。在您自己的环境中，一旦脚本按预期运行，您可能需要实施更多的检查以确保脚本的可靠性。
- en: As you can see, we have a few more lines. The `WEBDIR` variable has been adjusted
    to contain the full path to the directory and, in a similar way, we have added
    a new variable `CONFFILE`, so that we can make a reference to the file directly.
    If the answer to the first prompt is `n` and the user wants no additional customization,
    the script will exit. If they answer anything other than `n` for no, the script
    will continue and prompt the network to grant access. We can then use `sed` to
    edit the existing configuration and insert the new `directory` block. This will
    default to deny access but allow access from the `localhost` and `NETWORK` variables.
    We refer to the `localhost` as `127.0.0.1` in the code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有更多的行。`WEBDIR` 变量已被调整为包含目录的完整路径，类似地，我们添加了一个新的变量 `CONFFILE`，以便直接引用该文件。如果第一个提示的答案是
    `n` 且用户不希望进行额外的自定义，脚本将退出。如果用户回答除了 `n` 以外的任何内容，脚本将继续并提示网络授权访问。然后，我们可以使用 `sed` 来编辑现有配置并插入新的
    `directory` 块。默认情况下，它会拒绝访问，但允许来自 `localhost` 和 `NETWORK` 变量的访问。在代码中，我们将 `localhost`
    称为 `127.0.0.1`。
- en: 'To simplify the code for better understanding, the pseudo-code will look like
    the following example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化代码并更好地理解，伪代码将如下所示：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here `SearchText` represents the line in the file before which we want to insert
    our text. Also, `NewText` represents the new line or lines that will be added
    before the `SearchText`. The `i` command directly following the `SearchText` dictates
    that we are inserting text. Using the `a` command to append will mean that the
    text we add will be added after the `SearchText`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `SearchText` 代表我们希望插入文本的文件行之前的行。同时，`NewText` 代表将插入到 `SearchText` 之前的新行或多行。紧随
    `SearchText` 之后的 `i` 命令表明我们正在插入文本。使用 `a` 命令追加文本则意味着我们添加的文本将会在 `SearchText` 后插入。
- en: 'We can see the resulting configuration file for `marketing.example.com`, as
    we have created it with the additional `Directory` block added in the following
    screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到 `marketing.example.com` 的结果配置文件，正如我们通过以下截图所创建的，并在其中添加了额外的 `Directory`
    块：
- en: '![](img/013fc804-cb48-41b4-b94f-853ac6c70234.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/013fc804-cb48-41b4-b94f-853ac6c70234.png)'
- en: We can see that we have added the new block above the closing `VirtualHost`
    tag. In the script, this is the `SearchText` that we use. The `Directory` block
    we add replaces the `NewText` in the pseudo-code. When we look at it, it appears
    more complex as we have embedded the new lines with `\n` and formatted the file
    for easier reading with the line continuation character `\`. Again, we have to
    emphasize that this edit is easy and accurate once the script is created.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们在关闭的 `VirtualHost` 标签上方添加了新的代码块。在脚本中，这就是我们使用的 `SearchText`。我们添加的 `Directory`
    块替换了伪代码中的 `NewText`。当我们查看它时，似乎更为复杂，因为我们已经用 `\n` 嵌入了新行，并使用行继续字符 `\` 格式化文件，以便更易于阅读。再次强调，一旦脚本创建完成，这个编辑是简单且精确的。
- en: 'For completeness, we include the following screenshot of the script `vhost2.sh`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们包括了以下 `vhost2.sh` 脚本的截图：
- en: '![](img/d9b10386-3776-4cb2-bd40-1b7c0cd64644.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9b10386-3776-4cb2-bd40-1b7c0cd64644.png)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can extend `sed` into some very cool scripts
    that have allowed us to extract data from files, uncomment selected lines, and
    write new configurations. Not stopping at that, we also saw how we could use `sed`
    with script that inserts new lines into existing files. I think that `sed` will
    very quickly become your friend and we have created some powerful scripts to support
    the learning experience.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何将 `sed` 扩展为一些非常酷的脚本，这些脚本让我们能够从文件中提取数据，取消注释选定的行并写入新的配置。不仅如此，我们还看到了如何使用
    `sed` 编写插入新行到现有文件的脚本。我认为，`sed` 很快会成为你的得力助手，我们已经创建了一些强大的脚本来支持学习体验。
- en: You may already know this but `sed` has a big brother, `awk`. In the next chapter,
    we are going to see how we can use `awk` to extract data from files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经知道，`sed` 有个更大的兄弟——`awk`。在下一章中，我们将看到如何使用 `awk` 从文件中提取数据。
- en: Questions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you print line number `50` from an Apache configuration file?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从 Apache 配置文件中打印第 `50` 行？
- en: How can you change the Apache default port `80` to `8080` using `sed`?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用 `sed` 将 Apache 默认端口 `80` 更改为 `8080`？
- en: Further reading
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，进一步阅读本章相关内容：
- en: '[https://httpd.apache.org/docs/2.2/](https://httpd.apache.org/docs/2.2/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://httpd.apache.org/docs/2.2/](https://httpd.apache.org/docs/2.2/)'
- en: '[https://httpd.apache.org/docs/2.2/vhosts/examples.html](https://httpd.apache.org/docs/2.2/vhosts/examples.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://httpd.apache.org/docs/2.2/vhosts/examples.html](https://httpd.apache.org/docs/2.2/vhosts/examples.html)'
