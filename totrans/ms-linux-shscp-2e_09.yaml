- en: Automating Apache Virtual Hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen a little of the **stream editor** (**sed**), we can put
    this knowledge into practice. In [Chapter 8](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml),
    *Introducing the Stream Editor*, we familiarized ourselves with some of the capabilities
    of `sed`; however, this represented just a small amount of the power enclosed
    in the editor. In this chapter, we are going to exercise `sed` a little more and
    expose ourselves to some practical uses of the tool, especially when using our
    bash scripts.
  prefs: []
  type: TYPE_NORMAL
- en: In this journey, we will use `sed` to help us automate the creation of Apache
    name-based Virtual Hosts. The Apache hosts are practical users of the `sed` that
    we demonstrated but, more importantly, we will use `sed` to search for selected
    lines in the main configuration. We will then uncomment those lines and save them
    as a template. Having created the template, we will create new configurations
    from it. The concept that we demonstrate with Apache can be applied in many different
    situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will find that using `sed` in our shell scripts will allow us to easily
    extract template data from the main configuration and adjust to the needs of the
    virtual host. In this way, we will be able to extend the knowledge of both `sed`
    and shell scripting. In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache name-based Virtual Hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating virtual host creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 7.x machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache 2.4.x web server installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can install Apache as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can start the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can ensure that the service is already running by checking the status as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The source code for this chapter can be downloaded from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter09)'
  prefs: []
  type: TYPE_NORMAL
- en: Apache name-based Virtual Hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this demonstration, we will be working with the `httpd.conf` file from an
    Apache 2.4 HTTPD server taken from a CentOS 7.x host. To be perfectly honest,
    we are far more interested in the configuration file, as Red Hat or CentOS supply
    it, than the actual configuration changes that we will make. The file will be
    available for download from the code bundle of the chapter. Our purpose is to
    learn how we can extract data from the system-supplied file and create a template
    from it. We can apply this to Apache configuration files or any other text data
    file. It is the methodology we are looking at, not the actual result.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have some understanding of what we are trying to do, we must first look
    at the `/etc/httpd/conf/httpd.conf` file, that is, CentOS, Red Hat Enterprise
    Linux, or Scientific Linux. The following screenshot shows the virtual host section
    of the file that we are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9a17c54-dd2e-4899-8560-4800a72360e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Looking at these lines, we can see that they are commented and this is all a
    part of a monolithic `httpd.conf`. While creating virtual hosts, we normally prefer
    separate configurations for each of our potential virtual hosts. We need to be
    able to extract this data from the main file and at the same time uncomment it.
    We can then save this uncommented data as a template.
  prefs: []
  type: TYPE_NORMAL
- en: Using this template, we will create new configuration files that represent different
    named `hosts` that we need to have running on one instance of Apache. This enables
    us to host `sales.example.com` and `marketing.example.com` on a single server.
    Both sales and marketing will have their own configuration and websites, independent
    from each other. Additionally, it will also be very easy to add additional sites
    that we need with the template we create. It becomes the task of the main web
    server to read the incoming HTTP header requests to the server and direct them
    to the correct site based on the domain name used.
  prefs: []
  type: TYPE_NORMAL
- en: Our first task then will be to extract the data present between the opening
    and closing `VirtualHost` tags, uncomment it, and save it to a template. This
    will only need to be done once and will not be a part of our main script to create
    the virtual hosts.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the virtual host template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are not going to test the virtual hosts we create, we will make a copy
    of the `httpd.conf` file and work with that locally in our `home` directory. This
    is good practice while developing the scripts so as not to impact the working
    configuration. The `httpd.conf` file that I am working with should be able to
    be downloaded with other script resources referred to in the script from the publisher.
    Alternatively, you can copy it from your CentOS host with Apache installed. Make
    sure that the `httpd.conf` file is copied to your `home` directory and that you
    are working in your `home` directory.
  prefs: []
  type: TYPE_NORMAL
- en: First steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first step in creating the template is to isolate the lines that we
    need. In our case, this will be the lines included in the sample virtual host
    definition that we saw in the earlier screenshot. This includes the opening and
    closing tag for the `VirtualHost` and everything in between. We can use line numbers
    for this; however, this will probably not be reliable, as we will need to assume
    that nothing has changed in the file for the line numbers to be consistent. For
    completeness, we will show this before moving onto a more reliable mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will remind ourselves of how we can print the whole file with `sed`.
    This is important, as in the next step we will filter the display and show only
    the lines that we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-n` option is used to suppress the standard output and the `sed` command
    within the quotes is `p`; it is used to display the pattern match. As we have
    not filtered anything here, the matched pattern is the complete file. If we were
    to use line numbers to filter, we could add line numbers easily with `sed`, as
    shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'From the following screenshot, we can see that, in this system, we need to
    work with just lines `355` to `361`; however, I do stress again that these numbers
    may vary from file to file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f785771f-f921-41b5-9f00-db71ec14fc7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Isolating lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display these lines encased with the tags, we can add a number range to `sed`.
    This is easily achieved by adding those numbers to `sed`, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With the range of lines specified, we have been able to easily isolate the
    lines that we required, and the only lines that are now displayed are those of
    the virtual host definition. We can see this in the following screenshot, which
    displays both the command and the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbce939a-ad7b-4f6c-9054-1d41b9bf7d01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The issue that we face while hardcoding in the line numbers is that we lose
    flexibility. These line numbers relate to this file and maybe only this file.
    We will always need to check the correct line numbers in the file that relate
    to the file we are working with. This could be an issue if the lines are not conveniently
    at the end of the file and we have to scroll back to try and locate the correct
    line numbers. To overcome these issues, instead of using line numbers, we can
    implement a search for the opening and closing tags directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We are no longer using the starting number and ending number but the more reliable
    starting regular expression and closing regular expression. The opening regular
    expression looks for the line that begins with `#<VirtualHost`. The ending regular
    expression is searching for the closing tag. However, we need to protect the `/VirtualHost`
    with an escape character. By looking at the end of the regular expression, we
    see that it translates to lines that begin with `#\/VirtualHost`, with the escaped
    forward slash.
  prefs: []
  type: TYPE_NORMAL
- en: If you recall from [Chapter 8](9d994c56-8311-4871-af5a-1e7c9b2449d5.xhtml), *Introducing
    the Stream Editor*, we specify the lines that begin with a specified character
    by using the carat (`^`).
  prefs: []
  type: TYPE_NORMAL
- en: 'By looking at the following screenshot, we can now isolate the required lines
    more reliably and without knowing the line numbers. This is more desirable across
    edited files, which will differ in their line numbering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05b1cee3-913c-49fe-b421-b118d3f1c8a4.png)'
  prefs: []
  type: TYPE_IMG
- en: sed script files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Isolating the lines was only the first step! We still have to uncomment the
    lines and then save the result as a template. Although we can write this as one
    single `sed` command string, we can already see that it will be awkwardly long
    and difficult to read and edit. Thankfully, the `sed` command does have the option
    to read its commands from an input file, often known as a script. We use the `-f`
    option with `sed` to specify the file we want to read as our control.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen that we can isolate the correct lines from the file. So,
    the first line of the script configures the lines that we will work with. We implement
    the brace brackets `{}` to define a code block immediately after the selected
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: A code block is one or more commands that we want to run on a given selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the first command will be to remove the comment and the second
    command will be to write the pattern space to a new file. The `sed` script should
    look like the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can save this file as `$HOME/vh.sed`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line, we select the lines to work with, as we have previously
    seen, and then open the code block with the left brace. In line 2, we use the
    `substitute` command, `s`. This looks for lines that start with a comment or `#`.
    We replace the comment with an empty string. There are no characters or spaces
    between the middle and end forward slash. In English, we are uncommenting the
    line but, to the code, this is replacing the `#` with an empty string. The final
    line of code uses the write command, `w`, to save this to `template.txt`. To help
    you see this, we have included the following screenshot of the `vh.sed` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/031db5bb-0f0c-4dd9-b5a7-af6db24f876c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see all of our efforts come to fruition now by ensuring that we are
    in the same directory as the `httpd.conf` and `vh.sed` files that are executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have now created the `template.txt` file within our working directory. This
    is the isolated uncommented text from the `httpd.conf` file. In simple terms,
    we have extracted the seven correct lines from over 350 lines of text in milliseconds,
    removed the comment, and saved the result as a new file. The `template.txt` file
    is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/811b11f3-8a1a-4c29-a560-9ff3cde9a039.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a template file that we can begin to work with to create virtual
    host definitions. Even though it's Apache that we have been looking at, the same
    idea of uncommenting the text or removing the first character of selected lines
    can apply to many situations, so take this as an idea of what `sed` can do.
  prefs: []
  type: TYPE_NORMAL
- en: Automating virtual host creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After having created the template, we can now use this to create virtual host
    configurations. In the simplest terms, we need to replace the `dummy-host.example.com`
    URL with the `sales.example.com` or `marketing.example.com` URL. Of course, we
    have to also create the `DocumentRoot` directory, the directory where the web
    pages will be, and also add some basic content. When we use a script to run through
    the process, nothing will be forgotten and the edits will be accurate every time.
    The basics of the script will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can ignore the shebang in the first line; we should know this by now. We
    can start our explanation on line 2 of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Line** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `WEBDIR=/www/docs/` | We initialize the `WEDIR` variable that we store in
    the path to the directory that will hold the different websites. |'
  prefs: []
  type: TYPE_TB
- en: '| `CONFDIR=/etc/httpd/conf.d` | We initialize the `CONFDIR` variable that we
    will use to store the newly created virtual host configuration file. |'
  prefs: []
  type: TYPE_TB
- en: '| `TEMPLATE=$HOME/template.txt` | We initialize the variable that we will use
    for the template. This should point to the path of our template. |'
  prefs: []
  type: TYPE_TB
- en: '| `[ -d $CONFDIR ] &#124;&#124; mkdir -p "$CONFDIR"` | On a working `EL6` host,
    this directory will exist and is included in the main configuration. If we are
    running this as a pure test, then we can create a directory to prove that we can
    create the correct configuration within the target directory. |'
  prefs: []
  type: TYPE_TB
- en: '| `sed s/dummy-host.example.com/$1/ $TEMPLATE >$CONFDIR/$1.conf` | The `sed`
    command works as an engine in the script, running the search and replace operations.
    Using the substitute command in `sed`, we search for the dummy text and replace
    it with the argument passed to the script. |'
  prefs: []
  type: TYPE_TB
- en: '| `mkdir -p $WEBDIR/$1` | Here, we create the correct subdirectory to house
    the websites for the new virtual host. |'
  prefs: []
  type: TYPE_TB
- en: '| `echo "New site for $1" > $WEBDIR/$1/index.html` | In this final step, we
    create a basic holding page for the website. |'
  prefs: []
  type: TYPE_TB
- en: 'We can create this script as `$HOME/bin/vhost.sh`. Don''t forget to add the
    execute permission. This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cd77cda-d45d-4a9b-8cf4-6ead4cf50293.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the sales virtual host and web page, we can run the script as shown
    in the following example. We will be running the script directly as the root user.
    Alternatively, you may choose to make use of the `sudo` command within the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see how easily we can create virtual hosts using a well-crafted
    script. The configuration file for the virtual host will be created in the `/etc/httpd/conf.d/`
    directory and will be named `sales.example.com.conf`. The file will look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b748709-5d4d-49e9-aef9-bf0a8e98ef37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The website content must have been created in the `/www/docs/sales.example.com`
    directory. This will be a simple holding page that proves the point that we can
    do this from the script. Using the following command, we can list the content
    or the base directory that we use to house each site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `-R` option allows for the recursive listing. We have used the `/www/docs`
    directory purely as this is set in the original virtual host definition that we
    extracted. You may prefer to use `/var/www` or something similar if working in
    a live environment rather than creating the new directory at the root of your
    filesystem. It would be a simple matter of editing the template that we created
    and that too could be done with `sed` at the time of template creation.
  prefs: []
  type: TYPE_NORMAL
- en: Prompting for data during site creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now use the script to create the virtual hosts and the content but we
    have not allowed for any customization other than the virtual hostname. Of course,
    this is important. After all, it is this virtual hostname that is used in the
    configuration itself as well as in setting the website directory and the configuration
    file name.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that we could allow additional options to be specified during
    the virtual host creation. We will use `sed` to insert the data as required. The
    `sed` command `i` is used to insert data before the selection and `a` to append
    after the selection.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will add a host restriction to allow only the local network
    access to the website. We are more interested in inserting data into the file
    rather than what we are doing with the specific HTTP configuration file. Within
    the script, we will be adding `read` prompts and inserting a `Directory` block
    into the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try and explain what we are trying to do, we should see something similar
    to the following when executing the script. You can see from the text that we
    are creating this for the marketing site and adding in restrictions as to who
    can access the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f7eb3a4-1c5c-42b3-af9b-2428ce966267.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we can ask two questions but, if needed, more of them can be
    added to support customization, the idea being that the additional customization
    should be accurate and reliable in the same way as the script creation was. You
    may also choose to elaborate the questions with sample answers, so that the user
    knows how the network address should be formatted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To aide script creation, we will copy the original `vhost.sh` to `vhost2.sh`.
    We can tidy up a few items in the script to allow for easier expansion and then
    add in the additional prompts. The new script will look similar to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we are not running too many checks in the script. This is to
    keep our focus on the elements that we are adding rather than a robust script.
    In your own environment, once you have the script working the way you want, you
    may need to implement more checks to ensure script reliability.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a few more lines. The `WEBDIR` variable has been adjusted
    to contain the full path to the directory and, in a similar way, we have added
    a new variable `CONFFILE`, so that we can make a reference to the file directly.
    If the answer to the first prompt is `n` and the user wants no additional customization,
    the script will exit. If they answer anything other than `n` for no, the script
    will continue and prompt the network to grant access. We can then use `sed` to
    edit the existing configuration and insert the new `directory` block. This will
    default to deny access but allow access from the `localhost` and `NETWORK` variables.
    We refer to the `localhost` as `127.0.0.1` in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify the code for better understanding, the pseudo-code will look like
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here `SearchText` represents the line in the file before which we want to insert
    our text. Also, `NewText` represents the new line or lines that will be added
    before the `SearchText`. The `i` command directly following the `SearchText` dictates
    that we are inserting text. Using the `a` command to append will mean that the
    text we add will be added after the `SearchText`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the resulting configuration file for `marketing.example.com`, as
    we have created it with the additional `Directory` block added in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/013fc804-cb48-41b4-b94f-853ac6c70234.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have added the new block above the closing `VirtualHost`
    tag. In the script, this is the `SearchText` that we use. The `Directory` block
    we add replaces the `NewText` in the pseudo-code. When we look at it, it appears
    more complex as we have embedded the new lines with `\n` and formatted the file
    for easier reading with the line continuation character `\`. Again, we have to
    emphasize that this edit is easy and accurate once the script is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For completeness, we include the following screenshot of the script `vhost2.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9b10386-3776-4cb2-bd40-1b7c0cd64644.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how we can extend `sed` into some very cool scripts
    that have allowed us to extract data from files, uncomment selected lines, and
    write new configurations. Not stopping at that, we also saw how we could use `sed`
    with script that inserts new lines into existing files. I think that `sed` will
    very quickly become your friend and we have created some powerful scripts to support
    the learning experience.
  prefs: []
  type: TYPE_NORMAL
- en: You may already know this but `sed` has a big brother, `awk`. In the next chapter,
    we are going to see how we can use `awk` to extract data from files.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can you print line number `50` from an Apache configuration file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you change the Apache default port `80` to `8080` using `sed`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please see the following for further reading relating to this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://httpd.apache.org/docs/2.2/](https://httpd.apache.org/docs/2.2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://httpd.apache.org/docs/2.2/vhosts/examples.html](https://httpd.apache.org/docs/2.2/vhosts/examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
