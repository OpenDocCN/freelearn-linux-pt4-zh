- en: Chapter 3. Motion for the Biped
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've got your biped all up and running, you can start developing
    interesting ways to make it move. In this chapter, you'll learn
  prefs: []
  type: TYPE_NORMAL
- en: How to adjust the positions of your servos for the Tyrannosaurus Rex pose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic walking gait for your robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic turn for your robot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before you begin, however, it will be best if you create a harness for your
    biped. Your robot is going to be inherently unstable with only two legs, and,
    as you experiment, you're going to make some mistakes. With only two legs, these
    mistakes can, and probably will, result in your robot toppling over, which can
    damage the robot.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an electronics board vise, or an "Extra Hands" device, they can
    be useful for this purpose. Here is a picture of how to use this device to create
    a harness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Motion for the Biped](img/B04591_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't, you can easily create this sort of overhead support using a PVC
    pipe or wood. Really, just something to keep your biped from crashing over during
    your experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: A basic stable pose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that your biped is built and you know how to program the servos using Python,
    you can experiment with some basic poses. You''ll first create a program that
    allows you to set individual servos so that you can experiment. Here is the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic stable pose](img/B04591_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This code includes the Python `setAngle` function from [Chapter 2](ch02.html
    "Chapter 2. Building the Biped"), *Building the Biped*. The specifics were taken
    from the [www.pololu.com](http://www.pololu.com) website, but it simply allows
    you to set a specific servo to a specific angle.
  prefs: []
  type: TYPE_NORMAL
- en: The next part of the code sets all of the servos to their center location. The
    final piece of the code, the `while 1:` code set, simply asks the user for a servo
    and an angle, and then sends the command to the servo controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the program is run, you should see your biped standing straight up. If
    not, you may need to center your servos by adjusting the position of the horns.
    This is a useful pose, but there are others that are more stable. As an excellent
    first example, you can change the pose to be more like a Tyrannosaurus Rex pose,
    with knees pointing back. Here are the basic servo positions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Servo | Angle |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 60 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 60 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 60 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 120 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 120 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 120 |'
  prefs: []
  type: TYPE_TB
- en: 'The robot pose should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic stable pose](img/B04591_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can use these angles to achieve this pose. However, this will leave you
    with some limited movement, as your servos will be toward the end of their ability
    to move in one direction. As this is going to be the starting pose for your robot,
    to achieve maximum flexibility, you'll want to center the servos at this position.
    To do this, run the default, `robot.py`, to set the legs to the center position.
    Now, adjust the servo horns to achieve this pose while the values of the servos
    are at a 90 degree angle.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic stable pose](img/B04591_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have a stable base to work from, you can start programming a simple
    walking motion.
  prefs: []
  type: TYPE_NORMAL
- en: A basic walking motion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your robot is poised to walk, however, you first have to get a leg off the ground.
    Of course, that is easy enough; if you simply lift the leg by changing the angle
    of the knee joint, your leg can get off the ground. You may also want to change
    the angle of the front to back ankle; this will allow you to lift the leg without
    raising it quite as high.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you''ll have a problem if you change just these two servos; as you
    lift the leg, your robot will fall over. This is due to a simple principle called
    the center of gravity. When your robot is at rest, your center of gravity looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is clear that if you lift a leg, the robot will fall over in the direction
    of the leg that has been lifted. What you need to do is to shift the center of
    gravity over the leg that will be left on the ground using the ankle servo that
    can tilt the robot left and right, so that it ends up like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll then want to set your servos to lift the left leg. Here is a side view
    of these servo settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it''s time for some Python code to make this happen. You''ll start with
    your `robot.py` code and will add the following lines to a function called `liftLeftLeg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will tip the robot onto its right leg, and then lift the left leg, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it is fairly easy to step forward. Just move the hip joint on the left
    leg forward, and then move the ankle joint on the right leg to tip the entire
    robot forward. Here is the diagram and servo settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a picture of the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the first stage of a walking gait. So, let''s detail all the motions
    you''ll need in order to walk your robot forward. Here are the side view diagrams
    of the different states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the pictures of the robot in each of the different states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the Python code for each of the functions for the different states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You'll notice that each function has a number of different servo control statements;
    these must be performed in this order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the Python code to sequence the functions for two steps: one with the
    left leg, and the other with the right leg:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic walking motion](img/B04591_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a very simple gait; it's not particularly elegant. You can see that
    each state is made up of many individual servo moves. You can certainly add more
    servo moves to make it smoother and more refined. Your exact servo angle settings
    will certainly vary from these; you'll need to do some experimentation to get
    your biped's legs positioned correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you can walk, you will also need to teach your robot how to turn.
  prefs: []
  type: TYPE_NORMAL
- en: A basic turn for the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your robot can walk forward, but you''ll also want your robot to be able to
    turn. Your turning is limited to the amount you can turn the hip of your robot,
    which is around 20 degrees for this robot. So, to perform a full 90 degree turn,
    you''ll need to take the turn in several steps. The big difference here is that
    when you return to the standing state, you do not want to reset your hip rotation
    servos to 90 degrees. Here are the diagrams, including several that are rear view,
    for a turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic turn for the robot](img/B04591_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the Python code for a basic turning operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic turn for the robot](img/B04591_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the Python code to chain these basic states together to step a
    turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A basic turn for the robot](img/B04591_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now your robot can walk and turn! Obviously, your robot could walk backward
    by reversing the order of servo control statements in each of the functions. There
    are many more types of motions you can program with your robot, following the
    planning method outlined in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, your robot is mobile. The next step is to add some sensors so that your
    robot can avoid, or find, objects in its path.
  prefs: []
  type: TYPE_NORMAL
