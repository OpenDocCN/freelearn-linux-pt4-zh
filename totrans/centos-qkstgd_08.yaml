- en: Software Package Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To keep your system up to date and install or remove applications as you choose,
    Linux supports multiple methods. One method is to use the source code of the application
    for compilation and installation on your machine. Another one is using pre-built
    programs or groups of programs known as **packages**, which are ready for installation
    on a particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to manage these pre-built software packages
    using RPM and the YUM utility. You will also learn how to add or remove official
    and third-party repositories in CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing applications using RPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing applications using YUM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing official and third-party repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing applications using RPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**RPM** (short for **Red Hat Package Manager**) is an open source package management
    utility developed by Red Hat for RPM-based systems such as RHEL, CentOS, and Fedora.
    Using the RPM utility, the user can install, remove, update, query, and verify
    application packages built in the `.rpm` format. You can download `.rpm` packages
    from repositories containing application packages in `.rpm` format.'
  prefs: []
  type: TYPE_NORMAL
- en: An RPM package may or may not require any resource prerequisites. If a rpm package
    requires any resource, such as a shared library or another package to be available
    on system before proceeding ahead with that rpm package installation, then those
    resources are known as dependencies of that package. A package management utility
    such as YUM automatically resolves the dependencies when a package is installed,
    while the RPM utility lacks this feature. Using the RPM utility, you can find
    out a package dependency, but RPM cannot automatically install them. The RPM utility is
    also known as a low-level package management tool.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of a RPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The naming of each RPM package file follows a standard, as given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The naming convention used for RPM packages is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14a4c9ae-4b6c-4bfe-b9a5-0825a9f2be8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table describes the breakdown of various fields used in the naming
    of RPM packages, and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Name | It consists of a string describing the contents of the application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Version | It is the version number of the application. |'
  prefs: []
  type: TYPE_TB
- en: '| Release | It is the release number of the package set by the packager. |'
  prefs: []
  type: TYPE_TB
- en: '| Arch | It describes the architecture of the package. It says for what architecture
    the package was built: 32-bit, 64-bit, or both:'
  prefs: []
  type: TYPE_NORMAL
- en: '`i386`: 32-bit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x86_64`: 64-bit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noarch`: Not specific to any architecture, can be used on both 32-bit and
    64-bit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Using RPM packages for installing an application has the added advantage of
    manageability (tracking package files, updating the package, removing the package).
    Almost all software provided by CentOS is in the form of RPM packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'An RPM package primarily consists of three components: metadata, files, and
    scripts. Metadata consists of package name, version, release, builder, date, dependencies,
    and so on. Files consist of archives of files contained in the package to be installed.
    The scripts file inside an RPM package is executed when the package is installed,
    removed, or updated.'
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you update an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When an application is updated, typically, the older version of the package
    is removed from the system. The existing configuration files are generally retained,
    but retaining, overwriting, or writing a new configuration file with a different
    name is decided while creating the package.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical scenario, only one version of an application is installed at a
    time. However, in certain cases, multiple versions of the same application exist,
    such as in kernel packages or in a multi-architecture environment where the same
    package is installed for different architectures (32-bit and 64-bit). A kernel
    package is designed so that multiple versions can be kept in the system. If a
    new installation of the kernel fails, the older kernel is always available as
    a standby. Always remember that the kernel package is never updated using the update
    option of the RPM utility. It is always installed and not updated.
  prefs: []
  type: TYPE_NORMAL
- en: Using RPM to query options with RPM packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several options that are used in combination with query options.
    Some popular ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List all the packages installed in the system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Find a specific package installed in the system by piping the output of the previous
    command to the `grep` command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/85839048-0beb-4a96-9155-afe92f81925f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Identify the package that installed a file on the system, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a57bfb1f-7be4-4926-96e7-80a44b59fdcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the list of files installed by an RPM package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7ef018a6-f8c7-4d19-b151-8ee8a0970b4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the recently installed RPM package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/666d967a-d6a6-4423-9f08-c390aec06d47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display information on the installed package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c6878191-6639-45e4-aa36-8c38c9b15e35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the documentation of the file installed by a package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7af55afd-6654-4030-8d96-4350c949b32c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the documentation installed by package, name as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e453eeb6-d809-445d-91d7-25daa639c132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the configuration file installed by the package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2f3813e5-33eb-4e41-bc17-f68feca32dc0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the list of change information of a specific package, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3b5046eb-cf4e-4016-acbc-40d2e20c08da.png)'
  prefs: []
  type: TYPE_IMG
- en: Verifying RPM package signatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The RPM packages are generally signed by the organization, community, or individual
    that packages them using the GPG private key. Before installing a package on our
    system, we should always verify the signature of the package with its public GPG
    key to ascertain its integrity. The following command is used to check the signature
    of RPM packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using RPM to install packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install a package, the `-i` option is used. It is generally clubbed with
    the `-v` and `-h` options for verbosity and to display the progress of the installation
    using hash symbols, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42e2b1b1-3cca-40a8-a53f-826ae2bff25f.png)'
  prefs: []
  type: TYPE_IMG
- en: The disadvantage of using this method is that RPM is unable to resolve the dependency
    automatically, and hence it will exit installation in-between if it encounters
    any unmet dependencies while installing the package.
  prefs: []
  type: TYPE_NORMAL
- en: We can use RPM to install a package forcefully as well, by disabling the dependency
    check during the installation process using the `--nodeps` option. This method
    is not recommended as a program may fail to work after, that is, if it is installed
    without resolving its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of forceful installation of a package using the RPM utility is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfc24aba-3969-494b-a4dd-0edc3b3d3191.png)'
  prefs: []
  type: TYPE_IMG
- en: Using rpm to remove packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can remove a package by specifying the package name with the `-e` option,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44d0ea80-b191-4c71-b4b7-0356edce8f4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also remove a package without doing the dependency check. It will forcefully
    remove the package from the system and any application, depending on that particular
    package may fail to run. The following diagram shows how to remove a package without
    checking its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68b95824-0f88-4d5a-a414-f469788c58f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Using RPM to upgrade packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the time, installed packages are automatically upgraded using a high-level
    package manager such as YUM. However, if a package is not available for upgrade
    through the central repository, it can be downloaded from the internet and upgraded
    manually, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use either the preceding command or the following command to upgrade
    a package manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the `rpm` command to upgrade a package is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c847701-9ffb-4bea-b4df-c0b7dd71675e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using RPM to verify packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Verify the installed files of the package against the files available in the RPM
    file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a202d399-7ce3-4c06-a831-0fa1c5c335c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing a RPM GPG key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To verify package integrity before installation, the repository or package
    author''s public GPG key must be imported into our system. The following screenshot
    shows the command that''s used to import the CentOS 7 GPG key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/006dd2d3-587b-47d4-8d59-adb8ba3f8d7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display all the imported RPM repositories'' GPG keys on the system, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/747c14eb-d8ac-4f0c-85a5-327bf70e8346.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing applications using YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**YUM** (short for **Yellowdog Updater Modified**) is an open source tool that
    was developed by Red Hat Inc for RPM-based systems. It is a high-level package
    management tool that''s used for easily installing, removing, updating, or searching
    software packages on systems or in network repositories. It allows us to use a
    CentOS base and third-party repositories that are created on remote or local servers
    to install individual packages or groups of packages automatically, after resolving
    their dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: In upcoming versions, YUM is being replaced by DNF (which is compatible in its
    command set). YUM has already been replaced with DNF (Dandified YUM) as the main
    package manager in Fedora.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the YUM package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main configuration file of YUM is `/etc/yum.conf`, and the main directory,
    which stores the repository configuration file, is `/etc/yum.repos.d/`. The repository
    configuration file has got a specific syntax, and it should end with a `.repo`
    extension in the `/etc/yum.repos.d/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The repository configuration file contains the URL of the repository, the `repo
    id`, `repo name`, instructions to use GPG for checking package signatures, and
    an option to enable or disable the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Using the YUM command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about package management by using YUM on the Linux
    command line.
  prefs: []
  type: TYPE_NORMAL
- en: Finding an application using yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can search for a package name using YUM in multiple ways. The search option
    with a keyword (package name) lists the package in which the specified keyword
    is present in the package name itself and in the summary field of packages also.
    The following example are used to illustrate the working `yum search` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for a package by name only using `yum search` command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of yum search command to find the package named `whois` is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2761b6f-2cb3-455c-932d-0163197fc31e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Find the package if the search string is available in name, summary, and description
    fields, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d1ab168e-4a3b-4613-83e7-23816cebf407.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Search for a package by package description using the `yum whatprovides` command,
    as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the `yum whatprovides` command to find the package name `lynx`
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cee7a719-4d84-4fca-b660-377bdad504d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Identify the package that installed a file (absolute path name) on the system
    using the `yum provides` command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ce00c151-1b7d-4e02-ac15-899e49cd8db9.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing applications using YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can install a new package using the YUM utility. The YUM utility will resolve
    all the dependencies of the package and prompt for confirmation before installation.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following are examples to illustrate the usage of the yum command for
    package installation:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install an application using YUM:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Install an application without prompting for confirmation by using the `-y`
    option:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Install a package without verifying its signature:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Install a downloaded RPM file from a local directory. It automatically downloads
    the dependencies of the package from the configured repositories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the `yum localinstall` command is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33d4c78f-c158-4bb0-9708-3575c764c5d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying packages and their information with YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are examples of displaying detailed information of a package
    using the `yum` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The usage of the `yum info` command is shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/cde369be-6945-4d7b-88c6-387d13ee637c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The usage of the `yum list` command to display the installed packages list
    is shown in the command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The usage of the `yum list` command to display the installed and available
    package information using its name is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0fac6c4e-d248-4dae-9bc9-a5e876ba4803.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `yum list` command can also be used to display all available packages in
    repositories from the YUM database, as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Removing applications using yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are examples to illustrate the usage of the `yum command` for
    removing an application package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `yum` command can be used to remove a package with all its dependencies,
    as shown in the command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `yum` command can also be used with the `-y` option to remove an application
    without prompting for confirmation, as shown in the command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Updating applications and the system using yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can see whether there are any updates available for the packages installed
    on our system by executing the command line, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also update an installed application and its dependencies to the latest
    stable version using the `yum` command. In this process, YUM preserves the existing
    configuration files, except in cases where it is mandatory to update the configuration
    file for working on an updated version of the application, as shown in command
    line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can update our system and installed application together in a single command
    by not specifying any application name to the `yum update` command, as shown in
    command line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: While updating the system or application, all applications except the kernel
    are updated immediately at runtime. The latest kernel version comes into effect
    only after rebooting the system. We can use the `uname -r` command to view the
    running kernel version.
  prefs: []
  type: TYPE_NORMAL
- en: Managing groups of applications using YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In CentOS 7, related packages that serve a common purpose are grouped under
    one category. We can also install a particular group containing related packages,
    in place of installing them one by one, as shown in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display all the package groups by using the `yum grouplist` command, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Install a specific package group of related packages by using the `yum groupinstall`
    command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update packages in an existing installed package group by using the `yum groupupdate`
    command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove an installed group of packages from the system by using
    the `yum groupremove` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can display information about mandatory, default, and optional packages
    that are installed or not installed with the group in the system by using the `yum
    groupinfo` command. The output of this command displays the list of packages in
    that group, with each package name displayed with a symbol in front of them. The
    following table lists the symbol and its corresponding meaning, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `=` | Package was installed as part of the group and is presently installed
    on the system. |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Package is not installed on the system. It will get installed if the group
    is installed or updated. |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Package is not installed on the system and it will not get installed
    if the group is installed or updated. |'
  prefs: []
  type: TYPE_TB
- en: '| No symbol | Package is installed on the system, but it was not installed
    through the group. |'
  prefs: []
  type: TYPE_TB
- en: 'An example of the `yum groupinfo` command to find the information of packages
    installed with a group is shown in the command line here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Using YUM history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'YUM keeps a record of all the past install and remove transactions in a log
    file that is, `/var/log/yum.log`. An example to display the record of yum transactions
    kept in a log file is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bfdf793a-0bef-41df-b717-39a8f760a44b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can display the history of installed and removed packages with the `yum` command,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdc822bf-3dbe-49d2-8ade-c8e9b33a98e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can undo a previous transaction using the `yum history undo` command, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb27fb19-1cb8-4007-8d6f-01b7ff07db54.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing application repositories using YUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To manage application repositories using YUM, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display only all enabled repositories in the system using the `yum repolist`
    command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Display all available (enabled or disabled) repositories in the system using
    the `yum repolist all` command, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can install a package from a specific repository by enabling it for runtime only.
    It is used to install a package from a specific repository when it exists in more
    than one repository, as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We can permanently enable or disable a repository by using the `yum-config-manager`
    utility. It makes necessary changes in the file stored in the `/etc/yum.repos.d/`
    directory, as shown in command line here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `yum-config-manager` utility can also be used to create a client repo configuration
    file inside `/etc/yum.repos.d`, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ yum-config-manager       \                                        --addrepo=http://repo.example.com/7/x86_64/`'
  prefs: []
  type: TYPE_NORMAL
- en: Handling other miscellaneous options of yum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The YUM utility also provides an interactive shell using the `yum shell` command
    for performing multiple tasks in one go. To exit from the YUM shell, type `exit`
    or `quit`, or press *Ctrl* + *D.* The example in the following screenshot illustrates
    the usage of the `yum shell` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb66ad06-c127-4ec5-a217-9dbe8f76a434.png)'
  prefs: []
  type: TYPE_IMG
- en: 'YUM keeps all the enabled repositories'' cached packages and other data in
    the `/var/cache/yum` directory. Here, YUM creates a subdirectory for each repository.
    We can clean or empty the cached directory to save space at any time by executing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We can display the usage information of YUM by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Managing official and third-party repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, the desired software is not available in the base (official) repositories
    of CentOS 7\. In such scenarios, CentOS 7 and other Linux communities have contributed
    to several third-party repositories that can be used to install a variety of applications
    that are not available in official repositories. This section discusses various
    popular third-party repositories that are available for CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: Official repositories of CentOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, CentOS 7 provides the base repository, the updates repository, and
    the extras repository. These repositories are managed by the CentOS community
    and are sufficient for completing most of the daily operations requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the repositories that are not managed by the official CentOS community.
    Sometimes, we need to add them to our YUM database of repositories to download
    and install certain software, which is not available in CentOS official repositories.
    However, if these are added, they should be managed separately to prevent any
    unintended or conflicting updates from them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of certain repositories that have certain additional CentOS packages
    that are not available in the CentOS base or updates repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extra Packages for the Enterprise Linux (EPEL) repository**: This repository
    is maintained by the Fedora community and is one of the most trusted third-party
    repositories that can be added in your system. We can add this repository to our
    system with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Community Enterprise Linux Repository (ELRepo)**: This is an Enterprise Linux
    repository that provides hardware-related RPM packages. It includes filesystem
    drivers, graphics, sound, webcam, video, and network drivers, and the latest kernel
    packages. We can add this repository to our system with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/05c9efb8-7922-4d48-9c6e-bae87c52f04a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Nux-desktop repository**: This repository provides desktop and multimedia-related
    packages for Enterprise Linux. Some popular multimedia software such as VLC media
    player, mplayer, and so on are available through this repository. Some of the
    packages in this repository have some dependencies that are resolved with the EPEL
    repository. At the same time, it is strongly recommended not to use this repository
    with RPMForge or the ATRPMS repository as it may lead to conflict between packages
    and dependencies. Also, RPMForge is a dead project and is not being maintained.
    We can add the Nux-desktop repository to our system with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Remi repository**: This is a third-party repository, mainly famous for providing
    the latest versions of the PHP stack, MySQL, and related software used in Enterprise
    Linux. It also requires the EPEL repository to be installed on CentOS before installing
    it. We can push the remi repository to our system with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The remi repository is not enabled by default on installation. To install packages
    using this repository, we need to first enable it.
  prefs: []
  type: TYPE_NORMAL
- en: '**RPM fusion repository**: This third-party repository offers some free and
    non-free add-on packages that the Fedora project or Red Hat do not want to share
    with Enterprise Linux. We can add this repository to our system with the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many third-party repositories available; some of them are not maintained,
    whereas some of them have conflicting packages. For more information about repositories,
    such as which repositories should be avoided and which are recommended, you can
    go to the following wiki page of CentOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.centos.org/AdditionalResources/Repositories](https://wiki.centos.org/AdditionalResources/Repositories).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a YUM repository is one of the easiest and best ways to install software
    or security updates on multiple systems over LAN. We can download all the packages
    from the internet repository or from the DVD and host them on the local server,
    which will be known as the YUM server. Other Linux machines on the LAN can be
    configured to download the required packages from the local YUM server and they
    will be known as the YUM clients. This saves internet bandwidth, provides offline
    installation of packages to clients, and speeds up the update process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will create a custom repository of the packages shipped
    in the CentOS 7 DVD and share this repository to clients using an FTP server,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mount the media containing the packages. In our case, it will be the CentOS
    7 DVD, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92c96960-530f-4917-8646-f0b7b5cbdd83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the FTP server package, `vsftpd`, from the mounted DVD, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23cab79d-7d1b-4b08-aaea-e2aef5247c03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, enable the service to start `vsftpd` on boot automatically and start the
    service, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5412a63b-3ec2-4d28-8a8a-eada17911721.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the `createrepo` package to create a local repository database. If
    the internet is connected to our system, we can use YUM to install the `createrepo`
    package, as shown in command line here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t have an internet connection, then install the package using the
    RPM package manager, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb72259c-a44a-4a96-a8af-87766a7e1802.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We got the preceding error because in our system the `createrepo` package dependencies
    were not installed. So, we met the dependencies of `createrepo` package. First,
    install the following packages in the same order that''s shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54e2211e-8420-43ba-89f5-6a1857e4ca56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Store the packages in the `ftp` folder to build the local repository, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca92fa8d-6a2a-4361-ac08-3fe4243c1489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Restore the SELinux tag on packages copied from the DVD, as per the `vsftpd`
    server files, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9cb118e-2b40-4c93-b403-73cf3b05ec1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a YUM server configuration file with the `.repo` extension in the `/etc/yum.repos.d/`
    directory, as shown in command line here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The content of the `localserver.repo` file is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/debb73f8-9625-4db2-a11c-417b30de4175.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enable the local YUM server repository and clean the yum cache by using the
    `yum` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After cleaning the previous cache of the YUM database, build the YUM database
    of the repository from scratch with the command that''s shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f820123-9c11-4160-bba1-185a0f52cbee.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use any other application such as a web server or an NFS server for
    sharing the packages of the YUM server (system serving the packages) to the YUM
    client (system downloading the packages). We also need to open the corresponding
    application port in the firewall to allow access for YUM clients for downloading
    packages from the YUM server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning methods to keep your system and application
    software up to date. We learned how package management utilities such as RPM and
    YUM are used to install, remove, or update application packages. We had a look
    at different third-party repositories for CentOS 7\. Finally, we wrapped up this
    chapter by creating or own custom repository and making it available for clients.
    Keeping your system and applications updated is vital to make sure they are free
    from any vulnerabilities. This helps in securing your information and making the
    system safe from malware and hackers.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will learn some of the essential utilities of CentOS
    7\. We will see how system logging works and how you can manage system services.
    Then, we will understand the functionality of the firewall and SELinux for hardening
    system security.
  prefs: []
  type: TYPE_NORMAL
