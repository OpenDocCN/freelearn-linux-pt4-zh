- en: Chapter 2. Configuring and Administering Ubuntu Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing the Ubuntu Server, you will need to administrate it. If you
    are a newbie, this chapter is mandatory for you. So follow it to the letter. If
    you are an advanced Linux user who has experience working with other distributions,
    you can consider the experience of trying a new distribution similar to that of
    driving a new car. The car certainly has a steering wheel, a gas pedal, and a
    brake, but it still takes you a minute to adjust the mirrors, find out where the
    gauges and controls are, and adjust the seat until you feel comfortable. Think
    of this chapter as that minute or two behind the wheel of a new car.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reach this goal, we will follow this plan:'
  prefs: []
  type: TYPE_NORMAL
- en: Administering using the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package management of an Ubuntu Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network configuration for an Ubuntu Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing essential system administration tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Administering using the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entire books have been written on command-line tools and how to use them effectively.
    In this section, we will have a look at the essentials one that we need. If you
    are an experienced administrator, feel free to skip to the next section. Just
    keep in mind the following note, that's all.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that unlike other Linux distributions, Ubuntu doesn''t allow the use of
    the super user as a root by default; it is disabled for security reasons. So,
    when you would like to run a command with the root privileges, you should run
    it with the `sudo` keyword before doing so. You will be asked to enter your password
    (the one that you used when installing the Ubuntu Server). For example, if you
    would like to edit the `/etc/hosts` file, run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you would like to activate the root account (which is not recommended) or
    allow other users to run `sudo`, you can follow the detailed tutorial at. [https://help.ubuntu.com/community/RootSudo](https://help.ubuntu.com/community/RootSudo).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start with what I consider to be the most important command for
    a Linux administrator—`man`, or the interface for online reference manuals. It
    gives you the necessary information about any command that you would like to use
    (if it is documented of course, which is true in most cases). We use it by typing
    the `man` keyword just before the command that we would like to be informed about.
    We use arrows keys to navigate, the `/` character to perform a search, the *Enter*
    key to view the next line, the *spacebar* to view the next page, and the *q* character
    to quit the interface. For example, the following screenshot shows what you will
    see when you run the `man ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Administering using the command line](img/B04800_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `man` pages are grouped together in sections, with one section per topic.
    For example, the `man` pages in the first section are executable programs or `shell`
    commands, the ones in section 2 are **system calls** (functions provided by the
    kernel), and so on. You can see all the sections on running the `man man` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful command is `apropos`, which shows the section and `man` page
    where the word in the parameter was found. For example, when searching the `man`
    pages/sections in which the `pwd` command exists, we use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider a case where a command exists under more than one section,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can view the information related to this section by using `man <the_section_number>
    <the_command>` (for example, `man 5 smbpasswd`). Alternatively, use `man -a <the_command>`
    if you would like to see all the `man` page sections in succession for that command
    (for example, `man -a smbpasswd`). If you omit the section number, `man` will
    return the `man` page from the first section that it finds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ls` command lists files and directories under the path passed in the parameter
    (the actual `.` directory is the default choice). Some options are very helpful.
    For example, with the `-a` option, we can list the cached items. With the `-l`
    option, we can get additional information such as the file size and permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `pwd` command gives the current path (working directory).
  prefs: []
  type: TYPE_NORMAL
- en: The `history` command lists the last commands that you ran.
  prefs: []
  type: TYPE_NORMAL
- en: The `chmod` command allows you to change file permissions. Use it carefully,
    especially when you use the `*` magic card instead of a filename coupled with
    the `-R` option that runs it recursively. From the same family, we will find the
    `chown` and `chgrp` commands, which allow you to change the owner and group of
    a file respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The `top` command gives you a list of the processes that are running on your
    Ubuntu Server; they are sorted by the CPU usage. This list is updated in real
    time, and it is limited by the size of the screen. If you want to see the whole
    list of the processes that are running on the system, you can run the famous `ps
    -ef | less` command. Here, we pipe the result of this command by using the `|`
    character as an input to the `less` command to see the result output page by page,
    `less` works like the famous `more` command. Besides, it allows you to surf forward
    and backward.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that piping (using the `|` character) is a mechanism used to optimize commands
    output by passing the output of the first command (the command before the `|`
    character) as an input to the second command (the command after the `|` character).
    We can use a cascade of pipes using the `|` character in a single command line.
  prefs: []
  type: TYPE_NORMAL
- en: There are some useful shortcuts in the server environment (no graphic interface),
    such as *Ctrl+C*, which is used to quit a command that is not responding (or is
    simply taking too long to complete), *Ctrl+D*, which is used to send the **end
    of file** (**EOF**) signal to a command, and finally *Ctrl+Z*, which is used to
    stop the command that is running in the foreground (on the console). Even though
    it does stop the command, it does not terminate it. Instead, it is just paused.
    We can resume it easily either in the background via the `bg` command or again
    in the foreground with the `fg` command. To do this, you need the job number associated
    with the program that you want to start again. You can get a list of the job numbers
    by using the `jobs` command.
  prefs: []
  type: TYPE_NORMAL
- en: For file management, you will need to use `mkdir` for directory creation, `cd`
    to enter a directory, `touch` to create a file, and `cat` to view its contents.
    For directory/file management, you can use `cp` for copy, `rm` for remove, and
    `mv` for move/rename.
  prefs: []
  type: TYPE_NORMAL
- en: To edit a file, you can use either of the two famous editors, `vi` or `vim`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that these are the most useful CLI commands. In the following sections
    and chapters in this book, we will have a look at other commands. An explanation
    for each of the commands will be given every time we need them. In case you would
    like to take advantage of a specific command, you can use the `man` command, as
    seen previously.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to learn more about Linux **command line** (**CLI**), I recommend
    that you refer to the book available at [http://linuxcommand.org/tlcl.php](http://linuxcommand.org/tlcl.php).
  prefs: []
  type: TYPE_NORMAL
- en: It is mandatory to know the basics of the `vi`/`vim` editors when you are working
    in a server environment. Learning how to use `vi` is beyond the scope of this
    book. So, you have to make some effort to do it yourself. For more help, you can
    find good basic training for the `vi` editor at [http://www.cs.colostate.edu/helpdocs/vi.html](http://www.cs.colostate.edu/helpdocs/vi.html).
  prefs: []
  type: TYPE_NORMAL
- en: The package management for an Ubuntu Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ubuntu, like other Debian-based systems, uses the Debian package format, such
    as `.deb` packages. I prefer using a `.deb` package when installing software instead
    of `tarball` archives because on one hand, unlike the case with `tarball`, we
    can get traceability for every piece of software installed on your system with
    `.deb` packages. On the other hand, because only a `.deb` package can request
    the package database on your server via the package manager and get information
    about the installed and available packages on your system, the package manager
    takes care of installing the missing dependencies automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Package repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ubuntu packages exist in repositories, which are collections of packages, in
    a pre-compiled binary format that can be located either on different medias, such
    as CD-ROMs, or on the Internet. There are four official repositories provided
    by Canonical (the company that created Ubuntu):'
  prefs: []
  type: TYPE_NORMAL
- en: '`main`: This is the repository that contains software distributed under a completely
    free license and supported by the Ubuntu team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restricted`: This is the repository that contains software that may not be
    under a completely free license but is supported by the Ubuntu team, such as drivers
    for specific hardware components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`universe`: This repository contains most of the open source software available
    in the Linux world and which exists under licenses that may not be as free as
    the others. Software in this repository is not supported by the Ubuntu team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiverse`: Here, you will find software that does not meet the free concept
    standards of software. Software in this repository is not supported by the Ubuntu
    team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of other repositories. Many of them are owned by software editors
    and contain packages related to their products. Most of them are provided by the
    community and exist under the **Personal Package Archives** (**PPA**) which is
    a repository software for Ubuntu (visit [https://launchpad.net/ubuntu/+ppas](https://launchpad.net/ubuntu/+ppas)
    for more information).
  prefs: []
  type: TYPE_NORMAL
- en: 'The managing of repositories on your Ubuntu Server is done in the `/etc/apt/sources.list`
    file. Here''s a sample of this file from a fresh Ubuntu Server installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After modifying the sources list file, update the packages database using the
    `sudo apt-get update` command. We will have a look at how to work with the `apt`
    tool in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Package management utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Ubuntu, there are a few package management utilities, especially in a non-graphical
    environment such as those of most server installations. In the following section,
    you will discover the three most used tools—`dpkg`, `aptitude` and `apt`—besides
    the famous `tasksel` utility.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that working with more than one package management database can be confusing.
    I recommend that you choose one package management system to work with and stick
    to it. For the rest of this book, we will use `apt`.
  prefs: []
  type: TYPE_NORMAL
- en: The dpkg tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tool is used to manage (install, remove, and build) local `.deb` packages
    from a CD-ROM or some other disk storage. It doesn't automatically download and
    install packages from repositories and manage dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dpkg` tool is powerful. It can be used when working with locally installed
    packages. For example, it helps you list all the packages installed on your system,
    even the ones installed with other utilities, such as `apt`. To see that, you
    should run the command `dpkg -l` (because the output of this command is a huge
    list you can run `dpkg -l` command less to check them page per page). The following
    is the result of `dpkg -l | less` on our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The dpkg tool](img/B04800_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `dpkg` command can also list the different files installed with a specific
    package. In this case, we should use the `-l` option, with the name of the package
    as a parameter. As shown in the following screenshot, we listed the files installed
    with the `isc-dhcp-common` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The dpkg tool](img/B04800_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other hand, we can check for a specific file within the package that
    it was installed in by using the `-S` option. As shown in the following screenshot,
    the `/usr/bin/omshell` file was installed with the `isc-dhcp-common` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The dpkg tool](img/B04800_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that many files are automatically generated during package installation,
    and even though they are on the file system, `dpkg -S` may not know which package
    they belong to.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `dpkg`, we can install the local `.deb` packages by using the `-i` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can also remove packages by using the `-r` option, but it is not recommended
    because `dpkg` doesn't handle dependencies. If you use `dpkg` to remove a specific
    package that one or more programs depend on, you may break those programs.
  prefs: []
  type: TYPE_NORMAL
- en: The aptitude tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `aptitude` tool is based on **apt** (**Advanced Packaging Tool**), which
    will be discussed later in this chapter, but this tool is more user-friendly.
    You can use aptitude either with the `search` keyword to search for a specific
    word in the package description database, or with the `show` keyword to display
    a lot of useful information about a specific package. However, the most helpful
    use of `aptitude` is that you can launch it without a keyword and you will get
    a menu-driven text-based frontend for `apt`. This interface is suitable for server
    environments (usually non graphical tool). It helps users perform a lot of tasks
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the `sudo aptitude` command, you will see the following interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The aptitude tool](img/B04800_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can view the `Package` menu by using the *Ctrl+T* shortcut and navigate
    by using the arrow keys, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The aptitude tool](img/B04800_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also use `aptitude` as a command-line interface (a non-menu-driven interface)
    in a way that is similar to how you use `apt` as a command-line interface. For
    example, you can use `sudo aptitude install bind9` to install the `bind9` DNS
    server.
  prefs: []
  type: TYPE_NORMAL
- en: The apt tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `apt` is used to download and install packages from online repositories.
    The `apt` commands (`apt-get`, `apt-cache`, and so on) are normally used to work
    with online software. However, they can also be used to install packages locally.
  prefs: []
  type: TYPE_NORMAL
- en: The `apt-cache` command allows you to manipulate the apt package cache. The
    `apt-cache` command does not modify the state of the system, but it does provide
    functions with which to search and generate useful output from the package metadata.
    For example, with the `search` keyword, you can search for a word in the package
    description database. With the `show` keyword, you can show the details of a specific
    package.
  prefs: []
  type: TYPE_NORMAL
- en: The `apt-get` tool is powerful. It performs a lot of functions, such as installing
    new package, upgrading an old package, updating the package database, and even
    upgrading the entire Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a new package, all you need to do is run the package with the `install`
    keyword. For example, to install the `apache2` web server, you should run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can of course remove it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that with the `--purge` option, you can also remove configuration files.
    So use it carefully.
  prefs: []
  type: TYPE_NORMAL
- en: We can install and remove a whole list of packages at the same time. Just write
    the packages' names, with the names separated by spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common use of `apt-get` is updating a software database after the modification
    of the source list file. To do this, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Over time, a lot of packages will have newer versions. Therefore, an `upgrade`
    operation is needed to keep your Ubuntu Server up-to-date, especially when talking
    about security updates. The `apt-get` tool allows us to do this by using the following
    command (after updating the database, as discussed before):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that in general, after a new installation, the first thing that we need
    to do is upgrade all the software of the system by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information about `apt-get`, you can refer to the man pages or use
    the `help` keyword, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adding software collections using tasksel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `tasksel` tool provides you with the possibility of installing new software
    and configuring them at the same time—either by using default values, or by asking
    you to enter the appropriate values. As a result, you will get the software that
    you want to install working and ready to use without any need for additional customization
    (you can of course reconfigure it as you want later).
  prefs: []
  type: TYPE_NORMAL
- en: 'You may remember that during the installation of software, we saw an interface
    that which asked us to install some servers (such as DNS, mail, web, and so on).
    This task can be accomplished with the help of `tasksel`. We can launch the same
    menu interface at any time by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding software collections using tasksel](img/B04800_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use the arrow keys to navigate between the collections, press the *spacebar*
    to select the software that you want to install (you will see an asterisk to the
    left of the software), press the *Tab* key to navigate to the **OK** button, and
    press the *Enter* key to launch the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to know which packages will be installed for a specific task,
    you can run, for the example of the `lamp` web server, the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The network configuration for an Ubuntu Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To cover all the aspects of network configuration for a Linux system administrator,
    we need huge books. So, in this little section, we will cover only the essential
    topics that every Ubuntu Server administrator will need to set up and change the
    network settings.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will have a look at the core files for the network settings
    for the Ubuntu Server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that after modifying any of these files, you should restart the network
    process by typing in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Unlike Red Hat manners, Ubuntu and all the Debian-based distributions use a
    unique file to configure all the network interfaces; this file is named `/etc/network/interfaces`.
    In general, for Ubuntu servers, you will find the loopback and Ethernet interfaces.
    For loopback interfaces (127.0.0.1), its configuration is standard and doesn't
    need any modification from your side. For Ethernet interfaces, you will (in most
    of the cases when you are dealing with servers) find more than one interface.
    They are generally named `ethX`, where `X` is a number starting from *0* and which
    is incremented according to the interface number.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Ethernet interface is configured in either the DHCP or static mode. If it
    is the DHCP mode, we will find the following lines in `/etc/network/interfaces`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the line containing the `auto` keyword means that this interface should
    be automatically brought up when a computer boots up.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is in the static mode, you will find the output that looks like the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These fields are simple and pretty self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important network configuration file is `/etc/resolv.conf`, which contains
    the DNS list used by your server. If you are using DHCP, the content of this file
    will be set automatically. You can edit it by adding your own/favorite DNS servers
    in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The order of the DNS servers in this list will be followed when processing a
    DNS request.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that in general, we edit DNS servers using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'However, starting from Ubuntu 12.04 and later, you should use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `/etc/hosts` file is also one of the core network setting files. By default,
    it contains the loopback and local host addresses, but you can add to it another
    address/hostname pair. It will be used before checking the DNS. It is also useful
    when you want to assign an IP address to a hostname even if your DNS is down.
    This file is also used by a lot of services. We will have a look at this in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The network utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will take a look at a set of networking programs that an
    administrator on an Ubuntu Server should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: The first two that you should know about are `ifup` and `ifdown`, which are
    used to put up interfaces and take them down respectively. You should use them
    with the name of the interface in the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when you take down an interface. You may potentially disrupt any
    services on the system. Furthermore, if you are connected to the system via SSH
    and you take down the main interface on the system, you will disconnect yourself
    from SSH.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important tool is `ifconfig`, which gives you detailed information
    about interfaces, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `ifconfig` command also allows you to configure interfaces, put them up,
    and take them down. You can take a look at its potential via `man ifconfig`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important networking program is the `route` command. As with `ifconfig`,
    this command can be used to both see and set network settings (network routes
    in this case). It is used to manage routes on your server (such as to list, add,
    remove, and so on). Let''s take a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the same context of routing configuration, there is the famous `traceroute6`
    command, which gives you the path followed by packets `egressing` from your server
    until their destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ethtool` command is a program that manipulates the Ethernet card settings,
    such as port speed, auto-negotiation, the duplex mode, and Wake-on-LAN. You can
    install it by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: To check the `ethtool` options, you have to run either `man ethtool` or `ethtool
    -h | less`.
  prefs: []
  type: TYPE_NORMAL
- en: Performing essential system administration tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore a useful set of Ubuntu Server administration
    tasks such as monitoring and processes management.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a system administrator, monitoring tasks are the most important because
    they allow us to keep our system robust and prevent incidents. The Ubuntu Server
    has a powerful set of monitoring tools that cover CPU usage, hard disks, virtual
    memory, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some tools come with Ubuntu straight out of the box, while others need to be
    installed. The `sysstat` package contains some of them. You need to install it
    by using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: One of the most important resources that an Ubuntu Server administrator should
    permanently monitor is the memory use, because running out of memory will negatively
    affect system performance.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `free` and `top` commands to see basic information about the
    use of your RAM and swap. To get more detailed information about your server memory
    use, you can refer to the `vmstat` command. The `slabtop` command is useful in
    case you would like to show how much memory the kernel (the slab cache) of your
    server is consuming.
  prefs: []
  type: TYPE_NORMAL
- en: As seen earlier, the `top` command is used to watch the currently running processes.
    By default, those processes are sorted by the CPU usage. You can also use `top`
    to keep a tab on your memory usage in a screen-oriented way. When top is running,
    just press *Shift+m*, and the running processes will be sorted by the memory use
    (so that you can examine which processes are consuming memory the most).
  prefs: []
  type: TYPE_NORMAL
- en: Another important system resource that an Ubuntu Server administrator monitors
    is the CPU usage. The `vmstat` command that we previously talked about can produce
    basic statistics related to CPU usage, such as system activity, user activity,
    the I/O wait time, the idle time, and so on. If you want more detailed reports
    of CPU utilization, you can use the `iostat` command that comes with the `sysstat`
    package, which was installed at the beginning of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here''s how the CPU statistics are shown every 5 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative to `iostat` in terms of viewing CPU usage information as well
    as other performance-related items is the `dstat` command, which comes with the
    `dstat` package. The `dstat` command has some advantages over other tools, such
    as the simplicity and clarity of information shown, and the use of colors. To
    install this tool, install the `dstat` package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of `dstat` displaying CPU information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring resources](img/B04800_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As discussed previously, the `top` command allows you to specifically find out
    which processes are consuming processing time the most. By default, the sorting
    order is based on CPU usage, but if you change it for some reason (like we did
    before when we changed it so that it was based on memory usage), you can revert
    to the default sorting order by using the *Shift+p* command when `top` is running.
  prefs: []
  type: TYPE_NORMAL
- en: Commands such as `du` and `df` allow you get basic information about storage
    space available to your Ubuntu Server. For more details about how your storage
    devices are performing, you can use commands such as `vmstat` and `iostat`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the capacity of the `vmstat` command by using it to list
    statistics related to your disks. Here''s an example of using `vmstat` to view
    information about the disk read and write statistics using the -d option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Another useful command in terms of file system management is `lsof`. It allows
    you to find out what files and directories are actually open on your storage devices.
    One of the most common cases where you need to use this command is when you are
    trying to unmount a file system that keeps telling you that it is busy. In this
    case, you can evaluate which open file is preventing the unmounting, decide if
    you want to stop the process holding that file open, and perform the unmounting
    of the file system again.
  prefs: []
  type: TYPE_NORMAL
- en: Processes management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed before, the `ps` and `top` commands allow us to show a lot of information
    related to the running processes. In this section, we will examine other commands
    that allow us to manage processes.
  prefs: []
  type: TYPE_NORMAL
- en: When you are running `top`, you can perform a lot of actions besides sorting.
    For example, you can type the letter *k* followed by a signal number (for example,
    9 or 15) and the PID, which sends that signal to the process that has this PID.
    You can also use the letter *n* to change the priority of one process.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to change the priority of a running process is via the `renice`
    command. If you want to change the default priority or set a higher or lower priority
    at the time of launching a process, you can use the nice command.
  prefs: []
  type: TYPE_NORMAL
- en: Another way that can be used to change how a running process behaves is to send
    a signal to that process. Commands such as `kill`, `pkill`, and `killall` can
    be used to send signals to running processes. We can represent signals by numbers
    (the famous ones are 9 and 15) and strings (such as SIGKILL and SIGTERM).
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling the processes that need to be run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Commands associated with the `cron` facility can be used to make a command
    run at a specific time (including now) so that it is not connected to the current
    shell. The `at` command runs a command at the time you set. For example, if you
    want to run a command in 1 minute, all you need is to run the `at now +1 min`
    command. Then, when you get the at prompt, you write the command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: After this, press *Enter*. You will get the at prompt again. You can enter another
    command or number of commands that you want, with each one on a line. Then, type
    enter. Finally, run the *Ctrl+d* shortcut to close the at prompt.
  prefs: []
  type: TYPE_NORMAL
- en: In the same manner, you can type `at now +7 days` to run a command after 7 days.
    Alternatively, if you would like to execute a command at a specific date, you
    can run `at` followed by the date in the `dd/mm/yy` format.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check the list (queue) of the at jobs that were set to run after
    you finish entering the commands, as discussed previously, you have to run the
    `atq` command. If you are a new user, you can see your own queued at jobs. Only
    the root user can see everyone's queued `at` jobs. The `atrm` command, followed
    by the job number (given `at` the creation step or via the `atq` command), is
    used to delete an `at` job from the queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `at` command is used to queue up a command that is supposed to run only
    once. If you want to set up commands so that they run repeatedly, you can use
    the `cron` facility, which allows you to script the `cron` jobs scheduled in the
    `crontab` files. Generally, there is one system `crontab` file (which is `/etc/crontab`),
    but each user can create their personal `crontab` file that allows them to launch
    commands `at` the times that they choose. To create a personal `crontab` file,
    you need to type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `crontab -e` command opens the `crontab` file in case it exists, or it
    creates a new one using a text editor from your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In a `crontab` file, each job is represented by a single line that determines
    when to run the job, followed by the command that needs to be run. For the `times`
    fields, they are in the following order: **minute** (**m**), **hour** (**h**),
    **day of month** (**dom**), **month** (**mon**), and **day of the week** (**dow**).
    You can use `*` in these fields (for `any`).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the fields from left to right: minute (0 to 59), hour (0
    to 23), date of the month (0 to 31), month (0 to 12 or Jan, Feb, Mar, Apr, May,
    Jun, Jul, Aug, Sep, Oct, Nov, or Dec), and day of the week (0 to 7 or Sun, Mon,
    Tue, Wed, Thu, Fri, or Sat). An asterisk (*) in a field means that any value for
    that field can be matched.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use a single value for each field or more than one. For example, for
    the `dow` field, you can use the **Mon**, **Fri** value to run a job at every
    beginning and end of the week (every **Monday** and **Friday**). Providing another
    example, for the `mon` field, a value of 1,4,7,10 means that the job will be launched
    in the first month of each quarter (January, April, July, and October).
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `crontab` jobs (including errors) is sent via an e-mail to
    the user belongs to the `crontab` file (unless redirected).
  prefs: []
  type: TYPE_NORMAL
- en: To list the contents of your `crontab` file, you should run `crontab –l`, and
    to delete your `crontab` file, you should run `crontab -r`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw different aspects of configuring and administering the
    Ubuntu Server system. We were introduced to CLI using network settings, package
    management, and administration tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start a new part of this book, which involves service
    creation and management.
  prefs: []
  type: TYPE_NORMAL
