- en: Chapter 1. Setting Up Your Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can get into the realms of building our home security system, there's
    a bit of preparation work needed to get our Raspberry Pi up and running. So, we're
    going to go through the initial steps needed to get our Pi ready to be worked
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the different versions of the Raspberry Pi that are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right Raspberry Pi version for your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the SD Card with the Raspbian Operating System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to remotely access the Raspberry Pi over your home network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating our operating system with the latest packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the time-keeping options on the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the user and root passwords to secure our Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which flavor of Pi?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Raspberry Pi was released in 2012, there have been several versions
    of the mini-PC board released. I'll go though each of the versions released with
    their respective features so that you can choose which one is suitable for your
    particular project.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that it doesn't really matter which version you use in terms
    of power, as our home security system doesn't necessarily need loads of processing
    power, depending on what you want your system to do, of course). You might have
    an older board kicking about that will work for you.
  prefs: []
  type: TYPE_NORMAL
- en: The other piece of good news is that the GPIO interface pin layouts are the
    same across all the versions. The later versions have more pins, but the original
    26 pins still remain in the same place.
  prefs: []
  type: TYPE_NORMAL
- en: '![Which flavor of Pi?](img/B04579_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The latest Raspberry Pi Version 2
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model A
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The baby of the family is the Model A; it was released as a lower-cost version
    of the Model B, shown in the following section. Its main differences from the
    Model B are that it features just 256Mb of memory and has no Ethernet port; so
    if you want to connect this board to a network, you are limited to using a USB
    Wi-Fi dongle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi Model A](img/5278_Ch01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi Model A Board Layout
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model B
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This was the first version of Raspberry Pi to be released; an updated revision,
    which improved the power system and USB port protection, came later. It features
    512Mb of memory and has an Ethernet port for connecting to your network. This
    is probably the most common version used, and having the Ethernet port is incredibly
    useful, especially to get up and run quickly in order to set up and configure
    your Pi without the need for a keyboard and monitor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi Model B](img/5278_Ch01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi Model B Layout
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Model B+ and Model 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2014, the Raspberry Pi Foundation released a new version of the board that
    had some fundamental changes as compared to the previous version. The most fundamental
    changes were the board layout, form factor, and mounting points—much to the dismay
    of the many enclosure and accessory manufacturers out there.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, we were in the middle of prototyping an enclosure for a commercial
    product that we were developing based on the Raspberry Pi—fortunately we caught
    wind of the board change in the nick of time and were able to change our enclosure
    to support the upcoming model B+.
  prefs: []
  type: TYPE_NORMAL
- en: The main electronic changes to this board are the addition of 2 more USB ports
    that can deliver more power to peripherals, an expanded GPIO interface, and the
    removal of the composite video port that is now consolidated into the audio jack.
    It also now uses a micro SD card with a better card slot.
  prefs: []
  type: TYPE_NORMAL
- en: 'In February 2015, a more powerful Raspberry Pi was released: the Raspberry
    Pi Model 2\. It''s similar to the Model B+ in terms of form-factor and interfaces,
    but is now reportedly 6-times faster than the Model B/B+ with its upgraded ARM
    processor and 1Gb of memory.'
  prefs: []
  type: TYPE_NORMAL
- en: At the same low cost of less than £30, it's a fantastic little board and a great
    power-house for embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi Model B+ and Model 2](img/5278_Ch01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Raspberry Pi Model B+ and Model 2 Layout
  prefs: []
  type: TYPE_NORMAL
- en: Model comparison table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | Model A | Model B | Model B+ | Version 2 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: So which one?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Essentially, any version of the Raspberry Pi will work with the modules presented
    in this book, but if you want to exploit features such as the camera, which may
    require more processing power and memory, or want to have an Ethernet connection,
    you'll need to use the Model B.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to start plugging additional stuff into the USB port, such as a
    GSM modem, then I recommend that you use the Model B+ as it delivers more power
    to those kinds of devices without the need for additional USB hubs.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to do more processing with video and images from an attached camera,
    or want to connect lots of things, then go for the latest **Model 2** board. I'm
    going to assume that's the one you have chosen for this project, and that's the
    one I'll be using throughout this book; just be aware of any limitations if you
    choose to use an earlier model.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Raspberry Pi Foundation site has more detailed information about each model.
    You can visit it at [https://www.raspberrypi.org/products](https://www.raspberrypi.org/products).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the SD card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Raspberry Pi only boots from an SD card (or micro SD card for the B+ and
    v2 models), and cannot boot from an external drive or USB stick (well that's not
    strictly true, but is beyond the scope of this book).
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended that you use a Class 10 SD card for performance, but a Class
    4 or 6 card will be fine for this project. You'll need to have a minimum card
    size of 4Gb.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our Raspberry Pi board and SD card to hand, we need to prepare
    the SD Card specifically for our home security system. We're going to use the
    standard Raspbian operating system as there really is no reason to use any other
    distribution; it's the de facto choice for the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Raspbian image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You'll need to grab the latest **Raspbian OS** image from the Raspberry Pi site
    at [https://www.raspberrypi.org/downloads](https://www.raspberrypi.org/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: Download the Raspbian OS ZIP file containing the image to your PC.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, the latest version was Raspbian Jessie version 4.1 (`2015-09-24-raspbian-jessie.zip)`.
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, unzip the file and you'll have the file, `2015-09-24-raspbian-jessie.img`.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to do is burn this image to your SD card…
  prefs: []
  type: TYPE_NORMAL
- en: Using Microsoft Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On a Windows PC, the best way to burn the image to your SD card is to use the
    **Win32 Disk Imager** utility. This can be downloaded from [http://sourceforge.net/projects/win32diskimager](http://sourceforge.net/projects/win32diskimager).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current version, at the time of writing, is 0.9.5.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't have an installer, and launches directly from the EXE file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to create your SD card image:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert your SD card into the PC and launch the Win32 Disk Imager.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SD card device drive letter (make sure it's right!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the Raspbian image file you've just downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Write** button to create the SD card image.![Using Microsoft
    Windows](img/5278_Ch01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On a Linux PC, you'll need to use the **gparted** and **dd** utilities to burn
    the image on your SD card.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create your SD card image:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract `2015-09-24-raspbian-jessie.img` to your `Home` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert your SD card into the PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're not already in a shell terminal window, open one (you can use *Ctrl*
    + *Alt* + *T* on most graphical-based desktop systems).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command in the shell terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the list check, your SD card appears as a drive device (for example, `/dev/sdb`).
    It's crucial that you ensure you use the right device in the next step. We'll
    assume that your device is `/sdb`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To burn the image to the SD card, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Hit *Enter* and go make a cup of tea or coffee as this will take a while. You'll
    know that it's finished when the command (`$`) prompt re-appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the command prompt does re-appear, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once that command has finished, you can remove the SD card from the PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Booting your Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You're now ready to boot up your Raspberry Pi. Pop your shiny new SD card into
    it and plug in the power.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you have a monitor attached to your Pi, you should see your system
    booting up nicely. Although you could wait for it to boot up and connect to it
    via a terminal session (we'll look at that later), I recommend that you connect
    a monitor to it, at least in the first instance, just to make sure everything
    is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: In the new **Jessie** version of Raspbian, you'll boot straight into a desktop
    GUI, which is a major change from previous versions, where you'd be taken to the
    **raspi-config** utility, the first time the system is run, where you'd set up
    your Pi, and importantly, expand the file system to use the entire space available
    on your SD card.
  prefs: []
  type: TYPE_NORMAL
- en: '![Booting your Pi](img/B04579_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debian Jessie boots into the GUI by default
  prefs: []
  type: TYPE_NORMAL
- en: Expanding the file system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you first create your Raspbian SD card, you'll only be left with about
    200Mb of space in the file system, regardless of the size of your SD card. This
    is not much use, so we want to expand the file system so that it uses all of the
    available space on the card.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, this is very easy on the Raspberry Pi now, as this function is
    available in the Raspberry Pi Configuration Tool on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: To access the new configuration tool, go to **Menu** and select **Preferences**
    | **Raspberry Pi Configuration**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding the file system](img/B04579_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The new Raspberry Pi Configuration Tool
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Goodbye GUI**'
  prefs: []
  type: TYPE_NORMAL
- en: Most of our work is going to be done in the command-line interface (CLI). Therefore,
    before we reboot the system in a minute, let's change the **Boot** option by selecting
    **To CLI**, as shown in the previous screenshot, so boot into the command line
    going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, now we click on the **Expand Filesystem** button, and in a couple of
    seconds, you'll see a confirmation message. The filesystem will be expanded when
    the system next reboots.
  prefs: []
  type: TYPE_NORMAL
- en: Using the raspi-config utility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have an older version of Raspbian, or you're not using the desktop GUI,
    then you'll need to use the raspi-config utility (which is still better than the
    old days when we had to do this manually in the shell). The first time you boot
    up, you'll be taken straight to the raspi-config utility.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the raspi-config utility](img/5278_Ch01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first option is the `Expand Filesystem` option; select this and you''ll
    see various commands scrolling up the screen. Once it''s finished, you''ll see
    the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Click on `OK`.
  prefs: []
  type: TYPE_NORMAL
- en: Select `Finish` on the config screen and reboot your Pi when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: After your Pi reboots with its fuller file system, you'll be taken straight
    to the shell prompt where you can log in with the default user and password.
  prefs: []
  type: TYPE_NORMAL
- en: '**Login**: `pi`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password**: `raspberry`'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you boot into the shell and have the Ethernet connected, hopefully the
    Pi will have connected to your home network and acquired an IP address from your
    router. If this is the case, you should see the **IP address** that has been issued
    just before the login prompt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Pi](img/5278_Ch01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from my screenshot, it's given me the IP address, `192.168.0.118`.
    This is good because I can now access the Pi remotely, using a secure shell (SSH)
    client to connect to it from the comfort of my laptop. This is particularly useful
    when my Pi is in the office and I want to sit on my sofa in front of the telly
    but still work on it, which I often do when I'm feeling lazy.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, download **PuTTY**: a utility that allows you to connect to shell
    terminals remotely over the network. You can download it from [http://www.putty.org](http://www.putty.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Install and launch **PuTTY** and you're ready to connect to your Pi remotely
    from the comfort of your sofa.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Pi](img/5278_Ch01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Type the IP address of the Raspberry Pi into the Host Name box and click on
    **Open**. You'll be connected to your Pi in a remote terminal window. Once you've
    logged in, you can do pretty much everything on your Pi, as if you were sitting
    in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Pi](img/B04579_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We'll assume from now on that most of the work we do will be through a remote
    shell session, unless highlighted otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the command line to launch the Raspberry Pi remote shell—for
    example, from another Linux system—use the following command from your terminal
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You'll then be prompted for the Pi's password and taken into a shell session.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Pi](img/B04579_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Pi shell session launched from a Debian desktop terminal window
  prefs: []
  type: TYPE_NORMAL
- en: Getting up to date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Something that you should get into the habit of doing is updating the operating
    system regularly; even though you may have the latest image installed, it''s very
    likely that there are updated packages available. To update your OS, enter the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, enter the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This may take a while, depending on the number of updates required.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the right time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspberry Pi doesn't have on-board real-time clock hardware. This is one
    of the deliberate omissions to keep the cost of the board down. Instead, the Pi
    gets its time when it boots up from time servers on the Internet using the **Network
    Time Protocol** (**NTP**). However, if there is no Internet connection at the
    time of booting up, then the time will be wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our security system, it's important that the time is kept accurate so that
    timestamps on log files and images are correct.
  prefs: []
  type: TYPE_NORMAL
- en: fake-hwclock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `fake-hwclock` package is included in the latest Raspbian distributions,
    but in other past versions it wasn''t. If you need to install it, use the command
    that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`fake-hwclock` is used by the Raspberry Pi to try and keep time when there
    is no network connection. It will regularly save the current time and restore
    it at boot-up. The obvious problem with this is that if the Pi has been switched
    off a few days, then the time will be set to the last time that it was on, using
    `fake-hwclock`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see what time it last logged, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: ntp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Network Time Protocol** (**NTP**) is used when there is an Internet connection
    available and it can request the latest most accurate time from one or more time
    servers on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the **ntp service** is enabled on the latest Raspbian distribution,
    but it will initially get its time at boot-up from `fake-hwclock` if there is
    no Internet connection. There may be times when it's necessary to force the ntp
    service to update from the Internet—for example, if the Internet connection is
    restored sometime after boot-up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To force the ntp service to update from the Internet, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Talking of security…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's no point in having a security system if the system itself is not secure.
    So, now we'll change the default password for the **pi** user.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the prompt, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: What is this sudo thing anyway?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'd have noticed that we've been putting `sudo` at the start of each command
    that we run in the terminal window. This is so that commands are run as the **root
    user**—the highest security level. This elevated security is required to perform
    many operations. `sudo` actually means *super do*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can''t be bothered to type `sudo` every time, then you can switch to
    the super user by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You'll see that the prompt changed from a `$` to a `#`, which indicates that
    you are now running as the root user.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this might be a good time to change the root user password too! To do this,
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Connecting via Wi-Fi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also connect your Raspberry Pi to your network using Wi-Fi by plugging
    a USB dongle into it. There are additional configuration steps required to make
    this work, which are beyond the scope of this chapter, but there are many resources
    available covering this subject.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find recipes for connecting your Raspberry Pi using Wi-Fi in the **Raspberry
    Pi Networking Cookbook** by Rick Golden, published by Packt Publishing ([https://www.packtpub.com/hardware-and-creative/raspberry-pi-networking-cookbook](https://www.packtpub.com/hardware-and-creative/raspberry-pi-networking-cookbook)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took our Raspberry Pi out of its box and prepared it to
    be the centerpiece of our home security system. Along the way, we installed and
    set up the operating system, connected our Pi to the network, and accessed it
    remotely. We also secured our Pi and made sure it could keep the right time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to explore the GPIO port and the various interfaces
    it features. We'll look at the various things we can connect to the Raspberry
    Pi using the GPIO port, including switches and sensors, as we start to build our
    home security system.
  prefs: []
  type: TYPE_NORMAL
