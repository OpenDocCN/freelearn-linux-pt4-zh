- en: Subshells, Signals, and Job Controls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子 Shell、信号与作业控制
- en: 'Whatever we have seen so far was pretty straightforward. We launched a script
    that executed some commands, instances, variables, and made something out of it,
    that is all--one command after the other, one instruction piled on the previous
    one. This is what we would call a serial execution, one command after the other
    just like domino tiles: the first coming in and the first being processed; and
    this brings to mind the concept of the FIFO queue, **First In First Out**.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的内容都相当直接。我们启动了一个脚本，执行了一些命令、实例、变量，并从中做出了些事情，仅此而已——一条命令接着一条命令，一条指令堆叠在上一条指令上。这就是我们所说的串行执行，一条命令接着另一条，就像多米诺骨牌：第一条先到，第一条先被处理；这让人联想到
    FIFO 队列的概念，**先进先出**（First In First Out）。
- en: 'What if we wanted to process more than one instruction at a time? Well, we
    cannot do this and it would not be incorrect: a CPU is a serial device and it
    can process only one instruction at a time. What we use to give us the *taste* of
    multitasking is having the CPU switching between an instruction and the other
    really fast. So, instead of completely processing an instruction before passing
    on to the other, the CPU will work a bit on the first one, pass it to work a bit
    on the second, and then again back to the first for a while. It is this back and
    forth idea that gives us the illusion that our CPU is working on more than one
    thing at the same time. And then, we have systems with multiprocessors, and we
    can take advantage of this kind of architecture so that we can distribute processes
    on different CPU, so they can really be elaborated in parallel.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想同时处理多个指令怎么办？好吧，我们不能这么做，这也不会是错的：CPU 是一个串行设备，它一次只能处理一条指令。我们用来给我们带来*多任务处理的感觉*的，是让
    CPU 在指令之间快速切换。所以，CPU 不会在完全处理完一条指令后再转到另一条，而是会先处理一点第一条指令，再处理一点第二条，然后再回到第一条指令，继续处理一段时间。正是这种来回切换的方式让我们产生了
    CPU 同时处理多项任务的错觉。接着，我们有了多处理器系统，我们可以利用这种架构，将进程分配到不同的 CPU 上，从而实现真正的并行处理。
- en: Whatever we decide to do, everything starts from an invocation, a leap of faith
    into a new instance of the main shell so that a new child shell is given birth,
    and it will be devoted to our tasks. So, first, what is a subshell?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们决定做什么，一切都始于一个调用，一次对主 shell 新实例的信任跃迁，从而诞生了一个新的子 shell，并且它将致力于我们的任务。那么，首先，什么是子
    shell？
- en: What is a subshell?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是子 shell？
- en: Let's start with a more basic question. What is a shell? To make it simple,
    a shell is an interface between the user and the underlying operating system.
    It can be a command-line interpreter or a graphic interface, but the purpose of
    a shell is to be an intermediary between the user and the core of the system,
    allowing the former to access the services offered by the latter. So, for instance,
    a bash shell gives us a command-line interface access through a Terminal and a
    series of commands that allows us to communicate with the operating system and
    make use of its services to perform tasks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个更基础的问题开始。什么是 shell？简单来说，shell 是用户与底层操作系统之间的接口。它可以是命令行解释器或图形界面，但 shell
    的目的是充当用户与系统核心之间的中介，使前者能够访问后者提供的服务。例如，bash shell 通过终端为我们提供了命令行接口，通过一系列命令让我们与操作系统进行交互，利用其服务来执行任务。
- en: 'In a shell, each command is usually executed after the former has concluded
    its task, but we can change to some extent this behavior leveraging some key concepts:
    background process, signals, and subshells.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 shell 中，每条命令通常是在前一条命令完成任务之后执行的，但我们可以在一定程度上通过利用一些关键概念来改变这种行为：后台进程、信号和子 shell。
- en: Background processes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台进程
- en: Let's start with an intuitive definition of a background process, and define
    it as a process with no interaction with the terminal it is launched from. This
    practically means that a background process has no interaction with the user and
    that's it. Technically, we can say that a background process is the one whose
    process ID group differs from the one of the terminal it has been launched from.
    We can define a process group as a bunch of processes sharing the same process
    group ID, which is an identifier allowing the system to manage all the processes
    as a whole. A process group ID is determined by the process ID of the first process
    of the group, also called process group leader; each subsequent process in the
    group will be the process group ID drawn from the process ID of the leader; and
    each child process is placed in the process group ID of its parent. Similarly,
    a session is a collection of process groups; and the first process in the session
    is also the session leader, which is the only process allowed to control a terminal,
    if any is available. Thus, the process that prepares the login session for the
    user is also the session leader for all the processes spawned during the "user
    session", and all the processes will be in a process group under the session.
    When a user session is closed, the kernel sends a **Signal Hang Up** (**SIGHUP**)
    signal to the leader of the session holding the terminal foreground process group.
    This is because when the user closes its interactive session, the connection to
    the terminal is closed and the foreground processes have no longer a terminal
    to access to, so they must be killed. That being said, a background process will
    be barred from reading or writing from the terminal with a** SIGnal due to TeleType
    INput** (**SIGTTIN**) in case it attempts to read from it and **SIGnal due to
    TTY OUtput** (**SIGTTOU**) in case it attempts to write to it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对后台进程的直观定义开始，将其定义为与其启动的终端没有交互的进程。这实际上意味着后台进程与用户没有交互，仅此而已。从技术上讲，我们可以说后台进程是其进程ID组与其启动终端的进程ID组不同的进程。我们可以将进程组定义为一组具有相同进程组ID的进程，该ID是一个允许系统整体管理所有进程的标识符。进程组ID由组的第一个进程（也称为进程组长）的进程ID确定；组中的每个后续进程将从组长的进程ID中获取进程组ID；每个子进程都放置在其父进程的进程组ID中。类似地，会话是一组进程组的集合；会话中的第一个进程也是会话领导者，它是唯一允许控制终端（如果有的话）的进程。因此，为用户准备登录会话的进程也是所有“用户会话”期间生成的进程的会话领导者，并且所有进程都将处于会话下的进程组中。当用户会话关闭时，内核会向保持终端前台进程组的会话领导者发送**挂起信号**（**SIGHUP**）。这是因为当用户关闭其交互式会话时，与终端的连接关闭，前台进程将无法再访问终端，因此它们必须被终止。话虽如此，如果后台进程尝试从终端读取，它将被禁止，并且在尝试向终端写入时会因**终端输入信号**（**SIGTTIN**）和**终端输出信号**（**SIGTTOU**）而受到阻止。
- en: Signals
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'In the early days of computing, signals were a means to deal with unusual events,
    and usually, their job was to reset a condition to a default state. Nowadays,
    with facilities such as job control, signals are used to actually instruct processes
    on what to do and are now more an interprocess facilities than a reset mechanism,
    as they were originally conceived. Each signal is associated to an action that
    must be performed by the process receiving it, so here is a brief list with some
    of the more interesting signals that the kernel can send to a process:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机早期，信号是处理异常事件的一种方式，通常用于将条件重置为默认状态。如今，借助诸如作业控制之类的设施，信号被用来实际指导进程执行操作，更多地成为进程间的通信设施，而非最初设想的重置机制。每个信号都与接收该信号的进程必须执行的操作相关联，以下是内核可以发送给进程的一些较为有趣的信号的简要列表：
- en: '`SIGCHLD`: This signal is sent to a parent process when a child terminates
    or stops.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGCHLD`: 当子进程终止或停止时，会向父进程发送此信号。'
- en: '`SIGCONT`: This tells the process that has been put on hold by `SIGSTOP` or
    `SGSTP` to resume its execution. These three signals are used in job controlling.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGCONT`: 这告诉已被`SIGSTOP`或`SGSTP`暂停的进程恢复其执行。这三个信号用于作业控制。'
- en: '`SIGHUP`: This signal is sent to a process when its terminal is closed and
    kills it. It owes its name to the old good times when connections were held over
    serial line, which hang up due to a line drop. If sent to a daemon, it usually
    forces them to reload the configuration file and reopen the log file.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGHUP`：当进程的终端关闭时，会发送此信号并终止进程。它得名于早期使用串行线路连接时的时代，那时候连接因线路掉线而挂起。如果发送给守护进程，通常会强制它们重新加载配置文件并重新打开日志文件。'
- en: '`SIGINT`: This is the signal given to the process when a user presses *Ctrl*
    + *C,* and it interrupts the process, terminating it. This signal can be ignored
    by the process.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGINT`：当用户按下*Ctrl*+*C*时，会向进程发送此信号，打断并终止该进程。该信号可以被进程忽略。'
- en: '`SIGKILL`: This terminates a process immediately. This cannot be ignored, and
    the process has to die immediately without closing or saving anything. (kill -9)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGKILL`：此信号立即终止一个进程。该信号不能被忽略，进程必须立即终止，且不会关闭或保存任何内容。（kill -9）'
- en: '`SIGQUIT`: When the process receives this signal, it quits performing a core
    dump. A core dump is a dump, a copy, of the memory used by the process, so we
    can find in it a lot of useful information such as a processor, registers, flags,
    data, which are  useful to debug the working state of the process itself.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGQUIT`：当进程接收到此信号时，它会退出并生成核心转储。核心转储是进程使用的内存的复制品，我们可以在其中找到很多有用的信息，比如处理器、寄存器、标志、数据等，这些信息对于调试进程的工作状态非常有用。'
- en: '`SIGSTOP`: This signal is sent to stop a process. It cannot be ignored.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGSTOP`：这个信号用于停止一个进程。它无法被忽略。'
- en: '`SIGTERM`: It is a termination request. This is the preferable way to kill
    a process since it allows the process to shut down nicely, releasing the resources
    and saving state and also killing all the child processes in an orderly way. It
    can be ignored by the process (kill -15).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTERM`：这是一个终止请求。这是杀死进程的首选方法，因为它允许进程正常关闭，释放资源并保存状态，同时有序地终止所有子进程。进程可以忽略此信号。（kill
    -15）'
- en: '`SIGTRAP`: This is a signal sent to a process when an exception or a trap arises.
    We already had a glimpse of traps, and we will see more about them now.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTRAP`：这是当异常或陷阱发生时发送给进程的信号。我们已经略微了解了陷阱，接下来我们会进一步探讨它们。'
- en: '`SIGTSTP`: This is an interactive stop, and it can be sent by the user pressing
    *Ctrl*+*Z*. It can be ignored by the process. The process pauses in its current
    state.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTSTP`：这是一个交互式停止信号，用户按下*Ctrl*+*Z*时可以发送该信号。进程可以忽略此信号。进程会在当前状态下暂停。'
- en: '`SIGTTIN`: This signal is sent to a background process when it tries to read
    from the terminal.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTTIN`：当一个后台进程尝试从终端读取数据时，会发送此信号。'
- en: '`SIGTTOU`: This signal is sent to a background process when it tries to write
    to the terminal.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGTTOU`：当一个后台进程尝试写入终端时，会发送此信号。'
- en: '`SIGSEV`: This is sent to a process when it goes on segmentation fault, and
    this happens when a process attempts to access a memory location; it is not allowed
    to access or in a way it is not permitted.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGSEV`：当进程发生段错误时，会发送此信号。段错误发生在进程尝试访问它没有权限访问的内存位置时。'
- en: So, we have signals, and we have process groups and sessions and this leads
    us to Unix job control. What is it? In Unix, we can control what we call jobs,
    and we are already familiar with those since this is another term to refer to
    process groups. A job is not a process, it is a group of processes. But what does
    control mean? Simply, we can suspend, resume, or terminate a job and send signals
    to it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有了信号、进程组和会话，这引出了 Unix 作业控制。那它是什么呢？在 Unix 中，我们可以控制我们所说的作业，而且我们已经很熟悉这些，因为这是进程组的另一个术语。作业不是一个进程，它是一个进程组。那么，控制是什么意思呢？简单来说，我们可以挂起、恢复或终止一个作业，并向它发送信号。
- en: 'When a shell session is started on a terminal, its process group is granted
    access to it, and it becomes the foreground process group for that terminal. This
    means that the processes belonging to the foreground group can read and write
    from the terminal, while the processes belonging to other process groups are barred
    from accessing the terminal and stopped if they try to. So, from the shell, you
    can interact with the terminal and perform different actions, for example, retrieve
    a list of processes and their job ID:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当在终端上启动一个 shell 会话时，它的进程组将获得访问终端的权限，并成为该终端的前台进程组。这意味着，属于前台组的进程可以从终端读取和写入数据，而其他进程组的进程则无法访问终端，如果它们尝试访问，进程会被停止。所以，从
    shell 中，你可以与终端交互并执行不同的操作，例如，检索进程列表及其作业 ID：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we can see, the `ps` and `awk` processes have the same process group ID,
    which is the process ID of the first command in the group, `ps`. Now, what about
    the job control? Let''s see how to start a process in the background:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The sleep command just waits for the amount of seconds we specify as an argument,
    but the ampersand is the key; it will put the process in the background. What
    we get in return is a job number `[1]` and a process ID; `ps` will show us more
    details:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s have a look at this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we put one sleep process in the background but used the `()` to execute
    it in the subshell, and it actually was executed in the foreground; but now, the
    main shell did not report any job or process ID because the child shell could
    not report back any information to the parent shell. The only job information
    we received was for the second sleep instruction performed in the parent shell,
    and interestingly, both the sleep processes have the same group ID.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Job controls
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, we have the  job ID, process ID, foreground, and background processes,
    but how do we control these jobs? We have a bunch of commands available, let''s
    have a look at how to use them:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**`kill`:** We can pass the job ID to this command, which will send the `SIGTERM`
    signal to all the processes belonging to the job itself:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can also pass to kill a specific signal to send to the process. For instance, `kill
    -15` will nicely terminate a process with a `SIGTERM` signal, and if it refuses
    to die, `kill -9`  will send a `SIGKILL`, which will instantly terminate a process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Which signals can we send to a process? Either `kill -l` or  `cat /usr/include/asm-generic/signal.h` will
    give us a list of all the signals supported.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**`killall`:** If we know what is the name of the process, the easiest way
    to kill it is through the `killall` command followed by the name of the process:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But `killall` has another interesting to use. Let''s run the sleep command
    for four times, each time with a different argument:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s check the list of processes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can see the four processes: same name and different argument. Now, let''s
    use `killall` giving the process name, sleep, as its argument:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All the processes have been killed at once. Quite handy, isn''t it? Let''s
    make the last check:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: No more instances of sleep running now; we killed everything with one single
    run of `killall`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**`jobs`:** This shows the processes running in the background along with their
    job ID:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**`fg`:** This sends a background running job to the foreground. It accepts
    the job ID as an argument. If no job ID is provided, the current job is affected:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**`bg`:** This sends a foreground job to the background. If no job ID is provided,
    the current job is affected.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`suspend`:** This suspends the shell until a `SIGCONT` signal is received.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`logout`:** This logs out from the login shell.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`disown`:** This removes a job from the shell table of active jobs.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`wait`:** This interesting command stops the execution of a script until
    all the background jobs have terminated or, if passed as an argument, until a
    job ID or a PID terminates, and returns the exit status of the process it was
    waiting for.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Job ID** | **Meaning** | **Example** |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| `%n` | Job number | Kill %1 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| `%s` | String the command executed starts with | sleep 200 &[1] 9486kill
    %sl[1]+ Terminated sleep 200 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| `%?s` | String the command executed contains | sleep 200 &[1] 9504kill %?ee[1]+
    Terminated sleep 200 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '| `%%` | Last job that has been either stopped in the foreground or started
    in the background | sleep 200 &[1] 9536kill %%[1]+ Terminated sleep 200 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '| `%+` | Last job that has been either stopped in foreground or started in
    the background | sleep 200 &[1] 9618fg %+sleep 200 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| `%-` | Last job | sleep 200 &[1] 9626kill %-[1]+ Terminated sleep 200 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| `$!` | Last process in the background | sleep 200 &[1] 9646sleep 300 &[2]
    9647sleep 400 &[3] 9648kill $![3]+ Terminated sleep 400 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '**`times`:** We saw this command at the opening of this book. It gives us statistics
    on time elapsed during the execution of a command.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`builtin`:** This execute a builtin command disabling functions and non-builtin
    commands, which have the same name as the builtin.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`command`:** This disables all the aliases and functions for the specified
    command:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**`enable`:** This enables or disables the `-n` builtin command, so if we have
    a builtin and an external command, then when invoked, the builtin will be ignored
    and the external command will be executed. Specifying the -a option will show
    a list of all the builtins along with their status, while the `-f` switch will
    load a builtin as a shared library module from a compiled object file.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`Autoload`:** This is not enabled by default in Bash and it must be loaded
    through enabling `-f`. It marks a name as a function name and not a builtin or
    an external command reference. The named function must reside in an external file
    and it will be loaded from there.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, we had a look at the foreground and background processes and at the job
    controlling commands; now, we can see how to work with subshells and what benefit
    they can bestow on our scripts.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Subshells and parallel processing
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already talked a bit about subshells in the opening chapters of this book;
    they can be defined as child processes of their main shell. So, a subshell is
    a command interpreter inside a command interpreter. When does this happen? Well,
    usually when we run a script, this spawns its own shell and from there executes
    all the commands listed; but notice this nice detail: an external command, unless
    invoked using `exec`, spawns a subprocess, but a builtin doesn''t. And this is
    the reason why the bultins execution time is faster than the execution time for
    the corresponding external command, as we saw in the previous pages of this book.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, what can be useful for a subshell? Let''s see a small example that will
    make everything easier:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Nothing special. We echo in the first subshell spawned by the script, and then
    open a subshell from inside the subshell and echo the $i variable using a range
    between `1` and `10`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As I just said, there is nothing really special in this script other than the
    way we called a subshell using `(command_1; command_2; command_n)`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever is inside the parentheses is executed in a new subshell isolated from
    the parent shell since; whatever happens inside the subshell is local to this
    environment:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s run this piece of code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we can see from the example, this is a one-way inheritance from the parent
    to the child, nothing climbs up the ladder. But it is possible to spawn subshell
    from inside a subshell, so to have a nesting structure, this is nice; but we could
    lose track of where we are. It''s better to have a handy variable such as `$BASH_SUBSHELL`
    available:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Firstly, we wrote the code in this fancy way just to highlight the nested structure
    of the shells; we can use a more compact notation on a production script. Notice
    the two variables:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '`$BASH_SUBSHELL`: This internal variable is available from Bash version 3 and
    holds the subshell level'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$BASHPID`: This holds the process ID of the shell instance'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s run the script and have a look at the output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Well, we have the subshell levels nicely printed along with the PID of each
    shell instance, and this shows us that they are actually different processes spawned
    by each parent shell. We could be tempted to use the internal `$SHLVL` variable
    to keep track of the shell level, but unfortunately this is not affected by the
    nested shells as the following example highlights:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Nice, but what happens when we exit from a nested shell? Time for another example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the lines of code we spawn an inner subshell counting from `1` to `10` and
    printing to the `stdout` until we reach `5`: in this case we exit the subshell
    and jump back to the first level. Will the script continue and print the other
    three numbers? Running it will reveal the answer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Yes, the exit call affected the inner subshell only and the rest of the script
    kept running on the upper level.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, we saw some fancy stuff about subshells, but we  can use them for parallel
    execution, but how? Just as usual, let''s start with a script:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The first thing to notice is the `&` character whose job is to put in background
    the commands or the shells it follows. In this example, the first subshell has
    an infinite loop, and if we do not send it in the background, it will prevent
    the second subshell to be spawned and its content executed. But let''s see what
    happens when we send it in the background:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So, the second subshell was correctly spawned and the `for` loop executed, but
    what happened to the first infinite while loop?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Well, it is still there running in memory. You can use `&` not just for subshells
    but also for any other command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Do you want the command you issued to run even after you logged off the system?
    Just run the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It will run in a subshell in the background, and nohup will catch the `SIGHUP`
    signal that is sent to all the subshells and processes when the main shell is
    terminated. This way, the subshell and the related command will not be affected
    by the terminate signal and will continue its execution.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在后台的子shell中运行，nohup将捕捉到发送给所有子shell和进程的`SIGHUP`信号，该信号会在主shell终止时发送。这样，子shell和相关的命令将不会受到终止信号的影响，继续执行。
- en: 'Going back to subshells, why would you want to send in the background an entire
    subshell and not single commands or compounds? Think of subshells as containers:
    tear down a problem in less complex tasks, enclose the latter in subshells, and
    have them to execute in the background, and you will save time having them executed
    in parallel.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 回到子shell，为什么你要将整个子shell送到后台，而不是单独的命令或复合命令？将子shell看作容器：将问题分解为更简单的任务，将后者封装在子shell中，并让它们在后台执行，这样你就能节省时间，并使它们并行执行。
- en: 'We just said parallel, but actually Bash does not optimize the execution of
    commands and script for a multicore architecture. If we want something more core
    wise, we can install a nice program called *parallel*. We will not talk much about
    this program since it is not really Bash related, but it is a nice tool for the
    reader to explore, a tool core savy:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才提到parallel，但实际上Bash并没有为多核架构优化命令和脚本的执行。如果我们想要更好的核心利用率，可以安装一个名为*parallel*的好工具。我们不会深入讨论这个程序，因为它与Bash关系不大，但它是一个值得读者探索的好工具，非常适合核心优化。
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The basic syntax of parallel is quite easy:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: parallel的基本语法相当简单：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'It is similar to the following example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 它类似于以下例子：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Giving more arguments separated by `:::` will cause parallel to pass them to
    the command in all the combinations possible:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 给出更多用`:::`分隔的参数将导致parallel将它们传递给命令，生成所有可能的组合：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The number of jobs executed here is equal to the number of cores available,
    but we can modify this value with`-j+n` to add the `n` jobs to the cores. Fire
    parallel with `-j0`, and it will try to execute as many jobs as possible:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里执行的作业数量等于可用核心的数量，但我们可以通过`-j+n`修改该值，将`n`个作业添加到核心上。使用`-j0`启动parallel，它会尽可能执行尽量多的作业：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What can we do with parallel? Well, a lot of tricky stuff, but it is left to
    the reader to try and experiment with this nice utility; I am confident that a
    lot of new ideas will arise while tinkering with it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用parallel做什么呢？嗯，有很多复杂的操作，但这些留给读者去尝试和实验这个好用的工具；我相信在玩弄过程中会出现许多新想法。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We had a peek into some internals of our Bash, pidfiles, sessions, jobs, and
    had lots of stuff to play with. We also introduced parallel and subshell. This
    is probably one of those chapters that requires a bit of practice. Take time to
    experiment and try whatever comes to our mind to get confident with the job controls
    and background processes. Now that we had a look at the processes and how to manage
    them, we will proceed to see how to make them talk to each other and exchange
    information. Time for IPC!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经窥探了一些Bash的内部细节，学习了pid文件、会话、作业，且有很多东西可以尝试。我们还介绍了parallel和子shell。这可能是那些需要一些练习的章节之一。花时间实验并尝试各种想法，以便熟练掌握作业控制和后台进程。现在我们已经了解了进程及如何管理它们，接下来我们将学习如何让它们相互通信并交换信息。是时候谈谈进程间通信（IPC）了！
