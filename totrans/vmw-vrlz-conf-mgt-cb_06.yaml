- en: Chapter 6. Compliance Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing compliance packs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating compliance rule groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom compliance rules for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom compliance rules for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom compliance rules for virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the default filter set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating compliance templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the compliance of the infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting compliance rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating compliance exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compliance means meeting requirements. It is also used to refer to industry-wide
    or government rules and regulations that mention how data should be managed, and
    the need for organizations to be compliant with those regulations.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a rule for password complexity, such as the length of the password
    not being fewer than 12 characters. Now, you need to check whether this is true
    for all the machines in your infrastructure. Let's assume you have a few thousand
    machines to check and, if they aren't in compliance, reconfigure.
  prefs: []
  type: TYPE_NORMAL
- en: You can understand how much time it would take to go through each machine, check
    the setting, and correct it if it's to be found noncompliant. Now, multiply those
    efforts for a few hundred rules–how do you document all the statuses to show the
    auditor? This becomes more complex when you want to be compliant for various government
    and industry standards such as ISO, HIPPA, and Suburban Oxley. They have a few
    hundred rules per standard and changes per operating system. Also, you may have
    your own compliance rules, which may be different from the various standards;
    you need to check them as well. With some rules, there is the possibility that
    you need a deviation approved by your security team, and hence, being noncompliant
    with the rule should not affect your compliance score, so you need to add these
    as exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the complexity of compliance is clearer, we need something that can
    do all this for us easily. There are other tools in the market, such as System
    Center Configuration Manager, BMC BSA, and Puppet, that are capable of doing this,
    but VCM is much better than these, for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: There are more than 50 ready-to-use industry and government standard compliance
    packs available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own compliance pack is a very easy process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rules are processed on the data captured and stored on the VCM server, so
    that we get the setting configured on the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is much more cost effective, as it is part of the vRealize Operations suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can check the compliance of the VMware virtual infrastructure, as well as
    supported managed machines, in one console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can enforce compliance for noncompliant rules (although not all rules and
    OSes are supported)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In my opinion, this list is enough to understand why we should use VCM instead
    of any other tool to manage the compliance of the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The constructs of VCM compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To measure compliance, we need to create various elements in VCM. Let's get
    introduced to them.
  prefs: []
  type: TYPE_NORMAL
- en: Rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have learned that compliance means meeting the requirements put forth by
    a standard, so to check compliance, we need to create a rule. Basically, a rule
    is the interpretation of the requirement put forth by the standard, which can
    then be understood by VCM. To continue with our previous example, our requirement
    was to have a password length of at least 12 characters. When we convert this
    requirement, what we get in VCM is a rule.
  prefs: []
  type: TYPE_NORMAL
- en: Rules can be basic or complex. A basic rule just checks the contents of data
    properties while with a complex rule, we can use logic to check for conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filters are used to filter machines for conditions. For example, we create some
    rules and we want those rules to only be checked against a certain OS. So, we
    create a filter for that OS.
  prefs: []
  type: TYPE_NORMAL
- en: Rule groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rules are grouped together under rule groups; for example, we can group all
    the rules that are applicable to Windows Server 2012 R2 under one rule group.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Templates are used to group multiple rule groups together. They are used to
    check the compliance of machine groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example: in our company, we have rules, and they might be different
    for different versions of Windows. We can create the required rules groups for
    each OS that will be filtered on the basis of the filters created in each rule
    group. Then, all the rule groups will be grouped in a single template and that
    template can be used to check the compliance of the infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Importing compliance packs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are more than 50 compliance packs available for download, and the list
    keeps on growing as VMware keeps on adding new compliance packs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an Internet connection for the VCM server in order to download
    the compliance packs from VMware. The **C**ontent Wizard tool will use a proxy
    configured at the system level; have a look at the *There's More...* section of
    this recipe for proxy details.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now download a compliance pack from the Internet:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the VCM server's OS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the **Content Wizard** tool from the desktop (**Start** | **VMware vRealize
    Configuration Manager **| **Content Wizard Tool**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page of the wizard, select **Get Updates from Internet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other option is **Get Updates from Local File System**; for this, all files
    must be available in the `C:\ProgramData\CM\Content` folder. You must obtain updated
    files from VMware and manually copy them to the directory. Download the files
    from [https://vcmupdates.vmware.com/CPC/VCM/5_7/](https://vcmupdates.vmware.com/CPC/VCM/5_7/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The wizard will check for an Internet connection and will start downloading
    the `Updates.xml` file from VMware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it will present the list of packs that are available for download. Select
    the packs required for your infrastructure; in this example, we are selecting
    **ISO 27001-27002 for Windows**:![How to do it...](img/image_06_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The selected pack will be downloaded and ready for import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, it will start the import as a part of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the import is complete, it will present the **Log Result** page and you
    have an option to save the logs. Click on **Close**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on **Finish** to complete the importing of the compliance
    pack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can check the imported compliance packs by logging in to the VCM console
    and going to **Compliance **| **Machine Group Compliance **| **Templates**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained in the introduction, we can either create our own compliance rules
    or import rules by importing compliance packs created by VMware. This gives us
    all the necessary constructs required to measure compliance against standards
    such as ISO 27001, SOX, and HIPPA, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: The tool downloads the rules in XML and they are then imported to the VCM database.
    The pack includes rules, rule groups, filters, and templates responsible for the
    selected standard; in our case, it is ISO 27001-27002 for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Once the compliance pack is imported, we can use the newly created templates
    to check the compliance of our infrastructure against the ISO 27001-27002 industry
    standard. Refer to the *Checking the compliance of the infrastructure* recipe
    from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your Internet access requires you to use a proxy, you can do that by changing
    some registry settings. Go to `HKEY_Current_User\Software\Microsoft\Windows\CurrentVersion\Internet
    Settings Proxy Server` to check proxy details; if there is a proxy configured
    and you are in an environment that does not need a proxy or the proxy has been
    changed, you need to check this before you start troubleshooting why the content
    wizard is failing to connect to [http://www.vmware.com/](http://www.vmware.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating compliance rule groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we imported a compliance pack, which created the required
    rules, rule groups, filters, and templates. When we want to check compliance against
    our own standards, we need to create each of them. In this recipe, we will create
    a compliance rule group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a working VCM server and credentials to log in as administrator on it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a two-part recipe; first, we will create a rule group and then will
    create the required filters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a rule group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the steps to create a rule group:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to VCM using an admin account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Compliance** | **Machine Group Compliance** | **Rule Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green plus sign to create a new rule group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will launch a wizard; fill in an appropriate name and provide a description.
    It is best practice to have some naming conventions while creating such things.
    We will look at naming conventions in detail in [Appendix A](ch10.html "Chapter 10. Defining
    Naming Conventions") – *Defining Naming Conventions*. In this case, we are creating
    a rule group for Windows Server 2012 for our company rules, so the following names
    will be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Rule Group Name**: `01_MyCompany_Win2k12`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Provide an appropriate description'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filter Set**: Use the **Default** filter set'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Creating a rule group](img/image_06_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the selected collection filter set is used when calculating the data
    age for the rules in the compliance templates. The filter set must collect the
    same data types that are included in the rules in the rule group. If the filter
    set does not collect the same data types, no data age is calculated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Accept the rule group creation confirmation box by clicking on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the rule group has been created, we need to create the necessary filters
    so that only expected machines will be checked for the rules in this rule group.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the second part of this recipe; here, we will create the necessary
    filters for the rule group. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the newly created rule group, that is, `01_MyCompany_Win2k12`, and
    then click on **Filters**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green **+** button to add a new filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a proper **Name** and **Description**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a data type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our imagination is the limit for selecting the correct data type; all the attributes
    captured by the VCM agent are available in the VCM database, and all of those
    can be used to create filters. In our case, we will be using the operating system
    name as the filter criteria; hence, we have selected **Machines**. You can browse
    and check the other available options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a filter](img/image_06_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, the selected **Data Type** will be used to create the rules. As we just
    need to check the OS name, we are going with **Basic**:![Creating a filter](img/image_06_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here too we have multiple choices to filter, and we will select OS Name Full,
    then we have conditional operators, and then the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we are creating a filter for Microsoft Windows Server 2012, we are choosing
    **OS Name Full** **=** **Microsoft Windows Server 2012 %** (**%** is a wildcard):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a filter](img/image_06_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wildcards in VCM:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Wildcard** | **Meaning** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **%** | Match all characters |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **_** (underscore) | Match a single character |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ***** | Equivalent to **%** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ? | Equivalent to **_** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Click on **Finish** to complete the filter creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To validate our filter, click on **Preview**, and it should display all the
    machines with Windows Server 2012 in the infrastructure, as our rule is only looking
    for such machines:![Creating a filter](img/image_06_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you have created multiple filters in a single rule group, they
    work as logical **AND**, that is, if all the conditions are **True**, only then
    will it display the machines, so be careful when creating multiple filters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we just created a rule group that will include our company security
    rules to be measured via VCM and selected the default filter set as the information
    will be collected as a part of the default filter set.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we created a filter that will filter only Windows Server 2012 machines
    in the VCM.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom compliance rules for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VCM divides compliance into two broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Machine group compliance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Virtual environment compliance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine group compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this category, compliance is checked at the operating system level, such
    as for all the supported versions of Windows or Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environment compliance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this category, the compliance of the ESXi hosts, vCenter, and virtual machines
    present in vCenter is checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as we are ready with the rule group, let''s start populating it with the
    rules for our organization. There are two ways we can create the rules: either
    copy what is created in the standard compliance packs we downloaded in the first
    recipe and modify it as per our requirement or create the rules from scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a custom compliance rule based on machine group
    compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a fully ready VCM server, and to copy the rule from another rule
    group, we should finish the *Importing compliance packs* recipe. We will need
    our own rule group created so that we can create our rules there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our example of our requirement of having a complex password
    and a minimum password length of 12 characters; first, we will try to find the
    rule in the imported compliance pack and then, we will create our own rule.
  prefs: []
  type: TYPE_NORMAL
- en: Copying a rule from another rule group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can copy a rule from the compliance packs we have downloaded and added to
    VCM and then modify them as per our requirement or club rules from various compliance
    packs or standards as required to support our internal company standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the next steps to copy a rule from another rule group:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to VCM with admin privileges and go to **Compliance** | **Machine Group
    Compliance** | **Rule Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we want to copy a rule, we must know where the original rule is; in our case,
    the rule is in the **Best Practises - ISO 27001-27002 Windows 2008 R2 Mbr** rule
    group, so we will go there and select the required rule:![Copying a rule from
    another rule group](img/image_06_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Copy**, and as the wizard starts, select the rule group that you
    want to copy the rule to:![Copying a rule from another rule group](img/image_06_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In next step, confirm the rule/rules you want to copy and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rule will be copied in our rule group now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It should look like the following screenshot:![Copying a rule from another rule
    group](img/image_06_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, as you have seen how to copy a rule, we will continue considering that
    we are not able to find a rule we want and thus need to create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create the required rule:'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, log in to VCM and go to **Compliance** | **Machine****Group****Compliance**
    | **Rule****Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the machine group created for storing our rules and go to **Rules**,
    click on **Add**, and follow the wizard.![Creating a new rule](img/image_06_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Name** and **Description** for the rule.![Creating a new rule](img/image_06_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct **Data Type**; in our case, it is **Account Policy**.![Creating
    a new rule](img/image_06_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Basic Rule**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (For more details about the types of rules, refer to the *Rules* subsection
    of the *The constructs of VCM compliance* recipe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a **Min Length** value greater than (**>**) `12` as a condition so that
    if the condition fails, it will flag as noncompliant.![Creating a new rule](img/image_06_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Moderate Severity**, confirm the rule creation and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We just created our first rule for our internal standards for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To measure compliance, we need to create rules for each stated requirement;
    in this recipe, we first copied a rule from a standard that we imported, and then,
    to understand the process, we created the same rule. The rule will be stored in
    the rule group and will check the compliance of the Windows machine for password
    length.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom compliance rules for Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we looked at a rule created for Windows for checking
    minimum the password length; we will continue with the same requirement here,
    except for Linux. The process will be similar; only the data types will change.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a fully functional VCM and a rule group created to store our Linux rule.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like in the earlier recipe, here too we have two ways to create such rules,
    that is, copy them from another imported compliance pack rule group or create
    our own. The copying process is the same as for Windows; hence, we will not repeat
    it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new rule for Linux to check the minimum password length by
    completing these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, we need to log in to VCM with admin privileges and go to **Compliance
    | ****Machine ****Group ****Compliance** | **Rule****Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the machine group created for Linux rules, click on the arrow in front
    of the rule group name, and select **Rules**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Add**, and it will launch a wizard to create a new rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the first page of the wizard, provide a name and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page for data types, go to **Unix** | **Custom Information**.![How
    to do it...](img/image_06_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are a Linux admin, you already know where to find the required details;
    if not, consult your Linux admin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, I filled in the details after consulting my Linux admin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is what we filled in:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Information Type: `builtin:login.defs`**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Path : `/etc/login.defs`**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Path: `/builtin:login.defs`**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_06_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select the `PASS_MIN_LEN` condition to be greater than (**>**) `12`, so if the
    value found is less than `12`, then we are noncompliant and VCM will let us know.![How
    to do it...](img/image_06_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Severity** to **Moderate**, follow the wizard, and accept the creation
    of the rule and finish it by clicking on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like Windows compliance rules, this rule will be stored and will process
    the stored data collected from Linux machines and give us their compliance status.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom compliance rules for virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we created compliance rules for machine group compliance, that is, for
    Windows and Linux. Now, we will create a rule for virtual environment compliance.
    We can't continue with our example of minimum password length in this virtual
    world, so we will change it to another requirement we have, that is, the snapshot
    for a VM should not be retained for more than 10 days.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's start and see how many VMs are noncompliant with our rule by first
    creating one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a rule group created to store the virtualization compliance rules in
    a fully deployed and functional VCM server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like our previous experience with rules, this one can also be copied from another
    standard pack if you know where to copy from; the process is similar to that for
    Windows rules, so we will not repeat it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start creating a new rule using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Once again, we need to log in to VCM with admin privileges and reach **Compliance
    |** **Virtual Environment Compliance** |** Rule Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the rule group created for storing virtual environment compliance rules.
    Click on the arrow to the side of it and go to **Rules**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add** to start the wizard. Fill in the name and description for the
    rule to be created, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the screenshots in the previous recipes where we created rules for Windows
    and Linux, and make appropriate changes for virtualization as described in those
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page of the wizard, **Data Type**, select **vCenter - Guests - Snapshots**,
    as we want to check the snapshot age.![How to do it...](img/image_06_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Basic** as the rule type and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To form a condition, select **Snapshot Age** less than or equal to (**<=**)
    `10`, that is, if the snapshot age is less than `10`, then we are compliant, but
    if it is more than `10`, then we are noncompliant and that needs to be flagged.
    Click on **Next**.![How to do it...](img/image_06_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Moderate Severity**, confirm the rule creation, and click on **Finish**
    to close the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This completes the creation of all types of rules for compliance.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process is the same as machine group compliance and rules for Windows and
    Linux; in a virtual environment situation, the data to be used will be collected
    from vCenter servers, and the compliance score of the vCenter server will change
    instead of individual virtual machines'.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the default filter set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you know that VCM checks compliance on the data collected and available
    in the database it has and not directly on the live machine. This causes limitation:
    if a particular data type is not collected, it will not be available, and then,
    we cannot measure the compliance for the rule and VCM will tell you that the data
    has not been collected for the rule in the results.'
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this situation, we can set lots of collections with different types
    of filter sets created by VCM or we can modify the default filter set and add
    required filters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that modifying a default set is not recommended by VMware. Create your
    own filter set that includes the required filters and use that to perform the
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: So, what are filters and filter sets?
  prefs: []
  type: TYPE_NORMAL
- en: '**VCM filters**: Filters define what data a VCM agent should collect while
    performing the collection; examples are a registry setting, service status, file
    permission, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**VCM filter sets**: These are collections of filters, which can be used to
    collect data from managed machines. Most of the time, we use the default filter
    set, but there are a few more created by default when we install VCM, and a few
    are added when we import compliance packs from the Internet. Compliance packs
    create the required filters and filter sets so that the data is collected and
    can be processed when we run the compliance check.'
  prefs: []
  type: TYPE_NORMAL
- en: We need to select the correct filter set while performing a collection so that
    the required details will be added to the VCM database, modify the default filter
    set, or create a new one and use this single filter set to collect data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a fully functional VCM server, and we should know which data filter
    is required to add to the default filter set, so we should import the compliance
    packs as we did in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be adding a Linux filter to collect the required data type used in the
    *Creating custom compliance rules for Linux* recipe, where we used details from
    the `:/etc/login.defs` file, and those are not part of the default filter set.
    In this example, we are modifying the default filter set, but you can use the
    same process to first create a filter set and then add the required filters to
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s jump into the VCM console to modify the default filter set then:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, log in to VCM and go to **Administration **| **Collection Filters** | **Filter
    Sets**.![How to do it...](img/image_06_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the default filter set and click on **Edit Filter Set**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The wizard will start; as you can see, there are 9000 filters available; we
    really can't search through them, so create a **Filter**, click on **Define**,
    and it will open a pop-up.![How to do it...](img/image_06_021.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we want to look for login details in the **Filter**, create a filter like
    **Name** like **%log%** (**%** acts a wildcard).![How to do it...](img/image_06_022.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the filters we need to check are only 169 in number. Go through them and
    select the ones that match our requirement, in this case, **CIS - RHEL 7 - Custom
    Information - /etc/login.defs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select and click on the downward arrow and then on **Next**.![How to do it...](img/image_06_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure there are no conflicts, and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, it will show you the list of filters in this filter set; accept
    them by clicking on **Finish**.![How to do it...](img/image_06_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we need to instruct VCM what data needs to be collected;
    else, we will miss the data collection and cannot check compliance for those rules.
    We can do this in two ways: collecting data multiple times with multiple filter
    sets or as we did here, adding required filter sets and preparing a master filter
    set to collect all the details.'
  prefs: []
  type: TYPE_NORMAL
- en: We chose the second option. Now onwards, whenever we collect data with the default
    filter set, it will collect from Linux/Unix managed machines details about `/etc/login.defs`
    file, which we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Creating compliance templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are ready with all the required rule groups with the necessary filters
    and they have been populated with all the rules to fulfill the requirements given
    by the security officer, we need to move ahead and start checking compliance.
    But wait, we can't check compliance against a rule or rule groups; we will need
    a compliance template, which can have all the required rule groups.
  prefs: []
  type: TYPE_NORMAL
- en: So let's start by creating our compliance template for Windows-related rule
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need all the required rule groups created and they should be populated
    with the associated rules in a fully functional VCM server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now, you must already know where you should go to create your compliance
    template; if not, just follow this process and you will be learn that as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Compliance** | **Machine ****Group ****Compliance** | **Templates**
    and then click on **Add**.![How to do it...](img/image_06_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the wizard for creating a new template is launched, provide a proper **Name**
    and **Description** value.![How to do it...](img/image_06_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all the rule groups that should be part of this template.![How to do
    it...](img/image_06_027.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure it provides results on both compliant and noncompliant details and
    processes compliance exceptions (more about this is in the *Creating compliance
    exceptions* recipe at the end of this chapter).![How to do it...](img/image_06_028.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the creation of the template and hit **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can create rule groups for each version of Windows, such as Windows Server
    2003, Windows Server 2008 and one for 2008 R2, and Server 2012 and 2012 R2\. Each
    will have its own filters so that the rules in those rule groups will be applied
    to only the specific OSes they are created for. Now we can have a single template
    to run against a huge machine group that includes all the Windows machines in
    the infrastructure; VCM will pick the correct rule for them, and we can avoid
    having multiple templates and associated machine groups to check compliance against
    (checking infrastructure compliance is our next recipe).
  prefs: []
  type: TYPE_NORMAL
- en: When a rule that is called complaint is passed and it fails, then we are noncompliant
    for a setting. Now, there are chances that we need to make some exceptions to
    the rules, like in the last recipe of this chapter, *Creating compliance exceptions*,
    where we create such exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the compliance of the infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We did the hard work of creating all the rules, rules groups, and templates
    to reach up to this: checking the compliance of the infrastructure. Now, we are
    ready to check how compliant we are against our internal standards, or we can
    directly use the standard compliance packs we downloaded and imported in the first
    recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: As we have only created test rules, we will use a standard template we imported
    in the first recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the heavy lifting should have been done on the VCM server; for instance,
    it should be ready with the templates and at least one machine group that will
    have the machines for which we need to check compliance, or we can use the default
    machine groups available. The preferred alternative is our own machine group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, we will use an imported standard template called **International
    Organization for Standardization 27001-27002- Windows 2008 R2 Mbr Server Controls**,
    and we will run this against the default machine group, **All Machines**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow this process to check the compliance of Windows servers:'
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in to VCM, go to **Compliance **| **Templates**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you should make sure the correct machine group is selected at the
    top; this is how VCM decides which machines to apply the template to in order
    to measure compliance. If you want to change the machine group, click on the machine
    group, and in the pop-up, select the correct machine group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the required template on the right-hand side and click on **Run**.![How
    to do it...](img/image_06_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending upon the organization's policies, decide to enforce or not enforce
    compliance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that not all rules are enforceable; also, we can create issues, such as
    breaking a working application. For example, if the print spooler service is required
    to be disabled, and when we enforce the compliance, we disable the service, this
    will create an issue in the printer farm as it will stop functioning. So it's
    better that we first learn what is noncompliant, then make necessary exceptions,
    and then enforce it from VCM or ask the respective server owners to take necessary
    action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a few minutes, depending on how many machines you have in the machine group
    to check, the compliance run will finish. Click on **Close**.![How to do it...](img/image_06_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compliance status can be viewed by navigating to the template on the left-hand
    side and selecting the correct machine group from the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, our support team needs to work a lot as we are noncompliant.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_06_031.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we ask VCM to check compliance, it first applies the filters available
    in the rule groups and then, only the machines that pass those filters are considered.
  prefs: []
  type: TYPE_NORMAL
- en: The compliance checks are performed on the data collected by VCM and available
    in the database, unlike some other tools, which performs the checks at the client
    end and the client submits the data. The process followed by VCM is better as
    this can be performed on servers that are offline at that point in time, and when
    we check the result, we get the value because of which a machine is noncompliant
    for a rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, this has some issues: firstly, we need to make sure our VCM is clean;
    by that, I mean that when a machine is decommissioned, it is purged from VCM;
    else, we will have the details of the machines that are not present in the infrastructure
    and that could play with our final compliance score.'
  prefs: []
  type: TYPE_NORMAL
- en: The second issue is that it does not give us live details as it works on data
    that is in its database; again, this can give us some false positives.
  prefs: []
  type: TYPE_NORMAL
- en: To encounter this issue, we can schedule a compliance check after a full data
    collection for that machine group; in this way, we will not have stale data to
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Once the compliance has been checked and if we have selected to enforce compliance,
    it will create jobs to enforce them and will start executing on the managed machines;
    for example, if we have rules to check the status of a service and we expect certain
    services in the running state, then VCM will start those services.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting compliance rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I don't know about you, but I am a lazy admin–I like to do things once and use
    them as many times as I can. Creating a complete compliance configuration is a
    huge task and can take up to months; now consider you have another VCM deployed
    and you want to recreate all the rules, rule groups, and templates again. Nobody
    will approve few months of rework and you won't enjoy the repeated work either.
  prefs: []
  type: TYPE_NORMAL
- en: This is where VMware's Export Import tool bundled with VCM comes in handy. You
    can export all your settings in a single XML file and then import as many VCM
    deployments as you want, and once they have been imported, you can modify them
    if required as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this and the next recipe, we will have a look at those two things. First,
    we will export the configurations in an XML file and then import them again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with the recipe, we need a completely functional VCM, and all the required
    rule groups with filters, rules, and templates should be ready before we start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work on the recipe, you don''t need to log in to the VCM console, but you
    need to launch the **Import Export** utility from the VCM server''s desktop. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Once the **Import Export** tool has been launched, click on **Connect to source**.![How
    to do it...](img/image_06_032.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the database server and click on connect. Select the **VCM** database
    and click on **OK**.![How to do it...](img/image_06_033.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we want to export the compliance template (this will include all the rule
    groups, filters, and rules), click on **Compliance Template**; the tool will show
    the available compliance templates on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the dependency alert–we need proper documentation if we modify or create
    new filter sets in order to recreate them on the new environment where we will
    import this template again.![How to do it...](img/image_06_034.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the compliance template you have created and want to export and then
    go to **File** | **Save Source Document**.![How to do it...](img/image_06_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, use the arrow buttons to move the templates you want to export,
    and then click on **OK**.![How to do it...](img/image_06_036.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a comment under **Save Options**.![How to do it...](img/image_06_037.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a descriptive name and click on OK.![How to do it...](img/image_06_038.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to complete the save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are done with the export and are ready to share our hard work with the
    world.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data is exported in XML format, which can be used with the same utility
    again in any other environment to recreate the compliance details, which could
    have taken a few months to recreate.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It does not matter how compliant you are unless you can give a full report
    showing all the details of the infrastructure. VCM does not let you down here
    as well: there are 15 default reports available to be exported. We will look how
    we can do that in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need a fully deployed VCM server, and we should have finished checking
    the compliance of the infrastructure so that we can look at the options to get
    the reports.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if we have not run the compliance run, we cannot see the reports-quite
    obvious, but we do miss this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get the reports out of VCM, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the VCM console and go to **Reports **| **Machine Group Reports** |
    **Compliance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the required report; use this list to understand what can be seen in
    the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Sr. no.** | **Name** | **Description** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **1** | Compliance badge mapping result by object | Displays the compliance
    badge mapping result by object in detail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **2** | Compliance badge mapping result by template | Displays the compliance
    badge mapping result by template in detail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **3** | Compliance badge rollup detail | Displays the compliance badge rollup
    in detail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **4** | Compliance badge rollup summary | Displays the compliance badge rollup
    summary |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **5** | Compliance change history | Compliance change history for a series
    of compliance runs |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **6** | Compliance machine group summary | Displays compliance summary broken
    down by machine group |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **7** | Compliance results detail by machine | Displays results of compliance
    run grouped by machine and includes rule description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **8** | Compliance results detail by rule | Displays results of compliance
    run grouped by rule name and includes rule description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **9** | Compliance results details | Compliance results details by compliance
    template |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **10** | Compliance results machine group details | Displays results of compliance
    run grouped by machine groups |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **11** | Compliance results summary | Compliance results summary by compliance
    template |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **12** | Compliance results summary for rules | Compliance results summary
    for rules by compliance template for asset classification and rule severity |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **13** | Compliance results trends | Compliance results trends for selected
    templates |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **14** | Compliance rule details by rule group | Shows existing compliance
    rule details and the rule groups that contain them |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **15** | Compliance template listing | Compliance template listing by template
    with rule group details |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Once the report is selected, click on **Run** in the top menu. This will launch
    a wizard for you to follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you have to make sure you have selected the correct machine group
    from the top; if you have never run a compliance check against that machine group,
    there won't be any options in the dropdown for the next window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_06_039.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Select the options (they will differ for each selected report); the dropdown
    options will vary depending upon which template you have used to check the compliance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rest you can choose depending upon your requirement; once all the required
    options have been selected, click on **View Report**.![How to do it...](img/image_06_040.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The report will be displayed, and it can be exported to various formats, such
    as XML, CSV, PDF, and MHTML.![How to do it...](img/image_06_041.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VCM uses SSRS for its reporting functionality. When we click on the Run button,
    in order to display the report, VCM launches another Internet Explorer window,
    which takes us to SSRS. Then, the report asks us for options, such as the compliance
    template, the machines, and severity (they vary per report), and then goes to
    the VCM database and fetches the data. The data is presented in a nice report
    on the screen or can be exported to the formats shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Creating compliance exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, every rule has an exception, and this is applicable to compliance
    as well. You create a rule for disabling the print spooler service on all servers,
    and then you have print servers that need this service running. Now, we can't
    disable this service if we know this is a known and accepted deviation, and we
    don't want our compliance score to get a hit because of this. What we can do is
    add an exception so that this will not create issues when checking compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our organization has a policy to disable unwanted services on servers, and the
    print spooler is considered an unwanted service, so it must be disabled on all
    the servers. Of course, the exceptions are the print servers. We will create an
    exception for the print server machine group to be excused from this mandate.
  prefs: []
  type: TYPE_NORMAL
- en: We will need the required rules created in VCM along with a machine group that
    includes all the print servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create an exception for our print servers by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to VCM and go to **Compliance **| **Machine Group Compliance** | **Exceptions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**.![How to do it...](img/image_06_042.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a descriptive name and description, and click on **Next**.![How to do
    it...](img/image_06_043.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the template for which you want this machine group to be excluded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, we are selecting the one created by our organization rules; click
    on **Next**.![How to do it...](img/image_06_044.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the machine group created for this exception–in our case, it is named
    **Print Servers – **and click on **Next**.![How to do it...](img/image_06_045.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Override non-compliant results to compliant**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I really don't know why there is another option, but there must be a use case
    that I am not aware of.![How to do it...](img/image_06_046.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want this exception only for our rule for the print spooler server, called
    **Service_Print_Spooler**, so selected that rule. Depending upon your requirement,
    you can have an exception for a complete rule group as well. But an exception
    to a single rule is sufficient in our case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish**.![How to do it...](img/image_06_047.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can enable/disable this exception as required.![How to do it...](img/image_06_048.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exceptions are considered when we perform a compliance check, and a final score
    is calculated. By creating an exception, we make sure that we don't get a bad
    score because we need to have some things noncompliant. Also, this helps when
    we enforce compliance. Like in the earlier case, if we enforce that the service
    status should be disabled, then VCM will disable the print spooler service on
    all servers including the print servers, and that will affect productivity.
  prefs: []
  type: TYPE_NORMAL
- en: So, creating a compliance exception is a win-win situation for both the teams–the
    security team has a nice compliant environment and the printer admin team has
    a working print farm.
  prefs: []
  type: TYPE_NORMAL
