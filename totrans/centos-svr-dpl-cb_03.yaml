- en: Chapter 3. User and Permission Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 用户和权限管理
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下配方：
- en: Escalating privileges with sudo
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用sudo提升权限
- en: Enforcing password restrictions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行密码限制
- en: Setting default permissions for new files and directories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新文件和目录的默认权限
- en: Running binaries as a different user
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以不同用户身份运行二进制文件
- en: Working with SELinux for greater security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SELinux增强安全性
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Each of the recipes in this chapter pertain to users and permissions. You'll
    learn how to let users temporarily escalate their privileges without requiring
    the root password and how to enforce complexity requirements for users. You'll
    also learn how to specify what access permissions are given to new files and directories
    by default and how the traditional Unix permission system can allow a program
    to run under a different security context than that of the user who launched it.
    Finally, we'll look at SELinux, a secondary permission system that hardens the
    security of your CentOS server.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的每个配方都与用户和权限相关。您将学习如何让用户在不需要root密码的情况下暂时提升权限，如何为用户强制执行复杂度要求。您还将学习如何指定新文件和目录的默认访问权限，以及传统的Unix权限系统如何允许程序在与启动它的用户不同的安全上下文中运行。最后，我们将讨论SELinux，这是一个增强CentOS服务器安全性的辅助权限系统。
- en: Escalating privileges with sudo
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用sudo提升权限
- en: 'The `root` account is Linux''s **god account**, and it has the ability to perform
    pretty much any activity on the system. For security reasons, you should use an
    unprivileged user account for your day-to-day activities and use `root` only when
    it''s necessary for administration tasks. It''s also important to keep the root''s
    password secret; the more people who know its password, the harder it is to keep
    it secret. A quote by Benjamin Franklin comes to mind: Three can keep a secret
    if two of them are dead.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`root`账户是Linux的**超级用户账户**，它具有执行系统上几乎所有活动的能力。出于安全考虑，您应该使用一个没有特权的用户账户进行日常操作，只有在需要管理任务时才使用`root`账户。保持root密码的机密性也非常重要；知道密码的人越多，保密就越困难。让我想起本杰明·富兰克林的一句话：三个能保守一个秘密，前提是其中两个已经死了。'
- en: If more than one administrator has been tasked with managing a system, keeping
    `root` secure can be difficult. `sudo` solves this problem by giving users a way
    to execute commands with the privileges of another user (most commonly `root`).
    Each of the administrator accounts can be configured using one of the methods
    presented in this recipe to escalate their privileges temporarily with `sudo`,
    and root's password can remain secret.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个管理员负责管理系统，保持`root`账户的安全可能会变得困难。`sudo`通过提供一种让用户以其他用户（通常是`root`）的权限执行命令的方式来解决这个问题。每个管理员账户可以使用本教程中介绍的方法来临时提升权限，`root`密码可以保持机密。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system and administrative access provided by logging
    in with the `root` account. You'll also need one or two unprivileged user accounts
    to configure (refer to the `useradd` man page `man 8 useradd` for information
    on creating user accounts).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方需要一个CentOS系统，并通过登录`root`账户提供的管理访问权限。您还需要一两个没有特权的用户账户进行配置（有关创建用户账户的信息，请参考`useradd`手册页`man
    8 useradd`）。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'One way to allow an unprivileged account the use of `sudo` is to assign it
    a membership in the `wheel` group. This is done with the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 允许没有特权的账户使用`sudo`的一种方法是将其分配到`wheel`组。可以通过以下步骤完成：
- en: 'Use `usermod` to add the user account to `wheel`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`usermod`将用户账户添加到`wheel`组：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Verify the update using the `groups` command. `wheel` should list one of the
    groups which the account is a member of:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`groups`命令验证更新。`wheel`应该列出该账户所属于的其中一个组：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another way to grant access to `sudo` is by configuring the sudoers policy
    which identifies which accounts can use `sudo` and in what manner. You can easily
    add an account to the policy with the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种授予`sudo`权限的方法是配置sudoers策略，指定哪些账户可以使用`sudo`以及以何种方式使用。您可以通过以下步骤轻松将账户添加到该策略中：
- en: 'Create a new file in the `/etc/sudoers.d` directory named after the user account:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/etc/sudoers.d`目录下创建一个以用户账户命名的新文件：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the file and add the following directive. When finished, save your update
    and close the file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件并添加以下指令。完成后，保存更新并关闭文件：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'For a user to use the `sudo` command they must be somehow listed in the sudoers
    policy. This is checked by `sudo` to verify whether the account is authorized
    to perform the attempted action. This recipe presented two ways of accomplishing
    this: by assigning the user account to the `wheel` group (which is already registered
    in the policy) or by adding the account directly to the policy.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 用户要使用`sudo`命令，必须以某种方式将其列入sudoers策略中。`sudo`会检查这一点，以验证该账户是否被授权执行所尝试的操作。此方法提供了两种实现方式：将用户账户分配到已在策略中注册的`wheel`组，或者直接将账户添加到策略中。
- en: In the first approach, the `usermod` command assigns the user membership in
    `wheel`. The `-G` option specifies the name of the group and `-a` instructs `usermod`
    to add the user to that group. It's important that you provide `-a` since without
    it the list of assigned groups is overwritten with only what is given with `-G`
    (that is, the account would belong only to `wheel`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种方法中，`usermod`命令将用户分配到`wheel`组。`-G`选项指定组的名称，而`-a`指示`usermod`将用户添加到该组中。提供`-a`非常重要，因为如果没有它，分配的组列表会被`-G`后面指定的内容覆盖（即账户将只属于`wheel`组）。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The second approach registers the account with the sudoers policy by creating
    a file for the user under `/etc/sudoers.d`. We alternatively could have added
    the user's information to the `/etc/sudoers` configuration file, but the policy
    already includes any files found in the `sudoers.d` directory as part of its configuration.
    Creating a file for each user in the directory will be more manageable given a
    large number of users when it is time to revoke access.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法通过在`/etc/sudoers.d`下为用户创建文件来将账户注册到sudoers策略中。我们本可以将用户信息直接添加到`/etc/sudoers`配置文件中，但策略已将`sudoers.d`目录下的任何文件包含在其配置中。为每个用户在该目录中创建一个文件，在需要撤销访问权限时，面对大量用户会更易于管理。
- en: 'Both approaches allow a user the use of `sudo` to execute commands they wouldn''t
    ordinarily have sufficient rights to. For example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都允许用户使用`sudo`执行他们通常没有足够权限的命令。例如：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first time a user invokes `sudo`, a message is displayed that reminds them
    to be responsible with their new-found power. The user must provide their password
    to verify their identity; the verification is cached for five minutes from the
    last invocation as an extra bit of protection against malicious users who might
    walk up to a terminal that was carelessly left logged in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用户首次调用`sudo`时，系统会显示一条消息，提醒他们在使用新获得的权限时要负责。用户必须提供密码以验证身份；此验证将在最后一次调用后缓存五分钟，以作为对可能会走到一个未注销的终端上的恶意用户的额外保护。
- en: '![How it works...](img/image_03_001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_03_001.jpg)'
- en: sudo reminds the user that with great power comes great responsibly
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: sudo提醒用户，巨大的权力伴随着巨大的责任
- en: 'The sudoers policy is flexible enough to allow a user account to execute certain
    commands instead of giving carte blanche access. Recall the configuration directive
    for our unprivileged user account:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: sudoers策略足够灵活，允许用户账户执行特定命令，而不是给予完全的访问权限。回忆一下我们非特权用户账户的配置指令：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The username is specified followed by assigning the `ALL` alias to `ALL`. As
    you might determine by looking at this, `ALL` is the predefined alias that represents
    all commands. We can redefine the alias for the given user as a list of allowed
    commands:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 指定用户名后，将`ALL`别名分配给`ALL`。通过查看这一点，你可能已经明白，`ALL`是表示所有命令的预定义别名。我们可以将给定用户的别名重新定义为一个允许的命令列表：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now the account can invoke any command it normally has access to, but only the
    `mount` and `umount` commands with elevated privileges (assuming the account isn't
    a member of `wheel`).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该账户可以调用它通常有权限访问的任何命令，但只有在具有提升权限的情况下才可以使用`mount`和`umount`命令（假设该账户不是`wheel`的成员）。
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Are you tired of typing `sudo` before your commonly-used administrative commands?
    You can create aliases for a smoother command line experience. Suppose your unprivileged
    account is allowed to use the `mount` and `umount` commands with `sudo`. Adding
    the following lines to your `~/.bashrc` file will let you invoke them commands
    without explicitly typing `sudo`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否厌倦了在常用的管理命令前键入`sudo`？你可以为命令创建别名，获得更流畅的命令行体验。假设你的非特权账户被允许使用`sudo`执行`mount`和`umount`命令。将以下行添加到`~/.bashrc`文件中，你可以在不明确键入`sudo`的情况下调用这些命令：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multiple directives in the policy can apply to an account in which case they
    are applied additively, first to last. To see this in action, suppose an account
    already has full `sudo` usage by assignment in the `wheel` group. By default,
    the user needs to provide their password to execute a command. We can relax this
    requirement and allow the user to use `ls` to display the contents of restricted
    directories without a password:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 策略中的多个指令可以应用于一个账户，在这种情况下，它们是按顺序叠加应用的，从第一个到最后一个。为了演示这一点，假设一个账户已经通过分配到`wheel`组而具有完全的`sudo`使用权限。默认情况下，用户需要提供密码才能执行命令。我们可以放宽这一要求，允许用户使用`ls`命令显示受限目录的内容而无需输入密码：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `wheel` group's policy is applied first, establishing the default behavior.
    Then our new directive uses the `NOPASSWD` tag to grant the user unauthenticated
    access to the `ls` command. The user will still need to provide their password
    for commands such as `mount` and `passwd` but won't need to provide it to list
    restricted directories.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`wheel`组的策略首先应用，建立了默认行为。然后，我们的新指令使用`NOPASSWD`标签，授予用户对`ls`命令的无认证访问权限。用户仍然需要在执行`mount`和`passwd`等命令时提供密码，但在列出受限目录时则不需要提供密码。'
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Refer to the following resources for more information on working with `sudo`
    to temporarily elevate an account''s privileges:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下资源，了解如何使用`sudo`来临时提升账户权限：
- en: The `sudo` man page (`man 8 sudo`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo`手册页（`man 8 sudo`）'
- en: The `sudoers` man page (`man 5 sudoers`)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudoers`手册页（`man 5 sudoers`）'
- en: 'Code Snipcademy: Using `sudo` and `su` and their differences ([https://code.snipcademy.com/tutorials/linux-command-line/permissions/sudo](https://code.snipcademy.com/tutorials/linux-command-line/permissions/sudo))'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Code Snipcademy: 使用`sudo`和`su`及它们的区别（[https://code.snipcademy.com/tutorials/linux-command-line/permissions/sudo](https://code.snipcademy.com/tutorials/linux-command-line/permissions/sudo)）'
- en: Enforcing password restrictions
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制实施密码限制
- en: A weak password can be one of the weakest security points of any system. Simple
    passwords are susceptible to brute-force attacks and long-lived passwords, if
    they are compromised, provide a wide window of opportunity for malicious activity.
    Because of this, it's important to ensure that your users choose sufficiently
    complex passwords and change them regularly. This recipe shows you how to strengthen
    your system's security by enforcing various restrictions on users' passwords.
    You'll learn how to specify the minimum complexity requirements for a password,
    how long before a password must be changed, and how to lock down an account after
    a number of failed login attempts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 弱密码可能是任何系统最薄弱的安全环节之一。简单密码容易受到暴力破解攻击，而长期使用的密码如果被泄露，会为恶意活动提供长时间的攻击窗口。因此，确保用户选择足够复杂的密码并定期更换非常重要。本教程展示了如何通过对用户密码施加各种限制来增强系统的安全性。您将学习如何指定密码的最低复杂性要求、密码需要多久更改一次，以及如何在多次登录失败后锁定账户。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system and administrative access, either provided
    by logging in with the `root` account or by using `sudo`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要一个CentOS系统和管理员访问权限，可以通过登录`root`账户或使用`sudo`获得。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'Follow these steps to enforce password restrictions that will increase the
    security of your CentOS system:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行，以强制实施密码限制，从而提高您CentOS系统的安全性：
- en: 'The parameters governing password aging are found in `/etc/login.defs`; open
    the file using your text editor of choice:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制密码过期的参数位于`/etc/login.defs`中；使用您选择的文本编辑器打开该文件：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Locate the password aging controls section and update the value of `PASS_MAX_DAYS`,
    `PASS_MIN_DAYS`, `PASS_MIN_LEN`, and `PASS_WARN_AGE`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到密码过期控制部分，并更新`PASS_MAX_DAYS`、`PASS_MIN_DAYS`、`PASS_MIN_LEN`和`PASS_WARN_AGE`的值：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save your changes and close the file.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'The values specified in `login.defs` will be applied to new accounts when they
    are created. Existing users must have their password parameters set separately
    using the `chage` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`login.defs`中指定的值将应用于新创建的账户。现有用户必须使用`chage`命令单独设置他们的密码参数：
- en: '[PRE12]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The parameters governing the acceptable complexity for passwords are found
    in `/etc/security/pwquality.conf`; open the file for editing:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制密码复杂性要求的参数位于`/etc/security/pwquality.conf`文件中；打开该文件进行编辑：
- en: '[PRE13]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Uncomment the `minlen` value to specify the desired minimum password complexity
    plus 1\. For example, an eight-character password consisting of all lowercase
    characters would require a `minlen` of `9`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释 `minlen` 值以指定所需的最小密码复杂度加 1。例如，一个由小写字母组成的八字符密码，其 `minlen` 应该设置为 `9`：
- en: '[PRE14]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You may uncomment other values and set them as well if you like. Each value
    is preceded by a brief descriptive comment of what it does. To require a minimum
    number of characters to be from a certain class (uppercase, lowercase, digits,
    and other/special), specify the value as a negative number. For example, if passwords
    require at least one numeric digit and one uppercase character then both `dcredit`
    and `ucredit` would be set to `-1`:![How to do it...](img/image_03_002.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，你可以取消注释其他值并进行设置。每个值前面都会有简短的描述性注释，说明其功能。如果你希望密码中必须至少有一定数量的字符来自某个特定类别（大写字母、小写字母、数字和其他/特殊字符），可以将该值设置为负数。例如，如果密码必须至少包含一个数字字符和一个大写字母，则
    `dcredit` 和 `ucredit` 都应设置为 `-1`：![如何操作...](img/image_03_002.jpg)
- en: Options for configuring your system's password complexity requirements are found
    in pwquality.conf
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置系统密码复杂度要求的选项可以在 pwquality.conf 文件中找到
- en: Save your changes and close the file.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。
- en: 'Next we''ll update PAM''s `password-auth` and `system-auth` module configurations
    to lock out an account after a number of unsuccessful login-attempts. Open the
    file `/etc/pam.d/password-auth`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新 PAM 的 `password-auth` 和 `system-auth` 模块配置，以便在多次登录失败后锁定账户。打开文件 `/etc/pam.d/password-auth`：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the group of `auth` lines at the beginning of the file to read as follows.
    The second and fourth lines have been added and include `pam_faillock` to the
    authentication stack:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新文件开头的 `auth` 行组，使其如下所示。第二行和第四行已被添加，并且包括 `pam_faillock` 到认证堆栈中：
- en: '[PRE16]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the group of `account` lines to read as follows. The second line has
    been added to include `pam_faillock` to the account stack:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `account` 行组，使其如下所示。第二行已被添加，包含 `pam_faillock` 到账户堆栈中：
- en: '[PRE17]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be careful when updating the `password-auth` and `system-auth` files. The order
    in which modules are listed in a stack is significant!
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在更新 `password-auth` 和 `system-auth` 文件时要小心。模块在堆栈中的排列顺序是非常重要的！
- en: Save your changes and close the file. Then repeat steps 9 to 11 with the file
    `/etc/pam.d/system-auth`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并关闭文件。然后重复步骤 9 到 11，操作文件 `/etc/pam.d/system-auth`。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Properly configuring the authentication requirements for local accounts is a
    bit of a fractured experience. First, there's the traditional Unix password files
    (`/etc/passwd` and `/etc/groups`) and the `shadow-utils` package, which adds shadowing
    support (`/etc/shadow`). Together, these form the core database for local account
    credentials. In addition, similar to most other modern Linux systems, CentOS uses
    PAM, a collection of pluggable authentication modules. The PAM stack is configured
    by default to lookup account information in the shadow file, but it also provides
    additional functionality that PAM-aware programs can leverage, such as password-strength
    checking. As an administrator, you're responsible for configuring these services
    so that they work properly in tandem and operate within the acceptable security
    guidelines set by your organization.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置本地账户的认证要求是一个略显零散的过程。首先，有传统的 Unix 密码文件（`/etc/passwd` 和 `/etc/groups`）以及 `shadow-utils`
    包，它提供了阴影支持（`/etc/shadow`）。这些一起构成了本地账户凭证的核心数据库。此外，类似于大多数现代 Linux 系统，CentOS 使用 PAM，这是一个可插拔认证模块的集合。PAM
    堆栈默认配置为在阴影文件中查找账户信息，但它还提供了额外的功能，PAM-aware 程序可以利用这些功能，例如密码强度检查。作为管理员，你需要负责配置这些服务，确保它们能够协同工作，并且符合组织所设定的安全标准。
- en: 'In this recipe, we first updated the password aging related controls found
    in `/etc/logins.def`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方案中，我们首先更新了 `/etc/logins.def` 中的密码过期相关控制：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`PASS_MAX_DAYS` defines how much time can pass before a password must be changed.
    By setting the value to `90`, a user must change their password at least once
    every three months (90 days). `PASS_MIN_DAYS` specifies how many days a user must
    wait to change a new password. Since this value is 0, a user can change their
    password any time they want-even several times a day if they like. `PASS_WARN_AGE`
    defines how many days in advance a user will be notified of their password''s
    pending expiration as `PASS_MAX_DAYS` approaches.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`PASS_MAX_DAYS` 定义了密码必须更改之前允许经过的最大时间。将该值设置为 `90`，表示用户必须每 90 天至少更改一次密码。`PASS_MIN_DAYS`
    定义了用户在更改密码后必须等待多少天才能再次更改。由于该值为 0，用户可以随时更改密码——如果他们愿意，甚至可以一天多次更改密码。`PASS_WARN_AGE`
    定义了当 `PASS_MAX_DAYS` 接近时，用户将提前多少天收到密码即将过期的通知。'
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`PASS_MIN_LEN` is supposed to set the minimum password length, but you''ll
    find PAM''s password complexity requirements supersede this, making the setting
    pretty much worthless.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`PASS_MIN_LEN` 应该设置密码的最小长度，但你会发现 PAM 的密码复杂度要求会覆盖这个设置，使得该设置几乎毫无意义。'
- en: 'Utilities such as `useradd` use these settings as the defaults when creating
    entries in the password and shadow files. They aren''t applied retroactively to
    existing users so we need to use `chage` to update their accounts:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`useradd` 等工具在创建密码和影子文件中的条目时，会使用这些设置作为默认值。它们不会回溯应用到现有用户，因此我们需要使用`chage`来更新他们的账户：'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`chage` can set the minimum and maximum age of a user''s password and the notification
    window for pending expirations, but note the absence of a minimum length requirement.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`chage` 可以设置用户密码的最小和最大有效期以及即将过期的通知窗口，但请注意没有最小长度的要求。'
- en: 'We can also use `chage` to make a user''s password expire immediately so that
    they must specify a new one the next time they log in. To do so, we provide the
    `--lastdays` argument with a value of 0:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `chage` 让用户的密码立即过期，这样他们下次登录时必须指定新密码。为此，我们提供 `--lastdays` 参数并设置为 0：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you have more than a handful of accounts, you may want to automate using
    `chage` with some basic shell scripting. Here''s a series of commands piped together
    that update all of the existing user accounts in an automated fashion:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个账户，可能想通过一些简单的 Shell 脚本来自动化使用 `chage`。这里有一系列的命令通过管道连接，能够以自动化的方式更新所有现有的用户账户：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This works by retrieving the contents of the shadow file and using `awk` to
    split each record using `:` as the field separator. `awk` looks at the value in
    the second field (the encrypted password) to see if it begins with `$`, indicating
    the account has a password, to filter out disabled accounts and system accounts
    without a password. The username from each matching record is then piped to `xargs`
    which then feeds the names one at a time to `chage`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通过获取影子文件的内容，并使用 `awk` 以 `:` 为字段分隔符拆分每条记录。`awk` 查看第二个字段（加密密码）的值，看看它是否以 `$`
    开头，表示账户有密码，以此来筛选出没有密码的禁用账户和系统账户。每个匹配记录中的用户名随后被传递给 `xargs`，然后 `xargs` 将用户名逐个传递给
    `chage`。
- en: As the PAM module `pam_pwquality` checks the complexity of passwords, we specify
    our password complexity requirements in the module's configuration file, `/etc/security/pwquality.conf`.
    It gauges the quality of a password using a credit system where each character
    credits a point towards the password's total score. This score then must meet
    or exceed the value we gave for `minlen`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PAM 模块 `pam_pwquality` 检查密码的复杂度，我们在该模块的配置文件 `/etc/security/pwquality.conf`
    中指定密码复杂度的要求。它通过一种信用系统来衡量密码的质量，每个字符为密码的总分加一分。这个总分必须满足或超过我们为 `minlen` 设置的值。
- en: 'The page at [http://wpollock.com/AUnix2/PAM-Help.htm](http://wpollock.com/AUnix2/PAM-Help.htm)
    has a good explanation of how `pam_pwquality` calculates a password''s complexity.
    It explains the algorithm as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wpollock.com/AUnix2/PAM-Help.htm](http://wpollock.com/AUnix2/PAM-Help.htm)
    页面对 `pam_pwquality` 如何计算密码复杂度做了很好的解释。它的算法如下：'
- en: Add one for each character in the password regardless of the type of the character
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不管字符类型如何，每个密码中的字符都会加一分。
- en: Add one to that for each lowercase letter used, up to a maximum of `lcredit`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每使用一个小写字母，就增加一个，最多可达 `lcredit`。
- en: Add one to that for each uppercase letter used, up to a maximum of `ucredit`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每使用一个大写字母，就增加一个，最多可达 `ucredit`。
- en: Add one to that for each digit used, up to a maximum of `dcredit`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每使用一个数字，就增加一个，最多可达 `dcredit`。
- en: Add one to that for each symbol used, up to a maximum of `ocredit`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每使用一个符号，就增加一个，最多可达 `ocredit`。
- en: The page also presents a few complexity calculations for different passwords
    and is worth reading.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面还展示了几种不同密码的复杂性计算，非常值得一读。
- en: 'Then we updated the `password-auth` and `system-auth` files to lock a user''s
    account after three unsuccessful login attempts. Different authentication stacks
    need to be configured because different login methods will invoke a different
    authentication stack (that is, a logging in over SSH as opposed to logging in
    locally):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们更新了 `password-auth` 和 `system-auth` 文件，以在三次不成功的登录尝试后锁定用户账户。需要配置不同的认证堆栈，因为不同的登录方法会调用不同的认证堆栈（例如通过
    SSH 登录与本地登录）：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `pam_faillock` module is added at multiple positions in the authentication
    stack. The first appearance in the `auth` block performs a precheck (`preauth`)
    to see if the account is already locked out The second appearance tallies the
    failed attempt (`authfail`). The argument specified by `deny` is the number of
    failed attempts permitted before locking the account. `unlock_time` specifies
    how much time the module should wait (in seconds) before unlocking the account
    so that another login attempt can be made. As the example specifies 600 seconds,
    a user will have to wait 10 minutes for the lockout to expire. The module's appearance
    in the `account` block denies authentication to the locked account.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`pam_faillock` 模块在认证堆栈的多个位置添加。在 `auth` 块中的第一次出现执行预检查（`preauth`），以查看账户是否已被锁定。第二次出现进行失败尝试计数（`authfail`）。由
    `deny` 指定的参数是在锁定账户前允许的失败尝试次数。`unlock_time` 指定模块应等待的时间（以秒为单位），以解锁账户，以便进行另一次登录尝试。如示例所述，600
    秒意味着用户必须等待 10 分钟才能解除锁定。模块在 `account` 块中的出现拒绝对已锁定账户的认证。'
- en: 'The `faillock` command is used to view the number of failed login attempts
    and to unlock an account. To see the failed attempts, invoke the command using
    the `--user` argument to specify the account''s username:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`faillock` 命令用于查看失败的登录尝试次数和解锁账户。要查看失败的尝试次数，请使用 `--user` 参数指定账户的用户名：'
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To manually unlock the account before `unlock_time` has elapsed, invoke the
    command with the `--reset` argument:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `unlock_time` 过去之前手动解锁账户，请使用 `--reset` 参数调用该命令：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following resources for more information on how user accounts
    are authenticated and how to enforce password restrictions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于用户账户认证和如何强制密码限制的信息，请参考以下资源：
- en: The `chage` man page (`man 1 chage`)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chage` 命令的手册页（`man 1 chage`）'
- en: The shadow file man page (`man 5 shadow`)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影子文件的手册页（`man 5 shadow`）
- en: The `pam_faillock` man page (`man 8 pam_faillock`)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pam_faillock` 命令的手册页（`man 8 pam_faillock`）'
- en: 'Linux Documentation Project: Putting the Shadow suite to use ([http://tldp.org/HOWTO/Shadow-Password-HOWTO-7.html](http://tldp.org/HOWTO/Shadow-Password-HOWTO-7.html))'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 文档项目：使用影子套件（[http://tldp.org/HOWTO/Shadow-Password-HOWTO-7.html](http://tldp.org/HOWTO/Shadow-Password-HOWTO-7.html)）
- en: The Linux-PAM System Administrator's Guide ([http://www.linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html](http://www.linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html))
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux-PAM 系统管理员指南（[http://www.linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html](http://www.linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html)）
- en: 'RHEL Security Guide: Password Security ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html-single/Security_Guide/index.html#sec-Password_Security](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html-single/Security_Guide/index.html#sec-Password_Security))'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL 安全指南：密码安全（[https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html-single/Security_Guide/index.html#sec-Password_Security](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html-single/Security_Guide/index.html#sec-Password_Security)）
- en: Setting default permissions for new files and directories
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置新文件和目录的默认权限
- en: Linux's permissions system governs whether a user can enter a directory or read,
    write, or execute a file. By setting the permission bits on files and directories,
    access can be granted or revoked to different users and groups of users. However,
    it's possible for a user to create a file and expect others in their group to
    access it, but the initial file permissions prevents this. To help avoid this
    situation, this recipe teaches you how to set the default permissions for new
    files and directories by specifying a mask value.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 的权限系统决定了用户是否能进入目录或者读取、写入或执行文件。通过设置文件和目录的权限位，可以授予或撤销不同用户和用户组的访问权限。然而，用户可能创建一个文件，并期望其他组中的用户能访问它，但是初始文件权限却阻止了这一点。为了避免这种情况，本文介绍了如何通过指定掩码值设置新文件和目录的默认权限。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system and administrative access, either provided
    by logging in with the `root` account or by using `sudo`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱要求使用CentOS系统并具有管理权限，可以通过使用`root`帐户登录或使用`sudo`来获得权限。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to specify the default permissions for new files and directories:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤指定新文件和目录的默认权限：
- en: 'To set the mask value globally, open the `/etc/profile` file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要全局设置掩码值，请打开`/etc/profile`文件：
- en: '[PRE25]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At the end of the file, add the following directive (adjusting the value as
    desired). When finished, save and close the file:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾，添加以下指令（根据需要调整值）。完成后，保存并关闭文件：
- en: '[PRE26]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To override the global mask and set the mask on a per-user basis, open the
    user''s `~/.bashrc` file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要覆盖全局掩码并为每个用户设置掩码，请打开用户的`~/.bashrc`文件：
- en: '[PRE27]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'At the end of the file, add the following (again adjusting the value as necessary).
    Then save and close the file:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾，添加以下内容（同样根据需要调整值）。然后保存并关闭文件：
- en: '[PRE28]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To temporarily set the mask only for the duration of your session, execute
    the `umask` command at the command prompt:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要仅在当前会话期间设置掩码，请在命令提示符下执行`umask`命令：
- en: '[PRE29]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can execute `umask` at the command prompt without providing a mask value
    to see what your current mask value is.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在命令提示符下执行`umask`而不提供掩码值，以查看当前的掩码值。
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe presents three ways a mask value can be set, which is responsible
    for determining what permissions are set on newly created files and directories.
    However, to understand how the mask works, you need to understand the traditional
    read, write, and execute permission system.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱介绍了设置掩码值的三种方法，该值决定了新创建的文件和目录上设置的权限。然而，要理解掩码的工作原理，您需要理解传统的读、写和执行权限系统。
- en: Directories and files in the Linux file system are owned by a user and group,
    and they are assigned a set of permissions that describe who can access it. When
    a user tries to access a resource, the system compares its ownership information
    with requesting user and determines if the requested access should be granted
    according to the permissions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 文件系统中的目录和文件由用户和组所有，并为它们分配了一组权限，描述谁可以访问它们。当用户尝试访问某个资源时，系统将其所有权信息与请求访问的用户进行比较，并根据权限决定是否允许访问。
- en: 'The three permissions are read, write, and execute. Since access to each can
    be only one of the two values (allowed or disallowed), and because such binary
    options can be represented with 1 for yes and 0 for no, a sequence of 1''s and
    0''s can be viewed as a bit pattern where each permission is given a different
    position in the sequence. The following figure shows how a list of binary yes''s
    and no''s can be converted to a human-friendly value:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 三种权限是读、写和执行。由于对每种权限的访问只能是允许或不允许这两种状态，并且这种二进制选择可以用1表示是，0表示否，因此一系列的1和0可以视为位模式，每个权限在序列中有不同的位置。下图显示了如何将一系列二进制的“是”和“否”转换为人类可读的值：
- en: '![How it works...](img/image_03_003.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_03_003.jpg)'
- en: Binary values represent whether a user has permission to access a resource
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制值表示用户是否有权限访问某个资源
- en: From the file or directory's perspective, there are three types of users. The
    user is either the file's owner, a member of the owning group, or neither (everyone
    else).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件或目录的角度来看，用户分为三种类型。用户要么是文件的所有者，要么是所有组的成员，要么是其他人（所有其他用户）。
- en: 'The resource is given a set of permissions for each type of users, as shown
    in the following figure:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该资源为每种类型的用户分配了一组权限，如下图所示：
- en: '![How it works...](img/image_03_004.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_03_004.jpg)'
- en: The full permission set of a file or directory includes the three types of users
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 文件或目录的完整权限集包括三种类型的用户
- en: This is the logic behind the traditional Unix permission system, but don't worry
    if this seems intimidating at first. Determining the permissions for a class of
    users is really just a matter of addition. Start with 0 for no access at all.
    To allow read access, add `4`. For write access, add `2`. For execute, add `1`.
    These values come from viewing the value of the permission in the bit string as
    a binary number, but they are easy enough to memorize. Thus, to allow all access,
    we add `4` + `2` + `1` which equals `7`. To allow only read and execute access,
    `4`  + `1` equals `5`. The more you work with permissions, the more you'll come
    to recognize certain combinations automatically.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是传统 Unix 权限系统背后的逻辑，但如果你刚开始接触，它可能看起来很令人生畏，不用担心。确定用户类别的权限其实只是加法问题。从 `0` 开始表示完全没有访问权限。要允许读取权限，加上
    `4`。要写入权限，加上 `2`。要执行权限，加上 `1`。这些值来源于将权限值作为二进制数在位串中查看，但它们足够容易记住。因此，要允许完全访问，我们加上
    `4` + `2` + `1`，结果是 `7`。要仅允许读取和执行权限，`4` + `1` 为 `5`。你在处理权限时会越来越熟悉这些组合，渐渐地自动识别它们。
- en: When a file is created, the system begins with `666` as a default value, giving
    read and write access to all three classes of users. Directories start with `777`
    since the executable permission on a directory is what allows a user to traverse
    into it. The system then subtracts the creating user's umask value and the result
    determines what permissions will be assigned to the resource when it's created.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件被创建时，系统从 `666` 开始作为默认值，给予所有三个类别的用户读取和写入权限。目录从 `777` 开始，因为目录的执行权限使用户能够进入目录。系统接着减去创建用户的
    umask 值，结果决定了资源在创建时将分配哪些权限。
- en: Suppose we create a new directory and our umask value is `0027`. The system
    subtracts `7` from the all other users' field and `2` from the group's field.
    `7` - `7` is `0`, and `7` - `2` is `5`, so the default permission for a new directory
    is `750`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们创建一个新目录，并且我们的 umask 值为 `0027`。系统从其他用户字段中减去 `7`，从组字段中减去 `2`。`7` - `7` 为 `0`，`7`
    - `2` 为 `5`，因此新目录的默认权限为 `750`。
- en: Because we start with one bit less in the default value for files, it's possible
    to end up with a negative permission number. If umask masks out all of the permissions
    using the value `7`, but the starting value is `666` for files, `6` - `7` gives
    `-1`. It doesn't make sense to go beyond 0 so the system treats it as 0\. So,
    a mask of `0027` gives us `650` for the file's permissions.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们从文件的默认值开始时少了一位，所以可能会得到一个负的权限值。如果 umask 使用 `7` 屏蔽了所有权限，但文件的初始值为 `666`，则 `6`
    - `7` 为 `-1`。超出 `0` 是没有意义的，因此系统将其视为 `0`。所以，`0027` 的掩码会为文件的权限设置为 `650`。
- en: The `/etc/profile` and `~/.bashrc` files are executed whenever a user logs in
    to configure their session's environment. Calling `umask` in `profile` has the
    effect of setting the mask for all users. `.bashrc` is executed after `profile`
    and is user specific; so, its call to `umask` overrides the previously set value,
    setting the mask for that specific user.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户登录时，`/etc/profile` 和 `~/.bashrc` 文件会被执行，以配置他们会话的环境。在 `profile` 中调用 `umask`
    会设置所有用户的掩码。`.bashrc` 在 `profile` 后执行，并且是针对用户特定的，因此它对 `umask` 的调用会覆盖之前设置的值，为该特定用户设置掩码。
- en: See also
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information about umask:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 umask 的更多信息，请参考以下资源：
- en: 'Wikipedia: Umask ([http://unix.stackexchange.com/questions/102075/why-are-666-the-default-file-creation-permissions](http://unix.stackexchange.com/questions/102075/why-are-666-the-default-file-creation-permissions))'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科：Umask ([http://unix.stackexchange.com/questions/102075/why-are-666-the-default-file-creation-permissions](http://unix.stackexchange.com/questions/102075/why-are-666-the-default-file-creation-permissions))
- en: Why are 666 the default file creation permissions? ([https://en.wikipedia.org/wiki/Umask](https://en.wikipedia.org/wiki/Umask))
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 666 是默认的文件创建权限？([https://en.wikipedia.org/wiki/Umask](https://en.wikipedia.org/wiki/Umask))
- en: Controlling file permissions with umask ([http://linuxzoo.net/page/sec_umask.html](http://linuxzoo.net/page/sec_umask.html))
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制文件权限与 umask ([http://linuxzoo.net/page/sec_umask.html](http://linuxzoo.net/page/sec_umask.html))
- en: Running binaries as a different user
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以不同用户身份运行二进制文件
- en: Every program on CentOS runs within the environment of a user account regardless
    of whether the program is executed by a user or run as an automated system process.
    However, sometimes we want the program to run with different restrictions and
    access those rights the account is allowed. For example, a user should be able
    to use the `passwd` command to reset their password. The command needs write access
    to `/etc/passwd` but we don't want the user running the command to have such access.
    This recipe teaches you how setting a program's SUID and SGID permission bits
    allows it to execute within the environment of a different user.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CentOS 上，每个程序都在一个用户账户的环境中运行，无论该程序是由用户执行还是作为自动化系统进程运行。然而，有时我们希望程序在不同的限制下运行，并且访问该账户所允许的权限。例如，一个用户应该能够使用`passwd`命令重置他们的密码。该命令需要对`/etc/passwd`的写入权限，但我们不希望运行该命令的用户具有此权限。本教程将教你如何通过设置程序的
    SUID 和 SGID 权限位，使其在不同用户的环境中执行。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system. Administrative privileges are also required,
    either by logging in with the `root` account or by the use of `sudo`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程需要一个 CentOS 系统。同时需要管理员权限，可以通过登录 `root` 账户或使用 `sudo` 来获得。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to allow a program to execute as a different user:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤允许程序作为不同用户执行：
- en: 'Identify the file''s owner and group details using the `ls` command. The third
    field in its output lists the owner and the fourth field lists the group:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls`命令来识别文件的所有者和组的详细信息。其输出的第三列列出了所有者，第四列列出了组：
- en: '[PRE30]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![How to do it...](img/image_03_005.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_03_005.jpg)'
- en: The -l option displays the file listing in long-form which includes ownership
    information
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: -l选项以长格式显示文件列表，其中包括所有权信息
- en: 'If necessary, change the file''s ownership using `chown` so that the owner
    is the one whose environment you want the script to execute in:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，使用`chown`命令更改文件的所有权，使文件的所有者是你希望脚本在其环境中执行的用户：
- en: '[PRE31]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Set the SUID bit to allow the program to run as if it were invoked by its owner:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 SUID 位，以允许程序像由其所有者调用一样执行：
- en: '[PRE32]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Set the SGID bit to allow the program to run as if it were invoked by a member
    of its group:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 SGID 位，以允许程序像由其组成员调用一样执行：
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When a file's SUID and SGID bits are set, the program runs within the environment
    of its owner or group instead of the user who invoked it. This is usually done
    with administrative programs that an unprivileged user should have access to but
    the program itself requires administrative permissions to function properly.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件的 SUID 和 SGID 位被设置时，程序将在其所有者或组的环境中运行，而不是调用它的用户的环境中。这通常应用于需要普通用户能够访问的管理程序，但程序本身需要管理权限才能正常工作。
- en: The bits are set using `chown` with `u` set to target the SUID bit. A script
    with the SUID bit set will execute with the privileges its owner has. `g` is set
    to target the SGID bit which allows the script to execute with the privileges
    of a member of its group. Intuitively, `+` sets the bit and `-` removes the bit,
    later allowing the program to execute in the invoking user's environment.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chown`设置权限位时，`u`用于设置目标为 SUID 位。设置了 SUID 位的脚本将以其所有者的权限执行。`g`用于设置目标为 SGID 位，允许脚本以其组成员的权限执行。直观地，`+`表示设置该位，`-`表示移除该位，从而使程序可以在调用用户的环境中执行。
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'SUID and SGID may be set numerically as well-the value for SUID is 4 and the
    value for SGID is 2\. These can be summed together and appear as the left-most
    digit in the numeric permission value. For example, the following sets the SUID
    bit, the read, write, and execute bits for the file''s owner; read, write, and
    execute bits for group members; and read and execute bits for everyone else:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: SUID 和 SGID 也可以用数字方式设置——SUID 的值是 4，SGID 的值是 2。这些可以相加并作为数字权限值的最左侧数字出现。例如，以下命令设置了
    SUID 位、文件所有者的读、写和执行位；组成员的读、写和执行位；以及其他所有人的读和执行位：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: However, the numeric approach requires you to specify all of the file's permissions.
    If you need to do that and want to set the SUID or SGID bits at the same time,
    it's not a problem. Otherwise, it's probably more convenient to use `+` or `-`
    to add or subtract the indented bits.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数字方法要求你指定文件的所有权限。如果你需要这样做，并且希望同时设置 SUID 或 SGID 位，这并不成问题。否则，使用`+`或`-`来添加或删除所需的位可能更加方便。
- en: 'Setting bits using mnemonic characters with `chmod` also works with the standard
    permissions. `u`, `g`, and `a` target the desired bits for its owner (u for user),
    group (g for group), and everybody else (a for all). The characters for read access
    is `r`, write `w`, and execute `x`. Here are a few examples using mnemonic characters:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chmod`的助记字符设置位也适用于标准权限。`u`、`g`和`a`分别表示目标位的所有者（u代表用户）、组（g代表组）和其他所有人（a代表所有）。读取权限用`r`表示，写入权限用`w`表示，执行权限用`x`表示。以下是使用助记字符的一些示例：
- en: 'Allow the file''s owner to execute the file:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许文件所有者执行该文件：
- en: '[PRE36]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Allow a group member to read the file:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许组成员读取文件：
- en: '[PRE37]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Prevent everyone who is not the owner or a member of the group from writing
    to the file:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止非所有者或组成员写入文件：
- en: '[PRE38]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Refer to the following resource for more information about `chmod` and setting
    the SUID and SGID bits.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下资源了解有关`chmod`以及设置SUID和SGID位的更多信息。
- en: The `chmod` man page ([https://linux.die.net/man/1/chmod](https://linux.die.net/man/1/chmod))
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chmod`手册页 ([https://linux.die.net/man/1/chmod](https://linux.die.net/man/1/chmod))'
- en: How to set the SetUID and SetGID bit for files in Linux and Unix ([http://linuxg.net/how-to-set-the-setuid-and-setgid-bit-for-files-in-linux-and-unix/](http://linuxg.net/how-to-set-the-setuid-and-setgid-bit-for-files-in-linux-and-unix/))
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Linux和Unix中设置SetUID和SetGID位 ([http://linuxg.net/how-to-set-the-setuid-and-setgid-bit-for-files-in-linux-and-unix/](http://linuxg.net/how-to-set-the-setuid-and-setgid-bit-for-files-in-linux-and-unix/))
- en: 'Wikipedia: Setuid ([https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid))'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科：Setuid ([https://en.wikipedia.org/wiki/Setuid](https://en.wikipedia.org/wiki/Setuid))
- en: Working with SELinux for greater security
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SELinux提高安全性
- en: This recipe shows you the basics of working with Security-Enhanced Linux (SELinux),
    a kernel extension that adds an extra layer of security to your CentOS installation.
    Because it runs at the kernel level, SELinux can control access beyond the reach
    of the traditional filesystem permissions, including restricting running processes
    and other resources.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何使用安全增强Linux（SELinux）的基础知识，SELinux是一个内核扩展，为您的CentOS安装增加了一层额外的安全性。由于它在内核级别运行，SELinux可以控制传统文件系统权限之外的访问，包括限制正在运行的进程和其他资源。
- en: Unfortunately, some administrators disable SELinux because admittedly it can
    be a source of frustration. They're comfortable with the user/group/all and read/write/execute
    approach and suddenly find themselves at a loss when SELinux blocks something
    that seems as it should be available. However, the extra layer of security that
    SELinux provides is worth the effort of investigating such problems and adjusting
    its policies if necessary.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，一些管理员禁用了SELinux，因为诚然它可能成为挫折的源头。管理员们习惯了用户/组/所有人以及读取/写入/执行的方式，突然发现当SELinux阻止本应可用的内容时，他们无从下手。然而，SELinux提供的额外安全层是值得投入精力调查此类问题并在必要时调整其策略的。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a CentOS system. Administrative privileges are also required,
    either by logging in with the `root` account or through the use of `sudo`. The
    demonstrated commands come from the `policycoreutils-python` package, so be sure
    to install the package first using the `yum install policycoreutils-python` command.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求使用CentOS系统。同时也需要管理员权限，可以通过以`root`账户登录或使用`sudo`命令获得。示范的命令来自`policycoreutils-python`包，因此请先使用`yum
    install policycoreutils-python`命令安装该包。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This collection of commands will introduce you to working with SELinux in various
    contexts, which are as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本集合命令将带您了解在不同上下文中使用SELinux，具体如下：
- en: Use `sestatus` to verify whether SELinux is enabled and to see what policy is
    loaded:![How to do it...](img/image_03_006.jpg)
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sestatus`验证SELinux是否启用，并查看加载了哪个策略：![如何操作...](img/image_03_006.jpg)
- en: SELinux is enabled on this system and currently enforcing the targeted policy
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该系统已启用SELinux，并当前强制执行目标策略。
- en: Use `id -Z` to see which SELinux account, role, and domain your account is mapped
    to.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`id -Z`查看您的账户映射到的SELinux账户、角色和域。
- en: Use `ls -Z` to see the security context of a file or directory:![How to do it...](img/image_03_007.jpg)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ls -Z`查看文件或目录的安全上下文：![如何操作...](img/image_03_007.jpg)
- en: Both id and ls can display security context related information
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`id`和`ls`都可以显示与安全上下文相关的信息'
- en: 'Use `semodule -l` to review the list of loaded policy modules in the current
    policy. The output can be quite lengthy and you may find it beneficial to paginate
    it using `less` or `more`:'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`semodule -l`查看当前策略中加载的策略模块列表。输出内容可能非常长，您可能会发现使用`less`或`more`分页查看会更方便：
- en: '[PRE39]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Use `semodule -d` and provide a module''s name to disable a specific policy
    module:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`semodule -d`并提供模块名称来禁用特定的策略模块：
- en: '[PRE40]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can verify that the module is disabled by reviewing the list of policy modules
    with `semodule -l` again. The word `disabled` should appear to the right of the
    module name.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过再次使用`semodule -l`查看策略模块的列表来验证模块是否被禁用。`disabled`一词应该会出现在模块名称的右侧。
- en: 'Use `semodule -e` to enable a specific policy module:'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`semodule -e`来启用特定的策略模块：
- en: '[PRE41]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Use `semanage boolean` to selectively enable or disable features of an active
    module. The `-l` argument outputs list of available features with their current
    and default values:'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`semanage boolean`可以选择性地启用或禁用活动模块的特性。`-l`参数会输出可用特性的列表及其当前值和默认值：
- en: '[PRE42]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Use `-m` followed by `--on` or `--off` and the feature name to affect the desired
    feature:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-m`后跟`--on`或`--off`及特性名称来影响所需的特性：
- en: '[PRE43]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![How to do it...](img/image_03_008.jpg)'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_03_008.jpg)'
- en: semanage boolean -l shows which features of a policy module can be toggled on
    and off
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`semanage boolean -l`显示策略模块中可以开启或关闭的特性。'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: SELinux views the system in terms of objects, subjects, domains, and types.
    An object is any resource whether it's a file, directory, network port, memory
    space, and so on. A subject is anything that acts on an object, such as a user
    or a running program. A domain is the environment in which the subject operates,
    or in other words the collection of resources available to the subject. Types
    are simply categories that identify the purpose of an object. Within this framework,
    SELinux's security policies organize objects into roles and roles into domains.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux从对象、主体、域和类型的角度来查看系统。对象是任何资源，无论是文件、目录、网络端口、内存空间等。主体是对对象进行操作的任何实体，如用户或正在运行的程序。域是主体操作的环境，换句话说，是主体可用资源的集合。类型仅仅是识别对象用途的类别。在这个框架下，SELinux的安全策略将对象组织成角色，并将角色组织到域中。
- en: Domains are granted or denied access to types. A user is allowed to open a specific
    file, for example, because they belong to a role in a domain that has permission
    to open that type of object. To decide whether a user has the ability to do something,
    SELinux maps the system's user accounts to one of the users (and roles and domains)
    in its own database. By default, accounts map to SELinux's `unconfined_u` user
    which is assigned the `unconfined_r` role and operates in the `unconfined_t` domain.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 域被授予或拒绝访问特定类型。例如，用户被允许打开某个特定文件，因为他们属于一个在该域中有权限打开该类型对象的角色。为了判断一个用户是否有能力做某事，SELinux会将系统的用户账户映射到它自己数据库中的用户（以及角色和域）。默认情况下，账户会映射到SELinux的`unconfined_u`用户，后者被分配了`unconfined_r`角色并操作于`unconfined_t`域。
- en: This recipe showed us that `id -Z` can be used to retrieve the user, role, and
    domain that our user account maps to and `ls -Z` retrieves a file's security labeling.
    Of course, the values displayed by the commands are different depending on the
    file. For example, the binary file `/bin/cp` executes as the `system_u` user,
    is a member of the `object_r` role, and is in the `bin_t` domain.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子向我们展示了如何使用`id -Z`来获取我们用户账户映射到的用户、角色和域，以及如何使用`ls -Z`来获取文件的安全标签。当然，命令显示的值会根据文件不同而有所不同。例如，二进制文件`/bin/cp`作为`system_u`用户执行，属于`object_r`角色，并在`bin_t`域中。
- en: The `sestatus` command outputs basic status information about SELinux, such
    as whether it's enabled, enforcing its policies, and how it's enforcing them.
    SELinux can run in enforcing mode, in which it actively enforces its policies,
    or in permissive mode, in which it will not prevent any actions but will log a
    message if an action would have been prevented by the policy. You can set SELinux
    to permissive mode with `setenforce 0`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`sestatus`命令输出关于SELinux的基本状态信息，例如是否启用、是否强制执行其策略，以及如何执行这些策略。SELinux可以运行在强制模式下，在这种模式下它会积极地执行其策略；也可以运行在宽容模式下，在这种模式下它不会阻止任何操作，但如果某个操作本应被策略阻止，它会记录一条日志。你可以使用`setenforce
    0`将SELinux设置为宽容模式。'
- en: 'The `semodule` command is used to manage policy modules. For the sake of keeping
    everything organized, a policy is a collection of modules and each module is concerned
    with a specific program or activity. There are dedicated modules for the most
    common applications, such as MySQL, Apache HTTP server, and SSHd, which describe
    which domains have access to which types. This recipe showed us how we can enable
    or disable these modules using the `-e` and `-d` arguments to `semodule`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`semodule` 命令用于管理策略模块。为了保持一切井然有序，策略是模块的集合，每个模块关注一个特定的程序或活动。针对最常见的应用程序（如 MySQL、Apache
    HTTP 服务器和 SSHd）有专门的模块，这些模块描述了哪些域可以访问哪些类型。这个教程展示了如何使用 `semodule` 的 `-e` 和 `-d`
    参数启用或禁用这些模块：'
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Finally, the recipe presented the `semanage` command, which manages various
    aspects of SELinux. We saw its `boolean` subcommand, using it to list the specific
    protections we can toggle on or off.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，教程介绍了 `semanage` 命令，它用于管理 SELinux 的各个方面。我们看到了它的 `boolean` 子命令，使用它来列出可以切换开关的特定保护项。
- en: 'It probably goes without saying that while SELinux does a great job in protecting
    your system by adding an extra layer of access controls, fully understanding it
    and writing custom policies is a serious undertaking. Entire books have been written
    on this subject and there is a plethora of resources available online. The SELinux
    Users and Administrator''s Guide that is part of the Red Hat Enterprise Linux
    7 documentation and a three-part series introducing the basic concepts of SELinux
    by DigitalOcean are great starting points, and I''ve listed their URLs here. I
    also recommend the book *SELinux by Example: Using Security Enhanced Linux* by
    David Caplan, Karl MacMillan, and Frank Mayer.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '这可能无需多说，尽管 SELinux 通过增加额外的访问控制层来有效保护系统，但完全理解它并编写自定义策略是一项严肃的任务。关于这个主题已经写了整本书，并且在线上有大量的资源可供使用。作为入门，Red
    Hat Enterprise Linux 7 文档中包含的 SELinux 用户和管理员指南以及 DigitalOcean 提供的三部分系列文章，介绍了 SELinux
    的基本概念，都是非常好的起点，我已经在这里列出了它们的 URL。我还推荐由 David Caplan、Karl MacMillan 和 Frank Mayer
    合著的书籍《*SELinux by Example: Using Security Enhanced Linux*》。'
- en: See also
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Refer to the following resources for more information on working with and better
    understanding SELinux:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用和更好理解 SELinux 的更多信息，请参考以下资源：
- en: 'Wikipedia: Security-Enhanced Linux ([https://en.wikipedia.org/wiki/Security-Enhanced_Linux](https://en.wikipedia.org/wiki/Security-Enhanced_Linux))'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '维基百科: 安全增强 Linux ([https://en.wikipedia.org/wiki/Security-Enhanced_Linux](https://en.wikipedia.org/wiki/Security-Enhanced_Linux))'
- en: SELinux Project Wiki ([http://selinuxproject.org/page/Main_Page](http://selinuxproject.org/page/Main_Page))
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELinux 项目 Wiki ([http://selinuxproject.org/page/Main_Page](http://selinuxproject.org/page/Main_Page))
- en: RHEL7 SELinux User's and Administrator's Guide ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/part_I-SELinux.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/part_I-SELinux.html))
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL7 SELinux 用户和管理员指南 ([https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/part_I-SELinux.html](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/SELinux_Users_and_Administrators_Guide/part_I-SELinux.html))
- en: 'CentOS Wiki: SELinux ([http://wiki.centos.org/HowTos/SELinux](http://wiki.centos.org/HowTos/SELinux))'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CentOS Wiki: SELinux ([http://wiki.centos.org/HowTos/SELinux](http://wiki.centos.org/HowTos/SELinux))'
- en: An Introduction to SELinux on CentOS 7 ([http://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-1-basic-concepts](http://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-1-basic-concepts))
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 7 上的 SELinux 入门 ([http://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-1-basic-concepts](http://www.digitalocean.com/community/tutorials/an-introduction-to-selinux-on-centos-7-part-1-basic-concepts))
