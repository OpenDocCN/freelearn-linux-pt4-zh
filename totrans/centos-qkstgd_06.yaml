- en: Process Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processes access multiple resources in a running system. Process management
    is essential to manage these resources effectively and keep your system up and
    running smoothly. In this chapter, you will learn how to view processes running
    on a Linux system and how to employ interactive management from the command line.
    Then, you will learn how to control different programs running on a Linux system
    using the command line. You will also learn how to communicate with different
    processes using signals and how to modify their priority level on a running system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing current processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with processes using signals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring processes and load averages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing a processes' priority levels with nice and renice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling jobs on the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section deals with various concepts related to processes, such as their
    types, states, attributes, and so on. Process management is an essential skill
    that all types of users of Linux systems should master.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A process is an instance of a program in execution. It differs from a program
    or command in the sense that a single program can start several processes simultaneously.
    Each process uses several resources, as mentioned in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: An address space in memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each process has some security properties, such as ownership, privileges, and
    so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each process has a state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each process has local and global environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each process has a scheduling context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each process has allocated resources, such as file descriptors, network ports,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A kernel keeps tracks of each process by assigning each process a unique **process
    ID** (**PID**) number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user's program accesses the information for each process through a directory
    called `/proc/PID`, which is maintained by a kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process creation on a Linux system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All processes on CentOS 7 are descendants of the first system process, known
    as **systemd**. An existing process (parent) duplicates its own address space
    using a fork system call to create a new process (child) structure. Each new process
    is assigned a unique PID for tracking process state, CPU usage, memory usage,
    and other characteristics. PIDs are generally assigned in ascending order when
    a new process is created. The PID 1 is assigned to the systemd process. The PID
    and **PPID** (short for **Parent Process ID**) are the attributes of each process
    running on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: PPID is the PID of a parent process that starts the child process. If a parent
    dies, that process is known as an **orphan** process. For a long time, the orphan
    process has been adopted by the `init` (PID=1) process. However, nowadays, in
    recent kernels, `kthread` (PID=2) is the adoptive process for orphan child processes.
  prefs: []
  type: TYPE_NORMAL
- en: A **thread ID** (**TID**) number is the same as PID for single-threaded processes.
    For multi-threaded processes, each thread shares the same PID, but a different
    TID.
  prefs: []
  type: TYPE_NORMAL
- en: Processes types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different types of processes, based on the task they are performing.
    Some of the common types of processes that exist on a Linux system are described
    in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This type of process is started by a user, either on the command line or a through
    graphical user interface, such as Bash shell, Firefox, `top` command, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Batch processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These kind of processes are scheduled to run from the Terminal and disconnect
    themselves from the Terminal at a later stage. An example of this is `updatedb`.
  prefs: []
  type: TYPE_NORMAL
- en: Daemons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These processes are automatically started on system boot up and continue to
    run until shutdown or until stopped in-between manually. They continuously wait
    for a user or system request in the background. By convention, the names of most
    daemon programs end with the letter `d`, such as `httpd`, `named`, `mysqld`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threads are also known as **lightweight processes** (**LWPs**). Each thread
    has a main process whose memory and other resources are shared by a thread. Each
    thread is scheduled and runs independently by the kernel. A thread can end at
    any time without terminating the whole process, and a process can also create
    new threads at any time. For example, when we open multiple tabs in a Firefox
    browser, it creates multiple threads, and each thread runs independently.
  prefs: []
  type: TYPE_NORMAL
- en: Kernel threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are kernel tasks that are started and used by the kernel, and users do
    not have much control over them, such as `kthreadd`.
  prefs: []
  type: TYPE_NORMAL
- en: Process states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is a multitasking operating system, where each CPU core executes one process
    at any single point in time. This process of scheduling (constantly shifting processes
    on and off the CPU), and allocating CPU time as per priority, is one of the key
    functions of a kernel. Based on this, processes are assigned a state such as running,
    sleeping, stopped, and so on, which keeps changing with the circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists Linux process states with their flags and descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name of process state** | **Flag** | **Kernel defined name** | **Description**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Running | `R` | `TASK_RUNNING` | In this state, a process is either currently
    executing on a CPU or waiting to run in a queue. This state is also known as **runnable**
    when a process is ready to run and is waiting in a queue. |'
  prefs: []
  type: TYPE_TB
- en: '| Sleeping | `S` | `TASK_INTERRUPTIBLE` | In this state, a process is waiting
    for an event to complete. On receiving a signal, the process returns to the running
    state. |'
  prefs: []
  type: TYPE_TB
- en: '| `D` | `TASK_UNINTERRUPTIBLE` | In this state, a process will not respond
    to a signal. It is used only in specific conditions, usually associated with I/O,
    when interruptions are not desirable. |'
  prefs: []
  type: TYPE_TB
- en: '| `K` | `TASK_KILLABLE` | In this state, a process is in the sleeping state and
    will only respond to a kill signal to exit. |'
  prefs: []
  type: TYPE_TB
- en: '| Stopped | `T` | `TASK_STOPPED` | This state is reached when a process is
    stopped by a job control signal. |'
  prefs: []
  type: TYPE_TB
- en: '| Zombie | `Z` | `EXIT_ZOMBIE` | A zombie or defunct process state is one where
    a process has terminated but its entry is not removed from the process table by
    the respective parent. |'
  prefs: []
  type: TYPE_TB
- en: Viewing current processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each process running on a Linux system has various attributes, such as PID,
    PPID, the CPU time consumed by the process, the physical and virtual memory consumption
    of the process, and so on. All of this information can be found in the process
    table of the operating system. When working in a multi-user environment, it might
    happen that a process started by a user consumes the CPU cycle excessively. Hence,
    it is essential to manage processes and to manage computer resources efficiently.
    For this, we need to identify the types of processes and change their priority
    levels, or even terminate them if required. This section describes the use of
    various commands that are helpful for viewing processes and their attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Listing running processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **ps** (short for **process status**) is used to list the current processes
    information that's available in the process table. It's similar to the `tasklist`
    command of Windows, which also used to list the running tasks of Windows in the
    command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The ps command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Linux version of the `ps` command supports three types of format, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unix (POSIX) standard**: In this format, options may be grouped and prefixed
    with a hyphen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BSD standard**: In this format, various options can be grouped, but they
    are not prefixed with a hyphen symbol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GNU standard**: In this format, long options are used, which are prefixed
    with two hyphen symbols'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various uses for the `ps` command, are described in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying processes running from the current shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the `ps` command, as shown in the following screenshot to list the process
    running from the current shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f43c215a-365a-4cd8-9a58-864c5ff1d60b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output shows rows of data with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | ** Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `PID` | The process ID of the running process |'
  prefs: []
  type: TYPE_TB
- en: '| `TTY` | The Terminal type from which the process is running |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME` | The cumulative CPU time consumed by the process and the child processes
    started by the process |'
  prefs: []
  type: TYPE_TB
- en: '| `CMD` | The command that runs as the current process |'
  prefs: []
  type: TYPE_TB
- en: Displaying all processes by their user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ps` command can be used with the `-u` option to filter processes by user,
    as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Displaying all processes in different formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ps` command can be used display all running processes on a system in different
    formats, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Display all the processes running in the system in Unix format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ps` command can be used to display all running processes in a simple Unix
    format with either the `-A` option or the `-e` option, as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ps` command can be used to display a detailed listing of all the running
    processes by using the `-e` option to show all the processes and the `-f` option
    to show full details of each process in Unix format, as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on execution of preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d227967a-e12a-4c2f-b813-8d7a2ed119fd.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we have limited the output of the `ps` command to
    display only the top five lines using the head command. In subsequent examples,
    we have used the same technique to limit the output of `ps` command for demonstration
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output shows rows of data with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `UID` | User ID of the person who ran the command |'
  prefs: []
  type: TYPE_TB
- en: '| `PID` | Process ID of the command |'
  prefs: []
  type: TYPE_TB
- en: '| `PPID` | Parent process that started the command |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | Number of children a process has |'
  prefs: []
  type: TYPE_TB
- en: '| `STIME` | Start time for the process |'
  prefs: []
  type: TYPE_TB
- en: '| `TTY` | Terminal associated with the process; you will see a question mark `?` if
    a process is not attached to a Terminal |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME` | Cumulative CPU time consumed by the process and the child processes
    started by the process |'
  prefs: []
  type: TYPE_TB
- en: '| `CMD` | The command that was run to start the process |'
  prefs: []
  type: TYPE_TB
- en: '| Using the `-F` option with `-e` (`$ ps -eF` ) will list further columns:
    |'
  prefs: []
  type: TYPE_TB
- en: '| `PSR` | Processor number to which the process is assigned |'
  prefs: []
  type: TYPE_TB
- en: '| `SZ` | Total amount of memory size in physical pages for the given process
    |'
  prefs: []
  type: TYPE_TB
- en: '| `RSS` | Resident set size is the actual physical memory size consumed by
    a process |'
  prefs: []
  type: TYPE_TB
- en: Display all the processes running in system using BSD syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ps` command can be used with the aux option to display all running processes
    in BSD syntax, as shown in the following command line. Here, option a lists all
    of the processes attached to Terminals, option u lists the users of processes,
    and option `x` lists all processes that are not associated with a Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on execution of the preceding command is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d1532ae-6d36-4f53-b48d-8d84b47d9a78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output shows rows of data with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `USER` | The name of the user associated with the process |'
  prefs: []
  type: TYPE_TB
- en: '| `PID` | The unique numeric process ID assigned to the process |'
  prefs: []
  type: TYPE_TB
- en: '| `%CPU` | Percentage of the CPU used by a process (the length of time the
    process has been running for, divided by the total CPU time used by the process)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `%MEM` | Percentage of the RAM memory used by the process (memory used divided
    by the total memory available) |'
  prefs: []
  type: TYPE_TB
- en: '| `VSZ` | Virtual memory size expressed in KiB |'
  prefs: []
  type: TYPE_TB
- en: '| `RSS` | Resident set size is the actual physical memory size consumed by
    the process |'
  prefs: []
  type: TYPE_TB
- en: '| `TTY` | The Terminal controlling the process; you will see `?` if the process
    is not attached to a Terminal |'
  prefs: []
  type: TYPE_TB
- en: '| `STAT` | Displays the following process states: `R`: Running`S`: Sleep interruptible`D`:
    Sleep uninterruptible`T`: Stopped`Z`: Zombie`<`: High priority`N`: Low priority`L`:
    Has pages locked into memory`s`: Session leader`l`: Multithreaded`+`: Foreground
    process |'
  prefs: []
  type: TYPE_TB
- en: '| `START` | Date or time when the process was started |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME` | Cumulative CPU time consumed by the process and the child processes
    started by the process |'
  prefs: []
  type: TYPE_TB
- en: '| `CMD` | Command used to start the process |'
  prefs: []
  type: TYPE_TB
- en: Sorting processes based on different parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover different examples to show you how the sorting
    of processes can be done with the `ps` command based on different parameters.
    The output of each example is shown in the subsequent screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sort processes in ascending order by the highest CPU utilization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/adfa6205-dc85-49c3-95e4-057125b6dd1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sort processes in ascending order by the highest memory utilization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b7e334a7-6bbd-4663-8570-50e2f7e960b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Combine both the CPU and memory utilization for sorting by a single command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0f3f70cf-e7c7-4fef-88a6-e7f935e8068a.png)'
  prefs: []
  type: TYPE_IMG
- en: If a zombie process entry is available in the process table, it will appear
    as exiting or defunct.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying processes by user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To filter processes by user, the `-u` option is followed by the username. Multiple
    usernames can be provided, separated by a comma. In the following example, the `ps`
    command is used to list the processes started by user Apache only, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60c34509-b0b3-45ea-8e99-59ccac66a75c.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying process information by name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To list process information by process name, use the `-C` option, followed
    by the exact process name, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a135fd94-43df-4eda-9f57-064b942750b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying process details by PID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display process information using PID, use the `-p` option, followed by
    the PID of processes, separated by a comma, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3da3f660-3c0c-47ff-b05e-ca9407c6770a.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying a process hierarchy in a tree style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the parent-child relationship between processes, the `--forest`
    option is used, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea5ac33d-c828-4fd5-8a7a-6434ab6c84cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the child processes of a parent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the child processes of a parent using the PID of the main process,
    we can use the `--ppid` option. The main parent process is owned by the root,
    and child processes are forked and owned by the parent. The example of the `ps`
    command to display the child of a specified parent `PID` is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57a00456-d200-4547-a44e-48d8aebfa462.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying the thread of a process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the thread of a process, the `-L` option is used with the `ps` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f0262ea-1f87-45b7-9382-beab79e39e96.png)'
  prefs: []
  type: TYPE_IMG
- en: The output shows rows of data with several columns, all of which have been covered
    in previous examples, except the `LWP` column, which represents the TID, and **NLWP**
    (short for **Number of Lightweight Processes**), which represents the number of
    threads in a process here.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the pid of a process if the process name is known
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To print only the PIDs of processes whose names are known, we use the `-C`
    option, followed by the exact process name and the `-o` option, followed by `pid=`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a802249d-0c48-4504-9efd-1dd27ed0d9da.png)'
  prefs: []
  type: TYPE_IMG
- en: You can look up the meaning of all the labels and the various process state
    descriptions in the Unix standard and BSD standard from the man page of the `ps`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Using the pstree command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command is used to display the parent-child relationship in hierarchical
    format. The output of this command is quite similar to the output of the `ps axjf`
    command and the `ps -ef --forest` command, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the tree hierarchy of a single process with
    PID using the `pstree` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f01d7b8e-9c74-472b-bb08-12367fc49564.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the tree hierarchy of a user''s processes by executing the command
    line given:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: On execution of the preceding command, the PIDs assigned to each process are
    shown in parentheses after each process name.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the PID of a running process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often, we need to identify a PID to manage it, for example, if you need
    to stop the execution of a process. Sometimes, you may need to change the priority
    level of a process. Hence, to communicate with a process, the most commonly used
    method is using its PID. This section covers multiple commands that are used to
    find the PID of a running process.
  prefs: []
  type: TYPE_NORMAL
- en: Using the pgrep command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pgrep` command is used to look up currently running processes based on
    their name and other attributes, and displays the matching process PID. Its syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are examples to explain the use of the `pgrep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list processes with the `sshd` command name, which is also owned by root,
    execute the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To list processes owned by the user `root` or `daemon`, execute the command
    line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pgrep` command can be used to list processes by specifying a pattern containing
    the process name. The following command line will find the PID of process that
    has the name of Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example shows the usage of the `pgrep` command to list all the
    processes of the user student:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: pidof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pidof` command can be used to find the process ID of a running program,
    if the argument provided to the `pidof` command is the exact process name, as
    shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The ps command with grep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Practically, it is difficult to remember the exact name of processes running
    on a Linux system. In scenarios where you do not remember the exact name of a
    process, the `pidof` command will not return the PID in the output. In such cases,
    the `ps` command output can be given as input to the grep filter to find the desired
    process name, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The second column of output contains the PID of the filtered process.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating with processes using signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processes communicate with each other using signals. We can also communicate
    with processes using `kill`, `pkill`, or the `killall` command to pass different
    signals.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a signal and its types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A signal is a kind of software interrupt to a process. A signal can also be
    considered as a notification that needs to be processed for a specific event.
    `Kill`, `pkill`, and `killall` are programs that are used to deliver these signals
    to processes. On Linux, every signal name begins with the characters SIG. The
    signal numbers described in the following table may vary on different Linux hardware
    platforms, however, in any case, the signal name and meaning will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the popular signals used for process management,
    along with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Signal****no.** | **Signal****name** | **Meaning** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `SIGHUP` | Hangup | Given when controlling Terminal hangup (closed
    when user is away). |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | `SIGINT` | Keyboard interrupt | Used to terminate a program using the
    keyboard key combination *Ctrl *+ *C*. |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | `SIGQUIT` | Keyboard quit | Used to terminate a program using the keyboard
    key combination *Ctrl* + *D*. |'
  prefs: []
  type: TYPE_TB
- en: '| `9` | `SIGKILL` | Terminateforcefully | Causes the forceful, abrupt termination
    of a program by the user. Cannot be blocked, ignored, or handled. |'
  prefs: []
  type: TYPE_TB
- en: '| `15`(default) | `SIGTERM` | Terminategracefully | Terminates the program
    gracefully. This signal can be blocked, ignored, or handled. It is the default
    signal sent by the `kill` command. |'
  prefs: []
  type: TYPE_TB
- en: '| `18` | `SIGCONT` | Continue | Tells a stopped process to resume. |'
  prefs: []
  type: TYPE_TB
- en: '| `19` | `SIGSTOP` | Stop | Suspends a process. This signal can''t be blocked
    or handled. |'
  prefs: []
  type: TYPE_TB
- en: '| `20` | `SIGTSTP` | KeyboardStop | Used to suspend a process using the keyboard
    key combination *Ctrl* + *Z*. This signal can be blocked, ignored, or handled.
    |'
  prefs: []
  type: TYPE_TB
- en: 'The `kill` command is used to list all of the signals supported by your Linux,
    system as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c82560f5-ba87-4f7b-9bb1-ae06fcf81c7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Each signal has a default action associated with it, such as the termination
    of a process, stopping a process, continuing a stopped process, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Sending signals to processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple methods for sending signals to a process. One of the most
    common is using a keyboard interrupt such as *Ctrl* + *C*, *Ctrl* + *D*, and so
    on. Another method is using the `kill`, `killall`, and `pkill` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Sending signals to processes by PID using the kill command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `kill` command sends a signal to a process by PID. Contrary to its name,
    the `kill` command can be used to send any signal to processes. The default signal
    sent by the `kill` command is `SIGTERM`, for example, signal number `15`. The
    syntax of the kill command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are examples to explain the usage of `kill` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For sending a default signal to a process to terminate it gracefully, use the
    following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To terminate a process using the signal name, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To terminate a process using the signal number, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To terminate a process forcefully, use either of the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is similar to the operation that we perform using the Task Manager in
    Windows when we right-click on the process name in the Task Manager and pass the
    end process command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `kill` command can be used to suspend/stop a process and send it to the
    background if it is running in the foreground. This can be done by using either
    of the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To resume a process if it has been stopped, use either of the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Sending signals to multiple processes by name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also send signals to a process or multiple processes using by their name
    with the help of the `killall` command and the `pkill` command, as discussed in
    the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: killall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `killall` command is used to send a signal to one or more processes on
    matching one of the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Command**: Match exact process name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Owner**: Match exact name of the owner of the process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All system**: System-wide processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: pkill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pkill` command is also used to send a signal to multiple processes on
    matching a combination of the criteria, which is explained in following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `pkill` with the command pattern: The `pkill` command can be used to
    send a signal to the matching processes name, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The example of sending a signal to multiple sleep processes using a single
    `pkill` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a835084d-be8b-41e6-89ed-6a4108a9ae40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `pkill` command with UID: The `pkill` command can be used to send
    a signal to processes owned by the specified Linux user account by specifying
    its UID, as shown in the following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `pkill` command with GID: The `pkill` command can be used to send
    a signal to processes owned by the specified Linux group account by specifying
    its GID, as shown in the following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `pkill` command with Parent PID: The `pkill` command can be used
    to send a signal to all of the child processes of the specified parent process,
    as shown in the following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `pkill` command with Terminal name: The `pkill` command can be used
    to send a signal to processes running from a specific controlling Terminal, as
    shown in the following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Monitoring processes and load averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The load average is the average of the load for a given period of time on each
    CPU. It takes into account the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Actively running processes (including each thread as an individual, separate
    task) on a CPU core.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runnable processes, waiting for a CPU to become available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sleeping processes, for example, waiting for some kind of resource (generally
    disk I/O or network I/O) to become available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux counts each physical CPU core and microprocessor hyper-thread as separate
    execution units, and refers to them as individual CPUs. Each CPU has an independent
    request queue. We can count the total number of system CPUs using by the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Understanding load averages on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The load average of processes are viewed using the `w`, `uptime`, or `top` command,
    or with gnome-system-monitor in GUI mode. These commands display the load averages
    by using a combined representation of all CPUs for the last 1, 5, and 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: uptime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `uptime` command tells you how long your system has been up and running.
    However, at the same time, it provides other useful information, such as the number
    of users currently logged in and the system load average for the past 1, 5, and
    15 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c93dc49-3a08-4ef5-8736-c293f8de198f.png)'
  prefs: []
  type: TYPE_IMG
- en: When we have more than one CPU, the load average will be divided by the number
    of CPUs as explained in the preceding screenshot. The increase in load for a short
    duration is not a problem, however, a continuous spike in the last 5 or 15 minute
    load averages may be a cause for concern.
  prefs: []
  type: TYPE_NORMAL
- en: w
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `w` command is used to display information about the users that are currently
    logged onto the machine and their running processes. The first line (header) in
    the output is the same as what we saw in the `uptime` output. An example of the `w`
    command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb21f45c-80fc-476b-a1e9-b8bfc56a47f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output shows rows of data with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command**  | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `USER` | User login name |'
  prefs: []
  type: TYPE_TB
- en: '| `TTY` | The controlling Terminal type, listed as pts/N (pseudo-terminal)
    in GUI, or ttyN on the system console or other directly connected device |'
  prefs: []
  type: TYPE_TB
- en: '| `FROM` | Remote hostname from which the user has logged in |'
  prefs: []
  type: TYPE_TB
- en: '| `LOGIN@` | Login time of the user |'
  prefs: []
  type: TYPE_TB
- en: '| `IDLE` | How long it has been since the user typed any input on that Terminal
    |'
  prefs: []
  type: TYPE_TB
- en: '| `JCPU` | CPU time consumption of all the processes attached to tty, including
    jobs currently running in the background  |'
  prefs: []
  type: TYPE_TB
- en: '| `PCPU` | CPU time consumption of the current processes named in the `WHAT`
    field |'
  prefs: []
  type: TYPE_TB
- en: '| `WHAT` | The command line of the process currently executing  |'
  prefs: []
  type: TYPE_TB
- en: Real-time interactive process monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ps` command gives static snapshots of processes running on a system. Sometimes,
    real-time monitoring of a system is also required. The `top` command is used to
    perform real-time monitoring of a system.
  prefs: []
  type: TYPE_NORMAL
- en: top
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `top` program provides a continuously updated real-time view of the processes
    running on a system after every 2 seconds, until its execution is stopped by pressing
    *q*. It displays multiple pieces of information, including system uptime, a list
    of the running tasks, the CPU status, and a memory status summary, followed by
    the different resources consumed by each process. The `top` command is executed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on execution of the preceding command is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/708956ef-e200-4b2e-ba7d-b01d3e7f5042.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output shows a system information summary, followed by each different processes''
    information in rows, with the descending order of CPU usage in the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **System Information Summary** |'
  prefs: []
  type: TYPE_TB
- en: '| 1) The first line displays how long the system has been up, how many users
    are logged on, and what the load average is. |'
  prefs: []
  type: TYPE_TB
- en: '| 2) The second line displays the total number of processes followed by the
    number of running, sleeping, stopped, and zombie processes. |'
  prefs: []
  type: TYPE_TB
- en: '| 3) The third line displays the various CPU usage parameters: |'
  prefs: []
  type: TYPE_TB
- en: '| `us` | Percentage of CPU time used running un-niced user processes |'
  prefs: []
  type: TYPE_TB
- en: '| `sy` | Percentage of CPU time used running kernel processes |'
  prefs: []
  type: TYPE_TB
- en: '| `ni` | Percentage of CPU time used running user-niced processes |'
  prefs: []
  type: TYPE_TB
- en: '| `id` | Percentage of CPU time spent when the kernel handler was idle |'
  prefs: []
  type: TYPE_TB
- en: '| `wa` | Percentage of CPU time spent waiting for I/O completion |'
  prefs: []
  type: TYPE_TB
- en: '| `hi` | Percentage of CPU time spent serving hardware interrupts |'
  prefs: []
  type: TYPE_TB
- en: '| `si` | Percentage of CPU time spent serving software interrupts |'
  prefs: []
  type: TYPE_TB
- en: '| `st` | Steal time is the percentage of a CPU''s idle time used by the virtual
    machine''s hypervisor |'
  prefs: []
  type: TYPE_TB
- en: '| 4) The fourth and fifth lines display memory usage. Line number four displays
    physical memory and line number five displays virtual memory. |'
  prefs: []
  type: TYPE_TB
- en: '| 5) The sixth line contains the heading for the process information list in
    descending order of CPU usage. It has the following fields: |'
  prefs: []
  type: TYPE_TB
- en: '| `PID` | Process ID number. |'
  prefs: []
  type: TYPE_TB
- en: '| `USER` | Username of the owner of the process. |'
  prefs: []
  type: TYPE_TB
- en: '| `PR` | System priority of the process. |'
  prefs: []
  type: TYPE_TB
- en: '| `NI` | User priority value for a process, also known as the nice value. |'
  prefs: []
  type: TYPE_TB
- en: '| `VIRT` | Total memory a process is using. Virtual memory is a combination
    of resident set, shared memory, and swapped memory. |'
  prefs: []
  type: TYPE_TB
- en: '| `RES` | Physical memory used by a process. |'
  prefs: []
  type: TYPE_TB
- en: '| `SHR` | Shared memory used by a process. |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | Process status codes are displayed here (D,R, S, T, and Z). |'
  prefs: []
  type: TYPE_TB
- en: '| `%CPU` | Percentage of CPU used since the process started. |'
  prefs: []
  type: TYPE_TB
- en: '| `%MEM` | Percentage of memory used by a process. |'
  prefs: []
  type: TYPE_TB
- en: '| `TIME+` | Execution time. |'
  prefs: []
  type: TYPE_TB
- en: '| `COMMAND` | Command name used to start the process. |'
  prefs: []
  type: TYPE_TB
- en: The `top` command is like command line Task Manager in Linux. Using top, we
    can perform interactive monitoring and manage running processes. There are quite
    a few single-key shortcuts to manage the different attributes of a running process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists various keyboard shortcuts that are used to manage
    the `top` command, as well as their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keyboard shortcut**(on top) | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| *t* | Toggle display of summary information |'
  prefs: []
  type: TYPE_TB
- en: '| *m* | Toggle display of memory information |'
  prefs: []
  type: TYPE_TB
- en: '| *l* | Toggle display of uptime information |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Toggle display of all CPUs'' summary or individual CPU''s summary |'
  prefs: []
  type: TYPE_TB
- en: '| *H* | Toggle threads display in summary information of tasks |'
  prefs: []
  type: TYPE_TB
- en: '| *s* | Change the refresh rate of the screen in seconds |'
  prefs: []
  type: TYPE_TB
- en: '| *A* | Sort the process list by the top resource consumers |'
  prefs: []
  type: TYPE_TB
- en: '| *r* | Renice (change the priority) a selected process, by providing PID and
    then the nice value |'
  prefs: []
  type: TYPE_TB
- en: '| *k* | Send a signal to a specific process (the default signal is to terminate),
    by providing PID and then a signal number |'
  prefs: []
  type: TYPE_TB
- en: '| f | Open the configuration screen of the top command |'
  prefs: []
  type: TYPE_TB
- en: '| M | Sort processes by memory usage, in descending order |'
  prefs: []
  type: TYPE_TB
- en: '| P | Sort processes by CPU utilization in descending order |'
  prefs: []
  type: TYPE_TB
- en: '| ? or h | Display help for interactive keystrokes |'
  prefs: []
  type: TYPE_TB
- en: '| U | Filter display for usernames |'
  prefs: []
  type: TYPE_TB
- en: '| *q* | Quit |'
  prefs: []
  type: TYPE_TB
- en: '| *Enter*, Space key | Immediately refreshes the displayed information |'
  prefs: []
  type: TYPE_TB
- en: 'The following are examples to explain the usage of the `top` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the process status of only the specified `pid` with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a delay between consecutive screen refreshes while running `top` commands
    with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the `top` command''s output for specified iterations only by using
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about sophisticated utilities, such as `htop` for process
    monitoring, which gives you the ability to scroll down vertically and horizontally
    to view more processes.
  prefs: []
  type: TYPE_NORMAL
- en: Managing a processes' priority with nice and renice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux is a multi-program system. At any given point of time, several processes
    are running or waiting in a queue on the system, however, a single CPU can actually
    execute one task at a time. If we have more long process queue, then it might
    happen that some more important processes spend more time waiting than executing.
    So, to overcome this problem, Linux allows us to set and modify a processes' priority.
    Lower-priority processes get less CPU time and higher-priority processes get more
    CPU time. Using the `nice` and `renice` command, we can manage the priority of
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding priority
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The priority of a process is known as its **nice** value (or **niceness**).
    It tells you how much nice (number of CPU cycles used) a process is on CPU. Its
    value varies from `-20` to `19`. A lower nice value represents a higherpriority
    process, which will take more CPU cycles, while a higher nice value represents
    a lowpriority process that can wait longer and consumes less CPU cycles. So, a
    nice value of `-20` represents the highest priority and a nice value of `19` represents
    the lowest priority. The default value for new processes is generally `0`, which
    is inherited from their parent.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying priority
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assigning a low nice value, that is, a higher priority, to a CPU-hungry process
    will impact the performance of other processes running on the same Linux system.
    Hence, only root is allowed to give a higher priority to a process, for example,
    setting negative nice values on running processes.
  prefs: []
  type: TYPE_NORMAL
- en: Normal users can only lower the priority of their processes, that is, they can
    set only a higher positive value than the existing nice value for a given process.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the priority of a process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The priority of a process can be viewed using different commands in CentOS
    7, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using gnome-system-monitor to display the nice level in GUI mode. This is the
    GUI Task Manager in CentOS 7\. It is invoked by pressing Application | System
    Tools | System Monitor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5d89d342-8fbe-4f25-93b8-5596d58ee63e.png)'
  prefs: []
  type: TYPE_IMG
- en: The `top` command can also be used to display the priority of processes. It
    shows two columns, named `NI` (displaying the `nice` level mapping of processes)
    and `PR` (displaying the priority value mapping in a kernel to a larger priority
    queue).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ps` command can also be used to display the `nice` level by using `o`
    option to print selected columns, which will also include the nice field, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b4d2b30c-de0b-401a-9ed4-7b4822795bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: If a minus (`-`) symbol is displayed in the output of the `ps` command, then
    it means that a process is running with a different scheduling policy with a higher
    priority.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the priority of a new process (nice value)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normally, when a process is started, it gets the default priority value of
    `0`. The `nice` command is used to start a process with a different priority.
    Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of changing priority of a process using the `nice` command is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/52310257-f130-485f-8fec-686fbedf5a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Root can set a nice value between (`-20` to `19`), and an unprivileged, normal
    user can set a nice value between (`0` to `19`).
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the priority of a running process (renice)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `renice` command is used to change the nice level of an existing process.
    Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, a standard user is trying to increase the priority
    of a process by assigning a negative value, hence they are getting Permission
    denied, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/840d7a82-36cd-4252-8ae9-b73aa99ccabc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when a standard user lowers the priority of a process by assigning a positive
    value, it is set immediately, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c47e5a49-5860-4d2d-8a66-f48823269047.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Apart from the `renice` command, the `top` command can also be used to modify
    the nice value of a running process. The following steps are used to modify a
    process priority using the `top` command:'
  prefs: []
  type: TYPE_NORMAL
- en: Invoke the `top` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *r* key on the keyboard to bring up the option for specifying a new nice
    value on the `top` command's current interactive session
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the new `nice` value and PID, followed by pressing the *Enter* key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Controlling jobs on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux supports executing programs in the foreground as well as in the background.
    This feature allows you to run multiple programs from a single instance of a shell.
    This feature is known as job control or job management.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding different terms related to job management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes various terms related to job management on a Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs management with its associated controlling Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A job is a command that's launched from a Terminal window. Each job can run
    as an independent background program or as an attached program from a Terminal
    (also known as the controlling Terminal here). The `TTY` field of the `ps` command
    is used to display the controlling Terminal name associated with a program.
  prefs: []
  type: TYPE_NORMAL
- en: Some programs, such as daemons (system services), are started by the system
    and do not have any controlling Terminal. Hence, these programs are not considered
    a member of a job and cannot be run in the foreground. Such programs have `?`
    in the `TTY` field of the `ps aux` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a program is started as a foreground process from a Terminal, then that
    Terminal cannot be used for anything else, as it is executing that particular
    foreground process. Take the following command, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: After execution of the preceding command, the Terminal will not respond to any
    other program, as it is controlling the sleep program in the frontend for `1000`
    seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Foreground processes or jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A foreground process or job is a process that is directly executed from the
    shell (also known as the **controlling** Terminal here). As long as that foreground
    job is running, other processes have to wait until it has completed for shell
    access.
  prefs: []
  type: TYPE_NORMAL
- en: This method of launching programs is fine, as long as a program is short and
    gets completed in a short period of time. If a program that requires a long time
    (say, many hours to complete) is launched from the shell in the foreground, it
    will make that shell unavailable for that number of hours. Such a practice is
    not suitable for command execution.
  prefs: []
  type: TYPE_NORMAL
- en: A foreground process will have `+` appended to its status when its details are
    viewed using the `ps` command. The plus `+` symbol means that it is in a foreground
    process group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a `sleep` command in the foreground in one Terminal, as shown in the
    following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following image list all the processes with specified columns and filter
    them using the `grep` command to display the a list of processes with sleep in
    their command name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/061f2025-9dd0-4a0c-a963-7090fc7af202.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to terminate a foreground program in-between, then use *Ctrl* +
    *C* (interrupt from the keyboard).
  prefs: []
  type: TYPE_NORMAL
- en: Background processes or jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a program that takes a long time to complete, launching it as a background
    process (job) is the ideal practice. This frees up the shell, making it available
    for other tasks. We can execute other commands in the Terminal while a program
    is running as a background job from the controlling Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, all programs are executed as a foreground job from the Terminal.
    To start a `job` in the background from the Terminal, add an and at the end of
    the command. For example, start a `sleep` command in the background from a Terminal,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/421ac252-61ac-4e7e-8345-be53afbede87.png)'
  prefs: []
  type: TYPE_IMG
- en: Suspending a foreground process to the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can move a foreground process to the background by following these two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, press *Ctrl* + *Z*, which moves the process to the background in a Stopped
    state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Second, enter the `bg` command to change state of the last background process
    to Running from `Stoppedas`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de824493-779c-48aa-b4f5-05fd92632107.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing jobs in the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A program is started in the background by appending an ampersand (&) to the
    end of a command. On launching the program in the background, it displays a job
    ID (unique for the running session) and the PID of the background process, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32f2a14c-cb0e-48b9-8482-258488b89b2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the `jobs` command to display the background jobs associated with the shell.
    The jobs command displays the job ID, state, and command name. If there is more
    the one background job, the default selection will have `+` in front of it, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fa188c0-65e9-4f2a-9ca2-33b18b489801.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `fg` command is used to bring a background job to the foreground using
    its job ID. The job ID and the `%` of the program is followed by the job number
    displayed in square brackets, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0a80770-4299-428a-9127-085f58961129.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Send a foreground program to the background by first suspending it using *Ctrl *+
    *Z* on the Terminal, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09e7e6cf-2ccc-49ae-9e03-4d27def73246.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `jobs` command, when used with the `-l` option, will also list the program
    ID. To get some more information, we can use the `ps` command with the `j` option,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a1dcca4-d853-4456-8137-e26f62d41fc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `bg` command followed by `%` and the job ID is used to start a stopped
    program in the background, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1adc34f-5c3e-469c-a6d6-c30e9bb73a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began by learning what a process is, and what different
    states and types of processes are in a Linux system. Then, we looked at different
    methods that exist in CentOS 7 to view running processes. This was followed by
    understanding how processes communicate with each other and how we can communicate
    with processes using signals. Thereafter, we learned how to monitor running processes
    and how to manage their priority using nice values. Finally, we looked at how
    `jobs` (commands) are managed on the command line by launching some applications
    in the background and switching an application from the background to the foreground,
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about networking concepts and networking
    commands in CentOS 7\. We will also learn how to perform secure remote logins
    and backups over a network.
  prefs: []
  type: TYPE_NORMAL
