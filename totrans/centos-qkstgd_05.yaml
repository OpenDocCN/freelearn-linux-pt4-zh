- en: Managing File Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件权限
- en: Permissions are one of several good features that make Linux more secure when
    applied properly. Since Linux is a multi-user OS, different users will be working
    with multiple programs and files, and so on. Permissions help keep things secure
    and organized. In this chapter, you will learn how to manage access controls on
    files using basic read, write, and execute permissions and user or group ownership.
    You will also learn to apply special permissions and the **access control list** (**ACL**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 权限是Linux在正确应用时增强安全性的几个优点之一。由于Linux是一个多用户操作系统，不同的用户将同时处理多个程序和文件等。权限有助于保持安全和组织。在本章中，您将学习如何使用基本的读取、写入和执行权限以及用户或组所有权来管理文件的访问控制。您还将学习如何应用特殊权限和**访问控制列表**（**ACL**）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Understanding Linux filesystem permissions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Linux文件系统权限
- en: Managing file permissions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理文件权限
- en: Managing file ownership
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理文件所有权
- en: Special permissions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊权限
- en: Managing default permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理默认权限
- en: Managing ACL on files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理文件上的ACL
- en: Understanding Linux filesystem permissions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Linux文件系统权限
- en: On Linux/Unix-based operating systems, every file belongs to a user and to a
    group. By default, the user who creates the file is the owner of that file and the
    file belongs to that user's primary group. Access to the file via the Linux filesystem
    is controlled by permissions applied to that file. These permissions are classified
    for the owner (also known as the **user**) of the file, group (also known as the **group
    owner**) of that file, and for everybody else (also known as **others**) in the
    Linux system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Linux/Unix的操作系统中，每个文件都属于一个用户和一个组。默认情况下，创建文件的用户是该文件的所有者，文件属于该用户的主组。通过Linux文件系统访问文件的权限由应用于该文件的权限控制。这些权限针对文件的所有者（也称为**用户**）、该文件的组（也称为**组所有者**）以及系统中的其他所有人（也称为**其他人**）进行分类。
- en: 'There are three types of standard permissions that are applied to files:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种标准权限类型应用于文件：
- en: Read, represented by the letter `r`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取，由字母`r`表示
- en: Write, represented by the letter `w`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入，由字母`w`表示
- en: Execute, represented by the letter `x`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行，由字母`x`表示
- en: 'These are generally grouped in triplets (such as `rwx` or `r-w`) to represent
    a class of permissions. Each file has three classes of permissions; that is, these
    permissions affect access to three categories in the system:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通常以三元组（如`rwx`或`r-w`）的形式分组，用于表示一类权限。每个文件有三类权限；也就是说，这些权限影响系统中的三个类别的访问：
- en: '**User/owner (u)**: Describes permissions applicable to the user who is the
    owner of that file. By default, it is the user who creates the file.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户/所有者（u）**：描述适用于文件所有者的权限。默认情况下，创建文件的用户即为所有者。'
- en: '**Group (g)**: Describes permissions applicable to the group that owns the
    file.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组（g）**：描述适用于拥有文件的组的权限。'
- en: '**Others/everyone else (o)**: Describes permissions for everybody else in the
    system.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他人/所有人（o）**：描述系统中其他所有人的权限。'
- en: Effect of permissions on files and directories
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限对文件和目录的影响
- en: The permissions control access to files and directories. The same permissions
    have different effects on files and directories.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 权限控制对文件和目录的访问。相同的权限对文件和目录有不同的影响。
- en: 'Here is a table listing the permissions and the corresponding effect of permissions
    on the file and directories:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是列出权限及其对文件和目录的相应影响的表格：
- en: '| **Permission** | **Effect on files** | **Effect on directories** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **权限** | **对文件的影响** | **对目录的影响** |'
- en: '| Read (`r`) | Contents of file can be read | Contents of directory can be
    listed using the `ls` command |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 读取（`r`） | 可以读取文件内容 | 可以使用`ls`命令列出目录内容 |'
- en: '| Write (`w`) | Contents of file can be modified | We can create or delete
    files and modify permissions on the files or directory |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 写入（`w`） | 可以修改文件内容 | 我们可以创建或删除文件并修改文件或目录的权限 |'
- en: '| Execute (`x`) | We can execute files as commands | Contents of directory
    can be accessed (we can use the `cd` command on that directory) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 执行（`x`） | 我们可以将文件作为命令执行 | 可以访问目录内容（我们可以在该目录上使用`cd`命令） |'
- en: If a user has read permission on a directory, it means they can list the names
    of files in it using the `ls` command only. If a user has only execute permission
    on a directory, then they cannot list the contents of the directory with the `ls`
    command; however, if a user knows the contents of the directory, they can access
    the contents explicitly by accessing the filename.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户对某个目录具有读取权限，意味着他们可以仅通过`ls`命令列出目录中的文件名。如果用户仅对某个目录具有执行权限，则不能使用`ls`命令列出目录的内容；然而，如果用户知道该目录的内容，他们可以通过明确访问文件名来访问目录内容。
- en: Any user can delete a file or sub-directory if they have write permission to
    the directory in which the file resides, irrespective of the ownership or permission
    on the file itself. Root has full control of permissions; it can access or delete
    any file in the filesystem. However, there are some advance permissions such as
    `chattr` and **Security-Enhanced Linux** (**SELinux**) controls, which can be
    used to create access controls for root. SELinux is a mandatory access control,
    which is discussed in [Chapter 9](6aff4224-a804-4b36-b692-4959e8937beb.xhtml),
    *Overview and Essential Advance Utilities*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 任何用户只要对文件所在目录具有写权限，就可以删除该文件或子目录，而与文件本身的所有权或权限无关。Root用户拥有完全的权限控制；它可以访问或删除文件系统中的任何文件。然而，存在一些高级权限，如`chattr`和**安全增强Linux**（**SELinux**）控制，这些可以用于为Root创建访问控制。SELinux是一种强制访问控制，相关内容在[第9章](6aff4224-a804-4b36-b692-4959e8937beb.xhtml)中讨论，*概述和必要的高级实用工具*。
- en: Viewing applied permissions and ownership
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看应用的权限和所有权
- en: 'The `ls` command with the `-l` option is used to get detailed information on
    the directory contents, which includes permissions and ownership. It will list
    the detailed information of all the files that reside in the directory. To prevent
    the descent into the directory and view the information of the directory itself,
    use the `-d` option with the `ls` command, as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ls`命令加上`-l`选项可以获取目录内容的详细信息，包括权限和所有权。它将列出目录中所有文件的详细信息。为了防止进入子目录并查看目录本身的信息，可以在`ls`命令中使用`-d`选项，如下图所示：
- en: '![](img/46c3e54c-48be-4608-8b17-6c0b2a35864f.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46c3e54c-48be-4608-8b17-6c0b2a35864f.png)'
- en: The first character in a long listing tells us the type of file. A hyphen (`-`)
    sign here represents a regular file that can contain data or text, or it can be
    a binary file. The following table lists various types of files and their identifiers
    used as the first character in a long-listing format.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 长格式列出命令的第一个字符告诉我们文件的类型。这里的连字符（`-`）表示一个普通文件，它可以包含数据或文本，或者是一个二进制文件。下表列出了各种文件类型及其在长格式列表中作为第一个字符的标识符。
- en: 'Here is a table listing file types and their descriptions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是列出文件类型及其描述的表格：
- en: '| **Type** | **Description** |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | **描述** |'
- en: '| `-` | File |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 文件 |'
- en: '| `d` | Directory |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 目录 |'
- en: '| `l` | Link (symbolic link similar to shortcuts on Windows) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `l` | 链接（符号链接，类似于Windows上的快捷方式） |'
- en: '| `c` | Character-type device files |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 字符设备文件 |'
- en: '| `b` | Block-type device files |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 块设备文件 |'
- en: '| `s` | Socket-type files |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 套接字类型文件 |'
- en: '| `p` | Named pipes |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `p` | 命名管道 |'
- en: Managing file permissions
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件权限
- en: 'The `chmod` command is used to modify the permissions on a file. **Change mode** (**chmod**) permissions
    are also known as **modes** of a file. Using `chmod`, we can modify permissions
    separately for the owner, group, and the rest of the world (others) in the system.
    There are two ways in which we can modify permissions with `chmod`: one is by
    using numbers and the other is by using symbolic notations.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`命令用于修改文件的权限。**更改模式**（**chmod**）权限也称为文件的**模式**。使用`chmod`，我们可以分别修改系统中所有者、组和其他用户的权限。我们可以通过两种方式使用`chmod`来修改权限：一种是使用数字，另一种是使用符号表示法。'
- en: Modifying file permissions with chmod using symbols
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用符号修改文件权限（chmod）
- en: 'The `chmod` command is used to change the permission or mode of a file or directories.
    It takes the new set of permissions as the first argument, followed by the list
    of files and directories, to apply those new permissions. The symbolic method
    has the following syntax:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`命令用于更改文件或目录的权限或模式。它将新的权限集作为第一个参数，后跟文件和目录的列表，应用这些新权限。符号方法的语法如下：'
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a table listing the keywords used with `chmod` and their descriptions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是列出与`chmod`一起使用的关键字及其描述的表格：
- en: '| **Keyword** | **Description** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **关键字** | **描述** |'
- en: '| Who | It represents whose permission you want to change:`u`: User permissions`g`:
    Group permissions`o`: Other permissions`a`: All user permissionsIf nothing is
    specified in this field, it takes (`a`) as the default value. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 谁 | 它表示您想要更改权限的人：`u`：用户权限`g`：组权限`o`：其他权限`a`：所有用户权限如果在此字段中未指定任何内容，则采用（`a`）作为默认值。
    |'
- en: '| What | It represents what you want to do with permissions:`+`: Add some permissions
    in the existing set of permissions`-`: Remove some permissions from the existing
    set of permissions`=`: Set exactly the specified permissions, irrespective of
    the existing set of permissions |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 什么 | 它表示您想要对权限执行的操作：`+`：在现有权限集中添加一些权限`-`：从现有权限集中删除一些权限`=`：精确设置指定的权限，不考虑现有权限集
    |'
- en: '| Which | It represents which permissions you are using:`r`: Read`w`: Write`x`:
    Execute |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 哪一个 | 它表示您正在使用哪些权限：`r`：读`w`：写`x`：执行 |'
- en: 'The following are some examples to illustrate the usage of the `chmod` command,
    using symbols:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，说明使用`chmod`命令的用法，使用符号：
- en: 'List the existing permissions of the file named `myfile`,as shown in the following
    screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列出名为`myfile`的文件的现有权限，如下屏幕截图所示：
- en: '![](img/799b3948-63ea-4fd8-b955-710dafe58b79.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/799b3948-63ea-4fd8-b955-710dafe58b79.png)'
- en: 'Add execute permission for the user to the file named `myfile`, as shown in
    the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为名为`myfile`的文件添加用户执行权限，如下屏幕截图所示：
- en: '![](img/808aea79-61a4-4400-b22d-0219b3900ffc.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/808aea79-61a4-4400-b22d-0219b3900ffc.png)'
- en: 'Remove the write permission from the group and add the execute permission for
    others to the file named `myfile`, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从组中删除写权限，并为名为`myfile`的文件添加其他用户执行权限，如下屏幕截图所示：
- en: '![](img/8b84f58e-8ef7-4a4f-b843-af6dea0e0c04.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b84f58e-8ef7-4a4f-b843-af6dea0e0c04.png)'
- en: 'Set the read permission exactly and remove any existing permissions for all
    to the file named `myfile`, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 精确设置读权限，并从所有名为`myfile`的文件中删除任何现有权限，如下屏幕截图所示：
- en: '![](img/56a52c2b-f8e7-4695-a6d6-58cce34c2d9a.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56a52c2b-f8e7-4695-a6d6-58cce34c2d9a.png)'
- en: 'Set the execute permission exactly and remove any existing permissions for
    all from the file named `myfile`, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 精确设置并从名为`myfile`的文件中删除所有其他人的现有权限，如下屏幕截图所示：
- en: '![](img/a2f22842-1b8d-46ed-ad67-be8bcd23ec53.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2f22842-1b8d-46ed-ad67-be8bcd23ec53.png)'
- en: Managing file permissions with chmod using numbers
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数字管理`chmod`命令的文件权限
- en: 'The `chmod` command can also be used to modify file or directory permissions,
    using the numeric method. This method sets exactly the new permissions specified,
    using numbers with the `chmod` command, irrespective of the existing permissions
    of the file or directory. In the numeric method, permissions are represented by
    three-digit (or four-digit when setting special permissions) octal numbers. Each
    octal number represents a number between zero and seven, which is the sum of permissions
    for an access level—either a user, group, or others. The syntax to apply permissions
    using numbers is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod`命令也可用于修改文件或目录的权限，使用数字方法。此方法使用`chmod`命令精确设置指定的新权限，不考虑文件或目录的现有权限。在数字方法中，权限用三位八进制数（或设置特殊权限时为四位数）表示。每个八进制数表示一个访问级别（用户、组或其他）的权限总和，数字介于零到七之间。使用数字应用权限的语法如下所示：'
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, each `#` represents permissions for a user, group, and other access levels,
    starting from left to right. It is the sum of all the permissions (read, write,
    and execute) of that access level, where each permission has a certain numeric
    weightage, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，每个`#`表示用户、组和其他访问级别的权限，从左到右。它是该访问级别所有权限（读、写和执行）的总和，每个权限具有特定的数字权重，如下所示：
- en: 'Here is a table listing the numeric weightage of permissions:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个列出权限数字权重的表格：
- en: '| **Permission** | **Numeric weightage** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **权限** | **数字权重** |'
- en: '| Read (`r`) | 4 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 读（`r`） | 4 |'
- en: '| Write (`w`) | 2 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 写（`w`） | 2 |'
- en: '| Execute (`x`) | 1 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 执行（`x`） | 1 |'
- en: 'When setting permissions using the numeric method, we calculate the total sum
    of permissions we need for the user, group, or others; for example, if you want
    to use `set-rwx-r-xr--` as the new permission for `file1`, you do the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数字方法设置权限时，我们计算我们需要为用户、组或其他人分配的所有权限的总和；例如，如果您希望为`file1`使用`set-rwx-r-xr--`作为新的权限，则执行以下操作：
- en: '*user → rwx → 4+2+1=7*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*user → rwx → 4+2+1=7*'
- en: '*group → r-x → 4+1=5*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*group → r-x → 4+1=5*'
- en: '*others → r- - → 4=4*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*others → r- - → 4=4*'
- en: 'The following example of the `chmod` command shows the usage of the `chmod`
    to set permissions using numbers and the usage of `chmod` to set the same permissions
    using symbols:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`chmod`命令的示例，展示了如何使用数字设置权限以及使用符号设置相同权限的`chmod`用法：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following are some examples to illustrate the usage of the `chmod` command
    using numbers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，说明如何使用数字设置`chmod`命令的权限：
- en: 'Set the read permission for the user, the write permission for the group, and
    no permission for others on the file named `file1`, as shown in the following
    screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为名为`file1`的文件设置用户的读权限、组的写权限，并为其他用户设置无权限，如下截图所示：
- en: '![](img/176a9912-d600-4d69-b946-a18ae52e9382.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/176a9912-d600-4d69-b946-a18ae52e9382.png)'
- en: Use `chmod` with the `-R` option to recursive set permissions on all files and
    sub-directories within a directory. With the `X` option, you can add or remove
    execute permissions for directories only and not files. Although not used much,
    it is a useful option sometimes; you can use `chmod -R +rX /data` to set execute
    permissions for directories in the `/data` folder, but not for any file within
    it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有`-R`选项的`chmod`命令可以递归地设置目录中所有文件和子目录的权限。使用`X`选项，你可以为目录（而非文件）添加或移除执行权限。虽然这个选项不常用，但在某些情况下很有用；你可以使用`chmod
    -R +rX /data`为`/data`文件夹中的目录设置执行权限，但不会影响其中的文件。
- en: Managing file ownership
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件所有权
- en: Every file or directory created on a Linux system belongs to a user and a group,
    which are also known as the owner of the file or the group owner of the file.
    Ownership of the file or the directory can be modified by the root user, or the
    owner of the file. Group ownership again can only be modified by the root user
    or the owner of the file, for the groups only to which he is a member. This section
    covers how to manage the ownership of files and directories.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统上创建的每个文件或目录都属于一个用户和一个组，这些都被称为文件的所有者或文件的组所有者。文件或目录的所有权可以由根用户或文件所有者修改。而组所有权只能由根用户或文件所有者修改，且只对该所有者所属的组有效。本节将介绍如何管理文件和目录的所有权。
- en: Understanding default ownership
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解默认的文件所有权
- en: 'When we create a file or directory, it gets certain default ownership and group
    ownership. The user who creates the file becomes the user (owner) of that file,
    and the primary group of that user becomes the group of that file. To find out
    whether a user or a group has the permissions to access a file or a directory,
    a shell checks the ownership of that file in the following order:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建文件或目录时，它会获得某些默认的所有权和组所有权。创建文件的用户成为该文件的用户（所有者），该用户的主组成为该文件的组。要确定用户或组是否有权限访问文件或目录，shell会按以下顺序检查文件的所有权：
- en: When accessing a file, a shell checks whether you are the owner of a file. If
    a user is the owner of a file, then the user gets access to the file with the
    permissions that are set for the owner of the file.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问文件时，shell会检查你是否是文件的所有者。如果用户是文件的所有者，那么该用户将根据为文件所有者设置的权限访问该文件。
- en: If the user is not the owner of the file, a shell checks for the group of the
    file. If the user is a member of a group assigned to the file, then he gets access
    to the file with the permissions that are set for the group of the file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户不是文件的所有者，shell会检查文件所属的组。如果用户是该组的成员，那么他将根据该组的权限访问文件。
- en: If the user is neither the owner of the file and doesn't belong to the group
    assigned to the file, then the user gets access to the file with other permissions.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户既不是文件的所有者，也不属于文件所属的组，则该用户将根据其他权限访问该文件。
- en: 'The long-listing `ls -l` command is used to view the current ownership of the
    file. The third and fourth fields of output of the long-listing command display
    the owner and group of the file, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用长列表命令`ls -l`可以查看文件当前的所有权。该命令输出的第三和第四列显示文件的所有者和所属组，如下图所示：
- en: '![](img/1b795cdb-68c9-4f77-8c10-942f6c29ff01.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b795cdb-68c9-4f77-8c10-942f6c29ff01.png)'
- en: Modifying user ownership with chown
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`chown`修改用户所有权
- en: 'The `chown` command can be used to change the user ownership as well as the
    group ownership of a file or directory. Initially, we will see how the `chown`
    command can be used to change file ownership. The syntax of the `chown` command
    is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown`命令可用于更改文件或目录的用户所有权以及组所有权。首先，我们将看到如何使用`chown`命令更改文件所有权。`chown`命令的语法如下：'
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following are some the examples to illustrate the usage of the `chown`
    command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，说明了 `chown` 命令的使用：
- en: 'List current ownership of file named `myfile` using the `ls` command is shown
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ls` 命令列出名为 `myfile` 的文件的当前所有权，如下所示：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Grant user ownership of the file named `myfile` to `jack`, as shown in the
    following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 `myfile` 的文件的用户所有权授予 `jack`，如下所示的截图所示：
- en: '![](img/7effa62b-d9c6-4482-b287-0f5000b5c471.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7effa62b-d9c6-4482-b287-0f5000b5c471.png)'
- en: 'The `chown` command is very often used with the `-R` option to recursively
    modify the ownership of a complete directory tree. The following command is used
    to grant ownership of a directory named `mydir` and all files and sub-directories
    within it to the user `jack`, as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令常常与 `-R` 选项一起使用，用于递归修改整个目录树的所有权。以下命令用于将名为 `mydir` 的目录及其中的所有文件和子目录的所有权授予用户
    `jack`，如下所示的截图所示：'
- en: '![](img/d469002e-3a10-408b-b683-98c336ad5643.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d469002e-3a10-408b-b683-98c336ad5643.png)'
- en: Modifying group ownership with chown
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `chown` 修改组所有权
- en: 'The `chown` command can also be used to modify group ownership of a file or
    directory by prefixing a group name with a colon (`:`) sign or period (`.`) sign,
    as shown in the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令也可以通过在组名之前加上冒号（`:`）或句点（`.`）符号来修改文件或目录的组所有权，如下所示的命令所示：'
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the usage of the `chown` command to change the
    group of `myfile` to `jack`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用 `chown` 命令将 `myfile` 的组更改为 `jack` 的过程：
- en: '![](img/3b1b111b-03de-40dd-8c8a-e0b78e955f16.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b1b111b-03de-40dd-8c8a-e0b78e955f16.png)'
- en: Modifying both user and group ownership with chown
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `chown` 修改用户和组的所有权
- en: 'The `chown` command can also be used to modify both the owner and group of
    the file simultaneously by using either of the following syntax:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令还可以通过以下任一语法同时修改文件的所有者和组：'
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `chown` command can be used to change the owner of the file named `myfile`
    to root and the group of the file to wheel, as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`chown` 命令可用于将名为 `myfile` 的文件的所有者更改为 root，并将该文件的组更改为 wheel，如下所示的截图所示：'
- en: '![](img/29b5569a-f705-4a81-8fa7-fb832d0a086d.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29b5569a-f705-4a81-8fa7-fb832d0a086d.png)'
- en: Modifying group ownership with chgrp
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `chgrp` 修改组所有权
- en: 'The `chgrp` command is also used to modify the group of a file or directory.
    This can only modify the group owner, unlike the previous command, `chown`,which
    could be used to modify user ownership and group ownership. The syntax of this
    command is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp` 命令也用于修改文件或目录的组。与前面的命令 `chown` 不同，`chgrp` 只能修改组所有者，不能修改用户所有者和组所有者。此命令的语法如下：'
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `chgrp` command can be used to change the group of the `myfile` file to
    the group `jack`,as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`chgrp` 命令可用于将 `myfile` 文件的组更改为 `jack` 组，如下所示的截图所示：'
- en: '![](img/fd671763-30b9-47fc-9956-d0bface1a68a.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd671763-30b9-47fc-9956-d0bface1a68a.png)'
- en: Special permissions
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊权限
- en: Besides the basic permissions set, which is applicable by default, Linux also
    has some special/advanced permission sets, which are used sometimes to enhance
    some functionalities. These permissions are applicable to files (mainly executable
    files) and directories. These are `setuid`, `setgid`, and `sticky bit`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认适用的基本权限集外，Linux 还拥有一些特殊/高级权限集，偶尔用于增强某些功能。这些权限适用于文件（主要是可执行文件）和目录。包括 `setuid`、`setgid`
    和粘滞位（sticky bit）。
- en: Modifying special permissions for files
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改文件的特殊权限
- en: '`Setuid` and `setgid` are two special permissions that are applied to executable
    files.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Setuid` 和 `setgid` 是应用于可执行文件的两种特殊权限。'
- en: If `setuid` is applied to an executable file, it means that if that file is
    executed as a program, then it will run as the user of the file and not as the
    user who ran the program.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `setuid` 应用于一个可执行文件，这意味着如果该文件作为程序执行，它将以文件的用户身份运行，而不是以运行程序的用户身份运行。
- en: Similarly, when `setgid` is applied to the file, it runs as the group of the
    file and not as the group that ran the program.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当 `setgid` 应用于文件时，文件将以文件的组身份运行，而不是以运行程序的组身份运行。
- en: 'The `passwd` command has `setuid` applied by default in Linux systems, as shown
    in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`passwd` 命令在 Linux 系统中默认应用 `setuid`，如下所示的截图所示：'
- en: '![](img/290b174d-dca1-44e8-9d33-36e5b99a9cf5.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/290b174d-dca1-44e8-9d33-36e5b99a9cf5.png)'
- en: 'The `chmod` command can be used to add `setuid` to a script file named `myscript`,as
    shown in the following command line:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`chmod` 命令可用于向名为 `myscript` 的脚本文件添加 `setuid`，如下所示的命令行所示：'
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `chmod` command can be used to add `setgid` on a script file named `myscript`
    as shown in the following command line:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`chmod`命令为名为`myscript`的脚本文件添加`setgid`权限，如下所示的命令行所示：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Modifying special permission, for directories
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改特殊权限，适用于目录
- en: The `sticky bit` and `setgid` are special permissions that are applied to special
    directories.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`sticky bit`和`setgid`是应用于特殊目录的特殊权限。'
- en: Using sticky bit
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用粘滞位
- en: 'The `sticky bit` special permission is used to put a restriction on the deletion
    of files. When sticky bit is set on a directory, then only the owner of the file
    and the root user can delete the files within that directory, for example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`sticky bit`特殊权限用于对文件删除进行限制。当在目录上设置粘滞位时，只有文件的所有者和根用户可以删除该目录中的文件，例如：'
- en: 'The `/tmp` folder has got sticky bit applied by default in Linux systems, as
    shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux系统中，`/tmp`文件夹默认应用了粘滞位，如下图所示：
- en: '![](img/f606b2b4-62dc-4371-94c3-ca49ac8235e2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f606b2b4-62dc-4371-94c3-ca49ac8235e2.png)'
- en: 'The following example illustrates the usage of the `chmod` command to add sticky
    bit to a directory:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用`chmod`命令为目录添加粘滞位（sticky bit）权限：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using setgid
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用setgid
- en: The `setgid` special permission is used to enable group inheritance from the
    parent directory. When `setgid` is set on a directory, then files created in that
    directory will inherit the group affiliation from the parent directory, instead
    of inheriting it from the user who creates the file. It is generally used on collaborative
    (shared) directories to automatically change a file from the default user private
    group to the shared group.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`setgid`特殊权限用于启用从父目录继承组权限。当在目录上设置`setgid`时，在该目录中创建的文件将从父目录继承组权限，而不是从创建文件的用户继承。它通常用于协作（共享）目录，以自动将文件的组从默认的用户私有组更改为共享组。'
- en: 'The following command line is used to view the existing permission of a directory:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令行用于查看目录的现有权限：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following example illustrates the usage of the `chmod` command to add the
    `setgid` permission to a directory:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用`chmod`命令为目录添加`setgid`权限：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is a table listing special permissions and their effect on files and directories:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是列出特殊权限及其对文件和目录影响的表格：
- en: '| **Special permission** | **Numerically fourth-digit weightage** | **Effects
    on files** | **Effects on directories** |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| **特殊权限** | **第四位数字权重** | **对文件的影响** | **对目录的影响** |'
- en: '| `setuid` `(u+s)` | Setuid= 4 | Files are executed as the user that owns the
    file, not the user running that file | No effect |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `setuid` `(u+s)` | Setuid = 4 | 文件以拥有该文件的用户身份执行，而不是运行该文件的用户身份 | 无效 |'
- en: '| `setgid` `(g+s)` | Setgid = 2 | Files are executed as the group that owns
    the file | Enables group inheritance. Files created in the directory have their
    group owner set as the group owner of the directory |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `setgid` `(g+s)` | Setgid = 2 | 文件作为拥有该文件的组来执行 | 启用组继承。在该目录中创建的文件将继承该目录的组所有者
    |'
- en: '| `sticky bit (o+t)` | Sticky bit = 1 | No effect | Only the root or the owner
    of the files can delete the files from the directory with a sticky bit set |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `sticky bit (o+t)` | 粘滞位 = 1 | 无效 | 只有根用户或文件所有者可以删除带有粘滞位的目录中的文件 |'
- en: Extra care is to be taken when setting these special permissions, as incorrect
    setting (usage) of the `setuid` and `setgid` on binaries can lead to privilege
    escalation. Such scenarios can help an attacker gain access to the root account
    via a regular user account.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置这些特殊权限时需要格外小心，因为错误设置（使用）`setuid`和`setgid`在二进制文件上可能导致权限提升。这种情况可以帮助攻击者通过普通用户账户获取根账户的访问权限。
- en: Managing default permissions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理默认权限
- en: The files get their default permissions from the users or processes that create
    them. If a file is created using text editors, it will have read and write permissions
    and no executable permissions for everyone. Similarly, a binary executable created
    using compilers generally has executable permission sets, since they are meant
    for execution.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 文件从创建它们的用户或进程中获取默认权限。如果文件是使用文本编辑器创建的，则它将对所有人具有读写权限，但没有可执行权限。同样，通过编译器创建的二进制可执行文件通常具有可执行权限集，因为它们是为了执行而创建的。
- en: Understanding umask
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解umask
- en: 'Default file and folder permissions are set by the `umask` program. The `umask`
    command without any argument will display the existing value of `umask`. The same
    command, when followed by a new octal value as an argument, will set the new value
    of `umask`. The following command line is used to view the existing `umask` of
    a user:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的文件和文件夹权限由`umask`程序设置。没有任何参数的`umask`命令会显示当前的`umask`值。加上新的八进制值作为参数，`umask`命令会设置新的值。以下命令行用于查看用户的现有`umask`值：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Normal users have a different `umask`,and the root has a different `umask`
    value, to decide the default permissions for files and directories. The following
    examples illustrate the different `umask` values the exit in system for a regular
    user and a root user:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 普通用户和 root 用户的`umask`值不同，这决定了文件和目录的默认权限。以下示例说明了系统中普通用户和 root 用户的不同`umask`值：
- en: 'Execute the `umask` command on Terminal as a root user to view the `umask`
    value for the root account, as shown in the following screenshot:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端中以 root 用户执行`umask`命令，查看 root 账户的`umask`值，如下图所示：
- en: '![](img/f884b0e3-0bdd-4a75-95da-f597e146ab87.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f884b0e3-0bdd-4a75-95da-f597e146ab87.png)'
- en: 'To view the `umask` value of `student` user, first switch to `student` user
    account and then execute the `umask` command as shown in the following screenshot:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看`student`用户的`umask`值，首先切换到`student`用户账户，然后执行`umask`命令，如下图所示：
- en: '![](img/1a719805-f601-4baa-a9c3-5a46e3a5560b.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a719805-f601-4baa-a9c3-5a46e3a5560b.png)'
- en: For files, the maximum default value is generally `666` (normal files do not
    require execute permissions to be set by default), and for directories the maximum
    default value is `777` (since directories require execute permissions to be set
    using the `cd` command). The `umask` values are taken off from the maximum default
    octal values to decide the default permissions for files and directories.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文件，最大默认值通常是`666`（普通文件默认不需要设置执行权限），对于目录，最大默认值是`777`（因为目录需要执行权限来使用`cd`命令）。`umask`值是从最大默认八进制值中减去的，用来决定文件和目录的默认权限。
- en: For example, let's understand the `umask` value `0022` that is the default value
    of the root account. It means remove write permissions for the group and others
    from the maximum permissions of files and directories. Hence, the default permission
    for the file will be `644`, and for the directory it will be `755`. Similarly,
    a `umask` value of `0002` that is the default value of the normal user account,
    means remove write permissions for others from the maximum permissions of files
    and directories. Hence, the default permission for the file will be `664`,and
    for the directory it will be `775`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们理解一下`umask`值`0022`，它是 root 账户的默认值。这意味着从文件和目录的最大权限中去除组和其他用户的写权限。因此，文件的默认权限将是`644`，目录的默认权限将是`755`。类似地，`umask`值`0002`，这是普通用户账户的默认值，意味着从文件和目录的最大权限中去除其他用户的写权限。因此，文件的默认权限将是`664`，目录的默认权限将是`775`。
- en: While setting a new `umask` value of user, if the argument of `umask` command
    contains fewer than three octal digits, then leading zeros are assumed in the
    argument part.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当为用户设置新的`umask`值时，如果`umask`命令的参数少于三位八进制数字，则参数部分会自动补充零。
- en: Managing ACL on files
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件上的 ACL
- en: Standard Linux file permissions are applicable for file owners, groups of files,
    or everyone else in the system. Using standard permissions, we cannot give multiple
    users or multiple groups different permissions for a single file. This kind of
    delicate control is provided using ACLs in Linux. We can give permissions to more
    than one user or one group for the same file.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 Linux 文件权限适用于文件所有者、文件所属组或系统中的其他所有人。使用标准权限时，我们不能为单个文件设置多个用户或多个组的不同权限。这种精细的控制可以通过
    Linux 中的 ACL 来实现。我们可以为同一个文件设置多个用户或多个组的权限。
- en: File owners or root can set ACLs on individual files or on directories if the
    filesystem is mounted with ACL support enabled. CentOS 7's default filesystem
    is `XFS`, which has built-in ACL support. Although not all applications (such
    as `tar`) support ACL, it is still a great functionality available in the Linux
    system.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 文件所有者或 root 可以对单个文件或目录设置 ACL，前提是文件系统启用了 ACL 支持。CentOS 7 的默认文件系统是`XFS`，它内置了 ACL
    支持。虽然并非所有应用程序（如`tar`）都支持 ACL，但它仍然是 Linux 系统中的一个强大功能。
- en: Viewing ACL permissions
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 ACL 权限
- en: Using the `ls -l` command, we can view standard permission and tell whether
    a file or a directory has ACL applied to it. If the tenth character in the permission
    is the `+` symbol, then it indicates that ACL is applied on that file or directory.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ls -l`命令，我们可以查看标准权限，并判断文件或目录是否应用了 ACL。如果权限的第十个字符是`+`符号，则表示该文件或目录应用了 ACL。
- en: 'If the plus (`+`) symbol is present on a file, it means the user permission
    represents the user ACL setting, the group permission represents the ACL mask
    (and not the group owner setting), and other permissions are other ACL settings.
    An example to find out whether the ACL permissions are applied on file is shown
    in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件上存在加号（`+`）符号，则表示用户权限代表用户的 ACL 设置，组权限代表 ACL 掩码（而不是组所有者设置），其他权限则为其他 ACL 设置。以下截图显示了如何检查文件是否应用了
    ACL 权限：
- en: '![](img/1e4f8c65-e6dd-4fc1-bfa3-46a13b431bb9.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f8c65-e6dd-4fc1-bfa3-46a13b431bb9.png)'
- en: If ACL is applied on a file, then modifying its group permissions with `chmod`
    will change the ACL mask and not the group owner permissions.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件应用了 ACL，则使用 `chmod` 修改其组权限会改变 ACL 掩码，而不是组所有者权限。
- en: Using getfacl
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 getfacl
- en: 'To view the ACLs on a file or directory, the `getfacl` command is used. Its
    syntax is shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看文件或目录上的 ACL，可以使用`getfacl`命令。其语法如下图所示：
- en: '![](img/bbe96ea1-06d0-42eb-ade4-4f6c96291d38.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbe96ea1-06d0-42eb-ade4-4f6c96291d38.png)'
- en: 'The `getfacl` command can also be used to export the ACL applied to a file
    or directory into a file, as shown in the following command line:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`getfacl`命令也可以用于将应用于文件或目录的 ACL 导出到文件中，如以下命令行所示：'
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The exported ACL can be imported from the file and applied using the `setfacl` command,
    as shown in the following command line:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过从文件导出 ACL 并使用`setfacl`命令应用，如以下命令行所示：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ACL mask
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ACL 掩码
- en: The ACL mask is used to set the maximum effective permissions for the group
    owner of a file, named users of a file, and named groups of a file. The maximum
    permissions of the owner or others are the ones that are set using `chmod` and
    not controlled by the ACL mask.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 掩码用于设置文件的组所有者、命名用户和命名组的最大有效权限。所有者或其他用户的最大权限是通过`chmod`设置的，而不是由 ACL 掩码控制。
- en: 'The ACL mask is set on a file using the `setfacl` command as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setfacl`命令可以在文件上设置 ACL 掩码，如下所示：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The ACL mask is viewed using the `getfacl` command as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getfacl`命令可以查看 ACL 掩码，如下所示：
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `getfacl` command displays a string `#effective:` in front of the entries
    that are restricted by the mask. It gets updated automatically whenever group
    permissions are updated with `chmod`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`getfacl`命令会在被掩码限制的条目前显示字符串`#effective:`。每当使用`chmod`更新组权限时，它会自动更新。'
- en: 'The following table lists the user types and corresponding ACL precedence in
    Linux systems:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了 Linux 系统中的用户类型及其相应的 ACL 优先级：
- en: '| **User type** | **ACL precedence** |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| **用户类型** | **ACL 优先级** |'
- en: '| Owner user | ACL permissions apply |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 所有者用户 | 应用 ACL 权限 |'
- en: '| Named user | ACL permissions apply (should be equal to or less than ACL mask)
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 命名用户 | 应用 ACL 权限（应等于或小于 ACL 掩码） |'
- en: '| Group | ACL permissions apply (should be equal to or less than ACL mask)
    |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 组 | 应用 ACL 权限（应等于或小于 ACL 掩码） |'
- en: '| Named group | ACL permissions apply (should be equal to or less than ACL
    mask) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 命名组 | 应用 ACL 权限（应等于或小于 ACL 掩码） |'
- en: '| Others | ACL permissions apply |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 其他人 | 应用 ACL 权限 |'
- en: Modifying ACL permissions
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改 ACL 权限
- en: ACLs use the same standard filesystem permission representation, which is used
    with `chmod`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 使用与 `chmod` 相同的标准文件系统权限表示。
- en: 'The following table list the symbols and their corresponding permission representation
    in ACL:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了符号及其在 ACL 中对应的权限表示：
- en: '| **Symbol** | **Permission** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **权限** |'
- en: '| `r` | Read |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `r` | 读取 |'
- en: '| `w` | Write |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 写入 |'
- en: '| `x` | Execute |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `x` | 执行 |'
- en: '| `-` | That permission is absent |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 该权限不存在 |'
- en: '| `X` | Indicates the execute permission should be set on directories and not
    on regular files |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `X` | 表示执行权限应设置在目录上，而不是常规文件上 |'
- en: Using setfacl
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 setfacl
- en: 'The `setfacl` command is used with the `-m` option to modify or add new ACLs
    to a file or directory. For example, file owner permissions can be set using `chmod`
    or using `setfacl`. If no named user is specified in the user part of `setfacl`,
    then that permission applies to the file owner, as shown in the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Named user ACLs are set on a file using the username or UID, as shown in the
    following command:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If no named group is specified in ACL, then that ACL applies to the group owner,
    as shown in the following command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can modify or add a named group ACL to a file using the group name or GID,
    as shown in the following command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can set the ACL using output from `getfacl` command and giving it as input
    to `setfacl` command. In the following example, the `--set-file` option enables
    the `setfacl` command to read the input from a file or `stdin` (`-`), as shown
    in the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can set the ACL recursively using the `-R` option on directories. The `X` option
    is also generally used with recursion, so that directories will get executable
    permissions set, and this prevents adding executable permissions to files accidentally
    when setting ACL permission recursively:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can set default ACLs on directories to enable ACL inheritance on all new
    files and sub-directories using the `-d` option or by prefixing the `setfacl`
    command with `d:`, as shown in the following command line:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To remove default ACLs, use the `-x` option with `d:`, as shown in the following
    command line:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Removing an ACL
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `setfacl` command is also used with the `-x` option to remove the applied
    ACL for any user or group. The only difference when removing ACL from setting
    ACL is that we don''t specify the permission while removing. The following example
    illustrates the usage of the `setfacl` command to remove the ACL applied to a
    file named as `file1` for the user jack and the group sam:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To remove all ACLs from a file or directory, we can use the `-b` option, as
    shown in the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning about different types of permissions
    in Linux systems and how to manage them using numbers as well as using symbols.
    Then we learned about the managing of file ownership using the `chown` and `chgrp`
    commands. This was followed by understanding special permissions for executable
    and directories. Then we learned how to manage default permissions. Finally, we
    looked at how to view, set, and delete ACLs on files and directories in CentOS
    7.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about process management in CentOS 7\. Process
    management is an essential skill that is required to manage your system resources.
    It will lay the solid foundation for optimizing system performance.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
