- en: Managing File Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Permissions are one of several good features that make Linux more secure when
    applied properly. Since Linux is a multi-user OS, different users will be working
    with multiple programs and files, and so on. Permissions help keep things secure
    and organized. In this chapter, you will learn how to manage access controls on
    files using basic read, write, and execute permissions and user or group ownership.
    You will also learn to apply special permissions and the **access control list** (**ACL**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Linux filesystem permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing file ownership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing default permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing ACL on files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Linux filesystem permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On Linux/Unix-based operating systems, every file belongs to a user and to a
    group. By default, the user who creates the file is the owner of that file and the
    file belongs to that user's primary group. Access to the file via the Linux filesystem
    is controlled by permissions applied to that file. These permissions are classified
    for the owner (also known as the **user**) of the file, group (also known as the **group
    owner**) of that file, and for everybody else (also known as **others**) in the
    Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of standard permissions that are applied to files:'
  prefs: []
  type: TYPE_NORMAL
- en: Read, represented by the letter `r`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write, represented by the letter `w`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute, represented by the letter `x`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are generally grouped in triplets (such as `rwx` or `r-w`) to represent
    a class of permissions. Each file has three classes of permissions; that is, these
    permissions affect access to three categories in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User/owner (u)**: Describes permissions applicable to the user who is the
    owner of that file. By default, it is the user who creates the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group (g)**: Describes permissions applicable to the group that owns the
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Others/everyone else (o)**: Describes permissions for everybody else in the
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effect of permissions on files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The permissions control access to files and directories. The same permissions
    have different effects on files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a table listing the permissions and the corresponding effect of permissions
    on the file and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Permission** | **Effect on files** | **Effect on directories** |'
  prefs: []
  type: TYPE_TB
- en: '| Read (`r`) | Contents of file can be read | Contents of directory can be
    listed using the `ls` command |'
  prefs: []
  type: TYPE_TB
- en: '| Write (`w`) | Contents of file can be modified | We can create or delete
    files and modify permissions on the files or directory |'
  prefs: []
  type: TYPE_TB
- en: '| Execute (`x`) | We can execute files as commands | Contents of directory
    can be accessed (we can use the `cd` command on that directory) |'
  prefs: []
  type: TYPE_TB
- en: If a user has read permission on a directory, it means they can list the names
    of files in it using the `ls` command only. If a user has only execute permission
    on a directory, then they cannot list the contents of the directory with the `ls`
    command; however, if a user knows the contents of the directory, they can access
    the contents explicitly by accessing the filename.
  prefs: []
  type: TYPE_NORMAL
- en: Any user can delete a file or sub-directory if they have write permission to
    the directory in which the file resides, irrespective of the ownership or permission
    on the file itself. Root has full control of permissions; it can access or delete
    any file in the filesystem. However, there are some advance permissions such as
    `chattr` and **Security-Enhanced Linux** (**SELinux**) controls, which can be
    used to create access controls for root. SELinux is a mandatory access control,
    which is discussed in [Chapter 9](6aff4224-a804-4b36-b692-4959e8937beb.xhtml),
    *Overview and Essential Advance Utilities*.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing applied permissions and ownership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ls` command with the `-l` option is used to get detailed information on
    the directory contents, which includes permissions and ownership. It will list
    the detailed information of all the files that reside in the directory. To prevent
    the descent into the directory and view the information of the directory itself,
    use the `-d` option with the `ls` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46c3e54c-48be-4608-8b17-6c0b2a35864f.png)'
  prefs: []
  type: TYPE_IMG
- en: The first character in a long listing tells us the type of file. A hyphen (`-`)
    sign here represents a regular file that can contain data or text, or it can be
    a binary file. The following table lists various types of files and their identifiers
    used as the first character in a long-listing format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a table listing file types and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | File |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Directory |'
  prefs: []
  type: TYPE_TB
- en: '| `l` | Link (symbolic link similar to shortcuts on Windows) |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Character-type device files |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | Block-type device files |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | Socket-type files |'
  prefs: []
  type: TYPE_TB
- en: '| `p` | Named pipes |'
  prefs: []
  type: TYPE_TB
- en: Managing file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chmod` command is used to modify the permissions on a file. **Change mode** (**chmod**) permissions
    are also known as **modes** of a file. Using `chmod`, we can modify permissions
    separately for the owner, group, and the rest of the world (others) in the system.
    There are two ways in which we can modify permissions with `chmod`: one is by
    using numbers and the other is by using symbolic notations.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying file permissions with chmod using symbols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chmod` command is used to change the permission or mode of a file or directories.
    It takes the new set of permissions as the first argument, followed by the list
    of files and directories, to apply those new permissions. The symbolic method
    has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a table listing the keywords used with `chmod` and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keyword** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Who | It represents whose permission you want to change:`u`: User permissions`g`:
    Group permissions`o`: Other permissions`a`: All user permissionsIf nothing is
    specified in this field, it takes (`a`) as the default value. |'
  prefs: []
  type: TYPE_TB
- en: '| What | It represents what you want to do with permissions:`+`: Add some permissions
    in the existing set of permissions`-`: Remove some permissions from the existing
    set of permissions`=`: Set exactly the specified permissions, irrespective of
    the existing set of permissions |'
  prefs: []
  type: TYPE_TB
- en: '| Which | It represents which permissions you are using:`r`: Read`w`: Write`x`:
    Execute |'
  prefs: []
  type: TYPE_TB
- en: 'The following are some examples to illustrate the usage of the `chmod` command,
    using symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List the existing permissions of the file named `myfile`,as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/799b3948-63ea-4fd8-b955-710dafe58b79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add execute permission for the user to the file named `myfile`, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/808aea79-61a4-4400-b22d-0219b3900ffc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remove the write permission from the group and add the execute permission for
    others to the file named `myfile`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b84f58e-8ef7-4a4f-b843-af6dea0e0c04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the read permission exactly and remove any existing permissions for all
    to the file named `myfile`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56a52c2b-f8e7-4695-a6d6-58cce34c2d9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the execute permission exactly and remove any existing permissions for
    all from the file named `myfile`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2f22842-1b8d-46ed-ad67-be8bcd23ec53.png)'
  prefs: []
  type: TYPE_IMG
- en: Managing file permissions with chmod using numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chmod` command can also be used to modify file or directory permissions,
    using the numeric method. This method sets exactly the new permissions specified,
    using numbers with the `chmod` command, irrespective of the existing permissions
    of the file or directory. In the numeric method, permissions are represented by
    three-digit (or four-digit when setting special permissions) octal numbers. Each
    octal number represents a number between zero and seven, which is the sum of permissions
    for an access level—either a user, group, or others. The syntax to apply permissions
    using numbers is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, each `#` represents permissions for a user, group, and other access levels,
    starting from left to right. It is the sum of all the permissions (read, write,
    and execute) of that access level, where each permission has a certain numeric
    weightage, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a table listing the numeric weightage of permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Permission** | **Numeric weightage** |'
  prefs: []
  type: TYPE_TB
- en: '| Read (`r`) | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| Write (`w`) | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Execute (`x`) | 1 |'
  prefs: []
  type: TYPE_TB
- en: 'When setting permissions using the numeric method, we calculate the total sum
    of permissions we need for the user, group, or others; for example, if you want
    to use `set-rwx-r-xr--` as the new permission for `file1`, you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*user → rwx → 4+2+1=7*'
  prefs: []
  type: TYPE_NORMAL
- en: '*group → r-x → 4+1=5*'
  prefs: []
  type: TYPE_NORMAL
- en: '*others → r- - → 4=4*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example of the `chmod` command shows the usage of the `chmod`
    to set permissions using numbers and the usage of `chmod` to set the same permissions
    using symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some examples to illustrate the usage of the `chmod` command
    using numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the read permission for the user, the write permission for the group, and
    no permission for others on the file named `file1`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/176a9912-d600-4d69-b946-a18ae52e9382.png)'
  prefs: []
  type: TYPE_IMG
- en: Use `chmod` with the `-R` option to recursive set permissions on all files and
    sub-directories within a directory. With the `X` option, you can add or remove
    execute permissions for directories only and not files. Although not used much,
    it is a useful option sometimes; you can use `chmod -R +rX /data` to set execute
    permissions for directories in the `/data` folder, but not for any file within
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Managing file ownership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every file or directory created on a Linux system belongs to a user and a group,
    which are also known as the owner of the file or the group owner of the file.
    Ownership of the file or the directory can be modified by the root user, or the
    owner of the file. Group ownership again can only be modified by the root user
    or the owner of the file, for the groups only to which he is a member. This section
    covers how to manage the ownership of files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding default ownership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we create a file or directory, it gets certain default ownership and group
    ownership. The user who creates the file becomes the user (owner) of that file,
    and the primary group of that user becomes the group of that file. To find out
    whether a user or a group has the permissions to access a file or a directory,
    a shell checks the ownership of that file in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: When accessing a file, a shell checks whether you are the owner of a file. If
    a user is the owner of a file, then the user gets access to the file with the
    permissions that are set for the owner of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user is not the owner of the file, a shell checks for the group of the
    file. If the user is a member of a group assigned to the file, then he gets access
    to the file with the permissions that are set for the group of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user is neither the owner of the file and doesn't belong to the group
    assigned to the file, then the user gets access to the file with other permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The long-listing `ls -l` command is used to view the current ownership of the
    file. The third and fourth fields of output of the long-listing command display
    the owner and group of the file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b795cdb-68c9-4f77-8c10-942f6c29ff01.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying user ownership with chown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chown` command can be used to change the user ownership as well as the
    group ownership of a file or directory. Initially, we will see how the `chown`
    command can be used to change file ownership. The syntax of the `chown` command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are some the examples to illustrate the usage of the `chown`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'List current ownership of file named `myfile` using the `ls` command is shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Grant user ownership of the file named `myfile` to `jack`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7effa62b-d9c6-4482-b287-0f5000b5c471.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `chown` command is very often used with the `-R` option to recursively
    modify the ownership of a complete directory tree. The following command is used
    to grant ownership of a directory named `mydir` and all files and sub-directories
    within it to the user `jack`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d469002e-3a10-408b-b683-98c336ad5643.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying group ownership with chown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chown` command can also be used to modify group ownership of a file or
    directory by prefixing a group name with a colon (`:`) sign or period (`.`) sign,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the usage of the `chown` command to change the
    group of `myfile` to `jack`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b1b111b-03de-40dd-8c8a-e0b78e955f16.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying both user and group ownership with chown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chown` command can also be used to modify both the owner and group of
    the file simultaneously by using either of the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `chown` command can be used to change the owner of the file named `myfile`
    to root and the group of the file to wheel, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29b5569a-f705-4a81-8fa7-fb832d0a086d.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying group ownership with chgrp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `chgrp` command is also used to modify the group of a file or directory.
    This can only modify the group owner, unlike the previous command, `chown`,which
    could be used to modify user ownership and group ownership. The syntax of this
    command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `chgrp` command can be used to change the group of the `myfile` file to
    the group `jack`,as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd671763-30b9-47fc-9956-d0bface1a68a.png)'
  prefs: []
  type: TYPE_IMG
- en: Special permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the basic permissions set, which is applicable by default, Linux also
    has some special/advanced permission sets, which are used sometimes to enhance
    some functionalities. These permissions are applicable to files (mainly executable
    files) and directories. These are `setuid`, `setgid`, and `sticky bit`.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying special permissions for files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Setuid` and `setgid` are two special permissions that are applied to executable
    files.'
  prefs: []
  type: TYPE_NORMAL
- en: If `setuid` is applied to an executable file, it means that if that file is
    executed as a program, then it will run as the user of the file and not as the
    user who ran the program.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, when `setgid` is applied to the file, it runs as the group of the
    file and not as the group that ran the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `passwd` command has `setuid` applied by default in Linux systems, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/290b174d-dca1-44e8-9d33-36e5b99a9cf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `chmod` command can be used to add `setuid` to a script file named `myscript`,as
    shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `chmod` command can be used to add `setgid` on a script file named `myscript`
    as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Modifying special permission, for directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sticky bit` and `setgid` are special permissions that are applied to special
    directories.
  prefs: []
  type: TYPE_NORMAL
- en: Using sticky bit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sticky bit` special permission is used to put a restriction on the deletion
    of files. When sticky bit is set on a directory, then only the owner of the file
    and the root user can delete the files within that directory, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/tmp` folder has got sticky bit applied by default in Linux systems, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f606b2b4-62dc-4371-94c3-ca49ac8235e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following example illustrates the usage of the `chmod` command to add sticky
    bit to a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using setgid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `setgid` special permission is used to enable group inheritance from the
    parent directory. When `setgid` is set on a directory, then files created in that
    directory will inherit the group affiliation from the parent directory, instead
    of inheriting it from the user who creates the file. It is generally used on collaborative
    (shared) directories to automatically change a file from the default user private
    group to the shared group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command line is used to view the existing permission of a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example illustrates the usage of the `chmod` command to add the
    `setgid` permission to a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a table listing special permissions and their effect on files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Special permission** | **Numerically fourth-digit weightage** | **Effects
    on files** | **Effects on directories** |'
  prefs: []
  type: TYPE_TB
- en: '| `setuid` `(u+s)` | Setuid= 4 | Files are executed as the user that owns the
    file, not the user running that file | No effect |'
  prefs: []
  type: TYPE_TB
- en: '| `setgid` `(g+s)` | Setgid = 2 | Files are executed as the group that owns
    the file | Enables group inheritance. Files created in the directory have their
    group owner set as the group owner of the directory |'
  prefs: []
  type: TYPE_TB
- en: '| `sticky bit (o+t)` | Sticky bit = 1 | No effect | Only the root or the owner
    of the files can delete the files from the directory with a sticky bit set |'
  prefs: []
  type: TYPE_TB
- en: Extra care is to be taken when setting these special permissions, as incorrect
    setting (usage) of the `setuid` and `setgid` on binaries can lead to privilege
    escalation. Such scenarios can help an attacker gain access to the root account
    via a regular user account.
  prefs: []
  type: TYPE_NORMAL
- en: Managing default permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The files get their default permissions from the users or processes that create
    them. If a file is created using text editors, it will have read and write permissions
    and no executable permissions for everyone. Similarly, a binary executable created
    using compilers generally has executable permission sets, since they are meant
    for execution.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding umask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Default file and folder permissions are set by the `umask` program. The `umask`
    command without any argument will display the existing value of `umask`. The same
    command, when followed by a new octal value as an argument, will set the new value
    of `umask`. The following command line is used to view the existing `umask` of
    a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Normal users have a different `umask`,and the root has a different `umask`
    value, to decide the default permissions for files and directories. The following
    examples illustrate the different `umask` values the exit in system for a regular
    user and a root user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `umask` command on Terminal as a root user to view the `umask`
    value for the root account, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f884b0e3-0bdd-4a75-95da-f597e146ab87.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view the `umask` value of `student` user, first switch to `student` user
    account and then execute the `umask` command as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1a719805-f601-4baa-a9c3-5a46e3a5560b.png)'
  prefs: []
  type: TYPE_IMG
- en: For files, the maximum default value is generally `666` (normal files do not
    require execute permissions to be set by default), and for directories the maximum
    default value is `777` (since directories require execute permissions to be set
    using the `cd` command). The `umask` values are taken off from the maximum default
    octal values to decide the default permissions for files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's understand the `umask` value `0022` that is the default value
    of the root account. It means remove write permissions for the group and others
    from the maximum permissions of files and directories. Hence, the default permission
    for the file will be `644`, and for the directory it will be `755`. Similarly,
    a `umask` value of `0002` that is the default value of the normal user account,
    means remove write permissions for others from the maximum permissions of files
    and directories. Hence, the default permission for the file will be `664`,and
    for the directory it will be `775`.
  prefs: []
  type: TYPE_NORMAL
- en: While setting a new `umask` value of user, if the argument of `umask` command
    contains fewer than three octal digits, then leading zeros are assumed in the
    argument part.
  prefs: []
  type: TYPE_NORMAL
- en: Managing ACL on files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Standard Linux file permissions are applicable for file owners, groups of files,
    or everyone else in the system. Using standard permissions, we cannot give multiple
    users or multiple groups different permissions for a single file. This kind of
    delicate control is provided using ACLs in Linux. We can give permissions to more
    than one user or one group for the same file.
  prefs: []
  type: TYPE_NORMAL
- en: File owners or root can set ACLs on individual files or on directories if the
    filesystem is mounted with ACL support enabled. CentOS 7's default filesystem
    is `XFS`, which has built-in ACL support. Although not all applications (such
    as `tar`) support ACL, it is still a great functionality available in the Linux
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing ACL permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `ls -l` command, we can view standard permission and tell whether
    a file or a directory has ACL applied to it. If the tenth character in the permission
    is the `+` symbol, then it indicates that ACL is applied on that file or directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the plus (`+`) symbol is present on a file, it means the user permission
    represents the user ACL setting, the group permission represents the ACL mask
    (and not the group owner setting), and other permissions are other ACL settings.
    An example to find out whether the ACL permissions are applied on file is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e4f8c65-e6dd-4fc1-bfa3-46a13b431bb9.png)'
  prefs: []
  type: TYPE_IMG
- en: If ACL is applied on a file, then modifying its group permissions with `chmod`
    will change the ACL mask and not the group owner permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Using getfacl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view the ACLs on a file or directory, the `getfacl` command is used. Its
    syntax is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbe96ea1-06d0-42eb-ade4-4f6c96291d38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `getfacl` command can also be used to export the ACL applied to a file
    or directory into a file, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The exported ACL can be imported from the file and applied using the `setfacl` command,
    as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: ACL mask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ACL mask is used to set the maximum effective permissions for the group
    owner of a file, named users of a file, and named groups of a file. The maximum
    permissions of the owner or others are the ones that are set using `chmod` and
    not controlled by the ACL mask.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ACL mask is set on a file using the `setfacl` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The ACL mask is viewed using the `getfacl` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `getfacl` command displays a string `#effective:` in front of the entries
    that are restricted by the mask. It gets updated automatically whenever group
    permissions are updated with `chmod`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the user types and corresponding ACL precedence in
    Linux systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **User type** | **ACL precedence** |'
  prefs: []
  type: TYPE_TB
- en: '| Owner user | ACL permissions apply |'
  prefs: []
  type: TYPE_TB
- en: '| Named user | ACL permissions apply (should be equal to or less than ACL mask)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Group | ACL permissions apply (should be equal to or less than ACL mask)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Named group | ACL permissions apply (should be equal to or less than ACL
    mask) |'
  prefs: []
  type: TYPE_TB
- en: '| Others | ACL permissions apply |'
  prefs: []
  type: TYPE_TB
- en: Modifying ACL permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ACLs use the same standard filesystem permission representation, which is used
    with `chmod`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table list the symbols and their corresponding permission representation
    in ACL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Permission** |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | Read |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | Write |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | Execute |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | That permission is absent |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Indicates the execute permission should be set on directories and not
    on regular files |'
  prefs: []
  type: TYPE_TB
- en: Using setfacl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `setfacl` command is used with the `-m` option to modify or add new ACLs
    to a file or directory. For example, file owner permissions can be set using `chmod`
    or using `setfacl`. If no named user is specified in the user part of `setfacl`,
    then that permission applies to the file owner, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Named user ACLs are set on a file using the username or UID, as shown in the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If no named group is specified in ACL, then that ACL applies to the group owner,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can modify or add a named group ACL to a file using the group name or GID,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can set the ACL using output from `getfacl` command and giving it as input
    to `setfacl` command. In the following example, the `--set-file` option enables
    the `setfacl` command to read the input from a file or `stdin` (`-`), as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can set the ACL recursively using the `-R` option on directories. The `X` option
    is also generally used with recursion, so that directories will get executable
    permissions set, and this prevents adding executable permissions to files accidentally
    when setting ACL permission recursively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can set default ACLs on directories to enable ACL inheritance on all new
    files and sub-directories using the `-d` option or by prefixing the `setfacl`
    command with `d:`, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove default ACLs, use the `-x` option with `d:`, as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Removing an ACL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `setfacl` command is also used with the `-x` option to remove the applied
    ACL for any user or group. The only difference when removing ACL from setting
    ACL is that we don''t specify the permission while removing. The following example
    illustrates the usage of the `setfacl` command to remove the ACL applied to a
    file named as `file1` for the user jack and the group sam:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove all ACLs from a file or directory, we can use the `-b` option, as
    shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning about different types of permissions
    in Linux systems and how to manage them using numbers as well as using symbols.
    Then we learned about the managing of file ownership using the `chown` and `chgrp`
    commands. This was followed by understanding special permissions for executable
    and directories. Then we learned how to manage default permissions. Finally, we
    looked at how to view, set, and delete ACLs on files and directories in CentOS
    7.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about process management in CentOS 7\. Process
    management is an essential skill that is required to manage your system resources.
    It will lay the solid foundation for optimizing system performance.
  prefs: []
  type: TYPE_NORMAL
