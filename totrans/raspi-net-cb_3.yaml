- en: Chapter 3. Maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the operating system (`apt-get`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Raspbian from `wheezy` to `jessie` using `sources.list`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for software packages (`apt-cache`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a package (`apt-get`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package management (`aptitude`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the built-in documentation (`man`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the built-in documentation (`info`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter are for the basic maintenance of the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The first few recipes show you how to update the Raspbian operating system and
    install new software packages, while the last two recipes show you how to access
    the documentation that is already built into the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipes in this chapter work for Debian-based operating systems such as
    PiNet, Raspbian (recommended by the Raspberry Pi Foundation), and Ubuntu MATE.
  prefs: []
  type: TYPE_NORMAL
- en: Other operating systems, such as Pidora and RISC OS, have their own update and
    installation mechanisms. For instructions on how to update and install software
    on these operating systems, visit their respective websites. The *See Also* section
    at the end of this recipe has the needed reference links.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the recipes in this chapter, you will be able to update the
    Raspberry Pi and better understand the built-in documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the operating system (apt-get)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to update the Raspberry Pi using the `apt-get` command.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi and the operating systems that run on the Raspberry Pi, such
    as the Raspbian Linux distribution, are evolving at a rapid pace. Every week,
    if not everyday, there are new updates and security patches that can be downloaded
    and installed.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the Advance Packaging Tools command-line utility called `apt-get`
    to update the existing software on the Raspberry Pi to the latest version. This
    recipe does not install new software; it simply upgrades the software that has
    already been installed. The recipes named *Searching for software packages* and
    *Installing a package* show how to search for and install new software packages
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to update the Raspbian operating
    system using `apt-get`, the advanced packaging tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to log in as the user with `pi` as
    their username (take a look at the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to learn how to boot and log in and the
    recipes in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration*
    to understand how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also require a network connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi will need access to the Internet to reach the update server(s)
    from which it will pull software updates and security fixes.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `SSH` or PuTTY (see the *Remote access* recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration") *, Administration)*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to update the operating system of the Raspberry
    Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `apt-get update` command to update the local package database,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `apt-get –y dist-upgrade` command to upgrade the system, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The upgradable list of packages is calculated in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A status message is displayed as each package is downloaded, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the upgradable packages have been downloaded, they are preconfigured
    and prepared for installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the packages have been preconfigured and prepared for installation, they
    are installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the `apt-get dist-upgrade` command is completed, the currently upgradeable
    software on the Raspberry Pi will be completely installed and configured, and
    all the current security fixes will also be applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To ensure that the Raspberry Pi is using all the upgradable packages, reboot
    the system. Use the `reboot` command to reboot the Raspberry Pi, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the Raspberry Pi has rebooted, the upgrade is complete!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `apt-get` update command is used to
    update the local package database, which is a local copy of the currently available
    software packages.
  prefs: []
  type: TYPE_NORMAL
- en: After the local package database has been updated, the `apt-get dist-upgrade`
    command is used to determine which packages are currently upgradable, download
    the upgradeable packages, and preconfigure and install the packages.
  prefs: []
  type: TYPE_NORMAL
- en: When the `apt-get dist-upgrade` command is complete, the Raspberry Pi is rebooted
    to ensure that it is using all the newly upgraded packages and security fixes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Raspbian Linux distribution, like most operating system distributions for
    the Raspberry Pi, is organized as a collection of software packages. Each software
    package contains one or more applications with their configuration files and support
    libraries. Each package is also labeled with its current version and its dependency
    on other software packages. The **Advanced Package Tool** (`apt`) and its supporting
    utilities, such as `apt-get`, are used to manage the software packages of the
    Raspbian Linux distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**apt – Advance Package Tool** ([http://manpages.debian.net/cgi-bin/man.cgi?query=apt](http://manpages.debian.net/cgi-bin/man.cgi?query=apt)):
    This is the Debian manual page for `apt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apt-get – APT package handling** ([http://manpages.debian.net/cgi-bin/man.cgi?query=apt-get](http://manpages.debian.net/cgi-bin/man.cgi?query=apt-get)):
    This is the Debian man-page for `apt-get`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Raspbian from wheezy to jessie using sources.list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to upgrade the Raspberry Pi 2 from the `jessie` version
    of the Raspbian Linux distribution to the `stretch` version.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there are three versions of the Raspbian operating system distribution
    that are available for the Raspberry Pi 2, namely `wheezy`, `jessie`, and `stretch`.
    The source of these distributions is located at [http://mirrordirector.raspbian.org/raspbian](http://mirrordirector.raspbian.org/raspbian).
  prefs: []
  type: TYPE_NORMAL
- en: The `wheezy` distribution is based on Debian 7, `jessie` is based on Debian
    8, and `stretch` is based on Debian 9\. The current `stable` version is `jessie`.
    The default `wheezy` version is considered to be the `oldstable` release. The
    next planned release, `testing`, is `stretch`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are planning on upgrading an operating system from one version to another,
    which includes upgrading from `jessie` to `stretch`, you should do so before installing
    another software package, as this will greatly simplify the overall upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi Foundation provides default images for both the `wheezy` and
    `jessie` versions of the operating system. The instructions in this recipe are
    for when you would like to keep your existing `wheezy` configuration but try upgrading
    to `jessie`. Alternatively, these instructions can be used when you would like
    to try out `stretch`, the next release of the Raspbian operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Raspbian does not currently have a tool to upgrade a version of the operating
    system distribution. The only way to upgrade from one version to another, such
    as upgrading from `wheezy` to `jessie` (that is, from `old stable` to `stable`),
    is to follow the instructions in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This upgrade will modify more than a thousand software packages. The upgrade
    requires at least 4 hours!
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading an operating system from one version to another is risky. Interrupting
    a version upgrade can leave the system in an unstable state. However, you may
    find the risk worthwhile if you would like to try out the newest operating features
    or upgrade an already configured operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is not enough room to finish on an SD card smaller than 8 GB. It will
    take longer if you have installed additional packages before upgrading.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing this recipe, you will have upgraded Raspbian from one version
    to another: from `wheezy` to `jessie`, or from `jessie` to `stretch`.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You require an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user whose username
    is `pi` (have a look at the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to learn how to boot and log in and the
    recipes in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration*
    to understand how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is also required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi will need access to the Internet to reach the update server(s)
    from which it will pull software updates and security fixes.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (take a look at the *Remote access* recipes in [Chapter
    2](ch02.html "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses the `vi` text editor to modify configuration files. Some other
    text editor can be used instead. Another editor that is available on the Raspberry
    Pi is the `nano` text editor.
  prefs: []
  type: TYPE_NORMAL
- en: A documentation on the use of editors can be found in the editors themselves
    (type **:help** in `vi` or press **<ctrl-g>** in `nano` to get help).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to upgrade Raspbian Linux from one version to another:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use vi (or another editor) to modify `/etc/apt/sources.list`. For an upgrade
    from wheezy to jessie, change the value in the third field of each line from wheezy
    to jessie. For an upgrade from jessie to `stretch`, change the value in the third
    field to `stretch`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `vi` (or another editor) to modify `/etc/apt/sources.list.d/raspi.list`.
    For an upgrade from `wheezy` to `jessie`, change the value in the third field
    of each line from `wheezy` to `jessie`. For an upgrade from `jessie` to `stretch`,
    *do not change this file this time*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are upgrading from `wheezy` to `jessie`, use the `rm` command to remove
    the `collabora.list` configuration file. If you are upgrading from `jessie` to
    `stretch`, this file does not exist. Therefore, you need to *skip this step*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, update the operating system, as described in the previous recipe (*Updating
    the operating system*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Be aware of the fact that this update can take longer than 4 hours!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `sources.list` configuration for `apt`
    is changed.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/apt/sources.list` file is modified so that it references the next
    version of Debian. For example, it is changed to `jessie` if the previous version
    is `wheezy`, and it is changed to `stretch` if the previous version is `jessie`.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/apt/sources.list.d/raspi.list` file is only modified if the previous
    version is `wheezy`. The file should reference the Debian version, that is, `jessie`
    even if you are upgrading to `stretch`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing this book, if you are upgrading from `jessie` to `stretch`,
    the `raspi.list` file requires no change. If you are using this recipe after Spring
    2016, you'll need to check out the Debian repository at [http://archive.raspberrypi.org/debian/dists/](http://archive.raspberrypi.org/debian/dists/)
    to check whether there is a `stretch` distribution folder. If there is a folder,
    update the third field of this file to `stretch`.
  prefs: []
  type: TYPE_NORMAL
- en: When upgrading from `wheezy` to `jessie`, the `collabora.list` configuration
    file is removed using the `rm` command. This file does not exist for the `jessie`
    version of the Raspbian operating system. Hence, this step can be skipped.
  prefs: []
  type: TYPE_NORMAL
- en: After the sources are changed, the previous recipe (*Updating the operating
    system*) is used to update the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `apt-get update` command is used to fetch the current software catalogs
    from the software distribution sites that are configured in the `/etc/apt/sources.list`
    file and those configured in the files located in the /`etc/apt/sources.list.d`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The sources.list and sources.list.d
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `sources.list` file located in the `/etc/apt` directory points to the base
    operating system distribution from `raspbian.org`, and the files (`raspi.list`)
    located in the `/etc/apt/sources.list.d` directory point to the location of the
    additional Raspberry Pi packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following terminal session, the content of the source files for the
    `wheezy` version of the Raspbian Linux distribution are displayed using the `cat`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Each of these configuration files describe the location of one or more software
    package repositories. The most preferred repository is listed first in each file.
    The entire `sources.list` file is preferred over the files in the `sources.list.d`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: The sources.list file format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file format for each of these files is simple. Each line of the file describes
    a single collection of packages within a software distribution repository, providing
    the type of collection, the name of the collection, and the location of the collection's
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: The first item in each line defines the type of the collection. For Debian-based
    distributions, such as the Raspbian Linux distribution, the definition is either
    `deb` or `deb-src`. The `deb-src` catalogs include source code as well as compiled
    binaries.
  prefs: []
  type: TYPE_NORMAL
- en: The second item in each line is the location of the root of the software distribution
    repository. The `sources.list` file points to the root of the `raspbian` operating
    system distribution that is located on the `mirrordirector.raspbian.org` website.
    The `collabora.list` file points to the software packages provided by Collabora
    that are located at the `raspberrypi.collabora.com` website. Furthermore, the
    `raspi.list` file points to the additional Raspberry Pi-specific packages that
    are provided by the Raspberry Pi Foundation and which are located on the `archive.raspberrypi.org`
    website.
  prefs: []
  type: TYPE_NORMAL
- en: The third item in each line is the name of the Debian operating system version
    that you want to use. All files should specify the same version. At the time of
    writing this book, `jessie` is considered the current stable release of Debian.
    A new release, named `stretch`, will soon be available.
  prefs: []
  type: TYPE_NORMAL
- en: The remainder of the line is a list of distribution components. The configuration
    file for the base distribution, which is named `source.list`, points to the Raspbian
    Linux distribution and has a number of components defined. Each of the secondary
    configuration files, namely `collabra.list` and `raspi.list`, points to a smaller
    distribution of Raspberry Pi-specific packages. Each secondary configuration file
    has only one component, namely `rpi` for `collabra.list` and `main` for `raspi.list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard package collections for the Debian operating system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main`: This is the base distribution that is supported by the core team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contrib`: This contains the packages that are contributed to Debian but are
    supported outside of the core team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`non-free`: This contains the packages that are not open source or have some
    rights restrictions and are also supported outside of the core team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpi`: This contains Raspberry Pi-specific packages that are supported by the
    Raspberry Pi community'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpi2`: This contains the Raspberry Pi packages that are specific to the new
    Raspberry Pi 2 chipset and which are supported by the Raspberry Pi community'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**sources.list – Package resource list for APT** ([http://manpages.debian.net/cgi-bin/man.cgi?query=sources.list](http://manpages.debian.net/cgi-bin/man.cgi?query=sources.list))
    The Debian man-page for `sources.list` describes the format of the configuration
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vim – VI improved** ([http://manpages.debian.net/cgi-bin/man.cgi?query=vi](http://manpages.debian.net/cgi-bin/man.cgi?query=vi)):
    The Debian man-page for `vi` describes the basic use of the text editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cat – concatenate files and print on the standard output** ([http://manpages.debian.net/cgi-bin/man.cgi?query=cat](http://manpages.debian.net/cgi-bin/man.cgi?query=cat)):
    The Debian man-page for cat describes how to print files to the standard output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debian – the universal operating system** ([https://www.debian.org/](https://www.debian.org/)):
    The Raspbian Linux operating system distribution is based on Debian.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debian releases** ([https://www.debian.org/releases/](https://www.debian.org/releases/)):
    The naming convention for Debian releases is explained here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raspberry Pi Foundation Forum**s ([https://www.raspberrypi.org/forums/](https://www.raspberrypi.org/forums/)):
    You can report a bug, an error, or other software deficiency, or suggest an improvement
    on one of the Raspberry Pi Foundation''s forums.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pidora is Fedora Remix optimized for the Raspberry Pi** ([http://pidora.ca/](http://pidora.ca/)):
    Pidora is not a Debian-based operating system. It is based on Fedora, which is
    an open source version of the Red Hat Linux enterprise distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RISC OS – a fast and easily customizable operating system for ARM devices**
    ([https://www.riscosopen.org/content/](https://www.riscosopen.org/content/)):
    RISC OS is the original operating system for ARM devices that was designed in
    the 1980s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collabora (**[https://www.collabora.com/](https://www.collabora.com/)): Collabora
    supports a number of open source projects, including contributions that are specifically
    for the Raspberry Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for software packages (apt-cache)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to search for software packages using `apt-cache`.
  prefs: []
  type: TYPE_NORMAL
- en: The complete software catalog of the Raspbian Linux distribution contains a
    large number of prebuilt software packages that are ready to be downloaded and
    installed. With the `apt-cache` command, this large software catalog can be searched
    by using keywords.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe specifically searches for the keyword "fortune" in the names of
    all the software packages of the Raspbian Linux distribution. Searches can be
    made for other software packages by replacing the "fortune" keyword with keywords
    that interest you.
  prefs: []
  type: TYPE_NORMAL
- en: After you've completed this recipe, you will be able to locate software packages
    by searching for keywords using the `apt-cache search` command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to log in as the user whose username
    is `pi` (see the recipes in [Chapter 1](ch01.html "Chapter 1. Installation and
    Setup"), *Installation and Setup* to learn how to boot and log in and the recipes
    in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration* to know
    how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also require a network connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi will need access to the Internet to reach the update server(s)
    from which it will pull software updates and security fixes.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (see the *Remote access* recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to search the Raspbian Linux software packages:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `apt-get update` command to update the software catalog, as described
    in the first recipe of this chapter (*Updating the operating system*), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the `apt-cache search -–names-only fortune` command. Searching the
    cache does not require super user privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The command displays a list of packages with **fortune** in the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the Raspbian Linux software catalog is
    updated using the first recipe in this chapter, namely *Updating the operating
    system*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the software catalog has been updated, the `apt-cache search` command is
    used to search the software catalog for software packages that have the `fortune`
    keyword in their names (`--names-only`).
  prefs: []
  type: TYPE_NORMAL
- en: One of the packages returned by the search, **fortune-mod**, is a command-line
    utility that provides fortune cookies on demand.
  prefs: []
  type: TYPE_NORMAL
- en: The packages that begin with **fortunes-** contain collections of fortunes that
    the `fortune` command-line utility selects from when displaying fortune cookies.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we searched the Raspbian Linux software catalog for packages
    that have the keyword "fortune" in their package names. The search was limited
    to the package names because the `–-names-only option` was specified. When the
    `apt-cache` command is run without the`–-names-only` option, the summaries of
    packages are also searched for the specified keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `apt-cache search` command takes a list of keywords as parameters. If more
    than one keyword is given, the results will be narrowed down to only those packages
    that contain all the keywords. Here is an example of how to search for German
    fortunes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Instructions on how to install the `fortune` package are in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**apt-cache – query the APT cache (**[http://manpages.debian.net/cgi-bin/man.cgi?query=apt-cache](http://manpages.debian.net/cgi-bin/man.cgi?query=apt-cache))
    The `apt-cache` command can generate interesting output from the metadata in the
    local cache of the Debian software catalog. The Debian man-page for `apt-cache`
    describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a package (apt-get)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how new software packages are installed using the `apt-get
    install` command.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to updating the software package catalog and upgrading the already
    installed software packages, the `apt-get` command can also be used to install
    new software packages.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the `fortune-mod` software package is installed using the `apt-get
    install` command. Other software packages can be installed using this same recipe;
    just replace the `fortune-mod` package with the software package that you would
    like to install.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is always a good idea to first update the software catalog using the `apt-get
    update` command and then upgrade the existing software packages using the `apt-get
    dist-upgrade` command before you begin installing new software packages (go through
    the *Updating the operating system* recipe for more information).
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to install new software packages
    using the `apt-get install` command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You require an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user whose username
    is `pi` (have a look at the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to know how to boot and log in and the recipes
    in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration* to learn
    how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is also required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi will need access to the Internet to reach the update server(s)
    from which it will pull software updates and security fixes.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (see the *Remote access* recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to install a software package:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `apt-get update` command to update the software catalog, as described
    in the first recipe of this chapter (*Updating the operating system*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `apt-get install –y` command to install the `fortune-mod` software
    package. The `–y` option for the command answers ''yes'' automatically to all
    the installation questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command calculates the package dependencies and the additional space that
    will be used by the package and its configuration files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command then downloads the necessary software packages, namely **fortunes-mod**,
    **fortunes-min**, and **librecode0**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The downloaded files are unpacked and preconfigured:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the software packages and their dependencies are installed and the execution
    of command is completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `fortune` command is tested to check whether it works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the Raspbian Linux software catalog is
    updated using the first recipe in [Chapter 3](ch03.html "Chapter 3. Maintenance"),
    *Updating the operating system*.
  prefs: []
  type: TYPE_NORMAL
- en: Once the software catalog is updated, the `fortune-mod` software package is
    installed using the `apt-get install` command.
  prefs: []
  type: TYPE_NORMAL
- en: The command first calculates the package dependencies, determining which other
    packages need to be installed prior to the installation of the **fortune-mod**
    package.
  prefs: []
  type: TYPE_NORMAL
- en: The `apt-get install` command continues by downloading the `fortunes-mod` package
    and the two packages that it is dependent upon (`fortune-min` and `librecode0`).
  prefs: []
  type: TYPE_NORMAL
- en: Then, the command unpacks and preconfigures the three packages. Finally, the
    `apt-get install` command installs the software packages. After the installation
    is complete, the `fortune` command is tested.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `apt-get install` command uses the same local software catalog as that of
    the `apt-cache search` command. Both commands rely on the `apt-get update` command
    to download the updated package information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**fortune – sample lines from a file** ([http://manpages.debian.net/cgi-bin/man.cgi?query=fortune](http://manpages.debian.net/cgi-bin/man.cgi?query=fortune))
    The Debian man-page for the `fortune` command lists all of its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package management (aptitude)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the `aptitude` frontend to find and install the `pianobar`
    application.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of frontends for the Advance Package Tool (`apt`) that provide
    a feature-rich user interface. Behind the scenes, these frontends still call the
    `apt-get` command and the `apt-cache` command. However, they combine the functionality
    of all the `apt` tools into a single user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not already have the `aptitude` application installed on your Raspberry
    Pi, use the instructions in the previous recipe (*Installing a package*) to install
    the `aptitude` software package and its dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to use the `aptitude` application
    to find and install software packages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You require an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user whose username
    is `pi` (take a look at the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to learn how to boot and log in and the
    recipes in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration*
    to understand how to log in remotely)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is also required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi will need access to the Internet to reach the update server(s)
    from which it will pull new software packages, software updates, and security
    fixes.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (take a look at the *Remote access* recipes in [Chapter
    2](ch02.html "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to manage software packages using `aptitude`:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `aptitude` command. This command is privileged and needs to be
    run as a privileged user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The main screen of the `aptitude` application is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press **u** to update the local software package catalogue cache. The screen
    then displays the status messages that are being downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type **/pianobar** to search for the `pianobar` package. Then, press the **<enter>**
    key to go to the first package that was found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press **n** until the **pianobar** package is selected. Each time the '**n**'
    key is pressed, the search for the `pianobar` package continues to the next package.
    The search will loop past the last package that matches `pianobar` and continue
    with the first package that matches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press **+** to select the package for installation. The letter "i" appears
    next to the package name to indicate the package that has been selected for installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press **g** to preview the installation of the selected package(s). The list
    of dependent packages is displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press **g** a second time to complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `aptitude` application downloads the selected software package, **pianobar**,
    and its dependencies. Then, it clears the screen and runs the `apt-get install`
    command to complete the installation. Press the **<enter>** key after the installation
    is complete to return to `aptitude`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After returning to `aptitude`, press **q** and then **y** to quit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `aptitude` application is started.
  prefs: []
  type: TYPE_NORMAL
- en: When the `aptitude` application is started, the application first takes a moment
    to initialize and then the application's main screen is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main screen has a toolbar at the top of the screen with a list of menu
    items, a list of common commands (including **?: Help** and **q: Quit** – press
    ''**?**'' for help and ''**q**'' to quit), and the version of the application,
    which is **aptitude 0.6.11**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The application is navigated and controlled using the following command keys:'
  prefs: []
  type: TYPE_NORMAL
- en: For help using the application, press **?** (question mark)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate the packages using the arrow keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the package cache by pressing **u** (the lowercase letter u)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the updated packages by pressing **U** (the uppercase letter U)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for packages by pressing **/** (slash)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To go to the next package that was found, press **n** (the lowercase letter
    n)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To go to the previous package that was found, press **p** (the lowercase letter
    p)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select individual packages by pressing **+** (plus) to select; press **-** (minus)
    to deselect the highlighted package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the selected packages by pressing **g** (the lowercase letter g)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activate the menus by pressing **<ctrl-T>**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quit the application by pressing **q**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the application has finished initializing, press **u** (the lowercase
    letter u) to update the package cache. The **Downloading** status messages are
    displayed as the local software package cache is downloaded and updated.
  prefs: []
  type: TYPE_NORMAL
- en: After the cache update is complete, type **/pianobar**. Pressing **/** starts
    the search mode, and **pianobar** is the search string. As the search string is
    typed, aptitude incrementally searches for the string. Press the **<enter>** key
    to complete the search phrase and select the first package that is found.
  prefs: []
  type: TYPE_NORMAL
- en: If the **pianobar** package is not selected, press **n** to go to the next package
    that matches the search string, or press **p** to go to the previous package that
    matches the search string.
  prefs: []
  type: TYPE_NORMAL
- en: When the **pianobar** package is selected, press **+** to select the package.
    If you have incorrectly selected a package, press **-** to deselect the package.
  prefs: []
  type: TYPE_NORMAL
- en: With the **pianobar** package selected, press **g** to calculate the dependent
    packages and prepare the installation of the selected package and its dependents.
  prefs: []
  type: TYPE_NORMAL
- en: Press **g** once again to install the **pianobar** package and its dependents.
    The **aptitude** application then starts the **apt-get install** command and begins
    installing the **pianobar** package and its dependents.
  prefs: []
  type: TYPE_NORMAL
- en: The display fills with installation messages from the `apt-get install` command
    (refer to the *Installing a package* recipe for more information about the `apt-get
    install` command). When the installation is complete, you will be asked to **Press
    Return to continue**, press the **<enter>** key to continue.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, press **q** to quit the **aptitude** application and **y** to accept
    that you are quitting.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Although it''s not always necessary, rebooting after an installation is always
    a good idea. This can be done by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo reboot`'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `aptitude` software package manager is a software application that combines
    the functionality of the `apt-cache` and `apt-get` commands with a sophisticated
    terminal user interface that can still be used remotely with commands such as
    `ssh`.
  prefs: []
  type: TYPE_NORMAL
- en: The terminal-based user interface provided by the `aptitude` application simplifies
    searching for and installing software packages. By using simple keystrokes, software
    packages can be located, installed, and updated.
  prefs: []
  type: TYPE_NORMAL
- en: The `aptitude` application's terminal user interface is useful for interactive
    use. However, a command-line interface will be better for scripts and automation.
  prefs: []
  type: TYPE_NORMAL
- en: The command line interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `aptitude` application also has a set of commands that can be used as an
    alternative frontend to the functionality provided by the `apt-cache` and `apt-get`
    commands (refer to the recipes named *Searching for software packages* and *Installing
    a package* for instructions on using the `apt-cache` and `apt-get` commands to
    locate and install software packages).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `aptitude update` command can be used to update the software package catalog.
    It provides the same functionality that the `apt-get update` command provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `aptitude full-upgrade` command can be used to fully upgrade the already
    installed software packages. It provides a functionality that is similar to that
    of the `apt-get dist-upgrade` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `aptitude search` command can be used to search for software packages,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `aptitude install` command is used to install software packages. This is
    the same functionality as that of the `apt-get install` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: More information on the command-line use of the `aptitude` software package
    manager can be found in the `aptitude` manual pages (`man aptitude`).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**aptitude – high-level interface to the package manage**r ([http://manpages.debian.net/cgi-bin/man.cgi?query=aptitude](http://manpages.debian.net/cgi-bin/man.cgi?query=aptitude))
    The Debian man-page for `aptitude` has details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pianobar – personalized online radio client** ([http://6xq.net/projects/pianobar/](http://6xq.net/projects/pianobar/))
    The `pianobar` application is an open source, console-based client for Pandora.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the built-in documentation (man)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how the `man` command can be used to display built-in documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Raspbian Linux distribution comes with a large amount of local documentation
    that is built into the system. There are three primary sources of built-in documentation,
    namely the man-pages, the `Info` documents, and the `/usr/share/docs` directory.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the `man` command to display the man-page documentation for
    the `fortune` command.
  prefs: []
  type: TYPE_NORMAL
- en: The next recipe in this chapter shows how to use the `info` command to navigate
    through documentation stored as info-pages.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instructions to install the `fortune` command can be found in the recipe named
    *Installing a package* that was discussed earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will able to use the `man` command to read
    the man-page documentation, which is a built-in feature of the Raspbian Linux
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You need an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user whose username
    is `pi` (refer to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to know how to boot and log in and the recipes
    in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration* to learn
    how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi does not need access to the Internet for this application.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (see the *Remote access* recipes in [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to read the built-in documentation using `man`:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `man` command to read the built-in documentation for the `fortune`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The man-page for the fortune command is displayed, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press **<space>** to page through the manual. Press **h** for a list of the
    key commands used for reading and searching. Press **q** to quit reading the man-page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `man` command is used to display the
    built-in documentation for the `fortune` command.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most command-line utilities have a man-page. There are man-pages for configuration
    files and software libraries too. All the man-pages can be accessed via the `man`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, use the `man` command to read its own man page, that is,
    by using the `man man` command.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to search the library of man pages using the `apropos` command.
    The `apropos` command searches the man pages database for keywords and returns
    a list of man pages. The `man` command also has an apropos form, namely `man –k`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a short terminal session that uses the `apropos` command to search
    for the keyword "music":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pianobar` console music player can be installed using the `aptitude` package
    management application (refer to the recipe named *Package Management*).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**apropos - search** **the manual page names and descriptions**([http://manpages.debian.net/cgi-bin/man.cgi?query=apropos](http://manpages.debian.net/cgi-bin/man.cgi?query=apropos))
    The Debian man-page for `apropos` has information about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**man – an interface to the on-line reference manuals** ([http://manpages.debian.net/cgi-bin/man.cgi?query=man](http://manpages.debian.net/cgi-bin/man.cgi?query=man))
    The Debian man-page for `man` can be found online or locally on the Raspberry
    Pi.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading the built-in documentation (info)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how the `info` command is used to read info-pages.
  prefs: []
  type: TYPE_NORMAL
- en: Info-pages are yet another source of documentation that has already been installed
    with the base Raspbian Linux distribution. The `info` command is used to display
    documentation stored as info-pages.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to use the `info` command to
    read the built-in documentation that has been stored as info-pages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: You need an *Initial Setup* or a *Basic Networking* setup for the Raspberry
    Pi that has been powered on. You also need to be logged in as the user whose username
    is `pi` (refer to the recipes in [Chapter 1](ch01.html "Chapter 1. Installation
    and Setup"), *Installation and Setup* to learn how to boot and log in and the
    recipes in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration*
    to know how to log in remotely).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network connection is an optional requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi does not need access to the Internet for this application.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi has remote access enabled, this recipe can be completed
    remotely using `ssh` or PuTTY (refer to the *Remote access* recipes in [Chapter
    2](ch02.html "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to read the built-in documentation using `info`:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `info` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The main screen of the info-page is displayed, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the spacebar to page through the documentation. This is the easiest way
    to read the file from top to bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the arrow keys to put the cursor next to the ***** symbol of a menu item
    and then press the **<enter>** key to jump to that location in the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **h** (the lowercase letter h) to learn more about the `info` command.
    Press **H** (the uppercase letter H) to start a tutorial on how to use `info`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press **q** to quit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `info` application is started.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `info` command reads specially formatted files and info-pages and displays
    them in a text browser. Info-pages are well-structured with menu hierarchies to
    navigate through documentation by concepts. They look very much like web pages.
    The root of all the info-pages is displayed when the `info` command is entered
    without parameters: `info`.'
  prefs: []
  type: TYPE_NORMAL
- en: Coreutils – the most common Raspbian Linux utilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Coreutils` section of the info-pages documentation covers the most common
    command-line utilities that are used in the Raspbian Linux distribution, including
    common options that should be understood by all applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the info-pages, there is documentation on file permissions, access modes,
    and other concepts that are useful when you wish to manage the Raspberry Pi. Unlike
    man-pages, the info-pages documentation goes beyond just a summary; there exists
    a list of options to also explain the concepts behind the commands and their intended
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Ironically, the info-page for the `info` command is not included by default
    with the Raspbian Linux distribution. Instead, use the `man info` command to read
    more about the `info` command.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for info
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can search the info-pages using the `–k` option of the `info` command. Try
    searching for (`-k`) both `man` and `info` for keywords such as "permission",
    "access", or "download" when you cannot remember the name of a command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what you get when you search the Info pages for ''permissions'':'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: You already have a lot of detailed information about Linux, Debian, and the
    Raspbian Linux operating system that is installed on your Raspberry Pi. The `info`
    command gives you access to the information stored as info-pages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**info – read Info documents** ([http://manpages.debian.net/cgi-bin/man.cgi?query=info](http://manpages.debian.net/cgi-bin/man.cgi?query=info).
    The Debian man-page for `info` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
