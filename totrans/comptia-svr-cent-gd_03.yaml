- en: Server Internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we looked at the power and cooling systems of a server.
    Now, let''s look at the key internal components of a server. You know, those powered
    and cooled. This includes the CPU, RAM, the various bus structures, and the **Basic
    Input Output** (**BIOS**)/**Unified Extensible Firmware Interface** (**UEFI**)
    and **complementary metal-oxide-semiconductor** (**CMOS**). We ''ll also look
    at BIOS/UEFI server firmware. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Central processing unit** (**CPU**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buses, channels, and expansion slots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BIOS/UEFI configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPUs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Known by many names, the CPU (also known as the microprocessor, processor, brains,
    and other names), is the electronic component that runs program instructions,
    performs arithmetic functions, and controls the movement of data and the input
    and output functions of peripheral devices attached to or installed on the computer.
    But then, you knew all of that.
  prefs: []
  type: TYPE_NORMAL
- en: For the Server+ exam, what you need to know is less about how a CPU functions
    and more about its characteristics, including its mounting socket, clock speeds,
    cores, stepping, and more. So, let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Multiprocessors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A multiprocessor environment is a single computer system that has two or more
    integrated CPUs. The CPUs share the computer''s memory, bus, and other resources.
    The CPUs work cooperatively to execute program instructions in series, with one
    CPU performing an instruction and the other CPUs simultaneously performing another.
    The purpose and result of this process is that the computer runs faster than a
    single processor (uniprocessor):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/461bbc91-6999-4bf8-b10c-dd40c1d89113.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A simplified view of a two-processor multiprocessing system
  prefs: []
  type: TYPE_NORMAL
- en: Symmetrical Multiprocessing (SMP) versus Asymmetrical Multiprocessing (ASMP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CPUs in a multiprocessor system can be set up for either symmetrical or
    asymmetrical multiprocessing. In SMP, the CPUs equally share the operating system,
    main memory, bus, and input/output drivers and devices. The goal of an SMP system
    is to balance the computing loads between the processors and speed up processing.
    However, it's recommended that an SMP includes no more than 16 processors.
  prefs: []
  type: TYPE_NORMAL
- en: In ASMP, one CPU is the master and all other CPUs are slaves. The master handles
    the operating system tasks and assigns process requests to the slaves. Slaves
    can be general-purpose or dedicated to a specific processing responsibility. The
    master processor controls the functions of the system with the assistance, when
    necessary, of the slaves.
  prefs: []
  type: TYPE_NORMAL
- en: SIMD, MISD, and MIMD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Multiple processor systems can perform *parallel processing*, in which each
    of its processors executes the same instruction or a unique set of instructions
    on either the same dataset or on several datasets. Today''s multiprocessing computers
    support different flavors of parallel processing, with the three primary forms
    being:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-instruction, multiple-data (SIMD)**: Multiple processors execute the
    same instruction on different blocks of a data source. SIMD speeds up multimedia
    processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple-instruction, single-data (MISD)**: Multiple processors execute different
    instructions on a single data source. MISD computing is not common because this
    mode of parallel processing is usually very specific to a problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple-instruction, multiple-data (MIMD)**: Multiple processors execute
    different instructions on different blocks of a data source. MIMD is what most
    people think of as parallel computing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple core processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where multiprocessing involves multiple microprocessors as parts of a single
    unit, multicore processing is one microprocessor that contains multiple processors
    or cores. Each core is a microprocessor and can process a different stream of
    instructions than any of the other cores on the same **integrated circuit** (**IC**)
    chip.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a quad-core processor, you have four separate processors built
    into your CPU. This means that you can be checking your email, watching a video,
    working on your budget in a spreadsheet, and listening to a music stream all at
    the same time. Each of these actions runs separately on its own core:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f463077-a2af-43d3-a208-f12e36e89e60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A simplified view of the structure of a dual-core microprocessor
  prefs: []
  type: TYPE_NORMAL
- en: CPU packages and sockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The shape and construction of a CPU is its packaging. Virtually all server
    CPUs are in **Land Grid Array** (**LGA**) packaging. In this packaging, the mounting
    pins are a part of the socket and the CPU has receiving holes (ports) to fit over
    each pin. The following image shows the ports on the underside of a CPU in an
    LGA package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c58e8641-cfa1-4f0b-a5a2-17f452341e1a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The underside of a CPU showing the mounting ports of LGA packaging
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: AnandTech'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are nearly as many different types of CPU sockets as there are types
    of CPUs. The following image shows an LGA socket on a motherboard. Notice the
    locking arm, which secures the CPU in the socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25c968d7-5918-4400-a8f3-f2a33dcad223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An LGA socket mounting on a motherboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: AnandTech'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists a sampling of the sockets designed for use with a
    variety of processors:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Socket** | **Introduced** | **Compatible CPU** | **Package** | **Pins**
    | **Maximum speed** |'
  prefs: []
  type: TYPE_TB
- en: '| LGA 771/Socket J | 2006 | Intel Xeon | LGA | 771 | 1600 MHz |'
  prefs: []
  type: TYPE_TB
- en: '| Socket 1207FX | 2006 | AMD Athlon 64 FX | LGA | 1207 | 2000 MHz |'
  prefs: []
  type: TYPE_TB
- en: '| Socket G34 | 2010 | AMD Opteron (6000 series) | LGA | 1974 | 3200 MHz |'
  prefs: []
  type: TYPE_TB
- en: '| LGA 1248 | 2010 | Intel Itanium 9300-series | LGA | 1248 | 1.47 GHz |'
  prefs: []
  type: TYPE_TB
- en: '| LGA 1567/Socket LS | 2010 | Intel Xeon 6500/7500-series | LGA | 1567 | 2.66
    GHz |'
  prefs: []
  type: TYPE_TB
- en: '| Socket SP3 | 2017 | AMD Epyc | LGA | 4094 | 2.9 GHz |'
  prefs: []
  type: TYPE_TB
- en: '| LGA 2066/Socket R4 | 2017 | Intel Skylake | LGA | 2066 | 4.2 GHz |'
  prefs: []
  type: TYPE_TB
- en: Common server sockets and the CPU they support
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the LGA 1564 or Socket LS socket, introduced in 2010, was compatible
    with the Intel Xeon 6500 series CPUs. The Socket SP3, shown in the following image,
    holds the AMD EPYC processor. It''s common for a paired new processor and new
    socket to be released together. However, a new CPU model or version may fit into
    an existing socket standard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee952fbe-a038-45f5-a77b-1b389ff0bc63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An AMD SP3 socket
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: AnandTech'
  prefs: []
  type: TYPE_NORMAL
- en: Cache memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A cache (pronounced *cash*), according to dictionary folks, is anything you
    *store away in hiding for future use*. In a computer system, there are several
    types of cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser cache**: When you download a web page, the browser stores some or
    all of the page''s content, especially the parts that aren''t likely to change,
    such as images, headlines, text, scripts, and so on. This eliminates the need
    to download this content again as you page through the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disk cache**: Many larger hard disk drives include a small amount of RAM,
    which functions as a cache. For example, a 1 TB hard disk drive has 32 MB of disk
    cache to improve the disk''s I/O performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory cache**: Not to be confused with theÂ processor cache, application
    software that requires a large amount of data, such as a graphics editor, will
    create a cache in RAM to reduce I/O operations and speed up processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processor cache**: In the context of CPUs and servers, this type of cache
    (also known as CPU memory or cache memory) provides data and instructions to the
    CPU, eliminating the need to access the slower main memory. There is more on this
    in the following section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU cache memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A CPU has a small amount of memory reserved for its use. This memory, which
    is known as CPU memory or cache memory, consists of multiple levels of **static
    RAM** (**SRAM**), most typically three levels, as shown in the following diagram
    in this section. The purpose of this cache of memory is to provide data and instructions
    to the CPU at a much faster rate than if these inputs were to come from main memory
    DRAM. The CPU''s caching system also tries to guess ahead as to what the CPU will
    request next and, based on current processing, is right more often than not, which
    speeds things up more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04c8d462-1e6c-45ee-968b-f960f017d7ce.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Caching provides a fast, multilevel buffer for the CPU
  prefs: []
  type: TYPE_NORMAL
- en: 'Cache memories have a couple of important characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Temporal (time) locality**: Cache memory holds images, data, and instructions
    that are unchanging, which eliminates the need to fetch them from their source
    or main memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spatial (sequence) locality**: Commonly, the next CPU request for an instruction
    or data block is already in a cache. If the CPU requests something not in the
    cache, a *cache miss* occurs. If the CPU requests a cached item, it''s a *cache
    hit*, which is a more common event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU cache memory levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As illustrated in the *CPU cache memory* section, most CPU systems include three
    levels of cache memory. **Level 3** (**L3**) cache is slow, but faster than main
    memory, and is the larger in size of the three levels. **Level 2** (**L2**) is
    faster than L3, but smaller in size. And **Level 1** (**L1**) is the fastest of
    all three levels and the smallest in size.
  prefs: []
  type: TYPE_NORMAL
- en: As shown previously,Â in the *CPU cache memory* section, instructions and data
    pass from main memory to L3, which is large enough to contain enough of the active
    program or data to predictably include the next request from L2 and above. Multi-core
    processors typically share L3 cache memory. L2 applies spatial locality to predict
    what L1 will ask for and requests a block from L3, which contains the predicted
    items. L1 continues this process by predicting more precisely the item it anticipates
    the CPU to request next and asks L2 for that item.
  prefs: []
  type: TYPE_NORMAL
- en: Write-back/write-through cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cache memory systems take advantage of the time when the CPU may be idleâwe're
    talking about milliseconds hereâto write data passed down to it from the CPU or
    a higher cache level. The data is passed to main memory or directly to a secondary
    storage device. This action is calledÂ **write-back**.
  prefs: []
  type: TYPE_NORMAL
- en: In some instances, the CPU writes data directly to main memory or a storage
    device. When this happens, the CPU also passes the data to cache memory. This
    action is calledÂ **write-through**. The extra write step slows the process, but
    if the next CPU request results in a cache hit, the system realizes a time benefit.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced RISC Machine (ARM) servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It seems like the Intel x86 family of processors has been the heart and brains
    of networking from the beginning. That's not a bad thing. It's just that there
    may be a new kid on the blockâan ARM. AÂ **Reduced Instruction Set Computer** (**RISC**)
    is a specialized technology that involves the use of a more powerful instruction
    set with fewer commands. Cell phones and other mobile devices rely on ARM processors
    for many of their memory-and storage-related functions.
  prefs: []
  type: TYPE_NORMAL
- en: Because of its reduced instruction set, an ARM processor, which tends to be
    smaller in size than conventional processors, is readily adapted to a processor
    core. Servers that now run on processors with up to 12 cores can run equally as
    well on an ARM, which may involve dozens of less sophisticated processors that
    can share the computing task. While 12 processors result in substantial server,
    in x86 server, the processors could still become a bottleneck, depending on its
    loads.
  prefs: []
  type: TYPE_NORMAL
- en: CPU multiplier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CPUs are very fast in comparison to their support systems. Their speed or frequency
    (measured in MHz) is a function of the computer's **front-side bus** (**FSB**),
    which is the bus that connects the CPU with the northbridge (memory controller
    hub) of the chipset. To set its internal frequency, the CPU applies a multiplier
    to the actual frequency of the FSB.
  prefs: []
  type: TYPE_NORMAL
- en: The multiplier is a ratio, referred to as the CPU multiplier, clock multiplier,
    or the clock ratio, that's applied to the frequency of the FSB to determine and
    set the internal frequency of the CPU. For a 100 MHz CPU with a 40 times (40X)
    multiplier defined in its BIOS, the internal clock rate of the CPU is 4.0 GHz.
  prefs: []
  type: TYPE_NORMAL
- en: The CPU multiplier is the key to overclocking or under-clocking a computer.
    To overclock a computer, common in gaming, raise the value of the multiplier.
    To under-clock a computer, which means to slow it down, lower the multiplier's
    value. Overclocking typically requires additional cooling capacity and under-clocking
    saves the battery in a portable device.
  prefs: []
  type: TYPE_NORMAL
- en: CPU stepping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CPU stepping** refers to revisions and revision numbers applied to a CPU
    to fix bugs or improve functionality. When a manufacturer releases a new CPU,
    its revision level is generally zero or a variation of zero, such asÂ **A0**. For
    example, Intel, which calls revision releases, specification updates, and raises
    the revision level or step. AMD releases *revision numbers*, each of which has
    a higher revision number than the last.'
  prefs: []
  type: TYPE_NORMAL
- en: Main memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Main memory, primary memory, primary storage, or RAM, known by all of these
    names, it is like the heart of a computer. If the CPU is the brain, RAM provides
    the circulation of instructions, data, addresses, and the status of everything
    flowing through the computer.
  prefs: []
  type: TYPE_NORMAL
- en: RAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Random-access memory or RAM allows data, instructions, addresses, or state
    information to be located and accessed directly. Each byte in RAM is addressable
    and accessed by itself or in a block of data. Its random-access capability contributes
    to the overall speed of the computer. The types of RAM are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic RAM** (**DRAM**) is electrically volatile and must receive a refresher
    electrical charge periodically in order to hold its status (positive or negative).
    RAM consists of millions of single electronic components (transistors), each of
    which is able to store only a single value, which we represent with one of the
    two binary valuesâ`0` orÂ `1`. RAM consists of millions of transistors that can
    hold either a positive or negative charge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static RAM** (**SRAM**) is non-volatile, which means it doesn''t require
    refreshing, and is able to hold its electrical charge as long as the computer
    has power. After the power is off, SRAM loses its stored charges along with the
    data it represents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double Data Rate (DDR) RAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like processors, RAM has moved through some evolutionary stages as well. Here''s
    a bit of the timeline for RAM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic RAM (DRAM)**: The one characteristic of DRAM that led to its demise
    was that it operated independently of the processor, which could introduce latency
    when either component was waiting on the other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronous DRAM (SDRAM)**: SDRAM coordinated its operations with control
    signals on the system bus, which allowed it to stay one step ahead. However, SDRAM
    was **single data-rate** (**SDR**), meaning in a system clock cycle, it could
    only read or write once, on either the start or end of a clock cycle. With processors
    becoming more complicated and especially faster, SDRAM proved to be too slow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DDR-SDRAM**: DDR memory improved on the SDR technology by allowing data I/O
    on both the start and end of the clock cycle, doubling the data rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DDR2/DDR3**: These two technologies incorporated internal clocks that operated
    at one half (DDR2) and one fourth (DDR3) of the original DDR memory. DDR3 improved
    memory size to as much as 8 GB, increased the data rate to as much as 2,133 Mbps,
    and reduced power consumption to 1.5V.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DDR4-SDRAM**: DDR, 4th generation (DDR4) SDRAM is the current evolution of
    the DDR technology. The main improvements of DDR4 over DDR3 are double the memory
    upper limit (up to 16 GB), a data rate of up to 3,200 Mbps, and uses less power
    (1.2V).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RAM packaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The packaging for the RAM modules installed on home and desktop computers is
    in the form of a slot-mounted IC board with an edge connector with varying amounts
    of memory (in megabytes) and numbers of contacts (pins). Since the development
    of the DDR specification, memory boards have been in the form of **dual in-line
    memory modules** (**DIMMs**), **small outline dual in-line memory modules** (**SO-DIMMs**),
    and MicroDIMMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e49af5a-7370-4e54-8d38-00f20002b16c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: DDR4 SO-DIMM memory card
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Kingston Technologies, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the number of pins in the edge connector of the various
    memory modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DIMM module** | **SDR** | **DDR** | **DDR2** | **DDR3** | **DDR4** |'
  prefs: []
  type: TYPE_TB
- en: '| **Dual In-line Memory Module** (**DIMM**) | 168 | 184 | 240 | 240 | 288 |'
  prefs: []
  type: TYPE_TB
- en: '| SO-DIMM | 100 | 200 | 200 | 204 | 256 |'
  prefs: []
  type: TYPE_TB
- en: '| MicroDIMM | 172 | 214 | 214 | 214 | - |'
  prefs: []
  type: TYPE_TB
- en: '| **Registered DIMM** (**RDIMM**) | - | 184 | 240 | 240 | 288 |'
  prefs: []
  type: TYPE_TB
- en: '| **Load-reduced DIMM** (**LRDIMM**) | - | 184 | 240 | 240 | 288 |'
  prefs: []
  type: TYPE_TB
- en: Pin counts on different DIMM boards
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in addition to the latest processors, manufacturers have also released
    new versions of DIMMs. Two of the newer DIMM versions are the RDIMM and the LRDIMM.
    An RDIMM register buffers between the memory controller and the DRAM on the DIMM.
    This allows a server to host more RDIMMs, but it can also increase power consumption
    and additional latency. An LRDIMM uses a memory buffer to combine the electrical
    signals of its DRAM into a single signal, which allows the DIMM to host up to
    eight DRAM units. However, the increase in power usage and latency is even higher
    than that of the RDIMM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a83bacbb-4666-4e57-a67b-f3a16ca821ae.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A 1.32 GB LRDIMM
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Kingston Technologies, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: Memory timing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The general rule of thumb in RAM is *lower is better*, but *lower what?* Memory
    doesn't exactly operate in the way we often describe it. What we believe is that
    an operationÂ involves a request for data from the CPU, the memory controller locating
    it, and sending the requested data upward. A simple three-step process, *right?*
    Well, no. The process involved for the CPU to request data or instructions from
    memory is more involved than that. In any case, the less time it takes for a memory
    I/O request to take place, the faster the overall speed of the computer will be.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you shop for server memory, you may notice a set of numeric values that
    looks something like this: `9-10-11-24`. In the acronyms for these measurements,
    the lowercase **t** in **tRCD**, **tRP**, and **tRAS** stands for *time*. This
    string of numbers represents the four primary measurements in the memory timings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CAS latency (CL)**: The first number in the memory timings represents the
    **column address strobe** (**CAS**) latency or **CL**, which is the amount of
    time, in **nanoseconds** (**ns**), it takes to receive and fulfill a request for
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following table shows examples of CL for different memory technologies.
    Notice that the actual latency is a function of clock cycles multiplied by the
    CL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Memory t****echnology** | **Clock cycles (ns)** | **CL** | **Actual latency
    (ns)** |'
  prefs: []
  type: TYPE_TB
- en: '| SDR | 7.50 | 3 | 22.50 |'
  prefs: []
  type: TYPE_TB
- en: '| DDR | 5.00 | 3 | 15.00 |'
  prefs: []
  type: TYPE_TB
- en: '| DDR2 | 2.50 | 6 | 15.00 |'
  prefs: []
  type: TYPE_TB
- en: '| DDR3 | 1.25 | 11 | 13.75 |'
  prefs: []
  type: TYPE_TB
- en: '| DDR4 | 0.75 | 18 | 13.50 |'
  prefs: []
  type: TYPE_TB
- en: Examples of CL in various memory technologies
  prefs: []
  type: TYPE_NORMAL
- en: '**RAS to CAS delay (tRCD)**: The arrangement of data in memory is something
    like a spreadsheet with rows and columns. The second number in the memory timings
    is the **row address strobe** (**RAS**), which is the time required to locate
    the row on which requested data is located. The **column address strobe** (**CAS**)
    then represents the time to move to the corresponding column. In other words,
    if the requested data is in location C15, RAS is the time to move to row 15 and
    CAS is the time required to move to column C and the data at C15.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAS precharge (tRP)**: Although it may sound like almost the opposite of
    its function, the RAS precharge releases the active row in memory and the tRP,
    the third value in the memory timings, is the time required to do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Row active time (tRAS)**: Also known as **Active to Precharge Delay**, the
    fourth value, tRAS, is the time required to close an active row and to open a
    new row. You may also see tRAS described as the time required to complete an instruction
    and request and receive the next one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error-correction code (ECC) versus non-ECC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ECC memory is common in computers that process high-value or confidential data,
    such as computers supporting one or more servers. What differentiates ECC memory
    from non-ECC memory is that ECC memory modules include a dedicated memory unit
    that provides parity and error-correction to the other memory units of the module.
    ECC memory provides assurance of data integrity. Before ECC technology, the method
    used for error-correction was parity, either even or odd. Non-ECC memory has no
    error-correcting capability and acts only to fulfill requests from the processor.
  prefs: []
  type: TYPE_NORMAL
- en: Dual channel memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have heard about the need for memory pairing. You've heard about color
    coding memory slots. It seems important, but *what does either or both have to
    do with upgrading memory in a server?*
  prefs: []
  type: TYPE_NORMAL
- en: Many newer motherboards have color-coded dual channel RAM slots. When these
    slots contain matching memory modules, the system is able to move data to and
    from both memory boards simultaneously, which reduces the access time. Realistically
    though, matched memory that facilitates dual-channel mode does improve access
    time. The improvement isn't that significant over single-channel mode and unmatched
    memory pairs. However, performance is faster when you install matched memory pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Color-coded RAM slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although there may be differences in the specific colors of the memory slots
    a manufacturer places on a motherboard, the basic rule of thumb is that memory
    slots are color-matched in pairs, threes, fours, or whatever the future holds,
    based on the memory channel technology of the motherboard. For example, in dual
    channel mode, paired memory slots will both be yellow, orange, or red to indicate
    the slots for a matching RAM pair.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same holds true for the threes and fours, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8221ddb4-371b-48e7-9559-02b412db4cd7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Color-coded memory slots on a motherboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Gigabyte Technology Co., Ltd'
  prefs: []
  type: TYPE_NORMAL
- en: Buses, channels, and expansion slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The components on the motherboard of a computer, as well as the devices connected
    to it, pass data and instructions to each other constantly. Just like any other
    form of communication, there must be a medium connecting them. This medium, in
    this case a *bus channel*, provides a pathway on which data, addresses, and commands
    travel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a computer, there are two general categories of bus channels: internal bus
    and external bus. The *internal bus* is solely on the motherboard and it''s used
    by the motherboard''s components to pass data and instructions. The *external
    bus* provides a means for peripherals and expansion components to communicate
    with the components on the motherboard.'
  prefs: []
  type: TYPE_NORMAL
- en: The term *bus* comes from the Latin word *omnibus*, which translates to *for
    everyone*. The connecting links in a computer carry *everything*, so they became
    buses. Bus shouldn't be confused with *buss*, which is another way to say kiss.
  prefs: []
  type: TYPE_NORMAL
- en: 'A bus structure consists of three coordinating bus lines (see the diagram in
    the following *Bus width* section):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Control bus**: The CPU transmits commands and instructions to a component
    or device to which it needs to send or from which it needs to receive, data or
    perform a command. This is a dedicated one-way bus that carries the command needed
    on the contents located at the address on the address bus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address bus**: The CPU transmits the address of data requiring a service
    to a component or device. The address bus is also a one-way bus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data bus**: The CPU sends or receives data from memory or a device controller.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bus width
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bus channel consists of a number of wire traces, each of which carries a signal
    (bit) to a device pin. Bus channel's traces are typically in multiples of eight,
    as in 8, 16, 24, 32, 64, and so on, with the number of traces controlling the
    amount of memory possible on the system. The number of bits or traces in a bus
    channel limits the high-end address value. For example, an 8-bit address bus can
    only address memory cells up to 28 or 256\. If the bus has 32 bits, the highest
    address in memory that it can reference is 232 or 4,294,967,296 (a bit over 4
    GB or 500 MB). Obviously, the wider a bus channel is (that is, the more bits wide),
    the higher the number that it can represent in binary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The descriptions and specifications of a microprocessor include the bus width
    with which it''s compatible. For example, the Intel Xeon and the AMD Athlon are
    popular server CPUs, and both are 64-bit processors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a50f0540-04bb-4835-ac11-4584b3022b4d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The components of the system bus structure
  prefs: []
  type: TYPE_NORMAL
- en: Peripheral Component Interconnect (PCI) bus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every motherboard comes complete with your favorite peripherals, controllers,
    or interfaces, in fact, few ever will. To help you get over this, motherboards
    include a few expansion slots into which you can insert the interface cards for
    the devices and functions you need. Over the years of computing and servers, a
    number of expansion card standards have come and gone, with new standards or extended
    standards taking their place. The *Color-coded RAM slots* section, earlier in
    the chapter, showed a motherboard that had two sets of expansion card slots (blue
    and white).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Server+ exam, the list of bus channel and expansion slot technologies
    you need to know in detail is short and from the same family: PCIâalso known as
    **PCI conventional**, **PCI-extended** (**PCI-X**), and **PCI-Express** (**PCI-e**).
    The PCI slots and expansion cards of these standards differ in a number of areas,
    but the most significant differences are in their slot and card heights and lengths,
    bus width, and signal voltage.'
  prefs: []
  type: TYPE_NORMAL
- en: PCI size and fit standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All PCI and their variations apply the same physical board format standard.
    The standards for PCI boards specify four size and fit formats: full-height, low-profile,
    full-length, and half-length. There are a few exceptions though:'
  prefs: []
  type: TYPE_NORMAL
- en: A full-height expansion card won't fit a low-profile slot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A half-height expansion card will fit a full-length slot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A half-height expansion card won't fit a full-height slot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A full-length expansion card won't fit a half-length slot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Okay, so the last one's a no-brainer! The best practice is to match PCI expansion
    cards to their corresponding PCI slots.
  prefs: []
  type: TYPE_NORMAL
- en: PCI conventional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *bus width* of a bus channel is the number of traces in the channel. In
    general, the PCI bus and its variations, the bus width is either 32 or 64 traces.
    At the risk of being repetitive, a trace in a bus channel carries one bit of the
    data transmitted on the bus. The *signal voltage* of the PCI standard is one of
    either 5V or 3.3V.
  prefs: []
  type: TYPE_NORMAL
- en: 'The more common variations of the PCI conventional standard (see the following
    diagram) are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**32-bit PCIâ5V signal voltage**: This is a common PCI slot on desktop computer
    motherboards. Its clock speed is 33 MHz and its DTR is a maximum of 1 Gbps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**64-bit PCIâ5V signal voltage**: This is typically a server and dual processor
    motherboard expansion slot with a clock speed of 33 MHz and a maximum DTR of 2.1
    Gbps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**64-bit PCIâ3.3V signal voltage**: Also known as PCI-X, this PCI expansion
    slot is common to server motherboards. Its maximum clock speed ranges from 66
    to 533 MHz and its maximum DTR is 4.3 Gbps (at 533 MHz):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0f55cf19-0337-4865-9a3d-edd24becc9de.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Left to right: PCI 32-bit 33 MHz slots, PCI 64-bit 66 MHz slots, and 64-bit
    33 MHz slots'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the maximum **data transfer rate** (**DTR**) for
    each of the PCI bus standards:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technology** | **Maximum DTR (Mbps)** |'
  prefs: []
  type: TYPE_TB
- en: '| **Parallel** | **Serial****(Half-duplex)** | **Serial****(Full-duplex)**
    |'
  prefs: []
  type: TYPE_TB
- en: '| PCI (Conventional) | 132 |  |'
  prefs: []
  type: TYPE_TB
- en: '| PCI Express 2x | 500 | 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| PCI Express 4x | 1000 | 2000 |'
  prefs: []
  type: TYPE_TB
- en: '| PCI Express 8x | 2000 | 4000 |'
  prefs: []
  type: TYPE_TB
- en: '| PCI Express 16x | 4000 | 8000 |'
  prefs: []
  type: TYPE_TB
- en: '| PCI Express 32x | 8000 | 16000 |'
  prefs: []
  type: TYPE_TB
- en: Data transfer rates (DTRs) for PCI and PCI-e bus technologies
  prefs: []
  type: TYPE_NORMAL
- en: PCI-e
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PCI-e bus standard replaces theÂ conventionalÂ PCI and the PCI-X bus standards.
    The main difference between PCI-e and PCI is bus topology (signal format). The
    PCI-e bus uses a point-to-point serial communication channel and PCI uses a shared
    parallel bus. Another difference is that PCI''s bus is only as fast as the slowest
    device attached and PCI-e supports full-duplex communications between any end
    point devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ca4a921-aec2-409d-bb11-534d857ea130.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of the PCIe 4X standard expansion card and interface
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Kingston Technologies, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: Expansion cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, *what type of cards fit into a motherboard expansion slot?* The following
    sections describe the functions of the expansion cards you should know about for
    the Server+ exam.
  prefs: []
  type: TYPE_NORMAL
- en: Network interface controller (NIC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most newer motherboards incorporate all or some of the functions of NICs, also
    known as **network adapters**, into their chipsets. This is especially true for
    wireless communication. Many active network servers connect to network or communication
    links through one or more network adapters installed as expansion cards.
  prefs: []
  type: TYPE_NORMAL
- en: The primary function of an NIC is to provide a connection and interface between
    its host computer and a network. The NIC converts the data sent by the computer
    into a format compatible with the network's protocols and standards.
  prefs: []
  type: TYPE_NORMAL
- en: Host Bus Adapter (HBA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An HBA provides a connecting point for peripheral devices to a computer. An
    HBA is usually an expansion card inserted into a slot on a motherboard. The HBA
    card serves as a conduit through which an external device and a computer can communicate.
    Perhaps the most common HBA installed in servers is a hard disk controller card,
    which includes a disk controller and provides an interface to one or more hard
    disk drives. The hard disk interfaces provided by an HBA include Ethernet, **Parallel
    Advanced Technology Attachment** (**PATA**)/**Integrated Drive Electronics** (**IDE**),
    **Serial Advanced Technology Attachment** (**SATA**), and **Small Computer System
    Interface** (**SCSI**) devices, among others.
  prefs: []
  type: TYPE_NORMAL
- en: Redundant Array of Independent Disks (RAID) controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another type of HBA is a RAID controlle*r*, also known as a *disk array controller*.
    A disk array controller provides management of multiple hard disk drives, which
    it presents to a CPU as logical, rather than physical, units. The RAID technology
    in use must be the same for the RAID controller and the disk drives. For example,
    a **RAID O** controller won't work with any RAID technology involving fault tolerance.
  prefs: []
  type: TYPE_NORMAL
- en: Riser cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A riser card is a board that plugs into the system board and provides additional
    slots for adapter cards. Because it rises above the system board, it enables you
    to connect additional adapters to the system in an orientation that is parallel
    to the system board and saves space within the system case. Riser boards are common
    to rack-mounted servers. One rack-unit, 1U systems can have a single-slot riser
    integrated into the motherboard, which allows an expansion card to fit inside
    the case. A 2U computer may have an integrated riser like a 1U or an expansion
    slot for a 3.5-inch riser card with three slots. The following image shows an
    example of a 2U riser card with two PCI-e 8x ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fab60f3-c526-4b3e-bb75-2de422bae003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A 2U riser card with 2 PCI-e slots
  prefs: []
  type: TYPE_NORMAL
- en: 'Image courtesy: Super Micro Computer, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: USB interface and port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several USB standards, each with its own size, shape, and purpose.
    All USB standards define a communication protocol, a physical cable, and one or
    more sets of connectors and ports. The shape and size of each USB connector and
    port, regardless of its version, is one of several connector types. Some of the
    standards are functionally compatible as long as the connector and port used are
    of the same type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The different USB connector types, at least those still in use, are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type A**: Type A connectors and ports are what most people think of as a
    USB. This connector type is on virtually every computer, regardless of its portability.
    It''s also found on many game consoles, television sets, audio devices, and so
    on. A-type connections provide a down-link between a peripheral device and a host
    with the host supplying 5V DC power to the connected device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type B**: Type B connectors and ports are common to the device end of the
    cables for printers, external disk drives, and other peripherals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type C**: USB Type C connectors and ports haven''t found a purpose on a network
    server, yet. Type C has become common for cellular telephones, notebooks, and
    other portable devices. Its benefits are that a Type C connector isn''t oriented
    (there is no up or down) and either end of a cable can connect to a host system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/31c3acaa-98ca-4a11-ab8f-91640d8e2bd3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Left to right: Type A, Type B, and Type C USB connectors'
  prefs: []
  type: TYPE_NORMAL
- en: 'Images courtesy: Newnex Technology Corp.'
  prefs: []
  type: TYPE_NORMAL
- en: There are other USB connector and port types, such as mini, micro, and internal.
    Each has its specific purpose, but don't fret about seeing them in the exam.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An extremely important part of the administration of any server is its configuration
    settings. Remember that a computer is just a bunch of electrical and electronic
    components interconnected to accomplish a task repetitively, over and over. The
    configuration settings for a server are initially set in its firmware when the
    motherboard and its **read-only memory** (**ROM**) are manufactured. However,
    at some point in the life of any server, something in its configuration settings
    will change. New peripherals, storage devices, memory size, or other additions
    or adjustments are likely to keep the server supporting the needs of the network.
  prefs: []
  type: TYPE_NORMAL
- en: BIOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BIOS has been with us since 1975 and basically hasn't changed much functionally
    over the years. BIOS resides on non-volatile memory (ROM) on a computer's motherboard
    and is 1) the first instruction set executed when a computer powers on and 2)
    provides operational support to the operating system for input and output operations.
  prefs: []
  type: TYPE_NORMAL
- en: The primary purpose of the BIOS is to provide the information needed to initialize
    the system, load the device drives for all connected storage devices and peripherals,
    and to load and initiate the operating system. The configuration data used by
    the boot process is in a small amount of memory on a CMOS chip. To ensure that
    the configuration settings are always available for the system startup process,
    a coin-style flat cell battery, called the CMOS battery, which has a service life
    of about 10 years, is used.
  prefs: []
  type: TYPE_NORMAL
- en: BIOS reads the first sector on the primary hard disk drive to access the address
    of the boot device (typically a hard disk drive) or the address of the initialization
    instructions (code). It then initializes the boot device and starts the operating
    system. BIOS has one big limitation, thoughâit only supports 16-bit data transfer,
    which restricts the amount of data read from ROM.
  prefs: []
  type: TYPE_NORMAL
- en: UEFI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many newer computers used as servers now have a UEFI in place of BIOS and some
    systems even have both. UEFI is a system configuration technology developed to
    replace BIOS. While UEFI and BIOS essentially perform the same basic functions,
    UEFI stores its configuration data in a `.EFI` file on a hard disk drive in a
    special area called the **EFI System Partition** (**ESP**). The files needed to
    load and initialize the operating system are also in the ESP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A CPU is the electronic component that runs programs, performs arithmetic functions,
    and manages data and the input and output functions of a computer. A multiprocessor
    is a single computer with two or more CPUs, either symmetrical or asymmetrical.
    In SMP, CPUs are equal and share resources, but in ASMP, one CPU is a master and
    all other CPUs are slaves. Multiprocessing computers support SIMD, MISD, and MIMD.
    Multi-core processing involves a single microprocessor that contains multiple
    processors or cores.
  prefs: []
  type: TYPE_NORMAL
- en: 'Computer systems use several types of cache memory, including browser cache,
    disk cache, memory cache, and processor cache. Cache memory provides data to a
    CPU faster than from main memory. CPU systems include three levels of cache memory:
    L3, L2, and L1.'
  prefs: []
  type: TYPE_NORMAL
- en: CPU speed, measured in MHz, is a function of FSB. The CPU's internal frequency
    applies the CPU multiplier to the FSB's frequency. Stepping is the application
    of revisions to a CPU. DRAM is volatile; SRAM is non-volatile but loses its stored
    contents when no system power is available. Memory timing measurements include
    CL, tRCD, tRP, and tRAS. ECC memory has a dedicated memory unit that provides
    parity and error-correction.
  prefs: []
  type: TYPE_NORMAL
- en: The bus channels are the internal bus and external bus. The internal bus is
    on the motherboard and passes data and instructions between its components. The
    external bus provides peripherals and expansion cards with a communications link.
    Bus structures include the control bus, address bus, and data bus. The bus channels
    and expansion slots you should know about are PCI, PCI-X, and PCI-e, and their
    significant differences.
  prefs: []
  type: TYPE_NORMAL
- en: BIOS is permanently on ROM and contains the first instructions executed when
    a computer powers on. BIOS boots the system, loads device drives, and initiates
    the OS. Configuration data for the boot process is on CMOS. Newer computers have
    UEFI in place of BIOS.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is an electronic component that runs programs, performs arithmetic functions,
    and manages data and the I/O functions in a computer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GPU
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Control unit
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following statements describes symmetrical multiprocessing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CPUs are unequal and prorate system resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CPUs are equal and share system resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: One CPU is a master and all others are slaves
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of multiple CPUs processes the same instructions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following statements describes asymmetrical multiprocessing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CPUs are unequal and prorate system resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CPUs are equal and share system resources
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: One CPU is a master and all others are slaves
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each of multiple CPUs processes the same instructions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A single computing device with two or more CPUs that are either symmetrical
    or asymmetrical is a:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microprocessor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiprocessor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Uniprocessor
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this microprocessor type, multiple processors execute different instructions
    on a single data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SIMD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MISD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MIMD
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: UEFI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a level of cache memory in a CPU system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Level 3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Level 2
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Level 1
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Level 0
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CPU speed is a function of which system feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CPU multiplier and the frequency of the FSB
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: ECC and memory parity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BIOS and DRAM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory timing and CL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a PCI bus channel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI-X
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCI-e
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PCIC
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two of the following contain the configuration data for a PC and is activated
    when a computer is powered up?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BIOS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CMOS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: BOOTP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: UEFI
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the amount of time it takes to receive and fulfill a request for data
    from memory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CAS latency (CL)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RAS to CAS Delay (tRCD)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RAS precharge (tRP)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Row active time (tRAS)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
