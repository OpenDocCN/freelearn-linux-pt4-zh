- en: Chapter 2. Configuring Network Settings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章 配置网络设置
- en: 'Sitting here feverishly typing away at the keyboard, I am reasonably hopeful
    that the title of this chapter may allude in some way to what we will cover. So,
    I am eager that it will not be too much of a shock when I reveal that we will
    discover how to configure networking on your RHEL 7 system in this chapter. However,
    breaking this down a little, we will look at a little more than just networking.
    Firstly, we will make sure that you are up to speed with how to gain administrative
    rights in Linux. Although, this has nothing to do with networking, gaining administrative
    rights becomes the ground for much of what we will do in the book. Once we have
    finished with the initial rights section, we will then quickly move on to investigate
    how networking is configured on RHEL 7\. In this chapter, we will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 坐在这里急切地敲击键盘，我合理地希望本章标题能在某种程度上暗示我们将要讨论的内容。因此，我期待当我揭示我们将在本章学习如何配置 RHEL 7 系统的网络时，不会让你感到太惊讶。不过，稍微拆解一下，我们不仅仅讨论网络。首先，我们会确保你了解如何在
    Linux 中获取管理员权限。虽然这与网络无关，但获取管理员权限是我们书中许多操作的基础。一旦我们完成了初步的权限部分，我们将迅速转向调查如何在 RHEL
    7 中配置网络。在本章中，我们将讨论以下主题：
- en: Elevating privileges
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提升权限
- en: Using `ip` and `hostnamectl`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ip` 和 `hostnamectl`
- en: NetworkManager and network scripts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetworkManager 和网络脚本
- en: Interacting with NetworkManager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 NetworkManager 交互
- en: Using the Control Center
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制中心
- en: Using the `nmtui` menu
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `nmtui` 菜单
- en: Interacting with `nmcli`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 `nmcli` 交互
- en: Elevating privileges
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升权限
- en: 'As an administrator of the RHEL server or desktop system, there will be times
    when root access will be required. The `root` user or user ID `0` is the local
    administrator on the system. Although it''s possible to log in to the system as
    a `root` user, as with most systems, it''s preferred that `root` access is gained
    as required. There are two mechanisms that can be used:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 RHEL 服务器或桌面系统的管理员，有时需要 root 访问权限。`root` 用户或用户 ID `0` 是系统的本地管理员。尽管可以直接以 `root`
    用户身份登录系统，但与大多数系统一样，建议根据需要获取 `root` 访问权限。可以使用两种机制：
- en: The substitute user or the `su` command
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代用户或 `su` 命令
- en: Using the `sudo` command
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `sudo` 命令
- en: First, we will look at the `su` command.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍 `su` 命令。
- en: The su command
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`su` 命令'
- en: 'When a user issues the `su` command without specifying a username, they will
    be prompted for the root password. If authentication is successful, they will
    be presented with a root shell. The following are the valid mechanisms to gain
    root privileges with `su`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在没有指定用户名的情况下输入 `su` 命令时，系统将提示输入 root 密码。如果身份验证成功，用户将进入 root shell。以下是使用 `su`
    获取 root 权限的有效机制：
- en: '`su -l`: This presents a full login shell for root; all environment variables
    are set for root. The working directory of a user is changed to become the home
    directory of the root user, which is usually `/root`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`su -l`：这会启动一个完整的登录 shell，所有的环境变量都会为 root 设置。用户的工作目录会被更改为 root 用户的主目录，通常是 `/root`。'
- en: '`su`: This is the same as `su -l`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`su`：这与 `su -l` 相同。'
- en: '`su`: This presents a nonlogin shell, where the full profile or environment
    of the root user is not loaded. The result is that some variables—such as `$USER`—are
    not reset and the current directory remains unchanged. Although presented with
    the nonlogin shell, the correct root password is still required for authentication.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`su`：这会启动一个非登录 shell，在这个 shell 中不会加载 root 用户的完整配置文件或环境变量。结果是，一些变量——比如 `$USER`——不会被重置，当前目录也保持不变。尽管是以非登录
    shell 展示，但仍然需要输入正确的 root 密码进行身份验证。'
- en: Using the `su` command is a simple way to gain rights. This may be a convenient
    option for an administrator. For a small environment, this may be acceptable;
    however, within an enterprise environment, this is not often viable because auditing
    is limited. It's possible to trace who used the `su` command to gain rights; this
    will be recorded in the `/var/log/secure` log file. As all activities from this
    point forward will be logged as `root`, we have no granularity to understand which
    administrator ran any particular command. The other big downside with this method
    is that the user will need to know the root password. This again is a big security
    issue and a complete no-no as far as I am concerned.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `su` 命令是一种简单的方式来获取权限。这可能是管理员的一种方便选择。对于一个小型环境，这可能是可以接受的；然而，在企业环境中，这通常不可行，因为审计受限。尽管可以追踪谁使用了
    `su` 命令来获取权限，但所有这些操作都会记录在 `/var/log/secure` 日志文件中。由于从此时起所有活动都将以 `root` 用户身份记录，我们无法详细了解是哪位管理员执行了某个特定命令。另一大缺点是，用户需要知道
    root 密码。这再次是一个重大的安全问题，对我来说完全不能接受。
- en: 'Although we want to use the `su` command, we can control who has access to
    `su` using **PAM** (**Pluggable Authentication Modules**) in conjunction with
    the `wheel` group. By adding users to the special administrative group: `wheel`,
    we can limit access to the `su` command to members of that group.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们想要使用 `su` 命令，但可以通过 **PAM**（**可插拔认证模块**）和 `wheel` 组来控制谁可以访问 `su`。通过将用户添加到特殊的管理组
    `wheel`，我们可以将对 `su` 命令的访问限制为该组的成员。
- en: To add users to the `wheel` group, you will need to run `# usermod -a -G wheel
    <username>` as root user, where `<username>` is the login name of the account
    that should be added to the `wheel` group. The `-a` option is used to append a
    group to the user's current group membership list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要将用户添加到 `wheel` 组，您需要以 root 用户身份运行 `# usermod -a -G wheel <用户名>`，其中 `<用户名>`
    是应添加到 `wheel` 组的帐户的登录名。`-a` 选项用于将一个组追加到用户当前的组成员列表中。
- en: 'To ensure that only members of the `wheel` group use the `su` command, you
    must, as `root`, edit the `/etc/pam.d/su` PAM configuration file. Open the file
    in your desired text editor—such as `vi` or `nano`—and uncomment the following
    line by deleting the `#` character from the start of the line:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保只有 `wheel` 组的成员可以使用 `su` 命令，您必须以 `root` 用户身份编辑 `/etc/pam.d/su` 的 PAM 配置文件。在您喜欢的文本编辑器中打开该文件——例如
    `vi` 或 `nano`——并通过删除行首的 `#` 字符来取消注释以下行：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this change in effect, only members of the `wheel` administrative group
    will be able to use the `su` command in order to switch to another user ID.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦此更改生效，只有 `wheel` 管理组的成员才能使用 `su` 命令切换到另一个用户 ID。
- en: Should you so wish, you can make a second change to the `/etc/pam.d/su` PAM
    file in order to ensure easy access to `su` for members of the `wheel` group.
    The recommendation for this file will be limited to systems—such as classroom
    or lab machines—where security is not an issue.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以对 `/etc/pam.d/su` PAM 文件进行第二次更改，以确保 `wheel` 组的成员可以轻松访问 `su`。此文件的推荐设置将仅限于那些安全性不重要的系统——如教室或实验室计算机。
- en: 'Edit the `/etc/pam.d/su` file and uncomment the following line by deleting
    the `#` character from the start of the line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `/etc/pam.d/su` 文件，并通过删除行首的 `#` 字符来取消注释以下行：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this change in place, members of the `wheel` group are not required to
    authenticate with a password while using `su`; this is the default behavior of
    root.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个更改，`wheel` 组的成员在使用 `su` 时不需要进行密码认证；这是 root 用户的默认行为。
- en: Tip
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Both these PAM edits are consistent across Red Hat variants that we have discussed:
    RHEL 7, CentOS 7, and Fedora 21\. Additionally, by default, the `root` user is
    part of the `wheel` group.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 PAM 编辑在我们讨论的 Red Hat 变体中是一致的：RHEL 7、CentOS 7 和 Fedora 21。此外，默认情况下，`root`
    用户是 `wheel` 组的成员。
- en: Delegating with the sudo command
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 sudo 命令进行授权
- en: In my opinion, using the `sudo` system is another approach and a more secure
    way of delegating administrative privileges. This system serves as a mechanism
    of preceding administrative commands with `sudo` and fine-grained delegation through
    the `/etc/sudoers` file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，使用 `sudo` 系统是一种更加安全的授权管理员权限的方式。该系统通过 `sudo` 命令前缀来执行管理命令，并通过 `/etc/sudoers`
    文件进行细粒度授权。
- en: 'Once users are trusted and tasks are delegated to them in the `/etc/sudoers`
    file, they can then run commands trusted to them using `sudo`. The basic command
    syntax is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户被信任，并且任务被委派到他们的 `/etc/sudoers` 文件中，他们就可以使用 `sudo` 执行分配给他们的命令。基本命令语法如下：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding example, `<command>` will be replaced by the administrative
    command normally reserved for root user, as shown in the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`<command>`将被替换为通常保留给root用户的管理命令，如以下命令所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command string listed previously allows a trusted user to create a new
    user account: `bob`. It will be normal for a user to be prompted for their password
    when a command with `sudo` is first run. The system defaults to cache their credentials
    for 5 minutes. In this way, should they need to run several commands as a root
    user using `sudo` over a short time period, they will be prompted just once for
    their password.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面列出的命令字符串允许一个受信任的用户创建一个新的用户账户：`bob`。当第一次使用`sudo`运行命令时，系统会提示用户输入密码。系统默认缓存用户凭证5分钟。这样，如果他们需要在短时间内多次使用`sudo`作为root用户执行多个命令，他们只会被提示一次输入密码。
- en: With `sudo`, we do not need to divulge the root user's password to our administrators
    or delegate a specific command or group of commands to individuals or groups.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`时，我们不需要向管理员泄露root用户的密码，也不需要将特定命令或一组命令委托给个人或组。
- en: 'To delegate rights for a user called `sally` to be able to run the `useradd`
    command along with the `passwd` command, an entry can be added to the `/etc/sudoers`
    file. We can also prevent `sally` from changing the root password within the same
    entry. This will be similar to the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要委托一个名为`sally`的用户能够运行`useradd`命令以及`passwd`命令，可以在`/etc/sudoers`文件中添加一个条目。我们还可以防止`sally`在同一条目中更改root密码。该条目类似于以下命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Editing should be implemented as `root` using the `visudo` command. In this
    way, changes are verified before they are saved (preventing corruption of the
    file). More detailed configuration examples can be obtained by consulting the
    `man` pages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑应以`root`身份通过`visudo`命令进行。通过这种方式，在保存更改之前会先进行验证（防止文件损坏）。更多详细的配置示例可以通过查看`man`页面获得：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By default, with `sudo`, members of the `wheel` administrative group are permitted
    to run all commands without any additional administrative effort.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`sudo`允许`wheel`管理组的成员运行所有命令，而无需额外的管理操作。
- en: 'To elevate security in order to acquire the password of the user to be entered
    for each `sudo` command and overwrite the default timeout of 5 minutes, use `visudo`
    and add the following line to the `/etc/sudoers` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升安全性，以便在每次执行`sudo`命令时获取用户密码并覆盖默认的5分钟超时设置，请使用`visudo`并在`/etc/sudoers`文件中添加以下行：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the rest of the book, administrative commands will be run as a standard
    user and prefixed with the `sudo` command. The user will be a member of the `wheel`
    group. In this manner, we hope to set best practice with security at the heart
    of your thinking.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，管理命令将作为标准用户运行，并以`sudo`命令为前缀。该用户将是`wheel`组的成员。通过这种方式，我们希望将最佳实践和安全性作为您思考的核心。
- en: Using ip and hostnamectl
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ip和hostnamectl
- en: Many administrators on Linux have become used to using the `ifconfig` command
    in order to display and set IP addresses on Linux hosts. Although the `ifconfig`
    command is still valid, it's marked as obsolete in favor of the `ip` command.
    For Microsoft Windows administrators who move to Linux, the use of `ifconfig`
    becomes the obvious choice. As `ipconfig` closely resembles the Windows command
    line, I encourage you to learn the ongoing `ip` command and all that it has to
    offer. Using either the `ifconfig` or `ip` command on RHEL 7 will also introduce
    new, consistent device names. This may come as a little shock to those used to
    `/dev/eth0`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux管理员习惯使用`ifconfig`命令来显示和设置Linux主机上的IP地址。尽管`ifconfig`命令仍然有效，但它已被标记为过时，推荐使用`ip`命令。对于从Windows迁移到Linux的管理员来说，使用`ifconfig`成为了显而易见的选择。由于`ipconfig`与Windows命令行非常相似，我鼓励您学习并掌握持续更新的`ip`命令及其功能。在RHEL
    7上使用`ifconfig`或`ip`命令还会引入新的、统一的设备名称。这对那些习惯于`/dev/eth0`的人来说，可能会有些冲击。
- en: Finally, we will look at something very new to RHEL using the `hostnamectl`
    command. This can be used to set the `hostname` for the current session and persistently
    in a single shot, rather than using the `hostname` command and editing the `/etc/hostname`
    file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨使用`hostnamectl`命令来设置RHEL中新颖的功能。该命令可以用于设置当前会话的`hostname`，并且一次性永久生效，而无需使用`hostname`命令并编辑`/etc/hostname`文件。
- en: Consistent naming for network devices
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络设备的一致命名
- en: With the hardware that we have on servers and desktops, we now see far more
    use of multiport interface cards and **LOM** (**LAN on motherboard**) interfaces.
    If you rely on the more traditional `eth0` and `eth1` naming scheme, all this
    will lead to inconsistent network device naming.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们服务器和桌面计算机上使用的硬件中，现在可以看到更多的多端口接口卡和**LOM**（**板载局域网**）接口。如果你依赖更传统的`eth0`和`eth1`命名方案，所有这些将导致网络设备命名不一致。
- en: Within RHEL 7 and the related family of similar distributions, `udev` supports
    a number of different naming schemes for network devices. This defaults to the
    assignment of fixed names based on firmware, topology, and location information
    returned from the device itself. In this way, the naming is related to the physical
    device itself and remains consistent and predictable even in the advent of failed
    hardware that is replaced. What we need to achieve is the avoidance of any possibility
    of the `eth0` device becoming `eth1` and vice versa. The disadvantage is that
    the name can be longer and less easily remembered. With reference to the RHEL
    7.1 system that we will use throughout the course of this book, the single Ethernet
    interface on the VMWare hosted system is named as `eno16777736`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在RHEL 7及相关的类似发行版中，`udev`支持多种不同的网络设备命名方案。默认情况下，系统会根据固件、拓扑和设备本身返回的位置信息来分配固定名称。这样，命名与物理设备本身相关，即使更换了故障硬件，名称仍然保持一致且可预测。我们需要实现的是避免`eth0`设备变成`eth1`，反之亦然。缺点是名称可能较长，不易记住。参考我们在本书中将使用的RHEL
    7.1系统，VMWare托管系统上的单一以太网接口被命名为`eno16777736`。
- en: 'The naming aspect is managed by `systemd`, the new initialization daemon, and
    supports the following naming schemes when detecting hardware during the boot
    phase:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 命名方面由`systemd`（新的初始化守护进程）管理，并在启动阶段检测硬件时支持以下命名方案：
- en: '**Scheme 1**: This scheme specifies names that can incorporate firmware or
    the BIOS information returned from onboard devices. These names can take the form
    of `enoxxx` (letter `o` as in onboard). If this fails, the naming system falls
    back to scheme 2.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案 1**：此方案指定的名称可以包含从板载设备返回的固件或BIOS信息。这些名称可以采用`enoxxx`（字母`o`代表板载设备）的形式。如果失败，命名系统将回退到方案
    2。'
- en: '**Scheme 2**: This scheme specifies names that can incorporate firmware or
    the BIOS information returned from PCI Express slot cards. These names can take
    the form of `ensxxx`. If this fails, the naming system falls back to scheme 3.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案 2**：此方案指定的名称可以包含从PCI Express插槽卡返回的固件或BIOS信息。这些名称可以采用`ensxxx`的形式。如果失败，命名系统将回退到方案
    3。'
- en: '**Scheme 3**: This scheme specifies names that can incorporate the physical
    location of the connector—such as the slot address—on the motherboard. These names
    can take the form of `enpxxx`. If this fails, the naming system falls back to
    scheme 5 (note that scheme 4 is optional).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案 3**：此方案指定的名称可以包含连接器的物理位置——例如主板上的插槽地址。这些名称可以采用`enpxxx`的形式。如果失败，命名系统将回退到方案
    5（注意方案 4是可选的）。'
- en: '**Scheme 4**: This scheme identifies names based on the **MAC** (**Media Access
    Control**) address of the **NIC** (**Network Interface Card**) and selected by
    the administrator by setting the `HWADDR` (hardware address) attribute in the
    network configuration file. These names take the form of the name supplied within
    the interface configuration file''s `DEVICE` attribute. For example, if you want
    to rename a LOM interface card from `eno16777736` to `internal`, working as root,
    you will edit the `/etc/sysconfig/network-scripts/ifcfg-eno16777736` file. You
    will be required to add the `HWADDR` attribute and edit the `DEVICE` attribute
    so that the file reads similar to the following extract:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案 4**：此方案基于**MAC**（**媒体访问控制**）地址识别名称，该地址来自**NIC**（**网络接口卡**），并由管理员通过在网络配置文件中设置`HWADDR`（硬件地址）属性进行选择。这些名称采用在接口配置文件中`DEVICE`属性中提供的名称。例如，如果你想将一个LOM接口卡从`eno16777736`重命名为`internal`，在以root身份工作时，你需要编辑`/etc/sysconfig/network-scripts/ifcfg-eno16777736`文件。你需要添加`HWADDR`属性，并编辑`DEVICE`属性，使文件内容类似以下摘录：'
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Scheme 5**: If all else fails, the naming system will fall back to the traditional
    kernel unpredictable naming scheme, such as `eth0`, `eth1`, and so on.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案 5**：如果所有其他方法都失败，命名系统将回退到传统的内核不可预测命名方案，如`eth0`、`eth1`等。'
- en: 'To summarize, each interface device will normally have a two character prefix.
    This denotes the protocol type of the NIC. The following list illustrates these
    prefixes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，每个接口设备通常会有一个两字符的前缀。这个前缀表示NIC的协议类型。以下是这些前缀的示例：
- en: '`en`: This denotes Ethernet'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en`：这表示以太网'
- en: '`wl`: This denotes wireless LAN'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wl`：这表示无线局域网'
- en: '`ww`: This denotes Wide Area Wireless'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ww`：这表示广域无线'
- en: 'The character that follows the prefix denotes the naming scheme used and the
    type of hardware detected, as shown in the following table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀后面的字符表示使用的命名方案和检测到的硬件类型，如下表所示：
- en: '| Position 3 of device name | Description |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 设备名称的位置3 | 描述 |'
- en: '| --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `o` | This is the onboard device |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `o` | 这是板载设备 |'
- en: '| `s` | This is the hot-plug slot |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `s` | 这是热插拔插槽 |'
- en: '| `p` | This is the PCI or USB device |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `p` | 这是PCI或USB设备 |'
- en: A real-life network device naming example
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个实际的网络设备命名示例
- en: 'In order to show you the consistent network device naming system on a physical
    machine and a virtual machine we have been using so far, we will venture out to
    my Dell laptop that runs on the Fedora 21 workstation. This has a wired network
    card (which is not currently connected) and a wireless port (which is the active
    connection). Using the `ip address show` command, we can see two physical interfaces
    and the local or the `loopback` interface:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示我们迄今为止在物理机和虚拟机上使用的一致的网络设备命名系统，我们将走出我的戴尔笔记本电脑，它运行的是Fedora 21工作站。它有一个有线网卡（当前未连接）和一个无线端口（这是活动连接）。使用`ip
    address show`命令，我们可以看到两个物理接口和本地或`loopback`接口：
- en: '![A real-life network device naming example](img/image00192.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![一个实际的网络设备命名示例](img/image00192.jpeg)'
- en: 'When we look at device names and ignore the local interface: `lo`, we see interface
    `2` as `enp9s0` and interface `3` as `wlp12s0`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看设备名称并忽略本地接口`lo`时，我们看到接口`2`为`enp9s0`，接口`3`为`wlp12s0`。
- en: '**For Interface 2**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于接口2**：'
- en: The wired Ethernet is `en`
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有线以太网是`en`
- en: The PCI bus address is `p9`
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCI总线地址是`p9`
- en: The slot number is `s0`
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽编号是`s0`
- en: 'We can view this PCI device using the `lspci` command; the command and output
    is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`lspci`命令查看这个PCI设备；命令和输出如下：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can see this does relate to the physical device mentioned in the naming scheme
    (PCI Bus `9` and slot `0` in the Ethernet card).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这确实与命名方案中提到的物理设备相关（PCI总线`9`和以太网卡中的插槽`0`）。
- en: '**For Interface 3:**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于接口3：**'
- en: The wireless Ethernet is `wl`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线以太网是`wl`
- en: The PCI bus address is `p12`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCI总线地址是`p12`
- en: The slot number is `s0`
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插槽编号是`s0`
- en: 'Again, using `lspci` and `grep`, we can see this device. The PCI bus (`12`)
    in hexadecimal appears as `0c` from the output of `lspci` because this uses hexadecimal
    and the device naming scheme uses decimal values:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`lspci`和`grep`命令，我们可以看到这个设备。PCI总线（`12`）的十六进制值在`lspci`的输出中显示为`0c`，这是因为使用了十六进制，而设备命名方案使用的是十进制值：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Disabling consistent network device naming
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用一致的网络设备命名
- en: For simplicity, especially where you have a single interface, you may preferably
    use the traditional name (`eth0`). You may also have legacy software that requires
    this naming scheme. These legacy names can still be used, as you learned when
    using the naming scheme 4\. Adding the `HWADDR` attribute to the network configuration
    file and either renaming the `/etc/syconfig/network-scripts/ifcfg-eth0` file or
    configuring the `DEVICE` name attribute with a value of `eth0` will help you achieve
    your goal.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，特别是当你只有单一接口时，你可以优先使用传统名称（`eth0`）。你可能也有需要此命名方案的旧版软件。这些旧版名称仍然可以使用，正如你在使用命名方案4时所学到的。通过向网络配置文件中添加`HWADDR`属性，并重命名`/etc/sysconfig/network-scripts/ifcfg-eth0`文件，或者将`DEVICE`名称属性配置为`eth0`，可以帮助你实现目标。
- en: 'To set this globally across the system for all interfaces, you will be required
    to use additional kernel parameters at boot time. This can be set via `GRUB2`
    in the `/etc/default/grub` file. The `GRUB_CMDLINE_LINUX` line should be changed
    to the following code, appending the `biosdevname` and `net.ifname` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在系统中全局设置此配置，以便所有接口都应用，您需要在启动时使用附加的内核参数。这可以通过在`/etc/default/grub`文件中设置`GRUB2`来实现。`GRUB_CMDLINE_LINUX`行应更改为以下代码，并附加`biosdevname`和`net.ifname`命令：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Disabling consistent network device naming](img/image00193.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![禁用一致的网络设备命名](img/image00193.jpeg)'
- en: 'Once the file is edited and saved, we can update the `GRUB2` configuration
    with the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑并保存文件后，我们可以使用以下命令更新`GRUB2`配置：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We then need to reboot our system to see that the view changes to interface
    names:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要重启系统，以便查看接口名称的变化：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It's strongly recommended that you persevere with the consistent names and accept
    that this naming scheme addresses the inconsistent nature of device-naming that
    the traditional kernel names previously presented to administrators.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议坚持使用一致的名称，并接受这种命名方案，它解决了传统内核名称以前给管理员带来的设备命名不一致问题。
- en: For the rest of this book, we will use the standard naming system associated
    with the single NIC on the RHEL 7.1 system, that is, `eno16777736`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将使用与 RHEL 7.1 系统上单个 NIC 相关的标准命名系统，即 `eno16777736`。
- en: Using the ip command to display configurations
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ip 命令显示配置
- en: We started this chapter outlining with the fact that the preferred command to
    use to display and configure the IP address configuration from the command line
    on RHEL 7.1 is `ip`. The `ip` command is part of the `iproute` RPM package and
    replaces the now obsolete `ifconfig` command, which is part of the net-tools RPM.
    The `ifconfig` command is still installed, but `ip` is preferred.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开头我们提到，RHEL 7.1 中显示和配置 IP 地址的首选命令是 `ip`。`ip` 命令是 `iproute` RPM 包的一部分，取代了现在已经过时的
    `ifconfig` 命令，后者属于 net-tools RPM 包。`ifconfig` 命令仍然可以使用，但建议使用 `ip`。
- en: 'We can display the IP address for all interfaces, using the `address show`
    option for the `ip` command. This can be implemented in one of the three ways,
    shown as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `ip` 命令的 `address show` 选项来显示所有接口的 IP 地址。这可以通过以下三种方式之一来实现：
- en: '`$ ip address show`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ ip address show`'
- en: '`$ ip a s`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ ip a s`'
- en: '`$ ip a`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ ip a`'
- en: 'We start with the verbose use of options, where the full `address show` command
    is used. This can be abbreviated to `a s`, or as the default action is `show`
    for the address command, just use `ip a`. Extending this a little, we can display
    the IP address for just a single interface or a single protocol as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用详细选项，其中使用了完整的 `address show` 命令。可以将其缩写为 `a s`，或者由于地址命令的默认动作是 `show`，只需使用
    `ip a`。稍微扩展一下，我们可以仅显示单个接口或单个协议的 IP 地址，如下所示：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot displays the command and output from the demonstration
    system when you view the IPv4 address for the configured NIC:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在演示系统中查看配置的网络接口卡（NIC）的 IPv4 地址时，命令及其输出：
- en: '![Using the ip command to display configurations](img/image00194.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ip 命令显示配置](img/image00194.jpeg)'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The use of the dynamic term within the third line of the `scope global dynamic
    eno16777766` output is indicative of an address assigned via **DHCP** (**Dynamic
    Host Control Protocol**).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`scope global dynamic eno16777766` 输出中第三行使用了动态一词，表示该地址是通过 **DHCP**（**动态主机配置协议**）分配的。'
- en: 'To view the transmission statistics for this same interface, we change to the
    `link` option, as shown in the following command line and output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此同一接口的传输统计信息，我们切换到 `link` 选项，如以下命令行和输出所示：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Using the ip command to display configurations](img/image00195.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ip 命令显示配置](img/image00195.jpeg)'
- en: 'We can already start to feel the flexibility associated with this command,
    but we are not restricted to just `link` and `address` as options. In the following
    commands, we first view the route table and then the **ARP** (**Address Resolution
    Protocol**) cache. Each command is shown in the verbose form and then short form.
    The shortened form is especially useful if you can''t spell neighbor:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开始感受到这个命令的灵活性，但我们不仅限于 `link` 和 `address` 选项。在接下来的命令中，我们首先查看路由表，然后查看 **ARP**（**地址解析协议**）缓存。每个命令都展示了详细形式和简化形式。简化形式特别有用，如果你不会拼写
    neighbor（邻居）的话：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The ARP cache displays the MAC addresses of the devices that you have connected
    to that exist on the same network.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ARP 缓存显示了你连接到同一网络中设备的 MAC 地址。
- en: Using the ip command to implement configuration changes
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ip 命令实现配置更改
- en: 'As a stalwart at displaying the configuration information, the `ip` command
    is a dab hand at changing the IP address''s dynamic configuration too, this time
    using `add` in place of `show`. For example, to add an additional IPv4 address
    to our interface, we will use the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为展示配置信息的得力工具，`ip` 命令在更改 IP 地址的动态配置时也非常擅长，这次使用 `add` 来代替 `show`。例如，要向我们的接口添加一个额外的
    IPv4 地址，我们将使用以下命令：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can now view this information using the `show` command we looked at previously,
    as shown in the following command and output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用之前查看过的`show`命令来查看这些信息，如下所示的命令和输出：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Using the ip command to implement configuration changes](img/image00196.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![使用ip命令实施配置更改](img/image00196.jpeg)'
- en: When we look carefully at the output, we can see the DHCP address we had before
    and the additional address we have just applied. Although these settings have
    been added only for this session, on a restart of the network or interface, we
    will revert to the single DHCP assigned address.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们仔细查看输出时，可以看到之前的DHCP地址和我们刚刚应用的附加地址。虽然这些设置仅针对本次会话添加，但在网络或接口重启时，我们将恢复为单一的DHCP分配地址。
- en: 'To restart all interfaces using network services, we will use the following
    command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用网络服务重启所有接口，我们将使用以下命令：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we have more than one interface in the system and we are using the NetworkManager
    service, which is the default interface, we can stop and start a single interface
    using the following commands:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统中有多个接口，并且我们正在使用NetworkManager服务（默认接口），我们可以使用以下命令停止并启动单个接口：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There will be much more information on the `nmcli` command later in this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍后将有更多关于`nmcli`命令的信息。
- en: So, although we can add IP addresses dynamically to our running system, if we
    want the change or changes to be permanent, then we need to add the configuration
    information to the configuration file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管我们可以动态地向运行中的系统添加IP地址，但如果我们希望更改永久生效，那么我们需要将配置添加到配置文件中。
- en: Persisting network configuration changes
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久化网络配置更改
- en: 'To change from the DHCP assigned address we are using on the demonstration
    RHEL 7.1 system, we will assign a static address in the network configuration
    file related to our `/etc/sysconfig/network-scripts/ifcfg-eno16777736` interface.
    To edit the text file, you can use your favored text editor: `vi` or `nano`; here,
    we will use `vi`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们在演示RHEL 7.1系统上使用的DHCP分配地址更改为静态地址，我们将在与`/etc/sysconfig/network-scripts/ifcfg-eno16777736`接口相关的网络配置文件中分配一个静态地址。要编辑文本文件，你可以使用你喜欢的文本编辑器：`vi`或`nano`；在这里，我们将使用`vi`：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After editing the file in the preceding command line, it should read similar
    to the following file content. Of course, with any pertinent information to your
    network being set as opposed to IP addresses, we use:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令行中编辑文件后，它应类似于以下文件内容。当然，根据你的网络相关信息进行设置，而不是IP地址，我们使用：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As always, take care when editing files. In reality, much of the file can stay
    as it is because we edit changes to just the following one line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，编辑文件时要小心。实际上，文件中的大部分内容可以保持不变，因为我们只编辑了以下一行：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add four new lines:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 添加四行新内容：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With the changes made and saved, we need to refresh NetworkManager using the
    following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出更改并保存后，我们需要使用以下命令刷新NetworkManager：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This will re-cache the network configuration files. With this done, we can
    stop and start the following interface:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重新缓存网络配置文件。完成此操作后，我们可以停止并启动以下接口：
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Alternatively, just restart the network service as we did before. This single
    command replaces three commands here. However, it disrupts all interfaces. So,
    the following command should only be used where we have a single interface:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，像之前一样重新启动网络服务。这个单一命令替代了这里的三个命令。但是，它会中断所有接口。因此，以下命令应该仅在我们只有单一接口时使用：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have a static IPv4 address configured for our interface, we will
    now see that we lose the keyword `dynamic` from the output from the `ip address
    show` command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为接口配置了静态IPv4地址，我们会发现从`ip address show`命令的输出中失去了`dynamic`关键字：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We have now seen how we can successfully configure IPv4 settings from the command
    line and through configuration files. We will now move on to the final part of
    the network configuration: the hostname.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到如何通过命令行和配置文件成功配置IPv4设置。接下来，我们将进入网络配置的最后部分：主机名。
- en: Configuring the RHEL 7 hostname with hostnamectl
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用hostnamectl配置RHEL 7的主机名
- en: With the advent of `systemd` on RHEL 7 and its derivatives, we have a brand
    new way to display and set the hostname using the `hostnamectl` command. The advantage
    of this tool is that the static name and the transient name can be configured
    in one step.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 随着`systemd`在RHEL 7及其衍生版上的出现，我们有了一种全新的方式来使用`hostnamectl`命令显示和设置主机名。这个工具的优势是可以一步配置静态名称和临时名称。
- en: 'We will edit the `/etc/hostname` file and add the new static hostname. This
    is then read by the kernel at system startup and displayed as the transient hostname,
    which is often used as part of your BASH shell prompt. The transient hostname
    can be displayed and set using the `hostname` command. This was a two part process:
    using `hostname` to set the transient name maintained by the kernel and editing
    the `/etc/hostname` file to ensure that it persisted across reboots.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编辑 `/etc/hostname` 文件，并添加新的静态主机名。然后，内核在系统启动时读取它，并显示为瞬时主机名，这经常作为您的 `BASH`
    shell 提示的一部分使用。可以使用 `hostname` 命令显示和设置瞬时主机名。这是一个两部分过程：使用 `hostname` 设置内核维护的瞬时名称，并编辑
    `/etc/hostname` 文件以确保它在重新启动后保持不变。
- en: 'With RHEL 7, we have these two hostnames and a third hostname: the pretty name.
    The pretty name can display UTF-8 characters that allow you to embed spaces and
    apostrophes. The pretty name, when set, is stored in the `/etc/machine-info` file.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `RHEL 7` 中，我们有这两个主机名和第三个主机名：漂亮名称。漂亮名称可以显示 `UTF-8` 字符，允许您嵌入空格和撇号。设置漂亮名称时，它将存储在
    `/etc/machine-info` 文件中。
- en: 'To display the configured hostname, the `hostnamectl` command can be used.
    The pretty name will only be displayed if the configured hostname contains characters
    that cannot make up part of the static hostname. In the same way, the `/etc/machine-info`
    file will only exist if the pretty name is used to store a name incompatible with
    the `/etc/hostname` file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示配置的主机名，可以使用 `hostnamectl` 命令。如果配置的主机名包含不能构成静态主机名的字符，则只会显示漂亮名称。同样，如果使用漂亮名称存储与
    `/etc/hostname` 文件不兼容的名称，则 `/etc/machine-info` 文件将存在。
- en: 'To display the hostname as a standard user, the following command can be issued:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要以标准用户身份显示主机名，可以发出以下命令：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![Configuring the RHEL 7 hostname with hostnamectl](img/image00197.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![使用 hostnamectl 配置 RHEL 7 主机名](img/image00197.jpeg)'
- en: 'As spaces are used in the hostname, the **Pretty hostname** will show. The
    **Pretty** and the **Static** names relate to the `/etc/machine-info` and `/etc/hostname`
    file respectively and can be used in the following command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主机名中包含空格，则 **漂亮主机名** 将显示出来。**漂亮** 和 **静态** 名称与分别对应 `/etc/machine-info` 和 `/etc/hostname`
    文件，并可用于以下命令：
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output for the preceding command line results in the following output:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令行的输出结果如下：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To configure the hostname using `hostnamectl`, we use the `set-name` option,
    as shown in the following command. This command does not need to be prefaced as
    `sudo` if the user is a member of the `wheel` administrative group, but the user
    will be prompted for their password. These permissions are configured using the
    policy kit:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `hostnamectl` 配置主机名，我们使用 `set-name` 选项，如以下命令所示。如果用户是 `wheel` 管理组的成员，则此命令无需以
    `sudo` 为前缀，但用户将被提示输入密码。这些权限是使用策略工具包配置的：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will set all three names; to see the transient name, a new shell should
    be initiated by running the `bash` command. To set individual names, include the
    correct option to `hostnamectl` as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置所有三个名称；要查看瞬时名称，应通过运行 `bash` 命令初始化新的 shell。要设置单个名称，请按照以下 `hostnamectl` 命令正确使用选项：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Introduction to the Red Hat NetworkManager
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介 Red Hat NetworkManager
- en: The `NetworkManager` service has been a part of RHEL since version 6 and in
    its simplest form allows users to configure network configuration settings (such
    as joining Wi-Fi networks). Of course, this is really necessary when we consider
    laptop users with a Fedora or an RHEL laptop. This service extends well beyond
    the GUI and to server products installed with or without the X Server environment.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 自 `RHEL 6` 版本起，`NetworkManager` 服务已成为 `RHEL` 的一部分，最简单的形式允许用户配置网络配置设置（如加入 Wi-Fi
    网络）。当然，考虑到使用 Fedora 或 RHEL 笔记本电脑的用户，这真的是非常必要的。此服务远远超出了 GUI，适用于安装有或没有 X 服务器环境的服务器产品。
- en: The `NetworkManager` service that ships with RHEL 7 is a dynamic network control
    and configuration daemon to keep network interfaces active while they remain available.
    As we have seen, the `NetworkManager` service not only maintains support for the
    traditional `ifcfg-` file type, but also extends this support to additional profiles.
    In this way, we can easily have a static IP address configuration for your laptop
    for different offices that you may visit, rather than relying on DHCP on each
    site.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Configuration of the `NetworkManager` service can be maintained via the GUI
    control center or from the `nmtui` command line menu. We have also seen that we
    can avoid the menu, enabling scripting events from the command line, using the
    `nmcli` command.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'To query the status of the `NetworkManager` service, we can use the `systemctl`
    utility, as shown in the following command and the associated output screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Introduction to the Red Hat NetworkManager](img/image00198.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: 'Users and administrators can interact with the NetworkManager service by using
    one of the following utilities:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The GNOME notification area icon
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GNOME network settings control center
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nmtui` menu
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nmcli` command-line tool
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the NetworkManager using the Control Center
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using RHEL, CentOS, or Fedora on a graphical environment, then with
    the GNOME control center, we can interact with the NetworkManger service. We can
    also access network settings from the notifications area icon. This can be seen
    in the following screenshot on the RHEL 7.1 system:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NetworkManager using the Control Center](img/image00199.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: 'To access the same, but through the control center, we can use the **SUPER**
    key. In the search dialog box, we will enter `control network`, as seen in the
    following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NetworkManager using the Control Center](img/image00200.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: Once we have accessed **Network Settings**, it's possible to simply disable
    all wireless interfaces with the traditional **Airplane Mode**. In this way, you
    can be assured of not plummeting to your certain death during takeoff and landing
    and still enjoy your game of *Candy Crush Saga*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand side panel, we can view the current known interfaces and the
    **Network proxy** settings. Here, we can add web proxies if required. On the RHEL
    7.1 system we are using in this book, we see two network interface groups on the
    left-hand side panel:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '**Wired**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unknown**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the graphic, the **Wired** interface represents my gigabit Ethernet card
    and the **Unknown** interface represents the local loopback connection. If your
    system includes a wireless card, you may well see **Wi-Fi** as an option too.
    While selecting the **Wired** interface from the left-hand side panel, the right-side
    panel will display your current network profiles. As we have only one profile,
    the name of this profile is not shown, but this will represent the default system
    profile we configured previously in this chapter: `eno16777736`.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'From the bottom of the right-side panel, we can create additional profiles
    with the **Add Profile** button, whereas the gearwheel in the bottom right-side
    corner will allow you to alter the properties of the current profile. All of this
    can be seen in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NetworkManager using the Control Center](img/image00201.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Adding a new profile with the Control Center
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More useful for mobile systems, such as laptop devices and tablets, we may configure
    profiles to easily load network configuration information specific to the location
    where you use the device. For example, if you are using a laptop at home, you
    may have a specific static IP address set, whereas when at work, you may have
    a DHCP-assigned address. Profiles can handle this situation easily and effortlessly.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the **Add Profile** button from the Network Settings control center,
    we are presented with the **New Profile** dialog box. From the left-side panel,
    we can select an option from the following given options:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPv4**'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IPv6**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will create a new profile for DHCP for when at home; if you remember, we
    set a static IPv4 address earlier in the section using the traditional `ifcfg-
    script` located in the `/etc/sysconfig/network-scripts` directory. We will retain
    this setting and additionally allow ourselves to switch from the static address
    to DHCP and back as required.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting the **Identity** option from the left-side panel, we will set **Name**
    to `home-DHCP`. From the drop-down list, choose **MAC Address** associated with
    the interface that we want to assign to this profile. Finally, we can deselect
    the checkbox to **Connect automatically** so that the default connection will
    still be the static assignment we chose earlier. We can manually select this profile
    as required. We can leave all the other settings as they are; this includes the
    automatic DHCP assignment of addresses for the **IPv4** and **IPv6** settings.
    Navigate to the bottom-right corner of the open dialog box and select the **Add**
    button to create a profile. The following screenshot shows the settings that we
    have chosen:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new profile with the Control Center](img/image00202.jpeg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: 'Having created the new profile, we can easily select between two profiles using
    the GNOME notification panel, which simplifies the transition between differing
    networks. In the following screenshot, we can see the currently selected **eno16777736**
    profile and how we can switch to the newly created **home-DHCP** profile:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new profile with the Control Center](img/image00203.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: We have now seen how we can set the network profile information using graphical
    tools on RHEL 7.1\. For those running on RHEL or Fedora without the X server,
    we can easily manage the `NetworkManager` connection using the `nmtui` ncurses
    menu.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the NetworkManager using nmtui
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as with the GUI profile management within the GNOME control center, we
    can use the text user interface provided by the `nmtui` command. This is the traditional
    blue screen command-line menu provided by the ncurses system. If the command is
    not available on your system, then it can be installed using `yum`, as shown in
    the following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once installed, the NetworkManager menu can be accessed using the following
    command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you are using PuTTY to connect to your server via SSH, then in order to ensure
    that the menu border show correctly, you should set the **Character set translation**
    option to **UTF-8**. This can be found in connection settings and **Window** |
    **Translation**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'The **NetworkManager** menu displayed on the RHEL 7.1 system used in this book
    looks clean, if a little simple, and is displayed in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the NetworkManager using nmtui](img/image00204.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: The `nmtui` command also offers shortcut wrappers to specific tasks within the
    menu. These take the form of the `nmtui-edit`, `nmtui-connect`, and `nmtui-hostname`
    commands. The first two commands are useful when you already know the name of
    the connection profile you want to activate or edit, whereas the last command
    sets the hostname system-wide.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate the home-DHCP profile we created previously, we will issue the
    following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will effectively switch from the static IP address to the automatically
    allocated DHCP address. You should issue this command from the console and not
    remotely as you will lose your connection when the address is changed from static
    to DHCP.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'This can also be used to connect to a new Wi-Fi SSID, should you be geeky enough
    to be using a command line-only version of Fedora while at Starbucks:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To change the properties of the same connection profile, we will use the following
    command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This will open up the property page for the homeDHCP connection profile in
    readiness for editing purposes. To open the hostname menu page for editing purposes,
    you can use the following command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Extreme interaction with NetworkManager using nmcli
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those who believe that the only true form of Linux is without the aid of
    menus, using solely the wisdom handed down to you through your Jedi parentage,
    we have the extreme sport of `nmcli`. Joking aside, working with the `NetworkManager`
    in this way, without interaction of menus, will allow you to make changes in scripts,
    which can then be implemented across many systems.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'As a simple starter, we can use `nmcli` to scan for available Wi-Fi networks;
    the output should show you the Wi-Fi SSID and strength as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This procedure is greatly simplified compared to the traditional command-line
    mechanism we have used before to display SSIDs with the `iw` command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The process with `nmcli` is simplified for us, as the `NetworkManager` can use
    the configured `polkit` permissions. These permissions or actions (using the `polkit`
    language) are configured by the system administrator and are not meant to be changed
    by users. The policy file is located at the `/usr/share/polkit-1/actions/org.freedesktop.NetworkManager.policy`
    location.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `nmcli` to display configured permissions with the following command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Extreme interaction with NetworkManager using nmcli](img/image00205.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: 'Should we want to be able to create a connection for the wired interface when
    it''s up and available, we can do so with `nmcli`. This can also be easily scripted
    across many devices as and when required. Firstly, we create the connection profile,
    as shown in the following command and output:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This command is greatly simplified when you know the fact that tab completion
    is enabled even for subcommands and values—such as `enp9s0`—that we add as a value
    to `ifname`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the task, we need to add the DNS configuration to the connection
    profile, which we can affect with the use of the following command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can now display the properties with the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `-p` option used here is for the pretty output; for the terse output, `-t`
    may be implemented. Either way, the output is too verbose to show as part of the
    book.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: We have now replicated creating a connection profile that we first saw when
    we started with the control center. We do not pretend that this is easy, but being
    able to script this presents a multitude of options not available with any form
    of interactive menu, be that the text menu from `nmtui` or the GUI from the control
    center.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have really established a baseline of knowledge that we
    need to begin to understand networking on the RHEL 7 family. To begin with, you
    learned how to gain and manage privileges on RHEL using `su` and `sudo`. Further,
    we looked at how to restrict the use of `su` to members of the `wheel` group with
    PAM. We have also begun our administration in the way that we mean to continue,
    using `sudo` to manage administrative tasks rather than logging in as root or
    using `su`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: With the ground knowledge of rights set, we moved on to understand the new naming
    conventions of network devices on the Red Hat release. We learned why it's preferred,
    compared to traditional names before moving on to the network configuration.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在建立了正确设置的基础知识后，我们开始理解 Red Hat 发行版上网络设备的新命名约定。在转向网络配置之前，我们了解了相对传统命名更受欢迎的原因。
- en: To configure network interfaces, we can use traditional `ifcfg-` scripts and
    these are used by default. We can extend this to additional network profiles that
    are probably most useful with mobile devices—such as laptops—that connect to different
    network locations. We saw how these can be configured in many different ways from
    menus to raw command-line tools.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置网络接口，我们可以使用传统的 `ifcfg-` 脚本，默认情况下会使用这些脚本。我们可以扩展到其他网络配置文件，这对于连接到不同网络位置的移动设备（如笔记本电脑）可能是最有用的。我们看到可以通过从菜单到原始命令行工具的多种方式来配置这些内容。
- en: Next up, we will look at how to configure key network services, such as DNS,
    DHCP, and SMTP.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何配置关键网络服务，如 DNS、DHCP 和 SMTP。
