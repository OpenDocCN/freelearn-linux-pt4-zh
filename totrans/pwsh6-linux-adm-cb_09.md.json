["```\n$Today = Get-Date\n$TotalFileSize = 0\n\n$FilesToDelete = Get-ChildItem . -Recurse -File | Where-Object {[math]::Floor(($Today - $_.LastWriteTime).TotalDays) -eq 30}\n\nWrite-Host \"The following files will be deleted:\"\nWrite-Host $FilesToDelete.FullName\n\nforeach ($File in $FilesToDelete) {\n    $TotalFileSize += $File.Length\n    Remove-Item -Path $File -WhatIf\n}\n\nWrite-Host \"Total space cleared: $([math]::Round($TotalFileSize/[math]::Pow(1024, 2))) MB\"\n```", "```\n$Today = Get-Date\n$TotalFileSize = 0\n\n$AllFiles = Get-ChildItem . -Recurse -File\n$FilesToDelete = $AllFiles | Where-Object {[math]::Floor(($Today - $_.LastWriteTime).TotalDays) -eq 30}\n\nforeach ($File in $FilesToDelete) {\n    $TotalFileSize += $File.Length\n    Remove-Item -Path $File -WhatIf\n}\n\nNew-Object -TypeName psobject -Property @{\n    TotalFiles = $AllFiles.Count\n    FilesToDelete = $FilesToDelete.Count\n    SpaceCleared = $TotalFileSize\n}\n```", "```\n& $HOME/Documents/code/github/powershell/ch09/02-Clear-LogFiles.ps1\n```", "```\n(& $HOME/Documents/code/github/powershell/ch09/02-Clear-LogFiles.ps1).SpaceCleared\n```", "```\n(& $HOME/Documents/code/github/powershell/ch09/02-Clear-LogFiles.ps1).SpaceCleared/[math]::Pow(1024, 2)\n```", "```\n$FileCleanupInfo = (& //path/to/02-Clear-LogFiles.ps1)\n```", "```\n$FileCleanupInfo.SpaceCleared/1KB\n$FileCleanupInfo.SpaceCleared/1MB\n$FileCleanupInfo.SpaceCleared/1GB\n```", "```\n($FileCleanupInfo.SpaceCleared)/(250*1e9)*100\n```", "```\nGet-ChildItem -file -rec | Select-Object name, lastwritetime, @{n = 'Size'; e = {[math]::Round($_.Length/1MB, 3)}}\n```", "```\nGet-ChildItem -File -Recurse | Select-Object Name, LastWriteTime, @{\n    Name = \"Size\"\n    Expression = {\n        [math]::Round($PSItem.Length/1MB, 3)\n    }\n}\n```", "```\n$Rgb = Read-Host \"Enter the hexadecimal RGB value\"\n$TrimmedRgb = $Rgb.Substring($Rgb.Length - 6)\n\n$R = $TrimmedRgb.Substring(0, 2)\n$G = $TrimmedRgb.Substring(2, 2)\n$B = $TrimmedRgb.Substring(4, 2)\n\n\"Here are the R, G and B levels for the supplied hex value:\"\n$R, $G, $B | ForEach-Object { [int](\"0x\" + $PSItem) }\n```", "```\n$InputString = Read-Host \"Enter an integer\"\n\nWrite-Host \"Octal representation: \" -NoNewline\nWrite-Host \"$([Convert]::ToString($InputString, 8))\"\n\nWrite-Host \"Hexadecimal representation: \" -NoNewline\nWrite-Host \"$([Convert]::ToString($InputString, 16))\"\n\nWrite-Host \"Binary representation: \" -NoNewline\nWrite-Host \"$([Convert]::ToString($InputString, 2))\"\n```", "```\nPS> [Enum]::GetValues([System.IO.FileAttributes]) | Select-Object `\n@{ n = 'Property'; e = { $_ } }, \n@{ n = 'Decimal'; e = { [int]$_ } },\n@{ n = 'Binary'; e = { [Convert]::ToString([int]$_, 2) } }\n```"]