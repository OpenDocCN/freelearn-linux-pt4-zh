- en: Chapter 5. Advanced Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a static IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a firewall with `ufw`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access to a desktop session (`xrdp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access to the monitor (`x11vnc`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a web server (`apache`, `lighttpd`, `nginx`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a wiki (`mediawiki`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a wireless access point with `hostapd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a network trace utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a network protocol analyzer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the IPv6 network protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advanced networking recipes in this chapter are not specific to the Raspberry
    Pi. However, they demonstrate some of the advanced capabilities of the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter should generally work with any Linux computer. The
    installation instructions, however, are specific to Linux operating systems that
    are Debian based, like the Raspbian Linux distribution used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the recipes in this chapter, you will have configured a static
    IP address for your Raspberry Pi; learned to protect your Raspberry Pi with a
    firewall; connected to the Raspberry Pi desktop remotely; installed a web server
    and a wiki; set up a wireless access point; and analyzed network packets.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a static IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe configures a Raspberry Pi so that it has a static IP address.
  prefs: []
  type: TYPE_NORMAL
- en: A static IP address, unlike the dynamic addresses provided by a **DHCP** (**Dynamic
    Host Configuration Protocol**) server, does not change. Network servers on a wired
    network connection (for example, web servers, wikis, and wireless access points)
    generally have static IP addresses to provide a consistent telephone-number-like
    reference for use by its network clients (for example, web browsers, mobile phones,
    and other Internet devices). Servers that have a static IP address are easier
    to find.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to configure a static network
    IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to configuring a static IP address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `hostname –I` command to display the Raspberry Pi's current IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the output of the `route` command filtered through the `awk` command to
    determine the IP address of the default network gateway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `vi` command to edit the network interface configuration file (`/etc/network/interface)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file. Instructions
    for using the editor can be found in the `vi` manpages (see the recipe *Reading
    the built-in documentation* in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the word **manual** at the end of the line starting with `iface eth0`
    to `static`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines after the line starting with `iface eth0` using the
    current IP address (`192.168.2.13`), the default network gateway (`192.168.2.1`),
    and network mask (`255.255.255.0`) from steps 2, 3 and 4:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After editing, the file should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, reboot the Raspberry Pi to use the new static IP address!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe first discovers the necessary
    network configuration parameters needed to configure a static IP address, then
    it uses those parameters to modify the network interface configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: The `hostname -I` command is used to display the Raspberry Pi's current IP address
    (`192.168.2.13`).
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `route` command, filtered by the `awk` command, displays the
    IP address of the default network gateway (**192.168.2.1**) and the network mask
    of the local network (**255.255.255.0**). The output of **route** is piped (**|**)
    through `awk` so that **awk** can extract information specific to this recipe
    and discard the rest.
  prefs: []
  type: TYPE_NORMAL
- en: Unfiltered, the `route` command displays more information than is needed for
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `awk` command **'/^0/ { print $2 }'** limits its output to those lines beginning
    with a `0` (**/^0/**) and for those limited lines prints the second field (**$2**).
    The result is the IP address of the default gateway (**192.168.2.1**).
  prefs: []
  type: TYPE_NORMAL
- en: And the `awk` command **'/^[1-9]/ { print $3 }'** limits the output that has
    been piped (**|**) into it to those lines beginning with a digit other than zero
    (**/^[1-9]/**) and for those lines prints the third field (**$3**). The result
    is the network mask (**255.255.255.0**) for the local network.
  prefs: []
  type: TYPE_NORMAL
- en: More information about `awk` and the `awk` command language can be found in
    the `awk` manpages (see the recipe Reading the built-in documentation in [Chapter
    2](ch02.html "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: After discovering the current IP address, the default gateway, and the network
    mask, the recipe modifies the network interface configuration file (`/etc/network/interfaces`)
    to include the discovered parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The wired network interface (**iface eth0**) is set to **static** and the configuration
    parameters **address**, **gateway**, and **netmask** are added using the parameter
    values discovered earlier.
  prefs: []
  type: TYPE_NORMAL
- en: After the configuration file is saved, the Raspberry Pi is rebooted with its
    new IP address.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most networks, both at home and at work, (DHCP) servers are used to dynamically
    assign IP addresses to client computers and devices. Because the DHCP servers
    are responsible for IP address assignment, they usually need additional configuration
    to reserve static IP addresses so that they are not accidentally assigned to another
    client device or computer.
  prefs: []
  type: TYPE_NORMAL
- en: In order to configure the DHCP server, you will need the hardware address of
    the Raspberry Pi's wired network interface. The `ifconfig` command can be used
    to display a lot of useful network information. This combination of `ifconfig`
    and an `awk` filter can be used to display just the hardware address of the network
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/B04745_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, a local home network gateway is being configured,
    setting the **Reserved IP Address** to **192.168.2.13** for the exclusive use
    of the **raspberry-pi** computer.
  prefs: []
  type: TYPE_NORMAL
- en: The **MAC Address** (**b8:27:eb:3f:aa:0c**) is the unique number assigned to
    this specific Raspberry Pi's network interface.
  prefs: []
  type: TYPE_NORMAL
- en: After this configuration is saved, the IP address **192.168.2.13** will be reserved
    for the exclusive use of the **raspberry-pi** computer.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Dynamic Host Configuration Protocol** ([http://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol](http://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol)):
    This Wikipedia article describes the DHCP protocol, its history, and how it works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hostname – show or set the system''s hostname**([http://manpages.debian.net/cgi-bin/man.cgi?query=hostname](http://manpages.debian.net/cgi-bin/man.cgi?query=hostname)):
    The Debian manpage for `hostname` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**route – show/manipulate the IP routing table**([http://manpages.debian.net/cgi-bin/man.cgi?query=route](http://manpages.debian.net/cgi-bin/man.cgi?query=route)):
    The Debian manpage for `route` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ifconfig – configure network interfaces** ([http://manpages.debian.net/cgi-bin/man.cgi?query=ifconfig](http://manpages.debian.net/cgi-bin/man.cgi?query=ifconfig)):
    The Debian manpage for `ifconfig` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**interfaces – network interface configuration for ifup and ifdown** ([http://manpages.debian.net/cgi-bin/man.cgi?query=interfaces](http://manpages.debian.net/cgi-bin/man.cgi?query=interfaces)):
    The Debian manpage for `interfaces` describes the configuration file and its parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**awk – pattern-directed scanning and processing language** ([http://manpages.debian.net/cgi-bin/man.cgi?query=awk](http://manpages.debian.net/cgi-bin/man.cgi?query=awk)):
    The Debian manpage for `awk` describes the command and the `awk` command language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a firewall with ufw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses a simple, yet powerful command-line tool (`ufw`) to configure
    a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe can be used to completely block network access to the Raspberry
    Pi. It can also be used to configure the Uncomplicated Firewall (`ufw`) to allow
    access through the firewall to specific applications (for example, web servers).
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to protect network access to
    your Raspberry Pi using a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for creating a firewall with `ufw` are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `ufw` software package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs `ufw`. The installation
    of `ufw` includes a default set of firewall rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `ufw allow` command to add the `ssh` protocol to the list of allowed
    protocols in the firewall rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `ufw enable` command to turn on the firewall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The firewall rules are enabled immediately and also on startup!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe uses the `apt-get install`
    command to download and install the Uncomplicated Firewall (**ufw**).
  prefs: []
  type: TYPE_NORMAL
- en: Then, a firewall rule is defined to permit remote access to the Raspberry Pi
    using the Secure Shell (`ssh`) protocol (`ufw allow ssh`).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the firewall is turned on (`ufw enable`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Uncomplicated Firewall (`ufw`) is a command-line tool for defining firewall
    rules. The `ufw` command is not actually a firewall. There is no extra firewall
    server installed. The Linux kernel can be used as a firewall.
  prefs: []
  type: TYPE_NORMAL
- en: The `ufw` command is just used to configure firewall rules. The rule definitions
    are stored in the `/etc/ufw` directory; however, those definition files should
    not be modified directly. Modifying those files correctly is the purpose of the
    `ufw` command.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to enable remote access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding recipe, after the `ufw` command is installed and before the
    firewall is enabled, a new firewall rule, allow SSH access (`ufw`) `allow ssh`,
    is added to the rule definitions. Without this rule, the next attempt to connect
    remotely via `ssh` would fail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `ssh` command fails because there is no firewall rule permitting
    Secure Shell access to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling the firewall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The firewall rules defined using `ufw` will not prevent a user from logging
    in locally using a keyboard and display connected directly to the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `ufw` is preventing remote access, log in directly to the Raspberry Pi and
    then use the command: `ufw disable` to disable the firewall rules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Allowing a file server through the firewall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the Raspberry Pi has been set up as a file server (see [Chapter 4](ch04.html
    "Chapter 4. File Sharing"), *File Sharing*), use the firewall rule `ufw allow
    cifs` to allow the SMB (CIFS) protocol through the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Allowing a web server through the firewall
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly, if the Raspberry Pi has been set up as a local web server (see the
    next recipe in this chapter), use the firewall rule `ufw allow http` to allow
    the HTTP protocol through the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Application rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Uncomplicated Firewall has predefined rules for a number of application
    protocols, in addition to network protocols. The applications currently recognized
    by `ufw` can be displayed with the command `ufw app list`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Enable all the defined network connections for one of the preceding applications
    using the command `ufw allow` and disable them using the command `ufw deny`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ufw app info` command will display the application's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows that the application configuration for **"WWW Full"**
    includes both the **HTTP** port (**80**) and the **HTTPS** port (**443**). By
    using the **"WWW Full"** application profile, network access to both web server
    ports can be allowed (denied or rejected) using a single firewall rule.
  prefs: []
  type: TYPE_NORMAL
- en: Resetting the firewall rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the `ufw` rules deny all network access to the Raspberry Pi. However,
    also by default, the firewall rules are not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Use the command `ufw reset` to return the firewall rules to their defaults –
    no remote access at all with the firewall disabled.
  prefs: []
  type: TYPE_NORMAL
- en: After resetting the default rules, the firewall can then be re-enabled with
    the command `ufw enable`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Uncomplicated Firewall (ufw)** ([http://en.wikipedia.org/wiki/Uncomplicated_Firewall](http://en.wikipedia.org/wiki/Uncomplicated_Firewall)):
    This Wikipedia article about the Uncomplicated Firewall explains how it works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ufw – program for managing a netfilter firewall** ([http://manpages.debian.net/cgi-bin/man.cgi?query=ufw](http://manpages.debian.net/cgi-bin/man.cgi?query=ufw)):
    The Debian manpage for `ufw` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iptables – administration tool for IPv4 packet filtering and NAT** ([http://manpages.debian.net/cgi-bin/man.cgi?query=iptables](http://manpages.debian.net/cgi-bin/man.cgi?query=iptables)):
    The Debian manpage for `iptables` describes in more detail how to configure the
    Linux kernel''s built-in firewall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access to a desktop session (xrdp)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe enables remote access to a Raspberry Pi desktop session using `xrdp`.
  prefs: []
  type: TYPE_NORMAL
- en: Using `xrdp`, teachers, support engineers, and hobbyists can create a new desktop
    session on the Raspberry Pi remotely from another computer. The newly created
    desktop session is separate from the desktop session currently displayed on the
    monitor attached to the Raspberry Pi. This private session is perfect for installing
    updates or performing other background tasks that should not interrupt the desktop
    session currently displayed on the Raspberry Pi's monitor.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to use `xrdp` to create a new
    remote desktop session on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: Running this application requires the desktop GUI. Use `raspi-config` to configure
    the Raspberry Pi to automatically boot with the desktop GUI (see Chapter 2, *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: The installation portion of this recipe does not require the desktop and can
    be run from the text-based console (or from within an LXTerminal).
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for connecting to the Raspberry Pi desktop remotely are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely. If you are using the
    Raspberry Pi desktop, open an LXTerminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `xrdp` software package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs `xrdp`.Installation of
    the software package includes starting the `xrdp` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a **RDP** (**Remote Desktop Protocol**) client (such as Microsoft's Remote
    Desktop Connection) to connect to the Raspberry Pi using its IP address (**192.168.2.13**).![How
    to do it...](img/B04745_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows how to connect to the Raspberry Pi using Microsoft's
    Remote Desktop Connection for Mac.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once connected, the `xrdp` session manager (`sesman`) displays a login screen.![How
    to do it...](img/B04745_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding image shows how to start a remote desktop session with the Raspberry
    Pi using `xrdp`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Log in to the `xrdp` session: Choose `sesman-Xvnc` as the Module. Use the same
    username (`pi`) and password (`raspberry`) that you use to log in via the console
    (or via ssh).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a successful login, the Raspberry Pi desktop is displayed.![How to do
    it...](img/B04745_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows a remote connection to the Raspberry Pi desktop
    via an RDP connection (client resolution was set to 640x480).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `xrdb` software package is downloaded
    and installed using `apt-get install`. The installation includes starting `xrdb`
    and the desktop session manager (`sesman`).
  prefs: []
  type: TYPE_NORMAL
- en: After `sesman` has started, a remote session to the Raspberry Pi can be created
    from another computer that has an RDP client installed.
  prefs: []
  type: TYPE_NORMAL
- en: The example in the recipe uses Microsoft's Remote Desktop Connection for Mac.
    The Microsoft RDP client prompts for the **Computer**. Enter the Raspberry Pi's
    IP address (**192.168.2.13**) to create a remote connection.
  prefs: []
  type: TYPE_NORMAL
- en: After the remote connection is made, an RDP session is created (**Login to xrdp**)
    by logging in to `xrdp` with the same username and password that is used to log
    in directly to the Raspberry Pi via `ssh` or directly via the GUI desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Once the username and password have been entered correctly, a new desktop session
    is created. This new desktop session is not the same as the session running on
    the monitor connected directly to the Raspberry Pi. It is a new desktop session.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Remote Desktop Protocol (RDP) is a client-server protocol developed by Microsoft.
    The `xrdp` client is used to display the graphical user interface sent by an RDP
    server. The Microsoft RDP client (`mstsc.exe`) is included in every Windows version
    since XP.
  prefs: []
  type: TYPE_NORMAL
- en: The `xrdp` software package also includes the TightVNC server (`tightvncsever`)
    that communicates via the **Virtual Network Computing** (**VNC**) protocol – another
    graphical desktop sharing protocol. A number of open source and proprietary clients
    exist for both the RDP and VNC remote desktop protocols, including clients for
    mobile devices and tablet PCs.
  prefs: []
  type: TYPE_NORMAL
- en: The remote desktop connection displays the Raspberry Pi desktop in much the
    same way, as the desktop would be seen, if the Raspberry Pi were connected directly
    to a display. There are some exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: No streaming video (or Minecraft)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most noticeable limitation that a remote display has is not being able to
    display streaming video. Most video streaming applications stream directly to
    the video frame buffer, the part of memory that is shared with the display. So,
    the video is streamed directly to the display and bypasses the desktop. Because
    the video bypasses the desktop, it is also not sent to the remote desktop.
  prefs: []
  type: TYPE_NORMAL
- en: The Minecraft game for the Raspberry Pi also accesses the video frame buffer
    directly. So, like video streaming, Minecraft cannot be played through a remote
    desktop session.
  prefs: []
  type: TYPE_NORMAL
- en: It's not the display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each remote desktop session is a separate desktop session. It is not the same
    desktop session that is displayed on the monitor directly connected to the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Remote Desktop Protocol** ([http://en.wikipedia.org/wiki/Remote_Desktop_Protocol](http://en.wikipedia.org/wiki/Remote_Desktop_Protocol)):
    This Wikipedia article describes the Remote Desktop Protocol (RDP).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comparison of remote desktop software** ([http://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software](http://en.wikipedia.org/wiki/Comparison_of_remote_desktop_software)):
    This Wikipedia article compares remote desktop software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xrdp – a Remote Desktop Protocol (RDP) server** ([http://manpages.debian.net/cgi-bin/man.cgi?query=xrdp](http://manpages.debian.net/cgi-bin/man.cgi?query=xrdp)):
    The Debian manpage for `xrdp` has more details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sesman – an xrdp(8) session manager** ([http://manpages.debian.net/cgi-bin/man.cgi?query=sesman](http://manpages.debian.net/cgi-bin/man.cgi?query=sesman)):
    The Debian manpage for `sesman` has more details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xrdp – an open source remote desktop protocol (rdp) server** ([http://www.xrdp.org/](http://www.xrdp.org/)):
    The xrdp website has more details about this RDP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote access to the monitor (x11vnc)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe enables remote access to the Raspberry Pi's monitor using `xrdp`.
  prefs: []
  type: TYPE_NORMAL
- en: Using `x11vnc`, teachers, support engineers, and hobbyists can access the desktop
    session currently displayed on the monitor attached to the Raspberry Pi. Teachers
    can use the remote desktop access to help students complete an assignment. Remote
    support engineers can help a Raspberry Pi user debug, install, or configure software.
    And, hobbyists can use `xrdp` to access the Raspberry Pi attached to the living
    room TV from another room.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to use `xrdp` to remotely access
    the desktop session currently displayed on the Raspberry Pi's monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: Running this application requires the desktop GUI. Use `raspi-config` to configure
    the Raspberry Pi to automatically boot with the desktop GUI (see [Chapter 2](ch02.html
    "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: The installation portion of this recipe does not require the desktop and can
    be run from the text-based console (or from within an LXTerminal).
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, the installation portion
    of this recipe can also be completed remotely using a Secure Shell client (see
    `ssh` recipe in [Chapter 2](ch02.html "Chapter 2. Administration"), *Administration*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for connecting to the Raspberry Pi desktop remotely are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely. If you are using the
    Raspberry Pi desktop, open an LXTerminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `x11vnc` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs `x11vnc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a remote computer, use a Secure Shell tunnel (`ssh`) to start an instance
    of `x11vnc` running on the Raspberry Pi. It will continue to run while the connection
    is open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use a VNCclient (such as TightVNC) to connect to the remote Raspberry Pi from
    the local machine (**127.0.0.1**) using the ssh tunnel.![How to do it...](img/B04745_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows how to connect to the Raspberry Pi using TightVNC.
    The **Remote Host** is actually the local host (**127.0.0.1**) because of the
    `ssh` tunnel. The **Port** is the default VNC port (**5900**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the preceding screenshot, the TightVNC client asks for the user to enter
    the authentication password. Enter the password that was specified in the previous
    step (**pass1234**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once connected, TightVNC displays what is on the monitor.![How to do it...](img/B04745_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows a remote connection to the Raspberry Pi desktop
    via a TightVNC client (client resolution is at 50 percent).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, the `apt-get install` command is used
    to download and install the `x11vnc` software package.
  prefs: []
  type: TYPE_NORMAL
- en: After installation is complete, the `x11vnc` server is started from a remote
    machine using a Secure Shell tunnel (ssh).
  prefs: []
  type: TYPE_NORMAL
- en: The ssh tunnel starts the `x11vnc` server and forwards the VNC connection on
    the remote Raspberry Pi to the same port on the local host (**-L 5900:localhost:5900**).
  prefs: []
  type: TYPE_NORMAL
- en: The `x11vnc` server is started quietly (**-q**) using the desktop session that
    is displayed on the monitor (**-display :0**). The server only allows local connections
    (**-localhost**). The authentication password is set (**-passwd pass1234**).
  prefs: []
  type: TYPE_NORMAL
- en: The `x11vnc` server remains running so long as there is a client connection.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe then uses the TightVNC Java client to connect to the Raspberry Pi.
    The TightVNC client prompts for the **Remote Host** and **Port**. Because the
    recipe is using an ssh tunnel, the IP address of the local host (**127.0.0.1**)
    is entered to use the ssh tunnel.
  prefs: []
  type: TYPE_NORMAL
- en: Before the Raspberry Pi desktop is displayed, the VNC client requests the **VNC
    Authentication** password that was specified when starting the server (**pass1234**).
  prefs: []
  type: TYPE_NORMAL
- en: Once the password has been entered correctly, the VNC client also displays the
    desktop session displayed on the Raspberry Pi's monitor.
  prefs: []
  type: TYPE_NORMAL
- en: So long as the remote desktop session is connected, the `x11vnc` server continues
    to run. As soon as the remote connection is closed, the `x11vnc` server quits.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The VNC client displays the same desktop session that is being displayed on
    the Raspberry Pi's monitor. However, there are some exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: No streaming video (or Minecraft)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications that write directly to the video frame buffer (for example, video
    streaming and Minecraft) are still not displayed over VNC (see the previous recipe
    for more info).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Virtual Network Computing** ([http://en.wikipedia.org/wiki/Vnc](http://en.wikipedia.org/wiki/Vnc)):
    This Wikipedia article about Virtual Network Computing (VNC) describes the history
    and capabilities of the VNC protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x11vnc** ([https://en.wikipedia.org/wiki/X11vnc](https://en.wikipedia.org/wiki/X11vnc)):
    This Wikipedia article about x11vnc describes its use and configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x11vnc –** allow VNC connections to real X11 displays ([http://manpages.debian.net/cgi-bin/man.cgi?query=x11vnc](http://manpages.debian.net/cgi-bin/man.cgi?query=x11vnc)):
    The Debian manpage for `x11nvc` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TightVNC Software** ([http://tightvnc.com/](http://tightvnc.com/)): The TightVNC
    Software website has instructions on how to download and install a client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a web server (Apache, lighttpd, Nginx)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe installs the Apache HTTP web server. Installation differences for
    the lighttpd and Nginx web servers are found at the end of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache web server is one of the most commonly used web servers on GNU Linux
    platforms like the Raspbian Linux distribution used by the Raspberry Pi. Apache
    is a mature, extensible web server that can be used to host a variety of applications;
    proxy access to websites internal and external; as well as host static web pages
    and images.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, the Raspberry Pi will able to serve static and
    dynamic web pages from the SD card boot disk and from an external disk.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: The examples in this recipe also use an external hard disk mounted at `/media/bigdisk`
    (see [Chapter 4](ch04.html "Chapter 4. File Sharing"), *File Sharing* for more
    information).
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for installing the Apache web server are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to download and install the Apache HTTP web
    server (`apache2`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs `apache2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the `ufw` firewall has been installed (see the preceding *Creating a firewall*
    recipe), use the `ufw allow http` command to create a rule that allows the HTTP
    (web server) protocol through the firewall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the web browser on another computer (or device) to test the HTTP connection
    to the Raspberry Pi.![Getting ready](img/B04745_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding image, a web browser on another computer is used to access
    the default web page of the Apache web server running on the Raspberry Pi. The
    web server works!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the command `ls –l` to list the contents of the web server's root directory,
    `/var/www`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is one file in the web server's root directory, **index.html**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the command `ls –l` to list the contents of a website stored on an external
    disk, `/media/bigdisk/MyWebsite/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is one file in the directory on the external disk, `hello.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the command `ln –s` to create a symbolic link from the external disk directory
    (`/media/bigdisk/MyWebsite`) to the web server's root directory (`/var/www/`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The web server's root directory `(/var/www`) now has a symbolic link to the
    website stored on the external disk `(/media/bigdisk/MyWebsite`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the web browser on another computer (or device) to test the HTTP connection
    to the Raspberry Pi. The website on the external disk is now accessible!![Getting
    ready](img/B04745_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding image shows how a web browser on another computer is used to access
    a web page stored on an external disk attached to the Raspberry Pi.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the `vi` command to create a dynamic web page (`timestamp`) in the `/usr/lib/cgi-bin`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following lines to the new dynamic web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the command `chmod a+rx` to make the dynamic web page `/usr/lib/cgi-bin/timestamp`
    executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The dynamic web page `/usr/lib/cgi-bin/timestamp` is now executable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use a web browser on another computer to display the dynamic web page (`http://192.168.2.13/cgi-bin/timestamp`).
    The dynamic web page displays the current time with each page refresh!![Getting
    ready](img/B04745_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding image shows the dynamic web page in action – with every page refresh,
    the timestamp is updated to the current time. The Raspberry Pi now displays dynamic
    pages!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the `ls -l` command to display the contents of the web server's log files
    directory (`/var/log/apache2/`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding example shows how the `ls -l` command is used to display the contents
    of the Apache web server's log files directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe begins by using the **apt-get
    install** command to download and install the Apache HTTP server software distribution
    meta package, `apache2`. The `apache2` software distribution includes the Apache
    HTTP server and supporting utilities.
  prefs: []
  type: TYPE_NORMAL
- en: The Apache HTTP server is started as soon as it is installed. However, if the
    Raspberry Pi has been protected with a firewall (see the *Creating a firewall*
    recipe in this chapter), the firewall will need to be configured to allow HTTP
    connections. The **ufw allow http** command adds a firewall rule that allows connections
    from other computers using the HTTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: After the firewall has been configured, a web browser on another computer is
    used to connect to the Raspberry Pi using the Raspberry Pi's IP address (`192.168.2.13`).
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to add files from an external disk to the web server, is to
    first mount the external disk in the `/media` directory (see [Chapter 4](ch04.html
    "Chapter 4. File Sharing"), *File Sharing*) and then create a symbolic link to
    the external disk in the root directory of the web server `(/var/www`). A symbolic
    link does not copy files, it just points to where files are located.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, a website directory on the external disk `(/media/bigdisk/MyWebsite`)
    is symbolically linked (**ln –s**) to the web server's root directory at `/var/www/MyWebsite`.
    The example website has only one file that is physically located on the external
    disk at `/media/bigdisk/MyWebsite/hello.html`. After the symbolic link is made,
    that file is also located symbolically at `/var/www/MyWebsite/hello.html` and
    can be reached from a web browser at the URL `http://192.168.2.13/MyWebsite/hello.html`.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe continues by creating a simple dynamic web page that displays the
    current time. The **vi** editor is used to create the file `timestamp` in the
    `/usr/lib/cgi-bin/` directory. The directory is protected so the `sudo` command
    is used as a prefix to temporarily grant the user the privilege of creating and
    editing the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `timestamp` dynamic web page uses the Bash scripting language `(#!/bin/bash`).
    The web page first outputs a header describing the content of the web page as
    plain text (**echo "Content-Type: text/plain"**) followed by a blank line (`echo
    ""`) to separate the HTTP response header from the content of the web page. The
    only line of the web page displays the current time by executing the GNU `date`
    utility (`echo "$(date)"`).'
  prefs: []
  type: TYPE_NORMAL
- en: In order for the script to be called dynamically, the execution bit of the file's
    mode needs to be set with the `chmod` command `(chmod a+rx`). The file is located
    in a protected directory, so the `sudo` command is used again to temporarily grant
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the dynamic web page (`http://192.168.2.13/cgi-bin/timestamp`) in the
    browser on another computer shows that the page is dynamic with each refresh of
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the contents of the web server's log file directory (`/var/log/apache2/`)
    are displayed. Each request sent to the Apache HTTP web server is logged in the
    `access.log` file – one line per request. Error messages are appended to the end
    of the `error.log` file. If a dynamic web page does not display – or does not
    display properly, look at the end of the error log for a message describing the
    cause. All of the log files in this directory should be deleted (or archived)
    on a regular basis to free up disk space.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration files, static content, and dynamic pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The configuration files for the server are located in the `/etc/apache` directory.
    However, there is no need to change the configuration as the default configuration
    is sufficient for serving static web pages from the `/var/www` directory and CGI-based
    dynamic web pages from the `/usr/lib/cgi-bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The directory `/var/www` is the default location of static web pages, as well
    as static content like images, fonts, video, and sounds. Any file located under
    this directory can be displayed in a web browser using the URL of the Raspberry
    Pi plus the name of the file (or path to the file). Initially, there is only one
    file in this directory, `index.html`. In the example, it has the URL `http://192.168.2.13/index.html`.
    The `/var/www` directory is protected, so use the `sudo` command to add, modify,
    or delete files in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: In the default Apache HTTP web server configuration, dynamic web pages use the
    Common Gate Interface (CGI) and are located in the `/usr/lib/cgi-bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Other servers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Apache HTTP web server is not the only web server that runs on the Raspberry
    Pi; however, it is perhaps the most famous and full-featured open source web server
    available today. Since 2009, more than 100 million websites have been hosted by
    Apache HTTP web servers. Although robust and complete, the Apache HTTP web server
    can also be resource heavy, consuming more memory and compute power than other
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: '**lighttpd**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The lighttpd web server is lighter on resources than Apache, and has the potential
    to scale to a higher number of requests per second.
  prefs: []
  type: TYPE_NORMAL
- en: Originally designed as a proof-of-concept to handle 10,000 parallel connections
    on one server, lighttpd has since become a popular web server.
  prefs: []
  type: TYPE_NORMAL
- en: The lighttpd web server can be installed with the command `apt-get install lighttpd`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Although lighttpd does use `/var/www` as the root directory of the web server,
    it does not run CGI dynamic web pages by default.
  prefs: []
  type: TYPE_NORMAL
- en: The command `lighty-enable-mod cgi` is used to enable the lighttpd CGI module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows how to use the command `lighty-enable-mod` to enable
    CGI dynamic web pages.
  prefs: []
  type: TYPE_NORMAL
- en: The lighttpd CGI module expects the `cgi-bin` directory to be located in the
    root directory of the web server instead of in the `/usr/lib` directory. The command
    `ln –s` can be used to create a symbolic link from the web server's root directory
    to the default location for dynamic web pages (`/usr/lib/cgi-bin`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The lighthttp web server's configuration files are stored in the `/etc/lighttpd`
    directory, and its log files are written to the `/var/log/lighttpd` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nginx**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Another popular modern web server is Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: Using an event-driven approach to handling requests, Nginx can provide more
    predictable performance under high loads than the Apache web server. Nginx also
    has a number of options for deploying web applications including modular support
    for the popular web framework Ruby on Rails.
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx web server can be installed with the command `apt-get install nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The Nginx web server does not by default use the same root directory as the
    Apache HTTP or lighttpd web servers; instead, static web pages are by default
    stored in the `/usr/share/ngix/www` directory. The Nginx web server also does
    not support CGI; however, the Nginx web server can also produce dynamic web pages
    using FastCGI or Ruby Passenger.
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx web server's configuration files are stored in the `/etc/nginx` directory,
    and its log files are written to the `/var/log/nginx` directory.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to Apache, lighttpd, and Nginx, the Raspberry Pi can also run a
    number of lesser-known web servers including the AOL web server, monkey, and yaws.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `apt-cache search` and `grep` are used to display
    a list of available HTTP web servers. Any of the listed web servers can be installed
    by using the `apt-get install` command (for example, `apt-get install monkey`).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Apache HTTP Server Project** ([http://httpd.apache.org](http://httpd.apache.org)):
    The Apache web server website is the complete reference for the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lighttpd – fly light** ([http://www.lighttpd.net/](http://www.lighttpd.net/)):
    The lighttpd website has detailed documentation for the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nginx** ([http://nginx.org/en](http://nginx.org/en)): The Nginx website has
    more information for the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bash – GNU Bourne-Again SHell** ([http://manpages.debian.net/cgi-bin/man.cgi?query=bash](http://manpages.debian.net/cgi-bin/man.cgi?query=bash)):
    The Debian manpage for `bash` is a reference for the Bash command language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chmod – change file mode bits** ([http://manpages.debian.net/cgi-bin/man.cgi?query=chmod](http://manpages.debian.net/cgi-bin/man.cgi?query=chmod)):
    The Debian manpage for `chmod` details the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**date – print or set the system date and time** ([http://manpages.debian.net/cgi-bin/man.cgi?query=date](http://manpages.debian.net/cgi-bin/man.cgi?query=date)):
    The Debian manpage for `date` details the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**grep – print lines matching a pattern** ([http://manpages.debian.net/cgi-bin/man.cgi?query=grep](http://manpages.debian.net/cgi-bin/man.cgi?query=grep)):
    The Debian manpage for `grep` details the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ln -s – make links between files** ([http://manpages.debian.net/cgi-bin/man.cgi?query=ln](http://manpages.debian.net/cgi-bin/man.cgi?query=ln)):
    The Debian manpage for `ln -s` details the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AOL web server** ([http://www.aolserver.com](http://www.aolserver.com)):
    The AOL web server website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a wiki (mediawiki)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe installs and sets up the same wiki used by Wikipedia (MediaWiki).
  prefs: []
  type: TYPE_NORMAL
- en: Wikis are useful collaborative environments for teams that share a continuously
    evolving set of documentation. Each team member can contribute to the creation
    and editing of pages within the wiki. The resulting pages of documentation stored
    in the wiki are the result of a group effort and reflect the team's combined knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is used to install the MediaWiki. This is the same wiki software
    used by Wikipedia. The Wikipedia website is hosted by a cluster of high-powered
    servers so that it can continuously serve millions of users. This recipe uses
    a single Raspberry Pi that has more than enough power to manage a wiki for a team
    or small office of collaborators.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will have a wiki that is ready for collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, the MediaWiki is accessed and configured from a web browser.
    Configuration does not need to be completed on the Raspberry Pi; it can be completed
    remotely from another computer on the same network as the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: For better performance, the video memory of the Raspberry Pi should be set as
    low as possible, so that there is more memory available for MediaWiki (see the
    recipe Configuring memory usage in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for more information).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for installing the MediaWiki wiki server are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `mediawiki` software package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get` `install` command downloads and installs MediaWiki.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The installation of `mediawiki` includes `apache2`, `mysql`, and `php5`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The complete installation time will be at least 15 to 30 minutes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: During install, the `mysql` package will prompt for a new root password that
    should be used when managing the database. Enter a root password and repeat it
    on the next screen.![How to do it...](img/B04745_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After accepting the root password for the `mysql` database (twice), the installation
    of `mediawiki` completes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the vi editor to edit the MediaWiki website configuration file `(/etc/mediawiki/apache.conf`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file. Instructions
    for using the editor can be found in the `vi` manpages (see the recipe *Reading
    the built-in documentation* in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Uncomment the `Alias` for the MediaWiki website by removing the `#` from the
    beginning of the line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apachectl restart` command to restart the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the Apache web server has restarted, the configuration of MediaWiki continues
    in the web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a web browser (possibly on another computer) and browse to the URL of the
    MediaWiki, (`http://192.168.2.13/mediawiki/`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The IP address (`192.168.2.13`) of your Raspberry Pi will be different. The
    `hostname -I` command can be used to display the IP address of the Raspberry Pi
    – see the *Remote access* recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for an example of using the `hostname -I` command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_05_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The MediaWiki initial configuration page is displayed in the browser. Click
    the set up the wiki link to continue.![How to do it...](img/B04745_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the language to be used by MediaWiki. Click **Continue ->** for the next
    configuration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the language has been set, MediaWiki runs a number of tests to determine
    if (and how) it can be set up on the Raspberry Pi.![How to do it...](img/B04745_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding image shows a web page verifying that the Raspberry Pi is ready
    for MediaWiki.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The message "**The environment has been checked. You can install MediaWiki**`.`"
    indicates MediaWiki is ready to be installed. (If you do not see this green message,
    click **Restart installation**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the page. Click **Continue ->** to accept the license
    and continue the installation.![How to do it...](img/B04745_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The screenshot shows the copyright agreement that must be accepted to continue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the license agreement has been accepted, configuration continues with the
    MySQL settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the password for the MySQL root user from Step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the database name and root password for MySQL have been entered, configuration
    continues with some additional database settings for web access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the defaults by clicking **Continue ->**.![How to do it...](img/B04745_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows how the MySQL database settings are entered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_05_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The preceding screenshot accepts the default database settings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the default database settings have been accepted, configuration continues
    by entering the name of the wiki and the username and password for the Administrator
    Account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a Name for the wiki. Enter a username and password for the MediaWiki Administrator
    Account. Click **Continue ->**.![How to do it...](img/B04745_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding screenshot shows the web page used to enter the Name of the wiki
    and the username and password for the Administrator Account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the wiki Name and the MediaWiki Administrator username and password have
    been entered, scroll to the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **I'm bored already, just install the wiki**`.` and click **Continue
    ->**.![How to do it...](img/B04745_05_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The screenshot shows how to skip the optional configuration settings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MediaWiki uses the supplied configuration parameters to set up the database
    displaying a web page listing the completed installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Continue ->**. This step requires time to set up the database.![How
    to do it...](img/B04745_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This screenshot shows the list of completed installation steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the displayed installation list has been accepted, a congratulation page
    is displayed saying that the installation is complete. However, the `LocalSettings.php`
    file still needs to be downloaded and installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `LocalSettings.php` file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04745_05_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The screenshot shows the configuration file, **LocalSettings.php**, is complete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the `LocalSettings.php` file has been downloaded, it needs to be moved
    to the root of the MediaWiki installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the browser used for configuration was on another computer, the `LocalSettings.php`
    file will need to be copied to the Raspberry Pi.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding example, the `LocalSettings.php` file is copied from another
    computer (`golden-macbook`) to the MediaWiki directory `(/var/lib/mediawiki/`)
    on the Raspberry Pi and the file permissions are changed (`chmod a+r`) so that
    the MediaWiki can read the settings file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the `LocalSettings.php` file has been moved to the root of the MediaWiki
    installation, the MediaWiki is ready to use!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse to the MediaWiki URL on the Raspberry Pi: (`http://192.168.2.2/mediawiki/`)![How
    to do it...](img/B04745_05_22.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The MediaWiki is set up and running; however, it still needs to be customized
    for your team (by adding a custom team logo, fonts, and styles). Follow the `User's
    Guide` link for more information on customizing your installation and detailed
    instructions on how to use the MediaWiki.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of this recipe, the MediaWiki software distribution package
    (`mediawiki`) is downloaded and installed using `apt-get install`. The MediaWiki
    installation includes the installation of Apache2, MySQL, and PHP5\. Each of these
    packages can also be installed separately to provide a web server (Apache2), a
    database (MySQL), or a web scripting language (PHP5).
  prefs: []
  type: TYPE_NORMAL
- en: The MediaWiki installation begins by installing Apache2, MySQL, and PHP5\. Neither
    the Apache2 installation nor the PHP5 installation requires any user input to
    complete successfully. However, the MySQL installation requires a password for
    the `root` user of the database.
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL administrative `root` password is for the setup and configuration
    of the MySQL database management server. It is not the same password used by the
    user `pi`. The security of the Raspberry Pi is improved, if the password for the
    user pi and the password for the database are different.
  prefs: []
  type: TYPE_NORMAL
- en: After the MySQL `root` password has been entered, the installation continues.
    The MySQL database is installed. The MediaWiki application files are installed.
    The Apache2 web server is installed and started. However, the Apache2 web server
    is not yet configured to host the MediaWiki.
  prefs: []
  type: TYPE_NORMAL
- en: The `vi` editor is used to edit the `apache.conf` configuration file and assign
    the MediaWiki a website. The configuration file is located in the MediaWiki configuration
    directory, `/etc/mediawiki/`, and is also linked to the web server configuration
    directory, `/etc/apache2/conf.d/`.
  prefs: []
  type: TYPE_NORMAL
- en: The only line that needs to be changed in the Apache2 configuration file is
    the line that begins `#Alias`. The `#` at the beginning of the line turns the
    line into a comment. Comment lines are ignored when the Apache web server reads
    the configuration file. Removing the `#` from the beginning of the line will activate
    the MediaWiki the next time the web server is started.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Alias statement has two parameters: the website''s URL prefix `(/mediawiki`)
    and the location of the website''s application files `(/var/lib/mediawiki`). The
    URL prefix becomes part of the wiki''s URL (`http://192.168.2.13/mediawiki/`).
    Changing the URL prefix would also change the URL used to access the wiki. Changing
    the prefix to `/TeamWiki` would change the wiki''s URL to `http://192.168.2.2/TeamWiki/`.'
  prefs: []
  type: TYPE_NORMAL
- en: After the web server configuration file has been edited and the Alias line has
    been uncommented, the Apache web server is restarted with the `apachectl restart`
    command. This privileged command is used to restart the Apache web server.
  prefs: []
  type: TYPE_NORMAL
- en: Restarting the web server forces it to reload its configuration files, including
    the MediaWiki's web server configuration file. Now that MediaWiki's alias has
    been uncommented, the MediaWiki website is available; however, the wiki's database
    still needs to be set up.
  prefs: []
  type: TYPE_NORMAL
- en: Once the MediaWiki website is running, a web browser (possibly on another computer)
    can be used to complete the wiki's database setup. The example URL is `http://192.168.2.13/mediawiki/`.
    The IP address of your Raspberry Pi will most likely be different.
  prefs: []
  type: TYPE_NORMAL
- en: The first page displayed by the MediaWiki says the `LocalSettings.php` file
    cannot be found. The link labeled **setup the wiki** leads to the web pages that
    are used to complete the setup of the wiki.
  prefs: []
  type: TYPE_NORMAL
- en: The first setup page is used to define the language used by the wiki administrator
    (**Your language**) and the language used by other wiki users (**Wiki language**).
  prefs: []
  type: TYPE_NORMAL
- en: The next setup page shows the results of a system configuration examination
    and a license that must be accepted to complete the installation of MediaWiki.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the database settings are entered on the next page. The password entered
    earlier for the MySQL administrative `root` user should be entered here.
  prefs: []
  type: TYPE_NORMAL
- en: Some additional database settings appear on the next page. Accept the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is a setup page that asks for the wiki name and a username and
    password for the MediaWiki administrator. This new password is only used for configuring
    the wiki and is neither the MySQL administrative `root` password nor the password
    of the user `pi`.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the page is an opportunity to enter more configuration data.
    The example in the recipe chose **I'm bored already, just install the wiki.**
    and clicked **Continue ->** to complete the database installation.
  prefs: []
  type: TYPE_NORMAL
- en: After a status page is displayed, the last page of the setup triggers the download
    of the `LocalSettings.php` file, which is used to complete the installation of
    the wiki. If the file was downloaded on another computer, the `scp` command can
    be used to copy the file to the Raspberry Pi as shown in the example.
  prefs: []
  type: TYPE_NORMAL
- en: The `LocalSettings.php` file is a summary of the configuration parameters that
    were entered into the MediaWiki's setup pages. This file needs to be moved to
    the MediaWiki installation directory (`/var/lib/mediawiki/`) to complete the setup
    of the wiki.
  prefs: []
  type: TYPE_NORMAL
- en: After the `LocalSettings.php` file has been moved to the MediaWiki installation
    directory, setup is complete and the MediaWiki **Main Page** is now displayed
    at the configured URL (`http://192.168.2.13/mediawiki/`). The wiki is up and running!
  prefs: []
  type: TYPE_NORMAL
- en: Click the **[edit]** link to change the content of the **Main Page**.
  prefs: []
  type: TYPE_NORMAL
- en: Some customization could still be done to personalize the wiki (for example,
    change the wiki logo); however, the general setup is complete and the wiki can
    now be used for collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: More information on using and customizing MediaWiki can be found by following
    the **User's Guide** link on the **Main Page** of the wiki.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MediaWiki** ([http://en.wikipedia.org/wiki/Mediawiki](http://en.wikipedia.org/wiki/Mediawiki)):
    This Wikipedia article is about the MediaWiki wiki server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**apachectl – Apache HTTP server control interface** ([http://manpages.debian.net/cgi-bin/man.cgi?query=apachectl](http://manpages.debian.net/cgi-bin/man.cgi?query=apachectl)):
    The Debian manpage for `apachectl` has more about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scp – secure copy (remote file copy program)** ([http://manpages.debian.net/cgi-bin/man.cgi?query=scp](http://manpages.debian.net/cgi-bin/man.cgi?query=scp)):
    The Debian manpage for `scp` has more details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mv – move (rename) files** ([http://manpages.debian.net/cgi-bin/man.cgi?query=mv](http://manpages.debian.net/cgi-bin/man.cgi?query=mv)):
    The Debian manpage for `mv` has more details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chmod – change file mode bits** ([http://manpages.debian.net/cgi-bin/man.cgi?query=chmod](http://manpages.debian.net/cgi-bin/man.cgi?query=chmod)):
    The Debian manpage for `chmod` has more details about the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a wireless access point with hostapd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe sets up the Raspberry Pi as a wireless access point – as a hub that
    other wireless devices can use to connect to the local network – or to services
    that are running on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, the Raspbian Linux distribution supports connecting the Raspberry
    Pi to an existing wireless network using a wireless USB adapter. This recipe goes
    beyond using the Raspberry Pi as a network client and instead configures the Raspberry
    Pi as a network hub for other wireless devices. If the Raspberry Pi is also connected
    to a local network via a TCP cable, the Raspberry Pi acts as wireless network
    router enabling other devices to connect to the local network through the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all wireless USB adapters support Access Point (AP) mode.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe will test the wireless adapter to ensure that it supports AP mode.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to create a wireless network
    with the Raspberry Pi acting as a network hub.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: A supported wireless USB adapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running and the Raspberry Pi is
    connected to the local network via a wired network connection, this recipe can
    be completed remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: The wireless connection will be reset during this recipe, so it is not recommended
    to log in remotely over a wireless connection during setup.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for configuring the Raspberry Pi as a wireless access point are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the software packages `hostapd`,
    `udhcpd`, and `iw`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs the software packages `hostapd`,
    `udhcpd`, and `iw`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the wireless USB adapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Check your wireless USB adapter for AP mode with this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sudo iw list | grep ''* AP''`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If no lines are returned, the wireless adapter does not have AP mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the `iw list` command (filtered with `grep`) to see if the wireless adapter
    supports Access Point (AP) mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display the nameserver address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `cat` command to display the nameserver address stored in `/etc/resolve.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The DNS `nameserver` used by the Raspberry Pi is **192.168.2.1**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configure the `udhcpd` server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `vi` editor to edit the `udhcpd` configuration file `/etc/udhcpd.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file. Instructions
    for using the editor can be found in the `vi` manpages (see the recipe *Reading
    the built-in documentation* in [Chapter 2](ch02.html "Chapter 2. Administration"),*Administration*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the network interface used by `udhcpd` by changing the line beginning
    with `interface` to read `interface wlan0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the example configuration of `udhcpd` by changing the section beginning
    with `#Examples` at the bottom of the file. Replace the example DNS address with
    the `nameserver` address used by your Raspberry Pi (`192.168.2.1,` from Step 5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the udhcpd server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `vi` editor to edit the `udhcpd` configuration file, `/etc/default/udhcpd`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `vi` editor displays the contents of the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enable the udhcpd server by commenting out the line `DHCP_ENABLED="no"`. To
    comment out the line, place a `#` at the beginning of the line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the hostapd server. Use the `vi` editor to create a new `hostapd`
    configuration file, `/etc/hostapd/hostapd.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the empty configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following parameters to the hostapd configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the hostapd server. Use the `vi` editor to enable the `hostapd` service
    by editing the service default file (`/etc/default/hostapd`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the line beginning with #`DAEMON_CONF` with the line `DAEMON_CONF="/etc/hostapd/hostapd.conf".`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure IP forwarding. Use the `vi` editor to enable IP forwarding by editing
    the kernel parameters file, `/etc/sysctl.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor opens the kernel parameters file (`/etc/sysctl.conf`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncomment the line beginning with `net.ipv4.ip_forward` by removing the `#`
    from the beginning of the line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable IP forwarding. Enable post forwarding by using the `echo` command to
    set the kernel parameter `/proc/sys/net/ipv4/ip_forward` to the value `"1"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `iptables` command to set up IP forwarding rules for network address
    translation and port forwarding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the iptables configuration (`iptables-save`) and move the output file (`iptables.ipv4.net`)
    to the `/etc` configuration directory for use during system boot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Give the wireless interface a static IP address. Use the `ifconfig` command
    to give the wireless network interface (`wlan0)` a static IP address (`192.169.0.1`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configure the network interface boot parameters. Use the vi editor to edit the
    network interface configuration file (`/etc/network/interfaces`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor opens the network interface configuration file (`/etc/network/interfaces`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the file so that it only contains the following`:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (:wq).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the wireless access point. Use the `update-rc.d` command to enable the
    `hostapd` and `udhcpd` services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Raspberry Pi is now configured to start the `hostapd` and `udhcpd` services
    during system boot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable wpa_supplicant. Use the `mv` command to move the service definition
    file for WPA Supplicant (`fi.epitest.hostap.WPASupplicant.service`) out of the
    services directory (`/usr/share/dbus-1/system-services`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reboot: Reboot the system and the Raspberry Pi is a wireless access point!
    Look for the `Raspi_AP` network SSID and connect using the password (`Pr0t3ct3d`)
    that was defined in the hostapd configuration file (`/etc/hostapd/hostapd.conf`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The recipe starts by downloading and installing a wireless interface toolkit
    (`iw`), as well as two servers: a Wireless Access Point server (`hostapd`) and
    a DHCP server (`udhcpd`).'
  prefs: []
  type: TYPE_NORMAL
- en: Before configuration begins, the wireless USB adapter is tested for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: Check the wireless USB adapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all wireless USB adapters support Access Point (AP) mode. The `iw list`
    command is used to list the wireless capabilities of any attached wireless devices.
    If AP mode is supported, it will be listed in the section `Supported interface
    modes`.
  prefs: []
  type: TYPE_NORMAL
- en: The output of the `iw list` command is quite long. The `grep` command is used
    to filter the output of the `iw list` command. A pipe (`|`) is used to connect
    the output of the `iw list` command to the input of the `grep` command. The `grep`
    command limits the output of other commands using a regular expression filter
    (**'^[[:blank:]]*\* A'** – from the beginning of the line **^** any number of
    blanks **[[:blank:]]*** followed by an asterisk **\*** followed by a space and
    the capital letter **A**).
  prefs: []
  type: TYPE_NORMAL
- en: If the wireless adapter is not compatible with `hostapd`, the `iw list` command
    will display the message "`nl80211 not found.`" There may still be a chance for
    the adapter to work with `hostapd`; however, it requires recompiling `hostapd`
    with another driver (see references at the end of the chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Once the wireless adapter has been tested and shown to support AP mode, configuration
    of the Raspberry Pi continues.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the DHCP server by using udhcpd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Dynamic Host Configuration Protocol (DHCP) server (udhcpd) assigns client
    computers network configuration information; such as the address of a DNS nameserver,
    an IP address, and a default route (or gateway). When this recipe is complete,
    the Raspberry Pi will configure its wireless clients using DCHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three changes are made to the DHCP configuration file `(/etc/udhcpd.conf`):'
  prefs: []
  type: TYPE_NORMAL
- en: The wireless interface is selected (**wlan0**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining flag is set to support embedded devices (for example, Raspberry
    Pi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default network parameters are defined for wireless clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default network parameters are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dns** – the DNS nameserver to use. The system DNS nameserver is defined in
    **/etc/resolv.conf** and is displayed in Step 5.'
  prefs: []
  type: TYPE_NORMAL
- en: '**subnet**– how many IP addresses are part of the same network subnet. The
    value **255.255.255.0** is a net mask that matches computers with the same numbers
    in the first three bytes of the IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**router** – the static IP address of the Raspberry Pi''s wireless interface
    (**192.168.0.1**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**domain**– the name of the network (**local**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lease` – how long a network address will be assigned to a specific computer
    (**864000** seconds or 10 days).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **start** and **end** parameters at the top of the configuration file by
    default are set to the range of IP values from **192.168.0.20** to **192.168.0.254**.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi will always be attached to a wired network that has a network
    timeserver, the remaining time flag does not need to be set.
  prefs: []
  type: TYPE_NORMAL
- en: After udhcpd has been configured, its boot script parameter file `(/etc/default/udhcpd`)
    also needs to be changed. The parameter **DHCP_ENABLED="no"** needs to be commented
    out (by placing a `#` at the beginning of the line), so that the DHCP server (`udhcpd`)
    is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the Wireless Access Point server by using hostapd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Wireless Access Point server (`hostapd`) manages the wireless connection
    between other wireless devices and the Raspberry Pi. This includes establishing
    a secure connection using an encryption protocol like Wi-Fi Protect Access (WPA);
    and setting the Service Set ID (SSID) and the pre-shared key (PSK).
  prefs: []
  type: TYPE_NORMAL
- en: 'The created **hostapd** configuration parameter file includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**interface** – the wireless interface (**wlan0**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ssid** – the network ID (**Raspi_AP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wpa_passphrase** – the passphrase or pre-shared key (`Pr0t3ct3d`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**driver** – the wireless device driver (**nl80211**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hw_mode** – the hardware mode (**g**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**channel** – the radio frequency channel (**6**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macaddr_acl** – access control list (**0**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auth_algs** – the authorization algorithm to use (**1** – open auth)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ignore_broadcast_ssid** – enable broadcasting the network ID (**0** – don''t
    ignore broadcasting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wpa** – which version of WPA (**2**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wpa_key_mgmt** – which key manages algorithm (**WPA-PSK**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wpa_pairwise** – WPA v1 data encryption (**TKIP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rsn_pairwise** – WPA v2 data encryption (**CCMP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After **hostapd** has been configured, its boot script parameter file (`/etc/default/hostapd`)
    also needs to be changed. The parameter **DAEMON_CONF** needs to be set to the
    location of the `hostapd` configuration file `(/etc/hostapd/hostapd.conf`), so
    that the Wireless Access Point server is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Set up IP Forwarding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IP Forwarding is used to pass (forward) network traffic between network interfaces.
    In this recipe, IP Forwarding is used to pass network traffic between the wireless
    network and the wired network. Using IP Forwarding, the Raspberry Pi connects
    the clients of the wireless network to the wired network.
  prefs: []
  type: TYPE_NORMAL
- en: The first configuration step is to enable IP Forwarding in the Raspberry Pi's
    Linux kernel. The kernel parameters file `(/etc/sysctl.conf`) has an IP Forwarding
    entry (**net.ipv4.ip_forward=1**) that is by default commented out. Uncommenting
    this entry, by removing the **#** at the beginning of the line, enables IP Forwarding
    in the Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: After IP Forwarding is enabled, the `iptables` command is used to define the
    net filter rules that determine which network packets are allowed to cross the
    Linux kernel's internal firewall. The Linux kernel's firewall organizes its rules
    into tables that define how network packets pass through the kernel. The `iptables`
    command is used to manage the rules stored in these tables.
  prefs: []
  type: TYPE_NORMAL
- en: The first Linux kernel firewall rule define in this step is appended to the
    postprocessing rules (**-A POSTROUTING**) of the network address translation table
    (**-t nat**). This rule masquerades network packets (**MASQUERADE**) as they are
    passed to the wired network (**-o eth0**). The IP addresses of wireless network
    clients are translated into the IP address of the Raspberry Pi's wired network
    connection as they are passed to the wired network. This is how the network packets
    from multiple wireless network clients are translated so they can pass through
    the Raspberry Pi's single wired network connection.
  prefs: []
  type: TYPE_NORMAL
- en: The second rule is appended to the packet forwarding rules (**-A FORWARD**)
    of the filter table (the default table). This rule allows (**-j ACCEPT**) network
    packets to be forwarded (**-A FORWARDED**) from the wired network (**-i eth0**)
    to the wireless network (**-o wlan0**) when they are related to an established
    connection (**-m state –state RELATED,ESTABLISHED**).
  prefs: []
  type: TYPE_NORMAL
- en: The last `iptables` command rule in this step is appended to the forwarding
    rules of the filter table (**-A FORWARD**). This rule allows packets to pass from
    the wireless network (**-i wlan0**) to the wired network (**-o eth0**).
  prefs: []
  type: TYPE_NORMAL
- en: The next command, `ifconfig wlan0`, sets the IP address of the Raspberry Pi's
    wireless network connection to **192.168.0.1**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `iptables-save` command is used to save a copy of these rules in
    a configuration file `(/etc/iptables.ipv4.nat`) that can be used during boot.
  prefs: []
  type: TYPE_NORMAL
- en: After this step is complete, the IP Forwarding rules have been defined and saved
    in a configuration file. The IP Forwarding rules are also active.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the boot parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The network interfaces definitions used during boot are stored in a configuration
    file `(/etc/network/interfaces`). The file defines the network address, network
    mask, and the default route for each network interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration file used in this recipe defines three network interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lo** – the loopback network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eth0**– the wired network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wlan0** – the wireless network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The loopback interface (**lo**) is loaded automatically (**auto**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wired interface interface's (**eth0**) is configured dynamically using the
    DHCP protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The wireless interface (**wlan0**) has a static definition (**static**) – it
    is in this file. The wireless interface's IP **address** is defined to be **192.168.0.1**.
    The interface's defined network mask (**255.255.255.0**) is big enough to support
    256 unique addresses on the same subnet.
  prefs: []
  type: TYPE_NORMAL
- en: After the network interfaces are brought up (**up**), the IP Forwarding definitions
    `(/etc/iptables.ipv4.nat`) are restored (**iptables-restore**) that were saved
    earlier in this recipe (using **iptables-save**).
  prefs: []
  type: TYPE_NORMAL
- en: Once the network interface definitions have been saved, the network can be started.
  prefs: []
  type: TYPE_NORMAL
- en: '**Start the wireless access point**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the configuration files have been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: wireless access point `(/etc/hostapd/hostapd.conf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic host configuration protocol `(/etc/udhcpd.conf`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: network interfaces `(/etc/network/interfaces`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP Forwarding definitions `(/etc/iptables.ipv4.nat)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The boot scripts for the wireless access point daemon (**hostapd**) and the
    dynamic host configuration protocol daemon (`udhcp`) can be enabled (`update-rc.d
    enable`).
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi will now become a wireless access point every time it boots!
  prefs: []
  type: TYPE_NORMAL
- en: After the Raspberry Pi reboots, the wireless access point is ready to use! Wireless
    devices can now connect to the Raspberry Pi using your chosen SSID (`Raspi_AP`)
    and passphrase (`Pr0t3ct3d`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not all USB wireless adapters support AP mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a limited number of wireless USB adapters that can work with the Raspberry
    Pi and can also be configured as wireless access points. The links at the end
    of this chapter can be used to find current wireless USB adapters that can be
    used together with the Raspberry Pi to create a wireless access point (see *Other
    Resources*).
  prefs: []
  type: TYPE_NORMAL
- en: Some wireless USB adapters consume more power than the Raspberry Pi can support
    consistently on a continual basis. Connecting the wireless USB adapter to the
    Raspberry Pi indirectly via a USB hub will lead to better performance and reduce
    the likelihood that other USB devices (like the onboard network card!) will be
    starved for power.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless firewall, file server, or web server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe works well when combined with other recipes in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Together with the file-sharing recipes in [Chapter 4](ch04.html "Chapter 4. File
    Sharing"), *File Sharing*, the Raspberry Pi could become a file server for both
    wired and wireless devices connected to the local network – for exchanging document
    and media files; or for backup and storage.
  prefs: []
  type: TYPE_NORMAL
- en: When combined with other advanced networking recipes in this chapter, the Raspberry
    Pi could become a network firewall, protecting wireless access to a wired network;
    a teaching or support tool with remote access to desktop devices; a communication
    tool that serves web pages; or a collaboration tool that hosts wiki pages.
  prefs: []
  type: TYPE_NORMAL
- en: Within the Raspberry Pi and open source GNU Linux community, there are numerous
    other tools and applications that could be combined with this recipe to turn the
    Raspberry Pi into a dynamic network hub for wireless devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**hostapd** ([http://en.wikipedia.org/wiki/Hostapd](http://en.wikipedia.org/wiki/Hostapd)):
    This Wikipedia article about hostapd describes the service in more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hostapd: IEEE 802.11 AP, IEEE 802.1X/WPA/WPA2/EAP/RADIUS Authenticator**
    ([http://w1.fi/hostapd/](http://w1.fi/hostapd/)): The `hostapd` website is a complete
    reference for the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debian Linux Kernel Handbook** ([http://kernel-handbook.alioth.debian.org/](http://kernel-handbook.alioth.debian.org/)):
    The Debian Linux Kernel Handbook has more information about how iptables work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux wireless** ([http://linuxwireless.org/](http://linuxwireless.org/)):
    The Linux Wireless website has more information on using wireless devices with
    Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RPI-Wireless-Hotspot** ([http://elinux.org/RPI-Wireless-Hotspot](http://elinux.org/RPI-Wireless-Hotspot)):
    This is an article about wireless hotspots on the Embedded Linux website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**USB Wi-Fi Adapters** ([http://elinux.org/RPi_VerifiedPeripherals#USB_Wi-Fi_Adapters](http://elinux.org/RPi_VerifiedPeripherals#USB_Wi-Fi_Adapters)):
    This is an article about Wi-Fi adapters on the Embedded Linux Wiki.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raspberry Pi Wi-Fi adapter testing** ([http://www.element14.com/community/docs/DOC-44703/l/raspberry-pi-wifi-adapter-testing](http://www.element14.com/community/docs/DOC-44703/l/raspberry-pi-wifi-adapter-testing)):
    This is an article about tested wireless adapters on the Element14 Community website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a network trace utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe installs the network trace utility My traceroute (`mtr`).
  prefs: []
  type: TYPE_NORMAL
- en: The `mtr` utility is often used for network troubleshooting. The utility displays
    the route that network packets take between the Raspberry Pi and another computer.
    The display is refreshed continuously displaying the time it takes network packets
    to travel between each device along the route between the two computers. By use
    `mrt`, you can see which devices along the network route are the slowest.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to trace network packets with
    `mrt`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to installing a network trace utility are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `mtr` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command installs the software package `mrt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `mrt` command to trace the network route between your Raspberry Pi and
    the Raspberry Pi Foundation website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `mrt` command displays the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The display continuously refreshes until you press **q**.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe installs the My traceroute
    software package (`mtr`).
  prefs: []
  type: TYPE_NORMAL
- en: Then the newly installed `mtr` command is used to trace the network route between
    the author's Raspberry Pi located in San Mateo, California and the Raspberry Pi
    Foundation website that is hosted by Mythic-Beasts located in London, England.
  prefs: []
  type: TYPE_NORMAL
- en: The *q* key is pressed to exit the command.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mtr` dynamically updates network statistics collected from devices along
    the route between a remote machine and the Raspberry Pi. In addition to displaying
    a list of devices along the route (**Host**), `mtr` also displays stats for **Packets**
    and **Pings**.
  prefs: []
  type: TYPE_NORMAL
- en: The **Packets** stats show how many packets were sent (**Snt**) and how many
    packets were lost along the way (**Loss%**).
  prefs: []
  type: TYPE_NORMAL
- en: The **Pings** stats show how long it takes a network packet to travel from the
    Raspberry Pi to each device along the route. The average (**Avg**), best (**Best**),
    and worst (**Wrst**) time are also shown along with the standard deviation (**StDev**).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MTR (My traceroute)** ([https://en.wikipedia.org/wiki/MTR_(software)](https://en.wikipedia.org/wiki/MTR_(software))):
    This Wikipedia article has more information about `mtr`, its history, and how
    it works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MTR** ([https://www.bitwizard.nl/mtr/](https://www.bitwizard.nl/mtr/)): The
    homepage for MTR – My traceroute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mtr – a network diagnostic tool** ([http://manpages.debian.net/cgi-bin/man.cgi?query=mtr](http://manpages.debian.net/cgi-bin/man.cgi?query=mtr)):
    The Debian manpage for `mtr` describes the command and its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mythic beasts – infrastructure** ([https://www.mythic-beasts.com/article/infrastructure](https://www.mythic-beasts.com/article/infrastructure)):
    This web page describes the hosing infrastructure used by the Raspberry Pi Foundation,
    including the location of its data centers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a network protocol analyzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe installs the network protocol analyzer Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: The Wireshark network protocol analyzer lets you examine the traffic on your
    network at a microscopic level. This network tool can be used for live capture
    or offline analysis. Wireshark has a Graphical User Interface (GUI) and a TTY-mode
    utility (`tshark`).
  prefs: []
  type: TYPE_NORMAL
- en: Live data can be read from Ethernet, IEEE 802.11 (Wi-Fi), PPP/HDLC, ATM, Bluetooth,
    USB, Token Ring, Frame Relay, FDDI, and other low-level protocols. Decryption
    is supported for a number of higher-level protocols including IPsec, ISAKMP, Kerberos,
    SNMPv3, SSL/TLS, WEP, and WPA/WPA2\. Data can be read/written in many forms including
    tcpdump, Microsoft Network Monitor, Network General Sniffer, Sniffer Pro, NetXray,
    and many others.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, you will be able to analyze your network with
    `wireshark`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe is only a starting point for exploring network protocol analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Links to more detailed information can be found at the end of the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi`.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires the desktop GUI.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's VNC server is running, this recipe can be completed remotely
    using a VNC client (see the *Remote access to the monitor* recipe earlier in this
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to installing a network protocol analyzer are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi desktop GUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `apt-get install` command to install the `wireshark` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `apt-get install` command downloads and installs the `wireshark` software
    package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `dpkg-reconfigure` command to modify the default configuration for `wireshark`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the **<tab>** key to select the answer **<Yes>** and then press the **<enter>**
    key to update the package configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `usermod` command to add (`-a`) the user `pi` to the `wireshark` system
    group (`-G wireshark`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the Desktop GUI menu to start the Wireshark application.![How to do it...](img/B04745_05_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Wireshark application is started.![How to do it...](img/B04745_05_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose an interface from the menu and click **Start** to begin sniffing network
    packets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Wireshark application displays detailed information about each network packet
    as they are captured (sniffed).![How to do it...](img/B04745_05_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **File** menu or *Ctrl*+*Q* to quit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe uses the `apt-get install`
    command to install the Wireshark network protocol analyzer (network packet sniffer).
  prefs: []
  type: TYPE_NORMAL
- en: After the Wireshark application is installed, the `dpkg-reconfigure` command
    is used to change the default application configuration (**wireshark-common**)
    to allow non-superusers to capture network packets. By default, only superusers
    are allowed to capture network packets.
  prefs: []
  type: TYPE_NORMAL
- en: After the configuration change is accepted (**<Yes>**), members of the **wireshark**
    system group may also capture network packets.
  prefs: []
  type: TYPE_NORMAL
- en: Before the application is started, the user **pi** is added (**-a**) to the
    **wireshark** user group using the **usermod** command.
  prefs: []
  type: TYPE_NORMAL
- en: The Wireshark command is started by selecting **Menu > Internet > Wireshark**
    from the Raspberry Pi desktop.
  prefs: []
  type: TYPE_NORMAL
- en: When the application is started, the Wireshark application main page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: From the main page, it is possible to select which network interfaces will be
    sniffed (monitored for incoming/outgoing network packets). After the **Start**
    command is clicked, Wireshark starts capturing and displaying network packets.
  prefs: []
  type: TYPE_NORMAL
- en: The Wireshark application can be exited by selecting **File > Quit** from the
    menu bar, or by pressing **Control-Q**.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Wireshark application is a free and open source network protocol analyzer
    popular for network troubleshooting, analysis, and education.
  prefs: []
  type: TYPE_NORMAL
- en: Promiscuous mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark puts the selected network interface(s) into promiscuous mode. In promiscuous
    mode, the interface listens for all network packets, including packets that are
    not destined for the Raspberry Pi. Wireshark can see all the network traffic on
    the network interface.
  prefs: []
  type: TYPE_NORMAL
- en: Terminal-based user interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wireshark also has a command-line utility, `tshark`, that outputs the packets
    it sniffs directly to the console. The `tshark` command is installed separately
    from Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: When entered on the command line without options, tshark starts capturing the
    packets it can sniff on the default network interface (eth0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example output from `tshark` shows some of the network packets
    captured when browsing the website [https://www.raspberrypi.org](https://www.raspberrypi.org).
  prefs: []
  type: TYPE_NORMAL
- en: Capture filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all of the network packets passing across the Raspberry Pi's network interface
    are interesting. Both Wireshark and `tshark` can use capture filters to limit
    the number of packets that are captured and displayed.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the capture filter limits the display to SSL traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The following example captures data from the wireless network (wlan0) and limits
    the display to HTTP traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: More examples of the use of capture filters, as well as more detail on the use
    of Wireshark and `tshark`, can be found in the following references.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Wireshark** ([https://www.wireshark.org](https://www.wireshark.org)): The
    home page for the Wireshark application has detailed documentation on how Wireshark
    can be used effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wireshark** ([https://en.wikipedia.org/wiki/Wireshark](https://en.wikipedia.org/wiki/Wireshark)):
    This Wikipedia article has more information about Wireshark, its history, and
    how it works.'
  prefs: []
  type: TYPE_NORMAL
- en: '**wireshark - interactively dump and analyze network traffic** ([http://manpages.debian.net/cgi-bin/man.cgi?query=wireshark](http://manpages.debian.net/cgi-bin/man.cgi?query=wireshark)):
    The Debian manpage for wireshark describes the command, its configuration, and
    its options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tshark - dump and analyze network traffic** ([http://manpages.debian.net/cgi-bin/man.cgi?query=tshark](http://manpages.debian.net/cgi-bin/man.cgi?query=tshark)):
    The Debian manpage for `tshark` describes the command, its configuration, and
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**wireshark-filter - Wireshark filter syntax and reference** ([http://manpages.debian.org/cgi-bin/man.cgi?query=wireshark-filter](http://manpages.debian.org/cgi-bin/man.cgi?query=wireshark-filter)):
    This Debian manpage describes Wireshark''s capture filters in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CaptureFilters** ([https://wiki.wireshark.org/CaptureFilters](https://wiki.wireshark.org/CaptureFilters)):
    This website has a number of useful capture filter examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Introduction to Wireshark** ([https://www.wireshark.org/video/wireshark/introduction-to-wireshark/](https://www.wireshark.org/video/wireshark/introduction-to-wireshark/)):
    This video is an excellent introduction to packet sniffing with Wireshark.'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling the IPv6 network protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe configures your Raspberry Pi to support IPv6.
  prefs: []
  type: TYPE_NORMAL
- en: The Internet Protocol's sixth version, IPv6, is intended to replace the current
    IPv4 protocol. IPv6 provides 8x10^28 more IP address than IPv4\. It is also a
    more stable, efficient, and secure protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of modern home network routers support both IPv4 and IPv6; however,
    not all of the older routers still in service support IPv6\. So, IPv6 is not enabled
    by default on the Raspberry Pi, which saves a bit of memory and processing power.
    To take full advantage of modern networking services, you can enable IPv6 on your
    Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this recipe, your Raspberry Pi will have IPv6 enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ingredients:'
  prefs: []
  type: TYPE_NORMAL
- en: An Initial Setup or Basic Networking setup for the Raspberry Pi that has been
    powered on. You have also logged in as the user `pi` (see the recipes in [Chapter
    1](ch01.html "Chapter 1. Installation and Setup"), *Installation and Setup* for
    how to boot and log in and the recipes in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration* for how to log in remotely).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not require the desktop GUI and could either be run from the
    text-based console or from within an `LXTerminal`.
  prefs: []
  type: TYPE_NORMAL
- en: If the Raspberry Pi's Secure Shell server is running, this recipe can be completed
    remotely using a Secure Shell client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to installing a mesh network are:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Raspberry Pi either directly or remotely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `modprobe` command to enable the `ipv6` protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `ifconfig` command to validate that all of the network interfaces now
    have IPv6 enabled (look for the `inet6 addr`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Raspberry Pi is now using IPv6! However, the `ipv6` module will not be automatically
    loaded at the next boot. Use the following steps to configure the module to load
    automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `ipv6` module to the bottom of the kernel's module configuration file,
    `/etc/modules`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `vi` command to edit the kernel module configuration file `/etc/modprobe.d/ipv6.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `vi` editor displays the contents of the configuration file. Instructions
    for using the editor can be found in the `vi` manpages (see the recipe *Reading
    the built-in documentation* in [Chapter 2](ch02.html "Chapter 2. Administration"),
    *Administration*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the word **off** at the end of the **alias net-pf-10** line to **on**,
    and delete the **alias ipv6** line as it is no longer true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and exit the editor (`:wq`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, reboot the Raspberry Pi to use the new IPv6 configuration!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After logging in to the Raspberry Pi, this recipe uses the modprobe command
    to load the `ipv6` module. Simply loading the module enables IPv6 networking;
    however, the `ipv6` module will not be automatically loaded on the next reboot.
    The kernel's module configuration needs to be updated to enable an automatic load
    at boot.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe uses the `echo` command running in a subshell (`sh –c`) to append
    (`>>`) the module name, `ipv6`, to the bottom of the `/etc/modules` configuration
    file. Adding the module name to the module configuration ensures that the module
    will be loaded at boot.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe also uses the `vi` command to update the `/etc/modprobe/ipv6.conf`
    file, explicitly enabling (**on**) the complete IPv6 network protocol family (`net-pf-10`).
  prefs: []
  type: TYPE_NORMAL
- en: After the configuration is updated, the Raspberry Pi is rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet Protocol version 6 not only has a larger address space but also more
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Privacy extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IPv6 has two interesting privacy extensions: one that creates a new random
    address each time it''s rebooted, and another that continuously randomizes the
    address.'
  prefs: []
  type: TYPE_NORMAL
- en: To enable the generation of a temporary random IPv6 address with each new boot,
    add the `net.ipv6.conf.iface.use_tempadd` Linux kernel parameter to the bottom
    of the `/etc/sysctl.conf` kernel configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: To enable a continual refresh of the random IP address, add the kernel parameter
    `net.ipv6.conf.iface.temp_prefered_lft` to the bottom of the same file.
  prefs: []
  type: TYPE_NORMAL
- en: The following example uses the `echo` command to append (`>>`) the two kernel
    configuration parameters to the bottom of the kernel configuration file, `/etc/sysctl.conf`.
    The IPv6 kernel parameter (`net.ipv6.conf`) for generating a temporary address
    (`use_tempadd`) is enabled (**2**) and the parameter for refreshing it (`temp_prefered_lft`)
    every two hours (**7200** seconds) is set for all interfaces. First, the `sudo
    sh` command is use to create a subshell with superuser privileges. After the kernel
    parameters are added, the subshell is exited (**exit**) and the superuser privileges
    are discarded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Reboot the Raspberry Pi and the changes will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Use sysctl to change kernel parameters at runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following example uses the `systctl` command to configure the extensions
    at runtime specifically for the interface `eth0`. However, the `/etc/sysctl.conf`
    will still need to be updated to automatically use them at boot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IPv6** ([https://en.wikipedia.org/wiki/IPv6](https://en.wikipedia.org/wiki/IPv6)):
    This Wikipedia article has more information about Internet Protocol version 6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sysctl.conf – configure kernel parameters at runtime** ([http://manpages.debian.net/cgi-bin/man.cgi?query=sysctl](http://manpages.debian.net/cgi-bin/man.cgi?query=sysctl)):
    The Debian manpage for `sysctl` has limited information on the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sysctl.conf – sysctl preload/configuration file** ([http://manpages.debian.net/cgi-bin/man.cgi?query=sysctl.conf](http://manpages.debian.net/cgi-bin/man.cgi?query=sysctl.conf)):
    The Debian manpage for `sysctl.conf` has limited information on the file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
