- en: Chapter 1. Basics of Troubleshooting CentOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CentOS**, the **Community Enterprise Operating System**, is known to be a
    robust, stable, and trouble-free platform that is particularly well suited to
    the role of a server. Used by organizations of all sizes, CentOS can be found
    in many mission-critical environments the world over. However, as servers are
    expected to work on demand and without interruption, there will be times when
    a calm but firm hand is required to restore a service or to make some final adjustments
    to an existing application in order to ensure that a "working state" can be resumed
    as quickly as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The server has gone down and all hell is about to break loose."*'
  prefs: []
  type: TYPE_NORMAL
- en: In a less than perfect world, things can (and inevitably do) go wrong, but it
    is your overall understanding of CentOS 7 and the confidence it provides that
    will form the basis of your troubleshooting skills. Remember, troubleshooting
    is a process of investigation that ultimately leads to a diagnosis. All systems
    are different and every approach to the same situation can vary depending on the
    purpose of that system. So, with this in mind, it is important to realize that
    the premise of this book is not recipe-driven, but more about the tools that are
    used and the resources you will be expected to encounter and interact with.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to install some basic tools on CentOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover how to gather hardware-based system information using `lscpu` and `lspci`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about the importance of `dmesg` and how it interacts with the kernel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the more common log files and how they affect the log output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to manipulate files of any description using `grep`, `tail`, `cat`,
    `less`, `truncate`, and many more command-line functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing some basic tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the course of this book, it is assumed that you will already have access
    to the basic tools associated with troubleshooting your server. Some of the more
    obscure tools will be mentioned and instructions will be given; however, for those
    who may or may not have access to the basic toolbox, as the root user you may
    want to begin by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This action, if and when confirmed, will begin to download and install the common
    development tools, libraries, and base components of a CentOS server system. It
    also contains the relevant utilities required by RPM, additional text editors,
    and packages required to compile custom packages.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The practice of installing these packages at the outset is optional and all
    of these packages can be installed individually (as and when required). However,
    in an environment where disaster recovery planning has a vital role to play, it
    is worth considering the notion that a server has everything in place before any
    issues arise.
  prefs: []
  type: TYPE_NORMAL
- en: So, having prepared the system with the necessary tools and utilities, we shall
    begin in earnest by taking a closer look at the hardware. To do this, it is recommended
    that you continue with root access to the system in question.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering hardware information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a matter of principle, most people will tend to suggest that all system information
    can be categorized as either hardware-or-software based. This approach certainly
    serves to simplify things, but throughout the course of this chapter I will go
    some way to infer that there are instances in which the interplay of both (hardware
    and software) can be the reason for the issues at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, before you begin troubleshooting a system, always consider that the need
    gathering information about a system is the recommended approach to gaining additional
    insight and familiarity. Look at it this way: the practice of gathering hardware
    information is not necessarily required, but an investigation of this type may
    assist you in the search for an eventual diagnosis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we will start by running a simple CPU-based hardware report with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you will see, the purpose of this command is to output all information related
    to the CPU model, family, architecture, the cache, and much more. The `/proc`
    approach is always a good tradition, but using the following command is generally
    considered to be a better practice and far easier to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will query the system and output all relevant information associated
    with the CPU in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, rather than querying absolutely everything, you can specify
    criteria by using `grep` (a subject that we will return to a little later in this
    chapter) in order to obtain any pertinent information, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So, having done this and recorded the results for future reference, we will
    now continue our investigation by running a simple hardware report with the `lspci`
    command in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command may output something similar to the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lspci` command provides all the relevant information concerning the PCI
    devices of your server, which in turn, can be expanded by employing either the
    `-v` option or the alternative `-vv` / `-vvv` option(s), depending on the level
    of detail you require:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By default, the above commands will provide all the information required by
    you to confirm whether a device is supported by any of the modules currently installed
    on your system or not. It is expected that you should only need to do this when
    hardware upgrades have been implemented, when the system has just been installed,
    or if you are attempting to familiarize yourself with a new environment. However,
    in order to simplify this exercise even further, you will be glad to know that
    a "tree view mode" is also available. The purpose of this facility is to output
    the associated device ID and show how these values are associated with the relevant
    bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As a troubleshooter, you will be aware that every device must maintain a unique
    identifier as CentOS, like all other operating systems, will use that identifier
    to bind a driver to that device. The `lspci` command works by scanning the `/sys`
    tree for all connected devices, which can also include the connection port, the
    device type, and class, to name but a few. Having done this, the `lspci` command
    will then consult `/usr/share/hwdata/pci.ids` to provide the human-readable entries
    it displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can display the kernel drivers/modules by typing the following
    `lspci` command with the `-k` option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Naturally, during any hardware-based troubleshooting investigation you will
    want to review the system logs for additional clues, but as we have seen, both
    the `lscpu` and `lspci` commands are particularly useful when attempting to discover
    more about the necessary hardware information present on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about these commands by reviewing the respective on-board
    manuals at any time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Meanwhile, if you want to practice more, a simple test would be to insert a
    USB thumb drive and to analyze the findings yourself by paying close attention
    to the enumeration found within `/var/log/messages`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, if you do try this, you are looking at how the system reacted once
    the USB drive was inserted; you are not necessarily looking at the USB drive itself;
    the information about which can be obtained with `lsusb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, in the same way that we can use `grep` with `lscpu`, if
    you are already feeling comfortable with this type of investigation, then you
    may like to know that you can also use `grep` with the `lspci` command to discover
    more about your RAID controller in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I am sure you will not be surprised to learn that there are many more
    commands associated with obtaining hardware information. This includes (but is
    not limited to) `lsmod`, `dmidecode` `hdparm`, `df -h`, or even `lsblk` and the
    many others that will be mentioned throughout the course of this book. All of
    them are useful, but for those who do not want to commit them to memory, a significant
    amount of information can be found by simply reading the files found within the
    `/proc` and `/sys` directories like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Consequently, and before we move on, you should now be aware that when you are
    dealing with hardware analysis, perfecting your skills is about practice and exposure
    to a server over the long term. My reason for stating this is based on the notion
    that a simple installation procedure can serve to identify these problems almost
    immediately, but without that luxury, and as time goes by, it is possible that
    the hardware will need replacing or servicing. RAID Battery packs will fail, memory
    modules will fail, and, on some occasions, it could be that a particular driver
    has not fully loaded during the most recent reboot. In this situation, you may
    find that the kernel is flooding the system with random messages to such an extent
    that it suggests an entirely different issue is causing the problem. So yes, hardware
    troubleshooting requires a good measure of patience and observation, and it is
    for this reason that a quick review of both the `lscpu` and `lspci` commands has
    formed our introduction to troubleshooting CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding dmesg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the subject of log files, I would like to begin by spending
    a few moments to discuss the importance of the `dmesg` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `dmesg` command is used to record messages from the kernel that are specifically
    related to the process of hardware detection and configuration. I will not go
    in too much technical detail at this point, but it is important to realize that
    these messages are derived from the kernel ring buffer; a condition that can not
    only prove to be of great assistance because it relates back to the subject of
    hardware troubleshooting, but one that provides evidence as to why an understanding
    of the system hardware can reflect in a possible software diagnosis and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dmesg` file is located in the `/var/log/` directory, but unlike other
    files that reside in that directory, the basic syntax to view the contents of
    the `dmesg` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can page through the results in the usual way, but if you would like to
    make the timestamp a little easier to read, you may want to invoke the `-T` option
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These commands will now provide us with information related to all the hardware
    drivers loaded into the kernel during the boot sequence. This information will
    include their status (success or failure), and if a failure is recorded, it will
    even provide an error message describing why a failure took place. However, as
    this file can be quite overwhelming, you should use `grep` to query `dmesg` in
    order to streamline this information and simplify the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, simply customize the following syntax to suit your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command will now display all relevant information regarding the total memory
    available and shared memory details associated with the server. Of course, similar
    approaches can be made to read the specific information for USB devices, direct
    memory access (DMA), or even tty.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can query `dmesg` to display hardware information related
    to any Ethernet ports in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on your system configuration, the output will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To extend this approach, you can then modify the previous command in order
    to discover whether the kernel has detected a specific hard disk. To do this,
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can then use the `-i` option to ignore the effects of case
    sensitivity when searching for `tty` references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you will see, the output of the `dmesg` file is verbose and the information
    contained within it can be used to troubleshoot almost anything from network cards
    to storage issues. The `demsg` file may not give you the answer you are looking
    for straightaway, but it does provide you with another piece of the puzzle when
    it is used in combination with the information found in some of the more common
    log files associated with the CentOS operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, all CentOS system log files can be found in `/var/log` and a full
    inventory on your current server can be obtained by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With that said, every system is different, and for overall simplicity, you
    will find that some of the more common log files (associated with a minimal installation
    of CentOS 7) will include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/var/log/messages`: This file contains information related to the many native
    services used by CentOS. This includes (but is not limited to) the kernel logger,
    the network manager, boot process, mail services, `cron` jobs, and many other
    services that do not have their own log files. In many respects, this record can
    be considered to be a global log file of sorts, and out of habit, it will probably
    become your first port of call in any troubleshooting process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/boot.log`: This file contains information that is reported when the
    system boots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/maillog`: This file contains information that is reported by the
    default mail server used by the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/secure`: This file contains information that is related to the associated
    authentication and authorization privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/wtmp`: This file contains information related to user login records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/btmp`: This file contains information related to failed login attempts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/cron`: This file contains information related to cron (and anacron).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/lastlog`: This file contains information related to the binary log
    that contains all of the last login information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/var/log/yum.log`: This file contains information related to Yum and reports
    any activity related to the server''s package management tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, before we continue, I want to draw your attention towards the importance
    of these files as it is often a good idea to store `/var/log` in a separate partition
    to `/` (root).
  prefs: []
  type: TYPE_NORMAL
- en: A perfect system would maintain a separate partition for `/tmp`, `/usr`, and
    others, but yes, there may be situations where storing your log files on the same
    partition as `/` (root) is unavoidable. So remember, if and when the opportunity
    does arise, you may want to consider storing these directories on a separate filesystem
    and a separate physical volume (if possible), as this is considered to be good
    practice with regard to maintaining the overall security, integrity, and performance
    of the system in question.
  prefs: []
  type: TYPE_NORMAL
- en: However, and having said that, it is also important to recognize that many other
    packages will create and store logs in other locations. You may even be required
    to specify these locations yourself, and for this reason, it should be remembered
    that not all logs are located in `/var/log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the server in question is hosting one or more websites and
    storing all the relevant Apache VirtualHost information in a specific `/home`
    directory, then the associated log files may be found in a location like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The same can be said of many other packages, and this issue arises because the
    packages may not have the required privileges to write to that directory, while
    others are designed to maintain all logging activity within their own installation
    directory. Therefore, and depending on the nature of your system, you may need
    to spend a few moments analyzing your server's installation structure in order
    to locate the appropriate log file(s).
  prefs: []
  type: TYPE_NORMAL
- en: Reading log files and affecting the output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Viewing or reading a log file is very easy and depending on your personal preferences,
    the basic syntax to view any of these files can be expressed in any of the following
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, depending on the system configuration, you may need root privileges
    to view a specific log file. The same can be said when you are attempting to make
    changes to any system files, and for this reason, we will continue as the root
    user. However, those who use `sudo` or `su` (switch user) should change the instructions
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Log files can vary between applications and services, but the general purpose
    of these files is to record the time and date of an event and the security level,
    and to provide a message or general description. Most messages will be general
    notices or warnings of one type or another, but on certain occasions, errors will
    also be trapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you may see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Messages like this are quite ordinary and merely explain what is happening and
    when it happened. Yes, you can safely ignore them, but due to the number of messages
    you see, some may remark or feel that the system is acting a little oversensitive
    to the extent that a log file is being flooded with low-level information. This
    information may serve no real purpose to many, but in some circumstances, you
    may consider that the information supplied isn't sensitive enough, and more information
    is needed. In the end, only you can decide what best suits your needs. So, in
    order to take a case in point, let's increase log sensitivity for the purpose
    of troubleshooting the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will begin by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command enables you to view the current settings
    for the kernel, which, on a typical system, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There is a relationship at work here, and it is important that you understand
    that `printk` maintains four numeric values that control a number of settings
    related to the logging of error messages, while every error message in turn maintains
    its very own log level in order to define the importance of that message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The log level values can be summarized in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: Kernel emergency'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Kernel alert; action must be taken immediately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Condition of the kernel is considered critical'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: General kernel, error condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4`: General kernel, warning condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`5`: Kernel notice of a normal but significant condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`6`: Kernel informational message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`7`: Kernel debug-level messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, based on the above information, the log level values of `4`, `4`, `1`,
    and `7` tell us that the following is now apparent:'
  prefs: []
  type: TYPE_NORMAL
- en: The first value (`4`) is called the console log level. This numeric value defines
    the lowest priority of any message printed to the console, thereby implying that
    the lower the priority, the higher the log level number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second value (`4`) determines the default log level for all messages that
    do not maintain an exclusive log level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third value (`1`) determines the lowest possible log level configuration
    for the overall console log level. The lower the priority, the higher the log
    level number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth and final value (`7`) determines the default value for the overall
    console log level. Again, the lower the priority, the higher the log level number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consequently, you are now in a position to consider making changes to the log
    level through a configuration file found at `/etc/sysctl.conf`. This file enables
    you to make fine adjustments to default settings, and it can be accessed with
    your favorite text editor in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the required change use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, the actual value of `X` is a log level setting taken from the options
    described earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can change the number of messages by adding the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, such a modification implies a change to the kernel, and for this
    reason a reboot would be warranted. So, having done this, you will find that the
    output of running `cat /proc/sys/kernel/printk` should now reflect the new values.
    However, and as a supplementary note of caution, having considered doing this
    (and yes, you can easily reverse any changes made), it is important to realize
    that there are many questions based on the validity of changing these settings.
    Look at it this way: it may not help you at all, so you should always read around
    the subject before making these changes in order to confirm that making this alteration
    will suit your general purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the onboard manual, simply use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: On the other hand, for the many other services and applications on your server,
    you will have additional avenues of investigation to consider and these are generally
    set by the service or application in question.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common example of this is Apache. So, if you are debugging a web-based issue
    related to this service, you may be inclined to open the `httpd` configuration
    file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Look or search for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the instruction with a more appropriate setting (before saving
    the file and restarting the service). In this case, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Fortunately, it is nice to know that most services and applications do support
    a form of debugging mode for an improved log output. This will make the log file
    much more descriptive and easier to work with when troubleshooting the server,
    but just before we leave this subject, here comes the small print…
  prefs: []
  type: TYPE_NORMAL
- en: When you are working with log files, you should be aware that the information
    contained within those log files will not always be enough to help you diagnose
    the issue at hand or discover the cause of a problem. Log files may not only lack
    the required information, but they can also contain unknown errors and misleading
    messages. After all, log files only contain a series of (mainly) predefined messages
    or break points in a package, and these messages have been designed by programmers
    to make a remark concerning a known event that could have, or has taken place.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Remember…**'
  prefs: []
  type: TYPE_NORMAL
- en: When affecting the output of a log file, a verbose and detailed output may raise
    performance or security issues, while detailed logging can also place an undue
    burden on the CPU or disk I/O operations.
  prefs: []
  type: TYPE_NORMAL
- en: Based on these circumstances, there are no hard and fast rules because we also
    know that log files have limitations. So, in the end you will rely on a keen eye
    for detail and a great deal of patience, and for these reasons alone, you must
    always learn to "listen to the server" as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put it this way: the answer is there, but it may not be in the log files.
    Perseverance and a calm (but firm) hand will win the day, and it is this point
    of contention that will be echoed throughout the pages of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Using tail to monitor log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, armed with the previous information and knowing that log files tend to describe
    events by specifying the time of occurrence, a level of severity, and a preordained
    message, the key to success in any troubleshooting scenario is based on an ability
    to work with these records and manipulate them in such a way that they provide
    us with the information we require to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of troubleshooting, one of the most useful commands you will
    use is known as `tail`. A command-line expression that can be used to read the
    last lines of a log file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, `tail` can also be used to obtain the most recently added lines
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Using this command not only gives you the most recent view of the log file in
    question, but also ensures that all updates are displayed immediately, which provides
    an instant way to read log files in a live environment. This approach can be described
    as the perfect way to troubleshoot Apache, Postfix, Nginx, MySQL, and the many
    other applications or services your server may be using.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can view the Apache `access_log` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'To take this feature one step further, let''s assume that you wanted to get
    the last 3,000 lines from a log file knowing that it will not fit within your
    shell window. To account for this requirement, you can pipe the results with the
    `less` command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this situation, you can now page the results as required, but having used
    this technique a few times, I think you would agree that this is far more flexible
    than using the generic `cat` command; unless of course, you wanted to do something
    very specific.
  prefs: []
  type: TYPE_NORMAL
- en: Using cat, less, and more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cat` command has been with us for a long time and, returning to our previous
    discussion relating to hardware and the contents of the `/proc` directory, you
    can use the `cat` command to view detailed information about your server''s CPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to know more about the server''s memory, you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, there is always the chance to learn more about your devices by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As useful as `cat` is, it is also known for providing a dump of the entire
    content on the screen, a condition that can seem a little unwieldy if the file
    is greater than 1,000 lines long. So, in these circumstances, the other option
    is to use the `less` and `more` commands in order to page through specific (static)
    files in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: However, because `more` is relatively old, most will argue that `less` is far
    superior. The `less` command is similar to `more`, but `less` will allow you to
    navigate back and forth between paged results. So yes, it's an old joke, but from
    now on, and wherever possible, always know that `less` really does mean `more`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, `less` allows you to search for a particular string. To do this,
    simply open the following file using `less` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the lower left portion of the screen, type `/`, followed by a string
    value like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The output will now be adjusted to highlight the search results, and if you
    are looking for a larger selection of options, simply hit the *H* key while `less`
    is open.
  prefs: []
  type: TYPE_NORMAL
- en: Using grep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's consider the need to search the server's log files for specific keywords.
  prefs: []
  type: TYPE_NORMAL
- en: In this situation, you would use the command known as `grep`, which also becomes
    a very helpful technique to learn when you would like to perform an advanced string-based
    search of almost any file on your server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you wanted to search for a specific e-mail address in the mail log
    file. To do this, you would use `grep` in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Taking this one step further, `grep` can also be used to search in a recursive
    pattern across one or more files at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in order to search the log file directory for an IP address (`XXX.XXX.XXX.XXX`),
    you would use the `grep` command in combination with the `-R` option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, you can add line numbers to the output with the `-n` option like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, you will also notice that, during a multi-file based search, the
    filename is made available for each search result, but by employing the `-h` option,
    this can be disabled in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can ignore case with the `-i` option in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving beyond this, `grep` can be used to sort the content of a search result
    by simply calling the `sort` command. An alphabetical sort order (a to z) can
    be achieved by simply adding `sort` at the end of your original command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A reverse alphabetical sort order (z to a) can be achieved by adding the `-r`
    option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, if you wish to search for more than one value, you can invoke
    the `–E` argument like this (but do not include unnecessary white spaces between
    the pipes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Of course, `grep` can do so much more, but for the purpose of troubleshooting,
    I would now like to draw your attention to one final, but very useful command.
    Known as `diff`, this command can be very useful in determining the differences
    between two files.
  prefs: []
  type: TYPE_NORMAL
- en: Using diff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `diff` command is not necessarily considered to be a tool that is associated
    with log files unless you are comparing backups for a specific purpose. However,
    the `diff` command is very useful when comparing changes across an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, `diff` will enable you to compare the differences between two
    Apache configuration files, but by using the `-u` option, you will be able to
    include additional information such as the time and date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now, depending on the size of the files in question and the speed of your server,
    it may take a few seconds (or even minutes) to complete the task, and yes, I do
    realize we were digressing from the context of log files, but in time, I think
    that you will find this command will prove to be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you may want to compare the contents of two folders using the
    `–rq` option to make it recursive like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn more about the `diff` command, simply review the manual by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Using truncation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, having been shown how easy it is to work with log files, we should always
    be mindful that records like this do grow in size, and for this precise reason,
    they can become difficult to work with as time passes. In fact, you should be
    aware, oversized log files can impact the system's performance. With this in mind,
    it is a good idea to monitor any log rotation process and adjust it (on a regular
    basis) according to need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, where log rotation can be critical for a medium- to high-load environment,
    I would suggest that you manage this solution effectively. However, in situations
    where the effect of this process proves negligible, the following fail-safe technique
    will enable you to scrub a log file clean by typing either one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Or more appropriately, you can simply use the `truncate` command like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This process is known as truncation, and as mentioned, this should remain something
    of a last resort, as the preceding command will remove all the data contained
    within the file in question. So remember, if the file contains important information
    that you may need to review at some time in the future, back it up before you
    use `truncate`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was intended to provide an introduction to the subject of troubleshooting
    CentOS 7 without the intention of burdening you with yet another list of rules,
    instructions, or procedures that would ill-suit your circumstances or immediate
    needs. As we know, troubleshooting is a journey, and where the first chapter has
    served to introduce you to a selection of concepts and methods, every page that
    follows will ensure that you are one step closer to being at ease with the server
    you are about to diagnose and repair. So yes, the journey has just begun, and
    we will now approach the subject of troubleshooting active processes.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Red Hat customer portal: [https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Syslog Severity Levels: [http://en.wikipedia.org/wiki/Syslog#Severity_levels](http://en.wikipedia.org/wiki/Syslog#Severity_levels)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Dmesg Wikipedia page: [http://en.wikipedia.org/wiki/Dmesg](http://en.wikipedia.org/wiki/Dmesg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Cat Wikipedia page: [http://en.wikipedia.org/wiki/Cat_(Unix)](http://en.wikipedia.org/wiki/Cat_(Unix))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Grep Wikipedia page: [http://en.wikipedia.org/wiki/Grep](http://en.wikipedia.org/wiki/Grep)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Diff Wikipedia page: [http://en.wikipedia.org/wiki/Diff_utility](http://en.wikipedia.org/wiki/Diff_utility)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Tail Wikipedia page: [http://en.wikipedia.org/wiki/Tail](http://en.wikipedia.org/wiki/Tail)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Less Wikipedia page: [http://en.wikipedia.org/wiki/Less_(Unix)](http://en.wikipedia.org/wiki/Less_(Unix))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
