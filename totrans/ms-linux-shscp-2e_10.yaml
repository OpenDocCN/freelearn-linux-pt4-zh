- en: AWK Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWK 基础
- en: 'The stream editor is not alone in its family and has a big brother, AWK. In
    this chapter, we will run through the basics of AWK and explore the power of the
    AWK programming language. We will learn why we need and love AWK and how we can
    make use of some of the basic features before we start putting AWK to practical
    use in the next two chapters. As we work our way through this, we will cover the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 流编辑器并不是唯一的家族成员，它还有一个“大哥”——AWK。在本章中，我们将学习 AWK 的基础知识，并探索 AWK 编程语言的强大功能。我们将了解为什么我们需要和喜爱
    AWK，以及如何在接下来的两章中实际使用 AWK 之前，先利用一些基本特性。在学习过程中，我们将涵盖以下主题：
- en: The history behind AWK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWK 背后的历史
- en: Displaying and filtering content from files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示和过滤文件中的内容
- en: AWK variables
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWK 变量
- en: Conditional statements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句
- en: Formatting output
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化输出
- en: Further filtering to display users by UID
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步筛选，按 UID 显示用户
- en: AWK control files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWK 控制文件
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在此下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter10](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter10)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter10](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter10)'
- en: The history behind AWK
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWK 背后的历史
- en: 'The `awk` command is a command suite mainstay in both UNIX and Linux. The UNIX
    `awk` command was first developed by Bell Labs in the 1970s and is named after
    the surnames of the main authors: Alfred Aho, Peter Weinberger, and Brian Kernighan.
    The `awk` command allows access to the AWK programming language, which is designed
    to process data within text streams.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk` 命令是 UNIX 和 Linux 中常用的命令套件之一。UNIX `awk` 命令最早由贝尔实验室在 1970 年代开发，命名来自主要作者的姓氏：阿尔弗雷德·阿霍（Alfred
    Aho）、彼得·温伯格（Peter Weinberger）和布赖恩·柯宁汉（Brian Kernighan）。`awk` 命令使得可以使用 AWK 编程语言，该语言设计用于处理文本流中的数据。'
- en: 'There are many implementations of AWK:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: AWK 有许多实现版本：
- en: '**gawk**: Also known as GNU AWK, it is a free version of AWK and used by many
    developers; we will use it in this book.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gawk**：也称为 GNU AWK，是 AWK 的免费版本，被许多开发者使用；我们将在本书中使用它。'
- en: '**mawk**: Another implementation made by a guy named Mike Brennan. This implementation
    only includes a few gawk features; it was designed for speed and performance.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mawk**：另一种由迈克·布伦南（Mike Brennan）开发的实现。这个实现只包含了少数几个 gawk 特性；它的设计侧重于速度和性能。'
- en: '**tawk**: Or Thompson AWK, is an implementation that works on Solaris, DOS,
    and Windows.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tawk**：也称为 Thompson AWK，是一个可以在 Solaris、DOS 和 Windows 上运行的实现版本。'
- en: '**BWK awk**: Also known as nawk, it is used by OpenBSD and macOS.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BWK awk**：也称为 nawk，OpenBSD 和 macOS 使用的是这一版本。'
- en: Note that the `awk` interpreter that we will use in this book is `gawk` but
    there is a symbolic link for it with the name `awk`. So `awk` and `gawk` are the
    same command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本书中我们使用的 `awk` 解释器是 `gawk`，但它有一个名为 `awk` 的符号链接。因此，`awk` 和 `gawk` 是相同的命令。
- en: 'You can ensure this by listing the `awk` binary to see where it points to:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过列出 `awk` 二进制文件，查看它指向的路径来确保这一点：
- en: '![](img/6d405e0c-371f-412a-8d9a-f1e2c554d4d5.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d405e0c-371f-412a-8d9a-f1e2c554d4d5.png)'
- en: 'To demonstrate the programming language that is provided with `awk`, we should
    create a `Hello World` program. We know this is compulsory for all languages:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 `awk` 提供的编程语言，我们应该创建一个 `Hello World` 程序。我们知道这是所有语言的必备程序：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Not only can we see that this code will print the ubiquitous hello message,
    we can also generate header information with the `BEGIN` block. Later, we will
    see that we
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '我们不仅可以看到这段代码会打印出常见的 hello 消息，还可以使用 `BEGIN` 块生成头信息。稍后我们将看到，  '
- en: can create summary information with an `END` code block by allowing for a main
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `END` 代码块生成总结信息，从而允许一个主
- en: code block.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块。
- en: 'We can see the output of this basic command in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下图中看到这条基本命令的输出：
- en: '![](img/757972a8-7d3e-4d0f-a5a1-fd273419035c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/757972a8-7d3e-4d0f-a5a1-fd273419035c.png)'
- en: Displaying and filtering content from files
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示和过滤文件中的内容
- en: 'Now, of course we all want to be able to print a little more than just `Hello
    World`. The `awk` command can be used to filter content from files and, if needed,
    very large files. We should begin by printing the complete file before filtering
    it. In this way, we will get a feel for the syntax of the command. Later, we will
    see how we can add this control information into `awk` files to ease the command
    line. Using the following command, we will print all the lines from the `/etc/passwd`
    file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当然我们都希望能够打印的不仅仅是`Hello World`。`awk`命令可以用来从文件中筛选内容，如果需要的话，还可以筛选非常大的文件。我们应该从打印完整的文件开始，然后再进行筛选。通过这种方式，我们可以熟悉命令的语法。稍后，我们将看到如何将这些控制信息添加到`awk`文件中，以简化命令行。使用以下命令，我们将打印`/etc/passwd`文件中的所有行：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is equivalent to using the `$0` variable with the `print` statement:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在`print`语句中使用`$0`变量：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'AWK provides us with some ready-to-use variables to extract data such as:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: AWK为我们提供了一些现成的变量来提取数据，例如：
- en: '`$0` for the entire line'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$0`表示整行内容'
- en: '`$1` for the first field'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$1`表示第一个字段'
- en: '`$2` for the second field'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$2`表示第二个字段'
- en: '`$3` for the third field and so on'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$3`表示第三个字段，依此类推'
- en: However, we will need to specify that in this file the field separator used
    is a colon, since it's the field separator in `/etc/passwd` file. The `awk` default
    delimiter is a space or any amount of spaces or tabs and newlines. There are two
    ways to specify the input delimiter; these are displayed in the following examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要指定在这个文件中使用的字段分隔符是冒号，因为它是`/etc/passwd`文件中的字段分隔符。`awk`的默认分隔符是空格、任意数量的空格、制表符或换行符。指定输入分隔符有两种方式；这些方式将在以下示例中展示。
- en: 'The first example is easy and simple to use. The `-F` option works well, especially
    where we do not need any additional header information:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例简单易用。`-F`选项非常有效，特别是当我们不需要任何额外的头部信息时：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We could also do this within the `BEGIN` block; this is useful when we want
    to use the `BEGIN` block to display header information:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`BEGIN`块中做这件事；当我们希望使用`BEGIN`块来显示头部信息时，这非常有用：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see this clearly in the preceding example, in which we named the `BEGIN`
    block and all of the code within it is corralled by the brace brackets. The main
    block has no name and is enclosed within the brace brackets.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面的示例中清楚地看到，我们命名了`BEGIN`块，所有代码都被大括号括起来。主块没有名字，它被大括号括起来。
- en: 'After seeing the `BEGIN` block and the main code blocks, we will now look at
    the `END` code block. This is often used to display summary data. For example,
    if we want to print the total lines in the `passwd` file, we can make use of the
    `END` block. The code with the `BEGIN` and `END` blocks is processed just once,
    whereas the main block is processed for each line. The following example adds
    to the code we have written so far to include the total line count:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到`BEGIN`块和主代码块之后，我们现在来看一下`END`代码块。这个块通常用于显示汇总数据。例如，如果我们想打印`passwd`文件的总行数，我们可以利用`END`块。带有`BEGIN`和`END`块的代码只会处理一次，而主块会对每一行进行处理。以下示例在我们迄今编写的代码上添加了总行数的计算：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `awk` internal variable `NR` maintains the number of processed lines. If
    we want, we can add some additional text to this. This can be used to annotate
    the summary data. We can also make use of the single quotes that are used with
    the AWK language; they will allow us to spread the code across multiple lines.
    Once we have opened the single quotes, we can add newlines to the command line
    right until we close the quote. This is demonstrated in the next example where
    we have extended the summary information:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`的内部变量`NR`维护了已处理行的数量。如果我们需要，我们可以为此添加一些附加文本。这可以用来注解汇总数据。我们还可以使用AWK语言中的单引号；它们允许我们将代码分散到多行。只要我们打开了单引号，就可以在命令行中添加换行符，直到关闭引号为止。下一示例展示了我们如何扩展汇总信息：'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we do not wish to end our AWK experience here, we can easily display a running
    line count with each line, as well as the final total. This is shown in the following
    example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望在这里结束我们的AWK体验，我们可以轻松地显示每行的行号计数，以及最终的总计。以下示例展示了这一点：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot captures this command and shows a partial output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图捕捉了这个命令并显示了部分输出：
- en: '![](img/2719bbfb-dc6e-4bbe-9eed-82ab0735eb19.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2719bbfb-dc6e-4bbe-9eed-82ab0735eb19.png)'
- en: 'In the first example with `BEGIN`, we saw that there is no reason why we cannot
    use the `END` code block in isolation without a main code block. If we need to
    emulate the `wc -l` command, we can use the following `awk` statement:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个包含 `BEGIN` 的示例中，我们看到没有理由不能单独使用 `END` 代码块而不依赖主代码块。如果我们需要模拟 `wc -l` 命令，可以使用以下
    `awk` 语句：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will be the line count from the file. The following screenshot shows
    both the use of the `awk` command and the `wc` command to count the lines in the
    `/etc/passwd` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是文件中的行数。以下截图展示了 `awk` 命令和 `wc` 命令如何一起用于统计 `/etc/passwd` 文件中的行数：
- en: '![](img/f32eb6df-a407-48aa-a1ec-4bcca857381c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f32eb6df-a407-48aa-a1ec-4bcca857381c.png)'
- en: As we can see, the output does tally with `28` lines and our code has worked.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，输出结果与 `28` 行一致，代码运行成功。
- en: 'Another feature that we can practice with is working on selected lines only.
    For example, if we want to print only the first five lines, we will use the following
    statement:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以练习的特性是只处理选定的行。例如，如果我们只想打印前五行，我们将使用以下语句：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we want to print lines `8` through to `12`, we can use the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想打印第 `8` 行到第 `12` 行，我们可以使用以下代码：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also use regular expressions to match the text in the lines. Take a
    look at the following example where we look at the lines that end in the word
    `bash`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用正则表达式来匹配行中的文本。看看下面的示例，我们查找以 `bash` 结尾的行：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The example and the output it produces are shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 示例及其输出如下所示：
- en: '![](img/c9950942-4576-4d57-9e76-00db300f4232.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9950942-4576-4d57-9e76-00db300f4232.png)'
- en: So if you want to use a regex pattern, you should use two slashes and write
    the pattern between them, `/bash$/`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你想使用正则表达式模式，应该使用两个斜杠并将模式写在其中，`/bash$/`。
- en: AWK variables
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWK 变量
- en: We saw how to use data fields such as `$1` and `$2`. Also, we saw the `NR` field,
    which holds the number of processed lines, but there are more built-in variables
    that AWK offers to simplify work more and more.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用数据字段，例如 `$1` 和 `$2`。此外，我们还看到了 `NR` 字段，它保存了处理的行号，但 AWK 提供了更多内置变量，能够进一步简化工作。
- en: '`FIELDWIDTHS`: Specifies the field width'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIELDWIDTHS`：指定字段宽度'
- en: '`RS`: Specifies the record separator'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RS`：指定记录分隔符'
- en: '`FS`: Specifies the field separator'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FS`：指定字段分隔符'
- en: '`OFS`: Specifies the output separator, which is a space by default'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OFS`：指定输出分隔符，默认为空格'
- en: '`ORS`: Specifies the output separator'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ORS`：指定输出分隔符'
- en: '`FILENAME`: Holds the processed file name'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILENAME`：保存正在处理的文件名'
- en: '`NF`: Holds the line being processed'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NF`：保存正在处理的行'
- en: '`FNR`: Holds the record which is processed'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FNR`：保存当前处理的记录'
- en: '`IGNORECASE`: Ignores character case'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IGNORECASE`：忽略字符大小写'
- en: 'These variables can help you a lot in many cases. Let''s assume that we have
    the following file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量在很多情况下都能为你提供很大的帮助。假设我们有以下文件：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can say that we have two records for two persons and each record contains
    three fields. Let's assume that we need to print the name and the phone number.
    So how do we make AWK process them correctly?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，我们有两个记录，分别对应两个人，每个记录包含三个字段。假设我们需要打印名字和电话号码。那么，如何让 AWK 正确处理它们呢？
- en: In this case, the fields are separated by a newline (`\n`) and the records are
    separated by empty lines.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字段是通过换行符（`\n`）分隔的，记录是通过空行分隔的。
- en: 'So if we set the `FS` to (`\n`) and the `RS` to empty text, the fields will
    be identified correctly:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们将 `FS` 设置为（`\n`）并将 `RS` 设置为空文本，字段将会正确识别：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](img/361093cf-f70e-4c2d-8ce3-648beef07edb.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/361093cf-f70e-4c2d-8ce3-648beef07edb.png)'
- en: The result appears valid and appropriate.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来有效且合适。
- en: 'In the same way, you can use the `OFS` and `ORS` for the output report:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，你可以使用 `OFS` 和 `ORS` 来生成输出报告：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/b76f1ab8-5aa2-4e3d-b1fa-bc8c7ea452d2.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b76f1ab8-5aa2-4e3d-b1fa-bc8c7ea452d2.png)'
- en: You can use any text that fits your needs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何符合需求的文本。
- en: 'We know that `NR` holds the number of the processed line and `FNR` looks the
    same from the definition, but let''s explore the following example to see the
    difference:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 `NR` 保存的是当前处理行的编号，而 `FNR` 从定义上看是相同的，但让我们通过以下示例来看看它们之间的区别：
- en: 'Assume that we have the following file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下文件：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s process this file using AWK:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 AWK 来处理这个文件：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/11a00d9b-6945-4e95-a407-1cf18b195699.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11a00d9b-6945-4e95-a407-1cf18b195699.png)'
- en: Here we processed the file twice for testing purposes only to see what the value
    of the FNR variable is.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只是为了测试目的，处理了两次文件，以查看 `FNR` 变量的值。
- en: As you can see, the value starts from 1 for every processing cycle.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个处理周期中的值从 1 开始。
- en: 'Let''s see the whether `NR` variable is used in the same way:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否以相同的方式使用了 `NR` 变量：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/c86fa85a-2ff9-47c0-bf4b-305d06baacd6.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c86fa85a-2ff9-47c0-bf4b-305d06baacd6.png)'
- en: The `NR` variable preserves its value during the entire processing while `FNR`
    started from 1.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`NR` 变量在整个处理过程中保持其值，而 `FNR` 则从 1 开始。'
- en: User-defined variables
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户定义的变量
- en: You can define your own variables to use in AWK programming, as with any programming
    language.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像其他编程语言一样，在 AWK 编程中定义自己的变量。
- en: 'You can define the variable using any text, but it **MUST** not start with
    numbers:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何文本来定义变量，但**变量名不能以数字开头**：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/7fc7426a-2318-4abe-9a6d-9fefe5f77c3d.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fc7426a-2318-4abe-9a6d-9fefe5f77c3d.png)'
- en: You can define any type of variables and use it the same way.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义任何类型的变量并以相同的方式使用它。
- en: 'You can define numbers like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样定义数字：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/df63184b-d9ca-4954-a84e-1b50e59f3e07.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df63184b-d9ca-4954-a84e-1b50e59f3e07.png)'
- en: 'Or perform string concatenation like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 或者像这样进行字符串拼接：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](img/16df7c1c-1c6e-47d4-80d3-7c4212e44a0e.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16df7c1c-1c6e-47d4-80d3-7c4212e44a0e.png)'
- en: As you can see, AWK is a powerful scripting language.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，AWK 是一种强大的脚本语言。
- en: Conditional statements
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句
- en: AWK supports conditional statements such as `if` and `while` loops.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: AWK 支持条件语句，如 `if` 和 `while` 循环。
- en: The if command
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if` 命令'
- en: 'Assume you have the following file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有以下文件：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s filter the values:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们过滤这些值：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/298b58b8-5aa1-410f-adfc-52221e3062e9.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/298b58b8-5aa1-410f-adfc-52221e3062e9.png)'
- en: The `if` statement checks every value and, if it's greater than `50`, it will
    print it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句检查每个值，如果大于 `50`，则打印该值。'
- en: 'You can use `else` clauses like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样使用 `else` 语句：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/046f7d64-582c-4377-b9fd-cc5fbbcf910b.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/046f7d64-582c-4377-b9fd-cc5fbbcf910b.png)'
- en: 'If you don''t use brackets `{}` to enclose your statements, you can type them
    on the same line with a semicolon:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不使用大括号 `{}` 将语句括起来，可以在同一行中使用分号输入语句：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that you can save this code into a file and assign it to the `awk` command
    using the `-f` option, as we will see later on this chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可以将此代码保存到文件中，并使用 `-f` 选项将其分配给 `awk` 命令，稍后我们将在本章中看到这一点。
- en: while loops
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while 循环
- en: AWK processes every line of your file, but what if you want to iterate over
    the fields of each line itself?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: AWK 会处理你文件的每一行，但如果你想遍历每一行的字段该怎么办？
- en: You can iterate over fields using a `while` loop when using AWK.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 AWK 时，你可以通过 `while` 循环遍历字段。
- en: 'Assume we have the following file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下文件：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now let's iterate over the fields using a `while` loop.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `while` 循环来遍历字段。
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/0d7658dd-f966-4a9c-9f9c-1a2ccebdc975.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d7658dd-f966-4a9c-9f9c-1a2ccebdc975.png)'
- en: The `while` loop iterates over the fields; we get the mean value for every row
    and print it.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环遍历字段，我们计算每一行的平均值并打印出来。'
- en: for loops
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for 循环
- en: 'You can use `for` loops to iterate over values when using AWK like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样使用 `for` 循环来遍历 AWK 中的值：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/a3f8945c-372b-47c5-9299-864315bba4a2.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3f8945c-372b-47c5-9299-864315bba4a2.png)'
- en: We achieved the same result but using the `for` loop this time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这次使用 `for` 循环实现了相同的结果。
- en: Formatting output
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化输出
- en: 'We have remained faithful to the `print` command so far, as we have been limited
    in what we require from the output. If we want to print out, say, the username,
    UID, and default shell, we need to start formatting the output just a little.
    In this case, we can organize the output in well-shaped columns. Without formatting,
    the command we use will look similar to the following example, where we use commas
    to separate the field that we want to print:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直忠实于使用 `print` 命令，因为我们对输出的要求较少。如果我们想要打印用户名、UID 和默认 shell 等内容，我们需要稍微格式化输出。在这种情况下，我们可以将输出组织成整齐的列。如果没有格式化，所使用的命令将类似于以下示例，其中我们使用逗号分隔我们要打印的字段：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We use the `BEGIN` block here, as we can make use of it to print column headers
    later.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用 `BEGIN` 块，因为稍后我们可以利用它来打印列标题。
- en: 'To understand the problem a little better, take a look at the following screenshot,
    which illustrates uneven column widths:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解问题，请看一下下面的截图，展示了不均匀的列宽：
- en: '![](img/4bf6ec22-7ba9-47e6-a607-20d508c24e25.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bf6ec22-7ba9-47e6-a607-20d508c24e25.png)'
- en: 'The issue that we have in the output is that the columns do not align, as the
    username is an inconsistent length. To improve on this, we can use the `printf`
    function where we can specify the column width. The syntax for the `awk` statements
    will be similar to the following example:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的问题是，列没有对齐，因为用户名的长度不一致。为了解决这个问题，我们可以使用`printf`函数，在其中指定列的宽度。`awk`语句的语法将类似于以下示例：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `printf` formatting is included within double quotes. We also need to include
    the newline with the `\n`. The `printf` function does not add a newline automatically,
    whereas the `print` function does. We print the three fields; the first accepts
    string values and is set to `10` characters wide. The middle field accepts up
    to 4 numbers and we finish with the default shell field where we allow up to `17`
    string characters.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`格式化包含在双引号内。我们还需要通过`\n`来添加换行符。`printf`函数不会自动添加换行，而`print`函数会。我们打印了三个字段；第一个接受字符串值，并设置为宽度`10`个字符。中间字段最多接受4个数字，最后是默认的shell字段，允许最多`17`个字符串字符。'
- en: 'The following screenshot shows how the output can be improved:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了如何改进输出：
- en: '![](img/97206a9b-bc3b-48e5-8680-e5ab77c9d1dc.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97206a9b-bc3b-48e5-8680-e5ab77c9d1dc.png)'
- en: 'We can further enhance this by adding header information. Although the code
    starts to look untidy at this stage, we will later see how we can resolve this
    with AWK control files. The following example shows the header information being
    added to the `Begin` block. The semicolon is used to separate the two statements
    in the `BEGIN` block:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加头部信息进一步增强这一点。虽然此时代码开始显得杂乱无章，但稍后我们将看到如何通过AWK控制文件解决这个问题。以下示例展示了头部信息是如何添加到`Begin`块中的。分号用于分隔`BEGIN`块中的两个语句：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the following screenshot, we can see how this improves the output even further:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到这如何进一步改进输出：
- en: '![](img/2b0843bd-5e5c-4978-86d2-cd2dfb8dbf4c.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b0843bd-5e5c-4978-86d2-cd2dfb8dbf4c.png)'
- en: 'In the previous chapter, we saw how we can augment the output with the use
    of colors in the shell. We may also use color from within AWK by adding our own
    functions. In the next code example, you will see that AWK allows us to define
    our own functions to facilitate more complex operations and isolate the code.
    We will now modify the previous code to include green output in the header:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们看到如何通过在shell中使用颜色来增强输出。我们还可以通过在AWK中添加自定义函数来使用颜色。在接下来的代码示例中，你将看到AWK允许我们定义自己的函数，以便于进行更复杂的操作并隔离代码。我们将修改之前的代码以在头部添加绿色输出：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Creating the function within `awk` allows color to be added where we require,
    in this case, green text. It is easy to create functions to define other colors.
    The code and output are included in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`awk`中创建函数使我们可以在需要的地方添加颜色，在这种情况下是绿色文本。创建定义其他颜色的函数也非常简单。以下截图中包含了代码和输出：
- en: '![](img/bbbf8c9f-4f3b-4285-8792-ce9d95340d39.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bbbf8c9f-4f3b-4285-8792-ce9d95340d39.png)'
- en: Further filtering to display users by UID
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步筛选显示按UID排序的用户
- en: We have been able to build our skills with AWK, piece by piece, and what we
    have learned has been useful. We can take these tiny steps and add them to start
    creating something a little more usable. Perhaps we want to print just standard
    users; these are usually users higher than 500 or 1,000 depending on your particular
    distribution.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经能够一点一滴地构建我们的AWK技能，而所学到的内容都非常有用。我们可以将这些微小的步骤汇聚起来，开始创建一些更实用的东西。也许我们希望仅打印标准用户；这些通常是UID高于500或1000的用户，具体取决于你的发行版。
- en: 'On the Linux Mint distribution that I am using for this book, standard users
    start with UID `1000`. The UID is the third field. This is really a simple matter
    of using the value of the third field as the range operator. We can see this in
    the following example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我为本书使用的Linux Mint发行版中，标准用户的UID从`1000`开始。UID是第三个字段。这实际上只是利用第三个字段的值作为范围操作符的简单问题。我们可以在以下示例中看到这一点：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can show users whose UID is `101` or lower with the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令显示UID为`101`或更低的用户：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: These just give you an idea of some of the possibilities available with AWK.
    The reality is that we can play all day with our arithmetic comparison operators.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是给你提供一些AWK功能的可能性。事实上，我们可以全天候使用算术比较操作符来进行操作。
- en: We have also seen that, with some of these examples, the `awk` statements become
    a little long. This is where we can implement the `awk` control files. Let's take
    a look at these straightaway before we get lost in a morass of syntax.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，使用这些例子时，`awk`语句可能会变得有些冗长。这时，我们可以实现`awk`控制文件。让我们在迷失于语法的泥潭之前，立即来看一下这些内容。
- en: AWK control files
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWK控制文件
- en: Just as with `sed`, we can simplify the command line by creating and including
    control files. This also makes editing the command later more easily achievable.
    The control files contain all the statements that we want `awk` to execute. The
    main thing that we must consider with `sed`, `awk`, and shell scripts is modularization;
    creating reusable elements that can be used to isolate and reuse the codes. This
    saves us time and work and we get more time for the tasks that we enjoy.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`sed`中一样，我们可以通过创建并包含控制文件来简化命令行。这也使得稍后编辑命令变得更加容易实现。控制文件包含了我们希望`awk`执行的所有语句。我们在使用`sed`、`awk`和Shell脚本时，最需要考虑的事项是模块化；创建可重用的元素来隔离和复用代码。这为我们节省了时间和精力，让我们有更多时间去做喜欢的事情。
- en: 'To see an example of an `awk` control file, we should revisit the formatting
    of the `passwd` file. Creating the following file will encapsulate the `awk` statements:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`awk`控制文件的示例，我们应该重新审视`passwd`文件的格式。创建以下文件将封装`awk`语句：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We can save this file as `passwd.awk`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个文件保存为`passwd.awk`。
- en: 'Being able to encompass all `awk` statements in the one file is very convenient
    and the execution becomes clean and tidy:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将所有`awk`语句都包含在一个文件中非常方便，这样执行起来也更加简洁清晰：
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This certainly encourages more complex `awk` statements and allows you to extend
    more functionality to your code.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑促进了更复杂的`awk`语句的编写，并允许你为代码扩展更多功能。
- en: Built-in functions
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置函数
- en: In the previous example, we defined a function called `green`. This leads into
    taking about some built-in functions that come with `awk`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个名为`green`的函数。接下来我们将谈论一些`awk`自带的内置函数。
- en: 'AWK comes with many built-in functions such as mathematical functions:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: AWK自带许多内置函数，比如数学函数：
- en: '`sin(x)`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sin(x)`'
- en: '`cos(x)`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cos(x)`'
- en: '`sqrt(x)`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqrt(x)`'
- en: '`exp(x)`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exp(x)`'
- en: '`log(x)`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log(x)`'
- en: '`rand()`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rand()`'
- en: 'You can use them like this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样使用它们：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Also, there are built-in functions that can be used in string manipulation:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些可以用于字符串操作的内置函数：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope that you have a better and clearer understanding of what you can use
    the AWK tool for. This is a data-processing tool that runs through text files,
    line by line, and processes the code you add. The main block runs for each line
    that matches the row criteria, whereas the `BEGIN` and `END` block code is executed
    just once.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能更好、更清楚地理解你可以用AWK工具做什么。这是一个数据处理工具，它逐行运行文本文件，并处理你添加的代码。主要代码块在每一行符合行标准时运行，而`BEGIN`和`END`代码块只会执行一次。
- en: You've learned how to use AWK built-in variables and how to define your own
    variables and use them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何使用AWK的内置变量，以及如何定义自己的变量并加以使用。
- en: Also, you have learned how to use the `if`, `while` , and `for` loop to iterate
    over data fields.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你已经学会了如何使用`if`、`while`和`for`循环来遍历数据字段。
- en: In the next chapter, we will discuss regular expressions and how to use them
    in `sed` and AWK to gain a lot of power.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论正则表达式以及如何在`sed`和AWK中使用它们，从而获得强大的功能。
- en: Questions
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the output of the following command?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令的输出是什么？
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Assume you have the following file:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你有以下文件：
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then you run the following command against this file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以对这个文件运行以下命令：
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How many numbers will be printed?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 会打印出多少个数字？
- en: 'Assume that you have the following file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你有以下文件：
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And you run the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你运行以下命令：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: What is wrong with the previous code?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码有什么问题？
- en: How many lines will be printed from the following command?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令将打印出多少行？
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Further reading
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，进一步了解与本章相关的内容：
- en: '[https://likegeeks.com/awk-command/](https://likegeeks.com/awk-command/)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://likegeeks.com/awk-command/](https://likegeeks.com/awk-command/)'
- en: '[https://www.gnu.org/software/gawk/manual/gawk.html](https://www.gnu.org/software/gawk/manual/gawk.html)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.gnu.org/software/gawk/manual/gawk.html](https://www.gnu.org/software/gawk/manual/gawk.html)'
