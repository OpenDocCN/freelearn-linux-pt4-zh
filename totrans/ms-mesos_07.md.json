["```\n--containerizers=mesos\n```", "```\n--containerizers=mesos\n```", "```\n--containerizers=docker\n```", "```\nmesos-slave --containerizers=docker\n```", "```\niptables -A INPUT -s 172.17.0.0/16 -i docker0 -p tcp -j ACCEPT\n\n```", "```\n--containerizers=mesos,docker\n```", "```\nmessage NetworkInfo {\n  enum Protocol {\n    IPv4 = 1;\n    IPv6 = 2;\n  }\n\n  message IPAddress {\n    optional Protocol protocol = 1;\n\n    optional string ip_address = 2;\n  }\n\n  repeated IPAddress ip_addresses = 5;\n\n  repeated string groups = 3;\n\n  optional Labels labels = 4;\n};\n```", "```\n    TaskInfo {\n         ...\n         command: ...,\n         container: ContainerInfo {\n           network_infos: [\n             NetworkInfo {\n               ip_addresses: [\n                 IPAddress {\n                   protocol: None;\n                   ip_address: None;\n                 }\n               ]\n               groups: [];\n               labels: None;\n             }\n           ]\n         }\n       }\n    ```", "```\n    TaskInfo {\n    ```", "```\n         ...\n         command: ...,\n         container: ContainerInfo {\n           network_infos: [\n             NetworkInfo {\n               ip_addresses: [\n                 IPAddress {\n                   protocol: IPv4;\n                   ip_address: None;\n                 },\n                 IPAddress {\n                   protocol: IPv6;\n                   ip_address: None;\n                 }\n               ]\n               groups: [\"A\", \"B\"];\n               labels: None;\n             }\n           ]\n         }\n       }\n    ```", "```\n    TaskInfo {\n         ...\n         command: ...,\n         container: ContainerInfo {\n           network_infos: [\n             NetworkInfo {\n               ip_addresses: [\n                 IPAddress {\n                   protocol: None;\n                   ip_address: None;\n                 }\n               ]\n               groups: [\"A\"];\n               labels: None;\n             },\n             NetworkInfo {\n               ip_addresses: [\n                 IPAddress {\n                   protocol: None;\n                   ip_address: None;\n                 }\n               ]\n               groups: [\"B\"];\n               labels: None;\n             },\n           ]\n         }\n       }\n    ```", "```\n    TaskInfo {\n         ...\n         executor: ExecutorInfo {\n           ...,\n           container: ContainerInfo {\n             network_infos: [\n               NetworkInfo {\n                 ip_addresses: [\n                   IPAddress {\n                     protocol: None;\n                     ip_address: \"xx.xx.x.x\";\n                   }\n                 ]\n                 groups: [];\n                 labels: None;\n               }\n             ]\n           }\n         }\n       }\n    ```", "```\nmessage ContainerStatus {\n  repeated NetworkInfo network_infos;\n}\n\nmessage TaskStatus {\n  ...\n  optional ContainerStatus container;\n  ...\n};\n```", "```\n$ curl -s http://localhost:5051/monitor/statistics | python2.6 -mjson.tool\n\n[\n  {\n    \"executor_id\": \"job.<job_id>\",\n    \"executor_name\": \"Command Executor (Task: job.<job_id>) (Command: sh -c 'iperf ....')\",\n    \"framework_id\": \"<some_id>\",\n    \"source\": \"job.<job_id>\",\n    \"statistics\": {\n      \"cpus_limit\": <some_value>,\n      \"cpus_nr_periods\": <some_value>,\n      \"cpus_nr_throttled\": <some_value>,\n      \"cpus_system_time_secs\": <some_value>,\n      \"cpus_throttled_time_secs\": <some_value>,\n      \"cpus_user_time_secs\": <some_value>,\n      \"mem_anon_bytes\": <some_value>,\n      \"mem_cache_bytes\": <some_value>,\n      \"mem_critical_pressure_counter\": <some_value>,\n      \"mem_file_bytes\": <some_value>,\n      \"mem_limit_bytes\": <some_value>,\n      \"mem_low_pressure_counter\": <some_value>,\n      \"mem_mapped_file_bytes\": <some_value>,\n      \"mem_medium_pressure_counter\": <some_value>,\n      \"mem_rss_bytes\": <some_value>,\n      \"mem_total_bytes\": <some_value>,\n      \"net_rx_bytes\": <some_value>,\n      \"net_rx_dropped\": <some_value>,\n      \"net_rx_errors\": <some_value>,\n      \"net_rx_packets\": <some_value>,\n      \"net_traffic_control_statistics\": [\n        {\n          \"backlog\": <some_value>,\n          \"bytes\": <some_value>,\n          \"drops\": <some_value>,\n          \"id\": \"bw_limit\",\n          \"overlimits\": <some_value>,\n          \"packets\": <some_value>,\n          \"qlen\": <some_value>,\n          \"ratebps\": 0,\n          \"ratepps\": 0,\n          \"requeues\": 0\n        },\n        {\n          \"backlog\": <some_value>,\n          \"bytes\": <some_value>,\n          \"drops\": <some_value>,\n          \"id\": \"bloat_reduction\",\n          \"overlimits\": <some_value>,\n          \"packets\": <some_value>,\n          \"qlen\": <some_value>,\n          \"ratebps\": 0,\n          \"ratepps\": 0,\n          \"requeues\": 0\n        }\n      ],\n      \"net_tx_bytes\": <some_value>,\n      \"net_tx_dropped\": <some_value>,\n      \"net_tx_errors\": <some_value>,\n      \"net_tx_packets\": <some_value>,\n      \"perf\": {\n        \"duration\": <some_value>,\n      \"timestamp\": <some_value>,\n      },\n      \"timestamp\": <some_value>,\n    }\n  }\n]\n```", "```\nmessage Image {\n  enum Type {\n    DOCKER = 1;\n    APPC = 2;\n    // More Image types.\n  }\n\n  message Docker {\n    // Docker configurations\n  }\n\n  message Appc {\n    // Appc configurations.\n  }\n\n  required Type type = 1;\n\n  // Only one of the following image messages should be set to match\n  // the type.\noptional Docker docker = xx;\noptional Appc appc = yy;\n\n}\n```", "```\nmesos-slave --containerizers=mesos --image_providers=appc,docker --image_provisioner_backend=copy --isolation=filesystem/linux\n\n```", "```\n    var http = require('http'); \n    // Configure our HTTP server to respond with Hello World to all requests.\n    var server = http.createServer(function (request, response) {\n      response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n      response.end(\"Hello World\t\");\n    }); \n    // Listen on port 8000, IP defaults to \"0.0.0.0\"\n    server.listen(8000); \n    // Put a friendly message on the terminal\n    console.log(\"Server running at http://127.0.0.1:8000/\");\n    ```", "```\n    {\n      \"name\": \"hello-world\",\n      \"description\": \"hello world\",\n      \"version\": \"0.0.1\",\n      \"private\": true,\n      \"dependencies\": {\n        \"express\": \"3.x\"\n      },\n      \"scripts\": {\"start\": \"node app.js\"}\n    }\n    ```", "```\n    FROM google/nodejs\n    WORKDIR /app\n    ADD package.json /app/\n    RUN npm install\n    ADD . /app\n    EXPOSE 8000\n    CMD []\n    ENTRYPOINT [\"/nodejs/bin/npm\", \"start\"]\n    ```", "```\n    $ docker build -t my_nodejs_image .\n    $ docker run -p 8000:8000 my_nodejs_image\n\n    ```", "```\n    # Zookeeper: -p 2181:2181 -p 2888:2888 -p 3888:3888\n    zookeeper:\n     image: jplock/zookeeper:3.4.5\n     ports:\n     - \"2181\"\n    master:\n     image: redjack/mesos-master:0.21.0\n     hostname: master\n     links:\n     - zookeeper:zookeeper\n     environment:\n     - MESOS_ZK=zk://zookeeper:2181/mesos\n     - MESOS_QUORUM=1\n     - MESOS_WORK_DIR=/var/lib/mesos\n     - MESOS_LOG_DIR=/var/log\n     ports:\n     - \"5050:5050\"\n    marathon:\n     #image: garland/mesosphere-docker-marathon\n     image: mesosphere/marathon\n     links:\n     - zookeeper:zookeeper\n     ports:\n     - \"8080:8080\"\n     # Adding the params via command\n    command: --master zk://zookeeper:2181/mesos --zk zk://zookeeper:2181/marathon\n    slave:\n     image: redjack/mesos-slave:0.21.0\n     links:\n     - zookeeper:zookeeper\n     - master:master\n     environment:\n     - MESOS_MASTER=zk://zookeeper:2181/mesos\n     - MESOS_EXECUTOR_REGISTRATION_TIMEOUT=5mins\n     - MESOS_CONTAINERIZERS=docker,mesos\n     - MESOS_ISOLATOR=cgroups/cpu,cgroups/mem\n     - MESOS_LOG_DIR=/var/log\n     volumes:\n     - /var/run/docker.sock:/run/docker.sock\n     - /usr/bin/docker:/usr/bin/docker\n     - /sys:/sys:ro\n     - mesosslace-stuff:/var/log\n     expose:\n     - \"5051\"\n    registry:\n     image: registry\n     environment:\n     - STORAGE_PATH=/registry\n     volumes:\n     - registry-stuff:/registry\n     ports: \n     - \"5000:5000\"\n\n    ```", "```\n    $ fig up\n\n    ```", "```\n    # Build an image\n    $ docker build -t localhost:5000/containersol/nodejs_app\n\n    # Push it to the registry\n    $ docker push localhost:5000/containersol/nodejs_app\n\n    ```", "```\n    {\n      \"id\": \"app\", \n      \"container\": {\n        \"docker\": {\n          \"image\": \"localhost:5000/containersol/nodejs_app:latest\",\n          \"network\": \"BRIDGE\",\n          \"portMappings\": [\n            {\"containerPort\": 8000, \"servicePort\": 8000}\n          ]\n        }\n      },\n      \"cpus\": 0.2,\n      \"mem\": 512.0,\n      \"instances\": 1\n    }\n    ```", "```\n    $ curl -X POST -H \"Content-Type: application/json\" http://localhost:8080/v2/apps -d@app_marathon.json\n\n    ```"]