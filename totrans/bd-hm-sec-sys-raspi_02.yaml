- en: Chapter 2. Connecting Things to Your Pi with GPIO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：使用GPIO将设备连接到树莓派
- en: The Raspberry Pi has lots of ways to connect things to it, such as plugging
    things into the USB ports, connecting devices to the on-board camera and display
    ports, and connecting things to the various interfaces that make up the **GPIO
    connector**. As part of our home security project, we'll be focusing mainly on
    connecting things to the GPIO connector.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派有很多连接外设的方式，例如插入USB端口、连接设备到板载摄像头和显示端口，以及连接到组成**GPIO连接器**的各种接口。作为我们家庭安全项目的一部分，我们将主要关注如何将设备连接到GPIO连接器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Examining the GPIO connector and what each of the pins does
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查GPIO连接器以及每个引脚的功能
- en: Learning about the I2C and SPI buses that will be used in later chapters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习将会在后续章节中使用的I2C和SPI总线
- en: Connecting an LED and a switch safely to the data pins, and accessing these
    data pins using simple scripts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全地将LED和开关连接到数据引脚，并通过简单的脚本访问这些数据引脚
- en: Understanding the USB ports and their limitations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解USB端口及其局限性
- en: Prerequisites
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'Along with your Raspberry Pi, you''ll need the following parts for the projects
    in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你的树莓派，你还需要以下部件来完成本章的项目：
- en: A breadboard
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板
- en: An LED
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED
- en: A 220 ohm resistor (red, red, black)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个220欧姆电阻（红色、红色、黑色）
- en: A 10K ohm resistor (brown, black, orange)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个10K欧姆电阻（棕色、黑色、橙色）
- en: A pushbutton or toggle switch
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮开关或切换开关
- en: A hook-up wire:![Prerequisites](img/B04579_02_09.jpg)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根连接线：![前提条件](img/B04579_02_09.jpg)
- en: Our little collection of parts
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的小配件集合
- en: Say hello to the GPIO
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，GPIO
- en: The GPIO connector is the large group of pins on the edge of your Raspberry
    Pi board. On earlier models, there were 26 pins that made up this connector. But,
    ever since the Model B+, there have been 40 pins, although the first 26 pins are
    identical to the previous models, and it's these 26 pins we'll be working with.
    You won't need to worry about the rest of the pins.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO连接器是树莓派板边缘的一组大引脚。在早期的型号中，这个连接器由26个引脚组成。但自从B+型号开始，连接器有了40个引脚，尽管前26个引脚与以前的型号相同，我们将使用这26个引脚。你无需担心其余的引脚。
- en: 'Essentially, the GPIO connector provides access to following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，GPIO连接器提供了对以下内容的访问：
- en: Power supplies
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电源
- en: Digital I/O pins
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字I/O引脚
- en: I2C bus
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I2C总线
- en: SPI bus
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPI总线
- en: UART Serial bus
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART串行总线
- en: Some of the pins on the GPIO have more than one purpose, depending on how they
    are programmed. The following diagram is a reference guide to all of the pins
    on the GPIO. The GPIO numbers on the yellow labels relate directly to those on
    the Broadcom chip, and are numbers generally used within the scripts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO上的一些引脚具有多重功能，具体取决于它们的编程方式。以下图示是GPIO所有引脚的参考指南。黄色标签上的GPIO编号直接与Broadcom芯片上的编号对应，并且是脚本中通常使用的编号。
- en: '![Say hello to the GPIO](img/B04579_02_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![你好，GPIO](img/B04579_02_01.jpg)'
- en: Digital I/O pins
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数字I/O引脚
- en: The GPIO has 8 digital input/output pins available for use. These can be used
    to switch things on and off (in output mode), and also to detect when external
    things are switched on and off (input mode). Each pin can be configured independently
    for input or output operation, and I have labelled them **D0** to **D7** in the
    preceding diagram.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO提供8个数字输入/输出引脚可供使用。这些引脚可以用于打开和关闭设备（输出模式），也可以用于检测外部设备的开关状态（输入模式）。每个引脚都可以独立配置为输入或输出操作，我在前面的图示中将其标记为**D0**到**D7**。
- en: Obviously, if we were to use each of these pins to drive or sense an individual
    device, we would be limited to a maximum of 8 devices that could be connected
    to our home security system. In many scenarios, this is probably not enough, so
    in the next chapter we'll learn how to use the GPIO to connect many more things
    to our Raspberry Pi.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果我们使用每个引脚来驱动或感应一个独立的设备，我们将受到最多只能连接8个设备的限制。这在许多情况下可能不足够，因此在下一章中，我们将学习如何使用GPIO将更多设备连接到树莓派。
- en: The I2C bus
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I2C总线
- en: The **Inter-Integrated Circuit** (**I2C**) bus is a low-speed interface that
    can connect multiple devices and simple sensors using a 2-wire interface without
    the need for a separate clock or device select line. Typically, this bus can operate
    at speeds up to 100kbit/s. We'll be covering this in the next chapter to help
    us expand our digital I/O and connect more things.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**互集成电路**（**I2C**）总线是一种低速接口，可以通过两线接口连接多个设备和简单传感器，而无需单独的时钟或设备选择线。通常情况下，这个总线的速度可以达到100kbit/s。我们将在下一章中讨论这个内容，以帮助我们扩展数字输入/输出并连接更多设备。'
- en: The SPI bus
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SPI总线
- en: The **Serial Peripheral Interface** (**SPI**) bus is a synchronous two-way serial
    connection between a master and a slave device. It can be used to access more
    complex sensors or drive displays.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**串行外设接口**（**SPI**）总线是一种同步双向串行连接，连接主设备和从设备。它可以用来访问更复杂的传感器或驱动显示器。'
- en: The master device provides the synchronization, and each transmission is synchronized
    by a clock pulse on **SCLK** (GPIO11/pin 23). Data is transmitted on the **MOSI**
    (master-out-slave-in) and **MISO** (master-in-slave-out) (pins 19 and 21 respectively).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 主设备提供同步，每次传输都通过**SCLK**（GPIO11/引脚23）上的时钟脉冲进行同步。数据通过**MOSI**（主设备输出-从设备输入）和**MISO**（主设备输入-从设备输出）（分别是引脚19和21）传输。
- en: The UART serial bus
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UART串行总线
- en: The **Universal Asynchronous Receiver and Transmitter** (**UART**) bus is a
    way to communicate with external devices over a serial data connection, and is
    a common way for the Raspberry Pi to access data from devices such as GPS modules,
    which often come with serial connections. It can be a little bit fiddly getting
    the Pi set up to communicate with UART-connected devices, as it's also tied in
    with the operating system's serial console.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用异步接收器和发射器**（**UART**）总线是一种通过串行数据连接与外部设备通信的方式，也是树莓派访问设备数据的一种常见方式，像GPS模块通常带有串行连接。由于它也与操作系统的串行控制台相连接，因此设置树莓派与UART连接的设备进行通信时可能会有些复杂。'
- en: USB ports
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: USB端口
- en: We're probably all familiar with **Universal Serial Bus** (**USB**) ports as
    we use them to connect all sorts of things to our PCs, such as keyboards, mouses,
    and hard disks. On the Raspberry Pi, it's just the same; we can connect keyboards,
    mouses, and dongles to give us Wi-Fi and Bluetooth connectivity.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能都很熟悉**通用串行总线**（**USB**）端口，因为我们用它们连接各种设备到我们的个人电脑，比如键盘、鼠标和硬盘。在树莓派上也是如此；我们可以连接键盘、鼠标和调制解调器，从而实现Wi-Fi和蓝牙连接。
- en: '![USB ports](img/B04579_02_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![USB端口](img/B04579_02_08.jpg)'
- en: Official Raspberry Pi USB Wi-Fi Dongle
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 官方树莓派USB Wi-Fi调制解调器
- en: On earlier Raspberry Pi models, the amount of current that the ports delivered
    was pretty low and caused all sorts of problems if too much current was drawn
    by the connected devices. This was significantly improved from the model B+ onwards,
    and it's now possible to connect GSM/LTE dongles without any problems.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的树莓派型号中，端口提供的电流非常低，如果连接的设备拉取过多电流，就会导致各种问题。从B+型号开始，电流供应得到了显著改善，现在可以毫无问题地连接GSM/LTE调制解调器。
- en: There are still limitations, however, if you want to connect things such as
    hard disk drives; these can still draw more current than what can be supplied
    by the Raspberry Pi USB ports, so it's recommended that a powered USB hub or USB
    power injector be used when connecting these types of devices to your Pi.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想连接硬盘驱动器等设备，仍然存在一些限制；这些设备的电流消耗可能超过树莓派USB端口所能提供的电流，因此建议在连接这类设备时使用带电源的USB集线器或USB电源注入器。
- en: Power connections
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电源连接
- en: The GPIO connector also provides access to the on-board power supplies. The
    +5V connection (pins 2 and 4) is essentially the +5V input from the external power
    supply connected to the micro-USB power port. This can be used to power small
    external circuits if necessary, although it is recommended that an additional
    external +5V supply be used if significant current is required.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO连接器还提供了对板载电源的访问。+5V连接（引脚2和4）基本上是从连接到微型USB电源端口的外部电源输入的+5V。这可以用来为小型外部电路供电，尽管如果需要较大电流，建议使用额外的外部+5V电源。
- en: The +3.3V supply (pins 1 and 17) is the output from the on-board 3.3V regulator
    and provides a small amount of current up to 50mA. If you need to draw more than
    50mA for your external circuits, then you should use an external power supply.
    I'll show you how to build one later in this book.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: +3.3V电源（引脚1和17）是板载3.3V稳压器的输出，提供最多50mA的小电流。如果你需要为外部电路提供超过50mA的电流，则应使用外部电源。我将在本书后面介绍如何制作一个外部电源。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The I/O pins on the Raspberry Pi operate at 3.3V levels. Connecting voltages
    higher than this to the pins could irreversibly damage your Pi. If you follow
    the instructions in this book, then everything should be fine, but randomly connecting
    things to your Pi that use lots of power will break it!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派上的I/O引脚工作在3.3V电平上。如果将高于此电压的电压接入引脚，可能会永久性损坏你的Pi。如果你遵循本书中的说明，一切应该没问题，但随机连接消耗大量电力的设备会损坏它！
- en: Getting acquainted with the GPIO
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉GPIO
- en: Before we embark on connecting lots of things to our Pi board, it might be a
    good idea to just get acquainted with the GPIO through a couple of simple projects
    that will help us understand how to interact with the digital I/O pins using shell
    scripts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将许多东西连接到我们的Pi板之前，最好先通过一些简单的项目熟悉一下GPIO，这将帮助我们理解如何使用Shell脚本与数字I/O引脚交互。
- en: Let there be light
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让这里有光
- en: This simple little project shows how to connect a GPIO output to an LED, and
    switch it on and off using shell commands.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的小项目演示了如何将GPIO输出连接到LED，并使用Shell命令打开和关闭它。
- en: 'The following diagram shows how to connect up the circuit using a breadboard:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了如何使用面包板连接电路：
- en: '![Let there be light](img/B04579_02_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![让这里有光](img/B04579_02_02.jpg)'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The pretty diagram that you just saw was produced using a free software tool
    from fritzing, which is an open-source hardware initiative to make electronics
    accessible as creative material for anyone. Download it from [fritzing.org](http://fritzing.org).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚看到的漂亮电路图是使用fritzing这个免费软件工具制作的，fritzing是一个开源硬件项目，旨在使电子学成为任何人都可以用作创意材料的领域。你可以从[fritzing.org](http://fritzing.org)下载它。
- en: The LED anode (the positive side) is connected to the **D0** digital I/O (pin
    11 of the connector or GPIO17). When this pin is switched on, it will provide
    a 3.3V supply to the LED.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: LED的阳极（正极）连接到**D0**数字I/O（连接器的第11针或GPIO17）。当该引脚被打开时，它将为LED提供3.3V电源。
- en: The LED is connected to the Ground pin via a 220R resistor on the cathode (negative
    side). The resistor limits the voltage to the LED and the current through it,
    otherwise it would burn out, as you can only supply up to about 2V to LEDs. With
    a current of around 10mA being drawn by the LED on a 3.3V supply, a 220R resistor
    works well to protect both it and the GPIO.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: LED通过一个220R的电阻与接地引脚连接，电阻连接在阴极（负极）上。电阻限制了LED的电压和电流，否则它会烧坏，因为LED只能承受约2V的电压。对于一个3.3V供电，LED的电流大约为10mA，220R的电阻可以很好地保护LED和GPIO。
- en: 'Here''s the circuit diagram for it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的电路图：
- en: '![Let there be light](img/B04579_02_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![让这里有光](img/B04579_02_03.jpg)'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Calculating LED Resistor Values…**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**计算LED电阻值…**'
- en: While this book is not really a course on electronics theory, I thought it would
    be handy to show you how to work out the resistor values for LEDs using Ohms Law,
    as we'll be covering this again later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书并不是一本电子学理论课程，但我觉得展示如何使用欧姆定律计算LED的电阻值会很有用，因为我们稍后还会涉及这个内容。
- en: As I mentioned, a typical LED will drop about 2V across it, although this varies
    according to color and type. This is called the forward voltage of the device
    or VLED.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，一个典型的LED在其两端会有约2V的电压降，尽管这取决于颜色和类型。这被称为设备的正向电压或VLED。
- en: The current required by an LED is around 10mA, again depending on its specification.
    We'll call this current flowing through the LED, ILED.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个LED所需的电流大约为10mA，同样这取决于它的规格。我们称流过LED的电流为ILED。
- en: Essentially, the voltage across the resistor will be the supply voltage minus
    the voltage drop across the LED (for example,.2V). So, if we have a 12V supply
    (VS), the voltage across the resistor will be 10V (VS – VLED).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，电阻上的电压将是供电电压减去LED的电压降（例如，2V）。所以，如果我们有一个12V的电源（VS），电阻上的电压将是10V（VS – VLED）。
- en: 'According to Ohms Law, the resistance R is the voltage across it divided by
    the current flowing through it: R = V / I. As we require 10mA flowing through
    it, with a voltage of 10V across it, the resistance required is 10V divided by
    0.01A, which is 1,000 ohms or 1K.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 根据欧姆定律，电阻R是它两端的电压除以流过它的电流：R = V / I。由于我们需要10mA的电流流过它，且两端电压为10V，因此所需的电阻值为10V除以0.01A，即1000欧姆或1K。
- en: In summary, R = (VS-VLED) / ILED.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，R = (VS - VLED) / ILED。
- en: 'Now, to turn the LED on and off: the GPIO pins are actually mapped as devices
    in the Linux file system, so using shell commands is easy, although there are
    many libraries available out there that allow you to control the GPIO using Python,
    for example. However, so that you don''t have to learn a new language, we''re
    going to do everything using shell commands.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，来控制LED的开关：GPIO引脚实际上在Linux文件系统中被映射为设备，所以使用Shell命令非常简单，尽管有很多库可以让你使用Python等语言控制GPIO。但为了避免学习新语言，我们将通过Shell命令完成所有操作。
- en: 'The **D0** pin that we are connected to is actually GPIO17 as far as the Raspberry
    Pi is concerned (take a look at the previous diagram for reference). The first
    thing we need to do is create file access to this GPIO pin. We do this with the
    following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接的**D0**引脚实际上是GPIO17（参考前面的图示）。我们需要做的第一件事是创建对这个GPIO引脚的文件访问。我们可以通过以下命令实现：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then have to set the pin''s direction to out:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将引脚的方向设置为输出：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next we can switch the pin on to turn the LED on:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将引脚设置为高电平，打开LED：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To switch the LED off, we use this command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭LED，我们使用这个命令：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we''ve finished with a GPIO port we can remove its file access:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成GPIO端口的操作，就可以移除它的文件访问：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Getting flashy…
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始闪烁…
- en: We can put these commands together in a single Bash script to create a flashing
    LED. To create the flashy script, create a new text file in **nano** or some other
    text editor. Or, as I usually do (don't forget that I'm quite lazy), create the
    text file on your laptop, and then copy it to the remote Pi using **WinSCP** (although,
    read my note in the box that follows if you want to prevent some heartache).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些命令组合成一个Bash脚本来创建一个闪烁的LED。要创建闪烁脚本，请在**nano**或其他文本编辑器中创建一个新的文本文件。或者，如我通常做的那样（别忘了我有点懒），在你的笔记本上创建文本文件，然后通过**WinSCP**将其复制到远程树莓派上（如果你希望避免一些麻烦，请阅读下面的注释）。
- en: 'The following is the code listing for `led-flash.sh`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`led-flash.sh`的代码列表：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注：
- en: If you use Windows to create your files, remember to save your files with the
    end-of-line format being Linux (a single `0x0a` or Line Feed character) rather
    than Windows (`0x0a + 0x0d` or Line Feed + Carriage Return characters), otherwise
    you might find that your Bash script does not run properly on the Raspberry Pi.
    Text editors on Windows, such as the excellent Notepad++, will convert your script
    line ends for you.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows来创建文件，请记得将文件保存为Linux格式的行尾（即单个`0x0a`或换行符字符），而不是Windows格式（`0x0a +
    0x0d`或换行符加回车符），否则你可能会发现Bash脚本在树莓派上运行不正常。Windows上的文本编辑器，如优秀的Notepad++，会自动将脚本的行尾格式转换成Linux格式。
- en: 'Run the script by calling `led-flash.sh` (assuming that''s what you''ve called
    it). If you''re in the same directory as the script, this can be done by typing
    the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`led-flash.sh`来运行脚本（假设你把它命名为这个）。如果你与脚本位于同一目录下，可以通过输入以下命令来执行：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since this is an endless loop with the LED flashing on and off at half second
    intervals, you'll need to break out of it by using *CTRL* + *C* to stop the script.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个无限循环，LED在半秒间隔内闪烁，你需要通过使用*CTRL* + *C*来中断它，从而停止脚本。
- en: 'Don''t forget to remove the GPIO pin from file access by using the following
    command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了使用以下命令将GPIO引脚从文件访问中移除：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Otherwise, you'll see the error, `echo:` `write` `error:` `Device` `or` `resource`
    `busy`, if you re-run the script, as the first line tries to set GPIO17 for file
    access again.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果你重新运行脚本，你会看到错误信息：`echo:` `write` `error:` `Device` `or` `resource` `busy`，因为第一行再次尝试为GPIO17设置文件访问。
- en: Adding a switch
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加开关
- en: In this project, we'll see how to connect a switch to a GPIO input and write
    a shell script to read the state of the switch—that is, whether it's switched
    on or off.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将看到如何将开关连接到GPIO输入，并编写一个Shell脚本来读取开关的状态——也就是说，判断它是开启还是关闭。
- en: 'Connect a switch to your Pi''s GPIO27 pin, as shown in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将开关连接到你的树莓派的GPIO27引脚，如下图所示：
- en: '![Adding a switch](img/B04579_02_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![添加开关](img/B04579_02_04.jpg)'
- en: Pulling yourself together
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 振作起来
- en: A really important thing to realize about GPIO inputs is that they are in what's
    called a *floating state*. This means that, as far as the operating system is
    concerned, it doesn't know what its reference state is unless it is presented
    with a known voltage.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 关于GPIO输入，有一点非常重要：它们处于所谓的*浮空状态*。这意味着，对于操作系统来说，除非它接收到已知电压，否则无法确定其参考状态。
- en: This is where our resistor comes into play—it pulls up the GPIO pin to a known
    voltage of 3.3V, which gives it a default state of HIGH (or binary `1`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们电阻发挥作用的地方——它将GPIO引脚拉至已知电压3.3V，从而使其默认状态为高电平（或二进制`1`）。
- en: When the pushbutton switch is pressed, this takes the GPIO pin to 0V, which
    is a LOW state (or binary `0`).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮开关被按下时，它会将GPIO引脚拉至0V，即低电平（或二进制`0`）。
- en: 'Here''s the circuit diagram for our GPIO switch:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们GPIO开关的电路图：
- en: '![Pulling yourself together](img/B04579_02_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![整理一下自己](img/B04579_02_05.jpg)'
- en: The detection script
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测脚本
- en: Now that we've connected the switch to our Raspberry Pi, we need to write a
    little script that will detect when the switch has been pushed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将开关连接到树莓派，我们需要编写一个小脚本来检测开关是否被按下。
- en: It's similar to the previous LED script shown, but this time we'll set the GPIO
    pin as an input and read its logic level.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前显示的LED脚本类似，但这次我们将GPIO引脚设置为输入并读取其逻辑电平。
- en: 'In this project, we''ve connected our switch to **D2**, which is **GPIO27**
    (again, refer to the earlier GPIO pin-out diagram). As before, we need to create
    file access for the pin by entering the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将开关连接到**D2**，即**GPIO27**（请参考之前的GPIO引脚图）。与之前一样，我们需要通过输入以下命令为引脚创建文件访问权限：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And now, set its direction to `in`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将它的方向设置为`in`：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''re now ready to read its value, and we can do this with the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好读取它的值了，可以使用以下命令来完成：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You'll notice that it will have returned `1`, or a high state. This is because
    of the pull-up resistor we were talking about earlier. This means that its default
    state, when the switch isn't pushed, is high.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到它将返回`1`，或者说是高电平。这是由于我们之前提到的上拉电阻。意味着它的默认状态是高电平，当开关没有按下时。
- en: When the switch is pushed, the value should be read as `0` or low. If you have
    more than two hands, you can try this by pushing the button and re-running the
    command. Or, we can just create a script to poll the switch state.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当开关按下时，值应该读取为`0`或低电平。如果你有超过两只手，可以试试按下按钮并重新运行命令。或者，我们可以创建一个脚本来轮询开关状态。
- en: 'The code listing for `poll-switch.sh` is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`poll-switch.sh`的代码清单如下：'
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you run the script and then push the button, you should see `You've pushed
    my button` scrolling up the console screen until you stop pressing it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行脚本并按下按钮时，你应该会看到`你按下了我的按钮`在控制台屏幕上滚动，直到你停止按下按钮。
- en: 'Don''t forget that, once we''ve finished with the GPIO port, we can remove
    its file access:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了，在完成GPIO端口的使用后，我们可以删除它的文件访问权限：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We've now seen how to easily read a switch input, and the same circuit and script
    can be used to read other sensors, such as door contact switches, reed switches,
    or anything else that has an on and off state.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了如何轻松读取开关输入，使用相同的电路和脚本可以读取其他传感器，例如门接触开关、簧片开关，或者任何其他具有开关状态的设备。
- en: The most elaborate light switch in the world
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 世界上最精密的灯光开关
- en: By combining the two little projects earlier, we can now create a system that
    will do something useful when the pushbutton switch is pushed—for example, switching
    on the LED that we also have connected. Granted, we could just connect the LED
    directly to the switch and a battery, but not only would that be boring, it would
    defeat the point of what we're trying to do, which is programmatically sensing
    and controlling things.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将之前的两个小项目结合起来，我们现在可以创建一个系统，当按下按钮开关时执行一些有用的操作——例如，点亮我们也连接的LED。虽然我们可以直接将LED连接到开关和电池，但那样不仅无聊，而且也违背了我们要做的事情的意义，那就是通过编程感知和控制事物。
- en: 'Here''s the breadboard layout for our elaborate light switch:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们精密灯光开关的面包板布局：
- en: '![The most elaborate light switch in the world](img/B04579_02_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![世界上最精密的灯光开关](img/B04579_02_06.jpg)'
- en: 'And here''s the circuit diagram:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是电路图：
- en: '![The most elaborate light switch in the world](img/B04579_02_07.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![世界上最精密的灯光开关](img/B04579_02_07.jpg)'
- en: The illuminating script
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 照明脚本
- en: Our full Bash script for our elaborate light switch is demonstrated next. This
    will loop endlessly, detecting the state of the switch GPIO pin, and will turn
    on the LED GPIO pin when the switch is pushed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的完整Bash脚本将展示如何控制精密灯光开关。该脚本将无限循环，检测开关的GPIO引脚状态，并在按下开关时打开LED GPIO引脚。
- en: 'The code listing for `light-switch.sh` is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`light-switch.sh`的代码清单如下：'
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So, here we are—we have a script that will detect an input state and do something
    in response; in this case, it will switch on an LED. We're now forming the basis
    of how we are going to put together our home security system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们有了一个脚本，它可以检测输入状态并做出响应；在这种情况下，它将打开一个 LED。我们现在正在构建如何组合我们的家庭安全系统的基础。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, don't connect anything to your Raspberry Pi in place of the LED, such
    as a buzzer or any other device that consumes lots of current. This is likely
    to irreversibly render your board dead. We'll look at ways, later on in this book,
    to control devices with higher power requirements.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，不要在 LED 位置上连接任何设备，例如蜂鸣器或其他大量消耗电流的设备。这可能会永久性地损坏你的板子。我们将在本书后面部分探讨如何控制需要更高功率的设备。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced various ways to connect your Raspberry Pi to
    the outside world by looking at the various interfaces available on the GPIO.
    We've understood how to connect things to the digital pins on your Raspberry Pi's
    GPIO connector, and control and read them using simple Bash scripts. In particular,
    we've safely and properly connected a switch to a digital input pin, which will
    form the foundation for our home security detection circuits.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了通过查看 GPIO 上可用的各种接口，将 Raspberry Pi 连接到外部世界的不同方法。我们了解了如何将设备连接到 Raspberry
    Pi GPIO 连接器上的数字引脚，并使用简单的 Bash 脚本进行控制和读取。特别是，我们已经安全且正确地将开关连接到数字输入引脚，这将为我们的家庭安全检测电路奠定基础。
- en: In the next chapter, we'll look at ways to expand the number of things we can
    connect to our Raspberry Pi, overcoming the limitation of having just the 8 digital
    pins available to us on the GPIO by tapping into other interfaces on the GPIO
    and building our own input/output expansion board.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何扩展我们可以连接到 Raspberry Pi 的设备数量，通过利用 GPIO 上其他接口，并构建我们自己的输入/输出扩展板，克服只有
    8 个数字引脚可用的限制。
