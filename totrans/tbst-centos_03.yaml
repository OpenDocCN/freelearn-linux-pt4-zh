- en: Chapter 3. Troubleshooting the Network Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章 网络环境故障排除
- en: From ghost connections to packet errors, stream failures and connectivity errors
    to missing routes, troubleshooting a network environment can be a slow and arduous
    process that typically begins with the physical layer. However, once you have
    confirmed that the physical nodes are working, the next step is to consider and
    consult the many tools available to your system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从幽灵连接到数据包错误，从流失败到连接错误，再到缺少路由，故障排除网络环境可能是一个缓慢且艰难的过程，通常从物理层开始。然而，一旦你确认物理节点正常工作，下一步就是考虑和查阅你系统中可用的各种工具。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Discover the basic tools that will help you troubleshoot a variety of issues
    related to the network environment. This discussion will include a round-trip
    tour of `ping`, `dig`, `host`, `traceroute`, and `mtr`.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解一些基本工具，这些工具将帮助你排查与网络环境相关的各种问题。本讨论将涵盖 `ping`、`dig`、`host`、`traceroute` 和 `mtr`
    的详细使用。
- en: Discover how to monitor network connections with the `ss` command.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何使用 `ss` 命令监控网络连接。
- en: Learn how to investigate packet transmissions with `tcpdump`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 `tcpdump` 检查数据包传输。
- en: Using ping, dig, host, traceroute, and mtr
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ping、dig、host、traceroute 和 mtr
- en: Some of the most common tools available to a troubleshooter are `ping`, `dig`,
    `host`, `traceroute`, and `mtr`. Used collectively, these tools provide the troubleshooter
    with the evidence they need to make a judgment call with respect to almost any
    network-based issue. This is the basis of the network toolkit, but having said
    this, it is important to realize that these commands are used for different purposes,
    and for this reason, we will approach them individually.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除员最常用的一些工具有 `ping`、`dig`、`host`、`traceroute` 和 `mtr`。将这些工具一起使用，可以为故障排除员提供做出判断所需的证据，几乎可以解决任何网络相关的问题。这是网络工具包的基础，但需要强调的是，这些命令用于不同的目的，因此我们将分别介绍它们。
- en: The ping command
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ping 命令
- en: The `ping` command is a small utility that can be used to ascertain whether
    or not a specific IP address can be reached. The `ping` command is common to most
    computer systems, and it enables you to query an IP address or a fully qualified
    domain name in order to check whether there is an available connection.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping` 命令是一个小型工具，可以用来确定是否可以访问特定的 IP 地址。`ping` 命令在大多数计算机系统中都是常见的，它允许你查询 IP 地址或完全限定的域名，以检查是否有可用的连接。'
- en: 'The basic syntax of the `ping` command is as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping` 命令的基本语法如下：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ping` command works by issuing an ICMP echo request to a specified destination
    in order to verify and check network connectivity, and it is the simplicity of
    this statement that makes this command such a useful tool when diagnosing any
    network-based connectivity issue.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping` 命令通过向指定的目标发出 ICMP 回显请求来验证和检查网络连接，正是这一简单的命令使其成为诊断任何基于网络的连接问题时非常有用的工具。'
- en: 'For example, if you were to issue a ping request to Google (`# ping google.com`),
    then, depending on your networking environment and conditions, the output will
    look similar to this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你向 Google 发出 ping 请求（`# ping google.com`），那么根据你的网络环境和条件，输出将类似于以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These results are an illustration of a successful ping, and it can be described
    as the journey of an echo request issued by a local computer system to `google.com
    (216.58.210.14)`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果展示了一个成功的 ping，可以描述为一个本地计算机系统向 `google.com (216.58.210.14)` 发出的回显请求的旅程。
- en: The request begins on the host computer; it is then sent over the local network
    and finally across the Internet. Once the request is successfully received, the
    target will then respond and the time taken to complete this process is measured
    in order to generate an average response or latency time. However, if there is
    no response, then it is likely that there is either a physical problem on the
    network itself, a fundamental issue such as the location is incorrect or non-functional,
    the target machine not honoring a ping request, or that the host routing table
    is incorrect.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请求从主机计算机发起，然后通过本地网络传送，最后经过互联网。一旦请求成功接收，目标将进行响应，并且测量完成此过程所需的时间，以生成平均响应或延迟时间。但是，如果没有响应，则很可能是网络本身存在物理问题，或者是一些基本问题，如位置不正确或不可用，目标计算机未响应
    ping 请求，或者主机路由表错误。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In online computer games, a ping request (also referred to as a "high ping"
    or "low ping") is typically associated with the measurement of speed from the
    local machine to the external game server. For example, a player with a low ping
    (10 ms for example) will have a better gaming experience than a player with a
    180 ms ping.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you should also be aware that, if you have a high ping of over 500ms,
    then it means that any request is taking over half a second to get to the server
    and back. This condition is noticeable as you will probably be experiencing "frame
    jitters" or "frame jumps"—a phenomenon known as "rubber banding" in the world
    of online gameplay.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The `ping` command is simple to use, but in its naked form, it will continue
    to execute until it is cancelled. In certain situations, this may prove useful,
    but it is generally easier to invoke the `-c` option in order to reduce the number
    of echo requests made and to be provided with a summary of the event.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you wanted to restrict the number of echo requests made to
    4, you need to type the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding example, the `ping` command will stop issuing echo requests
    after 4 cycles, and based on our previous example, the output will look similar
    to this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, just before we finish this introduction to the `ping` command, there are
    a few points regarding any ping requests that should be considered. These points
    may not necessarily represent a problem, but they will influence the results of
    a ping test:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Distance to the target**: Let''s say you live in the U.S., and you try to
    connect to a server in the EU. In this situation you should expect that the ping
    would be higher than if you tried to connect to an alternative U.S. server that
    is closer to you geographically. Further to this, you should expect that there
    could be speed differences across the various geographical locations.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Internet connection speed**: If you have a low-bandwidth Internet connection
    (that is, with a poor upload and download speed rating), the ping will take longer
    to come back to you than if you have a high-bandwidth broadband connection (that
    is, with a good upload and download speed rating).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The hop count**: The hop count is a generic term that refers to the route
    and servers the ping has to take to reach the destination and back. So, just like
    it is in the real world, if you live far away from the main train line, you will
    need to make additional "connections" or "hops" in order to reach the final destination.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic principle always states that a low ping is always desirable as it
    is critical for time-based instructions. However, when conducting a ping test,
    you must not only consider the total number of pings that actually made it to
    the target site, but you should also carefully note the average and standard deviation
    of the pings in question.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at it this way: if the pings do not arrive, this may indicate that there
    could be packet loss due to an unreliable Internet connection between your computer
    and the destination. However, if the ping rate is low but it shows a widening
    variable rate over a specific time period, then under certain circumstances, this
    type of environment is not always preferable when compared to a more constant
    rate during the same time period.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The dig and host commands
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `dig` command can be used to verify DNS mappings, Internet connectivity,
    host addresses, and MX records, and to discover more about any potential reverse
    DNS issues that can give rise to spam and blacklisting. Made available through
    the `bind-utils` package, the information supplied by `dig` is available in four
    main parts. This includes a header section (a list of the options used), a question
    section (the query type), the answer section (the address of the location in question),
    and the query section (containing statistical information regarding the query
    time, nameservers, and more). The `dig` command was introduced to replace `nslookup`
    and the basic syntax is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The results will look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will notice that there is a lot of information contained within such output,
    so let''s break this down by starting with the global options section:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is then followed by an output that reports on the answer:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Following this, `dig` then repeats the original question:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The answer is provided as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we are presented with some general statistics about the query itself:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, by replacing `XXX.XXX.XXX.XXX` with a relevant IP address, you can query
    a specific nameserver like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, if you run the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can expect to see the following results:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Moreover, where the default action of the `dig` command is to search for `A`
    records, you can manipulate the `dig` syntax in order to obtain information based
    on a specific record type as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As an alternative, and in order to generalize the results, you can implement
    the `ANY` query in order to obtain as much information as possible by typing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Further to this, the `dig` command can be used to implement a reverse lookup
    in order to obtain relevant DNS information based on a specific IP address.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved by typing:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command will subsequently respond with an answer in the following
    way:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So, as you can see, `dig` is a flexible command-line tool that will enable
    you to perform a valid DNS query. Its output is verbose, but it can be encapsulated
    with the `+short` switch to provide a reduced and concise answer like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The above command should respond in the following way:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `dig` command is an incredibly useful tool for troubleshooting a network,
    and its success is primarily associated with its ability to return the question,
    answer, authority, and additional sections.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'However, and having said that, the alternative is to use the `host` command
    in the following way:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `host` command works in a similar way to the `dig` command but its output
    looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, the `host` command serves a similar purpose to `dig` and yet
    it is far more succinct.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a basic `host` query will be as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The returned output will look like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Alternatively, you can specify a third-party DNS server in the following way:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of this will report on the use of an alternative DNS server and
    look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, `host` can perform reverse lookups like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'So, let''s say you run a reverse lookup against Red Hat''s Akamai Edge server
    with the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So look at it this way: for the purpose of troubleshooting a network, you can
    use either `dig` or `host`. Both of the commands are similar in terms of what
    they can be used for and what they can achieve, but where `host` offers simplicity,
    `dig` serves to provide a more advanced and script-worthy option.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The traceroute command
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `traceroute` command is designed to show the pathway to a remote destination
    and the delays that occur at every stop. Most administrators are familiar with
    `traceroute` and it maintains three primary objectives that can be summarized
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: To provide details of the entire path that a packet will traverse
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide the names and the identity of the devices and routers found on that
    path
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To report on network latency as a result of assessing the time taken to send
    and receive data to each device on a given path
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In simple terms, the `traceroute` command is a tool that verifies the path
    your data will take without using any data, and the syntax used is based on the
    following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output will provide the specified host, the IP address for that domain,
    the maximum number of hops required, and the size of the packet that will be used.
    The subsequent lines then report the hop number, hostname, IP address, and packet
    round-trip times. Of course, you can also avoid reverse DNS with the use of the
    `-n` option in the following way:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `traceroute` command sends three packets with each TTL and will display
    the round-trip time (RTT), which indicates the time difference between the issuing
    of a probe and the receipt of a response packet. This is useful in discovering
    network bottlenecks, and if you begin to see asterisks (*), then this suggests
    that there is a potential problem routing to that host as the asterisks can indicate
    packet loss or a dropped packet. However, it is also important to realize that
    interpreting `traceroute` can rely on an understanding and appreciation of its
    inherent quirks.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The `traceroute` command is recognized to be the cornerstone of TCP/IP troubleshooting.
    It begins by issuing a UDP-based packet with a TTL value of 1\. If the packet
    reaches the target, then the gateway sends a response packet and reports its findings.
    However, if the packet does not reach the target, then the recipient gateway will
    decrease the TTL by the value of 1\. If the TTL value reaches 0, then the gateway
    will drop the packet and report the results after a new packet is issued with
    an increased value in order to circumvent the same gateway in the next phase.
    This process is repeated until the target host is reached or the maximum TTL value
    is reached.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: There are three different types of `traceroute` implementation that cover UDP,
    TCP, and ICMP.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you wanted to use the ICMP variation, you will type:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Again, you can bypass DNS with the `–n` option like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This variation will work in a manner similar to the previous examples that use
    UDP in which the `traceroute` program will send echo requests, and the hops in
    between will reply. However, unlike the UDP version, the process will use ICMP.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The final way is to use a TCP variation in the following way:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In many respects, the TCP option is probably the most effective method, as most
    networks will allow for this traffic. This is particularly so if you are targeting
    port 80\. However, there are no hard and fast rules to determine which version
    of `traceroute` you can or want to use. The rules will be set by the network configuration,
    as some networks will block UDP requests by default (typically, ports 33434 to
    33534). So, based on this, why not try them all and see what provides the best
    results for your environment.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at it this way: knowing how `traceroute` works is winning only
    half the battle. If `traceroute` can reach the host, but not the target, then
    it is likely that the issue is with the target. However, if `traceroute` cannot
    reach the host, then it is likely that the issue lies with the route itself, which
    not only consists of some routers denying `traceroute` packets, but others that
    show remarkable differences in bandwidth and latency, firewalls, and a whole host
    of other traps that are filtering `traceroute` packets. In this situation, multiple
    targets should be selected (you should also consider sending your requests using
    UDP, ICMP, and TCP to circumvent any network issues), and given that the Internet
    is asymmetric by nature, it is generally a good idea to perform a `traceroute`
    action in both directions in order to judge the overall network efficiency.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: On the whole, `traceroute` is an excellent tool, but it can be misleading, so
    be cautious in analyzing the results and always supplement your work with additional
    investigation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The mtr command
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an alternative to `traceroute`, there is the `mtr` command. On some Linux
    systems, you will need to run this as the root user or in conjunction with `sudo`,
    but whatever method you use, the syntax of this command is very simple and it
    works in the following way:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`traceroute`的替代方案，有`mtr`命令。在某些Linux系统上，你需要以root用户身份运行此命令，或者与`sudo`一起使用，但无论你使用哪种方法，该命令的语法非常简单，并按如下方式工作：
- en: '[PRE34]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output may look similar to `traceroute`, but the display is in real-time,
    thereby enabling you to monitor trends and averages to reflect how network performance
    changes over time. So unlike `traceroute`, instead of merely taking a snapshot
    of a single journey, by using `mtr` you are able to check for intermittent packet
    issues by gathering data over a longer period of time. Moreover, as an alternative
    to real-time updates, `mtr` will also provide a reporting option that will issue
    the results of 10 packets to each hop encountered:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能类似于`traceroute`，但显示是实时的，从而使你能够监控趋势和平均值，反映网络性能随时间的变化。因此，与`traceroute`不同，`mtr`通过收集更长时间的数据，不仅能简单地拍摄一次旅程的快照，还能检查间歇性的数据包问题。此外，作为实时更新的替代方案，`mtr`还将提供一个报告选项，向每个遇到的跳点发出10个数据包的结果：
- en: '[PRE35]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: So, upon reflection, it can be argued that `mtr` is superior to `traceroute`
    at monitoring network connectivity. It certainly has many advantages and it can
    provide a significant amount of detail, but knowing that you cannot control how
    the world will work outside your internal network, the seasoned troubleshooter
    should always remain vigilant and choose to examine every tool at his disposal.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，经过反思，可以认为`mtr`在监控网络连接方面优于`traceroute`。它确实有许多优点，并且可以提供大量细节，但考虑到你无法控制外部网络的工作方式，经验丰富的故障排除人员应始终保持警觉，并选择检查所有可用的工具。
- en: Monitoring network connections with the ss command
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`ss`命令监控网络连接
- en: The socket statistics command (`ss`) is the successor to `netstat`; it is not
    only faster, but it is also able to display more information. However, unlike
    `netstat`, which obtains its information from the various files contained within
    the `/proc` directory, the `ss` command obtains its information directly from
    the kernel space.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字统计命令（`ss`）是`netstat`的继任者；它不仅更快，而且能够显示更多的信息。然而，与通过`/proc`目录中的各种文件获取信息的`netstat`不同，`ss`命令直接从内核空间获取信息。
- en: 'The basic syntax of the `ss` command is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`ss`命令的基本语法如下：'
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Using this syntax, we have simply called for an output of all TCP, UDP, and
    Unix socket connections with an optional pipe to `less` in order to ensure that
    the results can be seen on screen. Of course, this command can be combined with
    either the `-t`, `-u` or, `-x` option to restrict any output to show either TCP,
    UDP, or Unix socket connections respectively, but in order to make the output
    more informative, you will probably want to combine one of these additional options
    with the `-a` option in order to report on both connected and listening sockets
    like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种语法，我们只是调用了所有TCP、UDP和Unix套接字连接的输出，并可选择通过管道将其发送到`less`，以确保结果可以在屏幕上查看。当然，您可以将此命令与`-t`、`-u`或`-x`选项结合使用，以限制输出仅显示TCP、UDP或Unix套接字连接，但为了使输出更加信息丰富，你可能想要将这些附加选项与`-a`选项结合使用，以报告连接和监听套接字，如下所示：
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you will notice, in the preceding instance we are only reporting on the
    current TCP environment and it can be changed to suit UDP (`ss -ua`) or Unix socket
    connections (`ss -xa`) in a similar way. However, if you enjoy a degree of precision,
    you will be comforted to know that the `ss` command can be combined with a query
    by using the `–A` option like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，在前面的例子中，我们只报告了当前的TCP环境，可以通过类似的方式将其更改为适用于UDP（`ss -ua`）或Unix套接字连接（`ss
    -xa`）。然而，如果你喜欢一定程度的精确性，你会欣慰地知道，`ss`命令可以通过使用`–A`选项与查询结合使用，如下所示：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Restricting the output does serve to make the information far more concise,
    but to take this one stage further, additional filters can be applied using the
    following syntax:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 限制输出确实能使信息更加简洁，但要进一步提升，可以使用以下语法应用附加的过滤器：
- en: '[PRE39]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For example, where all standard TCP states are accounted for, you can display
    all established IPv4 TCP sockets in the following way:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑到所有标准的TCP状态，你可以以下列方式显示所有已建立的IPv4 TCP套接字：
- en: '[PRE40]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You can show all closed TCP states like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样显示所有关闭的TCP状态：
- en: '[PRE41]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now, it can be argued that using the `ss` command will perform in a similar
    way to using `netstat -a`. This in part is true, but (and remember that you can
    replace `-t` with `-u` or `-x`) given the ability to increase the speed of execution
    by not resolving hostnames (`ss -nt`), show only listening sockets (`ss -ltn`),
    show socket memory usage (`ss -t -m`), show processes using particular sockets
    (`ss -t -p`), print the process name (`ss -ltp`), display either IPv4 or IPv6
    (`ss -tl4` or `ss -tl6`), and show time information (`ss -tn -o`), you will notice
    that we have merely scratched the surface of the `ss` command.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can even run a query to discover who was using port 22 (SSH)
    by using the following syntax:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Alternatively, you can use the following syntax to show all ports connected
    from a remote IP address:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then filter the query to a specific port with the following variation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Remember, familiarity with your networking environment will always help, and
    armed with this command, you should be in a better position to recognize problematic
    connections before they take hold.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Packet analysis with tcpdump
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `tcpdump` command is a packet analyzer that is able to capture and provide
    a description of the traffic being transmitted across a network interface. It
    is common to most flavors of Linux, and it provides access to a unique view of
    the network at the packet level that can prove vital when troubleshooting the
    network environment.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for using `tcpdump` is expressed in the following way:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can also specify a protocol like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'While a port value can be used in the following way:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Verbosity options can be issued by using `-v` or `-vv`, while DNS can be avoided
    with the `-n` option. However, because `tcpdump` will continue running until the
    request is cancelled, it is always preferable to use the `-c` option in order
    to capture a pre-determined number of events in the following way:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Taking this one step further, you can capture `10` packets from a specific
    IP address by calling either the `src` option (source) or the `dst` option (destination)
    like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'While the device name itself can be obtained by running the following option:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `tcpdump` command can be run in both the read and write modes. However,
    where the latter implies the use of the `-w` option that will cause `tcpdump`
    to save the packet data to a file for later analysis, the former, signified by
    the use of the `-r` option, will determine that `tcpdump` will read from a saved
    packet file only. As you will come to realize, when in the write mode you should
    specify the relevant device name (that is `eth0`), but in both cases, only packets
    that match an expression will be matched and displayed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in read mode, the basic syntax of this commands looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'While in write mode, you can send the entire Ethernet frame for further analysis
    in the following way:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: So as you can see, the most common application of `tcpdump` is to verify whether
    the process of two-way communication is working. The `tcpdump` command can be
    used to record network segments, and while recognizing this fact, we have merely
    scratched the surface of its flexibility.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`tcpdump`最常见的应用是验证双向通信是否正常。`tcpdump`命令可以用来记录网络片段，在认识到这一点后，我们仅仅触及了它灵活性的表面。
- en: For this reason, I hope you can already see how this small utility can become
    an important tool when troubleshooting your networking environment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我希望你能已经看到，当排查你的网络环境问题时，这个小工具可以成为一个重要的工具。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The purpose of this chapter was to provide a starting point when attempting
    to troubleshoot areas of concern across the network environment. Of course, there
    is always more to learn, and knowing this will take you on a journey that goes
    far beyond the basic syntax of `dig`, `ping`, or even `tcpdump`. However, having
    toured a number of commands and utilities, you can now see how becoming an effective
    troubleshooter is quickly becoming an obtainable goal. To further our cause, we
    will now set our sights on the need to troubleshoot package management.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是提供一个起点，以便在尝试排查网络环境中的问题时使用。当然，学习的内容总是有更多，而了解这些将带你踏上远超`dig`、`ping`甚至`tcpdump`基本语法的旅程。然而，通过学习多个命令和工具，你现在可以看到，成为一个有效的故障排除者正变成一个可以实现的目标。为了进一步推动这一目标，我们将把注意力转向包管理的故障排除需求。
- en: References
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'The TCP Wikipedia page: [http://en.wikipedia.org/wiki/Transmission_Control_Protocol](http://en.wikipedia.org/wiki/Transmission_Control_Protocol)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP的维基百科页面：[http://en.wikipedia.org/wiki/Transmission_Control_Protocol](http://en.wikipedia.org/wiki/Transmission_Control_Protocol)
- en: 'The Ping Wikipedia page: [http://en.wikipedia.org/wiki/Ping_(networking_utility)](http://en.wikipedia.org/wiki/Ping_(networking_utility))'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ping的维基百科页面：[http://en.wikipedia.org/wiki/Ping_(networking_utility)](http://en.wikipedia.org/wiki/Ping_(networking_utility))
- en: 'The Traceroute Wikipedia page: [http://en.wikipedia.org/wiki/Traceroute](http://en.wikipedia.org/wiki/Traceroute)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Traceroute的维基百科页面：[http://en.wikipedia.org/wiki/Traceroute](http://en.wikipedia.org/wiki/Traceroute)
- en: 'The `ss` command official page: [http://www.cyberciti.biz/files/ss.html](http://www.cyberciti.biz/files/ss.html)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ss`命令的官方页面：[http://www.cyberciti.biz/files/ss.html](http://www.cyberciti.biz/files/ss.html)'
- en: 'The ARP Wikipedia page: [http://en.wikipedia.org/wiki/Address_Resolution_Protocol](http://en.wikipedia.org/wiki/Address_Resolution_Protocol)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARP的维基百科页面：[http://en.wikipedia.org/wiki/Address_Resolution_Protocol](http://en.wikipedia.org/wiki/Address_Resolution_Protocol)
- en: 'The `dig` command Wikipedia page: [http://en.wikipedia.org/wiki/Dig_(command)](http://en.wikipedia.org/wiki/Dig_(command))'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dig`命令的维基百科页面：[http://en.wikipedia.org/wiki/Dig_(command)](http://en.wikipedia.org/wiki/Dig_(command))'
- en: 'The `tcpdump` Wikipedia page: [http://en.wikipedia.org/wiki/Tcpdump](http://en.wikipedia.org/wiki/Tcpdump)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tcpdump`的维基百科页面：[http://en.wikipedia.org/wiki/Tcpdump](http://en.wikipedia.org/wiki/Tcpdump)'
