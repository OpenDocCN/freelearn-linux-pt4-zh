- en: Creating Code Snippets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建代码片段
- en: Now we can write our conditional tests to make decisions. After your hands become
    faster in coding, you will need to save some code pieces for later use, so how
    to save time and effort when writing scripts?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写条件测试来做出决策。当你的编程速度加快后，你将需要保存一些代码片段以供以后使用，那么在编写脚本时，如何节省时间和精力呢？
- en: If you like using the command line, but also like some of the features associated
    with using graphical **integrated development environments** (**IDEs**), then
    this chapter may reveal some new ideas to you. We can create shortcuts for commonly
    used script elements using the vi or vim text editors from the command line.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢使用命令行，同时又喜欢图形化**集成开发环境**（**IDEs**）的某些功能，那么本章可能会为你揭示一些新思路。我们可以通过 vi 或 vim
    文本编辑器在命令行中创建常用脚本元素的快捷方式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Abbreviations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩写
- en: Using code snippets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码片段
- en: Creating snippets using VS Code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VS Code 创建代码片段
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be downloaded from here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter04](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter04)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter04](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter04)'
- en: Abbreviations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩写
- en: We have already taken one short sojourn into the `~/.vimrc` file and we will
    now revisit this file to look at abbreviations or `abbr` controls. This file acts
    as the run control mechanism for the vim text editor, which is likely to be installed
    on your Linux distribution. Older distributions or Unix variants may have the
    original vi text editor and will make use of the `~/.exrc` file. If you are uncertain
    of the identity of your version of vi and the correct run control file to use,
    simply enter the `vi` command. If a blank page opens, it is indeed vi. However,
    if a new blank document opens with the vim splash screens, then you are using
    the improved vim or vi.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经短暂进入过 `~/.vimrc` 文件，现在我们将重新访问此文件，查看缩写或 `abbr` 控制。此文件作为 vim 文本编辑器的运行控制机制，通常会安装在你的
    Linux 发行版中。较旧的发行版或 Unix 变种可能使用原始的 vi 文本编辑器，并且会使用 `~/.exrc` 文件。如果你不确定自己使用的 vi 版本及正确的运行控制文件，可以简单地输入
    `vi` 命令。如果打开的是一个空白页面，那就是 vi；但如果打开的是一个带有 vim 启动画面的新空白文档，那么你正在使用改进版的 vim 或 vi。
- en: 'Abbreviations allow for a shortcut string to be used in place of a longer string.
    These abbreviations can be set during a vim session from the last line mode but are
    often set in the control file. The shebang can be easily represented by an abbreviation,
    as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写允许用较短的字符串替代较长的字符串。这些缩写可以在 vim 会话的最后一行模式中设置，但通常是在控制文件中设置的。Shebang 可以通过一个缩写轻松表示，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The basic syntax of an abbreviation is shown in the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写的基本语法如下命令所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using this abbreviation, we just need to type `_sh` while in the edit mode.
    On pressing the *Enter* key after the shortcut code, the full text for the shebang
    is printed. In reality, pressing any key after the `abbr` code will expand the
    shortcut, not just pressing the *Enter* key. Simple elements like this can add
    a lot to the experience of using vim as our text editor. The following screenshot
    shows the updated `~/.vimrc` file:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个缩写，我们只需要在编辑模式下输入 `_sh`。按下 *Enter* 键后，shebang 的完整文本将被打印出来。实际上，在 `abbr` 代码后按下任何键都会展开快捷方式，而不仅仅是按
    *Enter* 键。像这样的简单元素可以大大增强使用 vim 作为文本编辑器的体验。以下截图显示了更新后的 `~/.vimrc` 文件：
- en: '![](img/18a71227-66b4-4c86-92c2-be640ebb9c92.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18a71227-66b4-4c86-92c2-be640ebb9c92.png)'
- en: 'We are not limited to the single abbreviation code, as we can add more `abbr`
    entries, for example, to support the shebang for Perl scripts at the line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不限于单一的缩写代码，可以添加更多的 `abbr` 条目，例如支持 Perl 脚本的 shebang 行：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The use of the underscore is not required, but the aim is to keep the shortcut
    code unique and not to have a typed error. We are also not limited to a single
    line, although this is where abbreviations are most used. Consider the following
    abbreviation for an `if` statement:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线的使用不是必须的，但目的是保持快捷代码的唯一性，避免输入错误。我们也不限于单行，尽管缩写通常在单行中使用。考虑以下 `if` 语句的缩写：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Although this does work, the formatting of the `if` statement will not be perfect
    and multiline abbreviations are far from ideal. This is where we may consider
    using code snippets that we have prepared in advance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这样可以工作，但`if`语句的格式将不完美，且多行缩写远非理想。这时，我们可以考虑使用预先准备好的代码片段。
- en: Using code snippets
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码片段
- en: 'All we mean by the term *code snippets* is a prepared code that we can read
    into our current script. This is especially easy with vim being able to read the
    contents of other text files during editing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的*代码片段*指的是可以读取到当前脚本中的预备代码。使用vim特别容易，在编辑时可以读取其他文本文件的内容：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For example, if we need to read the contents of a file called `if` located
    in `$HOME/snippets`, we will use the following key sequences in vim:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们需要读取位于`$HOME/snippets`中的名为`if`的文件内容，我们将在vim中使用以下快捷键：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The contents of this file are read into the current document below the current
    cursor position. In this way, we can make the code snippets as complex as we need
    and maintain the correct indentations to aide readability and consistency.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的内容将在当前光标位置下方读取到当前文档中。这样，我们可以根据需要使代码片段变得复杂，并保持正确的缩进，以帮助提高可读性和一致性。
- en: 'So, we will make it our duty to always create a snippets directory in our `home`
    directory:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的职责是始终在我们的`home`目录中创建一个片段目录：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It is not required to share the directory, so it is good practice to set the
    mode to `700` or private to the user when it is being created.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要共享目录，因此在创建时将模式设置为`700`或设置为用户私有是一种良好的做法。
- en: 'When creating snippets, it is your choice to use a pseudo-code or real examples.
    My preference is to use real examples that are edited to reflect the requirements
    of the recipient script. The contents of a simple `if` snippet will be as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建代码片段时，您可以选择使用伪代码或真实示例。我的偏好是使用经过编辑的真实示例，以反映接收脚本的要求。一个简单的`if`片段的内容如下：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This gives us the layout to create an `if` statement with a practical example.
    In this case, we check to see whether `$1` is unset and send an error to the user
    before exiting the script. The key is in keeping the snippet short to limit the
    changes that need to be made but make it easily understood and expandable as required.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了创建带有实际示例的`if`语句的布局。在这种情况下，我们检查`$1`是否未设置，并在退出脚本之前向用户发送错误。关键是保持片段简洁，以限制所需的更改，同时确保易于理解并根据需要扩展。
- en: Bringing color to the Terminal
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为终端带来颜色
- en: If we are to display text messages to the users and operators executing the
    scripts, we can provide colors to help in message interpretation. Using red as
    a synonym for errors and green to indicate success makes it easier to add functionality
    to our scripts. Not all but certainly a vast majority of Linux Terminals support
    color. The built-in command `echo`, when used with the `-e` option, can display
    color to users.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要向用户和执行脚本的操作员显示文本消息，我们可以提供颜色帮助解释消息。使用红色表示错误，绿色表示成功，可以更容易地为我们的脚本添加功能。并非所有Linux终端，但绝大多数都支持颜色。内置命令`echo`在与`-e`选项一起使用时，可以向用户显示颜色。
- en: 'To display a text in red, we can use the `echo` command as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示红色文本，我们可以使用`echo`命令，如下所示：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows both the code and the output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了代码和输出：
- en: '![](img/3756bd4f-60e1-4b74-a125-7bc0accd7f75.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3756bd4f-60e1-4b74-a125-7bc0accd7f75.png)'
- en: The red text will bring immediate attention to the text and the potential failure
    of the script execution. The use of color in this way adheres to the basic principles
    of application design. If you find the code cumbersome, then simply use friendly
    variables to represent the colors and the reset code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 红色文本将立即吸引注意力，并可能导致脚本执行失败。以这种方式使用颜色符合应用设计的基本原则。如果您觉得代码繁琐，那么只需使用友好的变量来表示颜色和重置代码。
- en: 'In the previous code, we used red and the final reset code to set the text
    back to the shell default. We could easily create variables for these color codes
    and others:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们使用了红色和最终的重置代码，将文本恢复为默认的Shell样式。我们可以轻松地为这些颜色代码以及其他颜色创建变量：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `\033` value is the escape character and `[31m` is the color code for red.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`\033`值是转义字符，`[31m`是红色的颜色代码。'
- en: 'We need to take care while using variables, to ensure that they are properly
    delimited from the text. Modifying the earlier example, we can see how this is
    easily achieved:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用变量时需要小心，确保它们与文本适当地分隔开。修改之前的示例，我们可以看到如何轻松实现这一点：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We use the brace brackets to ensure that the `RED` variable is identified and
    separated from the `Error` word.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用大括号确保`RED`变量被识别并与`Error`字样分开。
- en: 'Saving the variable definitions to the `$HOME/snippets/color` file will allow
    them to be used in other scripts. Interestingly, we don''t need to edit this script;
    we can use the command `source` to read these variables definitions into the script
    at runtime. Within the recipient script, we need to add the following line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量定义保存到`$HOME/snippets/color`文件中，这样它们就可以在其他脚本中使用。有趣的是，我们不需要编辑这个脚本；可以使用`source`命令在运行时将这些变量定义读取到脚本中。在接收脚本中，我们需要添加以下行：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using the shell built-in `source` command will read the color variables into
    the script that is executing at runtime. The following screenshot shows a modified
    version of the `hello5.sh` script that we now call `hello7.sh`, which makes use
    of these colors:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 shell 内建的`source`命令会在脚本运行时将颜色变量读取到正在执行的脚本中。以下截图展示了一个修改版的`hello5.sh`脚本，我们现在将其称为`hello7.sh`，它使用了这些颜色：
- en: '![](img/9aa3334f-1525-472a-86f4-10a53c330ed5.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa3334f-1525-472a-86f4-10a53c330ed5.png)'
- en: 'We can see the effect this has when we execute the script. In the following
    screenshot, you will see the execution and output both with and without a supplied
    parameter:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行脚本时，可以看到这个修改的效果。在下图中，你将看到提供与不提供参数时的执行和输出：
- en: '![](img/71142b64-9bff-498c-82f2-2c13189ee3bf.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71142b64-9bff-498c-82f2-2c13189ee3bf.png)'
- en: We can easily identify the success and failure of the script through the color-coded
    output; the green `Hello fred` where we supply the parameter, and the red `Usage`
    statement where we have not provided the required name.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过颜色编码的输出轻松识别脚本的成功与失败；绿色的`Hello fred`表示我们提供了参数，而红色的`Usage`语句表示我们没有提供所需的名称。
- en: Creating snippets using VS Code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VS Code 创建代码片段
- en: For those who love graphical IDEs, you can use VS Code as an editor for your
    shell scripts. We used it as a debugger in [Chapter 1](f439f212-0f5f-4c9d-abdb-9f9b8c199a78.xhtml),
    *The What and Why of Scripting with Bash*. Now we will see one of its capabilities
    as an editor.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些喜欢图形化 IDE 的人，你可以将 VS Code 用作 shell 脚本的编辑器。我们在[第1章](f439f212-0f5f-4c9d-abdb-9f9b8c199a78.xhtml)中将它作为调试器使用，*《Bash
    脚本的作用与意义》*。现在我们将展示它作为编辑器的能力。
- en: You can create your own snippets in VS Code as follows.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按如下方式在 VS Code 中创建自己的代码片段。
- en: Navigate to File | Preferences | User Snippets.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 文件 | 偏好设置 | 用户代码片段。
- en: Then start to type `shell`. This will open the `shellscript.json` file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后开始输入`shell`，这将打开`shellscript.json`文件。
- en: 'The file has two brackets ready to enter your snippets between them:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件有两个括号，准备好在其中输入你的代码片段：
- en: '![](img/d01fff83-5f0a-42a7-aea0-6e15120a8809.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d01fff83-5f0a-42a7-aea0-6e15120a8809.png)'
- en: 'To create a snippet, type the following between the brackets on the file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个代码片段，请在文件的括号中输入以下内容：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/9400bc9c-4f58-43f0-bb77-33d4d76e651b.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9400bc9c-4f58-43f0-bb77-33d4d76e651b.png)'
- en: You can use the following template and modify it based on your needs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下模板，并根据需要进行修改。
- en: Try to use prefixes different to the shell scripting keywords to avoid confusion.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用不同于 shell 脚本关键字的前缀，以避免混淆。
- en: 'When you open any `.sh` file and start to type `welcome`, the autocompletion
    will show you the snippet we have just created:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开任何 `.sh` 文件并开始输入`welcome`时，自动完成将显示我们刚刚创建的代码片段：
- en: '![](img/f87376e6-2924-4f8e-9b50-79fc8ba9e4de.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f87376e6-2924-4f8e-9b50-79fc8ba9e4de.png)'
- en: You can use any prefix you want; in our case, we used `welcome` so the autocompletion
    starts with it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何前缀；在我们的例子中，我们使用了`welcome`，这样自动完成时就会以它为开头。
- en: 'You can add many lines to your snippet body:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码片段的主体中添加多行内容：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can use placeholders in your snippet body to simplify code editing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码片段主体中使用占位符来简化代码编辑。
- en: 'Placeholders are written like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符写作如下：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modify the previous snippet and add a placeholder like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 修改之前的代码片段并添加一个占位符，如下所示：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When you start to type `welcome` and after you choose the snippet, you will
    notice that the cursor will stop at the exact position of the placeholder waiting
    for your input.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始输入`welcome`并选择代码片段后，你会注意到光标会停在占位符的精确位置，等待你的输入。
- en: 'You can use choices if you forget what to type in these editable places:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记在这些可编辑的位置输入内容，可以使用选择项：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After you choose this snippet in your code and hit *Enter*, you should see
    the cursor waiting for your input with your choices:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此代码片段并按*Enter*后，你应该会看到光标停留在等待输入的位置，并带有你的选择：
- en: '![](img/24439a99-2597-4a4b-991c-13a3279e1e97.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24439a99-2597-4a4b-991c-13a3279e1e97.png)'
- en: That's very helpful!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有帮助！
- en: 'Also, you can add a default value for the placeholder so this value will be
    written if you hit *Tab*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以为占位符添加默认值，这样如果你按下 *Tab*，该值就会被写入：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To any administrator, script reuse will always be upmost in the quest for efficiency.
    Using vim at the command line can make for very quick and effective editing of
    a script and we can save typing in the use of abbreviations. These are best set
    within a user's personal `.vimrc` file and are defined with the `abbr` control.
    Beyond abbreviations, we can see the sense in using code snippets. These are pre-prepared
    blocks of code that can be read into the current script.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何管理员来说，脚本重用总是追求高效的关键。使用 vim 在命令行中编辑脚本可以非常快速且高效，我们可以通过使用缩写来节省输入。这些最好在用户个人的
    `.vimrc` 文件中设置，并通过 `abbr` 控制定义。除了缩写之外，我们还可以看到使用代码片段的意义。这些是预先准备好的代码块，可以读取到当前脚本中。
- en: Also, we had a look at the value in using color at the command line where a
    script will provide feedback. In the first look, these color codes are not the
    friendliest, but we can simplify the process by using variables. We created variables
    with color codes and saved them to a file and by using source command, these variables
    will be available to our current environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还看到了在命令行中使用颜色的价值，脚本会提供反馈。在初次使用时，这些颜色代码并不友好，但我们可以通过使用变量来简化这个过程。我们创建了包含颜色代码的变量并将其保存到文件中，通过使用
    `source` 命令，这些变量将可以在当前环境中使用。
- en: Finally, we saw how to create code snippets using VS Code and how to add placeholders
    to simplify our code editing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何使用 VS Code 创建代码片段，以及如何添加占位符以简化代码编辑。
- en: In the next chapter, we will look at other mechanisms that we can use to write
    test expressions simplifying the use of integers and variables.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨其他机制，帮助我们简化整数和变量的使用，编写测试表达式。
- en: Questions
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: The following code creates a snippet which prints one line. How do you make
    the snippet with choices?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码创建了一个打印一行的片段。如何在片段中添加选择项？
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Which command should you use to make your code snippets available for your use
    in the shell?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该使用哪个命令，使你的代码片段在 shell 中可用？
- en: Further reading
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，进一步阅读与本章相关的内容：
- en: '[https://code.visualstudio.com/docs/editor/userdefinedsnippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://code.visualstudio.com/docs/editor/userdefinedsnippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets)'
- en: '[https://brigade.engineering/sharpen-your-vim-with-snippets-767b693886db](https://brigade.engineering/sharpen-your-vim-with-snippets-767b693886db)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://brigade.engineering/sharpen-your-vim-with-snippets-767b693886db](https://brigade.engineering/sharpen-your-vim-with-snippets-767b693886db)'
