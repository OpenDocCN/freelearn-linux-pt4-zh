["```\nvoid extract(int arr[], size_t n, int *avg, int *min, int *max)\n{\n        int i;\n        float sum = 0;\n\n        if (min)\n                *min = 4096;\n        if (max)\n                *max = 0;\n        for (i = 0; i < n; i++) {\n                sum += ((float) arr[i]) / ((float) n);\n                if (min)\n                        *min = min(*min, arr[i]);\n                if (max)\n                        *max = max(*max, arr[i]);\n        }\n        *avg = (int) sum;\n}\n```", "```\nroot@beaglebone:~# echo BB-I2C1 > /sys/devices/bone_capemgr.9/slots\n\n```", "```\nroot@beaglebone:~# i2cdetect -y -r 2\n 0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- 5a -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- -- \n\n```", "```\nroot@beaglebone:~# i2cget -y 2 0x5a 0x07 wp\n0x3bab\n\n```", "```\nroot@beaglebone:~# echo \"$(printf \"ibase=16; %X\\n\" $(i2cget -y 2 0x5a 0x07 wp) | bc) * 0.02 - 273.15\" | bc\n32.11\n\n```", "```\nv_hex=$(i2cget -y 2 0x5a 0x07 wp)\n```", "```\nv_dec=$(printf \"ibase=16; %X\\n\" $v_hex | bc)\n```", "```\necho \"$v_dec * 0.02 - 273.15\" | bc\n```", "```\nroot@beaglebone:~# echo \"$(printf \"ibase=16; %X\\n\" $(i2cget -y 2 0x5a 0x07 wp) | bc) * 0.02 - 273.15\" | bc\n34.97\n\n```", "```\nroot@beaglebone:~# echo cape-bone-iio > /sys/devices/bone_capemgr.9/slots\n\n```", "```\nroot@beaglebone:~# ./load_firmware.sh adc\n```", "```\nroot@beaglebone:~# cat /sys/devices/ocp.3/helper.12/AIN1\n2\n\n```", "```\nroot@beaglebone:~# cat /sys/devices/ocp.3/helper.12/AIN1\n982\n\n```", "```\nroot@beaglebone:~# cat /sys/devices/ocp.3/helper.12/AIN0\n24\n\n```", "```\nroot@beaglebone:~# cat /sys/devices/ocp.3/helper.12/AIN0\n201\n\n```", "```\nroot@beaglebone:~# zcat /proc/config.gz | grep -i st7735\nCONFIG_FB_ST7735=y\n\n```", "```\nCONFIG_FB_ST7735=m\n\n```", "```\nroot@beaglebone:~# wget https://raw.githubusercontent.com/beagleboard/devicetree-source/master/arch/arm/boot/dts/cape-bone-adafruit-lcd-00A0.dts\n\n```", "```\nroot@beaglebone:~# dtc -O dtb -o /lib/firmware/cape-bone-lcd-00A0.dtbo -b 0 -@ cape-bone-adafruit-lcd-00A0.dts\n\n```", "```\nroot@beaglebone:~# echo cape-bone-lcd > /sys/devices/bone_capemgr.9/slots\n\n```", "```\n-bash: echo: write error: File exists\n\n```", "```\noptargs=capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN\n```", "```\ncape_disable=capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN\n```", "```\nroot@beaglebone:~# echo \"Testing string\" > /dev/tty0\n\n```", "```\nroot@beaglebone:~# ./adc | ./lcd.sh\n\n```", "```\n#define SYSFS_PRESSURE  \"/sys/devices/ocp.3/helper.12/AIN1\"\n#define HZ              100\n#define DELAY_US        (1000000 / HZ)\n\n   /* Start sampling the ADC */\n   while (1) {\n      ret = clock_gettime(CLOCK_MONOTONIC_RAW, &t0);\n      EXIT_ON(ret < 0);\n\n      /* Read the ADC */\n      fd = open(SYSFS_PRESSURE, O_RDONLY);\n      EXIT_ON(fd < 0);\n      ret = read(fd, ch, 5);\n      EXIT_ON(ret < 1);\n      close(fd);\n      ret = sscanf(ch, \"%d\", &val);\n      EXIT_ON(ret != 1);\n\n      printf(\"%ld.%06ld %d\\n\", t0.tv_sec, t0.tv_nsec / 1000, val);\n\n      /* Calculate the delay to sleep to the next period */\n      ret = clock_gettime(CLOCK_MONOTONIC_RAW, &t);\n      EXIT_ON(ret < 0);\n      delay_us = DELAY_US - difftime_us(&t0, &t);\n      EXIT_ON(delay_us < 0);\n      usleep(delay_us);\n   }\n```", "```\nroot@beaglebone:~/chapter_06# ./adc_simple\n317330.142227 0\n317330.153381 10\n317330.163604 7\n317330.174134 10\n317330.184298 5\n317330.194473 10\n317330.204696 7\n317330.214955 7\n317330.225119 13\n317330.235331 10\n317330.245558 1\n317330.255714 10\n317330.265858 10\n317330.276034 10\n317330.286186 7\n317330.296346 7\n317330.306500 9\n317330.316646 8\n317330.326924 0\n...\n\n```", "```\nroot@beaglebone:~# ./adc_simple | awk -v T=0.01 -v N=1000 -f jitter.awk\navg=0.000255 min=0.000078 max=0.012252\n\n```", "```\nroot@beaglebone:~/chapter_06# ./adc_simple\n319111.158747 0\n319111.168981 8\n319111.179131 9\n319111.189269 10\n319111.199439 10\n319111.209586 11\nâ€¦\n319113.140526 0\nadc_simple.c[  65]: main: fatal error in main() at line 65\n\n```", "```\n        delay_us = DELAY_US - difftime_us(&t0, &t);\n        EXIT_ON(delay_us < 0);\n```", "```\nroot@beaglebone:~# chrt -f 99 ./adc_simple | awk -v T=0.01 -v N=1000 -f jitter.awk\navg=0.000102 min=0.000022 max=0.000781\n\n```", "```\n   /* Set stdout line buffered */\n   setlinebuf(stdout);\n\n   /* Do a dummy read to init the data buffers */\n   c = read_adc(SYSFS_SOUND);\n   for (snd_idx = 0; snd_idx < ARRAY_SIZE(snd); snd_idx++)\n      snd[snd_idx] = c;\n   c = read_adc(SYSFS_PRESSURE);\n   for (prs_idx = 0; prs_idx < ARRAY_SIZE(prs); prs_idx++)\n      prs[prs_idx] = c;\n\n   /* Set FIFO scheduling */\n   param.sched_priority = 99;\n   ret = sched_setscheduler(getpid(), SCHED_FIFO, &param);\n   EXIT_ON(ret < 0);\n\n   /* Start sampling the ADC */\n   snd_idx = prs_idx = 0;\n   ret = clock_gettime(CLOCK_MONOTONIC_RAW, &t);\n   EXIT_ON(ret < 0);\n   while (1) {\n      ret = clock_gettime(CLOCK_MONOTONIC_RAW, &t0);\n      EXIT_ON(ret < 0);\n\n      /* Read the data from the ADCs */\n      snd[snd_idx] = read_adc(SYSFS_SOUND);\n      prs[prs_idx] = read_adc(SYSFS_PRESSURE);\n\n      /* Extract informations from buffered data */\n      extract(snd, ARRAY_SIZE(snd), &snd_avg, NULL, NULL);\n      extract(prs, ARRAY_SIZE(prs), &prs_avg, &prs_min, &prs_max);\n      dbg(\"%ld.%06ld prs:%d min=%d max=%d snd:%d\", t0.tv_sec, t0.tv_nsec / 1000, prs[prs_idx], prs_min, prs_max, snd[snd_idx]);\n\n      /* We have to output the pressure data each second,\n      * that is every HZ ticks.\n      * Also we have to read the sound level...\n      */\n      if (ticks++ == 0)\n         printf(\"%d %d %d\\n\", prs_avg, prs_max - prs_min, snd_avg);\n         ticks %= HZ;\n\n         /* Calculate the delay to sleep to the next period */\n         ret = clock_gettime(CLOCK_MONOTONIC_RAW, &t);\n         EXIT_ON(ret < 0);\n         delay_us = DELAY_US - difftime_us(&t0, &t);\n         EXIT_ON(delay_us < 0);\n         usleep(delay_us);\n\n         /* Move the index */\n         prs_idx++;\n         prs_idx %= ARRAY_SIZE(prs);\n         snd_idx++;\n         snd_idx %= ARRAY_SIZE(snd);\n   }\n```", "```\nroot@beaglebone:~# ./adc\n0 16 20\n0 19 21\n1 21 21\n2 22 23\n3 22 23\n4 22 24\n...\n\n```", "```\nwhile true ; do\n   wait_for_data_from_ADC\n   render_data_to_LCD\ndone\n```", "```\nroot@beaglebone:~# echo -e \"\\e[31mRED TEXT\\e[39m\"\nRED TEXT\n\n```", "```\nroot@beaglebone:~# aptitude install figlet\n\n```", "```\nroot@beaglebone:~# figlet \"simple string\"\n _                 _            _        _ \n ___(_)_ __ ___  _ __ | | ___   ___| |_ _ __(_)_ __   __ _\n/ __| | '_ ` _ \\| '_ \\| |/ _ \\ / __| __| '__| | '_ \\ / _` |\n\\__ \\ | | | | | | |_) | |  __/ \\__ \\ |_| |  | | | | | (_| |\n|___/_|_| |_| |_| .__/|_|\\___| |___/\\__|_|  |_|_| |_|\\__, |\n |_|                                  |___/\n\n```", "```\n# Ok, do the job\nclear_scr\n\ntick=1\nwhile true ; do\n   # Read the temperature from the sensor and convert it in C\n   t=$(i2cget -y 2 0x5a 0x07 wp)\n   t=$(hex2dec $t)\n   t=$(echo \"$t * 0.02 - 273.15\" | bc)\n\n   # Read the pressure and sound data from the \" adc\" tool\n   read -u 0 v b s\n\n   # Draw the GUI\n\n   # Check for a minimum pressure, otherwise drop to 0 sound and\n   # pressure data in order to not enable any alarm\n   if [ $v -lt $PRS_AVG ] ; then\n      s=0\n      b=0\n      enabled=\"false\"\n   else\n      enabled=\"true\"\n   fi\n\n   # Rewrite the screen\n   goto_xy 0 0\n\n   echo -en \"[${CH_PULSE:$tick:1}] \"\n   echo -e \"${FC_LIGHT_MAGENTA}BBB - BABY SENTINEL${FC_DEFAULT}\\n\"\n\n   echo -en \"TEMPERATURE (C):\"\n   if (( $(bc <<< \"$t > 37.00\") == 1 )) ; then\n      echo -e \"$FC_RED\"\n      t_alrm=\"true\"\n   else\n      echo -e \"$FC_GREEN\"\n      t_alrm=\"false\"\n   fi\n   figlet -f small -W -r -w 32 \"$t\"\n   echo -e \"$FC_DEFAULT\"\n\n   echo -en \"SOUND LEVEL:\"\n   if $enabled && [ $s -gt $SND_AVG ] ; then\n      echo -e \"$FC_RED\"\n      s_alrm=\"true\"\n   else\n      echo -e \"$FC_DEFAULT\"\n      s_alrm=\"false\"\n   fi\n   figlet -f small -W -r -w 32 \"$s\"\n\n   echo -en \"BREATH LEVEL:\"\n   if $enabled && [ $b -lt $PRS_AMP ] ; then\n      echo -e \"$FC_RED\"\n      b_alrm=\"true\"\n   else\n      echo -e \"$FC_DEFAULT\"\n      b_alrm=\"false\"\n   fi\n   figlet -f small -W -r -w 32 \"$b\"\n   echo -en \"${ES_CLEAR_LN}${FC_LIGHT_RED}ALARMS: ${FC_DEFAULT}\"\n   $t_alrm && echo -en \"${BC_RED}TEMP. \"\n   $s_alrm && echo -en \"${BC_RED}SOUND \"\n   $b_alrm && echo -en \"${BC_RED}BREATH \"\n   echo -e \"${BC_DEFAULT}\"\n\n   # Print some debugging messages if requested\n   dbg \"$(printf \"t=%0.2f v=% 4d b=% 4d s=% 4d\" $t $v $b $s)\"\n   dbg \"PRS_AVG=$PRS_AVG PRS_AMP=$PRS_AMP SND_AVG=$SND_AVG\"\n\n   tick=$(( ($tick + 1) % ${#CH_PULSE} ))\ndone\n```", "```\nroot@beaglebone:~# echo -e '\\e[8;26;32t'\n\n```", "```\nroot@beaglebone:~# ./adc | ./lcd.sh\n\n```", "```\nroot@beaglebone:~# ./SYSINIT.sh\ndone!\n\n```", "```\nroot@beaglebone:~# ./adc | ./lcd.sh > /dev/tty0\n\n```"]