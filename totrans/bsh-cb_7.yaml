- en: Writing Bash to Win and Profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will introduce the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a lame utility HTTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing RSS feeds and output HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scraping the web and collecting files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a simple IRC chat bot logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocking IP addresses from failed SSH attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing and managing audio from Bash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple NAT and DMZ firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing a GitHub project and generate a report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a poor man's incremental remote backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bash scripts to monitor udev input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bash to monitor battery life and optimize it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using chroot and Restricted Bash shells to secure scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you learn how to use commands and scripts for many tasks.
    You will get an idea about writing Bash scripts for monitoring certain tasks.
    You will learn about hosting files, parsing RSS feeds, and outputing HTML. You
    will also learn to copy contents from a website, make a simple IRC chat bot logger,
    block IP addresses, play and manage audio from command line, create a simple NAT
    firewall with DMZ using iptables, parse GitHub projects, create backups using
    rsync, monitor device events, the system’s battery life and power events, and
    use chroot for security.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a lame utility HTTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the cURL tool in Linux. The cURL tool is used
    for transferring the data from or to a server. It supports many protocols, and
    `http` is one of them. cURL is used to transfer the data from URL. It has so many
    tricks to offer, such as http post, ftp post, user authentication, proxy support,
    file transfer, SSL connections, cookies, and similar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that you have `curl` installed
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will learn about HTTP `GET` and `POST` methods using `curl` in Linux. Now,
    we will see examples of `GET` and `POST`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: The HTTP GET method is used to request a data from a specified resource.
    The command is the example of HTTP GET and is accepting JSON formatted data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example of HTTP GET, which is accepting XML formatted data is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`POST`: The HTTP POST method is used to send the data to server. It is used
    to create as well as update a resource.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A simple POST example is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following `curl` command to upload a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will learn about the options used in the `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we learned about the `GET` method in the `curl` command. We accepted
    two types of data: JSON and XML. We used the `-X` option and specified the request.
    `-H` specifies the header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Second, we learned about the `POST` method in the `curl` command. The `--data`
    flag is used for the `POST` request. In the simple example, we are just posting
    the simple data and in the next, we are uploading files using the `-T` option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parsing RSS feeds and output HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the `curl` and `xml2` tools of Linux to parse the
    RSS feed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to ensure that you have `curl` installed on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to ensure that you have `xml2` installed on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will provide a URL in `curl`, and using the `xml2` tool, we will parse the
    RSS feed. Run the following command in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We used xml2 and curl Linux tools to parse the XML RSS feed; xml2 converts XML
    document into text. In the output, each line is a key that is an XML path, and
    its value is separated by `=`.
  prefs: []
  type: TYPE_NORMAL
- en: Scraping the web and collecting files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to collect data by web scraping. We will write
    a script for that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to have basic knowledge of the `grep`
    and `wget` commands.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will write a script to scrape the contents from `imdb.com`. We will
    use the `grep` and `wget` commands in the script to get the contents. Create a
    `scrap_contents.sh` script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding script, we have written code to get contents from a website.
    The **wget** utility is used for retrieving files from the web using the `http`,
    `https`, and `ftp` protocols. In this example, we are getting data from `imdb.com`
    and therefore we specified the website name in `wget`. `grep` is a command-line
    utility used for searching data that will match a regular expression. Here, we
    are searching for the specific links, and those links will be saved in `link_final.csv`
    after the web scraping.
  prefs: []
  type: TYPE_NORMAL
- en: Making a simple IRC chat bot logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will make a simple bot logger. This script will log a few
    channels as well as handle the pings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to have basic knowledge of IRC.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will write a script for an IRC logging bot. Create the `logging_bot.sh`
    script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this script, we handled the pings; also, we are logging some channels.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking IP addresses from failed SSH attempts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about finding the failed SSH attempts and blocking
    those IP addresses. To find failed attempts, we will use `grep` as well as `cat` commands.
    The login attempts to the SSH Server are tracked and recorded into the `rsyslog`
    daemon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides having a Terminal open, we need to remember a few concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic knowledge of the `grep` and `cat` commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that `grep` is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will find the failed SSH login attempts using the `grep` and `cat` commands.
    First, be a root user. Type the `sudo su` command. Next, run the following command
    to fetch the failed attempts using the `grep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can do this using the `cat` command also. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can block the particular IP address that has failed SSH login attempt using
    tcp-wrapper. Navigate to the `/etc` directory. Look for the `hosts.deny` file,
    add the following line in the file, and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this, we used the `cat` and `grep` commands. The most common use of the `cat`
    command is to display the contents of a file, and `grep` is a Linux utility used
    for searching a file for a particular pattern; then, it will display the lines
    that will have the particular pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous examples, we were searching for a failed login attempt. We are
    matching such key words using the `grep` command and then we are displaying it
    using the `cat` command.
  prefs: []
  type: TYPE_NORMAL
- en: To block an IP address, we just added a single line into the `hosts.deny` file,
    which will block that particular IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Playing and managing audio from Bash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about how we can play the music from the command-line
    interface using a command-line player named **SoX**. SoX supports most of the
    audio formats, such as mp3, wav, mpg, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides having a Terminal open, we need to remember a few concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have SoX installed on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have sox libsox-fmt-all installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will run the audio from the command line. For that, we will use SoX command-line
    player. After successful installation of `sox` and `libsox-fmt-all`, navigate
    to the directory where you have your audio files and run the following command
    to play all the `.mp3` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To play a specific song, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SoX is used for reading and writing audio files. The `libsox` library is the
    heart of the SoX tool. The `play` command is used to play the audio files. To
    play all mp3 files, we used `*mp3`. To play a specific file, just write filename
    with the extension after the `play` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple NAT and DMZ firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple NAT firewall with DMZ using iptables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that `iptables` is installed
    in your machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will write a script to set up a DMZ using `iptables`. Create a `dmz_iptables.sh`
    script and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding code, we have used `iptables` to set up a DMZ. In this script,
    we are allowing the internal traffic from the internet to the DMZ.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing a GitHub project and generate a report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will parse a GitHub project using the git command.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that you have `git` installed
    in your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the git tool for parsing the project. Run this command to parse
    a project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tool git is used for handling the large projects. This command is used for
    cloning the git repository from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a poor man's incremental remote backup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about creating backups and incremental backups.
    We will write a script to get incremental backups.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides having a Terminal open, we need to remember a few concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic knowledge of the `tar`, `gunzip`, and `gzip` commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that you have the necessary directories present in your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, select a directory whose backup you want to take. We will use the `tar`
    command. Let''s assume that you want to take backup of your `/work` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write a script to take an incremental backup. Create a `incr_backup.sh`
    script and write the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will learn about the options used in the preceding command as well
    as the script:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command, the options we have used are these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`c`: This option will create an archive'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`v`: This option is for verbose mode. We can see what files we are archiving.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`f`: This option will take you back to the file.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`z`: This option is used to compress it with gzip.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this script, the options we have used are as listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`u`: This option is used for updating the archive.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`v`: For verbose.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`f`: This option is to take back to a file.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Bash scripts to monitor udev input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about the **evtest** Linux tool. This tool is
    used to monitor the input device events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that `evtest` is installed
    in your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`evtest` is a command-line tool. It will display the information on the input
    device. It will display all the events supported by the device. Then, it will
    monitor the device. We just need to run the `evtest` command with super user privilege.
    Run the command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `evtest` command will produce output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The output shows the information presented by the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Using Bash to monitor battery life and optimize it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about the TLP Linux tool. **TLP** is a command-line
    tool; it is used for power management and will optimize the battery life.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that you have TLP installed
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TLP’s configuration file is in the `/etc/default/` directory and the filename
    is `tlp`. After installation, it starts as a service automatically. We can check
    whether it’s running under system by running the `systemctl` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to get the operation mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the system information as well as TLP status, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To view TLP configuration, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all the power configurations, run the given command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the battery information, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the fan speed and temperature of the system, run the next command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the processor data, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TLP is a command-line tool that comes with automated background tasks. TLP helps
    in optimizing the battery life in laptops powered by Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get information about the battery life, processor data, temperature, and
    fan speed by running `sudo tlp-stat` with various options. `tlp-stat` shows the
    power management setting. The options we used with `tlp-stat` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-b`: Battery'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`: Temperature'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: Processor data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c`: Configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: System information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using chroot and restricted Bash shells to secure scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn about chroot and restricted bash(rbash). The `chroot`
    command is used to change the root directory. Using rbash, we can restrict some
    features of the bash shell for some security purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides having a Terminal open, you need to ensure that `rbash` is installed
    in the system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will look at the command to start `rbash`. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will test some restrictions. First, we will try to change the directory.
    Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will try to write some contents to the file. Run the given command
    to write some contents into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After using `rbash`, access to the system will be limited. In the preceding
    examples, we started the restricted shell by typing `bash -r` or `rbash`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we tried to change the directory, but we got the `rbash: cd: restricted` message,
    so we cannot change the directory in `rbash.` Also, we cannot write contents into
    the file.'
  prefs: []
  type: TYPE_NORMAL
