- en: Iterating with Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用循环进行迭代
- en: Now we can perform arithmetic operations and tests and our scripts have more
    control. Sometimes, you will find that you need to perform some tasks repeatedly,
    such as going through log file entries and performing an action, or maybe running
    a piece of code continuously. We are busy people who have better things to do
    than repeat a task 100 times or more; loops are our friends.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以执行算术运算和测试，我们的脚本有了更多的控制能力。有时，你会发现需要反复执行一些任务，比如遍历日志文件条目并执行某些操作，或者连续运行一段代码。我们是忙碌的人，不会愿意重复执行同一任务一百次或更多次；循环是我们的好帮手。
- en: Looping structures are the lifeblood of scripts. These loops are workhorse engines
    that can iterate many times, repeating the same task reliably and consistently.
    Imagine having 100,000 lines of text within a CSV file that has to be checked
    for incorrect entries. A script can do this easily and accurately once developed
    but, in the case of a human, the reliability factor and accuracy will fail very
    quickly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 循环结构是脚本的命脉。这些循环是强大的引擎，可以多次迭代，可靠地重复相同的任务。试想一下，在一个CSV文件中，有100,000行文本需要检查其中的错误条目。一旦开发出脚本，脚本就可以轻松且准确地完成此任务，但如果是人工操作，可靠性和准确性将迅速失败。
- en: 'So let''s see how we can save our time and sanity by covering the following
    topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们通过本章中的以下主题来看如何节省时间和精力：
- en: '`for` loops'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: Advanced `for` loops
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级`for`循环
- en: The internal field separator (IFS)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部字段分隔符（IFS）
- en: Counting directories and files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统计目录和文件
- en: C-style for loops
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C风格的for循环
- en: Nested loops
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: Redirecting loop output
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向循环输出
- en: '`while` loops and `until` loops'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`循环和`until`循环'
- en: Reading input from files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件中读取输入
- en: Creating operator menus
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建操作员菜单
- en: Technical requirement
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code for this chapter can be can be downloaded from here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以从这里下载：
- en: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter06](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter06)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter06](https://github.com/PacktPublishing/Mastering-Linux-Shell-Scripting-Second-Edition/tree/master/Chapter06)'
- en: for loops
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for循环
- en: 'All our looping controls are simple and we will begin by looking at `for` loops.
    The word `for` is a keyword in bash and in terms of its working, it is similar
    to `if`. We can use the command type to verify this, as shown in the following
    example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的循环控制都很简单，我们将从`for`循环开始。`for`是bash中的一个关键字，在它的工作方式上，类似于`if`。我们可以使用命令类型来验证这一点，如下面的示例所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a reserved shell keyword, we can use a `for` loop both in scripts and directly
    at the command line. In this way, we can utilize loops within and without the
    scripts, optimizing the use of the command line. A simple `for` loop is shown
    in the following example code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为保留的shell关键字，我们可以在脚本中或直接在命令行中使用`for`循环。通过这种方式，我们可以在脚本内外都使用循环，优化命令行的使用。下面是一个简单的`for`循环示例代码：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `useradd` command is used to create users and the `chpasswd` command is
    used to update passwords in batch mode.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`useradd`命令用于创建用户，`chpasswd`命令用于批量更新密码。'
- en: Within a `for` loop, we read from the list on the right to populate the variable
    parameter on the left; in this case, we will read from the list containing `bob`
    and `joe` into the parameter variable `u`. Each item from the list is inserted
    into the variable, one item at a time. In this way, as long as there are items
    to be processed in the list, the loop will execute until the list is exhausted.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中，我们从右侧的列表读取，填充左侧的变量参数；在这种情况下，我们将从包含`bob`和`joe`的列表中读取，并将每个项目插入变量`u`中，一次一个项目。这样，只要列表中有待处理的项目，循环就会继续执行，直到列表耗尽。
- en: 'Practically, for us, the execution of this loop means that we will do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，实际执行这个循环意味着我们将执行以下操作：
- en: Create the user `bob`
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户`bob`
- en: Set the password for `bob`
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`bob`设置密码
- en: Expire the password so it will need to be reset on the first login for the user
    `bob`
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使`bob`用户的密码过期，以便在第一次登录时需要重置密码
- en: We then loop back and repeat the process for the user `joe`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们回到循环，重复为用户`joe`执行相同的过程。
- en: 'We can view the preceding example in the following screenshot. After having
    gained root access through `sudo -i`, we proceeded to run the loop and create
    the users:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在下图中查看前面的示例。在通过`sudo -i`获得root权限后，我们继续运行循环并创建用户：
- en: '![](img/ee837095-5d9f-436e-85d1-0df82a9a547b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee837095-5d9f-436e-85d1-0df82a9a547b.png)'
- en: 'The list that is read in the `for` loop can be generated dynamically or statically,
    as shown in the previous example. To create dynamic lists, we could use various
    globbing techniques to populate the list. As an example, to work with all files
    in a directory, we could use `*`, as shown in the following example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中读取的列表可以动态生成，也可以像之前的例子那样静态生成。要创建动态列表，我们可以使用各种通配符技巧来填充列表。例如，要处理目录中的所有文件，我们可以使用`*`，如以下示例所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When a list is generated, such as with file globbing, we should quote the expansion
    of the variable parameter. Without the quotes, it is possible that a space will
    be included that will cause the command to fail. This is what we have seen here
    in the `stat` command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成列表时，例如通过文件通配符，我们应当引用变量参数的扩展。如果不加引号，可能会包含空格，导致命令失败。这就是我们在`stat`命令中看到的情况。
- en: 'In the following examples, we isolate the filenames that begin with `ba*`.
    We then use the `stat` command to print the inode metadata. The code and output
    are shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们筛选出以`ba*`开头的文件名。然后使用`stat`命令打印inode元数据。代码和输出如下截图所示：
- en: '![](img/abe83602-8fa0-4d8f-a709-21f360982abf.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abe83602-8fa0-4d8f-a709-21f360982abf.jpg)'
- en: 'This list can also be generated from the output of another command or a pipeline
    of commands. For example, if we need to print the current working directory of
    all logged-in users, we could try something similar to the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表也可以通过另一个命令的输出或命令管道生成。例如，如果我们需要打印所有已登录用户的当前工作目录，我们可以尝试类似下面的操作：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the previous example, we can see that the choice of name for the parameter
    is down to us; we are not limited to a single character and we can use the `$user`
    name in this example. By using lowercase, we will not overwrite the system variable
    `$USER`. The following screenshot demonstrates the loop and the subsequent output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们可以看到，参数名称的选择由我们决定；我们不限于单个字符，在这个例子中我们可以使用`$user`。通过使用小写字母，我们就不会覆盖系统变量`$USER`。以下截图展示了循环及其输出：
- en: '![](img/dc3f2493-936b-4b21-b28b-c51e60b06d45.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc3f2493-936b-4b21-b28b-c51e60b06d45.png)'
- en: The `lsof` command will list open files; we can search for the files opened
    by each user in turn and with the `bash` command as the current working directory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`lsof`命令将列出打开的文件；我们可以依次搜索每个用户打开的文件，并使用`bash`命令作为当前工作目录。'
- en: 'Working with the scripts that we have created so far, we can create a new script
    called `hello9.sh`. If we copy the `$HOME/bin/hello2.sh` script to the new script,
    we can edit it to make use of a `for` loop:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们迄今为止创建的脚本中，我们可以创建一个新的脚本，名为`hello9.sh`。如果我们将`$HOME/bin/hello2.sh`脚本复制到新脚本中，我们可以编辑它以使用`for`循环：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The loop is used to iterate through each command-line argument supplied and
    greet each user individually. When we execute the script, we can see that we can
    now display the `Hello` message for each user. This is shown in the following
    screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该循环用于遍历每个命令行参数，并逐个问候每个用户。当我们执行脚本时，我们可以看到现在可以为每个用户显示`Hello`消息。以下截图展示了这一点：
- en: '![](img/d44e8d04-45ea-4fca-96d0-4e23e1390513.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d44e8d04-45ea-4fca-96d0-4e23e1390513.png)'
- en: Although what we have seen here is still relatively trivial, we should now realize
    a little of what we can do with scripts and loops. The arguments of this script
    can be the usernames that we have already used or anything else. If we stick with
    the usernames, then it will be very easy to create user accounts and set passwords,
    as we saw earlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在这里看到的内容仍然相对简单，但现在我们应该对脚本和循环的应用有所了解。这个脚本的参数可以是我们已经使用过的用户名，或者其他任何内容。如果我们坚持使用用户名，那么创建用户账户并设置密码将变得非常简单，就像我们之前看到的那样。
- en: Advanced for loops
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级`for`循环
- en: In the previous examples, we used the `for` loop to iterate over simple values
    where each value has no space.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们使用`for`循环遍历简单值，每个值中不包含空格。
- en: 'As you know, if your values contain a space, you should use double quotes:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，如果值中包含空格，你应当使用双引号：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/8001ef9d-760d-43c8-aa6a-e8796da1bcc2.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8001ef9d-760d-43c8-aa6a-e8796da1bcc2.png)'
- en: As you can see, each value is printed as expected thanks to double quotes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，每个值都按照预期打印出来，这得益于双引号的使用。
- en: This example contains values in one line and we quote the values because they
    have spaces and commas. What if the values were on multiple lines, as in a file?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例包含了一行中的值，我们引用了这些值，因为它们包含空格和逗号。如果值位于多行中，比如在文件中，又该如何处理呢？
- en: What if the separator between the values we want to iterate over is something
    other than a space such as a comma or a semicolon?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要迭代的值之间的分隔符不是空格，而是其他符号，比如逗号或分号，怎么办？
- en: Here comes the IFS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这时就需要用到 IFS。
- en: The IFS
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IFS
- en: By default, the IFS variable has the value of one of (space, newline, or tab).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，IFS 变量的值是（空格、换行符或制表符）之一。
- en: 'Suppose that you have a file like the following and you want to iterate over
    its lines:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个像下面这样的文件，并且想要遍历它的行：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s write the `for` loop that will iterate over these lines:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个 `for` 循环来遍历这些行：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you check the result, it''s something that we don''t need:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查结果，会发现它是我们不需要的：
- en: '![](img/bcbd11c3-188d-4dc7-97da-4bfaf9629138.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcbd11c3-188d-4dc7-97da-4bfaf9629138.png)'
- en: Since the first separator the shell found is the space, the shell treats every
    word as a field, but we need every line to be printed as a field.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Shell 找到的第一个分隔符是空格，所以 Shell 将每个单词当作一个字段，但我们需要每一行作为一个字段打印。
- en: Here we need to change the IFS variable to be newline instead.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要将 IFS 变量改为换行符。
- en: 'Let''s modify our script to iterate over lines correctly:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改脚本，正确遍历每一行：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/35a6ba72-aa82-42b5-9213-5fc8b6a2f302.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35a6ba72-aa82-42b5-9213-5fc8b6a2f302.png)'
- en: We changed the IFS variable to newline and it works as expected.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 IFS 变量改为换行符，它按预期工作了。
- en: Look at the dollar sign in the IFS definition in the preceding section, `IFS=$"\n"`.
    By default, bash doesn't interpret escape characters such as `\r`, `\n`, and `\t`.
    So, in our example, it will be treated as an `n` character, so to interpret escape
    characters, you have to use a dollar sign (`$`) before it to make it work properly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 看看前一节中 IFS 定义里的美元符号，`IFS=$"\n"`。默认情况下，bash 不会解释像 `\r`、`\n` 和 `\t` 这样的转义字符。因此，在我们的例子中，它会被当作
    `n` 字符对待，所以要解释转义字符，你必须在前面加上美元符号（`$`），这样它才能正常工作。
- en: But if your IFS is a normal character, you don't have to use the dollar sign
    (`$`) at all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你的 IFS 是一个普通字符，你根本不需要使用美元符号（`$`）。
- en: Counting directories and files
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计目录和文件
- en: 'We can use a simple `for` loop to iterate over folder content and use an `if`
    statement to check whether the path is a directory or a file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用简单的 `for` 循环遍历文件夹内容，并用 `if` 语句检查路径是目录还是文件：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/812eacd0-590e-4c82-aea1-ff797f45ea55.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/812eacd0-590e-4c82-aea1-ff797f45ea55.png)'
- en: This is pretty straightforward script. We iterate over directory content and
    then we use an `if` statement to check whether the path is a directory or a file.
    Finally, we print beside each path whether it's a file or a directory.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的脚本。我们遍历目录内容，然后使用 `if` 语句检查路径是目录还是文件。最后，我们在每个路径旁边打印它是文件还是目录。
- en: We used quotes for the path variable because the file could contain a space.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对路径变量使用了引号，因为文件路径中可能包含空格。
- en: C-style for loops
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C 风格的 `for` 循环
- en: 'If you have a C language background, you will be happy to know that you can
    write your `for` loops in C-style. This feature was taken from KornShell. The
    shell `for` loop can be written like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有 C 语言背景，你会很高兴地知道，你可以用 C 风格编写 `for` 循环。这个功能是从 KornShell 中借用来的。Shell `for`
    循环可以像这样编写：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is easy for C developers to use this syntax in `for` loops.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 C 开发者来说，在 `for` 循环中使用这种语法是很容易的。
- en: 'Check out this example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个例子：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The choice is yours; you have a lot of syntax styles for the `for` loop.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 选择权在你，`for` 循环有多种语法样式可供选择。
- en: Nested loops
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套循环
- en: 'Nested loops means loops inside loops. Check out the following example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套循环意味着循环中有循环。看看下面的例子：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/16709454-c84c-41f8-8c8a-99ed1cea62f3.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16709454-c84c-41f8-8c8a-99ed1cea62f3.png)'
- en: The first loop hits first, then the second loop, and this happens three times.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个循环首先执行，然后是第二个循环，这个过程重复三次。
- en: Redirecting loop output
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重定向循环输出
- en: 'You can redirect the loop output to a file using the `done` command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `done` 命令将循环输出重定向到文件：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If there is no file, it will be created and filled with the loop output.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有文件，它将被创建，并用循环输出填充。
- en: This redirection is helpful when you don't need to show the loop output on the
    screen and save it to a file instead.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这种重定向对于不需要将循环输出显示在屏幕上，而是将其保存到文件中的情况非常有用。
- en: Controlling the loop
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制循环
- en: Having entered our loop, we may need to either exit the loop prematurely or
    perhaps exclude certain items from processing. If we want to process only directories
    in a listing, rather than every file of any type, then to implement this, we have
    loop control keywords, such as `break` and `continue`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进入我们的循环后，我们可能需要提前退出循环，或者排除某些项目不进行处理。如果我们只想处理列表中的目录，而不是所有类型的文件，那么为了实现这一点，我们有循环控制关键字，比如`break`和`continue`。
- en: The `break` keyword is used to exit the loop, processing no more entries, whereas
    the `continue` keyword is used to stop the processing of the current entry in
    the loop and resume the processing with the next entry.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`关键字用于退出循环，不再处理任何条目，而`continue`关键字则用于停止处理当前循环条目，并继续处理下一个条目。'
- en: 'Assuming we only want to process directories, we could implement a test within
    the loop and determine the file type:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想处理目录，我们可以在循环中实现一个测试，并确定文件类型：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Within the loop, we want to set permissions, including the SGID and sticky bits,
    but for the directories only. The `*` search will return all files; the first
    statement within the loop will ensure that we only process directories. If the
    test is done for the current loop, the target fails the test and is not a directory;
    the `continue` keyword retrieves the next loop-list item. If the `test` returns
    `true` and we are working with a directory, then we will process the subsequent
    statements and execute the `chmod` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内，我们希望设置权限，包括SGID和sticky位，但只对目录进行操作。`*`搜索会返回所有文件；循环中的第一个语句会确保我们只处理目录。如果当前循环的测试失败且该目标不是目录，`continue`关键字将跳过该项并处理下一个循环列表中的条目。如果`test`返回`true`并且我们正在处理一个目录，那么我们将继续执行后续语句并执行`chmod`命令。
- en: 'If we need to run the loop until we find a directory and then exit the loop,
    we can adjust the code so that we can iterate though each file. If the file is
    a directory, then we exit the loop with the `break` keyword:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要运行循环，直到找到一个目录并退出循环，我们可以调整代码，以便遍历每个文件。如果文件是目录，我们就使用`break`关键字退出循环：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Within the following screenshot, we can see the code in action:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到代码的运行效果：
- en: '![](img/ac021128-1378-420d-b66d-4ee42b77ad14.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac021128-1378-420d-b66d-4ee42b77ad14.png)'
- en: 'By working with the same theme, we can print each directory found in the listing
    using the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用相同的主题，我们可以使用以下代码打印出列出的每个目录：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can achieve a result by processing the loop item only if it is a directory
    and within the loop. We can work with regular files only using the `if` test.
    In this example, we append the directory name to the `dir_name` variable. Once
    we exit the loop, we print the complete list of directories. We can see this in
    the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过仅在循环内处理目录来实现结果。我们只使用`if`测试来处理常规文件。在这个例子中，我们将目录名称附加到`dir_name`变量中。退出循环后，我们打印出完整的目录列表。我们可以在以下截图中看到这一点：
- en: '![](img/cd0b1ce9-b6da-4e7d-9773-cc2720df8887.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd0b1ce9-b6da-4e7d-9773-cc2720df8887.png)'
- en: Using these examples and your own ideas, you should now be able to see how you
    can control loops using the `continue` and `break` keywords.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些示例和你自己的想法，你现在应该能够看到如何使用`continue`和`break`关键字来控制循环。
- en: while loops and until loops
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while循环和until循环
- en: When using the `for` loop, we iterate through a list; it's either the one that
    we create or the one that is dynamically generated. Using the `while` or `until`
    loops, we loop based on the fact that the condition becomes either `true` or `false`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`for`循环时，我们会遍历一个列表；这个列表可以是我们自己创建的，也可以是动态生成的。使用`while`或`until`循环时，我们会基于条件是否变为`true`或`false`来决定是否继续循环。
- en: 'A `while` loop loops while the condition is true and, conversely, an `until`
    loop will loop while the condition is false. The following command will count
    from 10 through to zero, each iteration of the loop printing the variable and
    then reducing the value by one:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环会在条件为真时循环，而`until`循环则会在条件为假时循环。以下命令将从10倒数到零，每次循环打印变量的值，然后将该值减一：'
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see the output of this command in the following screenshot, thus confirming
    the countdown to zero:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下截图中看到该命令的输出，从而确认倒计时到零：
- en: '![](img/5a3bdb9b-ca07-42d1-9b91-88bc9fa97de0.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a3bdb9b-ca07-42d1-9b91-88bc9fa97de0.png)'
- en: The use of the `\c` escape sequence used here allows the suppression of the
    line feed normally used with `echo`. In this way, we can keep the countdown on
    the single line of output. I think you will agree that it's a nice effect.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的`\c`转义序列可以抑制`echo`命令通常使用的换行符。这样，我们就可以让倒计时保持在单行输出中。我相信你会同意，这是一个不错的效果。
- en: 'The functionality of this loop can be gained using the `until` loop; just a
    quick rethink of the logic is required, as we will want to loop until the condition
    becomes true. Generally, it is a personal choice and the way the logic works best
    for you about which loop to use. The following example shows the loop written
    with the `until` loop:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`until`循环也可以实现该循环的功能；只需要快速调整逻辑，因为我们希望循环直到条件为真。通常来说，选择使用哪个循环取决于个人习惯以及逻辑如何最好地工作。以下示例展示了使用`until`循环编写的循环：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Reading input from files
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件读取输入
- en: Now, it may seem that these loops can do a little more than just count down
    numbers. We may want to read data in from a text file and process each line. The
    shell built-in `read` command that we saw earlier in this book can be used to
    read a file line by line. In this way, we can use a loop to process each line
    of a file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看起来这些循环不仅仅能做倒计时。我们可能希望从文本文件中读取数据并处理每一行。本书中之前提到过的shell内建`read`命令可以逐行读取文件。这样，我们就可以使用循环逐行处理文件内容。
- en: 'To demonstrate some of these functionalities, we will use a file that contains
    the server addresses. These could be hostnames or IP addresses. In the following
    example, we will make use of the IP addresses of Google DNS servers. The following
    command shows the contents of the `servers.txt` file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这些功能，我们将使用一个包含服务器地址的文件。这些地址可以是主机名或IP地址。在以下示例中，我们将使用谷歌DNS服务器的IP地址。以下命令显示了`servers.txt`文件的内容：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Using the `read` command in the condition of the `while` loop, we can loop
    as long as we have more lines to read from the file. We specify the input file
    directly after the `done` keyword. For each line that we read from the file, we
    can test whether the server is up with the `ping` command, and, if the server
    is responding, we append it to a list of available servers. This list is printed
    once the loop closes. In the following example, we can see that we begin to add
    in as many elements of scripting as we have covered in this book:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`while`循环中的`read`命令，我们可以只要文件中还有更多行，就继续循环。我们在`done`关键字后直接指定输入文件。对于从文件中读取的每一行，我们可以使用`ping`命令测试服务器是否在线，如果服务器有响应，就将其添加到可用服务器列表中。该列表将在循环结束时打印出来。在下面的示例中，我们可以看到，我们开始将本书中涵盖的脚本元素逐步加入到脚本中：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can verify the operation in the following screenshot, which captures the
    output:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下截图验证操作，截图中捕获了输出：
- en: '![](img/224a988c-ebdd-47c4-9855-3dff9e6b286c.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/224a988c-ebdd-47c4-9855-3dff9e6b286c.png)'
- en: 'Using this kind of loop, we can start to build extremely practical scripts
    to process information either fed from the command line or from scripts. It will
    be very easy to replace the filename that we read with `$1`, representing a positional
    parameter passed into the script. Let''s return to the `ping_server.sh` script
    and adjust it to accept the input parameter. We can copy the script to the new
    `$HOME/bin/ping_server_from_file.sh` file. Within the script, we first test whether
    the input parameter is a file. We then create an output file with a tile that
    includes the date. As we enter the loop, we append available servers to this file
    and list the file at the end of the script:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种循环，我们可以开始构建极具实用性的脚本，处理从命令行或其他脚本输入的信息。我们可以轻松地用`$1`替换我们读取的文件名，它代表传递给脚本的一个位置参数。让我们回到`ping_server.sh`脚本，并调整它以接受输入参数。我们可以将脚本复制到新的`$HOME/bin/ping_server_from_file.sh`文件中。在脚本中，我们首先测试输入参数是否为文件。然后，我们创建一个输出文件，文件名中包含日期。当我们进入循环时，我们将可用的服务器添加到该文件中，并在脚本末尾列出该文件：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can execute the script now in the following manner:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下方式执行脚本：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output from the script execution should be similar to the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行后的输出应与以下截图类似：
- en: '![](img/b989b3bb-08da-48f6-9eaf-4a64c07ca5d2.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b989b3bb-08da-48f6-9eaf-4a64c07ca5d2.png)'
- en: Creating operator menus
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建操作员菜单
- en: 'We can provide a menu to the Linux operators who need limited functionality
    from the shell and do not want to learn the details of command-line use. We can
    use their login script to launch a menu for them. This menu will provide a list
    of command selections to choose from. The menu will loop until the user chooses
    to exit from the menu. We can create a new `$HOME/bin/menu.sh` script; the basis
    of the menu loop will be the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为需要有限功能的 Linux 操作员提供菜单，这些操作员不想学习命令行的详细内容。我们可以使用他们的登录脚本为他们启动一个菜单。该菜单将提供一个命令选择列表，供用户选择。菜单会循环，直到用户选择退出菜单。我们可以创建一个新的`$HOME/bin/menu.sh`脚本；菜单循环的基础将是如下所示：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The loop we have created here is infinite. The `true` command will always return
    true and loop continuously; however, we can provide a loop control mechanism to
    allow the user to leave the menu. To start building the structure of the menu,
    we will need to echo some text within the loop asking the user for their choice
    of command. We will clear the screen before the menu is loaded each time and an
    additional read prompt will appear after the execution of the desired command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里创建的循环是无限的。`true`命令总是返回真，并且会不断循环；然而，我们可以提供一个循环控制机制，允许用户离开菜单。为了开始构建菜单的结构，我们将在循环内回显一些文本，询问用户选择的命令。在每次加载菜单之前，我们将清屏，执行所需命令后会显示一个额外的读取提示。
- en: 'This allows the user to read the output from the command before the screen
    is cleared and the menu is reloaded. The script will look like the following code
    at this stage:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户在屏幕被清除并重新加载菜单之前，先查看命令的输出。此时，脚本的代码将如下所示：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you execute the script at this stage, there will be no mechanism to leave
    the script. We have not added any code to the menu selections; however, you can
    test functionality and exit using the *Ctrl* + *C *keys.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此阶段执行脚本，将没有机制可以退出脚本。我们尚未为菜单选择项添加任何代码；但是，你可以使用*Ctrl* + *C*键进行测试并退出。
- en: 'At this stage, the menu should look similar to the output shown in the following
    screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，菜单应该类似于以下截图中的输出：
- en: '![](img/eb4a5ad4-33a0-4f23-8332-ba769cc4fda6.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb4a5ad4-33a0-4f23-8332-ba769cc4fda6.png)'
- en: 'To build the code behind the menu selection, we will implement a `case` statement.
    This will be added in between the two `read` commands, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建菜单选择背后的代码，我们将实现一个`case`语句。它将被添加在两个`read`命令之间，如下所示：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can see the three options that we have added to the `case` statement, `a`,
    `b`, and `c`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们添加到`case`语句中的三个选项：`a`、`b`和`c`：
- en: 'Option `a`: This runs the `tar` command to back up the scripts'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项`a`：这将运行`tar`命令，备份脚本
- en: 'Option `b`: This runs the `cal` command to display the current month'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项`b`：这将运行`cal`命令，显示当前月份
- en: 'Option `c`: This exits the script'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项`c`：这将退出脚本
- en: 'To ensure that the user is logged out when exiting from their login script,
    we will run the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保用户在退出登录脚本时已注销，我们将运行以下内容：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `exec` command is used to ensure that the shell is left after the `menu.sh`
    file is complete. In this way, the user never needs to experience the Linux shell.
    The complete script is shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec`命令用于确保在`menu.sh`文件完成后退出 shell。这样，用户就不需要接触到 Linux shell。完整的脚本如下所示：'
- en: '![](img/a7c72855-f753-4ef5-8d5b-c952af292bfe.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7c72855-f753-4ef5-8d5b-c952af292bfe.png)'
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have begun to make progress within this chapter. We have been able to join
    many of the elements that we have previously used into cohesive and functional
    scripts. Although the focus of this chapter has been on loops, we have used command-line
    lists, `if` statements, `case` statements, and arithmetic calculations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中已经开始取得进展。我们已将许多之前使用过的元素结合成了一个有机且功能性的脚本。尽管本章的重点是循环，我们也使用了命令行列表、`if`语句、`case`语句和算术运算。
- en: We opened this chapter by describing loops as the workhorse of our scripts and
    we have been able to demonstrate this with `for`, `while`, and `until` loops.
    The `for` loop is used to iterate through elements of a list. The list can be
    either static or dynamic; with an emphasis on dynamic lists, we showed how simply
    these are created through file globbing or command expansion.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过描述循环是脚本的主力军来开启本章，并且已经通过`for`、`while`和`until`循环展示了这一点。`for`循环用于遍历列表中的元素。列表可以是静态的也可以是动态的；我们着重展示了如何通过文件通配符或命令扩展简单地创建动态列表。
- en: Also, we saw how to iterate over complex values and how to set the IFS to iterate
    over fields correctly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何迭代复杂值以及如何设置IFS以正确地迭代字段。
- en: We learned how to write nested loops and how to redirect loop output to files.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何编写嵌套循环以及如何将循环输出重定向到文件。
- en: The `while` and `until` loops are controlled using conditions. The `while` loop
    will loop while the supplied condition is true. The `until` loop will loop until
    the supplied condition returns true or while it returns false. The `continue`
    and `break` keywords are specific to loops and, using them along with `exit`,
    we can control the loop flow.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`和`until`循环是通过条件控制的。`while`循环将在提供的条件为真时循环执行。`until`循环将在提供的条件为真时停止，或者条件为假时才会继续执行。`continue`和`break`是循环中特有的关键字，通过它们以及`exit`，我们可以控制循环流程。'
- en: In the next chapter, we will look at modularizing scripts using functions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用函数来模块化脚本。
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How many lines will be printed on screen from the following script?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下脚本将在屏幕上打印多少行？
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How many lines will be printed on the screen from the following script?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下脚本将在屏幕上打印多少行？
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What is wrong with the following script? And how can you fix it?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下脚本有什么问题？你如何修复它？
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How many lines will be printed on the screen from the following script?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下脚本将在屏幕上打印多少行？
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Further reading
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please see the following for further reading relating to this chapter:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容，了解与本章相关的进一步阅读：
- en: '[http://tldp.org/LDP/abs/html/internalvariables.html](http://tldp.org/LDP/abs/html/internalvariables.html)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/abs/html/internalvariables.html](http://tldp.org/LDP/abs/html/internalvariables.html)'
- en: '[http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html)'
- en: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html)'
- en: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_03.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_03.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_03.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_03.html)'
- en: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_05.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_05.html)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_05.html](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_05.html)'
