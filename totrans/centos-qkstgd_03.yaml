- en: Managing Text Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文本文件
- en: Computer systems are mostly used for editing, manipulating, or managing data.
    On Linux systems, this data is very often in the form of text files. In general,
    everything in Linux is a file, and having a solid understanding of working with
    text files is important. All important information in Linux is stored in text
    format files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机系统主要用于编辑、操作或管理数据。在 Linux 系统中，这些数据通常以文本文件的形式存在。一般来说，Linux 中的一切都是文件，掌握处理文本文件的技巧非常重要。Linux
    中所有重要信息都存储在文本格式的文件中。
- en: In this chapter, our objective is to learn how to work with text files on the
    command line, using the most popular default text-based editor, vi, and other
    text file manipulation utilities. Then, we will learn how input/output redirection
    is executed in files and programs for further processing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的目标是学习如何在命令行中处理文本文件，使用最流行的默认基于文本的编辑器 vi 以及其他文本文件操作工具。然后，我们将学习如何在文件和程序中执行输入/输出重定向，以进行进一步处理。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Different methods to create a text file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文本文件的不同方法
- en: Editing files with the vi editor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 vi 编辑器编辑文件
- en: Using text file manipulation tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文本文件操作工具
- en: Redirecting output to files and programs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输出重定向到文件和程序
- en: Using grep for text matching
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 grep 进行文本匹配
- en: Finding a file using the locate and find command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 locate 和 find 命令查找文件
- en: Different methods to create a text file
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文本文件的不同方法
- en: Text files can be viewed and edited using any text editor that exists in Linux.
    However, before learning the editing part, we must have a basic understanding
    of different ways that can be used to create plain text files. Depending on the requirement,
    different methods can be used for text file creation. The most popular ones are
    described next.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 文本文件可以使用任何存在于 Linux 中的文本编辑器查看和编辑。然而，在学习编辑部分之前，我们必须对创建纯文本文件的不同方法有一个基本了解。根据需求，可以使用不同的方法来创建文本文件。接下来将介绍一些最常用的方法。
- en: Create a text file using the cat command
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 cat 命令创建一个文本文件
- en: 'The `cat` command can be used to create a text file if we immediately want
    to add some text to a new blank file. The syntax of the `cat` command to create
    a file is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想立即向一个新空白文件添加一些文本，可以使用 `cat` 命令来创建一个文本文件。使用 `cat` 命令创建文件的语法如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After pressing *Enter*, we will return to the prompt and we can directly start
    inserting text into our file. Once you are done entering text in the file, press
    *Ctrl* + *D* to mark the end of the file and return to the prompt, as shown in
    the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Enter* 后，我们将返回提示符，可以直接开始向文件中插入文本。当你完成文本输入后，按下 *Ctrl* + *D* 来标记文件结束并返回提示符，如下图所示：
- en: '![](img/9a6af930-f006-4417-9b4c-3694ed84c25b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a6af930-f006-4417-9b4c-3694ed84c25b.png)'
- en: 'If you want to use the `cat` command to create a file from a bash script, we
    have to use an operator known as a here document. It can be any arbitrary string
    that can be used to mark the beginning of a file and end when repeated in a new
    line, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用 `cat` 命令从 bash 脚本中创建文件，我们必须使用一种称为 here document 的操作符。它可以是任何任意字符串，用来标记文件的开始，并在新的一行中重复出现时标记文件的结束，如下图所示：
- en: '![](img/64ee8f74-e47e-45ec-807c-2385638dbacf.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64ee8f74-e47e-45ec-807c-2385638dbacf.png)'
- en: Create an empty text file using the touch command
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 touch 命令创建一个空文本文件
- en: 'The original purpose of the `touch` command is to update a file''s timestamp
    to the current date and time without modifying it. The `touch` command can also
    be used to create an empty file of size 0 bytes. We cannot enter any text in the file
    with the `touch` command, but we can create multiple new files with a single command.
    It is quite often used to create files that are intended to be used in future.
    The syntax of the `touch` command is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch` 命令的原始目的是更新文件的时间戳为当前的日期和时间，而不对文件内容进行修改。 `touch` 命令也可以用来创建一个大小为 0 字节的空文件。我们不能使用 `touch` 命令在文件中输入文本，但我们可以通过一个命令创建多个新文件。它通常用于创建计划将来使用的文件。 `touch` 命令的语法如下：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Examples of the `touch` command are shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `touch` 命令的示例：
- en: '![](img/e68599fa-72dc-4e5b-b6f0-c6f689e822b9.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e68599fa-72dc-4e5b-b6f0-c6f689e822b9.png)'
- en: Create a text file using the redirection symbol (>)
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重定向符号（>）创建一个文本文件
- en: 'We can also create a text file using the redirection symbol (`>`), which is
    used to redirect the output of a command to a file. If we use the redirection
    symbol alone without prefixing it with any command, then it will create an empty
    file of 0 bytes and remove the file''s content if a file already exists with the
    given name, as shown in the following command line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用重定向符号（`>`）创建文本文件，该符号用于将命令的输出重定向到文件。如果单独使用重定向符号而不前缀任何命令，它将创建一个空文件，大小为0字节，并且如果文件已存在，则会删除文件内容，如以下命令行所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we prefix the redirection symbol (`>`) with any command, then it creates
    a new file, which contains the output of the command preceding the redirection
    symbol, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在任何命令前加上重定向符号（`>`），它将创建一个新文件，其中包含重定向符号前命令的输出，如下图所示：
- en: '![](img/9fc28d53-3275-458f-9cbe-7bf65110478f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fc28d53-3275-458f-9cbe-7bf65110478f.png)'
- en: We can create one file at a time with the redirection symbol.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过重定向符号一次创建一个文件。
- en: Create a text file using the echo or printf command
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`echo`或`printf`命令创建文本文件
- en: 'Sometimes, it is necessary to create a short file that doesn''t require us
    to invoke the full text editor. In those scenarios, the `echo` or `printf` command
    is used with the redirection operator to create an empty file, or a file with
    a single line. This method of creating a file can be used in scripts also. Use
    the `echo` and `printf` command is shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要创建一个短小的文件，而不需要调用完整的文本编辑器。在这种情况下，可以使用`echo`或`printf`命令与重定向操作符一起创建空文件或包含单行内容的文件。创建文件的方法可以在脚本中使用，使用`echo`和`printf`命令的截图如下：
- en: '![](img/af920f38-673b-41be-b93b-d609dc6f43f1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af920f38-673b-41be-b93b-d609dc6f43f1.png)'
- en: Create a text file using the vi editor
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vi编辑器创建一个文本文件
- en: 'The vi editor is the most popular command-line editor and is the default editor
    in most Linux distributions. It has three modes of operation, which will be discussed
    later on in this chapter. To create a file with the vi editor, follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: vi编辑器是最流行的命令行编辑器，并且是大多数Linux发行版的默认编辑器。它有三种操作模式，稍后将在本章中讨论。要使用vi编辑器创建文件，请按以下步骤操作：
- en: '`vi` <filename> and press *Enter*'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vi` <文件名> 并按*Enter*'
- en: Press *I* to enter Insert Mode and add your text
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*I*键进入插入模式并添加文本
- en: Keep on adding the custom text to the file until you are done with it
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续向文件中添加自定义文本，直到完成
- en: Press the *Esc* key to enter Command Mode
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Esc*键进入命令模式
- en: Type `:wq` and press *Enter* to save and exit
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`:wq`并按*Enter*保存并退出
- en: 'The following screenshot displays a file being created in vi editor:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在vi编辑器中创建文件的过程：
- en: '![](img/aa6c4258-47f0-4374-80ba-299593649e9d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa6c4258-47f0-4374-80ba-299593649e9d.png)'
- en: Besides this method, there are other ways of creating a text file, such as using
    `nano`, `ed`, `joe`, `emacs`, or `pico` editors. You can try your hand at using
    them too.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这种方法，还可以使用其他方式创建文本文件，如使用`nano`、`ed`、`joe`、`emacs`或`pico`编辑器。你也可以尝试使用这些编辑器。
- en: Editing files with the vi editor
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vi编辑器编辑文件
- en: The vi editor is the most popular editor used to edit or create new files from
    a shell prompt. It comes in text-based as well graphical interface form, with
    extended features. This text-based editor is used to write a script, edit system
    configuration files, or develop the source code of a programming language. The
    name vi is pronounced as vee-eye.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: vi编辑器是最常用的编辑器，用于从Shell提示符编辑或创建新文件。它有文本界面和图形界面两种形式，且具有扩展功能。此文本编辑器用于编写脚本、编辑系统配置文件或开发编程语言的源代码。vi的发音为“vee-eye”。
- en: The **vim** (short for **vi improved**) version of the vi editor comes with
    many enhancements to make working with the vi editor easier. It supports extended
    features, such as syntax highlighting for many configuration files and programming
    languages. Whatever we learn about vi editor is applicable to vim also, so we
    will learn about the vi editor in this section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**vim**（**vi改进版**）版本的vi编辑器具有许多增强功能，使得使用vi编辑器更加便捷。它支持扩展功能，如为许多配置文件和编程语言提供语法高亮。我们在这一节中学习的关于vi编辑器的知识也适用于vim编辑器。'
- en: 'There are three modes of operation of the vi editor, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: vi编辑器有三种操作模式，具体如下：
- en: '**Command Mode**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令模式**'
- en: '**Insert Mode**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插入模式**'
- en: '**Line Mode**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行模式**'
- en: 'The following diagram shows the different modes of vi editor, along with the
    keys used to switch between them:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了vi编辑器的不同模式以及切换模式的键位：
- en: '![](img/e25e9699-866d-417c-8805-2f2fb470c7de.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e25e9699-866d-417c-8805-2f2fb470c7de.png)'
- en: 'When working with the vi editor, it is essential to keep track of the mode
    you are working in. Many commands and keystrokes behave differently in different
    modes. The following table describes the different modes and their features in
    brief:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用vi编辑器时，了解当前工作模式至关重要。许多命令和按键在不同模式下的行为不同。下表简要描述了不同模式及其特性：
- en: '| **Mode** | **Feature** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **模式** | **功能** |'
- en: '| Command Mode |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 命令模式 |'
- en: By default, `vi` editor starts in Command Mode
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，`vi`编辑器启动时处于命令模式
- en: Keystrokes in Command Mode are interpreted as commands to modify content
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令模式中的按键被解释为修改内容的命令
- en: In this mode, you can give commands to perform cut, delete, copy, and paste
    operations, and also use keystrokes to navigate in the file
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此模式下，您可以给出命令以执行剪切、删除、复制和粘贴操作，并使用按键在文件中导航
- en: Editing and the insertion of text are not possible in this mode
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此模式下无法编辑或插入文本
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Insert Mode |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 插入模式 |'
- en: Press the *I* key to switch to Insert Mode from Command Mode (pressing the *I* key
    to get into Insert Mode is the most commonly used option; however, there are other
    keys too that can be pressed to get into Insert Mode from Command Mode)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*I*键从命令模式切换到插入模式（按*I*键进入插入模式是最常用的选项；但是，还有其他键也可以按下来从命令模式进入插入模式）
- en: Insert Mode is used to modify or insert text into a file
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入模式用于修改或插入文件中的文本
- en: Insert Mode is indicated by`- - INSERT - -`at the bottom of the screen
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入模式在屏幕底部显示为`- - INSERT - -`
- en: Press the *Esc* key to exit Insert Mode and return to Command Mode
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Esc*键退出插入模式并返回命令模式
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Line Mode |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 行模式 |'
- en: Press the *:* key to switch to Line Mode from Command Mode only (we cannot switch
    to Line Mode from Insert Mode directly)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*:*键仅从命令模式切换到行模式（不能直接从插入模式切换到行模式）
- en: Line Mode is indicated by the *:*colon key at the beginning of the last line
    of the vi editor and the cursor is placed immediately after this colon
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行模式由vi编辑器最后一行的冒号键*:*开头指示，光标放在冒号之后
- en: We can use line editing commands inherited from older line editors, such as
    saving the contents of a file to disk, executing shell commands, and reading other
    files' contents, and so on
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用从旧的行编辑器继承的行编辑命令，如将文件内容保存到磁盘、执行shell命令以及读取其他文件的内容等。
- en: Requires pressing the *Enter* key after the command for execution
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要按下*Enter*键以执行命令
- en: Press the *Esc* key to exit Line Mode and return to Command Mode
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Esc*键退出行模式并返回命令模式
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: When you are in doubt and don't know your current working mode, press the *Esc*
    key twice and you will be back in Command Mode.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不确定当前工作模式时，按两次*Esc*键，即可返回命令模式。
- en: Working with files in vi editor
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vi编辑器处理文件
- en: 'To start the `vi` editor and edit the file, use the following syntax:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动vi编辑器并编辑文件，请使用以下语法：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the file exits with the specified filename, it will be opened and its contents
    are displayed in Command Mode. If the file does not exist, `vi` creates the file
    when it is saved on the disk for the first time. By default, `vi` uses an unnamed
    temporary buffer where the file is edited, until its contents are saved to disk.
    Now, let's understand the workings of `vi` in different modes in detail.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件以指定的文件名存在，则将打开该文件并在命令模式下显示其内容。如果文件不存在，则在首次保存到磁盘时，`vi`将创建该文件。默认情况下，`vi`使用无名临时缓冲区编辑文件，直到其内容保存到磁盘。现在，让我们详细了解`vi`在不同模式下的工作方式。
- en: Insert Mode
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入模式
- en: 'This mode is used to enter new text in a file or modify the existing text in
    the file. There are multiple ways to get into Insert Mode, as described in the
    following table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式用于在文件中输入新文本或修改现有文本。有多种方法可以进入插入模式，如下表所述：
- en: '| **Key** | **Usage** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **用法** |'
- en: '| *a* | Insert the text after the current cursor location, until the *Esc*
    key is pressed |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| *a* | 在当前光标位置之后插入文本，直到按下*Esc*键 |'
- en: '| *A* | Insert the text at the end of the line, until the *Esc* key is pressed
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| *A* | 在行的末尾插入文本，直到按下*Esc*键 |'
- en: '| *i* | Insert the text before the current cursor location, until the *Esc*
    key is pressed |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| *i* | 在当前光标位置之前插入文本，直到按下*Esc*键 |'
- en: '| *I* | Insert the text at the beginning of the line, until the *Esc* key is
    pressed |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| *I* | 在行的开头插入文本，直到按下*Esc*键 |'
- en: '| *o* | Insert a new line following the current cursor location for entering
    text, until the *Esc* key is pressed |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| *o* | 在当前光标位置后插入新的一行以输入文本，直到按下*Esc*键 |'
- en: '| *O* | Insert a new line preceding the current cursor location for entering
    text, until the *Esc* key is pressed |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| *O* | 在当前光标位置前插入新的一行以输入文本，直到按下*Esc*键 |'
- en: '| *s* | Delete the character at the current cursor location and remain in Insert
    Mode, until the *Esc* key is pressed |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| *s* | 删除当前光标位置的字符并保持在插入模式，直到按下*Esc*键 |'
- en: '| *S* | Delete the line with the current cursor location and get into Insert
    Mode, until the *Esc* key is pressed |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| *S* | 删除当前光标位置的行并进入插入模式，直到按下*Esc*键 |'
- en: '| *r* | Replace the character at the current cursor position |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| *r* | 替换当前光标位置的字符 |'
- en: '| *R* | Begin replacing text at the current cursor position until the *Esc*
    key is pressed |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| *R* | 从当前光标位置开始替换文本，直到按下*Esc*键 |'
- en: Line Mode
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行模式
- en: 'This mode is used to execute editing commands. The most popular operations
    performed in this mode include saving a file to disk, closing a file, and exiting
    vi editor without saving a file to disk. Line Mode operations require the *Enter*
    key to be pressed after the command is typed. Some of the most popular operations
    performed in Line Mode are described in the following table:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式用于执行编辑命令。在此模式下，最常执行的操作包括将文件保存到磁盘、关闭文件以及在不保存文件到磁盘的情况下退出vi编辑器。行模式操作需要在键入命令后按下*Enter*键。以下表格描述了行模式下最常用的一些操作：
- en: '| **Operations** | **USAGE** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **操作** | **用法** |'
- en: '| **Save and exit operations** |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| **保存并退出操作** |'
- en: '| `:q` | Quits the vi editor only if no changes have been made to the file
    being edited |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `:q` | 仅当编辑的文件没有做任何修改时，退出vi编辑器 |'
- en: '| `:q!` | Quits the vi editor without saving the current changes in the opened
    file |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `:q!` | 退出vi编辑器，不保存当前打开文件的修改 |'
- en: '| `:wq` | Writes/saves the contents of the file to disk and exits the vi editor
    |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `:wq` | 将文件内容写入/保存到磁盘并退出vi编辑器 |'
- en: '| `:x` | Writes/saves the contents of the file to disk and exits the vi editor
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `:x` | 将文件内容写入/保存到磁盘并退出vi编辑器 |'
- en: '| `ZZ` | Writes/saves the contents of the file to disk and exits the vi editor
    from Command Mode |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `ZZ` | 从命令模式写入/保存文件内容到磁盘并退出vi编辑器 |'
- en: '| **Write/save to file operations** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **写入/保存文件操作** |'
- en: '| `:w` | Writes/saves the contents of the file to disk |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `:w` | 将文件内容写入/保存到磁盘 |'
- en: '| `:w demo` | Writes/saves the contents of the file to the disk with the filename
    `demo` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `:w demo` | 将文件内容写入/保存到磁盘，文件名为`demo` |'
- en: '| `:w! demo2` | Overwrites the file with the filename `demo2` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `:w! demo2` | 强制覆盖文件，文件名为`demo2` |'
- en: '| `:f demo3` | Renames the current file to the filename `demo3` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `:f demo3` | 将当前文件重命名为`demo3` |'
- en: '| `:w >> demo4` | Appends the current file to the filename `demo4` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `:w >> demo4` | 将当前文件附加到文件名为`demo4`的文件 |'
- en: '| `:5,10w demo5` | Writes lines 5 through 10 to the filename `demo5` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `:5,10w demo5` | 将第5行至第10行写入文件名为`demo5`的文件 |'
- en: '| `:5,10w >>demo6` | Appends lines 5 through 10 to the filename `demo6` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `:5,10w >>demo6` | 将第5行至第10行附加到文件名为`demo6`的文件 |'
- en: '| `:r demo7` | Reads the contents of the file with the filename `demo7` at
    the current cursor position |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `:r demo7` | 在当前光标位置读取文件名为`demo7`的文件内容 |'
- en: '| `:e demo8` | Opens another file with the filename `demo8` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `:e demo8` | 打开文件名为`demo8`的另一个文件 |'
- en: '| `:e#` | Switches between opened vi windows (note: this works only if you
    have saved the file once on disk using `:w`) |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `:e#` | 在打开的vi窗口之间切换（注意：此命令仅在你已用`:w`将文件保存到磁盘后有效） |'
- en: '| **Search file contents** |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **搜索文件内容** |'
- en: '| `/<pattern>` | Searches the occurrence of specified patterns of text, inside
    buffers, in a forward direction. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `/<pattern>` | 在缓冲区中向前搜索指定文本模式的出现 |'
- en: '| `?` | Searches the occurrence of specified patterns of text, inside buffers,
    in a backward direction. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `?` | 在缓冲区中向后搜索指定文本模式的出现 |'
- en: '| `n` | Repeats the last search command in a forward direction |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `n` | 以正向方向重复上一次的搜索命令 |'
- en: '| `N` | Repeats the search command in the opposite direction |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `N` | 以相反方向重复搜索命令 |'
- en: 'We can perform substitution in Line Mode. By default, it performs substitution
    on the current line only; however, we can prefix the substitution command `s`
    with the address option to perform substitution on multiple lines, as shown in
    the following table:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在行模式中执行替换操作。默认情况下，替换操作只会在当前行进行；然而，我们可以在替换命令`s`前加上地址选项，以在多行中执行替换，如下表所示：
- en: '| **Line Mode command** | **Description** |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| **行模式命令** | **描述** |'
- en: '| **Substitution on current line** |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **在当前行进行替换** |'
- en: '| `:s/file/book` | Substitutes the first occurrence of file with book on the
    current line |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `:s/file/book` | 将当前行中第一个出现的file替换为book |'
- en: '| `:s/file/book/g` | Substitute all occurrences of file with book on the current
    line |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `:s/file/book/g` | 将当前行中所有的file替换为book |'
- en: '| **Substitution between address range (x,y) specified** |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **在指定的地址范围（x,y）之间进行替换** |'
- en: '| `:1,5s/cat/dog/` | Substitutes the first occurrence of cat with dog between
    lines 1 and 5 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `:1,5s/cat/dog/` | 在第1到第5行之间将第一个出现的cat替换为dog |'
- en: '| `:1,5s/cat/dog/g` | Substitutes all occurrences of cat with dog between lines
    1 and 5 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `:1,5s/cat/dog/g` | 在第1到第5行之间将所有出现的cat替换为dog |'
- en: '| **Substitution in current file (%)** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **在当前文件（%）中进行替换** |'
- en: '| `:%s/cat/dog/` | Substitutes the first occurrence of cat with dog throughout
    the file |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `:%s/cat/dog/` | 将文件中第一个出现的cat替换为dog |'
- en: '| `:%s/cat/dog/g` | Substitutes all occurrences of cat with dog in whole file
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `:%s/cat/dog/g` | 将文件中所有的cat替换为dog |'
- en: '| `:%s/cat/dog/gc` | Prompts before each substitution and substitutes all occurrences
    of cat with dog throughout the file |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `:%s/cat/dog/gc` | 在每次替换前进行提示，并将文件中所有的cat替换为dog |'
- en: Determining line numbers in Line Mode of vi editor
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定vi编辑器中行模式的行号
- en: Line Mode has the ability to determine the line number of the current line,
    or the total number of lines in a file being edited.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 行模式具有确定当前行号或正在编辑文件的总行数的能力。
- en: 'The following table lists the commands that are used to determine line numbers:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了用于确定行号的命令：
- en: '| **Command** | **Description** |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `:.=` | This returns the line number of the current line at the last line
    of the screen |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `:.=` | 该命令返回当前行的行号，并显示在屏幕的最后一行 |'
- en: '| `:=` | This returns the total number of lines at the last line of the screen
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `:=` | 该命令返回屏幕最后一行的总行数 |'
- en: '| *Ctrl* + *g* | This tells the current line number, along with the total number
    of lines in the file at the last line of the screen (Command Mode keystroke combination)
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl* + *g* | 该快捷键在屏幕的最后一行显示当前行号以及文件中的总行数（命令模式快捷键组合） |'
- en: How to execute external commands in Line Mode
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在行模式下执行外部命令
- en: 'Being able to execute shell commands from within the vi editor is sometimes
    quite useful. The following table lists some examples of shell command execution
    from Line Mode:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在vi编辑器中执行shell命令有时非常有用。下表列出了在行模式下执行shell命令的一些示例：
- en: '| **Line Mode command** | **Description** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **行模式命令** | **描述** |'
- en: '| `:! <shell command>` | Executes a shell command (press *Enter* to return
    to vi editor) |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `:! <shell command>` | 执行一个shell命令（按*Enter*键返回vi编辑器） |'
- en: '| `:!wc %` | Executes the `wc` command on the file opened in vi editor (`%`
    represents the file currently being edited) |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `:!wc %` | 在vi编辑器中执行`wc`命令（`%`表示当前正在编辑的文件） |'
- en: '| `:sh` | Temporarily returns to the shell prompt (type *Exit* to return to
    vi editor) |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `:sh` | 暂时返回到shell提示符（输入*Exit*返回vi编辑器） |'
- en: '| `:r !<shell command>` | Reads the output from a shell command into the opened
    file at the current cursor position |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `:r !<shell command>` | 将shell命令的输出读取到当前光标位置的文件中 |'
- en: Command Mode
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令模式
- en: 'This is the default mode of vi editor. In this mode, most navigation and browsing
    of file content is performed. Besides the navigation of file content, we also
    perform cut, delete, copy, and paste operations in Command Mode. The following
    table describes the popular navigation operations of Command Mode:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是vi编辑器的默认模式。在此模式下，大多数文件内容的浏览和导航操作都在此进行。除了文件内容的导航，还可以在命令模式下执行剪切、删除、复制和粘贴操作。下表描述了命令模式中的常用导航操作：
- en: '| **KEY** | **USAGE** |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **用法** |'
- en: '| **Move by character** |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **按字符移动** |'
- en: '| Arrow keys | For moving the cursor up, down, left, and right  |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 箭头键 | 用于将光标向上、下、左、右移动 |'
- en: '| `j` or `<enter>` | For move the cursor one line down  |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `j` 或 `<enter>` | 将光标向下一行移动 |'
- en: '| `k` | For move the cursor one line up  |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `k` | 将光标向上一行移动 |'
- en: '| `h` or Backspace  | For move the cursor one character left  |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `h` 或 Backspace | 将光标向左移动一个字符 |'
- en: '| `l` or Space  | For move the cursor one character right  |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `l` 或 空格键  | 将光标向右移动一个字符 |'
- en: '| **Move by word** |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| **按单词移动** |'
- en: '| `w` | For moving the cursor to the beginning of the next word |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `w` | 将光标移动到下一个单词的开头 |'
- en: '| `b` | For moving the cursor to the previous word |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 将光标移动到前一个单词 |'
- en: '| `e` | For moving the cursor to the end of the current word |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| **Move by line** |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| `0` or `^` | For moving the cursor to the beginning of the line |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| `$` | For moving the cursor to the end of the line |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| **Move by sentence** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| `(` | For moving the cursor to the beginning of the previous sentence |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| `)` | For moving the cursor to the end of the next sentence |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| **Move by paragraph** |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `{` | For moving the cursor to the beginning of the previous paragraph |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| `}` | For moving the cursor to the end of the next paragraph |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| **Move by screen** |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *F* or Page Down | For moving forward one screen |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *B* or Page Up | For moving backward one screen |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *D* | For moving down half a screen |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *U* | For moving up half a screen |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| *H* | First line on screen |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| *M* | Middle line on screen |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| *L* | Last line on screen |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| **Move inside whole document** |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: '| `:0` or `1G` or `gg` | For moving to the beginning of a file |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '| `:$` or `G` | For moving to the last line of a file |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| `:n` or `nG` | For moving to the nth line |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: Next, we will see how we to perform cut, delete, copy, and paste operations
    in Command Mode. The deletion of a character puts the text in an unnamed temporary
    buffer. The deleted character stored in a temporary buffer can be pasted at other
    places. Hence, we can say that a delete and paste operation is similar to a cut
    and paste operation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'The copying of character is known as yanking in context of vi editor. Copying
    (yanking) is performed using the yank `y` command. The following table describes
    various cut, copy, delete, and paste operations in vi editor:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '| **KEY** | **USAGE** |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
- en: '| **Deleting/cutting single characters** |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
- en: '| `x` | Deletes a character at the current cursor position |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: '| `Nx` | Deletes the N-1 character on the right-hand side, starting at the current
    cursor position |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
- en: '| `3x` | Deletes a total of three characters, starting with the character currently
    under the cursor position, followed by the next two on the right-hand side |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '| `X` | Deletes a character to the left of the cursor |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '| **Deleting/cutting larger chunks** |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
- en: '| `dw` | Deletes the word at the current position up to the next space or next
    punctuation |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: '| `db` | Deletes one word backward |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| `d$` | Deletes the line from the current cursor position to the end of the line
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| `d^` or `d0` | Deletes the line from the current cursor position to the beginning
    of the line |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| `dG` | Deletes from the current line to the end of the file |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: '| `dgg` | Deletes from the current line to the beginning of the file |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
- en: '| `D` | Deletes the rest of the current line |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: '| `dd` | Deletes the current line |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| `Ndd` or `dNd` | Deletes N lines from the current line |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| **Copying/yanking text (puts text into a temporary buffer)** |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: '| `yw` | Yanks (copies) a word forward |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| `yb` | Yanks (copies) a word backward |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| `y$` | Yanks (copies) the line from the current cursor position to the end
    of the line |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| `y^` or `y0` | Yanks (copies) the line from the current cursor position to
    the beginning of the line |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `y^` 或 `y0` | 从当前光标位置到行首复制（yank）当前行 |'
- en: '| `yy` | Yanks (copies) the current line and puts it in a buffer |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `yy` | 复制当前行并将其放入缓冲区 |'
- en: '| `Nyy` or `yNy` | Yanks (copies) N lines and puts them in a buffer |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `Nyy` 或 `yNy` | 复制 N 行并将其放入缓冲区 |'
- en: '| `p` | Pastes the contents below the current line (the yanked line or lines
    from the buffer) |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `p` | 粘贴当前行下方的内容（来自缓冲区的复制行） |'
- en: '| `P` | Pastes the contents above the current line |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `P` | 粘贴当前行上方的内容 |'
- en: '| `u` | Undoes the previous operation |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 撤销上一个操作 |'
- en: '| *Ctrl* + *R* | Redoes the last undo operation |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| *Ctrl* + *R* | 重做上次的撤销操作 |'
- en: Typing `vimtutor` at the prompt launches a concise, yet comprehensive, tutorial
    for beginners. This tutorial is short and to the point, to make beginners proficient
    in using vi editor.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符下输入 `vimtutor` 可以启动一个简洁但全面的初学者教程。该教程简短且切中要点，旨在使初学者熟练使用 vi 编辑器。
- en: Using text file manipulation tools
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文本文件操作工具
- en: System administrators, developers, and users need to work with text files, configuration
    files, and log files when working on Linux. Some of these files are large; some
    of them are small or medium. The data contained in these files frequently needs
    to be viewed, updated, or extracted. In this section, we will learn how to manage
    and manipulate text files on Linux.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员、开发人员和用户在使用 Linux 时需要处理文本文件、配置文件和日志文件。这些文件有的很大，有的较小或中等大小。这些文件中包含的数据通常需要查看、更新或提取。在本节中，我们将学习如何在
    Linux 上管理和操作文本文件。
- en: Different types of editor used to view file content
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的编辑器用于查看文件内容
- en: There are different types of editor used to view the content of files. Some
    editors, such as vim or nano, require the whole file to be loaded into memory
    first. These types of editors are not suitable for working on or viewing the contents
    of large log files, such as banking database log files, since as opening such
    large files can cause issues due to high memory utilization. However, in such
    scenarios, you can use the `less` command to view the contents of a large file,
    page by page, by scrolling up or down without the system having to place the entire
    file in memory at the beginning. This is much faster then a text editor, such
    as vi or nano.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的编辑器用于查看文件内容。一些编辑器，如 vim 或 nano，需要首先将整个文件加载到内存中。这些类型的编辑器不适合处理或查看大文件的内容，如银行数据库日志文件，因为打开这些大文件可能会由于高内存使用率而引发问题。然而，在这种情况下，您可以使用
    `less` 命令来逐页查看大文件的内容，无需将整个文件一开始就加载到内存中。这比使用 vi 或 nano 等文本编辑器要快得多。
- en: less command
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: less 命令
- en: 'This is used to view larger files because it is a paging program; it displays
    the content page by page with scroll-back capabilities. We can also perform search
    operations and navigate inside the files:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于查看较大文件的工具，因为它是一个分页程序；它按页显示内容，具有回滚功能。我们还可以执行搜索操作并在文件内部进行导航：
- en: '`/<string>`: To search for the `<string>` in a forward direction'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/<string>`: 在正向方向搜索`<string>`'
- en: '`?<string>`: To search for the `<string>` in a backward direction'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?<string>`: 在反向方向搜索`<string>`'
- en: '`q`: To quit the less editor'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`q`: 退出 less 编辑器'
- en: 'Examples of the `less` command are as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `less` 命令的示例：
- en: '[PRE4]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Main pages are displayed using the less utility.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 主页页面使用 less 工具显示。
- en: more command
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: more 命令
- en: 'This program is also used to view larger files as it is also a paging program.
    It is an older utility with fewer options. The example of the `more` command is
    shown in the following screenshot:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序也用于查看较大的文件，因为它也是一个分页程序。它是一个较老的工具，选项较少。以下截图展示了 `more` 命令的示例：
- en: '![](img/1cd997c4-4d42-4fc1-ac9a-9fd2ad99fed3.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cd997c4-4d42-4fc1-ac9a-9fd2ad99fed3.png)'
- en: cat command
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cat 命令
- en: '**Concatenate** (**cat**) is one of the most frequently used Linux command-line
    utilities. It is most commonly used to view the contents of a single file or concatenate
    the contents of multiple files that are not very long. It does not provide scroll-back
    functionality.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接**（**cat**）是最常用的 Linux 命令行工具之一。它最常用来查看单个文件的内容或连接多个不太长的文件的内容。它不提供回滚功能。'
- en: 'The following screenshot demonstrates utilization of `cat` command with single
    file:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了使用 `cat` 命令处理单个文件的示例：
- en: '![](img/29985cd9-f8d5-49fe-9534-9dbba8d186cc.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29985cd9-f8d5-49fe-9534-9dbba8d186cc.png)'
- en: 'The following screenshot demonstrates utilization of the `cat` command with
    multiple files:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68ab6bc2-b468-4853-ac90-3e3e36da5930.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: 'We can perform multiple tasks using the `cat` command, as listed in the following
    table:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| `cat file1 file2` | Concatenate `file1` and `file2` and display the output.
    The entire contents of `file1` is followed by the contents of `file2` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: '| `cat file1 file2 > file3` | Combine the contents of `file1` and `file2` and
    save the output into a new `file`, `file3` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
- en: '| `cat demo1 >> demo2` | Append the contents of the `demo1` file to the end
    of the existing file, `demo2` |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
- en: '| `cat > demo` | Any subsequent lines typed in the Terminal will go into the
    `demo` file, until *Ctrl* + *D* is pressed |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '| `cat >> demo` | Any subsequent lines typed are appended to the `demo` file,
    until *Ctrl* + *D* is pressed |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
- en: tac command
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tac` command is used to view the contents of a file backward from bottom
    to top, starting from the last line. The syntax of `tac` is exactly same as that
    of the `cat` command, as shown in the following screenshot:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d55336f6-77f1-402f-b167-09b41240d8b5.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: head command
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `head` command is used to print the first 10 lines of a file by default.
    However, it can be used with the `-n` option, or just `-<number>,` to display
    a different number of lines as specified. The filename whose contents are to be
    displayed is passed as an argument to the `head` command as shown in the following
    screenshot:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e2ed9df-e6fd-42bc-b29c-bec7f7552193.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: tail command
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tail` command is used to print last 10 lines of a file by default. However,
    like the `head` command, we can change the number number of lines to be displayed
    by using the `-n` option, or just `-<number>`, to display a different number of
    lines as specified. The filename whose contents are to be displayed is passed
    as an argument to the `tail` command, as shown in the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ec7febc-84bc-4754-bd72-e179e3b8fbc5.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: 'The `tail` command is more useful when we are troubleshooting issues using
    log files. It enables us to see the most recent lines of output by continuously
    displaying the addition of any new lines in the log file as soon as they appear.
    Thus, it enables us to monitor any current activity that is being reported or
    recorded, as shown in the following command line:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: wc command
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wc` command is used to count the lines, words, and characters in a file
    by default. It can accept `-l`, `-w`, or `-c` options to display only the lines,
    words, or characters respectively. The filename is passed as an argument to the `wc`
    command, as shown in the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45ff5d83-6de4-4cfd-aa08-d87ab6a16435.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: file command
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `file` command scans the header of a file and tells us what kind of file
    it is. The file type to be identified is passed as an argument to the `file` command,
    as shown in the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69e4de76-10e3-4d55-af7d-2fcd28659dd7.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: Viewing compressed files
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, we can view the contents of a compressed file without decompressing
    it. It is a good option to view large log files, which are compressed using this
    utility. There are multiple utilities that have the letter `z` prefixed to their
    name for working with `.gzip` compressed files.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'This table lists some `z` family commands:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
- en: '| `zcat demo.gz` | To view a compressed `demo.gz` file |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
- en: '| `zless demo.gz` or `zmore demo.gz` | To view a compressed `demo.gz` file page
    by page |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
- en: '| `zgrep -i host demo.gz` | To search inside a compressed `demo.gz` file |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
- en: '| `zdiff file1.gz file2.gz` | To compare two compressed files, `file1.gz`,
    and `file2.gz`, using the `diff` command |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
- en: '| `zcmp file1.gz file2.gz` | To compare two compressed files, `file1.gz` and `file2.gz` using
    the `cmp` command |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: Similarly, for other text manipulation, utilities can also be clubbed with other
    compression methods, such as `bzip2` and `xz`. To display the contents of the
    file inside the `bzip2` compressed archive, we can use `bzcat`, `bzless` command
    and, to display the contents of the file inside the `xz` archive, we can use the `xzcat`
    and `xzless` respectively.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Utilization of the `zcat` command is shown in the following screenshot:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecdb7299-13f2-40a2-a5c8-d9794ef84988.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
- en: 'Utilization of the `zgrep` command is shown in the following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e886fc2-7107-4863-a9d3-51253d9fde10.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: cut command
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cut` command is used to display only specific columns or characters from
    a text file or from other command outputs. For example, in the following command,
    we display the login names from the `/etc/passwd` file:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output upon execution of the preceding command is shown in the following screenshot:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a1d02dc-6d37-44b3-927e-aec39ebf3aa6.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: 'The following command line displays the first and third fields from a colon-delimited
    file (extra lines stripped from output):'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Output upon execution of the preceding command is shown in the following screenshot:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b844038-ae6c-4462-a22e-151352be7de0.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: 'The following command line display only the first four characters of every
    line in the `/etc/passwd` file:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: sort command
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sort` command is used to sort the lines of a text file in ascending or
    descending order, or sort as per a specified key. The following example illustrates
    the working of the `sort` command.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the `sort` command to sort the `/etc/passwd` file in ascending
    order is shown in the following screenshot:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18920c26-af7d-4bef-8de3-6a170cbe9c16.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: 'An example of the `sort` command to sort the `/etc/passwd` file by the third field
    numerically is shown in the following screenshot. Here, the `-t` option specifies
    a delimiter and the `-k` option specifies a field to be used for sorting:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98722473-905d-454b-972e-f5cee5ea7456.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
- en: uniq command
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `uniq` command is used to remove duplicate lines from a sorted file. It
    requires the duplicate entries to be in the adjacent lines and, hence, it is mostly
    used in combination with the `sort` command, which is used to sort the file contents
    first. The syntax of the `uniq` command is as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To count duplicate lines in the file, execute the command line, shown as follows
    :'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To display only the entries that are duplicates, execute the command line,
    shown as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: paste command
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `paste` command is used to combine fields from different files, or combine
    lines from multiple files. For example, we have two files, `f1` containing the
    employee name, and `f2` containing their employee ID and phone number.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'To paste content from `f1` and `f2`, execute the steps in the command line,
    as shown in the following screenshot:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa7d676b-b80a-4f63-b632-17b6ffe57aed.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
- en: 'To paste the contents separated with a delimiter, execute the `paste` command,
    as shown in the following screenshot:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecdc1ca5-1e7e-4e2a-bc42-5e97625a91f1.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
- en: The commonly used delimiters with the `-d` option are space, Tab, |, :, and
    comma. An enhanced version of the `paste` command is `join`, which can work on
    files that have similar columns.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting output to files and programs
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we execute any program, by default, its output or error is displayed on
    the screen. We can redirect the text output of a program to a file using the input/output
    redirection operator or to another program using pipes. For this, when any command
    is executed, there are three standard file streams (file descriptors) created
    and opened by the operating system. The streams are known as standard input (`stdin`),
    standard output (`stdout`), and standard error (`stderr`).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: The first stream is associated with `stdin` (numbered as 0) used to read input
    from keyboard. The second file stream is associated to `stdout` (numbered as 1)
    used by program to print output on screen, and the last file stream is `stderr`
    (numbered as 2), used by our program to print errors onscreen.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table list the different file descriptors (also known as channel)
    along with their numeric value, default connection and symbolic name:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '| **Channel description** | **Channel symbolic name** | **Default connection**
    | **Descriptor value** |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
- en: '| Standard input | `stdin` | Keyboard | 0 |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
- en: '| Standard output | `stdout` | Terminal | 1 |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
- en: '| Standard error | `stderr` | Terminal | 2 |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
- en: '| Other files | `filename` | Other files | 3+ |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
- en: Redirecting `stdout`/`stderr` to a file prevents any process output from appearing
    on the Terminal. Linux has got a special file such as `/dev/null` which discards
    any channel output redirected to it. The less than symbol (`<`) is used for input
    redirection from a file, the greater than symbol (`>`) is used for output redirection
    to a file, and if we repeat the use of the output redirection symbol (`>>`) twice
    instead of once, then it appends the contents to the filename suffixed to it.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table explains the use of input/output redirection operators:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator usage** | **Explanation** |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
- en: '| `Cmd > file` | Redirects the command output to a file |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
- en: '| `Cmd >> file` | Redirects and append the command output to the current file
    content |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2> file` | Redirects the command standard error to a file |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2>> file` | Appends the command standard error to the current file contents
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2> /dev/null` | Discards standard error messages by redirecting them
    to `/dev/null` |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
- en: '| `Cmd &> file` or`Cmd >file 2>&1` | Redirects both standard output and standard
    error messages to one file |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
- en: '| `Cmd >>file 2>&1` | Appends both standard output and standard error messages
    to one file |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
- en: 'Here are some examples of output redirection:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the last 10 lines of `/var/log/messages` to `f1` by executing following
    command:'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Append the `date` to the file named `f1` by executing following command:'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save the errors in a file named `error` and display the output onscreen by
    executing following command:'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save the output in a file named `result` and the error in a file named `error`:'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Save the output or error received upon execution of the `find` command in the
    common file named as `both`, as shown in the following command line:'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save the output in a file named `result` and discard the error messages by
    executing the following command:'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Read from a file using input redirection by executing the following command:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Pipes
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unix philosophy is to have simple and short programs (commands) used together
    to solve a complex problem, instead of having a complex program with several options.
    To accomplish this goal, pipes were created, which fetch the output of one command
    as input to another command. The symbol used for pipes is a vertical bar (`|`)
    between two or more commands, as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here are a few example showing the usage of pipes (redirecting the output from
    one program as an input to another program):'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'Paginate the long output of any command using pipes, as shown in the following
    example:'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Pipe multiple commands together as shown in the following example:'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Combine piping and redirection, as shown in the following example:'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Send standard output, as well as standard errors from the command, through
    a pipe to another process, as shown in the following example:'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: tee command
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The advantage of using pipes is that you don''t have to save the output of
    a command in temporary files before passing it to another subsequent command for
    processing. This saves disk space and improves the time of execution, since reading
    and writing to disk are generally the slowest bottlenecks in the system. And,
    if you require the input to be saved in a file before passing it to a subsequent
    command, Linux has another beautiful command, known as `tee`. The syntax of the `tee`
    command is as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is an example of `tee` command usage:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'Send the output of the `ls` command to the `wc` command and to a file named `listoffile`:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Send standard output, as well as standard errors from the command, through
    a pipe-through tee to another file and then to a subsequent command:'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using grep for text matching
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grep** (short for **Global** **Regular Expression Print**) is a command that
    is used extensively to as a text search tool in text files. It searches for a
    pattern in a file and prints the corresponding line, which contains the matching
    pattern. It scans files for specified patterns and can be used with regular expressions,
    as well as text strings. Its syntax is as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following table demonstrates when the `grep` command is used:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Usage** |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
- en: '| `grep ''student'' /etc/passwd` | Search for a string, `student`, in a file,
    `/etc/passwd`, and print all matching lines |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
- en: '| `grep -v ''student'' /etc/passwd` | Print all lines that do not contain the
    string `student` |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
- en: '| `grep -i ''STUDENT'' /etc/passwd` | Search for a string, `STUDENT`, in a
    case-insensitive manner and print all matching lines (`-i` ignore case) |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
- en: '| grep -c ''student'' /etc/passwd | Print the total number of lines that contain
    the text `student` in the `/etc/passwd` file |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
- en: '| `grep -rl ''student'' /etc/` | Search the directory recursively and print
    the filenames that have the string `student` |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
- en: '| `grep -rL ‘student’ /etc/` | Search the directory recursively and print the
    filenames that don''t have the string `student` |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
- en: '| `grep -n ''student'' /etc/passwd` | Print the line number, along with the
    line containing the pattern `student` |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
- en: '| `grep -A1 ''student'' /etc/passwd` | Print an additional one line after the
    match |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
- en: '| `grep -B1 ''student'' /etc/passwd` | Print an additional one line before
    the match |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| `grep -C1 ''student'' /etc/passwd` | Print an additional one line after,
    and one line before, the match |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| `grep -a ''dir'' /bin/mkdir` | Search inside the `/bin/mkdir` binary file and
    print the line containing the string `dir` |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: '| `grep ''root'' /etc/passwd` | Print the line containing the string `root`
    anywhere on a line |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
- en: '| `grep ''^root'' /etc/passwd` | Print the line that begins with the string
    `root` |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
- en: '| `grep ''bash$'' /etc/passwd` | Print the line that ends with the string `bash`
    |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
- en: '| `grep ''^$'' <filename>` | Print the empty lines from the file |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| `grep -v ''^$'' <filename>` | Print only non-empty lines from the file |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '| `grep ''[br]oot'' /etc/passwd` | Print the lines that contain either string
    beginning with the characters `b` or `r`, and followed by the string `oot`, anywhere
    on a line in the `/etc/passwd` file |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
- en: '| `who &#124; grep ''student''` | Print the line containing the string `student`
    by reading input from `stdin` |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
- en: 'An example of matching a string in a file using `grep` is shown in the following
    screenshot:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25d40cce-e273-419c-8cbd-a655d978e66a.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing those lines that do not contain the specified string
    using `grep` is shown in the following screenshot (some output stripped):'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58f82d23-389a-4c69-925a-34bc1b8f2e5c.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
- en: 'The `grep` command can be used with the `-c` option to count the occurrence
    of a specified pattern. The following example shows how to count the number of
    CPU cores in a system using `grep` command:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following screenshot shows how to use `grep` command to count the occurrence
    of `root` string in the `/etc/passwd` file:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77ac5c7d-9031-41ab-b013-a5343940422e.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing the line number, along with the matching lines using
    the `grep`, is shown in the following screenshot:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2dc99ff-c5f7-4919-a5d9-1c03ff28c0ad.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing the lines that begin with a specified string is shown
    in the following screenshot:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/293574db-f06c-4a0e-9bc1-41a005fee116.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
- en: Text extraction using sed and awk
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very often necessary to extract the same text repeatedly from a file.
    For such an operation, where we need to edit a file at the same place, or extract
    the same text from multiple files, we use `sed` and `awk`. There are multiple
    text extraction utilities. However, these utilities use fewer system resources,
    execute faster, and are simpler to use.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: sed
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the oldest and most popular Unix text processing tools. It is
    a non-interactive stream editor. It is typically used for filtering text, as well
    as performing text substitution and the non-interactive editing of text files.
    There are two main ways of invoking the `sed` command, as follows:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '`sed -e command <filename>`: Specify editing commands at the command line,
    operate on the filename specified, and display the output on the Terminal. Here,
    the `-e` command option allows us to specify multiple editing commands simultaneously
    at the command line.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sed -f scriptfile <filename>`: Specify a script file containing `sed` commands
    to operate on a specified filename and display the output on the Terminal.'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we discuss the most popular operations performed using `sed`, for example,
    substitution. The following table lists the basic syntax for substitution operations:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Usage** |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
- en: '| `sed ''s/original_string/new_string/s file` | Substitute the first occurrence
    of the original string in each line with a new string |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
- en: '| `sed ''s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string in each line with a new string specified |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
- en: '| `sed ''1,3s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string in each line with a new string from line one to line three
    in the same file |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
- en: '| `sed -i ''s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string with a new string in each line in the same file |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
- en: '**Using the `sed` utility with the print command**:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 'The `p` command will print the matching lines and the `-n` option suppresses
    standard output so that only matching lines are displayed, as shown in the following example:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Using the `sed` utility with the substitute** **command**:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'The `s` command will replace the matching string with a new string. The `s` option can
    be prefixed with a range to restrict the replacement to a specified number of
    lines, as shown in the following example:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Using the `sed` utility with delete command**:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `sed d` command will delete the empty and commented
    lines from `ntp.conf` and create a backup file of `ntp.conf` with the extension
    backup as `ntp.conf.backup`, as shown in the following command line:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Use the `-i` option with caution, because the changes, once made inside the
    file, are not reversible. It is always a better way to first use `sed` without
    the `-i` option and then redirect the output to a new file.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: awk
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `awk` command is used to extract data from a file and print specific contents.
    It is quite often used to restructure the data and construct reports. Its name
    is derived from the last names of its creators: Alfred Aho, Peter Weinberger,
    and Brian Kernighan. Its main features include the following:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: It is an interpreted programming language similar to C
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is used for data manipulation in files, and for retrieving and processing
    text from files
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It views files as records and fields
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has arithmetic and string operators
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has variables, conditional statements, and loops
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reads from a file or from a standard input device and outputs to a standard
    output device such as a Terminal
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its general invoking syntax is as follows:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The printing of a selected column or row from a file is the basic task generally
    performed using `awk`.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `awk` command is used to print the contents of
    a file line by line until the end of the file is reached:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the following example, `awk` command is used to print the first field (column)
    of the line containing the username `student`. Here `-F` option is used to set
    the field separator as `:`.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the following example, the `awk` command is used to print selective fields
    from the line containing the matching pattern in file `/etc/passwd`:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Finding a file (locate and find commands)
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we can quickly find the files we are looking for, it will definitely make
    us happier Linux users. We can search any directory or multiple directories for
    a file in a Linux system as and when needed. CentOS 7 has two popular utilities
    that are used to search for files:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: The `locate` command
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `find` command
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This utility performs a search through a previously created database of files
    and directories available on our system. It matches all entries that contain a
    specified character string. This sometimes returns a very long list of matching
    results, which can be further filtered using the `grep` command, as shown in the
    following command line:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `locate` command uses a database created by another program, `updatedb`.
    Most Linux systems run this program automatically once a day using a scheduler.
    However, we can update the `locate` command database any time by running the `updatedb`
    command on a Terminal.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Find
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Find is the most useful and often used utility in a Linux system. It traverses
    through the filesystem directory tree from any location to search for a file on
    a specified condition. Its general syntax is as follows:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can search for a file in the `/var` directory containing a specific string
    in its name, as shown in the following command line:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: When no argument (path) is given, it searches for a file in the current directory
    and its sub-directories only.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `find` command to search a file or directory in the `/usr` directory
    having the name `gcc`, as shown in the following command line:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can narrow down our search by specifying the type of file to search for,
    such as by using `d` for directories and `f` for files, as shown in the following
    command line:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Search for files above a particular size:**'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `find` command line is used to list the files with a size of
    `0` KB in the `/var` directory:'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following `find` command line is used to list files with a size of more
    than `2` MB in the `/var/log` directory:'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following `find` command line is used to find a file with the name messages,
    and then compress it using the `gzip` utility with `xargs`:'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Find all the `.jpg` images and archive them with `xargs` and `tar`, as shown
    in the following command line:'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Summary
  id: totrans-451
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning various methods for creating a text
    file. This was followed by taking a walk through the different text manipulation
    utilities that are helpful in performing daily operations. These utilities mainly
    included tools such as `head`, `tail`, `wc`, `sort`, `less` and `more`. Then,
    we learned the various techniques of input-output redirection into files and programs.
    After that, we had a quick tour of text filtering and extraction tools, such as `grep`,
    `sed`, and `awk`. Finally, we saw how to search files in CentOS 7 using the find
    and locate commands.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will learn about managing users and groups in CentOS
    7.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
