- en: Managing Text Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer systems are mostly used for editing, manipulating, or managing data.
    On Linux systems, this data is very often in the form of text files. In general,
    everything in Linux is a file, and having a solid understanding of working with
    text files is important. All important information in Linux is stored in text
    format files.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, our objective is to learn how to work with text files on the
    command line, using the most popular default text-based editor, vi, and other
    text file manipulation utilities. Then, we will learn how input/output redirection
    is executed in files and programs for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Different methods to create a text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing files with the vi editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using text file manipulation tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting output to files and programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using grep for text matching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a file using the locate and find command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different methods to create a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text files can be viewed and edited using any text editor that exists in Linux.
    However, before learning the editing part, we must have a basic understanding
    of different ways that can be used to create plain text files. Depending on the requirement,
    different methods can be used for text file creation. The most popular ones are
    described next.
  prefs: []
  type: TYPE_NORMAL
- en: Create a text file using the cat command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cat` command can be used to create a text file if we immediately want
    to add some text to a new blank file. The syntax of the `cat` command to create
    a file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After pressing *Enter*, we will return to the prompt and we can directly start
    inserting text into our file. Once you are done entering text in the file, press
    *Ctrl* + *D* to mark the end of the file and return to the prompt, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a6af930-f006-4417-9b4c-3694ed84c25b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to use the `cat` command to create a file from a bash script, we
    have to use an operator known as a here document. It can be any arbitrary string
    that can be used to mark the beginning of a file and end when repeated in a new
    line, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64ee8f74-e47e-45ec-807c-2385638dbacf.png)'
  prefs: []
  type: TYPE_IMG
- en: Create an empty text file using the touch command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The original purpose of the `touch` command is to update a file''s timestamp
    to the current date and time without modifying it. The `touch` command can also
    be used to create an empty file of size 0 bytes. We cannot enter any text in the file
    with the `touch` command, but we can create multiple new files with a single command.
    It is quite often used to create files that are intended to be used in future.
    The syntax of the `touch` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples of the `touch` command are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e68599fa-72dc-4e5b-b6f0-c6f689e822b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a text file using the redirection symbol (>)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also create a text file using the redirection symbol (`>`), which is
    used to redirect the output of a command to a file. If we use the redirection
    symbol alone without prefixing it with any command, then it will create an empty
    file of 0 bytes and remove the file''s content if a file already exists with the
    given name, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we prefix the redirection symbol (`>`) with any command, then it creates
    a new file, which contains the output of the command preceding the redirection
    symbol, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fc28d53-3275-458f-9cbe-7bf65110478f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can create one file at a time with the redirection symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Create a text file using the echo or printf command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, it is necessary to create a short file that doesn''t require us
    to invoke the full text editor. In those scenarios, the `echo` or `printf` command
    is used with the redirection operator to create an empty file, or a file with
    a single line. This method of creating a file can be used in scripts also. Use
    the `echo` and `printf` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af920f38-673b-41be-b93b-d609dc6f43f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a text file using the vi editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The vi editor is the most popular command-line editor and is the default editor
    in most Linux distributions. It has three modes of operation, which will be discussed
    later on in this chapter. To create a file with the vi editor, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vi` <filename> and press *Enter*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *I* to enter Insert Mode and add your text
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep on adding the custom text to the file until you are done with it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Esc* key to enter Command Mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `:wq` and press *Enter* to save and exit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot displays a file being created in vi editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa6c4258-47f0-4374-80ba-299593649e9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Besides this method, there are other ways of creating a text file, such as using
    `nano`, `ed`, `joe`, `emacs`, or `pico` editors. You can try your hand at using
    them too.
  prefs: []
  type: TYPE_NORMAL
- en: Editing files with the vi editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vi editor is the most popular editor used to edit or create new files from
    a shell prompt. It comes in text-based as well graphical interface form, with
    extended features. This text-based editor is used to write a script, edit system
    configuration files, or develop the source code of a programming language. The
    name vi is pronounced as vee-eye.
  prefs: []
  type: TYPE_NORMAL
- en: The **vim** (short for **vi improved**) version of the vi editor comes with
    many enhancements to make working with the vi editor easier. It supports extended
    features, such as syntax highlighting for many configuration files and programming
    languages. Whatever we learn about vi editor is applicable to vim also, so we
    will learn about the vi editor in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three modes of operation of the vi editor, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Command Mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insert Mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line Mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the different modes of vi editor, along with the
    keys used to switch between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e25e9699-866d-417c-8805-2f2fb470c7de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When working with the vi editor, it is essential to keep track of the mode
    you are working in. Many commands and keystrokes behave differently in different
    modes. The following table describes the different modes and their features in
    brief:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Mode** | **Feature** |'
  prefs: []
  type: TYPE_TB
- en: '| Command Mode |'
  prefs: []
  type: TYPE_TB
- en: By default, `vi` editor starts in Command Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystrokes in Command Mode are interpreted as commands to modify content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this mode, you can give commands to perform cut, delete, copy, and paste
    operations, and also use keystrokes to navigate in the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing and the insertion of text are not possible in this mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Insert Mode |'
  prefs: []
  type: TYPE_TB
- en: Press the *I* key to switch to Insert Mode from Command Mode (pressing the *I* key
    to get into Insert Mode is the most commonly used option; however, there are other
    keys too that can be pressed to get into Insert Mode from Command Mode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert Mode is used to modify or insert text into a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert Mode is indicated by`- - INSERT - -`at the bottom of the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Esc* key to exit Insert Mode and return to Command Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Line Mode |'
  prefs: []
  type: TYPE_TB
- en: Press the *:* key to switch to Line Mode from Command Mode only (we cannot switch
    to Line Mode from Insert Mode directly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line Mode is indicated by the *:*colon key at the beginning of the last line
    of the vi editor and the cursor is placed immediately after this colon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use line editing commands inherited from older line editors, such as
    saving the contents of a file to disk, executing shell commands, and reading other
    files' contents, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires pressing the *Enter* key after the command for execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *Esc* key to exit Line Mode and return to Command Mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: When you are in doubt and don't know your current working mode, press the *Esc*
    key twice and you will be back in Command Mode.
  prefs: []
  type: TYPE_NORMAL
- en: Working with files in vi editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the `vi` editor and edit the file, use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If the file exits with the specified filename, it will be opened and its contents
    are displayed in Command Mode. If the file does not exist, `vi` creates the file
    when it is saved on the disk for the first time. By default, `vi` uses an unnamed
    temporary buffer where the file is edited, until its contents are saved to disk.
    Now, let's understand the workings of `vi` in different modes in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Insert Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This mode is used to enter new text in a file or modify the existing text in
    the file. There are multiple ways to get into Insert Mode, as described in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Key** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| *a* | Insert the text after the current cursor location, until the *Esc*
    key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *A* | Insert the text at the end of the line, until the *Esc* key is pressed
    |'
  prefs: []
  type: TYPE_TB
- en: '| *i* | Insert the text before the current cursor location, until the *Esc*
    key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *I* | Insert the text at the beginning of the line, until the *Esc* key is
    pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *o* | Insert a new line following the current cursor location for entering
    text, until the *Esc* key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *O* | Insert a new line preceding the current cursor location for entering
    text, until the *Esc* key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *s* | Delete the character at the current cursor location and remain in Insert
    Mode, until the *Esc* key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *S* | Delete the line with the current cursor location and get into Insert
    Mode, until the *Esc* key is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| *r* | Replace the character at the current cursor position |'
  prefs: []
  type: TYPE_TB
- en: '| *R* | Begin replacing text at the current cursor position until the *Esc*
    key is pressed |'
  prefs: []
  type: TYPE_TB
- en: Line Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This mode is used to execute editing commands. The most popular operations
    performed in this mode include saving a file to disk, closing a file, and exiting
    vi editor without saving a file to disk. Line Mode operations require the *Enter*
    key to be pressed after the command is typed. Some of the most popular operations
    performed in Line Mode are described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operations** | **USAGE** |'
  prefs: []
  type: TYPE_TB
- en: '| **Save and exit operations** |'
  prefs: []
  type: TYPE_TB
- en: '| `:q` | Quits the vi editor only if no changes have been made to the file
    being edited |'
  prefs: []
  type: TYPE_TB
- en: '| `:q!` | Quits the vi editor without saving the current changes in the opened
    file |'
  prefs: []
  type: TYPE_TB
- en: '| `:wq` | Writes/saves the contents of the file to disk and exits the vi editor
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:x` | Writes/saves the contents of the file to disk and exits the vi editor
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ZZ` | Writes/saves the contents of the file to disk and exits the vi editor
    from Command Mode |'
  prefs: []
  type: TYPE_TB
- en: '| **Write/save to file operations** |'
  prefs: []
  type: TYPE_TB
- en: '| `:w` | Writes/saves the contents of the file to disk |'
  prefs: []
  type: TYPE_TB
- en: '| `:w demo` | Writes/saves the contents of the file to the disk with the filename
    `demo` |'
  prefs: []
  type: TYPE_TB
- en: '| `:w! demo2` | Overwrites the file with the filename `demo2` |'
  prefs: []
  type: TYPE_TB
- en: '| `:f demo3` | Renames the current file to the filename `demo3` |'
  prefs: []
  type: TYPE_TB
- en: '| `:w >> demo4` | Appends the current file to the filename `demo4` |'
  prefs: []
  type: TYPE_TB
- en: '| `:5,10w demo5` | Writes lines 5 through 10 to the filename `demo5` |'
  prefs: []
  type: TYPE_TB
- en: '| `:5,10w >>demo6` | Appends lines 5 through 10 to the filename `demo6` |'
  prefs: []
  type: TYPE_TB
- en: '| `:r demo7` | Reads the contents of the file with the filename `demo7` at
    the current cursor position |'
  prefs: []
  type: TYPE_TB
- en: '| `:e demo8` | Opens another file with the filename `demo8` |'
  prefs: []
  type: TYPE_TB
- en: '| `:e#` | Switches between opened vi windows (note: this works only if you
    have saved the file once on disk using `:w`) |'
  prefs: []
  type: TYPE_TB
- en: '| **Search file contents** |'
  prefs: []
  type: TYPE_TB
- en: '| `/<pattern>` | Searches the occurrence of specified patterns of text, inside
    buffers, in a forward direction. |'
  prefs: []
  type: TYPE_TB
- en: '| `?` | Searches the occurrence of specified patterns of text, inside buffers,
    in a backward direction. |'
  prefs: []
  type: TYPE_TB
- en: '| `n` | Repeats the last search command in a forward direction |'
  prefs: []
  type: TYPE_TB
- en: '| `N` | Repeats the search command in the opposite direction |'
  prefs: []
  type: TYPE_TB
- en: 'We can perform substitution in Line Mode. By default, it performs substitution
    on the current line only; however, we can prefix the substitution command `s`
    with the address option to perform substitution on multiple lines, as shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Line Mode command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Substitution on current line** |'
  prefs: []
  type: TYPE_TB
- en: '| `:s/file/book` | Substitutes the first occurrence of file with book on the
    current line |'
  prefs: []
  type: TYPE_TB
- en: '| `:s/file/book/g` | Substitute all occurrences of file with book on the current
    line |'
  prefs: []
  type: TYPE_TB
- en: '| **Substitution between address range (x,y) specified** |'
  prefs: []
  type: TYPE_TB
- en: '| `:1,5s/cat/dog/` | Substitutes the first occurrence of cat with dog between
    lines 1 and 5 |'
  prefs: []
  type: TYPE_TB
- en: '| `:1,5s/cat/dog/g` | Substitutes all occurrences of cat with dog between lines
    1 and 5 |'
  prefs: []
  type: TYPE_TB
- en: '| **Substitution in current file (%)** |'
  prefs: []
  type: TYPE_TB
- en: '| `:%s/cat/dog/` | Substitutes the first occurrence of cat with dog throughout
    the file |'
  prefs: []
  type: TYPE_TB
- en: '| `:%s/cat/dog/g` | Substitutes all occurrences of cat with dog in whole file
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:%s/cat/dog/gc` | Prompts before each substitution and substitutes all occurrences
    of cat with dog throughout the file |'
  prefs: []
  type: TYPE_TB
- en: Determining line numbers in Line Mode of vi editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Line Mode has the ability to determine the line number of the current line,
    or the total number of lines in a file being edited.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the commands that are used to determine line numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `:.=` | This returns the line number of the current line at the last line
    of the screen |'
  prefs: []
  type: TYPE_TB
- en: '| `:=` | This returns the total number of lines at the last line of the screen
    |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *g* | This tells the current line number, along with the total number
    of lines in the file at the last line of the screen (Command Mode keystroke combination)
    |'
  prefs: []
  type: TYPE_TB
- en: How to execute external commands in Line Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Being able to execute shell commands from within the vi editor is sometimes
    quite useful. The following table lists some examples of shell command execution
    from Line Mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Line Mode command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `:! <shell command>` | Executes a shell command (press *Enter* to return
    to vi editor) |'
  prefs: []
  type: TYPE_TB
- en: '| `:!wc %` | Executes the `wc` command on the file opened in vi editor (`%`
    represents the file currently being edited) |'
  prefs: []
  type: TYPE_TB
- en: '| `:sh` | Temporarily returns to the shell prompt (type *Exit* to return to
    vi editor) |'
  prefs: []
  type: TYPE_TB
- en: '| `:r !<shell command>` | Reads the output from a shell command into the opened
    file at the current cursor position |'
  prefs: []
  type: TYPE_TB
- en: Command Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the default mode of vi editor. In this mode, most navigation and browsing
    of file content is performed. Besides the navigation of file content, we also
    perform cut, delete, copy, and paste operations in Command Mode. The following
    table describes the popular navigation operations of Command Mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **KEY** | **USAGE** |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by character** |'
  prefs: []
  type: TYPE_TB
- en: '| Arrow keys | For moving the cursor up, down, left, and right  |'
  prefs: []
  type: TYPE_TB
- en: '| `j` or `<enter>` | For move the cursor one line down  |'
  prefs: []
  type: TYPE_TB
- en: '| `k` | For move the cursor one line up  |'
  prefs: []
  type: TYPE_TB
- en: '| `h` or Backspace  | For move the cursor one character left  |'
  prefs: []
  type: TYPE_TB
- en: '| `l` or Space  | For move the cursor one character right  |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by word** |'
  prefs: []
  type: TYPE_TB
- en: '| `w` | For moving the cursor to the beginning of the next word |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | For moving the cursor to the previous word |'
  prefs: []
  type: TYPE_TB
- en: '| `e` | For moving the cursor to the end of the current word |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by line** |'
  prefs: []
  type: TYPE_TB
- en: '| `0` or `^` | For moving the cursor to the beginning of the line |'
  prefs: []
  type: TYPE_TB
- en: '| `$` | For moving the cursor to the end of the line |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by sentence** |'
  prefs: []
  type: TYPE_TB
- en: '| `(` | For moving the cursor to the beginning of the previous sentence |'
  prefs: []
  type: TYPE_TB
- en: '| `)` | For moving the cursor to the end of the next sentence |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by paragraph** |'
  prefs: []
  type: TYPE_TB
- en: '| `{` | For moving the cursor to the beginning of the previous paragraph |'
  prefs: []
  type: TYPE_TB
- en: '| `}` | For moving the cursor to the end of the next paragraph |'
  prefs: []
  type: TYPE_TB
- en: '| **Move by screen** |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *F* or Page Down | For moving forward one screen |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *B* or Page Up | For moving backward one screen |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *D* | For moving down half a screen |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *U* | For moving up half a screen |'
  prefs: []
  type: TYPE_TB
- en: '| *H* | First line on screen |'
  prefs: []
  type: TYPE_TB
- en: '| *M* | Middle line on screen |'
  prefs: []
  type: TYPE_TB
- en: '| *L* | Last line on screen |'
  prefs: []
  type: TYPE_TB
- en: '| **Move inside whole document** |'
  prefs: []
  type: TYPE_TB
- en: '| `:0` or `1G` or `gg` | For moving to the beginning of a file |'
  prefs: []
  type: TYPE_TB
- en: '| `:$` or `G` | For moving to the last line of a file |'
  prefs: []
  type: TYPE_TB
- en: '| `:n` or `nG` | For moving to the nth line |'
  prefs: []
  type: TYPE_TB
- en: Next, we will see how we to perform cut, delete, copy, and paste operations
    in Command Mode. The deletion of a character puts the text in an unnamed temporary
    buffer. The deleted character stored in a temporary buffer can be pasted at other
    places. Hence, we can say that a delete and paste operation is similar to a cut
    and paste operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The copying of character is known as yanking in context of vi editor. Copying
    (yanking) is performed using the yank `y` command. The following table describes
    various cut, copy, delete, and paste operations in vi editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **KEY** | **USAGE** |'
  prefs: []
  type: TYPE_TB
- en: '| **Deleting/cutting single characters** |'
  prefs: []
  type: TYPE_TB
- en: '| `x` | Deletes a character at the current cursor position |'
  prefs: []
  type: TYPE_TB
- en: '| `Nx` | Deletes the N-1 character on the right-hand side, starting at the current
    cursor position |'
  prefs: []
  type: TYPE_TB
- en: '| `3x` | Deletes a total of three characters, starting with the character currently
    under the cursor position, followed by the next two on the right-hand side |'
  prefs: []
  type: TYPE_TB
- en: '| `X` | Deletes a character to the left of the cursor |'
  prefs: []
  type: TYPE_TB
- en: '| **Deleting/cutting larger chunks** |'
  prefs: []
  type: TYPE_TB
- en: '| `dw` | Deletes the word at the current position up to the next space or next
    punctuation |'
  prefs: []
  type: TYPE_TB
- en: '| `db` | Deletes one word backward |'
  prefs: []
  type: TYPE_TB
- en: '| `d$` | Deletes the line from the current cursor position to the end of the line
    |'
  prefs: []
  type: TYPE_TB
- en: '| `d^` or `d0` | Deletes the line from the current cursor position to the beginning
    of the line |'
  prefs: []
  type: TYPE_TB
- en: '| `dG` | Deletes from the current line to the end of the file |'
  prefs: []
  type: TYPE_TB
- en: '| `dgg` | Deletes from the current line to the beginning of the file |'
  prefs: []
  type: TYPE_TB
- en: '| `D` | Deletes the rest of the current line |'
  prefs: []
  type: TYPE_TB
- en: '| `dd` | Deletes the current line |'
  prefs: []
  type: TYPE_TB
- en: '| `Ndd` or `dNd` | Deletes N lines from the current line |'
  prefs: []
  type: TYPE_TB
- en: '| **Copying/yanking text (puts text into a temporary buffer)** |'
  prefs: []
  type: TYPE_TB
- en: '| `yw` | Yanks (copies) a word forward |'
  prefs: []
  type: TYPE_TB
- en: '| `yb` | Yanks (copies) a word backward |'
  prefs: []
  type: TYPE_TB
- en: '| `y$` | Yanks (copies) the line from the current cursor position to the end
    of the line |'
  prefs: []
  type: TYPE_TB
- en: '| `y^` or `y0` | Yanks (copies) the line from the current cursor position to
    the beginning of the line |'
  prefs: []
  type: TYPE_TB
- en: '| `yy` | Yanks (copies) the current line and puts it in a buffer |'
  prefs: []
  type: TYPE_TB
- en: '| `Nyy` or `yNy` | Yanks (copies) N lines and puts them in a buffer |'
  prefs: []
  type: TYPE_TB
- en: '| `p` | Pastes the contents below the current line (the yanked line or lines
    from the buffer) |'
  prefs: []
  type: TYPE_TB
- en: '| `P` | Pastes the contents above the current line |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Undoes the previous operation |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *R* | Redoes the last undo operation |'
  prefs: []
  type: TYPE_TB
- en: Typing `vimtutor` at the prompt launches a concise, yet comprehensive, tutorial
    for beginners. This tutorial is short and to the point, to make beginners proficient
    in using vi editor.
  prefs: []
  type: TYPE_NORMAL
- en: Using text file manipulation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators, developers, and users need to work with text files, configuration
    files, and log files when working on Linux. Some of these files are large; some
    of them are small or medium. The data contained in these files frequently needs
    to be viewed, updated, or extracted. In this section, we will learn how to manage
    and manipulate text files on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of editor used to view file content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different types of editor used to view the content of files. Some
    editors, such as vim or nano, require the whole file to be loaded into memory
    first. These types of editors are not suitable for working on or viewing the contents
    of large log files, such as banking database log files, since as opening such
    large files can cause issues due to high memory utilization. However, in such
    scenarios, you can use the `less` command to view the contents of a large file,
    page by page, by scrolling up or down without the system having to place the entire
    file in memory at the beginning. This is much faster then a text editor, such
    as vi or nano.
  prefs: []
  type: TYPE_NORMAL
- en: less command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used to view larger files because it is a paging program; it displays
    the content page by page with scroll-back capabilities. We can also perform search
    operations and navigate inside the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/<string>`: To search for the `<string>` in a forward direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`?<string>`: To search for the `<string>` in a backward direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q`: To quit the less editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples of the `less` command are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Main pages are displayed using the less utility.
  prefs: []
  type: TYPE_NORMAL
- en: more command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This program is also used to view larger files as it is also a paging program.
    It is an older utility with fewer options. The example of the `more` command is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cd997c4-4d42-4fc1-ac9a-9fd2ad99fed3.png)'
  prefs: []
  type: TYPE_IMG
- en: cat command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Concatenate** (**cat**) is one of the most frequently used Linux command-line
    utilities. It is most commonly used to view the contents of a single file or concatenate
    the contents of multiple files that are not very long. It does not provide scroll-back
    functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates utilization of `cat` command with single
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29985cd9-f8d5-49fe-9534-9dbba8d186cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot demonstrates utilization of the `cat` command with
    multiple files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68ab6bc2-b468-4853-ac90-3e3e36da5930.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can perform multiple tasks using the `cat` command, as listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `cat file1 file2` | Concatenate `file1` and `file2` and display the output.
    The entire contents of `file1` is followed by the contents of `file2` |'
  prefs: []
  type: TYPE_TB
- en: '| `cat file1 file2 > file3` | Combine the contents of `file1` and `file2` and
    save the output into a new `file`, `file3` |'
  prefs: []
  type: TYPE_TB
- en: '| `cat demo1 >> demo2` | Append the contents of the `demo1` file to the end
    of the existing file, `demo2` |'
  prefs: []
  type: TYPE_TB
- en: '| `cat > demo` | Any subsequent lines typed in the Terminal will go into the
    `demo` file, until *Ctrl* + *D* is pressed |'
  prefs: []
  type: TYPE_TB
- en: '| `cat >> demo` | Any subsequent lines typed are appended to the `demo` file,
    until *Ctrl* + *D* is pressed |'
  prefs: []
  type: TYPE_TB
- en: tac command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tac` command is used to view the contents of a file backward from bottom
    to top, starting from the last line. The syntax of `tac` is exactly same as that
    of the `cat` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d55336f6-77f1-402f-b167-09b41240d8b5.png)'
  prefs: []
  type: TYPE_IMG
- en: head command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `head` command is used to print the first 10 lines of a file by default.
    However, it can be used with the `-n` option, or just `-<number>,` to display
    a different number of lines as specified. The filename whose contents are to be
    displayed is passed as an argument to the `head` command as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e2ed9df-e6fd-42bc-b29c-bec7f7552193.png)'
  prefs: []
  type: TYPE_IMG
- en: tail command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `tail` command is used to print last 10 lines of a file by default. However,
    like the `head` command, we can change the number number of lines to be displayed
    by using the `-n` option, or just `-<number>`, to display a different number of
    lines as specified. The filename whose contents are to be displayed is passed
    as an argument to the `tail` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ec7febc-84bc-4754-bd72-e179e3b8fbc5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `tail` command is more useful when we are troubleshooting issues using
    log files. It enables us to see the most recent lines of output by continuously
    displaying the addition of any new lines in the log file as soon as they appear.
    Thus, it enables us to monitor any current activity that is being reported or
    recorded, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: wc command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `wc` command is used to count the lines, words, and characters in a file
    by default. It can accept `-l`, `-w`, or `-c` options to display only the lines,
    words, or characters respectively. The filename is passed as an argument to the `wc`
    command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45ff5d83-6de4-4cfd-aa08-d87ab6a16435.png)'
  prefs: []
  type: TYPE_IMG
- en: file command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `file` command scans the header of a file and tells us what kind of file
    it is. The file type to be identified is passed as an argument to the `file` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69e4de76-10e3-4d55-af7d-2fcd28659dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Viewing compressed files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, we can view the contents of a compressed file without decompressing
    it. It is a good option to view large log files, which are compressed using this
    utility. There are multiple utilities that have the letter `z` prefixed to their
    name for working with `.gzip` compressed files.
  prefs: []
  type: TYPE_NORMAL
- en: 'This table lists some `z` family commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `zcat demo.gz` | To view a compressed `demo.gz` file |'
  prefs: []
  type: TYPE_TB
- en: '| `zless demo.gz` or `zmore demo.gz` | To view a compressed `demo.gz` file page
    by page |'
  prefs: []
  type: TYPE_TB
- en: '| `zgrep -i host demo.gz` | To search inside a compressed `demo.gz` file |'
  prefs: []
  type: TYPE_TB
- en: '| `zdiff file1.gz file2.gz` | To compare two compressed files, `file1.gz`,
    and `file2.gz`, using the `diff` command |'
  prefs: []
  type: TYPE_TB
- en: '| `zcmp file1.gz file2.gz` | To compare two compressed files, `file1.gz` and `file2.gz` using
    the `cmp` command |'
  prefs: []
  type: TYPE_TB
- en: Similarly, for other text manipulation, utilities can also be clubbed with other
    compression methods, such as `bzip2` and `xz`. To display the contents of the
    file inside the `bzip2` compressed archive, we can use `bzcat`, `bzless` command
    and, to display the contents of the file inside the `xz` archive, we can use the `xzcat`
    and `xzless` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Utilization of the `zcat` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecdb7299-13f2-40a2-a5c8-d9794ef84988.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Utilization of the `zgrep` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e886fc2-7107-4863-a9d3-51253d9fde10.png)'
  prefs: []
  type: TYPE_IMG
- en: cut command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `cut` command is used to display only specific columns or characters from
    a text file or from other command outputs. For example, in the following command,
    we display the login names from the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output upon execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a1d02dc-6d37-44b3-927e-aec39ebf3aa6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command line displays the first and third fields from a colon-delimited
    file (extra lines stripped from output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output upon execution of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b844038-ae6c-4462-a22e-151352be7de0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following command line display only the first four characters of every
    line in the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: sort command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sort` command is used to sort the lines of a text file in ascending or
    descending order, or sort as per a specified key. The following example illustrates
    the working of the `sort` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the `sort` command to sort the `/etc/passwd` file in ascending
    order is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18920c26-af7d-4bef-8de3-6a170cbe9c16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example of the `sort` command to sort the `/etc/passwd` file by the third field
    numerically is shown in the following screenshot. Here, the `-t` option specifies
    a delimiter and the `-k` option specifies a field to be used for sorting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98722473-905d-454b-972e-f5cee5ea7456.png)'
  prefs: []
  type: TYPE_IMG
- en: uniq command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `uniq` command is used to remove duplicate lines from a sorted file. It
    requires the duplicate entries to be in the adjacent lines and, hence, it is mostly
    used in combination with the `sort` command, which is used to sort the file contents
    first. The syntax of the `uniq` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To count duplicate lines in the file, execute the command line, shown as follows
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To display only the entries that are duplicates, execute the command line,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: paste command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `paste` command is used to combine fields from different files, or combine
    lines from multiple files. For example, we have two files, `f1` containing the
    employee name, and `f2` containing their employee ID and phone number.
  prefs: []
  type: TYPE_NORMAL
- en: 'To paste content from `f1` and `f2`, execute the steps in the command line,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa7d676b-b80a-4f63-b632-17b6ffe57aed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To paste the contents separated with a delimiter, execute the `paste` command,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecdc1ca5-1e7e-4e2a-bc42-5e97625a91f1.png)'
  prefs: []
  type: TYPE_IMG
- en: The commonly used delimiters with the `-d` option are space, Tab, |, :, and
    comma. An enhanced version of the `paste` command is `join`, which can work on
    files that have similar columns.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting output to files and programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we execute any program, by default, its output or error is displayed on
    the screen. We can redirect the text output of a program to a file using the input/output
    redirection operator or to another program using pipes. For this, when any command
    is executed, there are three standard file streams (file descriptors) created
    and opened by the operating system. The streams are known as standard input (`stdin`),
    standard output (`stdout`), and standard error (`stderr`).
  prefs: []
  type: TYPE_NORMAL
- en: The first stream is associated with `stdin` (numbered as 0) used to read input
    from keyboard. The second file stream is associated to `stdout` (numbered as 1)
    used by program to print output on screen, and the last file stream is `stderr`
    (numbered as 2), used by our program to print errors onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table list the different file descriptors (also known as channel)
    along with their numeric value, default connection and symbolic name:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Channel description** | **Channel symbolic name** | **Default connection**
    | **Descriptor value** |'
  prefs: []
  type: TYPE_TB
- en: '| Standard input | `stdin` | Keyboard | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Standard output | `stdout` | Terminal | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Standard error | `stderr` | Terminal | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Other files | `filename` | Other files | 3+ |'
  prefs: []
  type: TYPE_TB
- en: Redirecting `stdout`/`stderr` to a file prevents any process output from appearing
    on the Terminal. Linux has got a special file such as `/dev/null` which discards
    any channel output redirected to it. The less than symbol (`<`) is used for input
    redirection from a file, the greater than symbol (`>`) is used for output redirection
    to a file, and if we repeat the use of the output redirection symbol (`>>`) twice
    instead of once, then it appends the contents to the filename suffixed to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table explains the use of input/output redirection operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Operator usage** | **Explanation** |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd > file` | Redirects the command output to a file |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd >> file` | Redirects and append the command output to the current file
    content |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2> file` | Redirects the command standard error to a file |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2>> file` | Appends the command standard error to the current file contents
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd 2> /dev/null` | Discards standard error messages by redirecting them
    to `/dev/null` |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd &> file` or`Cmd >file 2>&1` | Redirects both standard output and standard
    error messages to one file |'
  prefs: []
  type: TYPE_TB
- en: '| `Cmd >>file 2>&1` | Appends both standard output and standard error messages
    to one file |'
  prefs: []
  type: TYPE_TB
- en: 'Here are some examples of output redirection:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the last 10 lines of `/var/log/messages` to `f1` by executing following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the `date` to the file named `f1` by executing following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the errors in a file named `error` and display the output onscreen by
    executing following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the output in a file named `result` and the error in a file named `error`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the output or error received upon execution of the `find` command in the
    common file named as `both`, as shown in the following command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the output in a file named `result` and discard the error messages by
    executing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read from a file using input redirection by executing the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unix philosophy is to have simple and short programs (commands) used together
    to solve a complex problem, instead of having a complex program with several options.
    To accomplish this goal, pipes were created, which fetch the output of one command
    as input to another command. The symbol used for pipes is a vertical bar (`|`)
    between two or more commands, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few example showing the usage of pipes (redirecting the output from
    one program as an input to another program):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paginate the long output of any command using pipes, as shown in the following
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pipe multiple commands together as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Combine piping and redirection, as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send standard output, as well as standard errors from the command, through
    a pipe to another process, as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: tee command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The advantage of using pipes is that you don''t have to save the output of
    a command in temporary files before passing it to another subsequent command for
    processing. This saves disk space and improves the time of execution, since reading
    and writing to disk are generally the slowest bottlenecks in the system. And,
    if you require the input to be saved in a file before passing it to a subsequent
    command, Linux has another beautiful command, known as `tee`. The syntax of the `tee`
    command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of `tee` command usage:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Send the output of the `ls` command to the `wc` command and to a file named `listoffile`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send standard output, as well as standard errors from the command, through
    a pipe-through tee to another file and then to a subsequent command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using grep for text matching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grep** (short for **Global** **Regular Expression Print**) is a command that
    is used extensively to as a text search tool in text files. It searches for a
    pattern in a file and prints the corresponding line, which contains the matching
    pattern. It scans files for specified patterns and can be used with regular expressions,
    as well as text strings. Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table demonstrates when the `grep` command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''student'' /etc/passwd` | Search for a string, `student`, in a file,
    `/etc/passwd`, and print all matching lines |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -v ''student'' /etc/passwd` | Print all lines that do not contain the
    string `student` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -i ''STUDENT'' /etc/passwd` | Search for a string, `STUDENT`, in a
    case-insensitive manner and print all matching lines (`-i` ignore case) |'
  prefs: []
  type: TYPE_TB
- en: '| grep -c ''student'' /etc/passwd | Print the total number of lines that contain
    the text `student` in the `/etc/passwd` file |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -rl ''student'' /etc/` | Search the directory recursively and print
    the filenames that have the string `student` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -rL ‘student’ /etc/` | Search the directory recursively and print the
    filenames that don''t have the string `student` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -n ''student'' /etc/passwd` | Print the line number, along with the
    line containing the pattern `student` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -A1 ''student'' /etc/passwd` | Print an additional one line after the
    match |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -B1 ''student'' /etc/passwd` | Print an additional one line before
    the match |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -C1 ''student'' /etc/passwd` | Print an additional one line after,
    and one line before, the match |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -a ''dir'' /bin/mkdir` | Search inside the `/bin/mkdir` binary file and
    print the line containing the string `dir` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''root'' /etc/passwd` | Print the line containing the string `root`
    anywhere on a line |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''^root'' /etc/passwd` | Print the line that begins with the string
    `root` |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''bash$'' /etc/passwd` | Print the line that ends with the string `bash`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''^$'' <filename>` | Print the empty lines from the file |'
  prefs: []
  type: TYPE_TB
- en: '| `grep -v ''^$'' <filename>` | Print only non-empty lines from the file |'
  prefs: []
  type: TYPE_TB
- en: '| `grep ''[br]oot'' /etc/passwd` | Print the lines that contain either string
    beginning with the characters `b` or `r`, and followed by the string `oot`, anywhere
    on a line in the `/etc/passwd` file |'
  prefs: []
  type: TYPE_TB
- en: '| `who &#124; grep ''student''` | Print the line containing the string `student`
    by reading input from `stdin` |'
  prefs: []
  type: TYPE_TB
- en: 'An example of matching a string in a file using `grep` is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25d40cce-e273-419c-8cbd-a655d978e66a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing those lines that do not contain the specified string
    using `grep` is shown in the following screenshot (some output stripped):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58f82d23-389a-4c69-925a-34bc1b8f2e5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `grep` command can be used with the `-c` option to count the occurrence
    of a specified pattern. The following example shows how to count the number of
    CPU cores in a system using `grep` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how to use `grep` command to count the occurrence
    of `root` string in the `/etc/passwd` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77ac5c7d-9031-41ab-b013-a5343940422e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing the line number, along with the matching lines using
    the `grep`, is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2dc99ff-c5f7-4919-a5d9-1c03ff28c0ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An example of printing the lines that begin with a specified string is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/293574db-f06c-4a0e-9bc1-41a005fee116.png)'
  prefs: []
  type: TYPE_IMG
- en: Text extraction using sed and awk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very often necessary to extract the same text repeatedly from a file.
    For such an operation, where we need to edit a file at the same place, or extract
    the same text from multiple files, we use `sed` and `awk`. There are multiple
    text extraction utilities. However, these utilities use fewer system resources,
    execute faster, and are simpler to use.
  prefs: []
  type: TYPE_NORMAL
- en: sed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is one of the oldest and most popular Unix text processing tools. It is
    a non-interactive stream editor. It is typically used for filtering text, as well
    as performing text substitution and the non-interactive editing of text files.
    There are two main ways of invoking the `sed` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sed -e command <filename>`: Specify editing commands at the command line,
    operate on the filename specified, and display the output on the Terminal. Here,
    the `-e` command option allows us to specify multiple editing commands simultaneously
    at the command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sed -f scriptfile <filename>`: Specify a script file containing `sed` commands
    to operate on a specified filename and display the output on the Terminal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we discuss the most popular operations performed using `sed`, for example,
    substitution. The following table lists the basic syntax for substitution operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| `sed ''s/original_string/new_string/s file` | Substitute the first occurrence
    of the original string in each line with a new string |'
  prefs: []
  type: TYPE_TB
- en: '| `sed ''s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string in each line with a new string specified |'
  prefs: []
  type: TYPE_TB
- en: '| `sed ''1,3s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string in each line with a new string from line one to line three
    in the same file |'
  prefs: []
  type: TYPE_TB
- en: '| `sed -i ''s/original_string/new_string/g'' file` | Substitute all occurrences
    of the original string with a new string in each line in the same file |'
  prefs: []
  type: TYPE_TB
- en: '**Using the `sed` utility with the print command**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `p` command will print the matching lines and the `-n` option suppresses
    standard output so that only matching lines are displayed, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Using the `sed` utility with the substitute** **command**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `s` command will replace the matching string with a new string. The `s` option can
    be prefixed with a range to restrict the replacement to a specified number of
    lines, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Using the `sed` utility with delete command**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `sed d` command will delete the empty and commented
    lines from `ntp.conf` and create a backup file of `ntp.conf` with the extension
    backup as `ntp.conf.backup`, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Use the `-i` option with caution, because the changes, once made inside the
    file, are not reversible. It is always a better way to first use `sed` without
    the `-i` option and then redirect the output to a new file.
  prefs: []
  type: TYPE_NORMAL
- en: awk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `awk` command is used to extract data from a file and print specific contents.
    It is quite often used to restructure the data and construct reports. Its name
    is derived from the last names of its creators: Alfred Aho, Peter Weinberger,
    and Brian Kernighan. Its main features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It is an interpreted programming language similar to C
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is used for data manipulation in files, and for retrieving and processing
    text from files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It views files as records and fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has arithmetic and string operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has variables, conditional statements, and loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reads from a file or from a standard input device and outputs to a standard
    output device such as a Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its general invoking syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The printing of a selected column or row from a file is the basic task generally
    performed using `awk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `awk` command is used to print the contents of
    a file line by line until the end of the file is reached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the following example, `awk` command is used to print the first field (column)
    of the line containing the username `student`. Here `-F` option is used to set
    the field separator as `:`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, the `awk` command is used to print selective fields
    from the line containing the matching pattern in file `/etc/passwd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Finding a file (locate and find commands)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we can quickly find the files we are looking for, it will definitely make
    us happier Linux users. We can search any directory or multiple directories for
    a file in a Linux system as and when needed. CentOS 7 has two popular utilities
    that are used to search for files:'
  prefs: []
  type: TYPE_NORMAL
- en: The `locate` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `find` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This utility performs a search through a previously created database of files
    and directories available on our system. It matches all entries that contain a
    specified character string. This sometimes returns a very long list of matching
    results, which can be further filtered using the `grep` command, as shown in the
    following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `locate` command uses a database created by another program, `updatedb`.
    Most Linux systems run this program automatically once a day using a scheduler.
    However, we can update the `locate` command database any time by running the `updatedb`
    command on a Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Find
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Find is the most useful and often used utility in a Linux system. It traverses
    through the filesystem directory tree from any location to search for a file on
    a specified condition. Its general syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can search for a file in the `/var` directory containing a specific string
    in its name, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: When no argument (path) is given, it searches for a file in the current directory
    and its sub-directories only.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `find` command to search a file or directory in the `/usr` directory
    having the name `gcc`, as shown in the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We can narrow down our search by specifying the type of file to search for,
    such as by using `d` for directories and `f` for files, as shown in the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Search for files above a particular size:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `find` command line is used to list the files with a size of
    `0` KB in the `/var` directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `find` command line is used to list files with a size of more
    than `2` MB in the `/var/log` directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `find` command line is used to find a file with the name messages,
    and then compress it using the `gzip` utility with `xargs`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Find all the `.jpg` images and archive them with `xargs` and `tar`, as shown
    in the following command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began with learning various methods for creating a text
    file. This was followed by taking a walk through the different text manipulation
    utilities that are helpful in performing daily operations. These utilities mainly
    included tools such as `head`, `tail`, `wc`, `sort`, `less` and `more`. Then,
    we learned the various techniques of input-output redirection into files and programs.
    After that, we had a quick tour of text filtering and extraction tools, such as `grep`,
    `sed`, and `awk`. Finally, we saw how to search files in CentOS 7 using the find
    and locate commands.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will learn about managing users and groups in CentOS
    7.
  prefs: []
  type: TYPE_NORMAL
