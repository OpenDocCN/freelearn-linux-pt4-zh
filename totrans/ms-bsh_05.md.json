["```\nif [condition];\nthen\ncommand\nelse\ncommand\nfi\n\n```", "```\ncase expression in condition_1) command_1 command_n ;; condition_2) command_1 command_n ;; condition_n | z) command_1 command_n ;; esac\n\n```", "```\ncondition_x)\ncommand_1\ncommand_n\n;;\n\n```", "```\n#!/bin/bash\necho \"Please, give me some input\"\nread input\nif [[ $input =~ ^[[:digit:]]+$ ]]; \nthen\necho \"These are digits\"\nexit 0\nelif [[ $input =~ ^[[:alpha:]]+$ ]]; \nthen\necho \"These are chars\"\nexit 0\nelse\necho \"Dunno…\"\nexit 1\nfi\n\n```", "```\nzarrelli:~$ ./if-statement.sh Please, give me some input 123 These are digits zarrelli:~$ ./if-statement.sh Please, give me some input abc These are chars zarrelli:~$ ./if-statement.sh Please, give me some input 12a Dunno... zarrelli:~$ ./if-statement.sh Please, give me some input !der Dunno...\n\n```", "```\n#!/bin/bash\necho \"Please, give me some input\"\nread input\ncase ${input//[[:alpha:]]} in\n\"\") \necho \"There were alphabetic chars only\" \nexit 0\n;;\n*[[:alnum:]]*) \necho \"There were digits in the string\"\nexit 0\n;;\n*) \necho \"There were non alphanumeric chars\" \nexit 1\n;;\nesac\n\n```", "```\n#!/bin/bash\ncase \"$1\" in\nstart)\n:\nexit 0\n;;\nstop)\n:\nexit 0\n;;\nstatus)\n:\nexit 0\n;;\nrestart)\n:\nexit 0\n;;\ncondrestart)\nif $condition\nthen\nexit 0\nfi\nexit 1\n;;\n*)\necho $\"Usage: $0 {start|stop|restart|condrestart|status}\"\nexit 1\n;;\nesac\nexit 0\n\n```", "```\nstring1 | string2 | stringn) do_something do_somethingn ;;\n\n```", "```\n#!/bin/bash\ncase \"$1\" in\nstart)\necho \"We are starting...\"\nexit 0\n;;\nstop)\necho \"We are stopping...\"\nexit 0\n;;\nstatus)\necho \"We are checking the status...\"\nexit 0\n;;\nrestart)\necho \"We are restarting...\"\nexit 0\n;;\n*)\necho $\"Usage: $0 {start|stop|restart|status}\"\nexit 1\n;;\nesac\nexit 0\n\n```", "```\nzarrelli:~$ ./terminators.sh Usage: ./terminators.sh {start|stop|restart|status}\n\n```", "```\nzarrelli:~$ ./terminators.sh start We are starting... zarrelli:~$ ./terminators.sh stop We are stopping... zarrelli:~$ ./terminators.sh restart We are restarting... zarrelli:~$ ./terminators.sh status We are checking the status...\n\n```", "```\nrestart) echo \"We are checking the status...\" exit 0 ;&\n\n```", "```\nzarrelli:$ ./terminators.sh status We are checking the status...\n\n```", "```\nzarrelli:~$ ./terminators-last.sh status We are checking the status... We are restarting...\n\n```", "```\nrestart) echo \"We are restarting...\" ;;&\n\n```", "```\nzarrelli:~$ ./terminators-last.sh status We are checking the status... We are restarting... Usage: ./terminators-last.sh {start|stop|restart|status}\n\n```", "```\nzarrelli:~$ ./terminators-last.sh status We are checking the status... Usage: ./terminators-last.sh {start|stop|restart|status}\n\n```", "```\nrestart | status) echo \"We are restarting...\" ;&\n\n```", "```\nzarrelli:~$ ./terminators-last.sh status We are checking the status... We are restarting... Usage: ./terminators-last.sh {start|stop|restart|status}\n\n```", "```\n#!/bin/bash\nclear\necho -n \"May I create an archive out of the current directory files? [yes or no]: \"\nread input\ncase $input in\n[yY] | [yY][eE][sS] )\necho -e\necho \"Yes, of course...I am proceeding\"\necho -e \"Archiving the following files\\n\"\nnow=$(date +%Y.%m.%d.%H.%M.%S)\nfilename=${PWD##*/}\ntar cvzf ${now}.${filename}.tgz *\necho -e\necho \"Archive $now.${filename}.tgz created!\"\n;;\n[nN] | [nN][oO] )\necho -e\necho \"No, so have a lovely day\".;\necho -e\nexit 1\n;;\n*)\necho -e\necho \"Please just answer yes or no, y, n, in lower or capital.\"\necho -e\n;;\nesac\n\n```", "```\nfilename=${PWD##*/} tar cvzf ${now}.${filename}.tgz *\n\n```", "```\nMay I create an archive out of the current directory files? [yes or no]: yEs Yes, of course...I am proceeding Archiving the following files... base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh Archive 2017.02.26.12.24.55.Scripts.tgz created! And check if the archive has been really created: zarrelli:~$ tar -tf 2017.02.26.12.24.55.Scripts.tgz base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh\n\n```", "```\nzarrelli:~$ ls -A1 2017.02.26.12.24.55.Scripts.tgz base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh\n\n```", "```\nzarrelli:~$ mkdir test zarrelli:~$ cp * test cp: -r not specified; omitting directory 'test' zarrelli:~$ chmod -R 0550 test\n\n```", "```\nMay I create an archive out of the current directory files? [yes or no]: yes Yes, of course...I am proceeding Archiving the following files... base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh tar (child): 2017.02.27.08.40.03.test.tgz: Cannot open: Permission denied tar (child): Error is not recoverable: exiting now tar: Child returned status 2 tar: Error is not recoverable: exiting now Archive 2017.02.27.08.40.03.test.tgz created!\n\n```", "```\nzarrelli:~$ ls -A1 base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh\n\n```", "```\ntar cvzf $now.${filename}.tgz * if [ $? -ne 0 ] then echo \"Sorry there was an issue creating the archive...\" exit 1 else echo -e echo \"Archive ${now}.${filename}.tgz created!\" exit 0 fi ;;\n\n```", "```\nMay I create an archive out of the current directory files? [yes or no]: yes Yes, of course...I am proceeding Archiving the following files... tar (child): 2017.02.27.09.20.17.test.tgz: Cannot open: Permission denied tar (child): Error is not recoverable: exiting now base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh tar: 2017.02.27.09.20.17.test.tgz: Cannot write: Broken pipe tar: Child returned status 2 tar: Error is not recoverable: exiting now Sorry there was an issue creating the archive…\n\n```", "```\nMay I create an archive out of the current directory files? [yes or no]: yes Yes, of course...I am proceeding Archiving the following files... base.sh case-statement.sh if-statement.sh terminators-last.sh terminators.sh user-case.sh Sorry there was an issue creating the archive.\n\n```", "```\n[yY] | [yY][eE][sS] ) echo -e echo \"Yes, of course...I am proceeding\" echo -e \"Archiving the following files...\\n\" now=$(date +%Y.%m.%d.%H.%M.%S) filename=${PWD##*/} if tar cvzf $now.${filename}.tgz * 2>/dev/null then echo -e echo \"Archive ${now}.${filename}.tgz created!\" exit 0 else echo \"Sorry there was an issue creating the archive...\" exit 1 fi ;;\n\n```", "```\nzarrelli:~$ rm base.sh && echo \"File deleted\" || echo \"File not deleted\" rm: cannot remove 'base.sh': Permission denied File not deleted\n\n```", "```\nzarrelli:~$ touch test1 zarrelli:~$ rm test1 && echo \"File deleted\" || echo \"File not deleted\" File deleted\n\n```", "```\n#!/bin/bash -e\n\n```", "```\nfriend_1=Anthony friend_2=Mike friend_3=Noel friend_4=Tarek friend_5=Dionysios\n\n```", "```\nfriends=(Anthony Mike Noel Tarek Dionysios)\n\n```", "```\nfriends[6]=Claudia\n\n```", "```\nzarrelli:~$ friends=(Anthony Mike Noel Tarek Dionysios) ; echo ${friends[0]} ; echo ${friends[4]} ; echo ${friends[5]} ; friends[5]=Claudia ; echo ${friends[5]} Anthony Dionysios Claudia\n\n```", "```\nfriends[-2]=Ilaria\n\n```", "```\nzarrelli:~$ echo ${friends[@]} Anthony Mike Noel Tarek Ilaria Claudia\n\n```", "```\narray_name=(element_1 element_2 element_n)\n\n```", "```\narray_name[index]\n\n```", "```\nzarrelli:~$ test[2]=\"Here I am!\" ; for i in {0..5} ; do echo $i ${test[$i]} ; done 0 1 2 Here I am! 3 4 5 declare -a array_name\n\n```", "```\n#!/bin/bash\ndeclare -a friends\nclear\necho -n \"Can you please tell me the name of some of your friends: \"\nread -a friends\necho \"So, your friends are: ${friends[@]}\"\n\n```", "```\nCan you please tell me the name of some of your friends: Ilaria Max Ron So, your friends are: Ilaria Max Ron\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nclear\necho -n \"Can you please tell me the name of one of your friends: \"\nread name\necho -n \"And now his email address: \"\nread address\nfriends[$name]=${address}\necho -e \"So, your friend name is: ${!friends[@]}\\nHis email address is: ${friends[@]}\"\n\n```", "```\nCan you please tell me the name of one of your friends: Giorgio Zarrelli And now his email address: giorgio@whatever.net So, your friend name is: Giorgio Zarrelli His email address is: giorgio@whatever.net\n\n```", "```\nCan you please tell me the name of one of your friends: And now his email address: ./declare-array-associative.sh: line 9: friends[$name]: bad array subscript So, your friend name is: His email address is: \n\n```", "```\nread name if [[ -z \"$name\" ]] then echo \"The name value cannot be blank\" exit 1 fi\n\n```", "```\n#!/bin/bash\nIFS=\",\"\ndeclare friends\nclear\necho -n \"Can you please tell me the name of some of your friends: \"\nread -a friends\necho \"So, your friends are: \"\nfor i in ${!friends[*]}\ndo \necho \"$i - ${friends[$i]}\"\ndone\n\n```", "```\nCan you please tell me the name of some of your friends: Anthony Mike So, your friends are: 0 - Anthony Mike\n\n```", "```\nCan you please tell me the name of some of your friends: Noel,Tarek So, your friends are: 0 - Noel 1 – Tarek\n\n```", "```\n#!/bin/bash\nIFS=\",\"\nTMOUT=3\ndeclare friends\nclear\necho -n \"Can you please tell me the name of some of your friends: \"\nread -a friends\nif [ ${#friends[@]} -eq 0 ]\nthen\necho \"You did not provide me with any names\"\nexit 1\nelse\necho \"So, your friends are: \"\nfor i in ${!friends[*]}\ndo \necho \"$i - ${friends[$i]}\"\ndone\nfi\nexit 0\n\n```", "```\nCan you please tell me the name of some of your friends: You did not provide me with any names\n\n```", "```\nCan you please tell me the name of some of your friends: Anthony,Mike,Tarek So, your friends are: 0 - Anthony 1 - Mike 2 - Tarek\n\n```", "```\nzarrelli:~$ cat friends.txt Anthony Dionysios Ilaria Mike Noel Tarek\n\n```", "```\n#!/bin/bash\ndeclare -a friends\necho -e\necho -e \"Reading friends list from friends.txt file...\"\nmapfile friends < friends.txt\necho -e \"File content loaded!\"\necho -e \"So, your friends are: \\n${friends[@]}\"\n\n```", "```\nzarrelli:~$ ./mapfile-array.sh Reading friends list from friends.txt file... File content loaded! So, your friends are: Anthony Dionysios Ilaria Mike Noel Tarek\n\n```", "```\narray_name[i]=value\n\n```", "```\nzarrelli:~$ my_array[$((3*2))]=my_value ; echo ${my_array[6]} my_value\n\n```", "```\nmy_array=my_other_value ; for i in {0..6} ; do echo $i ${my_array[$i]} ; done 0 my_other_value 1 2 3 4 5 6 my_value\n\n```", "```\nzarrelli:~$ my_associative=my_value ; for i in {0..5} ; do echo $i ${my_associative[$i]} ; done 0 my_value 1 2 3 4 5\n\n```", "```\nzarrelli:~$ friends=(Anthony Mike Noel Tarek Dionysios) ; echo ${friends[0]} ; echo ${friends[4]} ; echo ${friends[5]} ; friends[5]=Claudia ; echo ${friends[5]} Anthony Dionysios\n\n```", "```\nzarrelli:~/$ friends=(Anthony Mike Noel Tarek Dionysios) ; echo -n \"Old array values: ${friends[@]}\" ; friends=(Ilaria) ; echo -e ; echo -n \"New array values: ${friends[@]}\" ; echo -e Old array values: Anthony Mike Noel Tarek Dionysios New array values: Ilaria\n\n```", "```\nzarrelli:~$ friends=(Anthony Mike Noel Tarek Dionysios) ; echo -n \"Old array values:${friends[@]}\" ; friends+=(Ilaria) ; echo -e ; echo -n \"New array values: ${friends[@]}\" ; echo -e Old array values:Anthony Mike Noel Tarek Dionysios New array values: echo Anthony Mike Noel Tarek Dionysios Ilaria\n\n```", "```\nzarrelli:~$ my_array=([2]=first_value [4]=second_value) ; for i in {0..5} ; do echo $i ${my_array[$i]} ; done 0 1 2 first_value 3 4 second_value 5\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\nfor i in Mike Anthony\ndo \necho \"$i - ${friends[$i]}\"\ndone\nAnd now let's try it:\nzarrelli:~$ ./associative.sh \nMike - is a friend\nAnthony - is another friend\n\n```", "```\nzarrelli:~$ mapfile < friends.txt ; echo ${MAPFILE[@]} Anthony Dionisios Ilaria Mike Noel Tarek\n\n```", "```\n${my_array[i]} \n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[-3]}\" third value\n\n```", "```\nmy_associative=([George]=first_value [Anthony]=second_value) ; echo ${my_associative[Anthony]} second_value\n\n```", "```\n${my_array[@]} ${my_array[*]} ${my_associative[@]} ${my_associative[*]}\n\n```", "```\nzarrelli:~$ echo ${my_array[@]} first value second value third value fourth value fifth value zarrelli:~$ echo ${my_array[*]} first value second value third value fourth value fifth value zarrelli:~$ echo ${my_associative[@]} my_value second_value first_value zarrelli:~$ echo ${my_associative[*]} my_value second_value first_value\n\n```", "```\n${my_array[@]:S:O} ${my_array[*]:S:O}\n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[@]:3:2}\" fourth value fifth value zarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[*]:3:2}\" fourth value fifth value\n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[*]:2}\" third value fourth value fifth value\n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[@]%%fou*}\" first value second value third value fifth value\n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[@]#s?cond}\" first value value third value fourth value fifth value\n\n```", "```\nzarrelli:~$ my_array=(\"first value\" \"second value\" \"third value\" \"fourth value\" \"fifth value\") ; echo \"${my_array[@]/third/forth-1}\" first value second value forth-1 value fourth value fifth value\n\n```", "```\nzarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; unset my_array ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: zarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; unset my_array[@] ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: zarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; unset my_array[*] ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: \n\n```", "```\nzarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; unset my_array[2] ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: one two four five\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\nunset friends[Mike]\nfor i in Mike Anthony\ndo \necho \"$i - ${friends[$i]}\"\ndone\n\n```", "```\nzarrelli:~$ ./associative-remove.sh Mike - Anthony - is another friend\n\n```", "```\nzarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; my_array[2]=\"\" ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: one two four five\n\n```", "```\nzarrelli:~$ my_array=(one two three four five) ; echo \"The content of the array is: ${my_array[@]}\" ; my_array=() ; echo \"Now the content of the array is: ${my_array[@]}\" The content of the array is: one two three four five Now the content of the array is: \n\n```", "```\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\") friends[Mike]=\"\" for i in Mike Anthony\n\n```", "```\nzarrelli:~$ ./associative-remove.sh Mike - Anthony - is another friend\n\n```", "```\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\") friends=() for i in Mike Anthony\n\n```", "```\nzarrelli:~$ ./associative-remove.sh Mike - Anthony - \n\n```", "```\n${#array_name[index]}\n\n```", "```\nmy_array=(one two three four five) ; echo \"The length of ${my_array[4]} is of ${#my_array[4]} characters\" The length of five is of 4 characters\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\necho \"The lenght of \\\"${friends[Anthony]}\"\\ is ${#friends[Anthony]}\"\nAnd executing it gives us:\nzarrelli:~$ ./associative-count.sh \nThe lenght of \"is another friend\" is 17\n\n```", "```\nzarrelli:~$ my_array=(one two three four five) ; echo \"We have ${#my_array[*]} elements in the array\" We have 5 elements in the array\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\necho \"We have ${#friends[@]} elements in the array\"\n\n```", "```\nzarrelli:~$ ./associative-elements.sh We have 2 elements in the array\n\n```", "```\n#!/bin/bash\ndeclare -a my_array\nmy_array=(\"one\" \"two\" \"three\" \"four\" \"five\")\nfor (( i=0 ; i<${#my_array[*]} ; i++ ));\ndo \necho \"${my_array[i]}\" \ndone\n\n```", "```\nzarrelli:~$ ./loop1.sh one two three four five\n\n```", "```\n#!/bin/bash\ndeclare -a my_array\nmy_array=(\"one\" \"two\" \"three\" \"four\" \"five\")\nfor i in ${my_array[*]} ; \ndo \necho \"$i\" \ndone\n\n```", "```\nzarrelli:~$ ./loop2.sh one two three four five\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\nfor i in ${!friends[*]}\ndo \necho \"$i - ${friends[$i]}\"\ndone\n\n```", "```\nzarrelli:~$ ./loop3.sh Mike - is a friend Anthony - is another friend\n\n```", "```\n#!/bin/bash\ndeclare -A friends\nfriends=([Mike]=\"is a friend\" [Anthony]=\"is another friend\")\nindexes=(${!friends[*]})\nfor ((i=0 ; i<${#friends[*]} ; i++));\ndo \necho \"${indexes[i]} - ${friends[${indexes[i]}]}\"\ndone\n\n```", "```\nzarrelli:~$ ./loop4.sh Mike - is a friend Anthony - is another friend\n\n```", "```\n#!/bin/bash\nif ((\"$1\" < \"$2\"))\nthen\necho \"Great! The integer $1 is less than $2\"\nelse\necho \"The integer $1 is not less than $2...\"\nfi\n\n```", "```\nzarrelli:~$ ./minor-no-function.sh 1 2 Great! The integer 1 is less than 2 Now, let's move part of the code into a function: #!/bin/bash minor() { if ((\"$1\" < \"$2\")) then echo \"Great! The integer $1 is less than $2\" else echo \"The integer $1 is not less than $2...\" fi } minor \"$1\" \"$2\"\n\n```", "```\nzarrelli:~$ ./test.sh 1 2 Great! The integer 1 is less than 2 What did we do? First, we see that a function declaration has the following structure: function_name() { instruction_1 … instruction_n }\n\n```", "```\nfunction _name() { instruction_1 … instruction_n }\n\n```", "```\nfunction function_name { instruction_1 … instruction_n }\n\n```", "```\nzarrelli:~$ print_me() { echo \"This is your input:\"; echo \"$1\"; } ; print_me 1 This is your input: 1\n\n```", "```\nfunction_name arg1 argn\n\n```", "```\n#!/bin/bash\nminor()\n{\nif ((\"$1\" < \"$2\"))\nthen\necho \"Great! The integer $1 is less than $2\"\necho \"Assigning \\$1 to the variable \\\"var\\\"\" \nvar=\"$1\"\necho \"The value of var inside the function is: $var\"\nelse\necho \"The integer $1 is not less than $2...\"\nfi\n}\necho \"The value of var outside the function before it is triggered is: $var\"\nminor \"$1\" \"$2\"\necho \"The value of var outside the function after it is triggered is: $var\"\n\n```", "```\nzarrelli:~$ ./minor-function.sh 1 2 The value of var outside the function before it is triggered is: Great! The integer 1 is less than 2 Assigning S1 to the variable \"var\" The value of var inside the function is: 1 The value of var outside the function after it is triggered is: 1\n\n```", "```\nlocal var= \"$1\"\n\n```", "```\nzarrelli:~$ ./minor-function.sh 1 2 The value of var outside the function before it is triggered is: Great! The integer 1 is less than 2 Assigning S1 to the variable \"var\" The value of var inside the function is: 1 The value of var outside the function after it is triggered is: \n\n```", "```\n#!/bin/bash\nOK=10\nNOT_OK=50\nminor()\n{\nif ((\"$1\" < \"$2\"))\nthen\necho \"Returning the value of OK\"\nreturn \"$OK\"\nelse\necho \"Returning the value of NOT_OK\"\nreturn \"$NOT_OK\"\nfi\n}\nprint_return()\n{\nif ((\"$3\" == \"$OK\")) ; then\necho \"Great! The integer $1 is less than $2\"\nexit 0\nelif ((\"$3\" == \"$NOT_OK\")) ; then\necho \"The integer $1 is not less than $2...\"\nexit 1\nelse\necho \"Something gone wild...\"\necho \"The first integer has the value of $1 and the second of $2...\"\nexit 1\nfi \n}\nminor \"$1\" \"$2\"\nprint_return \"$1\" \"$2\" \"$?\"\n\n```", "```\nzarrelli:$ cat inference.sh #!/bin/bash FIRST_VALUE=SECOND_VALUE SECOND_VALUE=20 print_value() { echo \"The value of \\$1 is: $1\" } print_value \"${FIRST_VALUE}\" exit 0\n\n```", "```\nzarrelli:~$ ./inference.sh The value of $1 is: SECOND_VALUE\n\n```", "```\nzarrelli:~$ ./inference.sh The value of $1 is: SECOND_VALUE The value of $1 is: 20\n\n```", "```\nzarrelli:~$ a=b ; b=c ; echo $a ; eval a=\\$$a ; echo $a b c\n\n```", "```\n#!/bin/bash\na10=20\nprint_value()\n{\necho -e\necho -e \"The name of the variable passed as \\$1 to the function is: $1\\n\"\nb20=\\$\"$1\"\necho -e \"b20 holds the reference to the content of the variable passed on the command line: $b20\\n\"\nc30=${b20//[[:punct:]][[:alpha:]]}\necho -e \"But playing with parameter substitution we got an untyped value out of it: $c30\\n\"\neval d40=\\$$1\ne50=$(($d40+$c30))\necho \"And we used it as in integer to add to the original value we received\"\necho -e \"as input so the integer extracted from the name of the variable added to the variable value is: $e50\\n\" \neval $1=$e50\necho -e \"Thanks to eval we assign the new value to the original input\\n\" \necho -e \"The value of \\$1 now is: $e50\\n\"\n}\necho -e\necho \"The value of a10 before triggering the function is: $a10\"\nprint_value a10\necho -e \"The value of a10 after triggering the function is: $a10\\n\"\nexit 0\n\n```", "```\nzarrelli:~$ ./dereference.sh The value of a10 before triggering the function is: 20 The name of the variable passed as $1 to the function is: a10 b20 holds the reference to the content of the variable passed on the command line: $a10 But playing with parameter substitution we got an untyped value out of it: 10 And we used it as in integer to add to the original value we received as input so the integer extracted from the name of the variable added to the variable value is: 30 Thanks to eval we assign the new value to the original input The value of $1 now is: 30 The value of a10 after triggering the function is: 30\n\n```", "```\nzarrelli:~$ x=10 ; y=5 ; { z=$(($x*$y)) ; echo \"Value of z inside the function: $z\" ; } ; echo \"Value of z outside the function: $z\" Value of z inside the function: 50 Value of z outside the function: 50\n\n```", "```\nzarrelli:~$ cat minor-function-return-message.sh #!/bin/bash OK=10 NOT_OK=50 minor() { if ((\"$1\" < \"$2\")) then echo \"Returning the value of OK\" return \"$OK\" else echo \"Returning the value of NOT_OK\" return \"$NOT_OK\" fi } message=$(minor \"$1\" \"$2\") echo \"$message\"\n\n```", "```\nzarrelli@moveaway:~/Documents/My books/Mastering bash/Chapter 5/Scripts$ ./minor-function-return-message.sh 1 2\n\n```", "```\nzarrelli:~$ cat redirect.sh #!/bin/bash file=friends.txt parse() { while read lineofile do echo $lineofile done }<$file parse\n\n```", "```\nzarrelli:~$ ./redirect.sh Anthony Dionisios Ilaria Mike Noel Tarek\n\n```"]